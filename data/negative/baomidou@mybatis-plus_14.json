{
  "id" : 14,
  "expression" : "ctx",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "047d6eab831f917bb5338ffc2f62611eac1be7d7",
  "filePath" : "mybatis-plus-generate/src/main/java/com/baomidou/mybatisplus/generator/AutoGenerator.java",
  "occurrences" : 31,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 165,
      "startColumnNumber" : 16,
      "endLineNumber" : 165,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 165,
        "startColumnNumber" : 16,
        "endLineNumber" : 165,
        "endColumnNumber" : 56
      },
      "nodeContext" : "ctx.put(\"cfg\",injectionConfig.getMap())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 165,
        "startColumnNumber" : 16,
        "endLineNumber" : 165,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ctx.put(\"cfg\",injectionConfig.getMap());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 160,
        "startColumnNumber" : 41,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  injectionConfig.initMap();\n  ctx.put(\"cfg\",injectionConfig.getMap());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 160,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (null != injectionConfig) {\n  injectionConfig.initMap();\n  ctx.put(\"cfg\",injectionConfig.getMap());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 165,
        "startColumnNumber" : 16,
        "endLineNumber" : 165,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ctx.put(\"cfg\",injectionConfig.getMap());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 203,
      "startColumnNumber" : 16,
      "endLineNumber" : 203,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 203,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 116
      },
      "nodeContext" : "ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 203,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 117
      },
      "nodeContext" : "ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 202,
        "startColumnNumber" : 77,
        "endLineNumber" : 205,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n  ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 304,
        "startLineNumber" : 202,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n  ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n  ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 203,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 117
      },
      "nodeContext" : "ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 204,
      "startColumnNumber" : 16,
      "endLineNumber" : 204,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 204,
        "startColumnNumber" : 16,
        "endLineNumber" : 204,
        "endColumnNumber" : 104
      },
      "nodeContext" : "ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 204,
        "startColumnNumber" : 16,
        "endLineNumber" : 204,
        "endColumnNumber" : 105
      },
      "nodeContext" : "ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 202,
        "startColumnNumber" : 77,
        "endLineNumber" : 205,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n  ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 304,
        "startLineNumber" : 202,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n  ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n  ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 204,
        "startColumnNumber" : 16,
        "endLineNumber" : 204,
        "endColumnNumber" : 105
      },
      "nodeContext" : "ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 207,
      "startColumnNumber" : 12,
      "endLineNumber" : 207,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 207,
        "startColumnNumber" : 12,
        "endLineNumber" : 207,
        "endColumnNumber" : 94
      },
      "nodeContext" : "ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 207,
        "startColumnNumber" : 12,
        "endLineNumber" : 207,
        "endColumnNumber" : 95
      },
      "nodeContext" : "ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 207,
        "startColumnNumber" : 12,
        "endLineNumber" : 207,
        "endColumnNumber" : 95
      },
      "nodeContext" : "ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 208,
      "startColumnNumber" : 12,
      "endLineNumber" : 208,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 208,
        "startColumnNumber" : 12,
        "endLineNumber" : 208,
        "endColumnNumber" : 43
      },
      "nodeContext" : "ctx.put(\"package\",packageInfo)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 208,
        "startColumnNumber" : 12,
        "endLineNumber" : 208,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ctx.put(\"package\",packageInfo);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 208,
        "startColumnNumber" : 12,
        "endLineNumber" : 208,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ctx.put(\"package\",packageInfo);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 210,
      "startColumnNumber" : 12,
      "endLineNumber" : 210,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 210,
        "startColumnNumber" : 12,
        "endLineNumber" : 210,
        "endColumnNumber" : 63
      },
      "nodeContext" : "ctx.put(\"author\",globalConfig.getAuthor() + \"123\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 210,
        "startColumnNumber" : 12,
        "endLineNumber" : 210,
        "endColumnNumber" : 64
      },
      "nodeContext" : "ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 210,
        "startColumnNumber" : 12,
        "endLineNumber" : 210,
        "endColumnNumber" : 64
      },
      "nodeContext" : "ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 211,
      "startColumnNumber" : 12,
      "endLineNumber" : 211,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 108
      },
      "nodeContext" : "ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 109
      },
      "nodeContext" : "ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 109
      },
      "nodeContext" : "ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 212,
      "startColumnNumber" : 12,
      "endLineNumber" : 212,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 212,
        "endColumnNumber" : 97
      },
      "nodeContext" : "ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 212,
        "endColumnNumber" : 98
      },
      "nodeContext" : "ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 212,
        "endColumnNumber" : 98
      },
      "nodeContext" : "ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 213,
      "startColumnNumber" : 12,
      "endLineNumber" : 213,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 213,
        "startColumnNumber" : 12,
        "endLineNumber" : 213,
        "endColumnNumber" : 89
      },
      "nodeContext" : "ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 213,
        "startColumnNumber" : 12,
        "endLineNumber" : 213,
        "endColumnNumber" : 90
      },
      "nodeContext" : "ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 213,
        "startColumnNumber" : 12,
        "endLineNumber" : 213,
        "endColumnNumber" : 90
      },
      "nodeContext" : "ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 214,
      "startColumnNumber" : 12,
      "endLineNumber" : 214,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 214,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 66
      },
      "nodeContext" : "ctx.put(\"activeRecord\",globalConfig.isActiveRecord())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 214,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 67
      },
      "nodeContext" : "ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 214,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 67
      },
      "nodeContext" : "ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 215,
      "startColumnNumber" : 12,
      "endLineNumber" : 215,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 215,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ctx.put(\"kotlin\",globalConfig.isKotlin())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 215,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ctx.put(\"kotlin\",globalConfig.isKotlin());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 215,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ctx.put(\"kotlin\",globalConfig.isKotlin());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 216,
      "startColumnNumber" : 12,
      "endLineNumber" : 216,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 216,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 33
      },
      "nodeContext" : "ctx.put(\"date\",date)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 216,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 34
      },
      "nodeContext" : "ctx.put(\"date\",date);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 216,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 34
      },
      "nodeContext" : "ctx.put(\"date\",date);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 217,
      "startColumnNumber" : 12,
      "endLineNumber" : 217,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 39
      },
      "nodeContext" : "ctx.put(\"table\",tableInfo)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 40
      },
      "nodeContext" : "ctx.put(\"table\",tableInfo);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 40
      },
      "nodeContext" : "ctx.put(\"table\",tableInfo);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 218,
      "startColumnNumber" : 12,
      "endLineNumber" : 218,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 218,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 64
      },
      "nodeContext" : "ctx.put(\"enableCache\",globalConfig.isEnableCache())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 218,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 65
      },
      "nodeContext" : "ctx.put(\"enableCache\",globalConfig.isEnableCache());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 218,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 65
      },
      "nodeContext" : "ctx.put(\"enableCache\",globalConfig.isEnableCache());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 219,
      "startColumnNumber" : 12,
      "endLineNumber" : 219,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 219,
        "startColumnNumber" : 12,
        "endLineNumber" : 219,
        "endColumnNumber" : 68
      },
      "nodeContext" : "ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 219,
        "startColumnNumber" : 12,
        "endLineNumber" : 219,
        "endColumnNumber" : 69
      },
      "nodeContext" : "ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 219,
        "startColumnNumber" : 12,
        "endLineNumber" : 219,
        "endColumnNumber" : 69
      },
      "nodeContext" : "ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 220,
      "startColumnNumber" : 12,
      "endLineNumber" : 220,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 220,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 220,
        "endColumnNumber" : 71
      },
      "nodeContext" : "ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 220,
        "endColumnNumber" : 71
      },
      "nodeContext" : "ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 221,
      "startColumnNumber" : 12,
      "endLineNumber" : 221,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 221,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 56
      },
      "nodeContext" : "ctx.put(\"entity\",tableInfo.getEntityName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 221,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ctx.put(\"entity\",tableInfo.getEntityName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 221,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ctx.put(\"entity\",tableInfo.getEntityName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 222,
      "startColumnNumber" : 12,
      "endLineNumber" : 222,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 222,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 96
      },
      "nodeContext" : "ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 222,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 97
      },
      "nodeContext" : "ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 222,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 97
      },
      "nodeContext" : "ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 223,
      "startColumnNumber" : 12,
      "endLineNumber" : 223,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 223,
        "startColumnNumber" : 12,
        "endLineNumber" : 223,
        "endColumnNumber" : 92
      },
      "nodeContext" : "ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 223,
        "startColumnNumber" : 12,
        "endLineNumber" : 223,
        "endColumnNumber" : 93
      },
      "nodeContext" : "ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 223,
        "startColumnNumber" : 12,
        "endLineNumber" : 223,
        "endColumnNumber" : 93
      },
      "nodeContext" : "ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 224,
      "startColumnNumber" : 12,
      "endLineNumber" : 224,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 224,
        "startColumnNumber" : 12,
        "endLineNumber" : 224,
        "endColumnNumber" : 90
      },
      "nodeContext" : "ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 224,
        "startColumnNumber" : 12,
        "endLineNumber" : 224,
        "endColumnNumber" : 91
      },
      "nodeContext" : "ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 224,
        "startColumnNumber" : 12,
        "endLineNumber" : 224,
        "endColumnNumber" : 91
      },
      "nodeContext" : "ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 225,
      "startColumnNumber" : 12,
      "endLineNumber" : 225,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 225,
        "startColumnNumber" : 12,
        "endLineNumber" : 225,
        "endColumnNumber" : 122
      },
      "nodeContext" : "ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 225,
        "startColumnNumber" : 12,
        "endLineNumber" : 225,
        "endColumnNumber" : 123
      },
      "nodeContext" : "ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 225,
        "startColumnNumber" : 12,
        "endLineNumber" : 225,
        "endColumnNumber" : 123
      },
      "nodeContext" : "ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 226,
      "startColumnNumber" : 12,
      "endLineNumber" : 226,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 226,
        "startColumnNumber" : 12,
        "endLineNumber" : 226,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ctx.put(\"superEntityClass\",superEntityClass)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 226,
        "startColumnNumber" : 12,
        "endLineNumber" : 226,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ctx.put(\"superEntityClass\",superEntityClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 226,
        "startColumnNumber" : 12,
        "endLineNumber" : 226,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ctx.put(\"superEntityClass\",superEntityClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 227,
      "startColumnNumber" : 12,
      "endLineNumber" : 227,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 227,
        "startColumnNumber" : 12,
        "endLineNumber" : 227,
        "endColumnNumber" : 76
      },
      "nodeContext" : "ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 227,
        "startColumnNumber" : 12,
        "endLineNumber" : 227,
        "endColumnNumber" : 77
      },
      "nodeContext" : "ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 227,
        "startColumnNumber" : 12,
        "endLineNumber" : 227,
        "endColumnNumber" : 77
      },
      "nodeContext" : "ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 228,
      "startColumnNumber" : 12,
      "endLineNumber" : 228,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 228,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ctx.put(\"superMapperClass\",superMapperClass)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 228,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ctx.put(\"superMapperClass\",superMapperClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 228,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ctx.put(\"superMapperClass\",superMapperClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 229,
      "startColumnNumber" : 12,
      "endLineNumber" : 229,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 229,
        "startColumnNumber" : 12,
        "endLineNumber" : 229,
        "endColumnNumber" : 78
      },
      "nodeContext" : "ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 229,
        "startColumnNumber" : 12,
        "endLineNumber" : 229,
        "endColumnNumber" : 79
      },
      "nodeContext" : "ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 229,
        "startColumnNumber" : 12,
        "endLineNumber" : 229,
        "endColumnNumber" : 79
      },
      "nodeContext" : "ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 230,
      "startColumnNumber" : 12,
      "endLineNumber" : 230,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 230,
        "startColumnNumber" : 12,
        "endLineNumber" : 230,
        "endColumnNumber" : 59
      },
      "nodeContext" : "ctx.put(\"superServiceClass\",superServiceClass)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 230,
        "startColumnNumber" : 12,
        "endLineNumber" : 230,
        "endColumnNumber" : 60
      },
      "nodeContext" : "ctx.put(\"superServiceClass\",superServiceClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 230,
        "startColumnNumber" : 12,
        "endLineNumber" : 230,
        "endColumnNumber" : 60
      },
      "nodeContext" : "ctx.put(\"superServiceClass\",superServiceClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 231,
      "startColumnNumber" : 12,
      "endLineNumber" : 231,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 231,
        "startColumnNumber" : 12,
        "endLineNumber" : 231,
        "endColumnNumber" : 86
      },
      "nodeContext" : "ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 231,
        "startColumnNumber" : 12,
        "endLineNumber" : 231,
        "endColumnNumber" : 87
      },
      "nodeContext" : "ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 231,
        "startColumnNumber" : 12,
        "endLineNumber" : 231,
        "endColumnNumber" : 87
      },
      "nodeContext" : "ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 232,
      "startColumnNumber" : 12,
      "endLineNumber" : 232,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 232,
        "startColumnNumber" : 12,
        "endLineNumber" : 232,
        "endColumnNumber" : 67
      },
      "nodeContext" : "ctx.put(\"superServiceImplClass\",superServiceImplClass)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 232,
        "startColumnNumber" : 12,
        "endLineNumber" : 232,
        "endColumnNumber" : 68
      },
      "nodeContext" : "ctx.put(\"superServiceImplClass\",superServiceImplClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 232,
        "startColumnNumber" : 12,
        "endLineNumber" : 232,
        "endColumnNumber" : 68
      },
      "nodeContext" : "ctx.put(\"superServiceImplClass\",superServiceImplClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 233,
      "startColumnNumber" : 12,
      "endLineNumber" : 233,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 233,
        "startColumnNumber" : 12,
        "endLineNumber" : 233,
        "endColumnNumber" : 84
      },
      "nodeContext" : "ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 233,
        "startColumnNumber" : 12,
        "endLineNumber" : 233,
        "endColumnNumber" : 85
      },
      "nodeContext" : "ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 233,
        "startColumnNumber" : 12,
        "endLineNumber" : 233,
        "endColumnNumber" : 85
      },
      "nodeContext" : "ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 234,
      "startColumnNumber" : 12,
      "endLineNumber" : 234,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 234,
        "startColumnNumber" : 12,
        "endLineNumber" : 234,
        "endColumnNumber" : 65
      },
      "nodeContext" : "ctx.put(\"superControllerClass\",superControllerClass)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 234,
        "startColumnNumber" : 12,
        "endLineNumber" : 234,
        "endColumnNumber" : 66
      },
      "nodeContext" : "ctx.put(\"superControllerClass\",superControllerClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 234,
        "startColumnNumber" : 12,
        "endLineNumber" : 234,
        "endColumnNumber" : 66
      },
      "nodeContext" : "ctx.put(\"superControllerClass\",superControllerClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  }, {
    "nodeContext" : "ctx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 235,
      "startColumnNumber" : 51,
      "endLineNumber" : 235,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 235,
        "startColumnNumber" : 12,
        "endLineNumber" : 235,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ctxData.put(tableInfo.getEntityName(),ctx)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 235,
        "startColumnNumber" : 12,
        "endLineNumber" : 235,
        "endColumnNumber" : 56
      },
      "nodeContext" : "ctxData.put(tableInfo.getEntityName(),ctx);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 235,
        "startColumnNumber" : 12,
        "endLineNumber" : 235,
        "endColumnNumber" : 56
      },
      "nodeContext" : "ctxData.put(tableInfo.getEntityName(),ctx);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.VelocityContext"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 165,
    "startColumnNumber" : 16,
    "endLineNumber" : 165,
    "endColumnNumber" : 19
  }, {
    "charLength" : 3,
    "startLineNumber" : 203,
    "startColumnNumber" : 16,
    "endLineNumber" : 203,
    "endColumnNumber" : 19
  }, {
    "charLength" : 3,
    "startLineNumber" : 204,
    "startColumnNumber" : 16,
    "endLineNumber" : 204,
    "endColumnNumber" : 19
  }, {
    "charLength" : 3,
    "startLineNumber" : 207,
    "startColumnNumber" : 12,
    "endLineNumber" : 207,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 208,
    "startColumnNumber" : 12,
    "endLineNumber" : 208,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 210,
    "startColumnNumber" : 12,
    "endLineNumber" : 210,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 211,
    "startColumnNumber" : 12,
    "endLineNumber" : 211,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 212,
    "startColumnNumber" : 12,
    "endLineNumber" : 212,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 213,
    "startColumnNumber" : 12,
    "endLineNumber" : 213,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 214,
    "startColumnNumber" : 12,
    "endLineNumber" : 214,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 215,
    "startColumnNumber" : 12,
    "endLineNumber" : 215,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 216,
    "startColumnNumber" : 12,
    "endLineNumber" : 216,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 217,
    "startColumnNumber" : 12,
    "endLineNumber" : 217,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 218,
    "startColumnNumber" : 12,
    "endLineNumber" : 218,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 219,
    "startColumnNumber" : 12,
    "endLineNumber" : 219,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 220,
    "startColumnNumber" : 12,
    "endLineNumber" : 220,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 221,
    "startColumnNumber" : 12,
    "endLineNumber" : 221,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 222,
    "startColumnNumber" : 12,
    "endLineNumber" : 222,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 223,
    "startColumnNumber" : 12,
    "endLineNumber" : 223,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 224,
    "startColumnNumber" : 12,
    "endLineNumber" : 224,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 225,
    "startColumnNumber" : 12,
    "endLineNumber" : 225,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 226,
    "startColumnNumber" : 12,
    "endLineNumber" : 226,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 227,
    "startColumnNumber" : 12,
    "endLineNumber" : 227,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 228,
    "startColumnNumber" : 12,
    "endLineNumber" : 228,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 229,
    "startColumnNumber" : 12,
    "endLineNumber" : 229,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 230,
    "startColumnNumber" : 12,
    "endLineNumber" : 230,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 231,
    "startColumnNumber" : 12,
    "endLineNumber" : 231,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 232,
    "startColumnNumber" : 12,
    "endLineNumber" : 232,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 233,
    "startColumnNumber" : 12,
    "endLineNumber" : 233,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 234,
    "startColumnNumber" : 12,
    "endLineNumber" : 234,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 235,
    "startColumnNumber" : 51,
    "endLineNumber" : 235,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 29,
    "layout" : 2
  } ]
}