{
  "id" : 22,
  "expression" : "unicode.length() == 4",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/impl/StringEscapeUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "unicode.length() == 4",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 318,
      "startColumnNumber" : 12,
      "endLineNumber" : 318,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 332,
        "startLineNumber" : 318,
        "startColumnNumber" : 8,
        "endLineNumber" : 326,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (unicode.length() == 4) {\n  int value=Integer.parseInt(unicode.toString(),16);\n  out.write((char)value);\n  unicode.setLength(0);\n  inUnicode=false;\n  hadSlash=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 478,
        "startLineNumber" : 314,
        "startColumnNumber" : 21,
        "endLineNumber" : 328,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  unicode.append(ch);\n  if (unicode.length() == 4) {\n    int value=Integer.parseInt(unicode.toString(),16);\n    out.write((char)value);\n    unicode.setLength(0);\n    inUnicode=false;\n    hadSlash=false;\n  }\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 493,
        "startLineNumber" : 314,
        "startColumnNumber" : 6,
        "endLineNumber" : 328,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (inUnicode) {\n  unicode.append(ch);\n  if (unicode.length() == 4) {\n    int value=Integer.parseInt(unicode.toString(),16);\n    out.write((char)value);\n    unicode.setLength(0);\n    inUnicode=false;\n    hadSlash=false;\n  }\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1519,
        "startLineNumber" : 312,
        "startColumnNumber" : 33,
        "endLineNumber" : 372,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  char ch=str.charAt(i);\n  if (inUnicode) {\n    unicode.append(ch);\n    if (unicode.length() == 4) {\n      int value=Integer.parseInt(unicode.toString(),16);\n      out.write((char)value);\n      unicode.setLength(0);\n      inUnicode=false;\n      hadSlash=false;\n    }\n    continue;\n  }\n  if (hadSlash) {\n    hadSlash=false;\nswitch (ch) {\ncase '\\\\':      out.write('\\\\');\n    break;\ncase '\\'':  out.write('\\'');\nbreak;\ncase '\\\"':out.write('\"');\nbreak;\ncase 'r':out.write('\\r');\nbreak;\ncase 'f':out.write('\\f');\nbreak;\ncase 't':out.write('\\t');\nbreak;\ncase 'n':out.write('\\n');\nbreak;\ncase 'b':out.write('\\b');\nbreak;\ncase 'u':{\ninUnicode=true;\nbreak;\n}\ndefault:out.write(ch);\nbreak;\n}\ncontinue;\n}\n else if (ch == '\\\\') {\nhadSlash=true;\ncontinue;\n}\nout.write(ch);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1548,
        "startLineNumber" : 312,
        "startColumnNumber" : 4,
        "endLineNumber" : 372,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < sz; i++) {\n  char ch=str.charAt(i);\n  if (inUnicode) {\n    unicode.append(ch);\n    if (unicode.length() == 4) {\n      int value=Integer.parseInt(unicode.toString(),16);\n      out.write((char)value);\n      unicode.setLength(0);\n      inUnicode=false;\n      hadSlash=false;\n    }\n    continue;\n  }\n  if (hadSlash) {\n    hadSlash=false;\nswitch (ch) {\ncase '\\\\':      out.write('\\\\');\n    break;\ncase '\\'':  out.write('\\'');\nbreak;\ncase '\\\"':out.write('\"');\nbreak;\ncase 'r':out.write('\\r');\nbreak;\ncase 'f':out.write('\\f');\nbreak;\ncase 't':out.write('\\t');\nbreak;\ncase 'n':out.write('\\n');\nbreak;\ncase 'b':out.write('\\b');\nbreak;\ncase 'u':{\ninUnicode=true;\nbreak;\n}\ndefault:out.write(ch);\nbreak;\n}\ncontinue;\n}\n else if (ch == '\\\\') {\nhadSlash=true;\ncontinue;\n}\nout.write(ch);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 171,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1993,
        "startLineNumber" : 301,
        "startColumnNumber" : 75,
        "endLineNumber" : 378,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (out == null) {\n    throw new IllegalArgumentException(\"The Writer must not be null\");\n  }\n  if (str == null) {\n    return;\n  }\n  int sz=str.length();\n  StringBuilder unicode=new StringBuilder();\n  boolean hadSlash=false;\n  boolean inUnicode=false;\n  for (int i=0; i < sz; i++) {\n    char ch=str.charAt(i);\n    if (inUnicode) {\n      unicode.append(ch);\n      if (unicode.length() == 4) {\n        int value=Integer.parseInt(unicode.toString(),16);\n        out.write((char)value);\n        unicode.setLength(0);\n        inUnicode=false;\n        hadSlash=false;\n      }\n      continue;\n    }\n    if (hadSlash) {\n      hadSlash=false;\nswitch (ch) {\ncase '\\\\':        out.write('\\\\');\n      break;\ncase '\\'':    out.write('\\'');\n  break;\ncase '\\\"':out.write('\"');\nbreak;\ncase 'r':out.write('\\r');\nbreak;\ncase 'f':out.write('\\f');\nbreak;\ncase 't':out.write('\\t');\nbreak;\ncase 'n':out.write('\\n');\nbreak;\ncase 'b':out.write('\\b');\nbreak;\ncase 'u':{\ninUnicode=true;\nbreak;\n}\ndefault:out.write(ch);\nbreak;\n}\ncontinue;\n}\n else if (ch == '\\\\') {\nhadSlash=true;\ncontinue;\n}\nout.write(ch);\n}\nif (hadSlash) {\nout.write('\\\\');\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 221,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2765,
        "startLineNumber" : 286,
        "startColumnNumber" : 2,
        "endLineNumber" : 378,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * <p>Unescapes any Java literals found in the <code>String</code> to a <code>Writer</code>.</p> <p></p> <p>For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code> into a newline character, unless the <code>'\\'</code> is preceded by another <code>'\\'</code>.</p> <p></p> <p>A <code>null</code> string input has no effect.</p>\n * @param out the <code>Writer</code> used to output unescaped characters\n * @param str the <code>String</code> to unescape, may be null\n * @throws IllegalArgumentException if the Writer is <code>null</code>\n * @throws java.io.IOException              if error occurs on underlying Writer\n */\npublic static void unescapeJava(Writer out,String str) throws Exception {\n  if (out == null) {\n    throw new IllegalArgumentException(\"The Writer must not be null\");\n  }\n  if (str == null) {\n    return;\n  }\n  int sz=str.length();\n  StringBuilder unicode=new StringBuilder();\n  boolean hadSlash=false;\n  boolean inUnicode=false;\n  for (int i=0; i < sz; i++) {\n    char ch=str.charAt(i);\n    if (inUnicode) {\n      unicode.append(ch);\n      if (unicode.length() == 4) {\n        int value=Integer.parseInt(unicode.toString(),16);\n        out.write((char)value);\n        unicode.setLength(0);\n        inUnicode=false;\n        hadSlash=false;\n      }\n      continue;\n    }\n    if (hadSlash) {\n      hadSlash=false;\nswitch (ch) {\ncase '\\\\':        out.write('\\\\');\n      break;\ncase '\\'':    out.write('\\'');\n  break;\ncase '\\\"':out.write('\"');\nbreak;\ncase 'r':out.write('\\r');\nbreak;\ncase 'f':out.write('\\f');\nbreak;\ncase 't':out.write('\\t');\nbreak;\ncase 'n':out.write('\\n');\nbreak;\ncase 'b':out.write('\\b');\nbreak;\ncase 'u':{\ninUnicode=true;\nbreak;\n}\ndefault:out.write(ch);\nbreak;\n}\ncontinue;\n}\n else if (ch == '\\\\') {\nhadSlash=true;\ncontinue;\n}\nout.write(ch);\n}\nif (hadSlash) {\nout.write('\\\\');\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 237,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 332,
        "startLineNumber" : 318,
        "startColumnNumber" : 8,
        "endLineNumber" : 326,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (unicode.length() == 4) {\n  int value=Integer.parseInt(unicode.toString(),16);\n  out.write((char)value);\n  unicode.setLength(0);\n  inUnicode=false;\n  hadSlash=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 7
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 318,
    "startColumnNumber" : 12,
    "endLineNumber" : 318,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}