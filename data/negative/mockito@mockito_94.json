{
  "id" : 94,
  "expression" : "i <= iterations",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/test/java/org/mockitousage/serialization/ParallelSerializationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i <= iterations",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 33,
      "startColumnNumber" : 24,
      "endLineNumber" : 33,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1983,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i <= iterations; i++) {\n  List<Future<?>> futures=new ArrayList<Future<?>>(threadingFactor);\n  final CyclicBarrier barrier_that_will_wait_until_threads_are_ready=new CyclicBarrier(threadingFactor);\n  for (int j=0; j < threadingFactor; j++) {\n    futures.add(executorService.submit(new Callable<Object>(){\n      public Object call() throws Exception {\n        barrier_that_will_wait_until_threads_are_ready.await();\n        randomCallOn(iMethods_that_store_invocations);\n        return SimpleSerializationUtil.serializeMock(iMethods_that_store_invocations).toByteArray();\n      }\n    }\n));\n    executorService.submit(new Callable<Object>(){\n      public Object call() throws Exception {\n        barrier_that_will_wait_until_threads_are_ready.await();\n        return iMethods_that_store_invocations.longObjectReturningMethod();\n      }\n    }\n);\n  }\n  for (  Future<?> future : futures) {\n    future.get();\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 130,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2327,
        "startLineNumber" : 24,
        "startColumnNumber" : 60,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int iterations=2;\n  int threadingFactor=200;\n  final ExecutorService executorService=Executors.newFixedThreadPool(threadingFactor);\n  final IMethods iMethods_that_store_invocations=mock(IMethods.class,withSettings().serializable());\n  for (int i=0; i <= iterations; i++) {\n    List<Future<?>> futures=new ArrayList<Future<?>>(threadingFactor);\n    final CyclicBarrier barrier_that_will_wait_until_threads_are_ready=new CyclicBarrier(threadingFactor);\n    for (int j=0; j < threadingFactor; j++) {\n      futures.add(executorService.submit(new Callable<Object>(){\n        public Object call() throws Exception {\n          barrier_that_will_wait_until_threads_are_ready.await();\n          randomCallOn(iMethods_that_store_invocations);\n          return SimpleSerializationUtil.serializeMock(iMethods_that_store_invocations).toByteArray();\n        }\n      }\n));\n      executorService.submit(new Callable<Object>(){\n        public Object call() throws Exception {\n          barrier_that_will_wait_until_threads_are_ready.await();\n          return iMethods_that_store_invocations.longObjectReturningMethod();\n        }\n      }\n);\n    }\n    for (    Future<?> future : futures) {\n      future.get();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2488,
        "startLineNumber" : 22,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void single_mock_being_serialized_in_different_classloaders_by_multiple_threads() throws ExecutionException, InterruptedException {\n  int iterations=2;\n  int threadingFactor=200;\n  final ExecutorService executorService=Executors.newFixedThreadPool(threadingFactor);\n  final IMethods iMethods_that_store_invocations=mock(IMethods.class,withSettings().serializable());\n  for (int i=0; i <= iterations; i++) {\n    List<Future<?>> futures=new ArrayList<Future<?>>(threadingFactor);\n    final CyclicBarrier barrier_that_will_wait_until_threads_are_ready=new CyclicBarrier(threadingFactor);\n    for (int j=0; j < threadingFactor; j++) {\n      futures.add(executorService.submit(new Callable<Object>(){\n        public Object call() throws Exception {\n          barrier_that_will_wait_until_threads_are_ready.await();\n          randomCallOn(iMethods_that_store_invocations);\n          return SimpleSerializationUtil.serializeMock(iMethods_that_store_invocations).toByteArray();\n        }\n      }\n));\n      executorService.submit(new Callable<Object>(){\n        public Object call() throws Exception {\n          barrier_that_will_wait_until_threads_are_ready.await();\n          return iMethods_that_store_invocations.longObjectReturningMethod();\n        }\n      }\n);\n    }\n    for (    Future<?> future : futures) {\n      future.get();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 176,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1983,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i <= iterations; i++) {\n  List<Future<?>> futures=new ArrayList<Future<?>>(threadingFactor);\n  final CyclicBarrier barrier_that_will_wait_until_threads_are_ready=new CyclicBarrier(threadingFactor);\n  for (int j=0; j < threadingFactor; j++) {\n    futures.add(executorService.submit(new Callable<Object>(){\n      public Object call() throws Exception {\n        barrier_that_will_wait_until_threads_are_ready.await();\n        randomCallOn(iMethods_that_store_invocations);\n        return SimpleSerializationUtil.serializeMock(iMethods_that_store_invocations).toByteArray();\n      }\n    }\n));\n    executorService.submit(new Callable<Object>(){\n      public Object call() throws Exception {\n        barrier_that_will_wait_until_threads_are_ready.await();\n        return iMethods_that_store_invocations.longObjectReturningMethod();\n      }\n    }\n);\n  }\n  for (  Future<?> future : futures) {\n    future.get();\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 130,
      "astHeight" : 15
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 33,
    "startColumnNumber" : 24,
    "endLineNumber" : 33,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}