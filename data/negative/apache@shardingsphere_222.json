{
  "id" : 222,
  "expression" : "engine.getCodecEngine()",
  "projectName" : "apache@shardingsphere",
  "commitID" : "897bcea9f4b0f5e33eb545470f28a35d68fccf60",
  "filePath" : "/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "engine.getCodecEngine()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 109,
      "startColumnNumber" : 13,
      "endLineNumber" : 109,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 109,
        "startColumnNumber" : 13,
        "endLineNumber" : 109,
        "endColumnNumber" : 89
      },
      "nodeContext" : "engine.getCodecEngine().createPacketPayload(message,StandardCharsets.UTF_8)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 90
      },
      "nodeContext" : "when(engine.getCodecEngine().createPacketPayload(message,StandardCharsets.UTF_8))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 110
      },
      "nodeContext" : "when(engine.getCodecEngine().createPacketPayload(message,StandardCharsets.UTF_8)).thenReturn(payload)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 111
      },
      "nodeContext" : "when(engine.getCodecEngine().createPacketPayload(message,StandardCharsets.UTF_8)).thenReturn(payload);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 843,
        "startLineNumber" : 104,
        "startColumnNumber" : 92,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n  when(engine.getCommandExecuteEngine().getCommandPacket(payload,commandPacketType,connectionSession)).thenReturn(commandPacket);\n  when(engine.getCommandExecuteEngine().getCommandExecutor(commandPacketType,commandPacket,connectionSession)).thenReturn(queryCommandExecutor);\n  when(engine.getCommandExecuteEngine().getCommandPacketType(payload)).thenReturn(commandPacketType);\n  when(engine.getCodecEngine().createPacketPayload(message,StandardCharsets.UTF_8)).thenReturn(payload);\n  CommandExecutorTask actual=new CommandExecutorTask(engine,connectionSession,handlerContext,message);\n  actual.run();\n  verify(queryCommandExecutor).close();\n  verify(backendConnection).closeExecutionResources();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 941,
        "startLineNumber" : 103,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void assertRunNeedFlushByFalse() throws SQLException, BackendConnectionException {\n  when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n  when(engine.getCommandExecuteEngine().getCommandPacket(payload,commandPacketType,connectionSession)).thenReturn(commandPacket);\n  when(engine.getCommandExecuteEngine().getCommandExecutor(commandPacketType,commandPacket,connectionSession)).thenReturn(queryCommandExecutor);\n  when(engine.getCommandExecuteEngine().getCommandPacketType(payload)).thenReturn(commandPacketType);\n  when(engine.getCodecEngine().createPacketPayload(message,StandardCharsets.UTF_8)).thenReturn(payload);\n  CommandExecutorTask actual=new CommandExecutorTask(engine,connectionSession,handlerContext,message);\n  actual.run();\n  verify(queryCommandExecutor).close();\n  verify(backendConnection).closeExecutionResources();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 105,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 111
      },
      "nodeContext" : "when(engine.getCodecEngine().createPacketPayload(message,StandardCharsets.UTF_8)).thenReturn(payload);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "org.apache.shardingsphere.db.protocol.codec.DatabasePacketCodecEngine<>"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 109,
    "startColumnNumber" : 13,
    "endLineNumber" : 109,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}