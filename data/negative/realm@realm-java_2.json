{
  "id" : 2,
  "expression" : "parent",
  "projectName" : "realm@realm-java",
  "commitID" : "230b72bbfac2e1755e8c2039b0917e6137211778",
  "filePath" : "realm/realm-library/src/main/java/io/realm/internal/UncheckedRow.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "parent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 243,
      "startColumnNumber" : 8,
      "endLineNumber" : 243,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 243,
        "startColumnNumber" : 8,
        "endLineNumber" : 243,
        "endColumnNumber" : 31
      },
      "nodeContext" : "parent.checkImmutable()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 243,
        "startColumnNumber" : 8,
        "endLineNumber" : 243,
        "endColumnNumber" : 32
      },
      "nodeContext" : "parent.checkImmutable();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1847,
        "startLineNumber" : 242,
        "startColumnNumber" : 54,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1911,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void setMixed(long columnKey,Mixed value){\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 243,
        "startColumnNumber" : 8,
        "endLineNumber" : 243,
        "endColumnNumber" : 32
      },
      "nodeContext" : "parent.checkImmutable();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.realm.internal.Table"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 243,
    "startColumnNumber" : 8,
    "endLineNumber" : 243,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ ]
}