{
  "id" : 366,
  "expression" : "type == Character.class",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/cli/converters/Converters.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "type == Character.class",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 109,
      "startColumnNumber" : 8,
      "endLineNumber" : 109,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 5,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (type == Character.class) {\n  return (Converter<T>)CharacterConverter.INSTANCE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1412,
        "startLineNumber" : 74,
        "startColumnNumber" : 62,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (type == String.class) {\n    return (Converter<T>)StringConverter.INSTANCE;\n  }\n  if (type == Boolean.class) {\n    return (Converter<T>)BooleanConverter.INSTANCE;\n  }\n  Converter<T> converter=ConstructorBasedConverter.getIfEligible(type);\n  if (converter != null) {\n    return converter;\n  }\n  converter=ValueOfBasedConverter.getIfEligible(type);\n  if (converter != null) {\n    return converter;\n  }\n  converter=FromBasedConverter.getIfEligible(type);\n  if (converter != null) {\n    return converter;\n  }\n  converter=FromStringBasedConverter.getIfEligible(type);\n  if (converter != null) {\n    return converter;\n  }\n  if (type == Character.class) {\n    return (Converter<T>)CharacterConverter.INSTANCE;\n  }\n  throw new NoSuchElementException(\"Cannot find a converter able to create instance of \" + type.getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 122,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1830,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Searches a suitable converter to convert String to the given type.\n * @param type the target type\n * @param < T >  the class\n * @return the parameter converter able to creates instances of the target type from String representations.\n * @throws NoSuchElementException if no converter can be found\n */\n@SuppressWarnings(\"unchecked\") private static <T>Converter<T> getConverter(Class<T> type){\n  if (type == String.class) {\n    return (Converter<T>)StringConverter.INSTANCE;\n  }\n  if (type == Boolean.class) {\n    return (Converter<T>)BooleanConverter.INSTANCE;\n  }\n  Converter<T> converter=ConstructorBasedConverter.getIfEligible(type);\n  if (converter != null) {\n    return converter;\n  }\n  converter=ValueOfBasedConverter.getIfEligible(type);\n  if (converter != null) {\n    return converter;\n  }\n  converter=FromBasedConverter.getIfEligible(type);\n  if (converter != null) {\n    return converter;\n  }\n  converter=FromStringBasedConverter.getIfEligible(type);\n  if (converter != null) {\n    return converter;\n  }\n  if (type == Character.class) {\n    return (Converter<T>)CharacterConverter.INSTANCE;\n  }\n  throw new NoSuchElementException(\"Cannot find a converter able to create instance of \" + type.getName());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 144,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (type == Character.class) {\n  return (Converter<T>)CharacterConverter.INSTANCE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 109,
    "startColumnNumber" : 8,
    "endLineNumber" : 109,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}