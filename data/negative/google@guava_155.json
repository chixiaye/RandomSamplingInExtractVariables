{
  "id" : 155,
  "expression" : "src.length",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava/src/com/google/common/collect/ObjectArrays.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "src.length",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 154,
      "startColumnNumber" : 47,
      "endLineNumber" : 154,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 58
      },
      "nodeContext" : "checkPositionIndexes(offset,offset + len,src.length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 59
      },
      "nodeContext" : "checkPositionIndexes(offset,offset + len,src.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 339,
        "startLineNumber" : 153,
        "startColumnNumber" : 60,
        "endLineNumber" : 163,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkPositionIndexes(offset,offset + len,src.length);\n  if (dst.length < len) {\n    dst=newArray(dst,len);\n  }\n else   if (dst.length > len) {\n    @Nullable Object[] unsoundlyCovariantArray=dst;\n    unsoundlyCovariantArray[len]=null;\n  }\n  System.arraycopy(src,offset,dst,0,len);\n  return dst;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1253,
        "startLineNumber" : 141,
        "startColumnNumber" : 2,
        "endLineNumber" : 163,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Implementation of  {@link Collection#toArray(Object[])} for collections backed by an objectarray. the runtime type of the returned array is that of the specified array. If the collection fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of the specified collection. <p>If the collection fits in the specified array with room to spare (i.e., the array has more elements than the collection), the element in the array immediately following the end of the collection is set to  {@code null}. This is useful in determining the length of the collection <i>only</i> if the caller knows that the collection does not contain any null elements.\n */\nstatic <T extends @Nullable Object>T[] toArrayImpl(@Nullable Object[] src,int offset,int len,T[] dst){\n  checkPositionIndexes(offset,offset + len,src.length);\n  if (dst.length < len) {\n    dst=newArray(dst,len);\n  }\n else   if (dst.length > len) {\n    @Nullable Object[] unsoundlyCovariantArray=dst;\n    unsoundlyCovariantArray[len]=null;\n  }\n  System.arraycopy(src,offset,dst,0,len);\n  return dst;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 93,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 59
      },
      "nodeContext" : "checkPositionIndexes(offset,offset + len,src.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 154,
    "startColumnNumber" : 47,
    "endLineNumber" : 154,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}