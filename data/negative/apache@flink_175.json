{
  "id" : 175,
  "expression" : "stateHandles",
  "projectName" : "apache@flink",
  "commitID" : "431f757aa3547833b3684f7e80dcc3ec8d2d8311",
  "filePath" : "flink-runtime/src/main/java/org/apache/flink/runtime/zookeeper/ZooKeeperStateHandleStore.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "stateHandles",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 370,
      "startColumnNumber" : 12,
      "endLineNumber" : 370,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 370,
        "startColumnNumber" : 12,
        "endLineNumber" : 370,
        "endColumnNumber" : 32
      },
      "nodeContext" : "stateHandles.clear()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 370,
        "startColumnNumber" : 12,
        "endLineNumber" : 370,
        "endColumnNumber" : 33
      },
      "nodeContext" : "stateHandles.clear();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1479,
        "startLineNumber" : 369,
        "startColumnNumber" : 25,
        "endLineNumber" : 404,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  stateHandles.clear();\n  Stat stat=client.checkExists().forPath(rootPath);\n  if (stat == null) {\n    break;\n  }\n else {\n    int initialCVersion=stat.getCversion();\n    final List<String> children=getNodeChildren.apply(rootPath);\n    for (    String path : children) {\n      path=rootPath + path;\n      try {\n        final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n        stateHandles.add(new Tuple2<>(stateHandle,path));\n      }\n catch (      NotExistException ignored) {\n        continue retry;\n      }\ncatch (      IOException ioException) {\n        LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n      }\n    }\n    int finalCVersion=client.checkExists().forPath(rootPath).getCversion();\n    success=initialCVersion == finalCVersion;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 1496,
        "startLineNumber" : 369,
        "startColumnNumber" : 8,
        "endLineNumber" : 404,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (!success) {\n  stateHandles.clear();\n  Stat stat=client.checkExists().forPath(rootPath);\n  if (stat == null) {\n    break;\n  }\n else {\n    int initialCVersion=stat.getCversion();\n    final List<String> children=getNodeChildren.apply(rootPath);\n    for (    String path : children) {\n      path=rootPath + path;\n      try {\n        final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n        stateHandles.add(new Tuple2<>(stateHandle,path));\n      }\n catch (      NotExistException ignored) {\n        continue retry;\n      }\ncatch (      IOException ioException) {\n        LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n      }\n    }\n    int finalCVersion=client.checkExists().forPath(rootPath).getCversion();\n    success=initialCVersion == finalCVersion;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 124,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1511,
        "startLineNumber" : 368,
        "startColumnNumber" : 8,
        "endLineNumber" : 404,
        "endColumnNumber" : 9
      },
      "nodeContext" : "retry: while (!success) {\n  stateHandles.clear();\n  Stat stat=client.checkExists().forPath(rootPath);\n  if (stat == null) {\n    break;\n  }\n else {\n    int initialCVersion=stat.getCversion();\n    final List<String> children=getNodeChildren.apply(rootPath);\n    for (    String path : children) {\n      path=rootPath + path;\n      try {\n        final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n        stateHandles.add(new Tuple2<>(stateHandle,path));\n      }\n catch (      NotExistException ignored) {\n        continue retry;\n      }\ncatch (      IOException ioException) {\n        LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n      }\n    }\n    int finalCVersion=client.checkExists().forPath(rootPath).getCversion();\n    success=initialCVersion == finalCVersion;\n  }\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 126,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1725,
        "startLineNumber" : 362,
        "startColumnNumber" : 29,
        "endLineNumber" : 407,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<Tuple2<RetrievableStateHandle<T>,String>> stateHandles=new ArrayList<>();\n  final String rootPath=\"/\";\n  boolean success=false;\n  retry:   while (!success) {\n    stateHandles.clear();\n    Stat stat=client.checkExists().forPath(rootPath);\n    if (stat == null) {\n      break;\n    }\n else {\n      int initialCVersion=stat.getCversion();\n      final List<String> children=getNodeChildren.apply(rootPath);\n      for (      String path : children) {\n        path=rootPath + path;\n        try {\n          final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n          stateHandles.add(new Tuple2<>(stateHandle,path));\n        }\n catch (        NotExistException ignored) {\n          continue retry;\n        }\ncatch (        IOException ioException) {\n          LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n        }\n      }\n      int finalCVersion=client.checkExists().forPath(rootPath).getCversion();\n      success=initialCVersion == finalCVersion;\n    }\n  }\n  return stateHandles;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1924,
        "startLineNumber" : 359,
        "startColumnNumber" : 4,
        "endLineNumber" : 407,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@VisibleForTesting List<Tuple2<RetrievableStateHandle<T>,String>> getAllAndLock(FunctionWithException<String,List<String>,Exception> getNodeChildren) throws Exception {\n  final List<Tuple2<RetrievableStateHandle<T>,String>> stateHandles=new ArrayList<>();\n  final String rootPath=\"/\";\n  boolean success=false;\n  retry:   while (!success) {\n    stateHandles.clear();\n    Stat stat=client.checkExists().forPath(rootPath);\n    if (stat == null) {\n      break;\n    }\n else {\n      int initialCVersion=stat.getCversion();\n      final List<String> children=getNodeChildren.apply(rootPath);\n      for (      String path : children) {\n        path=rootPath + path;\n        try {\n          final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n          stateHandles.add(new Tuple2<>(stateHandle,path));\n        }\n catch (        NotExistException ignored) {\n          continue retry;\n        }\ncatch (        IOException ioException) {\n          LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n        }\n      }\n      int finalCVersion=client.checkExists().forPath(rootPath).getCversion();\n      success=initialCVersion == finalCVersion;\n    }\n  }\n  return stateHandles;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 195,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 370,
        "startColumnNumber" : 12,
        "endLineNumber" : 370,
        "endColumnNumber" : 33
      },
      "nodeContext" : "stateHandles.clear();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.flink.api.java.tuple.Tuple2<org.apache.flink.runtime.state.RetrievableStateHandle<T>,java.lang.String>>"
  }, {
    "nodeContext" : "stateHandles",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 386,
      "startColumnNumber" : 24,
      "endLineNumber" : 386,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 386,
        "startColumnNumber" : 24,
        "endLineNumber" : 386,
        "endColumnNumber" : 73
      },
      "nodeContext" : "stateHandles.add(new Tuple2<>(stateHandle,path))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 386,
        "startColumnNumber" : 24,
        "endLineNumber" : 386,
        "endColumnNumber" : 74
      },
      "nodeContext" : "stateHandles.add(new Tuple2<>(stateHandle,path));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 384,
        "startColumnNumber" : 24,
        "endLineNumber" : 387,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n  stateHandles.add(new Tuple2<>(stateHandle,path));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 688,
        "startLineNumber" : 384,
        "startColumnNumber" : 20,
        "endLineNumber" : 396,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n  stateHandles.add(new Tuple2<>(stateHandle,path));\n}\n catch (NotExistException ignored) {\n  continue retry;\n}\ncatch (IOException ioException) {\n  LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 773,
        "startLineNumber" : 381,
        "startColumnNumber" : 45,
        "endLineNumber" : 397,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  path=rootPath + path;\n  try {\n    final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n    stateHandles.add(new Tuple2<>(stateHandle,path));\n  }\n catch (  NotExistException ignored) {\n    continue retry;\n  }\ncatch (  IOException ioException) {\n    LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 802,
        "startLineNumber" : 381,
        "startColumnNumber" : 16,
        "endLineNumber" : 397,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (String path : children) {\n  path=rootPath + path;\n  try {\n    final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n    stateHandles.add(new Tuple2<>(stateHandle,path));\n  }\n catch (  NotExistException ignored) {\n    continue retry;\n  }\ncatch (  IOException ioException) {\n    LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1264,
        "startLineNumber" : 375,
        "startColumnNumber" : 19,
        "endLineNumber" : 403,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int initialCVersion=stat.getCversion();\n  final List<String> children=getNodeChildren.apply(rootPath);\n  for (  String path : children) {\n    path=rootPath + path;\n    try {\n      final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n      stateHandles.add(new Tuple2<>(stateHandle,path));\n    }\n catch (    NotExistException ignored) {\n      continue retry;\n    }\ncatch (    IOException ioException) {\n      LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n    }\n  }\n  int finalCVersion=client.checkExists().forPath(rootPath).getCversion();\n  success=initialCVersion == finalCVersion;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1356,
        "startLineNumber" : 373,
        "startColumnNumber" : 12,
        "endLineNumber" : 403,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (stat == null) {\n  break;\n}\n else {\n  int initialCVersion=stat.getCversion();\n  final List<String> children=getNodeChildren.apply(rootPath);\n  for (  String path : children) {\n    path=rootPath + path;\n    try {\n      final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n      stateHandles.add(new Tuple2<>(stateHandle,path));\n    }\n catch (    NotExistException ignored) {\n      continue retry;\n    }\ncatch (    IOException ioException) {\n      LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n    }\n  }\n  int finalCVersion=client.checkExists().forPath(rootPath).getCversion();\n  success=initialCVersion == finalCVersion;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 105,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1479,
        "startLineNumber" : 369,
        "startColumnNumber" : 25,
        "endLineNumber" : 404,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  stateHandles.clear();\n  Stat stat=client.checkExists().forPath(rootPath);\n  if (stat == null) {\n    break;\n  }\n else {\n    int initialCVersion=stat.getCversion();\n    final List<String> children=getNodeChildren.apply(rootPath);\n    for (    String path : children) {\n      path=rootPath + path;\n      try {\n        final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n        stateHandles.add(new Tuple2<>(stateHandle,path));\n      }\n catch (      NotExistException ignored) {\n        continue retry;\n      }\ncatch (      IOException ioException) {\n        LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n      }\n    }\n    int finalCVersion=client.checkExists().forPath(rootPath).getCversion();\n    success=initialCVersion == finalCVersion;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 1496,
        "startLineNumber" : 369,
        "startColumnNumber" : 8,
        "endLineNumber" : 404,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (!success) {\n  stateHandles.clear();\n  Stat stat=client.checkExists().forPath(rootPath);\n  if (stat == null) {\n    break;\n  }\n else {\n    int initialCVersion=stat.getCversion();\n    final List<String> children=getNodeChildren.apply(rootPath);\n    for (    String path : children) {\n      path=rootPath + path;\n      try {\n        final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n        stateHandles.add(new Tuple2<>(stateHandle,path));\n      }\n catch (      NotExistException ignored) {\n        continue retry;\n      }\ncatch (      IOException ioException) {\n        LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n      }\n    }\n    int finalCVersion=client.checkExists().forPath(rootPath).getCversion();\n    success=initialCVersion == finalCVersion;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 124,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1511,
        "startLineNumber" : 368,
        "startColumnNumber" : 8,
        "endLineNumber" : 404,
        "endColumnNumber" : 9
      },
      "nodeContext" : "retry: while (!success) {\n  stateHandles.clear();\n  Stat stat=client.checkExists().forPath(rootPath);\n  if (stat == null) {\n    break;\n  }\n else {\n    int initialCVersion=stat.getCversion();\n    final List<String> children=getNodeChildren.apply(rootPath);\n    for (    String path : children) {\n      path=rootPath + path;\n      try {\n        final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n        stateHandles.add(new Tuple2<>(stateHandle,path));\n      }\n catch (      NotExistException ignored) {\n        continue retry;\n      }\ncatch (      IOException ioException) {\n        LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n      }\n    }\n    int finalCVersion=client.checkExists().forPath(rootPath).getCversion();\n    success=initialCVersion == finalCVersion;\n  }\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 126,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1725,
        "startLineNumber" : 362,
        "startColumnNumber" : 29,
        "endLineNumber" : 407,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<Tuple2<RetrievableStateHandle<T>,String>> stateHandles=new ArrayList<>();\n  final String rootPath=\"/\";\n  boolean success=false;\n  retry:   while (!success) {\n    stateHandles.clear();\n    Stat stat=client.checkExists().forPath(rootPath);\n    if (stat == null) {\n      break;\n    }\n else {\n      int initialCVersion=stat.getCversion();\n      final List<String> children=getNodeChildren.apply(rootPath);\n      for (      String path : children) {\n        path=rootPath + path;\n        try {\n          final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n          stateHandles.add(new Tuple2<>(stateHandle,path));\n        }\n catch (        NotExistException ignored) {\n          continue retry;\n        }\ncatch (        IOException ioException) {\n          LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n        }\n      }\n      int finalCVersion=client.checkExists().forPath(rootPath).getCversion();\n      success=initialCVersion == finalCVersion;\n    }\n  }\n  return stateHandles;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1924,
        "startLineNumber" : 359,
        "startColumnNumber" : 4,
        "endLineNumber" : 407,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@VisibleForTesting List<Tuple2<RetrievableStateHandle<T>,String>> getAllAndLock(FunctionWithException<String,List<String>,Exception> getNodeChildren) throws Exception {\n  final List<Tuple2<RetrievableStateHandle<T>,String>> stateHandles=new ArrayList<>();\n  final String rootPath=\"/\";\n  boolean success=false;\n  retry:   while (!success) {\n    stateHandles.clear();\n    Stat stat=client.checkExists().forPath(rootPath);\n    if (stat == null) {\n      break;\n    }\n else {\n      int initialCVersion=stat.getCversion();\n      final List<String> children=getNodeChildren.apply(rootPath);\n      for (      String path : children) {\n        path=rootPath + path;\n        try {\n          final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n          stateHandles.add(new Tuple2<>(stateHandle,path));\n        }\n catch (        NotExistException ignored) {\n          continue retry;\n        }\ncatch (        IOException ioException) {\n          LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n        }\n      }\n      int finalCVersion=client.checkExists().forPath(rootPath).getCversion();\n      success=initialCVersion == finalCVersion;\n    }\n  }\n  return stateHandles;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 195,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 386,
        "startColumnNumber" : 24,
        "endLineNumber" : 386,
        "endColumnNumber" : 74
      },
      "nodeContext" : "stateHandles.add(new Tuple2<>(stateHandle,path));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.flink.api.java.tuple.Tuple2<org.apache.flink.runtime.state.RetrievableStateHandle<T>,java.lang.String>>"
  }, {
    "nodeContext" : "stateHandles",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 406,
      "startColumnNumber" : 15,
      "endLineNumber" : 406,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 406,
        "startColumnNumber" : 8,
        "endLineNumber" : 406,
        "endColumnNumber" : 28
      },
      "nodeContext" : "return stateHandles;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1725,
        "startLineNumber" : 362,
        "startColumnNumber" : 29,
        "endLineNumber" : 407,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<Tuple2<RetrievableStateHandle<T>,String>> stateHandles=new ArrayList<>();\n  final String rootPath=\"/\";\n  boolean success=false;\n  retry:   while (!success) {\n    stateHandles.clear();\n    Stat stat=client.checkExists().forPath(rootPath);\n    if (stat == null) {\n      break;\n    }\n else {\n      int initialCVersion=stat.getCversion();\n      final List<String> children=getNodeChildren.apply(rootPath);\n      for (      String path : children) {\n        path=rootPath + path;\n        try {\n          final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n          stateHandles.add(new Tuple2<>(stateHandle,path));\n        }\n catch (        NotExistException ignored) {\n          continue retry;\n        }\ncatch (        IOException ioException) {\n          LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n        }\n      }\n      int finalCVersion=client.checkExists().forPath(rootPath).getCversion();\n      success=initialCVersion == finalCVersion;\n    }\n  }\n  return stateHandles;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1924,
        "startLineNumber" : 359,
        "startColumnNumber" : 4,
        "endLineNumber" : 407,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@VisibleForTesting List<Tuple2<RetrievableStateHandle<T>,String>> getAllAndLock(FunctionWithException<String,List<String>,Exception> getNodeChildren) throws Exception {\n  final List<Tuple2<RetrievableStateHandle<T>,String>> stateHandles=new ArrayList<>();\n  final String rootPath=\"/\";\n  boolean success=false;\n  retry:   while (!success) {\n    stateHandles.clear();\n    Stat stat=client.checkExists().forPath(rootPath);\n    if (stat == null) {\n      break;\n    }\n else {\n      int initialCVersion=stat.getCversion();\n      final List<String> children=getNodeChildren.apply(rootPath);\n      for (      String path : children) {\n        path=rootPath + path;\n        try {\n          final RetrievableStateHandle<T> stateHandle=getAndLock(path);\n          stateHandles.add(new Tuple2<>(stateHandle,path));\n        }\n catch (        NotExistException ignored) {\n          continue retry;\n        }\ncatch (        IOException ioException) {\n          LOG.warn(\"Could not get all ZooKeeper children. Node {} contained \" + \"corrupted data. Ignoring this node.\",path,ioException);\n        }\n      }\n      int finalCVersion=client.checkExists().forPath(rootPath).getCversion();\n      success=initialCVersion == finalCVersion;\n    }\n  }\n  return stateHandles;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 195,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 406,
        "startColumnNumber" : 8,
        "endLineNumber" : 406,
        "endColumnNumber" : 28
      },
      "nodeContext" : "return stateHandles;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.flink.api.java.tuple.Tuple2<org.apache.flink.runtime.state.RetrievableStateHandle<T>,java.lang.String>>"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 370,
    "startColumnNumber" : 12,
    "endLineNumber" : 370,
    "endColumnNumber" : 24
  }, {
    "charLength" : 12,
    "startLineNumber" : 386,
    "startColumnNumber" : 24,
    "endLineNumber" : 386,
    "endColumnNumber" : 36
  }, {
    "charLength" : 12,
    "startLineNumber" : 406,
    "startColumnNumber" : 15,
    "endLineNumber" : 406,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  } ]
}