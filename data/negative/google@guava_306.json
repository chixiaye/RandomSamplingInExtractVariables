{
  "id" : 306,
  "expression" : "entry.getKey()",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava/src/com/google/common/escape/CharEscaperBuilder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "entry.getKey()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 118,
      "startColumnNumber" : 13,
      "endLineNumber" : 118,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 118,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 28
      },
      "nodeContext" : "result[entry.getKey()]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 118,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 61
      },
      "nodeContext" : "result[entry.getKey()]=entry.getValue().toCharArray()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 118,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 62
      },
      "nodeContext" : "result[entry.getKey()]=entry.getValue().toCharArray();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 117,
        "startColumnNumber" : 58,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  result[entry.getKey()]=entry.getValue().toCharArray();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 117,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Entry<Character,String> entry : map.entrySet()) {\n  result[entry.getKey()]=entry.getValue().toCharArray();\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 115,
        "startColumnNumber" : 39,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  char[][] result=new char[max + 1][];\n  for (  Entry<Character,String> entry : map.entrySet()) {\n    result[entry.getKey()]=entry.getValue().toCharArray();\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 555,
        "startLineNumber" : 108,
        "startColumnNumber" : 2,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Convert this builder into an array of char[]s where the maximum index is the value of the highest character that has been seen. The array will be sparse in the sense that any unseen index will default to null.\n * @return a \"sparse\" array that holds the replacement mappings.\n */\npublic char[] @Nullable [] toArray(){\n  char[][] result=new char[max + 1][];\n  for (  Entry<Character,String> entry : map.entrySet()) {\n    result[entry.getKey()]=entry.getValue().toCharArray();\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 54,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 118,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 62
      },
      "nodeContext" : "result[entry.getKey()]=entry.getValue().toCharArray();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.Character"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 118,
    "startColumnNumber" : 13,
    "endLineNumber" : 118,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}