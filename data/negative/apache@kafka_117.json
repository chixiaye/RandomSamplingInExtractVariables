{
  "id" : 117,
  "expression" : "3L",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/integration/NamedTopologyIntegrationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "3L",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 730,
      "startColumnNumber" : 128,
      "endLineNumber" : 730,
      "endColumnNumber" : 130
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 730,
        "startColumnNumber" : 118,
        "endLineNumber" : 730,
        "endColumnNumber" : 131
      },
      "nodeContext" : "pair(\"A\",3L)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 730,
        "startColumnNumber" : 104,
        "endLineNumber" : 730,
        "endColumnNumber" : 132
      },
      "nodeContext" : "singletonList(pair(\"A\",3L))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 730,
        "startColumnNumber" : 96,
        "endLineNumber" : 730,
        "endColumnNumber" : 133
      },
      "nodeContext" : "equalTo(singletonList(pair(\"A\",3L)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 730,
        "startColumnNumber" : 12,
        "endLineNumber" : 730,
        "endColumnNumber" : 134
      },
      "nodeContext" : "assertThat(waitUntilMinKeyValueRecordsReceived(consumerConfig,OUTPUT_STREAM_1,1),equalTo(singletonList(pair(\"A\",3L))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 730,
        "startColumnNumber" : 12,
        "endLineNumber" : 730,
        "endColumnNumber" : 135
      },
      "nodeContext" : "assertThat(waitUntilMinKeyValueRecordsReceived(consumerConfig,OUTPUT_STREAM_1,1),equalTo(singletonList(pair(\"A\",3L))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3321,
        "startLineNumber" : 697,
        "startColumnNumber" : 12,
        "endLineNumber" : 751,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  CLUSTER.createTopic(EXISTING_STREAM,2,1);\n  produceToInputTopics(EXISTING_STREAM,STANDARD_INPUT_DATA);\n  setupSecondKafkaStreams();\n  topology1Builder.stream(EXISTING_STREAM).groupBy((k,v) -> k).count(IN_MEMORY_STORE).toStream().to(OUTPUT_STREAM_1);\n  topology1Builder2.stream(EXISTING_STREAM).groupBy((k,v) -> k).count(IN_MEMORY_STORE).toStream().to(OUTPUT_STREAM_1);\n  final TrackingExceptionHandler handler=new TrackingExceptionHandler();\n  streams.setUncaughtExceptionHandler(handler);\n  streams2.setUncaughtExceptionHandler(handler);\n  streams.start(topology1Builder.build());\n  streams2.start(topology1Builder2.build());\n  waitForApplicationState(asList(streams,streams2),State.RUNNING,STARTUP_TIMEOUT);\n  assertThat(waitUntilMinKeyValueRecordsReceived(consumerConfig,OUTPUT_STREAM_1,3),equalTo(COUNT_OUTPUT_DATA));\n  topology2Builder.stream(NEW_STREAM).groupBy((k,v) -> k).count(IN_MEMORY_STORE).toStream().to(OUTPUT_STREAM_2);\n  topology2Builder2.stream(NEW_STREAM).groupBy((k,v) -> k).count(IN_MEMORY_STORE).toStream().to(OUTPUT_STREAM_2);\n  assertThat(handler.nextError(TOPOLOGY_2),nullValue());\n  streams.addNamedTopology(topology2Builder.build());\n  streams2.addNamedTopology(topology2Builder2.build());\n  retryOnExceptionWithTimeout(() -> {\n    final Throwable error=handler.nextError(TOPOLOGY_2);\n    assertThat(error,notNullValue());\n    assertThat(error.getCause().getClass(),is(MissingSourceTopicException.class));\n  }\n);\n  produceToInputTopics(EXISTING_STREAM,singletonList(pair(\"A\",30L)));\n  assertThat(waitUntilMinKeyValueRecordsReceived(consumerConfig,OUTPUT_STREAM_1,1),equalTo(singletonList(pair(\"A\",3L))));\n  CLUSTER.createTopic(NEW_STREAM,2,1);\n  produceToInputTopics(NEW_STREAM,STANDARD_INPUT_DATA);\n  assertThat(waitUntilMinKeyValueRecordsReceived(consumerConfig,OUTPUT_STREAM_2,3),equalTo(COUNT_OUTPUT_DATA));\n  assertThat(streams.metadataForLocalThreads().size(),equalTo(2));\n  assertThat(streams2.metadataForLocalThreads().size(),equalTo(2));\n  final Set<String> localThreadsNames=streams.metadataForLocalThreads().stream().map(t -> extractThreadId(t.threadName())).collect(Collectors.toSet());\n  final Set<String> localThreadsNames2=streams2.metadataForLocalThreads().stream().map(t -> extractThreadId(t.threadName())).collect(Collectors.toSet());\n  assertThat(localThreadsNames.contains(\"StreamThread-1\"),is(true));\n  assertThat(localThreadsNames.contains(\"StreamThread-2\"),is(true));\n  assertThat(localThreadsNames2.contains(\"StreamThread-1\"),is(true));\n  assertThat(localThreadsNames2.contains(\"StreamThread-2\"),is(true));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 381,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3415,
        "startLineNumber" : 697,
        "startColumnNumber" : 8,
        "endLineNumber" : 753,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  CLUSTER.createTopic(EXISTING_STREAM,2,1);\n  produceToInputTopics(EXISTING_STREAM,STANDARD_INPUT_DATA);\n  setupSecondKafkaStreams();\n  topology1Builder.stream(EXISTING_STREAM).groupBy((k,v) -> k).count(IN_MEMORY_STORE).toStream().to(OUTPUT_STREAM_1);\n  topology1Builder2.stream(EXISTING_STREAM).groupBy((k,v) -> k).count(IN_MEMORY_STORE).toStream().to(OUTPUT_STREAM_1);\n  final TrackingExceptionHandler handler=new TrackingExceptionHandler();\n  streams.setUncaughtExceptionHandler(handler);\n  streams2.setUncaughtExceptionHandler(handler);\n  streams.start(topology1Builder.build());\n  streams2.start(topology1Builder2.build());\n  waitForApplicationState(asList(streams,streams2),State.RUNNING,STARTUP_TIMEOUT);\n  assertThat(waitUntilMinKeyValueRecordsReceived(consumerConfig,OUTPUT_STREAM_1,3),equalTo(COUNT_OUTPUT_DATA));\n  topology2Builder.stream(NEW_STREAM).groupBy((k,v) -> k).count(IN_MEMORY_STORE).toStream().to(OUTPUT_STREAM_2);\n  topology2Builder2.stream(NEW_STREAM).groupBy((k,v) -> k).count(IN_MEMORY_STORE).toStream().to(OUTPUT_STREAM_2);\n  assertThat(handler.nextError(TOPOLOGY_2),nullValue());\n  streams.addNamedTopology(topology2Builder.build());\n  streams2.addNamedTopology(topology2Builder2.build());\n  retryOnExceptionWithTimeout(() -> {\n    final Throwable error=handler.nextError(TOPOLOGY_2);\n    assertThat(error,notNullValue());\n    assertThat(error.getCause().getClass(),is(MissingSourceTopicException.class));\n  }\n);\n  produceToInputTopics(EXISTING_STREAM,singletonList(pair(\"A\",30L)));\n  assertThat(waitUntilMinKeyValueRecordsReceived(consumerConfig,OUTPUT_STREAM_1,1),equalTo(singletonList(pair(\"A\",3L))));\n  CLUSTER.createTopic(NEW_STREAM,2,1);\n  produceToInputTopics(NEW_STREAM,STANDARD_INPUT_DATA);\n  assertThat(waitUntilMinKeyValueRecordsReceived(consumerConfig,OUTPUT_STREAM_2,3),equalTo(COUNT_OUTPUT_DATA));\n  assertThat(streams.metadataForLocalThreads().size(),equalTo(2));\n  assertThat(streams2.metadataForLocalThreads().size(),equalTo(2));\n  final Set<String> localThreadsNames=streams.metadataForLocalThreads().stream().map(t -> extractThreadId(t.threadName())).collect(Collectors.toSet());\n  final Set<String> localThreadsNames2=streams2.metadataForLocalThreads().stream().map(t -> extractThreadId(t.threadName())).collect(Collectors.toSet());\n  assertThat(localThreadsNames.contains(\"StreamThread-1\"),is(true));\n  assertThat(localThreadsNames.contains(\"StreamThread-2\"),is(true));\n  assertThat(localThreadsNames2.contains(\"StreamThread-1\"),is(true));\n  assertThat(localThreadsNames2.contains(\"StreamThread-2\"),is(true));\n}\n  finally {\n  CLUSTER.deleteTopicsAndWait(EXISTING_STREAM,NEW_STREAM);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 389,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3431,
        "startLineNumber" : 696,
        "startColumnNumber" : 111,
        "endLineNumber" : 754,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    CLUSTER.createTopic(EXISTING_STREAM,2,1);\n    produceToInputTopics(EXISTING_STREAM,STANDARD_INPUT_DATA);\n    setupSecondKafkaStreams();\n    topology1Builder.stream(EXISTING_STREAM).groupBy((k,v) -> k).count(IN_MEMORY_STORE).toStream().to(OUTPUT_STREAM_1);\n    topology1Builder2.stream(EXISTING_STREAM).groupBy((k,v) -> k).count(IN_MEMORY_STORE).toStream().to(OUTPUT_STREAM_1);\n    final TrackingExceptionHandler handler=new TrackingExceptionHandler();\n    streams.setUncaughtExceptionHandler(handler);\n    streams2.setUncaughtExceptionHandler(handler);\n    streams.start(topology1Builder.build());\n    streams2.start(topology1Builder2.build());\n    waitForApplicationState(asList(streams,streams2),State.RUNNING,STARTUP_TIMEOUT);\n    assertThat(waitUntilMinKeyValueRecordsReceived(consumerConfig,OUTPUT_STREAM_1,3),equalTo(COUNT_OUTPUT_DATA));\n    topology2Builder.stream(NEW_STREAM).groupBy((k,v) -> k).count(IN_MEMORY_STORE).toStream().to(OUTPUT_STREAM_2);\n    topology2Builder2.stream(NEW_STREAM).groupBy((k,v) -> k).count(IN_MEMORY_STORE).toStream().to(OUTPUT_STREAM_2);\n    assertThat(handler.nextError(TOPOLOGY_2),nullValue());\n    streams.addNamedTopology(topology2Builder.build());\n    streams2.addNamedTopology(topology2Builder2.build());\n    retryOnExceptionWithTimeout(() -> {\n      final Throwable error=handler.nextError(TOPOLOGY_2);\n      assertThat(error,notNullValue());\n      assertThat(error.getCause().getClass(),is(MissingSourceTopicException.class));\n    }\n);\n    produceToInputTopics(EXISTING_STREAM,singletonList(pair(\"A\",30L)));\n    assertThat(waitUntilMinKeyValueRecordsReceived(consumerConfig,OUTPUT_STREAM_1,1),equalTo(singletonList(pair(\"A\",3L))));\n    CLUSTER.createTopic(NEW_STREAM,2,1);\n    produceToInputTopics(NEW_STREAM,STANDARD_INPUT_DATA);\n    assertThat(waitUntilMinKeyValueRecordsReceived(consumerConfig,OUTPUT_STREAM_2,3),equalTo(COUNT_OUTPUT_DATA));\n    assertThat(streams.metadataForLocalThreads().size(),equalTo(2));\n    assertThat(streams2.metadataForLocalThreads().size(),equalTo(2));\n    final Set<String> localThreadsNames=streams.metadataForLocalThreads().stream().map(t -> extractThreadId(t.threadName())).collect(Collectors.toSet());\n    final Set<String> localThreadsNames2=streams2.metadataForLocalThreads().stream().map(t -> extractThreadId(t.threadName())).collect(Collectors.toSet());\n    assertThat(localThreadsNames.contains(\"StreamThread-1\"),is(true));\n    assertThat(localThreadsNames.contains(\"StreamThread-2\"),is(true));\n    assertThat(localThreadsNames2.contains(\"StreamThread-1\"),is(true));\n    assertThat(localThreadsNames2.contains(\"StreamThread-2\"),is(true));\n  }\n  finally {\n    CLUSTER.deleteTopicsAndWait(EXISTING_STREAM,NEW_STREAM);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 390,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3548,
        "startLineNumber" : 695,
        "startColumnNumber" : 4,
        "endLineNumber" : 754,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldContinueProcessingOtherTopologiesWhenNewTopologyHasMissingInputTopics() throws Exception {\n  try {\n    CLUSTER.createTopic(EXISTING_STREAM,2,1);\n    produceToInputTopics(EXISTING_STREAM,STANDARD_INPUT_DATA);\n    setupSecondKafkaStreams();\n    topology1Builder.stream(EXISTING_STREAM).groupBy((k,v) -> k).count(IN_MEMORY_STORE).toStream().to(OUTPUT_STREAM_1);\n    topology1Builder2.stream(EXISTING_STREAM).groupBy((k,v) -> k).count(IN_MEMORY_STORE).toStream().to(OUTPUT_STREAM_1);\n    final TrackingExceptionHandler handler=new TrackingExceptionHandler();\n    streams.setUncaughtExceptionHandler(handler);\n    streams2.setUncaughtExceptionHandler(handler);\n    streams.start(topology1Builder.build());\n    streams2.start(topology1Builder2.build());\n    waitForApplicationState(asList(streams,streams2),State.RUNNING,STARTUP_TIMEOUT);\n    assertThat(waitUntilMinKeyValueRecordsReceived(consumerConfig,OUTPUT_STREAM_1,3),equalTo(COUNT_OUTPUT_DATA));\n    topology2Builder.stream(NEW_STREAM).groupBy((k,v) -> k).count(IN_MEMORY_STORE).toStream().to(OUTPUT_STREAM_2);\n    topology2Builder2.stream(NEW_STREAM).groupBy((k,v) -> k).count(IN_MEMORY_STORE).toStream().to(OUTPUT_STREAM_2);\n    assertThat(handler.nextError(TOPOLOGY_2),nullValue());\n    streams.addNamedTopology(topology2Builder.build());\n    streams2.addNamedTopology(topology2Builder2.build());\n    retryOnExceptionWithTimeout(() -> {\n      final Throwable error=handler.nextError(TOPOLOGY_2);\n      assertThat(error,notNullValue());\n      assertThat(error.getCause().getClass(),is(MissingSourceTopicException.class));\n    }\n);\n    produceToInputTopics(EXISTING_STREAM,singletonList(pair(\"A\",30L)));\n    assertThat(waitUntilMinKeyValueRecordsReceived(consumerConfig,OUTPUT_STREAM_1,1),equalTo(singletonList(pair(\"A\",3L))));\n    CLUSTER.createTopic(NEW_STREAM,2,1);\n    produceToInputTopics(NEW_STREAM,STANDARD_INPUT_DATA);\n    assertThat(waitUntilMinKeyValueRecordsReceived(consumerConfig,OUTPUT_STREAM_2,3),equalTo(COUNT_OUTPUT_DATA));\n    assertThat(streams.metadataForLocalThreads().size(),equalTo(2));\n    assertThat(streams2.metadataForLocalThreads().size(),equalTo(2));\n    final Set<String> localThreadsNames=streams.metadataForLocalThreads().stream().map(t -> extractThreadId(t.threadName())).collect(Collectors.toSet());\n    final Set<String> localThreadsNames2=streams2.metadataForLocalThreads().stream().map(t -> extractThreadId(t.threadName())).collect(Collectors.toSet());\n    assertThat(localThreadsNames.contains(\"StreamThread-1\"),is(true));\n    assertThat(localThreadsNames.contains(\"StreamThread-2\"),is(true));\n    assertThat(localThreadsNames2.contains(\"StreamThread-1\"),is(true));\n    assertThat(localThreadsNames2.contains(\"StreamThread-2\"),is(true));\n  }\n  finally {\n    CLUSTER.deleteTopicsAndWait(EXISTING_STREAM,NEW_STREAM);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 398,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 730,
        "startColumnNumber" : 12,
        "endLineNumber" : 730,
        "endColumnNumber" : 135
      },
      "nodeContext" : "assertThat(waitUntilMinKeyValueRecordsReceived(consumerConfig,OUTPUT_STREAM_1,1),equalTo(singletonList(pair(\"A\",3L))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 730,
    "startColumnNumber" : 128,
    "endLineNumber" : 730,
    "endColumnNumber" : 130
  } ],
  "layoutRelationDataList" : [ ]
}