{
  "id" : 88,
  "expression" : "otherNode",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava-tests/test/com/google/common/graph/ValueGraphTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "otherNode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 69,
      "startColumnNumber" : 56,
      "endLineNumber" : 69,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 69,
        "startColumnNumber" : 26,
        "endLineNumber" : 69,
        "endColumnNumber" : 66
      },
      "nodeContext" : "graph.hasEdgeConnecting(node,otherNode)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 69,
        "endColumnNumber" : 66
      },
      "nodeContext" : "hasEdge=graph.hasEdgeConnecting(node,otherNode)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 67
      },
      "nodeContext" : "boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 383,
        "startLineNumber" : 68,
        "startColumnNumber" : 46,
        "endLineNumber" : 74,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n  assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n  assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n  assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 423,
        "startLineNumber" : 68,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Integer otherNode : graph.nodes()) {\n  boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n  assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n  assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n  assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 911,
        "startLineNumber" : 60,
        "startColumnNumber" : 39,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n  assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n  assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n  assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n  assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n  assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n  for (  Integer otherNode : graph.nodes()) {\n    boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n    assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n    assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n    assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 946,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Integer node : graph.nodes()) {\n  assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n  assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n  assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n  assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n  assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n  assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n  for (  Integer otherNode : graph.nodes()) {\n    boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n    assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n    assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n    assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 146,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1605,
        "startLineNumber" : 47,
        "startColumnNumber" : 35,
        "endLineNumber" : 76,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertStronglyEquivalent(graph,Graphs.copyOf(graph));\n  assertStronglyEquivalent(graph,ImmutableValueGraph.copyOf(graph));\n  Graph<Integer> asGraph=graph.asGraph();\n  AbstractGraphTest.validateGraph(asGraph);\n  assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n  assertThat(graph.edges()).isEqualTo(asGraph.edges());\n  assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n  assertThat(graph.incidentEdgeOrder()).isEqualTo(asGraph.incidentEdgeOrder());\n  assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n  assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n  for (  Integer node : graph.nodes()) {\n    assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n    assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n    assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n    assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n    assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n    assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n    for (    Integer otherNode : graph.nodes()) {\n      boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n      assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n      assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n      assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1648,
        "startLineNumber" : 46,
        "startColumnNumber" : 2,
        "endLineNumber" : 76,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@After public void validateGraphState(){\n  assertStronglyEquivalent(graph,Graphs.copyOf(graph));\n  assertStronglyEquivalent(graph,ImmutableValueGraph.copyOf(graph));\n  Graph<Integer> asGraph=graph.asGraph();\n  AbstractGraphTest.validateGraph(asGraph);\n  assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n  assertThat(graph.edges()).isEqualTo(asGraph.edges());\n  assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n  assertThat(graph.incidentEdgeOrder()).isEqualTo(asGraph.incidentEdgeOrder());\n  assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n  assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n  for (  Integer node : graph.nodes()) {\n    assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n    assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n    assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n    assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n    assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n    assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n    for (    Integer otherNode : graph.nodes()) {\n      boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n      assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n      assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n      assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 251,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 67
      },
      "nodeContext" : "boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Integer"
  }, {
    "nodeContext" : "otherNode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 70,
      "startColumnNumber" : 70,
      "endLineNumber" : 70,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 70,
        "startColumnNumber" : 38,
        "endLineNumber" : 70,
        "endColumnNumber" : 80
      },
      "nodeContext" : "asGraph.hasEdgeConnecting(node,otherNode)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 81
      },
      "nodeContext" : "assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 82
      },
      "nodeContext" : "assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 383,
        "startLineNumber" : 68,
        "startColumnNumber" : 46,
        "endLineNumber" : 74,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n  assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n  assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n  assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 423,
        "startLineNumber" : 68,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Integer otherNode : graph.nodes()) {\n  boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n  assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n  assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n  assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 911,
        "startLineNumber" : 60,
        "startColumnNumber" : 39,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n  assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n  assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n  assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n  assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n  assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n  for (  Integer otherNode : graph.nodes()) {\n    boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n    assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n    assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n    assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 946,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Integer node : graph.nodes()) {\n  assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n  assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n  assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n  assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n  assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n  assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n  for (  Integer otherNode : graph.nodes()) {\n    boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n    assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n    assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n    assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 146,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1605,
        "startLineNumber" : 47,
        "startColumnNumber" : 35,
        "endLineNumber" : 76,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertStronglyEquivalent(graph,Graphs.copyOf(graph));\n  assertStronglyEquivalent(graph,ImmutableValueGraph.copyOf(graph));\n  Graph<Integer> asGraph=graph.asGraph();\n  AbstractGraphTest.validateGraph(asGraph);\n  assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n  assertThat(graph.edges()).isEqualTo(asGraph.edges());\n  assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n  assertThat(graph.incidentEdgeOrder()).isEqualTo(asGraph.incidentEdgeOrder());\n  assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n  assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n  for (  Integer node : graph.nodes()) {\n    assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n    assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n    assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n    assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n    assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n    assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n    for (    Integer otherNode : graph.nodes()) {\n      boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n      assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n      assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n      assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1648,
        "startLineNumber" : 46,
        "startColumnNumber" : 2,
        "endLineNumber" : 76,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@After public void validateGraphState(){\n  assertStronglyEquivalent(graph,Graphs.copyOf(graph));\n  assertStronglyEquivalent(graph,ImmutableValueGraph.copyOf(graph));\n  Graph<Integer> asGraph=graph.asGraph();\n  AbstractGraphTest.validateGraph(asGraph);\n  assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n  assertThat(graph.edges()).isEqualTo(asGraph.edges());\n  assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n  assertThat(graph.incidentEdgeOrder()).isEqualTo(asGraph.incidentEdgeOrder());\n  assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n  assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n  for (  Integer node : graph.nodes()) {\n    assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n    assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n    assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n    assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n    assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n    assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n    for (    Integer otherNode : graph.nodes()) {\n      boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n      assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n      assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n      assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 251,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 82
      },
      "nodeContext" : "assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Integer"
  }, {
    "nodeContext" : "otherNode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 71,
      "startColumnNumber" : 50,
      "endLineNumber" : 71,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 71,
        "startColumnNumber" : 19,
        "endLineNumber" : 71,
        "endColumnNumber" : 66
      },
      "nodeContext" : "graph.edgeValueOrDefault(node,otherNode,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 71,
        "startColumnNumber" : 19,
        "endLineNumber" : 71,
        "endColumnNumber" : 74
      },
      "nodeContext" : "graph.edgeValueOrDefault(node,otherNode,null) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 75
      },
      "nodeContext" : "assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 94
      },
      "nodeContext" : "assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 95
      },
      "nodeContext" : "assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 383,
        "startLineNumber" : 68,
        "startColumnNumber" : 46,
        "endLineNumber" : 74,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n  assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n  assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n  assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 423,
        "startLineNumber" : 68,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Integer otherNode : graph.nodes()) {\n  boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n  assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n  assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n  assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 911,
        "startLineNumber" : 60,
        "startColumnNumber" : 39,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n  assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n  assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n  assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n  assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n  assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n  for (  Integer otherNode : graph.nodes()) {\n    boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n    assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n    assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n    assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 946,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Integer node : graph.nodes()) {\n  assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n  assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n  assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n  assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n  assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n  assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n  for (  Integer otherNode : graph.nodes()) {\n    boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n    assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n    assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n    assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 146,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1605,
        "startLineNumber" : 47,
        "startColumnNumber" : 35,
        "endLineNumber" : 76,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertStronglyEquivalent(graph,Graphs.copyOf(graph));\n  assertStronglyEquivalent(graph,ImmutableValueGraph.copyOf(graph));\n  Graph<Integer> asGraph=graph.asGraph();\n  AbstractGraphTest.validateGraph(asGraph);\n  assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n  assertThat(graph.edges()).isEqualTo(asGraph.edges());\n  assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n  assertThat(graph.incidentEdgeOrder()).isEqualTo(asGraph.incidentEdgeOrder());\n  assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n  assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n  for (  Integer node : graph.nodes()) {\n    assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n    assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n    assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n    assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n    assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n    assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n    for (    Integer otherNode : graph.nodes()) {\n      boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n      assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n      assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n      assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1648,
        "startLineNumber" : 46,
        "startColumnNumber" : 2,
        "endLineNumber" : 76,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@After public void validateGraphState(){\n  assertStronglyEquivalent(graph,Graphs.copyOf(graph));\n  assertStronglyEquivalent(graph,ImmutableValueGraph.copyOf(graph));\n  Graph<Integer> asGraph=graph.asGraph();\n  AbstractGraphTest.validateGraph(asGraph);\n  assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n  assertThat(graph.edges()).isEqualTo(asGraph.edges());\n  assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n  assertThat(graph.incidentEdgeOrder()).isEqualTo(asGraph.incidentEdgeOrder());\n  assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n  assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n  for (  Integer node : graph.nodes()) {\n    assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n    assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n    assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n    assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n    assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n    assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n    for (    Integer otherNode : graph.nodes()) {\n      boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n      assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n      assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n      assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 251,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 95
      },
      "nodeContext" : "assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Integer"
  }, {
    "nodeContext" : "otherNode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 72,
      "startColumnNumber" : 51,
      "endLineNumber" : 72,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 72,
        "startColumnNumber" : 20,
        "endLineNumber" : 72,
        "endColumnNumber" : 70
      },
      "nodeContext" : "graph.edgeValueOrDefault(node,otherNode,DEFAULT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 72,
        "startColumnNumber" : 20,
        "endLineNumber" : 72,
        "endColumnNumber" : 86
      },
      "nodeContext" : "graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 72,
        "startColumnNumber" : 19,
        "endLineNumber" : 72,
        "endColumnNumber" : 86
      },
      "nodeContext" : "!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 31
      },
      "nodeContext" : "assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 32
      },
      "nodeContext" : "assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 383,
        "startLineNumber" : 68,
        "startColumnNumber" : 46,
        "endLineNumber" : 74,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n  assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n  assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n  assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 423,
        "startLineNumber" : 68,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Integer otherNode : graph.nodes()) {\n  boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n  assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n  assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n  assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 911,
        "startLineNumber" : 60,
        "startColumnNumber" : 39,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n  assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n  assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n  assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n  assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n  assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n  for (  Integer otherNode : graph.nodes()) {\n    boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n    assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n    assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n    assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 946,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Integer node : graph.nodes()) {\n  assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n  assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n  assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n  assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n  assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n  assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n  for (  Integer otherNode : graph.nodes()) {\n    boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n    assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n    assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n    assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 146,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1605,
        "startLineNumber" : 47,
        "startColumnNumber" : 35,
        "endLineNumber" : 76,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertStronglyEquivalent(graph,Graphs.copyOf(graph));\n  assertStronglyEquivalent(graph,ImmutableValueGraph.copyOf(graph));\n  Graph<Integer> asGraph=graph.asGraph();\n  AbstractGraphTest.validateGraph(asGraph);\n  assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n  assertThat(graph.edges()).isEqualTo(asGraph.edges());\n  assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n  assertThat(graph.incidentEdgeOrder()).isEqualTo(asGraph.incidentEdgeOrder());\n  assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n  assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n  for (  Integer node : graph.nodes()) {\n    assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n    assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n    assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n    assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n    assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n    assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n    for (    Integer otherNode : graph.nodes()) {\n      boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n      assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n      assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n      assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1648,
        "startLineNumber" : 46,
        "startColumnNumber" : 2,
        "endLineNumber" : 76,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@After public void validateGraphState(){\n  assertStronglyEquivalent(graph,Graphs.copyOf(graph));\n  assertStronglyEquivalent(graph,ImmutableValueGraph.copyOf(graph));\n  Graph<Integer> asGraph=graph.asGraph();\n  AbstractGraphTest.validateGraph(asGraph);\n  assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n  assertThat(graph.edges()).isEqualTo(asGraph.edges());\n  assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n  assertThat(graph.incidentEdgeOrder()).isEqualTo(asGraph.incidentEdgeOrder());\n  assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n  assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n  for (  Integer node : graph.nodes()) {\n    assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n    assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n    assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n    assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n    assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n    assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n    for (    Integer otherNode : graph.nodes()) {\n      boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n      assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n      assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n      assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 251,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Integer"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 69,
    "startColumnNumber" : 56,
    "endLineNumber" : 69,
    "endColumnNumber" : 65
  }, {
    "charLength" : 9,
    "startLineNumber" : 70,
    "startColumnNumber" : 70,
    "endLineNumber" : 70,
    "endColumnNumber" : 79
  }, {
    "charLength" : 9,
    "startLineNumber" : 71,
    "startColumnNumber" : 50,
    "endLineNumber" : 71,
    "endColumnNumber" : 59
  }, {
    "charLength" : 9,
    "startLineNumber" : 72,
    "startColumnNumber" : 51,
    "endLineNumber" : 72,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  } ]
}