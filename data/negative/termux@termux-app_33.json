{
  "id" : 33,
  "expression" : "8",
  "projectName" : "termux@termux-app",
  "commitID" : "36cc010a87c1cbc96f504540f1418c3c5fde96e5",
  "filePath" : "app/src/main/java/com/termux/view/TerminalRenderer.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "8",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 209,
      "startColumnNumber" : 64,
      "endLineNumber" : 209,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 209,
        "startColumnNumber" : 52,
        "endLineNumber" : 209,
        "endColumnNumber" : 65
      },
      "nodeContext" : "foreColor < 8",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 209,
        "startColumnNumber" : 44,
        "endLineNumber" : 209,
        "endColumnNumber" : 65
      },
      "nodeContext" : "bold && foreColor < 8",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 209,
        "startColumnNumber" : 44,
        "endLineNumber" : 209,
        "endColumnNumber" : 73
      },
      "nodeContext" : "bold && foreColor < 8 ? 8 : 0",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 209,
        "startColumnNumber" : 43,
        "endLineNumber" : 209,
        "endColumnNumber" : 74
      },
      "nodeContext" : "(bold && foreColor < 8 ? 8 : 0)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 209,
        "startColumnNumber" : 31,
        "endLineNumber" : 209,
        "endColumnNumber" : 74
      },
      "nodeContext" : "foreColor + (bold && foreColor < 8 ? 8 : 0)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 209,
        "startColumnNumber" : 13,
        "endLineNumber" : 209,
        "endColumnNumber" : 74
      },
      "nodeContext" : "actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 209,
        "startColumnNumber" : 3,
        "endLineNumber" : 209,
        "endColumnNumber" : 75
      },
      "nodeContext" : "final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 200,
        "startColumnNumber" : 63,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 200,
        "startColumnNumber" : 2,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 215,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 209,
        "startColumnNumber" : 3,
        "endLineNumber" : 209,
        "endColumnNumber" : 75
      },
      "nodeContext" : "final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "8",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 209,
      "startColumnNumber" : 68,
      "endLineNumber" : 209,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 209,
        "startColumnNumber" : 44,
        "endLineNumber" : 209,
        "endColumnNumber" : 73
      },
      "nodeContext" : "bold && foreColor < 8 ? 8 : 0",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 209,
        "startColumnNumber" : 43,
        "endLineNumber" : 209,
        "endColumnNumber" : 74
      },
      "nodeContext" : "(bold && foreColor < 8 ? 8 : 0)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 209,
        "startColumnNumber" : 31,
        "endLineNumber" : 209,
        "endColumnNumber" : 74
      },
      "nodeContext" : "foreColor + (bold && foreColor < 8 ? 8 : 0)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 209,
        "startColumnNumber" : 13,
        "endLineNumber" : 209,
        "endColumnNumber" : 74
      },
      "nodeContext" : "actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 209,
        "startColumnNumber" : 3,
        "endLineNumber" : 209,
        "endColumnNumber" : 75
      },
      "nodeContext" : "final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 200,
        "startColumnNumber" : 63,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 200,
        "startColumnNumber" : 2,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 215,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 209,
        "startColumnNumber" : 3,
        "endLineNumber" : 209,
        "endColumnNumber" : 75
      },
      "nodeContext" : "final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "8",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 214,
      "startColumnNumber" : 42,
      "endLineNumber" : 214,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 214,
        "startColumnNumber" : 25,
        "endLineNumber" : 214,
        "endColumnNumber" : 43
      },
      "nodeContext" : "foreColorARGB >> 8",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 214,
        "startColumnNumber" : 24,
        "endLineNumber" : 214,
        "endColumnNumber" : 44
      },
      "nodeContext" : "(foreColorARGB >> 8)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 214,
        "startColumnNumber" : 17,
        "endLineNumber" : 214,
        "endColumnNumber" : 44
      },
      "nodeContext" : "0xFF & (foreColorARGB >> 8)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 214,
        "startColumnNumber" : 16,
        "endLineNumber" : 214,
        "endColumnNumber" : 45
      },
      "nodeContext" : "(0xFF & (foreColorARGB >> 8))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 214,
        "startColumnNumber" : 8,
        "endLineNumber" : 214,
        "endColumnNumber" : 45
      },
      "nodeContext" : "green=(0xFF & (foreColorARGB >> 8))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 214,
        "startColumnNumber" : 4,
        "endLineNumber" : 214,
        "endColumnNumber" : 46
      },
      "nodeContext" : "int green=(0xFF & (foreColorARGB >> 8));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 439,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  int red=(0xFF & (foreColorARGB >> 16));\n  int green=(0xFF & (foreColorARGB >> 8));\n  int blue=(0xFF & foreColorARGB);\n  red=red * 2 / 3;\n  green=green * 2 / 3;\n  blue=blue * 2 / 3;\n  foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 448,
        "startLineNumber" : 212,
        "startColumnNumber" : 3,
        "endLineNumber" : 222,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (dim) {\n  int red=(0xFF & (foreColorARGB >> 16));\n  int green=(0xFF & (foreColorARGB >> 8));\n  int blue=(0xFF & foreColorARGB);\n  red=red * 2 / 3;\n  green=green * 2 / 3;\n  blue=blue * 2 / 3;\n  foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 200,
        "startColumnNumber" : 63,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 200,
        "startColumnNumber" : 2,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 215,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 214,
        "startColumnNumber" : 4,
        "endLineNumber" : 214,
        "endColumnNumber" : 46
      },
      "nodeContext" : "int green=(0xFF & (foreColorARGB >> 8));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "8",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 221,
      "startColumnNumber" : 57,
      "endLineNumber" : 221,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 221,
        "startColumnNumber" : 48,
        "endLineNumber" : 221,
        "endColumnNumber" : 58
      },
      "nodeContext" : "green << 8",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 221,
        "startColumnNumber" : 47,
        "endLineNumber" : 221,
        "endColumnNumber" : 59
      },
      "nodeContext" : "(green << 8)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 221,
        "startColumnNumber" : 20,
        "endLineNumber" : 221,
        "endColumnNumber" : 66
      },
      "nodeContext" : "0xFF000000 + (red << 16) + (green << 8)+ blue",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 221,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 66
      },
      "nodeContext" : "foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 221,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 67
      },
      "nodeContext" : "foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 439,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  int red=(0xFF & (foreColorARGB >> 16));\n  int green=(0xFF & (foreColorARGB >> 8));\n  int blue=(0xFF & foreColorARGB);\n  red=red * 2 / 3;\n  green=green * 2 / 3;\n  blue=blue * 2 / 3;\n  foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 448,
        "startLineNumber" : 212,
        "startColumnNumber" : 3,
        "endLineNumber" : 222,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (dim) {\n  int red=(0xFF & (foreColorARGB >> 16));\n  int green=(0xFF & (foreColorARGB >> 8));\n  int blue=(0xFF & foreColorARGB);\n  red=red * 2 / 3;\n  green=green * 2 / 3;\n  blue=blue * 2 / 3;\n  foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 200,
        "startColumnNumber" : 63,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 200,
        "startColumnNumber" : 2,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 215,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 221,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 67
      },
      "nodeContext" : "foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 209,
    "startColumnNumber" : 64,
    "endLineNumber" : 209,
    "endColumnNumber" : 65
  }, {
    "charLength" : 1,
    "startLineNumber" : 209,
    "startColumnNumber" : 68,
    "endLineNumber" : 209,
    "endColumnNumber" : 69
  }, {
    "charLength" : 1,
    "startLineNumber" : 214,
    "startColumnNumber" : 42,
    "endLineNumber" : 214,
    "endColumnNumber" : 43
  }, {
    "charLength" : 1,
    "startLineNumber" : 221,
    "startColumnNumber" : 57,
    "endLineNumber" : 221,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  } ]
}