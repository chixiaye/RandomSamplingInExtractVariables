{
  "id" : 105,
  "expression" : "spanEventBo",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "6db7cd1a9795096668a96228658219b1599d4c0a",
  "filePath" : "commons-server/src/test/java/com/navercorp/pinpoint/common/server/bo/SpanEventBoTest.java",
  "occurrences" : 32,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 50,
      "startColumnNumber" : 8,
      "endLineNumber" : 50,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 38
      },
      "nodeContext" : "spanEventBo.setAgentId(\"test\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 39
      },
      "nodeContext" : "spanEventBo.setAgentId(\"test\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 39
      },
      "nodeContext" : "spanEventBo.setAgentId(\"test\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 51,
      "startColumnNumber" : 8,
      "endLineNumber" : 51,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 40
      },
      "nodeContext" : "spanEventBo.setAgentStartTime(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 41
      },
      "nodeContext" : "spanEventBo.setAgentStartTime(1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 41
      },
      "nodeContext" : "spanEventBo.setAgentStartTime(1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 52,
      "startColumnNumber" : 8,
      "endLineNumber" : 52,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 31
      },
      "nodeContext" : "spanEventBo.setDepth(3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 32
      },
      "nodeContext" : "spanEventBo.setDepth(3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 32
      },
      "nodeContext" : "spanEventBo.setDepth(3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 53,
      "startColumnNumber" : 8,
      "endLineNumber" : 53,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 48
      },
      "nodeContext" : "spanEventBo.setDestinationId(\"testdest\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 49
      },
      "nodeContext" : "spanEventBo.setDestinationId(\"testdest\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 49
      },
      "nodeContext" : "spanEventBo.setDestinationId(\"testdest\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 54,
      "startColumnNumber" : 8,
      "endLineNumber" : 54,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 36
      },
      "nodeContext" : "spanEventBo.setEndElapsed(2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 37
      },
      "nodeContext" : "spanEventBo.setEndElapsed(2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 37
      },
      "nodeContext" : "spanEventBo.setEndElapsed(2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 55,
      "startColumnNumber" : 8,
      "endLineNumber" : 55,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 55,
        "endColumnNumber" : 43
      },
      "nodeContext" : "spanEventBo.setEndPoint(\"endpoint\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 55,
        "endColumnNumber" : 44
      },
      "nodeContext" : "spanEventBo.setEndPoint(\"endpoint\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 55,
        "endColumnNumber" : 44
      },
      "nodeContext" : "spanEventBo.setEndPoint(\"endpoint\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 57,
      "startColumnNumber" : 8,
      "endLineNumber" : 57,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 36
      },
      "nodeContext" : "spanEventBo.setNextSpanId(4)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 37
      },
      "nodeContext" : "spanEventBo.setNextSpanId(4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 37
      },
      "nodeContext" : "spanEventBo.setNextSpanId(4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 58,
      "startColumnNumber" : 8,
      "endLineNumber" : 58,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 33
      },
      "nodeContext" : "spanEventBo.setRpc(\"rpc\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 34
      },
      "nodeContext" : "spanEventBo.setRpc(\"rpc\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 34
      },
      "nodeContext" : "spanEventBo.setRpc(\"rpc\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 60,
      "startColumnNumber" : 8,
      "endLineNumber" : 60,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 69
      },
      "nodeContext" : "spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 70
      },
      "nodeContext" : "spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 70
      },
      "nodeContext" : "spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 61,
      "startColumnNumber" : 8,
      "endLineNumber" : 61,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 40
      },
      "nodeContext" : "spanEventBo.setStartElapsed(100)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 41
      },
      "nodeContext" : "spanEventBo.setStartElapsed(100);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 41
      },
      "nodeContext" : "spanEventBo.setStartElapsed(100);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 62,
      "startColumnNumber" : 8,
      "endLineNumber" : 62,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 40
      },
      "nodeContext" : "spanEventBo.setNextAsyncId(1000)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 41
      },
      "nodeContext" : "spanEventBo.setNextAsyncId(1000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 41
      },
      "nodeContext" : "spanEventBo.setNextAsyncId(1000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 64,
      "startColumnNumber" : 53,
      "endLineNumber" : 64,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 64,
        "startColumnNumber" : 53,
        "endLineNumber" : 64,
        "endColumnNumber" : 77
      },
      "nodeContext" : "spanEventBo.writeValue()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 64,
        "startColumnNumber" : 37,
        "endLineNumber" : 64,
        "endColumnNumber" : 78
      },
      "nodeContext" : "ByteBuffer.wrap(spanEventBo.writeValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 64,
        "startColumnNumber" : 19,
        "endLineNumber" : 64,
        "endColumnNumber" : 78
      },
      "nodeContext" : "deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 79
      },
      "nodeContext" : "ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 79
      },
      "nodeContext" : "ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 65,
      "startColumnNumber" : 93,
      "endLineNumber" : 65,
      "endColumnNumber" : 104
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 65,
        "startColumnNumber" : 60,
        "endLineNumber" : 65,
        "endColumnNumber" : 105
      },
      "nodeContext" : "new SpanEventEncodingContext(12,spanEventBo)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 65,
        "startColumnNumber" : 33,
        "endLineNumber" : 65,
        "endColumnNumber" : 105
      },
      "nodeContext" : "spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 106
      },
      "nodeContext" : "SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 106
      },
      "nodeContext" : "SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 74,
      "startColumnNumber" : 28,
      "endLineNumber" : 74,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 74,
        "startColumnNumber" : 28,
        "endLineNumber" : 74,
        "endColumnNumber" : 52
      },
      "nodeContext" : "spanEventBo.getAgentId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 82
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 83
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 83
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 75,
      "startColumnNumber" : 28,
      "endLineNumber" : 75,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 75,
        "startColumnNumber" : 28,
        "endLineNumber" : 75,
        "endColumnNumber" : 59
      },
      "nodeContext" : "spanEventBo.getAgentStartTime()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 96
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 97
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 97
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 76,
      "startColumnNumber" : 28,
      "endLineNumber" : 76,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 76,
        "startColumnNumber" : 28,
        "endLineNumber" : 76,
        "endColumnNumber" : 50
      },
      "nodeContext" : "spanEventBo.getDepth()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 77,
      "startColumnNumber" : 28,
      "endLineNumber" : 77,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 77,
        "startColumnNumber" : 28,
        "endLineNumber" : 77,
        "endColumnNumber" : 58
      },
      "nodeContext" : "spanEventBo.getDestinationId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 94
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 95
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 95
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 78,
      "startColumnNumber" : 28,
      "endLineNumber" : 78,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 78,
        "startColumnNumber" : 28,
        "endLineNumber" : 78,
        "endColumnNumber" : 55
      },
      "nodeContext" : "spanEventBo.getEndElapsed()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 79,
      "startColumnNumber" : 28,
      "endLineNumber" : 79,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 79,
        "startColumnNumber" : 28,
        "endLineNumber" : 79,
        "endColumnNumber" : 53
      },
      "nodeContext" : "spanEventBo.getEndPoint()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 82,
      "startColumnNumber" : 28,
      "endLineNumber" : 82,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 82,
        "startColumnNumber" : 28,
        "endLineNumber" : 82,
        "endColumnNumber" : 55
      },
      "nodeContext" : "spanEventBo.getNextSpanId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 83,
      "startColumnNumber" : 28,
      "endLineNumber" : 83,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 83,
        "startColumnNumber" : 28,
        "endLineNumber" : 83,
        "endColumnNumber" : 48
      },
      "nodeContext" : "spanEventBo.getRpc()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 84,
      "startColumnNumber" : 28,
      "endLineNumber" : 84,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 84,
        "startColumnNumber" : 28,
        "endLineNumber" : 84,
        "endColumnNumber" : 56
      },
      "nodeContext" : "spanEventBo.getServiceType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 91
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 91
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 85,
      "startColumnNumber" : 28,
      "endLineNumber" : 85,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 85,
        "startColumnNumber" : 28,
        "endLineNumber" : 85,
        "endColumnNumber" : 57
      },
      "nodeContext" : "spanEventBo.getStartElapsed()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 92
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 93
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 93
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 87,
      "startColumnNumber" : 28,
      "endLineNumber" : 87,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 87,
        "startColumnNumber" : 28,
        "endLineNumber" : 87,
        "endColumnNumber" : 56
      },
      "nodeContext" : "spanEventBo.getNextAsyncId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 91
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 91
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 91,
      "startColumnNumber" : 8,
      "endLineNumber" : 91,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 32
      },
      "nodeContext" : "spanEventBo.setSpanId(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 33
      },
      "nodeContext" : "spanEventBo.setSpanId(1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 33
      },
      "nodeContext" : "spanEventBo.setSpanId(1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 93,
      "startColumnNumber" : 28,
      "endLineNumber" : 93,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 93,
        "startColumnNumber" : 28,
        "endLineNumber" : 93,
        "endColumnNumber" : 51
      },
      "nodeContext" : "spanEventBo.getSpanId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 81
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 81
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 95,
      "startColumnNumber" : 8,
      "endLineNumber" : 95,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 50
      },
      "nodeContext" : "spanEventBo.setTraceTransactionSequence(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 51
      },
      "nodeContext" : "spanEventBo.setTraceTransactionSequence(1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 51
      },
      "nodeContext" : "spanEventBo.setTraceTransactionSequence(1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 97,
      "startColumnNumber" : 28,
      "endLineNumber" : 97,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 97,
        "startColumnNumber" : 28,
        "endLineNumber" : 97,
        "endColumnNumber" : 69
      },
      "nodeContext" : "spanEventBo.getTraceTransactionSequence()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 116
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 117
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 117
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 99,
      "startColumnNumber" : 8,
      "endLineNumber" : 99,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 45
      },
      "nodeContext" : "spanEventBo.setTraceAgentStartTime(3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 46
      },
      "nodeContext" : "spanEventBo.setTraceAgentStartTime(3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 46
      },
      "nodeContext" : "spanEventBo.setTraceAgentStartTime(3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 101,
      "startColumnNumber" : 28,
      "endLineNumber" : 101,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 101,
        "startColumnNumber" : 28,
        "endLineNumber" : 101,
        "endColumnNumber" : 64
      },
      "nodeContext" : "spanEventBo.getTraceAgentStartTime()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 106
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 107
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 107
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 103,
      "startColumnNumber" : 8,
      "endLineNumber" : 103,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 42
      },
      "nodeContext" : "spanEventBo.setSequence((short)3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 43
      },
      "nodeContext" : "spanEventBo.setSequence((short)3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 43
      },
      "nodeContext" : "spanEventBo.setSequence((short)3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  }, {
    "nodeContext" : "spanEventBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 105,
      "startColumnNumber" : 28,
      "endLineNumber" : 105,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 105,
        "startColumnNumber" : 28,
        "endLineNumber" : 105,
        "endColumnNumber" : 53
      },
      "nodeContext" : "spanEventBo.getSequence()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2845,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setAgentId(\"test\");\n  spanEventBo.setAgentStartTime(1);\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  ByteBuffer deprecatedBytes=ByteBuffer.wrap(spanEventBo.writeValue());\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(12,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  Assert.assertEquals(bytes,deprecatedBytes);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  int i=newSpanEventBo.readValue(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanEventBo.getAgentId(),newSpanEventBo.getAgentId());\n  Assert.assertEquals(spanEventBo.getAgentStartTime(),newSpanEventBo.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSpanId(1);\n  newSpanEventBo.setSpanId(1);\n  Assert.assertEquals(spanEventBo.getSpanId(),newSpanEventBo.getSpanId());\n  spanEventBo.setTraceTransactionSequence(1);\n  newSpanEventBo.setTraceTransactionSequence(1);\n  Assert.assertEquals(spanEventBo.getTraceTransactionSequence(),newSpanEventBo.getTraceTransactionSequence());\n  spanEventBo.setTraceAgentStartTime(3);\n  newSpanEventBo.setTraceAgentStartTime(3);\n  Assert.assertEquals(spanEventBo.getTraceAgentStartTime(),newSpanEventBo.getTraceAgentStartTime());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanEventBo"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 50,
    "startColumnNumber" : 8,
    "endLineNumber" : 50,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 51,
    "startColumnNumber" : 8,
    "endLineNumber" : 51,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 52,
    "startColumnNumber" : 8,
    "endLineNumber" : 52,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 53,
    "startColumnNumber" : 8,
    "endLineNumber" : 53,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 54,
    "startColumnNumber" : 8,
    "endLineNumber" : 54,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 55,
    "startColumnNumber" : 8,
    "endLineNumber" : 55,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 57,
    "startColumnNumber" : 8,
    "endLineNumber" : 57,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 58,
    "startColumnNumber" : 8,
    "endLineNumber" : 58,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 60,
    "startColumnNumber" : 8,
    "endLineNumber" : 60,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 61,
    "startColumnNumber" : 8,
    "endLineNumber" : 61,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 62,
    "startColumnNumber" : 8,
    "endLineNumber" : 62,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 64,
    "startColumnNumber" : 53,
    "endLineNumber" : 64,
    "endColumnNumber" : 64
  }, {
    "charLength" : 11,
    "startLineNumber" : 65,
    "startColumnNumber" : 93,
    "endLineNumber" : 65,
    "endColumnNumber" : 104
  }, {
    "charLength" : 11,
    "startLineNumber" : 74,
    "startColumnNumber" : 28,
    "endLineNumber" : 74,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 75,
    "startColumnNumber" : 28,
    "endLineNumber" : 75,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 76,
    "startColumnNumber" : 28,
    "endLineNumber" : 76,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 77,
    "startColumnNumber" : 28,
    "endLineNumber" : 77,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 78,
    "startColumnNumber" : 28,
    "endLineNumber" : 78,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 79,
    "startColumnNumber" : 28,
    "endLineNumber" : 79,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 82,
    "startColumnNumber" : 28,
    "endLineNumber" : 82,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 83,
    "startColumnNumber" : 28,
    "endLineNumber" : 83,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 84,
    "startColumnNumber" : 28,
    "endLineNumber" : 84,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 85,
    "startColumnNumber" : 28,
    "endLineNumber" : 85,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 87,
    "startColumnNumber" : 28,
    "endLineNumber" : 87,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 91,
    "startColumnNumber" : 8,
    "endLineNumber" : 91,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 93,
    "startColumnNumber" : 28,
    "endLineNumber" : 93,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 95,
    "startColumnNumber" : 8,
    "endLineNumber" : 95,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 97,
    "startColumnNumber" : 28,
    "endLineNumber" : 97,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 99,
    "startColumnNumber" : 8,
    "endLineNumber" : 99,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 101,
    "startColumnNumber" : 28,
    "endLineNumber" : 101,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 103,
    "startColumnNumber" : 8,
    "endLineNumber" : 103,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 105,
    "startColumnNumber" : 28,
    "endLineNumber" : 105,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 30,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 31,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 30,
    "layout" : 3
  } ]
}