{
  "id" : 15,
  "expression" : "collectionOfFutureIndexes",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "/services/src/main/java/org/jd/gui/view/component/TypePage.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "collectionOfFutureIndexes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 70,
      "startColumnNumber" : 81,
      "endLineNumber" : 70,
      "endColumnNumber" : 106
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 70,
        "startColumnNumber" : 48,
        "endLineNumber" : 70,
        "endColumnNumber" : 117
      },
      "nodeContext" : "IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,typeName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 70,
        "startColumnNumber" : 38,
        "endLineNumber" : 70,
        "endColumnNumber" : 117
      },
      "nodeContext" : "entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,typeName)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 70,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 118
      },
      "nodeContext" : "List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,typeName);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 98,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Point location=textArea.getLocationOnScreen();\n  int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n  URI uri=entry.getUri();\n  api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n  ReferenceData reference=hyperlinkReferenceData.reference;\n  String typeName=reference.typeName;\n  List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,typeName);\n  String fragment=typeName;\n  if (reference.name != null) {\n    fragment+='-' + reference.name;\n  }\n  if (reference.descriptor != null) {\n    fragment+='-' + reference.descriptor;\n  }\n  if (entries.contains(entry)) {\n    api.openURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),fragment));\n  }\n else {\n    String rootUri=entry.getContainer().getRoot().getUri().toString();\n    ArrayList<Container.Entry> sameContainerEntries=new ArrayList<>();\n    for (    Container.Entry entry : entries) {\n      if (entry.getUri().toString().startsWith(rootUri)) {\n        sameContainerEntries.add(entry);\n      }\n    }\n    if (sameContainerEntries.size() > 0) {\n      api.openURI(x,y,sameContainerEntries,null,fragment);\n    }\n else     if (entries.size() > 0) {\n      api.openURI(x,y,entries,null,fragment);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2007,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  Point location=textArea.getLocationOnScreen();\n  int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n  URI uri=entry.getUri();\n  api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n  ReferenceData reference=hyperlinkReferenceData.reference;\n  String typeName=reference.typeName;\n  List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,typeName);\n  String fragment=typeName;\n  if (reference.name != null) {\n    fragment+='-' + reference.name;\n  }\n  if (reference.descriptor != null) {\n    fragment+='-' + reference.descriptor;\n  }\n  if (entries.contains(entry)) {\n    api.openURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),fragment));\n  }\n else {\n    String rootUri=entry.getContainer().getRoot().getUri().toString();\n    ArrayList<Container.Entry> sameContainerEntries=new ArrayList<>();\n    for (    Container.Entry entry : entries) {\n      if (entry.getUri().toString().startsWith(rootUri)) {\n        sameContainerEntries.add(entry);\n      }\n    }\n    if (sameContainerEntries.size() > 0) {\n      api.openURI(x,y,sameContainerEntries,null,fragment);\n    }\n else     if (entries.size() > 0) {\n      api.openURI(x,y,entries,null,fragment);\n    }\n  }\n}\n catch (URISyntaxException e) {\n  assert ExceptionUtil.printStackTrace(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 244,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2033,
        "startLineNumber" : 59,
        "startColumnNumber" : 54,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    Point location=textArea.getLocationOnScreen();\n    int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n    URI uri=entry.getUri();\n    api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n    ReferenceData reference=hyperlinkReferenceData.reference;\n    String typeName=reference.typeName;\n    List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,typeName);\n    String fragment=typeName;\n    if (reference.name != null) {\n      fragment+='-' + reference.name;\n    }\n    if (reference.descriptor != null) {\n      fragment+='-' + reference.descriptor;\n    }\n    if (entries.contains(entry)) {\n      api.openURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),fragment));\n    }\n else {\n      String rootUri=entry.getContainer().getRoot().getUri().toString();\n      ArrayList<Container.Entry> sameContainerEntries=new ArrayList<>();\n      for (      Container.Entry entry : entries) {\n        if (entry.getUri().toString().startsWith(rootUri)) {\n          sameContainerEntries.add(entry);\n        }\n      }\n      if (sameContainerEntries.size() > 0) {\n        api.openURI(x,y,sameContainerEntries,null,fragment);\n      }\n else       if (entries.size() > 0) {\n        api.openURI(x,y,entries,null,fragment);\n      }\n    }\n  }\n catch (  URISyntaxException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2079,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (hyperlinkReferenceData.reference.enabled) {\n  try {\n    Point location=textArea.getLocationOnScreen();\n    int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n    URI uri=entry.getUri();\n    api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n    ReferenceData reference=hyperlinkReferenceData.reference;\n    String typeName=reference.typeName;\n    List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,typeName);\n    String fragment=typeName;\n    if (reference.name != null) {\n      fragment+='-' + reference.name;\n    }\n    if (reference.descriptor != null) {\n      fragment+='-' + reference.descriptor;\n    }\n    if (entries.contains(entry)) {\n      api.openURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),fragment));\n    }\n else {\n      String rootUri=entry.getContainer().getRoot().getUri().toString();\n      ArrayList<Container.Entry> sameContainerEntries=new ArrayList<>();\n      for (      Container.Entry entry : entries) {\n        if (entry.getUri().toString().startsWith(rootUri)) {\n          sameContainerEntries.add(entry);\n        }\n      }\n      if (sameContainerEntries.size() > 0) {\n        api.openURI(x,y,sameContainerEntries,null,fragment);\n      }\n else       if (entries.size() > 0) {\n        api.openURI(x,y,entries,null,fragment);\n      }\n    }\n  }\n catch (  URISyntaxException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 251,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2195,
        "startLineNumber" : 56,
        "startColumnNumber" : 76,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HyperlinkReferenceData hyperlinkReferenceData=(HyperlinkReferenceData)hyperlinkData;\n  if (hyperlinkReferenceData.reference.enabled) {\n    try {\n      Point location=textArea.getLocationOnScreen();\n      int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n      URI uri=entry.getUri();\n      api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n      ReferenceData reference=hyperlinkReferenceData.reference;\n      String typeName=reference.typeName;\n      List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,typeName);\n      String fragment=typeName;\n      if (reference.name != null) {\n        fragment+='-' + reference.name;\n      }\n      if (reference.descriptor != null) {\n        fragment+='-' + reference.descriptor;\n      }\n      if (entries.contains(entry)) {\n        api.openURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),fragment));\n      }\n else {\n        String rootUri=entry.getContainer().getRoot().getUri().toString();\n        ArrayList<Container.Entry> sameContainerEntries=new ArrayList<>();\n        for (        Container.Entry entry : entries) {\n          if (entry.getUri().toString().startsWith(rootUri)) {\n            sameContainerEntries.add(entry);\n          }\n        }\n        if (sameContainerEntries.size() > 0) {\n          api.openURI(x,y,sameContainerEntries,null,fragment);\n        }\n else         if (entries.size() > 0) {\n          api.openURI(x,y,entries,null,fragment);\n        }\n      }\n    }\n catch (    URISyntaxException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2318,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") protected void openHyperlink(int x,int y,HyperlinkData hyperlinkData){\n  HyperlinkReferenceData hyperlinkReferenceData=(HyperlinkReferenceData)hyperlinkData;\n  if (hyperlinkReferenceData.reference.enabled) {\n    try {\n      Point location=textArea.getLocationOnScreen();\n      int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n      URI uri=entry.getUri();\n      api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n      ReferenceData reference=hyperlinkReferenceData.reference;\n      String typeName=reference.typeName;\n      List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,typeName);\n      String fragment=typeName;\n      if (reference.name != null) {\n        fragment+='-' + reference.name;\n      }\n      if (reference.descriptor != null) {\n        fragment+='-' + reference.descriptor;\n      }\n      if (entries.contains(entry)) {\n        api.openURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),fragment));\n      }\n else {\n        String rootUri=entry.getContainer().getRoot().getUri().toString();\n        ArrayList<Container.Entry> sameContainerEntries=new ArrayList<>();\n        for (        Container.Entry entry : entries) {\n          if (entry.getUri().toString().startsWith(rootUri)) {\n            sameContainerEntries.add(entry);\n          }\n        }\n        if (sameContainerEntries.size() > 0) {\n          api.openURI(x,y,sameContainerEntries,null,fragment);\n        }\n else         if (entries.size() > 0) {\n          api.openURI(x,y,entries,null,fragment);\n        }\n      }\n    }\n catch (    URISyntaxException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 280,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 70,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 118
      },
      "nodeContext" : "List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,typeName);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Collection<java.util.concurrent.Future<org.jd.gui.api.model.Indexes>>"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 70,
    "startColumnNumber" : 81,
    "endLineNumber" : 70,
    "endColumnNumber" : 106
  } ],
  "layoutRelationDataList" : [ ]
}