{
  "id" : 208,
  "expression" : "validationArtifactMetadata",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "da6d9499d61ed4fb14a0bbbf456d5e9381c328ee",
  "filePath" : "src/test/java/com/google/devtools/build/lib/buildtool/TargetCompleteEventTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "validationArtifactMetadata",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 174,
      "startColumnNumber" : 15,
      "endLineNumber" : 174,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 42
      },
      "nodeContext" : "assertThat(validationArtifactMetadata)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertThat(validationArtifactMetadata).isNull()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertThat(validationArtifactMetadata).isNull();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3813,
        "startLineNumber" : 87,
        "startColumnNumber" : 54,
        "endLineNumber" : 175,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  write(\"validation_actions/defs.bzl\",\"def _rule_with_implicit_outs_and_validation_impl(ctx):\",\"\",\"  ctx.actions.write(ctx.outputs.main, \\\"main output\\\\n\\\")\",\"\",\"  ctx.actions.write(ctx.outputs.implicit, \\\"implicit output\\\\n\\\")\",\"\",\"  validation_output = ctx.actions.declare_file(ctx.attr.name + \\\".validation\\\")\",\"  # The actual tool will be created in individual tests, depending on whether\",\"  # validation should pass or fail.\",\"  ctx.actions.run(\",\"      outputs = [validation_output],\",\"      executable = ctx.executable._validation_tool,\",\"      arguments = [validation_output.path])\",\"\",\"  return [\",\"    DefaultInfo(files = depset([ctx.outputs.main])),\",\"    OutputGroupInfo(_validation = depset([validation_output])),\",\"  ]\",\"\",\"\",\"rule_with_implicit_outs_and_validation = rule(\",\"  implementation = _rule_with_implicit_outs_and_validation_impl,\",\"  outputs = {\",\"    \\\"main\\\": \\\"%{name}.main\\\",\",\"    \\\"implicit\\\": \\\"%{name}.implicit\\\",\",\"  },\",\"  attrs = {\",\"    \\\"_validation_tool\\\": attr.label(\",\"        allow_single_file = True,\",\"        default = Label(\\\"//validation_actions:validation_tool\\\"),\",\"        executable = True,\",\"        cfg = \\\"host\\\"),\",\"  }\",\")\");\n  write(\"validation_actions/validation_tool\",\"#!/bin/bash\",\"echo \\\"validation output\\\" > $1\").setExecutable(true);\n  write(\"validation_actions/BUILD\",\"load(\",\"    \\\":defs.bzl\\\",\",\"    \\\"rule_with_implicit_outs_and_validation\\\")\",\"\",\"rule_with_implicit_outs_and_validation(name = \\\"foo0\\\")\");\n  AtomicReference<TargetCompleteEvent> targetCompleteEventRef=new AtomicReference<>();\n  runtimeWrapper.registerSubscriber(new Object(){\n    @SuppressWarnings(\"unused\") @Subscribe public void accept(    TargetCompleteEvent event){\n      targetCompleteEventRef.set(event);\n    }\n  }\n);\n  addOptions(\"--experimental_run_validations\");\n  BuildResult buildResult=buildTarget(\"//validation_actions:foo0\");\n  Collection<ConfiguredTarget> successfulTargets=buildResult.getSuccessfulTargets();\n  ConfiguredTarget fooTarget=Iterables.getOnlyElement(successfulTargets);\n  Artifact main=((RuleConfiguredTarget)fooTarget).getArtifactByOutputLabel(Label.parseAbsoluteUnchecked(\"//validation_actions:foo0.main\"));\n  FileStateType mainType=targetCompleteEventRef.get().getCompletionContext().getFileArtifactValue(main).getType();\n  assertThat(CompletionContext.isGuaranteedToBeOutputFile(mainType)).isTrue();\n  OutputGroupInfo outputGroups=fooTarget.get(OutputGroupInfo.STARLARK_CONSTRUCTOR);\n  NestedSet<Artifact> validationArtifacts=outputGroups.getOutputGroup(OutputGroupInfo.VALIDATION);\n  assertThat(validationArtifacts.isEmpty()).isFalse();\n  Artifact validationArtifact=Iterables.getOnlyElement(validationArtifacts.toList());\n  FileArtifactValue validationArtifactMetadata=targetCompleteEventRef.get().getCompletionContext().getFileArtifactValue(validationArtifact);\n  assertThat(validationArtifactMetadata).isNull();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4035,
        "startLineNumber" : 82,
        "startColumnNumber" : 2,
        "endLineNumber" : 175,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Validates that TargetCompleteEvents do not keep a map of action output metadata for the _validation output group, which can be quite large.\n */\n@Test public void artifactsNotRetained() throws Exception {\n  write(\"validation_actions/defs.bzl\",\"def _rule_with_implicit_outs_and_validation_impl(ctx):\",\"\",\"  ctx.actions.write(ctx.outputs.main, \\\"main output\\\\n\\\")\",\"\",\"  ctx.actions.write(ctx.outputs.implicit, \\\"implicit output\\\\n\\\")\",\"\",\"  validation_output = ctx.actions.declare_file(ctx.attr.name + \\\".validation\\\")\",\"  # The actual tool will be created in individual tests, depending on whether\",\"  # validation should pass or fail.\",\"  ctx.actions.run(\",\"      outputs = [validation_output],\",\"      executable = ctx.executable._validation_tool,\",\"      arguments = [validation_output.path])\",\"\",\"  return [\",\"    DefaultInfo(files = depset([ctx.outputs.main])),\",\"    OutputGroupInfo(_validation = depset([validation_output])),\",\"  ]\",\"\",\"\",\"rule_with_implicit_outs_and_validation = rule(\",\"  implementation = _rule_with_implicit_outs_and_validation_impl,\",\"  outputs = {\",\"    \\\"main\\\": \\\"%{name}.main\\\",\",\"    \\\"implicit\\\": \\\"%{name}.implicit\\\",\",\"  },\",\"  attrs = {\",\"    \\\"_validation_tool\\\": attr.label(\",\"        allow_single_file = True,\",\"        default = Label(\\\"//validation_actions:validation_tool\\\"),\",\"        executable = True,\",\"        cfg = \\\"host\\\"),\",\"  }\",\")\");\n  write(\"validation_actions/validation_tool\",\"#!/bin/bash\",\"echo \\\"validation output\\\" > $1\").setExecutable(true);\n  write(\"validation_actions/BUILD\",\"load(\",\"    \\\":defs.bzl\\\",\",\"    \\\"rule_with_implicit_outs_and_validation\\\")\",\"\",\"rule_with_implicit_outs_and_validation(name = \\\"foo0\\\")\");\n  AtomicReference<TargetCompleteEvent> targetCompleteEventRef=new AtomicReference<>();\n  runtimeWrapper.registerSubscriber(new Object(){\n    @SuppressWarnings(\"unused\") @Subscribe public void accept(    TargetCompleteEvent event){\n      targetCompleteEventRef.set(event);\n    }\n  }\n);\n  addOptions(\"--experimental_run_validations\");\n  BuildResult buildResult=buildTarget(\"//validation_actions:foo0\");\n  Collection<ConfiguredTarget> successfulTargets=buildResult.getSuccessfulTargets();\n  ConfiguredTarget fooTarget=Iterables.getOnlyElement(successfulTargets);\n  Artifact main=((RuleConfiguredTarget)fooTarget).getArtifactByOutputLabel(Label.parseAbsoluteUnchecked(\"//validation_actions:foo0.main\"));\n  FileStateType mainType=targetCompleteEventRef.get().getCompletionContext().getFileArtifactValue(main).getType();\n  assertThat(CompletionContext.isGuaranteedToBeOutputFile(mainType)).isTrue();\n  OutputGroupInfo outputGroups=fooTarget.get(OutputGroupInfo.STARLARK_CONSTRUCTOR);\n  NestedSet<Artifact> validationArtifacts=outputGroups.getOutputGroup(OutputGroupInfo.VALIDATION);\n  assertThat(validationArtifacts.isEmpty()).isFalse();\n  Artifact validationArtifact=Iterables.getOnlyElement(validationArtifacts.toList());\n  FileArtifactValue validationArtifactMetadata=targetCompleteEventRef.get().getCompletionContext().getFileArtifactValue(validationArtifact);\n  assertThat(validationArtifactMetadata).isNull();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertThat(validationArtifactMetadata).isNull();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.actions.FileArtifactValue"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 174,
    "startColumnNumber" : 15,
    "endLineNumber" : 174,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}