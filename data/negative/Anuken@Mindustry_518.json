{
  "id" : 518,
  "expression" : "world.width()",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/ai/Astar.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "world.width()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 39,
      "startColumnNumber" : 52,
      "endLineNumber" : 39,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 39,
        "startColumnNumber" : 32,
        "endLineNumber" : 39,
        "endColumnNumber" : 65
      },
      "nodeContext" : "rotations.length != world.width()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 39,
        "startColumnNumber" : 11,
        "endLineNumber" : 39,
        "endColumnNumber" : 65
      },
      "nodeContext" : "rotations == null || rotations.length != world.width()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 39,
        "startColumnNumber" : 11,
        "endLineNumber" : 39,
        "endColumnNumber" : 106
      },
      "nodeContext" : "rotations == null || rotations.length != world.width() || rotations[0].length != world.height()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (rotations == null || rotations.length != world.width() || rotations[0].length != world.height()) {\n  rotations=new byte[world.width()][world.height()];\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1994,
        "startLineNumber" : 27,
        "startColumnNumber" : 142,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tiles tiles=world.tiles;\n  Tile start=tiles.getn(startX,startY);\n  Tile end=tiles.getn(endX,endY);\n  GridBits closed=new GridBits(tiles.width,tiles.height);\n  costs.clear();\n  queue.clear();\n  queue.comparator=Structs.comparingFloat(a -> costs.get(a.pos(),0f) + dh.cost(a.x,a.y,end.x,end.y));\n  queue.add(start);\n  if (rotations == null || rotations.length != world.width() || rotations[0].length != world.height()) {\n    rotations=new byte[world.width()][world.height()];\n  }\n  boolean found=false;\n  while (!queue.empty()) {\n    Tile next=queue.poll();\n    float baseCost=costs.get(next.pos(),0f);\n    if (next == end) {\n      found=true;\n      break;\n    }\n    closed.set(next.x,next.y);\n    for (    Point2 point : Geometry.d4) {\n      int newx=next.x + point.x, newy=next.y + point.y;\n      if (Structs.inBounds(newx,newy,tiles.width,tiles.height)) {\n        Tile child=tiles.getn(newx,newy);\n        if (passable.get(child)) {\n          float newCost=th.cost(next,child) + baseCost;\n          if (!closed.get(child.x,child.y)) {\n            closed.set(child.x,child.y);\n            rotations[child.x][child.y]=child.relativeTo(next.x,next.y);\n            costs.put(child.pos(),newCost);\n            queue.add(child);\n          }\n        }\n      }\n    }\n  }\n  out.clear();\n  if (!found)   return out;\n  Tile current=end;\n  while (current != start) {\n    out.add(current);\n    byte rot=rotations[current.x][current.y];\n    current=tiles.getn(current.x + Geometry.d4x[rot],current.y + Geometry.d4y[rot]);\n  }\n  out.reverse();\n  return out;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 369,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2132,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static Seq<Tile> pathfind(int startX,int startY,int endX,int endY,TileHueristic th,DistanceHeuristic dh,Boolf<Tile> passable){\n  Tiles tiles=world.tiles;\n  Tile start=tiles.getn(startX,startY);\n  Tile end=tiles.getn(endX,endY);\n  GridBits closed=new GridBits(tiles.width,tiles.height);\n  costs.clear();\n  queue.clear();\n  queue.comparator=Structs.comparingFloat(a -> costs.get(a.pos(),0f) + dh.cost(a.x,a.y,end.x,end.y));\n  queue.add(start);\n  if (rotations == null || rotations.length != world.width() || rotations[0].length != world.height()) {\n    rotations=new byte[world.width()][world.height()];\n  }\n  boolean found=false;\n  while (!queue.empty()) {\n    Tile next=queue.poll();\n    float baseCost=costs.get(next.pos(),0f);\n    if (next == end) {\n      found=true;\n      break;\n    }\n    closed.set(next.x,next.y);\n    for (    Point2 point : Geometry.d4) {\n      int newx=next.x + point.x, newy=next.y + point.y;\n      if (Structs.inBounds(newx,newy,tiles.width,tiles.height)) {\n        Tile child=tiles.getn(newx,newy);\n        if (passable.get(child)) {\n          float newCost=th.cost(next,child) + baseCost;\n          if (!closed.get(child.x,child.y)) {\n            closed.set(child.x,child.y);\n            rotations[child.x][child.y]=child.relativeTo(next.x,next.y);\n            costs.put(child.pos(),newCost);\n            queue.add(child);\n          }\n        }\n      }\n    }\n  }\n  out.clear();\n  if (!found)   return out;\n  Tile current=end;\n  while (current != start) {\n    out.add(current);\n    byte rot=rotations[current.x][current.y];\n    current=tiles.getn(current.x + Geometry.d4x[rot],current.y + Geometry.d4y[rot]);\n  }\n  out.reverse();\n  return out;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 405,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 39,
        "startColumnNumber" : 11,
        "endLineNumber" : 39,
        "endColumnNumber" : 106
      },
      "nodeContext" : "rotations == null || rotations.length != world.width() || rotations[0].length != world.height()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 21,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "world.width()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 40,
      "startColumnNumber" : 33,
      "endLineNumber" : 40,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 40,
        "startColumnNumber" : 24,
        "endLineNumber" : 40,
        "endColumnNumber" : 63
      },
      "nodeContext" : "new byte[world.width()][world.height()]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 40,
        "startColumnNumber" : 12,
        "endLineNumber" : 40,
        "endColumnNumber" : 63
      },
      "nodeContext" : "rotations=new byte[world.width()][world.height()]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 40,
        "startColumnNumber" : 12,
        "endLineNumber" : 40,
        "endColumnNumber" : 64
      },
      "nodeContext" : "rotations=new byte[world.width()][world.height()];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 39,
        "startColumnNumber" : 107,
        "endLineNumber" : 41,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  rotations=new byte[world.width()][world.height()];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (rotations == null || rotations.length != world.width() || rotations[0].length != world.height()) {\n  rotations=new byte[world.width()][world.height()];\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1994,
        "startLineNumber" : 27,
        "startColumnNumber" : 142,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tiles tiles=world.tiles;\n  Tile start=tiles.getn(startX,startY);\n  Tile end=tiles.getn(endX,endY);\n  GridBits closed=new GridBits(tiles.width,tiles.height);\n  costs.clear();\n  queue.clear();\n  queue.comparator=Structs.comparingFloat(a -> costs.get(a.pos(),0f) + dh.cost(a.x,a.y,end.x,end.y));\n  queue.add(start);\n  if (rotations == null || rotations.length != world.width() || rotations[0].length != world.height()) {\n    rotations=new byte[world.width()][world.height()];\n  }\n  boolean found=false;\n  while (!queue.empty()) {\n    Tile next=queue.poll();\n    float baseCost=costs.get(next.pos(),0f);\n    if (next == end) {\n      found=true;\n      break;\n    }\n    closed.set(next.x,next.y);\n    for (    Point2 point : Geometry.d4) {\n      int newx=next.x + point.x, newy=next.y + point.y;\n      if (Structs.inBounds(newx,newy,tiles.width,tiles.height)) {\n        Tile child=tiles.getn(newx,newy);\n        if (passable.get(child)) {\n          float newCost=th.cost(next,child) + baseCost;\n          if (!closed.get(child.x,child.y)) {\n            closed.set(child.x,child.y);\n            rotations[child.x][child.y]=child.relativeTo(next.x,next.y);\n            costs.put(child.pos(),newCost);\n            queue.add(child);\n          }\n        }\n      }\n    }\n  }\n  out.clear();\n  if (!found)   return out;\n  Tile current=end;\n  while (current != start) {\n    out.add(current);\n    byte rot=rotations[current.x][current.y];\n    current=tiles.getn(current.x + Geometry.d4x[rot],current.y + Geometry.d4y[rot]);\n  }\n  out.reverse();\n  return out;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 369,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2132,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static Seq<Tile> pathfind(int startX,int startY,int endX,int endY,TileHueristic th,DistanceHeuristic dh,Boolf<Tile> passable){\n  Tiles tiles=world.tiles;\n  Tile start=tiles.getn(startX,startY);\n  Tile end=tiles.getn(endX,endY);\n  GridBits closed=new GridBits(tiles.width,tiles.height);\n  costs.clear();\n  queue.clear();\n  queue.comparator=Structs.comparingFloat(a -> costs.get(a.pos(),0f) + dh.cost(a.x,a.y,end.x,end.y));\n  queue.add(start);\n  if (rotations == null || rotations.length != world.width() || rotations[0].length != world.height()) {\n    rotations=new byte[world.width()][world.height()];\n  }\n  boolean found=false;\n  while (!queue.empty()) {\n    Tile next=queue.poll();\n    float baseCost=costs.get(next.pos(),0f);\n    if (next == end) {\n      found=true;\n      break;\n    }\n    closed.set(next.x,next.y);\n    for (    Point2 point : Geometry.d4) {\n      int newx=next.x + point.x, newy=next.y + point.y;\n      if (Structs.inBounds(newx,newy,tiles.width,tiles.height)) {\n        Tile child=tiles.getn(newx,newy);\n        if (passable.get(child)) {\n          float newCost=th.cost(next,child) + baseCost;\n          if (!closed.get(child.x,child.y)) {\n            closed.set(child.x,child.y);\n            rotations[child.x][child.y]=child.relativeTo(next.x,next.y);\n            costs.put(child.pos(),newCost);\n            queue.add(child);\n          }\n        }\n      }\n    }\n  }\n  out.clear();\n  if (!found)   return out;\n  Tile current=end;\n  while (current != start) {\n    out.add(current);\n    byte rot=rotations[current.x][current.y];\n    current=tiles.getn(current.x + Geometry.d4x[rot],current.y + Geometry.d4y[rot]);\n  }\n  out.reverse();\n  return out;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 405,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 40,
        "startColumnNumber" : 12,
        "endLineNumber" : 40,
        "endColumnNumber" : 64
      },
      "nodeContext" : "rotations=new byte[world.width()][world.height()];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 39,
    "startColumnNumber" : 52,
    "endLineNumber" : 39,
    "endColumnNumber" : 65
  }, {
    "charLength" : 13,
    "startLineNumber" : 40,
    "startColumnNumber" : 33,
    "endLineNumber" : 40,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}