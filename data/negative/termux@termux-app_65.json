{
  "id" : 65,
  "expression" : "getArg0(1) - 1",
  "projectName" : "termux@termux-app",
  "commitID" : "6334470f81bdf003b8567af9e3531cec4dce560d",
  "filePath" : "/app/src/main/java/com/termux/terminal/TerminalEmulator.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "getArg0(1) - 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 1382,
      "startColumnNumber" : 50,
      "endLineNumber" : 1382,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 1382,
        "startColumnNumber" : 16,
        "endLineNumber" : 1382,
        "endColumnNumber" : 65
      },
      "nodeContext" : "setCursorPosition(getArg1(1) - 1,getArg0(1) - 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 1382,
        "startColumnNumber" : 16,
        "endLineNumber" : 1382,
        "endColumnNumber" : 66
      },
      "nodeContext" : "setCursorPosition(getArg1(1) - 1,getArg0(1) - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17298,
        "startLineNumber" : 1332,
        "startColumnNumber" : 8,
        "endLineNumber" : 1639,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (b) {\ncase '!':  continueSequence(ESC_CSI_EXCLAMATION);\nbreak;\ncase '\"':continueSequence(ESC_CSI_DOUBLE_QUOTE);\nbreak;\ncase '\\'':continueSequence(ESC_CSI_SINGLE_QUOTE);\nbreak;\ncase '$':continueSequence(ESC_CSI_DOLLAR);\nbreak;\ncase '*':continueSequence(ESC_CSI_ARGS_ASTERIX);\nbreak;\ncase '@':{\nmAboutToAutoWrap=false;\nint columnsAfterCursor=mColumns - mCursorCol;\nint spacesToInsert=Math.min(getArg0(1),columnsAfterCursor);\nint charsToMove=columnsAfterCursor - spacesToInsert;\nmScreen.blockCopy(mCursorCol,mCursorRow,charsToMove,1,mCursorCol + spacesToInsert,mCursorRow);\nblockClear(mCursorCol,mCursorRow,spacesToInsert);\n}\nbreak;\ncase 'A':setCursorRow(Math.max(mTopMargin,mCursorRow - getArg0(1)));\nbreak;\ncase 'B':setCursorRow(Math.min(mBottomMargin - 1,mCursorRow + getArg0(1)));\nbreak;\ncase 'C':case 'a':setCursorCol(Math.min(mRightMargin - 1,mCursorCol + getArg0(1)));\nbreak;\ncase 'D':setCursorCol(Math.max(mLeftMargin,mCursorCol - getArg0(1)));\nbreak;\ncase 'E':setCursorPosition(0,mCursorRow + getArg0(1));\nbreak;\ncase 'F':setCursorPosition(0,mCursorRow - getArg0(1));\nbreak;\ncase 'G':setCursorCol(Math.min(Math.max(1,getArg0(1)),mColumns) - 1);\nbreak;\ncase 'H':case 'f':setCursorPosition(getArg1(1) - 1,getArg0(1) - 1);\nbreak;\ncase 'I':setCursorCol(nextTabStop(getArg0(1)));\nbreak;\ncase 'J':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nblockClear(0,mCursorRow + 1,mColumns,mRows - (mCursorRow + 1));\nbreak;\ncase 1:blockClear(0,0,mColumns,mCursorRow);\nblockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,0,mColumns,mRows);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'K':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nbreak;\ncase 1:blockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,mCursorRow,mColumns);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'L':{\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToInsert=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToInsert;\nmScreen.blockCopy(0,mCursorRow,mColumns,linesToMove,0,mCursorRow + linesToInsert);\nblockClear(0,mCursorRow,mColumns,linesToInsert);\n}\nbreak;\ncase 'M':{\nmAboutToAutoWrap=false;\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToDelete=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToDelete;\nmScreen.blockCopy(0,mCursorRow + linesToDelete,mColumns,linesToMove,0,mCursorRow);\nblockClear(0,mCursorRow + linesToMove,mColumns,linesToDelete);\n}\nbreak;\ncase 'P':{\nmAboutToAutoWrap=false;\nint cellsAfterCursor=mColumns - mCursorCol;\nint cellsToDelete=Math.min(getArg0(1),cellsAfterCursor);\nint cellsToMove=cellsAfterCursor - cellsToDelete;\nmScreen.blockCopy(mCursorCol + cellsToDelete,mCursorRow,cellsToMove,1,mCursorCol,mCursorRow);\nblockClear(mCursorCol + cellsToMove,mCursorRow,cellsToDelete);\n}\nbreak;\ncase 'S':{\nfinal int linesToScroll=getArg0(1);\nfor (int i=0; i < linesToScroll; i++) scrollDownOneLine();\nbreak;\n}\ncase 'T':if (mArgIndex == 0) {\nfinal int linesToScrollArg=getArg0(1);\nfinal int linesBetweenTopAndBottomMargins=mBottomMargin - mTopMargin;\nfinal int linesToScroll=Math.min(linesBetweenTopAndBottomMargins,linesToScrollArg);\nmScreen.blockCopy(0,mTopMargin,mColumns,linesBetweenTopAndBottomMargins - linesToScroll,0,mTopMargin + linesToScroll);\nblockClear(0,mTopMargin,mColumns,linesToScroll);\n}\n else {\nunimplementedSequence(b);\n}\nbreak;\ncase 'X':mAboutToAutoWrap=false;\nmScreen.blockSet(mCursorCol,mCursorRow,Math.min(getArg0(1),mColumns - mCursorCol),1,' ',getStyle());\nbreak;\ncase 'Z':int numberOfTabs=getArg0(1);\nint newCol=mLeftMargin;\nfor (int i=mCursorCol - 1; i >= 0; i--) if (mTabStop[i]) {\nif (--numberOfTabs == 0) {\nnewCol=Math.max(i,mLeftMargin);\nbreak;\n}\n}\nmCursorCol=newCol;\nbreak;\ncase '?':continueSequence(ESC_CSI_QUESTIONMARK);\nbreak;\ncase '>':continueSequence(ESC_CSI_BIGGERTHAN);\nbreak;\ncase '`':setCursorColRespectingOriginMode(getArg0(1) - 1);\nbreak;\ncase 'c':if (getArg0(0) == 0) mSession.write(\"\\033[?64;1;2;6;9;15;18;21;22c\");\nbreak;\ncase 'd':setCursorRow(Math.min(Math.max(1,getArg0(1)),mRows) - 1);\nbreak;\ncase 'e':setCursorPosition(mCursorCol,mCursorRow + getArg0(1));\nbreak;\ncase 'g':switch (getArg0(0)) {\ncase 0:mTabStop[mCursorCol]=false;\nbreak;\ncase 3:for (int i=0; i < mColumns; i++) {\nmTabStop[i]=false;\n}\nbreak;\ndefault:break;\n}\nbreak;\ncase 'h':doSetMode(true);\nbreak;\ncase 'l':doSetMode(false);\nbreak;\ncase 'm':selectGraphicRendition();\nbreak;\ncase 'n':switch (getArg0(0)) {\ncase 5:byte[] dsr={(byte)27,(byte)'[',(byte)'0',(byte)'n'};\nmSession.write(dsr,0,dsr.length);\nbreak;\ncase 6:mSession.write(String.format(Locale.US,\"\\033[%d;%dR\",mCursorRow + 1,mCursorCol + 1));\nbreak;\ndefault:break;\n}\nbreak;\ncase 'r':{\nmTopMargin=Math.max(0,Math.min(getArg0(1) - 1,mRows - 2));\nmBottomMargin=Math.max(mTopMargin + 2,Math.min(getArg1(mRows),mRows));\nsetCursorPosition(0,0);\n}\nbreak;\ncase 's':if (isDecsetInternalBitSet(DECSET_BIT_LEFTRIGHT_MARGIN_MODE)) {\nmLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2);\nmRightMargin=Math.max(mLeftMargin + 1,Math.min(getArg1(mColumns),mColumns));\nsetCursorPosition(0,0);\n}\n else {\nsaveCursor();\n}\nbreak;\ncase 't':switch (getArg0(0)) {\ncase 11:mSession.write(\"\\033[1t\");\nbreak;\ncase 13:mSession.write(\"\\033[3;0;0t\");\nbreak;\ncase 14:mSession.write(String.format(Locale.US,\"\\033[4;%d;%dt\",mRows * 12,mColumns * 12));\nbreak;\ncase 18:mSession.write(String.format(Locale.US,\"\\033[8;%d;%dt\",mRows,mColumns));\nbreak;\ncase 19:mSession.write(String.format(Locale.US,\"\\033[9;%d;%dt\",mRows,mColumns));\nbreak;\ncase 20:mSession.write(\"\\033]LIconLabel\\033\\\\\");\nbreak;\ncase 21:mSession.write(\"\\033]l\\033\\\\\");\nbreak;\ncase 22:mTitleStack.push(mTitle);\nif (mTitleStack.size() > 20) {\nmTitleStack.remove(0);\n}\nbreak;\ncase 23:if (!mTitleStack.isEmpty()) setTitle(mTitleStack.pop());\nbreak;\ndefault:break;\n}\nbreak;\ncase 'u':restoreCursor();\nbreak;\ncase ' ':continueSequence(ESC_CSI_ARGS_SPACE);\nbreak;\ndefault:parseArg(b);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1088,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 17314,
        "startLineNumber" : 1331,
        "startColumnNumber" : 30,
        "endLineNumber" : 1640,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (b) {\ncase '!':    continueSequence(ESC_CSI_EXCLAMATION);\n  break;\ncase '\"':continueSequence(ESC_CSI_DOUBLE_QUOTE);\nbreak;\ncase '\\'':continueSequence(ESC_CSI_SINGLE_QUOTE);\nbreak;\ncase '$':continueSequence(ESC_CSI_DOLLAR);\nbreak;\ncase '*':continueSequence(ESC_CSI_ARGS_ASTERIX);\nbreak;\ncase '@':{\nmAboutToAutoWrap=false;\nint columnsAfterCursor=mColumns - mCursorCol;\nint spacesToInsert=Math.min(getArg0(1),columnsAfterCursor);\nint charsToMove=columnsAfterCursor - spacesToInsert;\nmScreen.blockCopy(mCursorCol,mCursorRow,charsToMove,1,mCursorCol + spacesToInsert,mCursorRow);\nblockClear(mCursorCol,mCursorRow,spacesToInsert);\n}\nbreak;\ncase 'A':setCursorRow(Math.max(mTopMargin,mCursorRow - getArg0(1)));\nbreak;\ncase 'B':setCursorRow(Math.min(mBottomMargin - 1,mCursorRow + getArg0(1)));\nbreak;\ncase 'C':case 'a':setCursorCol(Math.min(mRightMargin - 1,mCursorCol + getArg0(1)));\nbreak;\ncase 'D':setCursorCol(Math.max(mLeftMargin,mCursorCol - getArg0(1)));\nbreak;\ncase 'E':setCursorPosition(0,mCursorRow + getArg0(1));\nbreak;\ncase 'F':setCursorPosition(0,mCursorRow - getArg0(1));\nbreak;\ncase 'G':setCursorCol(Math.min(Math.max(1,getArg0(1)),mColumns) - 1);\nbreak;\ncase 'H':case 'f':setCursorPosition(getArg1(1) - 1,getArg0(1) - 1);\nbreak;\ncase 'I':setCursorCol(nextTabStop(getArg0(1)));\nbreak;\ncase 'J':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nblockClear(0,mCursorRow + 1,mColumns,mRows - (mCursorRow + 1));\nbreak;\ncase 1:blockClear(0,0,mColumns,mCursorRow);\nblockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,0,mColumns,mRows);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'K':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nbreak;\ncase 1:blockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,mCursorRow,mColumns);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'L':{\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToInsert=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToInsert;\nmScreen.blockCopy(0,mCursorRow,mColumns,linesToMove,0,mCursorRow + linesToInsert);\nblockClear(0,mCursorRow,mColumns,linesToInsert);\n}\nbreak;\ncase 'M':{\nmAboutToAutoWrap=false;\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToDelete=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToDelete;\nmScreen.blockCopy(0,mCursorRow + linesToDelete,mColumns,linesToMove,0,mCursorRow);\nblockClear(0,mCursorRow + linesToMove,mColumns,linesToDelete);\n}\nbreak;\ncase 'P':{\nmAboutToAutoWrap=false;\nint cellsAfterCursor=mColumns - mCursorCol;\nint cellsToDelete=Math.min(getArg0(1),cellsAfterCursor);\nint cellsToMove=cellsAfterCursor - cellsToDelete;\nmScreen.blockCopy(mCursorCol + cellsToDelete,mCursorRow,cellsToMove,1,mCursorCol,mCursorRow);\nblockClear(mCursorCol + cellsToMove,mCursorRow,cellsToDelete);\n}\nbreak;\ncase 'S':{\nfinal int linesToScroll=getArg0(1);\nfor (int i=0; i < linesToScroll; i++) scrollDownOneLine();\nbreak;\n}\ncase 'T':if (mArgIndex == 0) {\nfinal int linesToScrollArg=getArg0(1);\nfinal int linesBetweenTopAndBottomMargins=mBottomMargin - mTopMargin;\nfinal int linesToScroll=Math.min(linesBetweenTopAndBottomMargins,linesToScrollArg);\nmScreen.blockCopy(0,mTopMargin,mColumns,linesBetweenTopAndBottomMargins - linesToScroll,0,mTopMargin + linesToScroll);\nblockClear(0,mTopMargin,mColumns,linesToScroll);\n}\n else {\nunimplementedSequence(b);\n}\nbreak;\ncase 'X':mAboutToAutoWrap=false;\nmScreen.blockSet(mCursorCol,mCursorRow,Math.min(getArg0(1),mColumns - mCursorCol),1,' ',getStyle());\nbreak;\ncase 'Z':int numberOfTabs=getArg0(1);\nint newCol=mLeftMargin;\nfor (int i=mCursorCol - 1; i >= 0; i--) if (mTabStop[i]) {\nif (--numberOfTabs == 0) {\nnewCol=Math.max(i,mLeftMargin);\nbreak;\n}\n}\nmCursorCol=newCol;\nbreak;\ncase '?':continueSequence(ESC_CSI_QUESTIONMARK);\nbreak;\ncase '>':continueSequence(ESC_CSI_BIGGERTHAN);\nbreak;\ncase '`':setCursorColRespectingOriginMode(getArg0(1) - 1);\nbreak;\ncase 'c':if (getArg0(0) == 0) mSession.write(\"\\033[?64;1;2;6;9;15;18;21;22c\");\nbreak;\ncase 'd':setCursorRow(Math.min(Math.max(1,getArg0(1)),mRows) - 1);\nbreak;\ncase 'e':setCursorPosition(mCursorCol,mCursorRow + getArg0(1));\nbreak;\ncase 'g':switch (getArg0(0)) {\ncase 0:mTabStop[mCursorCol]=false;\nbreak;\ncase 3:for (int i=0; i < mColumns; i++) {\nmTabStop[i]=false;\n}\nbreak;\ndefault:break;\n}\nbreak;\ncase 'h':doSetMode(true);\nbreak;\ncase 'l':doSetMode(false);\nbreak;\ncase 'm':selectGraphicRendition();\nbreak;\ncase 'n':switch (getArg0(0)) {\ncase 5:byte[] dsr={(byte)27,(byte)'[',(byte)'0',(byte)'n'};\nmSession.write(dsr,0,dsr.length);\nbreak;\ncase 6:mSession.write(String.format(Locale.US,\"\\033[%d;%dR\",mCursorRow + 1,mCursorCol + 1));\nbreak;\ndefault:break;\n}\nbreak;\ncase 'r':{\nmTopMargin=Math.max(0,Math.min(getArg0(1) - 1,mRows - 2));\nmBottomMargin=Math.max(mTopMargin + 2,Math.min(getArg1(mRows),mRows));\nsetCursorPosition(0,0);\n}\nbreak;\ncase 's':if (isDecsetInternalBitSet(DECSET_BIT_LEFTRIGHT_MARGIN_MODE)) {\nmLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2);\nmRightMargin=Math.max(mLeftMargin + 1,Math.min(getArg1(mColumns),mColumns));\nsetCursorPosition(0,0);\n}\n else {\nsaveCursor();\n}\nbreak;\ncase 't':switch (getArg0(0)) {\ncase 11:mSession.write(\"\\033[1t\");\nbreak;\ncase 13:mSession.write(\"\\033[3;0;0t\");\nbreak;\ncase 14:mSession.write(String.format(Locale.US,\"\\033[4;%d;%dt\",mRows * 12,mColumns * 12));\nbreak;\ncase 18:mSession.write(String.format(Locale.US,\"\\033[8;%d;%dt\",mRows,mColumns));\nbreak;\ncase 19:mSession.write(String.format(Locale.US,\"\\033[9;%d;%dt\",mRows,mColumns));\nbreak;\ncase 20:mSession.write(\"\\033]LIconLabel\\033\\\\\");\nbreak;\ncase 21:mSession.write(\"\\033]l\\033\\\\\");\nbreak;\ncase 22:mTitleStack.push(mTitle);\nif (mTitleStack.size() > 20) {\nmTitleStack.remove(0);\n}\nbreak;\ncase 23:if (!mTitleStack.isEmpty()) setTitle(mTitleStack.pop());\nbreak;\ndefault:break;\n}\nbreak;\ncase 'u':restoreCursor();\nbreak;\ncase ' ':continueSequence(ESC_CSI_ARGS_SPACE);\nbreak;\ndefault:parseArg(b);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1089,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 17425,
        "startLineNumber" : 1330,
        "startColumnNumber" : 4,
        "endLineNumber" : 1640,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Following a CSI - Control Sequence Introducer, \"\\033[\".  {@link #ESC_CSI}. \n */\nprivate void doCsi(int b){\nswitch (b) {\ncase '!':    continueSequence(ESC_CSI_EXCLAMATION);\n  break;\ncase '\"':continueSequence(ESC_CSI_DOUBLE_QUOTE);\nbreak;\ncase '\\'':continueSequence(ESC_CSI_SINGLE_QUOTE);\nbreak;\ncase '$':continueSequence(ESC_CSI_DOLLAR);\nbreak;\ncase '*':continueSequence(ESC_CSI_ARGS_ASTERIX);\nbreak;\ncase '@':{\nmAboutToAutoWrap=false;\nint columnsAfterCursor=mColumns - mCursorCol;\nint spacesToInsert=Math.min(getArg0(1),columnsAfterCursor);\nint charsToMove=columnsAfterCursor - spacesToInsert;\nmScreen.blockCopy(mCursorCol,mCursorRow,charsToMove,1,mCursorCol + spacesToInsert,mCursorRow);\nblockClear(mCursorCol,mCursorRow,spacesToInsert);\n}\nbreak;\ncase 'A':setCursorRow(Math.max(mTopMargin,mCursorRow - getArg0(1)));\nbreak;\ncase 'B':setCursorRow(Math.min(mBottomMargin - 1,mCursorRow + getArg0(1)));\nbreak;\ncase 'C':case 'a':setCursorCol(Math.min(mRightMargin - 1,mCursorCol + getArg0(1)));\nbreak;\ncase 'D':setCursorCol(Math.max(mLeftMargin,mCursorCol - getArg0(1)));\nbreak;\ncase 'E':setCursorPosition(0,mCursorRow + getArg0(1));\nbreak;\ncase 'F':setCursorPosition(0,mCursorRow - getArg0(1));\nbreak;\ncase 'G':setCursorCol(Math.min(Math.max(1,getArg0(1)),mColumns) - 1);\nbreak;\ncase 'H':case 'f':setCursorPosition(getArg1(1) - 1,getArg0(1) - 1);\nbreak;\ncase 'I':setCursorCol(nextTabStop(getArg0(1)));\nbreak;\ncase 'J':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nblockClear(0,mCursorRow + 1,mColumns,mRows - (mCursorRow + 1));\nbreak;\ncase 1:blockClear(0,0,mColumns,mCursorRow);\nblockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,0,mColumns,mRows);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'K':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nbreak;\ncase 1:blockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,mCursorRow,mColumns);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'L':{\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToInsert=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToInsert;\nmScreen.blockCopy(0,mCursorRow,mColumns,linesToMove,0,mCursorRow + linesToInsert);\nblockClear(0,mCursorRow,mColumns,linesToInsert);\n}\nbreak;\ncase 'M':{\nmAboutToAutoWrap=false;\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToDelete=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToDelete;\nmScreen.blockCopy(0,mCursorRow + linesToDelete,mColumns,linesToMove,0,mCursorRow);\nblockClear(0,mCursorRow + linesToMove,mColumns,linesToDelete);\n}\nbreak;\ncase 'P':{\nmAboutToAutoWrap=false;\nint cellsAfterCursor=mColumns - mCursorCol;\nint cellsToDelete=Math.min(getArg0(1),cellsAfterCursor);\nint cellsToMove=cellsAfterCursor - cellsToDelete;\nmScreen.blockCopy(mCursorCol + cellsToDelete,mCursorRow,cellsToMove,1,mCursorCol,mCursorRow);\nblockClear(mCursorCol + cellsToMove,mCursorRow,cellsToDelete);\n}\nbreak;\ncase 'S':{\nfinal int linesToScroll=getArg0(1);\nfor (int i=0; i < linesToScroll; i++) scrollDownOneLine();\nbreak;\n}\ncase 'T':if (mArgIndex == 0) {\nfinal int linesToScrollArg=getArg0(1);\nfinal int linesBetweenTopAndBottomMargins=mBottomMargin - mTopMargin;\nfinal int linesToScroll=Math.min(linesBetweenTopAndBottomMargins,linesToScrollArg);\nmScreen.blockCopy(0,mTopMargin,mColumns,linesBetweenTopAndBottomMargins - linesToScroll,0,mTopMargin + linesToScroll);\nblockClear(0,mTopMargin,mColumns,linesToScroll);\n}\n else {\nunimplementedSequence(b);\n}\nbreak;\ncase 'X':mAboutToAutoWrap=false;\nmScreen.blockSet(mCursorCol,mCursorRow,Math.min(getArg0(1),mColumns - mCursorCol),1,' ',getStyle());\nbreak;\ncase 'Z':int numberOfTabs=getArg0(1);\nint newCol=mLeftMargin;\nfor (int i=mCursorCol - 1; i >= 0; i--) if (mTabStop[i]) {\nif (--numberOfTabs == 0) {\nnewCol=Math.max(i,mLeftMargin);\nbreak;\n}\n}\nmCursorCol=newCol;\nbreak;\ncase '?':continueSequence(ESC_CSI_QUESTIONMARK);\nbreak;\ncase '>':continueSequence(ESC_CSI_BIGGERTHAN);\nbreak;\ncase '`':setCursorColRespectingOriginMode(getArg0(1) - 1);\nbreak;\ncase 'c':if (getArg0(0) == 0) mSession.write(\"\\033[?64;1;2;6;9;15;18;21;22c\");\nbreak;\ncase 'd':setCursorRow(Math.min(Math.max(1,getArg0(1)),mRows) - 1);\nbreak;\ncase 'e':setCursorPosition(mCursorCol,mCursorRow + getArg0(1));\nbreak;\ncase 'g':switch (getArg0(0)) {\ncase 0:mTabStop[mCursorCol]=false;\nbreak;\ncase 3:for (int i=0; i < mColumns; i++) {\nmTabStop[i]=false;\n}\nbreak;\ndefault:break;\n}\nbreak;\ncase 'h':doSetMode(true);\nbreak;\ncase 'l':doSetMode(false);\nbreak;\ncase 'm':selectGraphicRendition();\nbreak;\ncase 'n':switch (getArg0(0)) {\ncase 5:byte[] dsr={(byte)27,(byte)'[',(byte)'0',(byte)'n'};\nmSession.write(dsr,0,dsr.length);\nbreak;\ncase 6:mSession.write(String.format(Locale.US,\"\\033[%d;%dR\",mCursorRow + 1,mCursorCol + 1));\nbreak;\ndefault:break;\n}\nbreak;\ncase 'r':{\nmTopMargin=Math.max(0,Math.min(getArg0(1) - 1,mRows - 2));\nmBottomMargin=Math.max(mTopMargin + 2,Math.min(getArg1(mRows),mRows));\nsetCursorPosition(0,0);\n}\nbreak;\ncase 's':if (isDecsetInternalBitSet(DECSET_BIT_LEFTRIGHT_MARGIN_MODE)) {\nmLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2);\nmRightMargin=Math.max(mLeftMargin + 1,Math.min(getArg1(mColumns),mColumns));\nsetCursorPosition(0,0);\n}\n else {\nsaveCursor();\n}\nbreak;\ncase 't':switch (getArg0(0)) {\ncase 11:mSession.write(\"\\033[1t\");\nbreak;\ncase 13:mSession.write(\"\\033[3;0;0t\");\nbreak;\ncase 14:mSession.write(String.format(Locale.US,\"\\033[4;%d;%dt\",mRows * 12,mColumns * 12));\nbreak;\ncase 18:mSession.write(String.format(Locale.US,\"\\033[8;%d;%dt\",mRows,mColumns));\nbreak;\ncase 19:mSession.write(String.format(Locale.US,\"\\033[9;%d;%dt\",mRows,mColumns));\nbreak;\ncase 20:mSession.write(\"\\033]LIconLabel\\033\\\\\");\nbreak;\ncase 21:mSession.write(\"\\033]l\\033\\\\\");\nbreak;\ncase 22:mTitleStack.push(mTitle);\nif (mTitleStack.size() > 20) {\nmTitleStack.remove(0);\n}\nbreak;\ncase 23:if (!mTitleStack.isEmpty()) setTitle(mTitleStack.pop());\nbreak;\ndefault:break;\n}\nbreak;\ncase 'u':restoreCursor();\nbreak;\ncase ' ':continueSequence(ESC_CSI_ARGS_SPACE);\nbreak;\ndefault:parseArg(b);\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1097,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 1382,
        "startColumnNumber" : 16,
        "endLineNumber" : 1382,
        "endColumnNumber" : 66
      },
      "nodeContext" : "setCursorPosition(getArg1(1) - 1,getArg0(1) - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "int"
  }, {
    "nodeContext" : "getArg0(1) - 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 1504,
      "startColumnNumber" : 49,
      "endLineNumber" : 1504,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 1504,
        "startColumnNumber" : 16,
        "endLineNumber" : 1504,
        "endColumnNumber" : 64
      },
      "nodeContext" : "setCursorColRespectingOriginMode(getArg0(1) - 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 1504,
        "startColumnNumber" : 16,
        "endLineNumber" : 1504,
        "endColumnNumber" : 65
      },
      "nodeContext" : "setCursorColRespectingOriginMode(getArg0(1) - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17298,
        "startLineNumber" : 1332,
        "startColumnNumber" : 8,
        "endLineNumber" : 1639,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (b) {\ncase '!':  continueSequence(ESC_CSI_EXCLAMATION);\nbreak;\ncase '\"':continueSequence(ESC_CSI_DOUBLE_QUOTE);\nbreak;\ncase '\\'':continueSequence(ESC_CSI_SINGLE_QUOTE);\nbreak;\ncase '$':continueSequence(ESC_CSI_DOLLAR);\nbreak;\ncase '*':continueSequence(ESC_CSI_ARGS_ASTERIX);\nbreak;\ncase '@':{\nmAboutToAutoWrap=false;\nint columnsAfterCursor=mColumns - mCursorCol;\nint spacesToInsert=Math.min(getArg0(1),columnsAfterCursor);\nint charsToMove=columnsAfterCursor - spacesToInsert;\nmScreen.blockCopy(mCursorCol,mCursorRow,charsToMove,1,mCursorCol + spacesToInsert,mCursorRow);\nblockClear(mCursorCol,mCursorRow,spacesToInsert);\n}\nbreak;\ncase 'A':setCursorRow(Math.max(mTopMargin,mCursorRow - getArg0(1)));\nbreak;\ncase 'B':setCursorRow(Math.min(mBottomMargin - 1,mCursorRow + getArg0(1)));\nbreak;\ncase 'C':case 'a':setCursorCol(Math.min(mRightMargin - 1,mCursorCol + getArg0(1)));\nbreak;\ncase 'D':setCursorCol(Math.max(mLeftMargin,mCursorCol - getArg0(1)));\nbreak;\ncase 'E':setCursorPosition(0,mCursorRow + getArg0(1));\nbreak;\ncase 'F':setCursorPosition(0,mCursorRow - getArg0(1));\nbreak;\ncase 'G':setCursorCol(Math.min(Math.max(1,getArg0(1)),mColumns) - 1);\nbreak;\ncase 'H':case 'f':setCursorPosition(getArg1(1) - 1,getArg0(1) - 1);\nbreak;\ncase 'I':setCursorCol(nextTabStop(getArg0(1)));\nbreak;\ncase 'J':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nblockClear(0,mCursorRow + 1,mColumns,mRows - (mCursorRow + 1));\nbreak;\ncase 1:blockClear(0,0,mColumns,mCursorRow);\nblockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,0,mColumns,mRows);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'K':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nbreak;\ncase 1:blockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,mCursorRow,mColumns);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'L':{\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToInsert=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToInsert;\nmScreen.blockCopy(0,mCursorRow,mColumns,linesToMove,0,mCursorRow + linesToInsert);\nblockClear(0,mCursorRow,mColumns,linesToInsert);\n}\nbreak;\ncase 'M':{\nmAboutToAutoWrap=false;\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToDelete=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToDelete;\nmScreen.blockCopy(0,mCursorRow + linesToDelete,mColumns,linesToMove,0,mCursorRow);\nblockClear(0,mCursorRow + linesToMove,mColumns,linesToDelete);\n}\nbreak;\ncase 'P':{\nmAboutToAutoWrap=false;\nint cellsAfterCursor=mColumns - mCursorCol;\nint cellsToDelete=Math.min(getArg0(1),cellsAfterCursor);\nint cellsToMove=cellsAfterCursor - cellsToDelete;\nmScreen.blockCopy(mCursorCol + cellsToDelete,mCursorRow,cellsToMove,1,mCursorCol,mCursorRow);\nblockClear(mCursorCol + cellsToMove,mCursorRow,cellsToDelete);\n}\nbreak;\ncase 'S':{\nfinal int linesToScroll=getArg0(1);\nfor (int i=0; i < linesToScroll; i++) scrollDownOneLine();\nbreak;\n}\ncase 'T':if (mArgIndex == 0) {\nfinal int linesToScrollArg=getArg0(1);\nfinal int linesBetweenTopAndBottomMargins=mBottomMargin - mTopMargin;\nfinal int linesToScroll=Math.min(linesBetweenTopAndBottomMargins,linesToScrollArg);\nmScreen.blockCopy(0,mTopMargin,mColumns,linesBetweenTopAndBottomMargins - linesToScroll,0,mTopMargin + linesToScroll);\nblockClear(0,mTopMargin,mColumns,linesToScroll);\n}\n else {\nunimplementedSequence(b);\n}\nbreak;\ncase 'X':mAboutToAutoWrap=false;\nmScreen.blockSet(mCursorCol,mCursorRow,Math.min(getArg0(1),mColumns - mCursorCol),1,' ',getStyle());\nbreak;\ncase 'Z':int numberOfTabs=getArg0(1);\nint newCol=mLeftMargin;\nfor (int i=mCursorCol - 1; i >= 0; i--) if (mTabStop[i]) {\nif (--numberOfTabs == 0) {\nnewCol=Math.max(i,mLeftMargin);\nbreak;\n}\n}\nmCursorCol=newCol;\nbreak;\ncase '?':continueSequence(ESC_CSI_QUESTIONMARK);\nbreak;\ncase '>':continueSequence(ESC_CSI_BIGGERTHAN);\nbreak;\ncase '`':setCursorColRespectingOriginMode(getArg0(1) - 1);\nbreak;\ncase 'c':if (getArg0(0) == 0) mSession.write(\"\\033[?64;1;2;6;9;15;18;21;22c\");\nbreak;\ncase 'd':setCursorRow(Math.min(Math.max(1,getArg0(1)),mRows) - 1);\nbreak;\ncase 'e':setCursorPosition(mCursorCol,mCursorRow + getArg0(1));\nbreak;\ncase 'g':switch (getArg0(0)) {\ncase 0:mTabStop[mCursorCol]=false;\nbreak;\ncase 3:for (int i=0; i < mColumns; i++) {\nmTabStop[i]=false;\n}\nbreak;\ndefault:break;\n}\nbreak;\ncase 'h':doSetMode(true);\nbreak;\ncase 'l':doSetMode(false);\nbreak;\ncase 'm':selectGraphicRendition();\nbreak;\ncase 'n':switch (getArg0(0)) {\ncase 5:byte[] dsr={(byte)27,(byte)'[',(byte)'0',(byte)'n'};\nmSession.write(dsr,0,dsr.length);\nbreak;\ncase 6:mSession.write(String.format(Locale.US,\"\\033[%d;%dR\",mCursorRow + 1,mCursorCol + 1));\nbreak;\ndefault:break;\n}\nbreak;\ncase 'r':{\nmTopMargin=Math.max(0,Math.min(getArg0(1) - 1,mRows - 2));\nmBottomMargin=Math.max(mTopMargin + 2,Math.min(getArg1(mRows),mRows));\nsetCursorPosition(0,0);\n}\nbreak;\ncase 's':if (isDecsetInternalBitSet(DECSET_BIT_LEFTRIGHT_MARGIN_MODE)) {\nmLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2);\nmRightMargin=Math.max(mLeftMargin + 1,Math.min(getArg1(mColumns),mColumns));\nsetCursorPosition(0,0);\n}\n else {\nsaveCursor();\n}\nbreak;\ncase 't':switch (getArg0(0)) {\ncase 11:mSession.write(\"\\033[1t\");\nbreak;\ncase 13:mSession.write(\"\\033[3;0;0t\");\nbreak;\ncase 14:mSession.write(String.format(Locale.US,\"\\033[4;%d;%dt\",mRows * 12,mColumns * 12));\nbreak;\ncase 18:mSession.write(String.format(Locale.US,\"\\033[8;%d;%dt\",mRows,mColumns));\nbreak;\ncase 19:mSession.write(String.format(Locale.US,\"\\033[9;%d;%dt\",mRows,mColumns));\nbreak;\ncase 20:mSession.write(\"\\033]LIconLabel\\033\\\\\");\nbreak;\ncase 21:mSession.write(\"\\033]l\\033\\\\\");\nbreak;\ncase 22:mTitleStack.push(mTitle);\nif (mTitleStack.size() > 20) {\nmTitleStack.remove(0);\n}\nbreak;\ncase 23:if (!mTitleStack.isEmpty()) setTitle(mTitleStack.pop());\nbreak;\ndefault:break;\n}\nbreak;\ncase 'u':restoreCursor();\nbreak;\ncase ' ':continueSequence(ESC_CSI_ARGS_SPACE);\nbreak;\ndefault:parseArg(b);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1088,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 17314,
        "startLineNumber" : 1331,
        "startColumnNumber" : 30,
        "endLineNumber" : 1640,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (b) {\ncase '!':    continueSequence(ESC_CSI_EXCLAMATION);\n  break;\ncase '\"':continueSequence(ESC_CSI_DOUBLE_QUOTE);\nbreak;\ncase '\\'':continueSequence(ESC_CSI_SINGLE_QUOTE);\nbreak;\ncase '$':continueSequence(ESC_CSI_DOLLAR);\nbreak;\ncase '*':continueSequence(ESC_CSI_ARGS_ASTERIX);\nbreak;\ncase '@':{\nmAboutToAutoWrap=false;\nint columnsAfterCursor=mColumns - mCursorCol;\nint spacesToInsert=Math.min(getArg0(1),columnsAfterCursor);\nint charsToMove=columnsAfterCursor - spacesToInsert;\nmScreen.blockCopy(mCursorCol,mCursorRow,charsToMove,1,mCursorCol + spacesToInsert,mCursorRow);\nblockClear(mCursorCol,mCursorRow,spacesToInsert);\n}\nbreak;\ncase 'A':setCursorRow(Math.max(mTopMargin,mCursorRow - getArg0(1)));\nbreak;\ncase 'B':setCursorRow(Math.min(mBottomMargin - 1,mCursorRow + getArg0(1)));\nbreak;\ncase 'C':case 'a':setCursorCol(Math.min(mRightMargin - 1,mCursorCol + getArg0(1)));\nbreak;\ncase 'D':setCursorCol(Math.max(mLeftMargin,mCursorCol - getArg0(1)));\nbreak;\ncase 'E':setCursorPosition(0,mCursorRow + getArg0(1));\nbreak;\ncase 'F':setCursorPosition(0,mCursorRow - getArg0(1));\nbreak;\ncase 'G':setCursorCol(Math.min(Math.max(1,getArg0(1)),mColumns) - 1);\nbreak;\ncase 'H':case 'f':setCursorPosition(getArg1(1) - 1,getArg0(1) - 1);\nbreak;\ncase 'I':setCursorCol(nextTabStop(getArg0(1)));\nbreak;\ncase 'J':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nblockClear(0,mCursorRow + 1,mColumns,mRows - (mCursorRow + 1));\nbreak;\ncase 1:blockClear(0,0,mColumns,mCursorRow);\nblockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,0,mColumns,mRows);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'K':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nbreak;\ncase 1:blockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,mCursorRow,mColumns);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'L':{\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToInsert=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToInsert;\nmScreen.blockCopy(0,mCursorRow,mColumns,linesToMove,0,mCursorRow + linesToInsert);\nblockClear(0,mCursorRow,mColumns,linesToInsert);\n}\nbreak;\ncase 'M':{\nmAboutToAutoWrap=false;\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToDelete=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToDelete;\nmScreen.blockCopy(0,mCursorRow + linesToDelete,mColumns,linesToMove,0,mCursorRow);\nblockClear(0,mCursorRow + linesToMove,mColumns,linesToDelete);\n}\nbreak;\ncase 'P':{\nmAboutToAutoWrap=false;\nint cellsAfterCursor=mColumns - mCursorCol;\nint cellsToDelete=Math.min(getArg0(1),cellsAfterCursor);\nint cellsToMove=cellsAfterCursor - cellsToDelete;\nmScreen.blockCopy(mCursorCol + cellsToDelete,mCursorRow,cellsToMove,1,mCursorCol,mCursorRow);\nblockClear(mCursorCol + cellsToMove,mCursorRow,cellsToDelete);\n}\nbreak;\ncase 'S':{\nfinal int linesToScroll=getArg0(1);\nfor (int i=0; i < linesToScroll; i++) scrollDownOneLine();\nbreak;\n}\ncase 'T':if (mArgIndex == 0) {\nfinal int linesToScrollArg=getArg0(1);\nfinal int linesBetweenTopAndBottomMargins=mBottomMargin - mTopMargin;\nfinal int linesToScroll=Math.min(linesBetweenTopAndBottomMargins,linesToScrollArg);\nmScreen.blockCopy(0,mTopMargin,mColumns,linesBetweenTopAndBottomMargins - linesToScroll,0,mTopMargin + linesToScroll);\nblockClear(0,mTopMargin,mColumns,linesToScroll);\n}\n else {\nunimplementedSequence(b);\n}\nbreak;\ncase 'X':mAboutToAutoWrap=false;\nmScreen.blockSet(mCursorCol,mCursorRow,Math.min(getArg0(1),mColumns - mCursorCol),1,' ',getStyle());\nbreak;\ncase 'Z':int numberOfTabs=getArg0(1);\nint newCol=mLeftMargin;\nfor (int i=mCursorCol - 1; i >= 0; i--) if (mTabStop[i]) {\nif (--numberOfTabs == 0) {\nnewCol=Math.max(i,mLeftMargin);\nbreak;\n}\n}\nmCursorCol=newCol;\nbreak;\ncase '?':continueSequence(ESC_CSI_QUESTIONMARK);\nbreak;\ncase '>':continueSequence(ESC_CSI_BIGGERTHAN);\nbreak;\ncase '`':setCursorColRespectingOriginMode(getArg0(1) - 1);\nbreak;\ncase 'c':if (getArg0(0) == 0) mSession.write(\"\\033[?64;1;2;6;9;15;18;21;22c\");\nbreak;\ncase 'd':setCursorRow(Math.min(Math.max(1,getArg0(1)),mRows) - 1);\nbreak;\ncase 'e':setCursorPosition(mCursorCol,mCursorRow + getArg0(1));\nbreak;\ncase 'g':switch (getArg0(0)) {\ncase 0:mTabStop[mCursorCol]=false;\nbreak;\ncase 3:for (int i=0; i < mColumns; i++) {\nmTabStop[i]=false;\n}\nbreak;\ndefault:break;\n}\nbreak;\ncase 'h':doSetMode(true);\nbreak;\ncase 'l':doSetMode(false);\nbreak;\ncase 'm':selectGraphicRendition();\nbreak;\ncase 'n':switch (getArg0(0)) {\ncase 5:byte[] dsr={(byte)27,(byte)'[',(byte)'0',(byte)'n'};\nmSession.write(dsr,0,dsr.length);\nbreak;\ncase 6:mSession.write(String.format(Locale.US,\"\\033[%d;%dR\",mCursorRow + 1,mCursorCol + 1));\nbreak;\ndefault:break;\n}\nbreak;\ncase 'r':{\nmTopMargin=Math.max(0,Math.min(getArg0(1) - 1,mRows - 2));\nmBottomMargin=Math.max(mTopMargin + 2,Math.min(getArg1(mRows),mRows));\nsetCursorPosition(0,0);\n}\nbreak;\ncase 's':if (isDecsetInternalBitSet(DECSET_BIT_LEFTRIGHT_MARGIN_MODE)) {\nmLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2);\nmRightMargin=Math.max(mLeftMargin + 1,Math.min(getArg1(mColumns),mColumns));\nsetCursorPosition(0,0);\n}\n else {\nsaveCursor();\n}\nbreak;\ncase 't':switch (getArg0(0)) {\ncase 11:mSession.write(\"\\033[1t\");\nbreak;\ncase 13:mSession.write(\"\\033[3;0;0t\");\nbreak;\ncase 14:mSession.write(String.format(Locale.US,\"\\033[4;%d;%dt\",mRows * 12,mColumns * 12));\nbreak;\ncase 18:mSession.write(String.format(Locale.US,\"\\033[8;%d;%dt\",mRows,mColumns));\nbreak;\ncase 19:mSession.write(String.format(Locale.US,\"\\033[9;%d;%dt\",mRows,mColumns));\nbreak;\ncase 20:mSession.write(\"\\033]LIconLabel\\033\\\\\");\nbreak;\ncase 21:mSession.write(\"\\033]l\\033\\\\\");\nbreak;\ncase 22:mTitleStack.push(mTitle);\nif (mTitleStack.size() > 20) {\nmTitleStack.remove(0);\n}\nbreak;\ncase 23:if (!mTitleStack.isEmpty()) setTitle(mTitleStack.pop());\nbreak;\ndefault:break;\n}\nbreak;\ncase 'u':restoreCursor();\nbreak;\ncase ' ':continueSequence(ESC_CSI_ARGS_SPACE);\nbreak;\ndefault:parseArg(b);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1089,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 17425,
        "startLineNumber" : 1330,
        "startColumnNumber" : 4,
        "endLineNumber" : 1640,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Following a CSI - Control Sequence Introducer, \"\\033[\".  {@link #ESC_CSI}. \n */\nprivate void doCsi(int b){\nswitch (b) {\ncase '!':    continueSequence(ESC_CSI_EXCLAMATION);\n  break;\ncase '\"':continueSequence(ESC_CSI_DOUBLE_QUOTE);\nbreak;\ncase '\\'':continueSequence(ESC_CSI_SINGLE_QUOTE);\nbreak;\ncase '$':continueSequence(ESC_CSI_DOLLAR);\nbreak;\ncase '*':continueSequence(ESC_CSI_ARGS_ASTERIX);\nbreak;\ncase '@':{\nmAboutToAutoWrap=false;\nint columnsAfterCursor=mColumns - mCursorCol;\nint spacesToInsert=Math.min(getArg0(1),columnsAfterCursor);\nint charsToMove=columnsAfterCursor - spacesToInsert;\nmScreen.blockCopy(mCursorCol,mCursorRow,charsToMove,1,mCursorCol + spacesToInsert,mCursorRow);\nblockClear(mCursorCol,mCursorRow,spacesToInsert);\n}\nbreak;\ncase 'A':setCursorRow(Math.max(mTopMargin,mCursorRow - getArg0(1)));\nbreak;\ncase 'B':setCursorRow(Math.min(mBottomMargin - 1,mCursorRow + getArg0(1)));\nbreak;\ncase 'C':case 'a':setCursorCol(Math.min(mRightMargin - 1,mCursorCol + getArg0(1)));\nbreak;\ncase 'D':setCursorCol(Math.max(mLeftMargin,mCursorCol - getArg0(1)));\nbreak;\ncase 'E':setCursorPosition(0,mCursorRow + getArg0(1));\nbreak;\ncase 'F':setCursorPosition(0,mCursorRow - getArg0(1));\nbreak;\ncase 'G':setCursorCol(Math.min(Math.max(1,getArg0(1)),mColumns) - 1);\nbreak;\ncase 'H':case 'f':setCursorPosition(getArg1(1) - 1,getArg0(1) - 1);\nbreak;\ncase 'I':setCursorCol(nextTabStop(getArg0(1)));\nbreak;\ncase 'J':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nblockClear(0,mCursorRow + 1,mColumns,mRows - (mCursorRow + 1));\nbreak;\ncase 1:blockClear(0,0,mColumns,mCursorRow);\nblockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,0,mColumns,mRows);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'K':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nbreak;\ncase 1:blockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,mCursorRow,mColumns);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'L':{\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToInsert=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToInsert;\nmScreen.blockCopy(0,mCursorRow,mColumns,linesToMove,0,mCursorRow + linesToInsert);\nblockClear(0,mCursorRow,mColumns,linesToInsert);\n}\nbreak;\ncase 'M':{\nmAboutToAutoWrap=false;\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToDelete=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToDelete;\nmScreen.blockCopy(0,mCursorRow + linesToDelete,mColumns,linesToMove,0,mCursorRow);\nblockClear(0,mCursorRow + linesToMove,mColumns,linesToDelete);\n}\nbreak;\ncase 'P':{\nmAboutToAutoWrap=false;\nint cellsAfterCursor=mColumns - mCursorCol;\nint cellsToDelete=Math.min(getArg0(1),cellsAfterCursor);\nint cellsToMove=cellsAfterCursor - cellsToDelete;\nmScreen.blockCopy(mCursorCol + cellsToDelete,mCursorRow,cellsToMove,1,mCursorCol,mCursorRow);\nblockClear(mCursorCol + cellsToMove,mCursorRow,cellsToDelete);\n}\nbreak;\ncase 'S':{\nfinal int linesToScroll=getArg0(1);\nfor (int i=0; i < linesToScroll; i++) scrollDownOneLine();\nbreak;\n}\ncase 'T':if (mArgIndex == 0) {\nfinal int linesToScrollArg=getArg0(1);\nfinal int linesBetweenTopAndBottomMargins=mBottomMargin - mTopMargin;\nfinal int linesToScroll=Math.min(linesBetweenTopAndBottomMargins,linesToScrollArg);\nmScreen.blockCopy(0,mTopMargin,mColumns,linesBetweenTopAndBottomMargins - linesToScroll,0,mTopMargin + linesToScroll);\nblockClear(0,mTopMargin,mColumns,linesToScroll);\n}\n else {\nunimplementedSequence(b);\n}\nbreak;\ncase 'X':mAboutToAutoWrap=false;\nmScreen.blockSet(mCursorCol,mCursorRow,Math.min(getArg0(1),mColumns - mCursorCol),1,' ',getStyle());\nbreak;\ncase 'Z':int numberOfTabs=getArg0(1);\nint newCol=mLeftMargin;\nfor (int i=mCursorCol - 1; i >= 0; i--) if (mTabStop[i]) {\nif (--numberOfTabs == 0) {\nnewCol=Math.max(i,mLeftMargin);\nbreak;\n}\n}\nmCursorCol=newCol;\nbreak;\ncase '?':continueSequence(ESC_CSI_QUESTIONMARK);\nbreak;\ncase '>':continueSequence(ESC_CSI_BIGGERTHAN);\nbreak;\ncase '`':setCursorColRespectingOriginMode(getArg0(1) - 1);\nbreak;\ncase 'c':if (getArg0(0) == 0) mSession.write(\"\\033[?64;1;2;6;9;15;18;21;22c\");\nbreak;\ncase 'd':setCursorRow(Math.min(Math.max(1,getArg0(1)),mRows) - 1);\nbreak;\ncase 'e':setCursorPosition(mCursorCol,mCursorRow + getArg0(1));\nbreak;\ncase 'g':switch (getArg0(0)) {\ncase 0:mTabStop[mCursorCol]=false;\nbreak;\ncase 3:for (int i=0; i < mColumns; i++) {\nmTabStop[i]=false;\n}\nbreak;\ndefault:break;\n}\nbreak;\ncase 'h':doSetMode(true);\nbreak;\ncase 'l':doSetMode(false);\nbreak;\ncase 'm':selectGraphicRendition();\nbreak;\ncase 'n':switch (getArg0(0)) {\ncase 5:byte[] dsr={(byte)27,(byte)'[',(byte)'0',(byte)'n'};\nmSession.write(dsr,0,dsr.length);\nbreak;\ncase 6:mSession.write(String.format(Locale.US,\"\\033[%d;%dR\",mCursorRow + 1,mCursorCol + 1));\nbreak;\ndefault:break;\n}\nbreak;\ncase 'r':{\nmTopMargin=Math.max(0,Math.min(getArg0(1) - 1,mRows - 2));\nmBottomMargin=Math.max(mTopMargin + 2,Math.min(getArg1(mRows),mRows));\nsetCursorPosition(0,0);\n}\nbreak;\ncase 's':if (isDecsetInternalBitSet(DECSET_BIT_LEFTRIGHT_MARGIN_MODE)) {\nmLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2);\nmRightMargin=Math.max(mLeftMargin + 1,Math.min(getArg1(mColumns),mColumns));\nsetCursorPosition(0,0);\n}\n else {\nsaveCursor();\n}\nbreak;\ncase 't':switch (getArg0(0)) {\ncase 11:mSession.write(\"\\033[1t\");\nbreak;\ncase 13:mSession.write(\"\\033[3;0;0t\");\nbreak;\ncase 14:mSession.write(String.format(Locale.US,\"\\033[4;%d;%dt\",mRows * 12,mColumns * 12));\nbreak;\ncase 18:mSession.write(String.format(Locale.US,\"\\033[8;%d;%dt\",mRows,mColumns));\nbreak;\ncase 19:mSession.write(String.format(Locale.US,\"\\033[9;%d;%dt\",mRows,mColumns));\nbreak;\ncase 20:mSession.write(\"\\033]LIconLabel\\033\\\\\");\nbreak;\ncase 21:mSession.write(\"\\033]l\\033\\\\\");\nbreak;\ncase 22:mTitleStack.push(mTitle);\nif (mTitleStack.size() > 20) {\nmTitleStack.remove(0);\n}\nbreak;\ncase 23:if (!mTitleStack.isEmpty()) setTitle(mTitleStack.pop());\nbreak;\ndefault:break;\n}\nbreak;\ncase 'u':restoreCursor();\nbreak;\ncase ' ':continueSequence(ESC_CSI_ARGS_SPACE);\nbreak;\ndefault:parseArg(b);\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1097,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 1504,
        "startColumnNumber" : 16,
        "endLineNumber" : 1504,
        "endColumnNumber" : 65
      },
      "nodeContext" : "setCursorColRespectingOriginMode(getArg0(1) - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "int"
  }, {
    "nodeContext" : "getArg0(1) - 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 1569,
      "startColumnNumber" : 50,
      "endLineNumber" : 1569,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1569,
        "startColumnNumber" : 41,
        "endLineNumber" : 1569,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Math.min(getArg0(1) - 1,mRows - 2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 1569,
        "startColumnNumber" : 29,
        "endLineNumber" : 1569,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Math.max(0,Math.min(getArg0(1) - 1,mRows - 2))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 1569,
        "startColumnNumber" : 16,
        "endLineNumber" : 1569,
        "endColumnNumber" : 77
      },
      "nodeContext" : "mTopMargin=Math.max(0,Math.min(getArg0(1) - 1,mRows - 2))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 1569,
        "startColumnNumber" : 16,
        "endLineNumber" : 1569,
        "endColumnNumber" : 78
      },
      "nodeContext" : "mTopMargin=Math.max(0,Math.min(getArg0(1) - 1,mRows - 2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 917,
        "startLineNumber" : 1561,
        "startColumnNumber" : 12,
        "endLineNumber" : 1573,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  mTopMargin=Math.max(0,Math.min(getArg0(1) - 1,mRows - 2));\n  mBottomMargin=Math.max(mTopMargin + 2,Math.min(getArg1(mRows),mRows));\n  setCursorPosition(0,0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17298,
        "startLineNumber" : 1332,
        "startColumnNumber" : 8,
        "endLineNumber" : 1639,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (b) {\ncase '!':  continueSequence(ESC_CSI_EXCLAMATION);\nbreak;\ncase '\"':continueSequence(ESC_CSI_DOUBLE_QUOTE);\nbreak;\ncase '\\'':continueSequence(ESC_CSI_SINGLE_QUOTE);\nbreak;\ncase '$':continueSequence(ESC_CSI_DOLLAR);\nbreak;\ncase '*':continueSequence(ESC_CSI_ARGS_ASTERIX);\nbreak;\ncase '@':{\nmAboutToAutoWrap=false;\nint columnsAfterCursor=mColumns - mCursorCol;\nint spacesToInsert=Math.min(getArg0(1),columnsAfterCursor);\nint charsToMove=columnsAfterCursor - spacesToInsert;\nmScreen.blockCopy(mCursorCol,mCursorRow,charsToMove,1,mCursorCol + spacesToInsert,mCursorRow);\nblockClear(mCursorCol,mCursorRow,spacesToInsert);\n}\nbreak;\ncase 'A':setCursorRow(Math.max(mTopMargin,mCursorRow - getArg0(1)));\nbreak;\ncase 'B':setCursorRow(Math.min(mBottomMargin - 1,mCursorRow + getArg0(1)));\nbreak;\ncase 'C':case 'a':setCursorCol(Math.min(mRightMargin - 1,mCursorCol + getArg0(1)));\nbreak;\ncase 'D':setCursorCol(Math.max(mLeftMargin,mCursorCol - getArg0(1)));\nbreak;\ncase 'E':setCursorPosition(0,mCursorRow + getArg0(1));\nbreak;\ncase 'F':setCursorPosition(0,mCursorRow - getArg0(1));\nbreak;\ncase 'G':setCursorCol(Math.min(Math.max(1,getArg0(1)),mColumns) - 1);\nbreak;\ncase 'H':case 'f':setCursorPosition(getArg1(1) - 1,getArg0(1) - 1);\nbreak;\ncase 'I':setCursorCol(nextTabStop(getArg0(1)));\nbreak;\ncase 'J':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nblockClear(0,mCursorRow + 1,mColumns,mRows - (mCursorRow + 1));\nbreak;\ncase 1:blockClear(0,0,mColumns,mCursorRow);\nblockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,0,mColumns,mRows);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'K':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nbreak;\ncase 1:blockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,mCursorRow,mColumns);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'L':{\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToInsert=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToInsert;\nmScreen.blockCopy(0,mCursorRow,mColumns,linesToMove,0,mCursorRow + linesToInsert);\nblockClear(0,mCursorRow,mColumns,linesToInsert);\n}\nbreak;\ncase 'M':{\nmAboutToAutoWrap=false;\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToDelete=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToDelete;\nmScreen.blockCopy(0,mCursorRow + linesToDelete,mColumns,linesToMove,0,mCursorRow);\nblockClear(0,mCursorRow + linesToMove,mColumns,linesToDelete);\n}\nbreak;\ncase 'P':{\nmAboutToAutoWrap=false;\nint cellsAfterCursor=mColumns - mCursorCol;\nint cellsToDelete=Math.min(getArg0(1),cellsAfterCursor);\nint cellsToMove=cellsAfterCursor - cellsToDelete;\nmScreen.blockCopy(mCursorCol + cellsToDelete,mCursorRow,cellsToMove,1,mCursorCol,mCursorRow);\nblockClear(mCursorCol + cellsToMove,mCursorRow,cellsToDelete);\n}\nbreak;\ncase 'S':{\nfinal int linesToScroll=getArg0(1);\nfor (int i=0; i < linesToScroll; i++) scrollDownOneLine();\nbreak;\n}\ncase 'T':if (mArgIndex == 0) {\nfinal int linesToScrollArg=getArg0(1);\nfinal int linesBetweenTopAndBottomMargins=mBottomMargin - mTopMargin;\nfinal int linesToScroll=Math.min(linesBetweenTopAndBottomMargins,linesToScrollArg);\nmScreen.blockCopy(0,mTopMargin,mColumns,linesBetweenTopAndBottomMargins - linesToScroll,0,mTopMargin + linesToScroll);\nblockClear(0,mTopMargin,mColumns,linesToScroll);\n}\n else {\nunimplementedSequence(b);\n}\nbreak;\ncase 'X':mAboutToAutoWrap=false;\nmScreen.blockSet(mCursorCol,mCursorRow,Math.min(getArg0(1),mColumns - mCursorCol),1,' ',getStyle());\nbreak;\ncase 'Z':int numberOfTabs=getArg0(1);\nint newCol=mLeftMargin;\nfor (int i=mCursorCol - 1; i >= 0; i--) if (mTabStop[i]) {\nif (--numberOfTabs == 0) {\nnewCol=Math.max(i,mLeftMargin);\nbreak;\n}\n}\nmCursorCol=newCol;\nbreak;\ncase '?':continueSequence(ESC_CSI_QUESTIONMARK);\nbreak;\ncase '>':continueSequence(ESC_CSI_BIGGERTHAN);\nbreak;\ncase '`':setCursorColRespectingOriginMode(getArg0(1) - 1);\nbreak;\ncase 'c':if (getArg0(0) == 0) mSession.write(\"\\033[?64;1;2;6;9;15;18;21;22c\");\nbreak;\ncase 'd':setCursorRow(Math.min(Math.max(1,getArg0(1)),mRows) - 1);\nbreak;\ncase 'e':setCursorPosition(mCursorCol,mCursorRow + getArg0(1));\nbreak;\ncase 'g':switch (getArg0(0)) {\ncase 0:mTabStop[mCursorCol]=false;\nbreak;\ncase 3:for (int i=0; i < mColumns; i++) {\nmTabStop[i]=false;\n}\nbreak;\ndefault:break;\n}\nbreak;\ncase 'h':doSetMode(true);\nbreak;\ncase 'l':doSetMode(false);\nbreak;\ncase 'm':selectGraphicRendition();\nbreak;\ncase 'n':switch (getArg0(0)) {\ncase 5:byte[] dsr={(byte)27,(byte)'[',(byte)'0',(byte)'n'};\nmSession.write(dsr,0,dsr.length);\nbreak;\ncase 6:mSession.write(String.format(Locale.US,\"\\033[%d;%dR\",mCursorRow + 1,mCursorCol + 1));\nbreak;\ndefault:break;\n}\nbreak;\ncase 'r':{\nmTopMargin=Math.max(0,Math.min(getArg0(1) - 1,mRows - 2));\nmBottomMargin=Math.max(mTopMargin + 2,Math.min(getArg1(mRows),mRows));\nsetCursorPosition(0,0);\n}\nbreak;\ncase 's':if (isDecsetInternalBitSet(DECSET_BIT_LEFTRIGHT_MARGIN_MODE)) {\nmLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2);\nmRightMargin=Math.max(mLeftMargin + 1,Math.min(getArg1(mColumns),mColumns));\nsetCursorPosition(0,0);\n}\n else {\nsaveCursor();\n}\nbreak;\ncase 't':switch (getArg0(0)) {\ncase 11:mSession.write(\"\\033[1t\");\nbreak;\ncase 13:mSession.write(\"\\033[3;0;0t\");\nbreak;\ncase 14:mSession.write(String.format(Locale.US,\"\\033[4;%d;%dt\",mRows * 12,mColumns * 12));\nbreak;\ncase 18:mSession.write(String.format(Locale.US,\"\\033[8;%d;%dt\",mRows,mColumns));\nbreak;\ncase 19:mSession.write(String.format(Locale.US,\"\\033[9;%d;%dt\",mRows,mColumns));\nbreak;\ncase 20:mSession.write(\"\\033]LIconLabel\\033\\\\\");\nbreak;\ncase 21:mSession.write(\"\\033]l\\033\\\\\");\nbreak;\ncase 22:mTitleStack.push(mTitle);\nif (mTitleStack.size() > 20) {\nmTitleStack.remove(0);\n}\nbreak;\ncase 23:if (!mTitleStack.isEmpty()) setTitle(mTitleStack.pop());\nbreak;\ndefault:break;\n}\nbreak;\ncase 'u':restoreCursor();\nbreak;\ncase ' ':continueSequence(ESC_CSI_ARGS_SPACE);\nbreak;\ndefault:parseArg(b);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1088,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 17314,
        "startLineNumber" : 1331,
        "startColumnNumber" : 30,
        "endLineNumber" : 1640,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (b) {\ncase '!':    continueSequence(ESC_CSI_EXCLAMATION);\n  break;\ncase '\"':continueSequence(ESC_CSI_DOUBLE_QUOTE);\nbreak;\ncase '\\'':continueSequence(ESC_CSI_SINGLE_QUOTE);\nbreak;\ncase '$':continueSequence(ESC_CSI_DOLLAR);\nbreak;\ncase '*':continueSequence(ESC_CSI_ARGS_ASTERIX);\nbreak;\ncase '@':{\nmAboutToAutoWrap=false;\nint columnsAfterCursor=mColumns - mCursorCol;\nint spacesToInsert=Math.min(getArg0(1),columnsAfterCursor);\nint charsToMove=columnsAfterCursor - spacesToInsert;\nmScreen.blockCopy(mCursorCol,mCursorRow,charsToMove,1,mCursorCol + spacesToInsert,mCursorRow);\nblockClear(mCursorCol,mCursorRow,spacesToInsert);\n}\nbreak;\ncase 'A':setCursorRow(Math.max(mTopMargin,mCursorRow - getArg0(1)));\nbreak;\ncase 'B':setCursorRow(Math.min(mBottomMargin - 1,mCursorRow + getArg0(1)));\nbreak;\ncase 'C':case 'a':setCursorCol(Math.min(mRightMargin - 1,mCursorCol + getArg0(1)));\nbreak;\ncase 'D':setCursorCol(Math.max(mLeftMargin,mCursorCol - getArg0(1)));\nbreak;\ncase 'E':setCursorPosition(0,mCursorRow + getArg0(1));\nbreak;\ncase 'F':setCursorPosition(0,mCursorRow - getArg0(1));\nbreak;\ncase 'G':setCursorCol(Math.min(Math.max(1,getArg0(1)),mColumns) - 1);\nbreak;\ncase 'H':case 'f':setCursorPosition(getArg1(1) - 1,getArg0(1) - 1);\nbreak;\ncase 'I':setCursorCol(nextTabStop(getArg0(1)));\nbreak;\ncase 'J':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nblockClear(0,mCursorRow + 1,mColumns,mRows - (mCursorRow + 1));\nbreak;\ncase 1:blockClear(0,0,mColumns,mCursorRow);\nblockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,0,mColumns,mRows);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'K':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nbreak;\ncase 1:blockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,mCursorRow,mColumns);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'L':{\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToInsert=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToInsert;\nmScreen.blockCopy(0,mCursorRow,mColumns,linesToMove,0,mCursorRow + linesToInsert);\nblockClear(0,mCursorRow,mColumns,linesToInsert);\n}\nbreak;\ncase 'M':{\nmAboutToAutoWrap=false;\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToDelete=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToDelete;\nmScreen.blockCopy(0,mCursorRow + linesToDelete,mColumns,linesToMove,0,mCursorRow);\nblockClear(0,mCursorRow + linesToMove,mColumns,linesToDelete);\n}\nbreak;\ncase 'P':{\nmAboutToAutoWrap=false;\nint cellsAfterCursor=mColumns - mCursorCol;\nint cellsToDelete=Math.min(getArg0(1),cellsAfterCursor);\nint cellsToMove=cellsAfterCursor - cellsToDelete;\nmScreen.blockCopy(mCursorCol + cellsToDelete,mCursorRow,cellsToMove,1,mCursorCol,mCursorRow);\nblockClear(mCursorCol + cellsToMove,mCursorRow,cellsToDelete);\n}\nbreak;\ncase 'S':{\nfinal int linesToScroll=getArg0(1);\nfor (int i=0; i < linesToScroll; i++) scrollDownOneLine();\nbreak;\n}\ncase 'T':if (mArgIndex == 0) {\nfinal int linesToScrollArg=getArg0(1);\nfinal int linesBetweenTopAndBottomMargins=mBottomMargin - mTopMargin;\nfinal int linesToScroll=Math.min(linesBetweenTopAndBottomMargins,linesToScrollArg);\nmScreen.blockCopy(0,mTopMargin,mColumns,linesBetweenTopAndBottomMargins - linesToScroll,0,mTopMargin + linesToScroll);\nblockClear(0,mTopMargin,mColumns,linesToScroll);\n}\n else {\nunimplementedSequence(b);\n}\nbreak;\ncase 'X':mAboutToAutoWrap=false;\nmScreen.blockSet(mCursorCol,mCursorRow,Math.min(getArg0(1),mColumns - mCursorCol),1,' ',getStyle());\nbreak;\ncase 'Z':int numberOfTabs=getArg0(1);\nint newCol=mLeftMargin;\nfor (int i=mCursorCol - 1; i >= 0; i--) if (mTabStop[i]) {\nif (--numberOfTabs == 0) {\nnewCol=Math.max(i,mLeftMargin);\nbreak;\n}\n}\nmCursorCol=newCol;\nbreak;\ncase '?':continueSequence(ESC_CSI_QUESTIONMARK);\nbreak;\ncase '>':continueSequence(ESC_CSI_BIGGERTHAN);\nbreak;\ncase '`':setCursorColRespectingOriginMode(getArg0(1) - 1);\nbreak;\ncase 'c':if (getArg0(0) == 0) mSession.write(\"\\033[?64;1;2;6;9;15;18;21;22c\");\nbreak;\ncase 'd':setCursorRow(Math.min(Math.max(1,getArg0(1)),mRows) - 1);\nbreak;\ncase 'e':setCursorPosition(mCursorCol,mCursorRow + getArg0(1));\nbreak;\ncase 'g':switch (getArg0(0)) {\ncase 0:mTabStop[mCursorCol]=false;\nbreak;\ncase 3:for (int i=0; i < mColumns; i++) {\nmTabStop[i]=false;\n}\nbreak;\ndefault:break;\n}\nbreak;\ncase 'h':doSetMode(true);\nbreak;\ncase 'l':doSetMode(false);\nbreak;\ncase 'm':selectGraphicRendition();\nbreak;\ncase 'n':switch (getArg0(0)) {\ncase 5:byte[] dsr={(byte)27,(byte)'[',(byte)'0',(byte)'n'};\nmSession.write(dsr,0,dsr.length);\nbreak;\ncase 6:mSession.write(String.format(Locale.US,\"\\033[%d;%dR\",mCursorRow + 1,mCursorCol + 1));\nbreak;\ndefault:break;\n}\nbreak;\ncase 'r':{\nmTopMargin=Math.max(0,Math.min(getArg0(1) - 1,mRows - 2));\nmBottomMargin=Math.max(mTopMargin + 2,Math.min(getArg1(mRows),mRows));\nsetCursorPosition(0,0);\n}\nbreak;\ncase 's':if (isDecsetInternalBitSet(DECSET_BIT_LEFTRIGHT_MARGIN_MODE)) {\nmLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2);\nmRightMargin=Math.max(mLeftMargin + 1,Math.min(getArg1(mColumns),mColumns));\nsetCursorPosition(0,0);\n}\n else {\nsaveCursor();\n}\nbreak;\ncase 't':switch (getArg0(0)) {\ncase 11:mSession.write(\"\\033[1t\");\nbreak;\ncase 13:mSession.write(\"\\033[3;0;0t\");\nbreak;\ncase 14:mSession.write(String.format(Locale.US,\"\\033[4;%d;%dt\",mRows * 12,mColumns * 12));\nbreak;\ncase 18:mSession.write(String.format(Locale.US,\"\\033[8;%d;%dt\",mRows,mColumns));\nbreak;\ncase 19:mSession.write(String.format(Locale.US,\"\\033[9;%d;%dt\",mRows,mColumns));\nbreak;\ncase 20:mSession.write(\"\\033]LIconLabel\\033\\\\\");\nbreak;\ncase 21:mSession.write(\"\\033]l\\033\\\\\");\nbreak;\ncase 22:mTitleStack.push(mTitle);\nif (mTitleStack.size() > 20) {\nmTitleStack.remove(0);\n}\nbreak;\ncase 23:if (!mTitleStack.isEmpty()) setTitle(mTitleStack.pop());\nbreak;\ndefault:break;\n}\nbreak;\ncase 'u':restoreCursor();\nbreak;\ncase ' ':continueSequence(ESC_CSI_ARGS_SPACE);\nbreak;\ndefault:parseArg(b);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1089,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 17425,
        "startLineNumber" : 1330,
        "startColumnNumber" : 4,
        "endLineNumber" : 1640,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Following a CSI - Control Sequence Introducer, \"\\033[\".  {@link #ESC_CSI}. \n */\nprivate void doCsi(int b){\nswitch (b) {\ncase '!':    continueSequence(ESC_CSI_EXCLAMATION);\n  break;\ncase '\"':continueSequence(ESC_CSI_DOUBLE_QUOTE);\nbreak;\ncase '\\'':continueSequence(ESC_CSI_SINGLE_QUOTE);\nbreak;\ncase '$':continueSequence(ESC_CSI_DOLLAR);\nbreak;\ncase '*':continueSequence(ESC_CSI_ARGS_ASTERIX);\nbreak;\ncase '@':{\nmAboutToAutoWrap=false;\nint columnsAfterCursor=mColumns - mCursorCol;\nint spacesToInsert=Math.min(getArg0(1),columnsAfterCursor);\nint charsToMove=columnsAfterCursor - spacesToInsert;\nmScreen.blockCopy(mCursorCol,mCursorRow,charsToMove,1,mCursorCol + spacesToInsert,mCursorRow);\nblockClear(mCursorCol,mCursorRow,spacesToInsert);\n}\nbreak;\ncase 'A':setCursorRow(Math.max(mTopMargin,mCursorRow - getArg0(1)));\nbreak;\ncase 'B':setCursorRow(Math.min(mBottomMargin - 1,mCursorRow + getArg0(1)));\nbreak;\ncase 'C':case 'a':setCursorCol(Math.min(mRightMargin - 1,mCursorCol + getArg0(1)));\nbreak;\ncase 'D':setCursorCol(Math.max(mLeftMargin,mCursorCol - getArg0(1)));\nbreak;\ncase 'E':setCursorPosition(0,mCursorRow + getArg0(1));\nbreak;\ncase 'F':setCursorPosition(0,mCursorRow - getArg0(1));\nbreak;\ncase 'G':setCursorCol(Math.min(Math.max(1,getArg0(1)),mColumns) - 1);\nbreak;\ncase 'H':case 'f':setCursorPosition(getArg1(1) - 1,getArg0(1) - 1);\nbreak;\ncase 'I':setCursorCol(nextTabStop(getArg0(1)));\nbreak;\ncase 'J':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nblockClear(0,mCursorRow + 1,mColumns,mRows - (mCursorRow + 1));\nbreak;\ncase 1:blockClear(0,0,mColumns,mCursorRow);\nblockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,0,mColumns,mRows);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'K':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nbreak;\ncase 1:blockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,mCursorRow,mColumns);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'L':{\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToInsert=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToInsert;\nmScreen.blockCopy(0,mCursorRow,mColumns,linesToMove,0,mCursorRow + linesToInsert);\nblockClear(0,mCursorRow,mColumns,linesToInsert);\n}\nbreak;\ncase 'M':{\nmAboutToAutoWrap=false;\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToDelete=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToDelete;\nmScreen.blockCopy(0,mCursorRow + linesToDelete,mColumns,linesToMove,0,mCursorRow);\nblockClear(0,mCursorRow + linesToMove,mColumns,linesToDelete);\n}\nbreak;\ncase 'P':{\nmAboutToAutoWrap=false;\nint cellsAfterCursor=mColumns - mCursorCol;\nint cellsToDelete=Math.min(getArg0(1),cellsAfterCursor);\nint cellsToMove=cellsAfterCursor - cellsToDelete;\nmScreen.blockCopy(mCursorCol + cellsToDelete,mCursorRow,cellsToMove,1,mCursorCol,mCursorRow);\nblockClear(mCursorCol + cellsToMove,mCursorRow,cellsToDelete);\n}\nbreak;\ncase 'S':{\nfinal int linesToScroll=getArg0(1);\nfor (int i=0; i < linesToScroll; i++) scrollDownOneLine();\nbreak;\n}\ncase 'T':if (mArgIndex == 0) {\nfinal int linesToScrollArg=getArg0(1);\nfinal int linesBetweenTopAndBottomMargins=mBottomMargin - mTopMargin;\nfinal int linesToScroll=Math.min(linesBetweenTopAndBottomMargins,linesToScrollArg);\nmScreen.blockCopy(0,mTopMargin,mColumns,linesBetweenTopAndBottomMargins - linesToScroll,0,mTopMargin + linesToScroll);\nblockClear(0,mTopMargin,mColumns,linesToScroll);\n}\n else {\nunimplementedSequence(b);\n}\nbreak;\ncase 'X':mAboutToAutoWrap=false;\nmScreen.blockSet(mCursorCol,mCursorRow,Math.min(getArg0(1),mColumns - mCursorCol),1,' ',getStyle());\nbreak;\ncase 'Z':int numberOfTabs=getArg0(1);\nint newCol=mLeftMargin;\nfor (int i=mCursorCol - 1; i >= 0; i--) if (mTabStop[i]) {\nif (--numberOfTabs == 0) {\nnewCol=Math.max(i,mLeftMargin);\nbreak;\n}\n}\nmCursorCol=newCol;\nbreak;\ncase '?':continueSequence(ESC_CSI_QUESTIONMARK);\nbreak;\ncase '>':continueSequence(ESC_CSI_BIGGERTHAN);\nbreak;\ncase '`':setCursorColRespectingOriginMode(getArg0(1) - 1);\nbreak;\ncase 'c':if (getArg0(0) == 0) mSession.write(\"\\033[?64;1;2;6;9;15;18;21;22c\");\nbreak;\ncase 'd':setCursorRow(Math.min(Math.max(1,getArg0(1)),mRows) - 1);\nbreak;\ncase 'e':setCursorPosition(mCursorCol,mCursorRow + getArg0(1));\nbreak;\ncase 'g':switch (getArg0(0)) {\ncase 0:mTabStop[mCursorCol]=false;\nbreak;\ncase 3:for (int i=0; i < mColumns; i++) {\nmTabStop[i]=false;\n}\nbreak;\ndefault:break;\n}\nbreak;\ncase 'h':doSetMode(true);\nbreak;\ncase 'l':doSetMode(false);\nbreak;\ncase 'm':selectGraphicRendition();\nbreak;\ncase 'n':switch (getArg0(0)) {\ncase 5:byte[] dsr={(byte)27,(byte)'[',(byte)'0',(byte)'n'};\nmSession.write(dsr,0,dsr.length);\nbreak;\ncase 6:mSession.write(String.format(Locale.US,\"\\033[%d;%dR\",mCursorRow + 1,mCursorCol + 1));\nbreak;\ndefault:break;\n}\nbreak;\ncase 'r':{\nmTopMargin=Math.max(0,Math.min(getArg0(1) - 1,mRows - 2));\nmBottomMargin=Math.max(mTopMargin + 2,Math.min(getArg1(mRows),mRows));\nsetCursorPosition(0,0);\n}\nbreak;\ncase 's':if (isDecsetInternalBitSet(DECSET_BIT_LEFTRIGHT_MARGIN_MODE)) {\nmLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2);\nmRightMargin=Math.max(mLeftMargin + 1,Math.min(getArg1(mColumns),mColumns));\nsetCursorPosition(0,0);\n}\n else {\nsaveCursor();\n}\nbreak;\ncase 't':switch (getArg0(0)) {\ncase 11:mSession.write(\"\\033[1t\");\nbreak;\ncase 13:mSession.write(\"\\033[3;0;0t\");\nbreak;\ncase 14:mSession.write(String.format(Locale.US,\"\\033[4;%d;%dt\",mRows * 12,mColumns * 12));\nbreak;\ncase 18:mSession.write(String.format(Locale.US,\"\\033[8;%d;%dt\",mRows,mColumns));\nbreak;\ncase 19:mSession.write(String.format(Locale.US,\"\\033[9;%d;%dt\",mRows,mColumns));\nbreak;\ncase 20:mSession.write(\"\\033]LIconLabel\\033\\\\\");\nbreak;\ncase 21:mSession.write(\"\\033]l\\033\\\\\");\nbreak;\ncase 22:mTitleStack.push(mTitle);\nif (mTitleStack.size() > 20) {\nmTitleStack.remove(0);\n}\nbreak;\ncase 23:if (!mTitleStack.isEmpty()) setTitle(mTitleStack.pop());\nbreak;\ndefault:break;\n}\nbreak;\ncase 'u':restoreCursor();\nbreak;\ncase ' ':continueSequence(ESC_CSI_ARGS_SPACE);\nbreak;\ndefault:parseArg(b);\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1097,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 1569,
        "startColumnNumber" : 16,
        "endLineNumber" : 1569,
        "endColumnNumber" : 78
      },
      "nodeContext" : "mTopMargin=Math.max(0,Math.min(getArg0(1) - 1,mRows - 2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    },
    "tokenLength" : 4,
    "type" : "int"
  }, {
    "nodeContext" : "getArg0(1) - 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 1578,
      "startColumnNumber" : 43,
      "endLineNumber" : 1578,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 1578,
        "startColumnNumber" : 34,
        "endLineNumber" : 1578,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Math.min(getArg0(1) - 1,mColumns - 2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 1578,
        "startColumnNumber" : 20,
        "endLineNumber" : 1578,
        "endColumnNumber" : 72
      },
      "nodeContext" : "mLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 1578,
        "startColumnNumber" : 20,
        "endLineNumber" : 1578,
        "endColumnNumber" : 73
      },
      "nodeContext" : "mLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 426,
        "startLineNumber" : 1576,
        "startColumnNumber" : 78,
        "endLineNumber" : 1582,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2);\n  mRightMargin=Math.max(mLeftMargin + 1,Math.min(getArg1(mColumns),mColumns));\n  setCursorPosition(0,0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 635,
        "startLineNumber" : 1576,
        "startColumnNumber" : 16,
        "endLineNumber" : 1585,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isDecsetInternalBitSet(DECSET_BIT_LEFTRIGHT_MARGIN_MODE)) {\n  mLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2);\n  mRightMargin=Math.max(mLeftMargin + 1,Math.min(getArg1(mColumns),mColumns));\n  setCursorPosition(0,0);\n}\n else {\n  saveCursor();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17298,
        "startLineNumber" : 1332,
        "startColumnNumber" : 8,
        "endLineNumber" : 1639,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (b) {\ncase '!':  continueSequence(ESC_CSI_EXCLAMATION);\nbreak;\ncase '\"':continueSequence(ESC_CSI_DOUBLE_QUOTE);\nbreak;\ncase '\\'':continueSequence(ESC_CSI_SINGLE_QUOTE);\nbreak;\ncase '$':continueSequence(ESC_CSI_DOLLAR);\nbreak;\ncase '*':continueSequence(ESC_CSI_ARGS_ASTERIX);\nbreak;\ncase '@':{\nmAboutToAutoWrap=false;\nint columnsAfterCursor=mColumns - mCursorCol;\nint spacesToInsert=Math.min(getArg0(1),columnsAfterCursor);\nint charsToMove=columnsAfterCursor - spacesToInsert;\nmScreen.blockCopy(mCursorCol,mCursorRow,charsToMove,1,mCursorCol + spacesToInsert,mCursorRow);\nblockClear(mCursorCol,mCursorRow,spacesToInsert);\n}\nbreak;\ncase 'A':setCursorRow(Math.max(mTopMargin,mCursorRow - getArg0(1)));\nbreak;\ncase 'B':setCursorRow(Math.min(mBottomMargin - 1,mCursorRow + getArg0(1)));\nbreak;\ncase 'C':case 'a':setCursorCol(Math.min(mRightMargin - 1,mCursorCol + getArg0(1)));\nbreak;\ncase 'D':setCursorCol(Math.max(mLeftMargin,mCursorCol - getArg0(1)));\nbreak;\ncase 'E':setCursorPosition(0,mCursorRow + getArg0(1));\nbreak;\ncase 'F':setCursorPosition(0,mCursorRow - getArg0(1));\nbreak;\ncase 'G':setCursorCol(Math.min(Math.max(1,getArg0(1)),mColumns) - 1);\nbreak;\ncase 'H':case 'f':setCursorPosition(getArg1(1) - 1,getArg0(1) - 1);\nbreak;\ncase 'I':setCursorCol(nextTabStop(getArg0(1)));\nbreak;\ncase 'J':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nblockClear(0,mCursorRow + 1,mColumns,mRows - (mCursorRow + 1));\nbreak;\ncase 1:blockClear(0,0,mColumns,mCursorRow);\nblockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,0,mColumns,mRows);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'K':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nbreak;\ncase 1:blockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,mCursorRow,mColumns);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'L':{\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToInsert=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToInsert;\nmScreen.blockCopy(0,mCursorRow,mColumns,linesToMove,0,mCursorRow + linesToInsert);\nblockClear(0,mCursorRow,mColumns,linesToInsert);\n}\nbreak;\ncase 'M':{\nmAboutToAutoWrap=false;\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToDelete=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToDelete;\nmScreen.blockCopy(0,mCursorRow + linesToDelete,mColumns,linesToMove,0,mCursorRow);\nblockClear(0,mCursorRow + linesToMove,mColumns,linesToDelete);\n}\nbreak;\ncase 'P':{\nmAboutToAutoWrap=false;\nint cellsAfterCursor=mColumns - mCursorCol;\nint cellsToDelete=Math.min(getArg0(1),cellsAfterCursor);\nint cellsToMove=cellsAfterCursor - cellsToDelete;\nmScreen.blockCopy(mCursorCol + cellsToDelete,mCursorRow,cellsToMove,1,mCursorCol,mCursorRow);\nblockClear(mCursorCol + cellsToMove,mCursorRow,cellsToDelete);\n}\nbreak;\ncase 'S':{\nfinal int linesToScroll=getArg0(1);\nfor (int i=0; i < linesToScroll; i++) scrollDownOneLine();\nbreak;\n}\ncase 'T':if (mArgIndex == 0) {\nfinal int linesToScrollArg=getArg0(1);\nfinal int linesBetweenTopAndBottomMargins=mBottomMargin - mTopMargin;\nfinal int linesToScroll=Math.min(linesBetweenTopAndBottomMargins,linesToScrollArg);\nmScreen.blockCopy(0,mTopMargin,mColumns,linesBetweenTopAndBottomMargins - linesToScroll,0,mTopMargin + linesToScroll);\nblockClear(0,mTopMargin,mColumns,linesToScroll);\n}\n else {\nunimplementedSequence(b);\n}\nbreak;\ncase 'X':mAboutToAutoWrap=false;\nmScreen.blockSet(mCursorCol,mCursorRow,Math.min(getArg0(1),mColumns - mCursorCol),1,' ',getStyle());\nbreak;\ncase 'Z':int numberOfTabs=getArg0(1);\nint newCol=mLeftMargin;\nfor (int i=mCursorCol - 1; i >= 0; i--) if (mTabStop[i]) {\nif (--numberOfTabs == 0) {\nnewCol=Math.max(i,mLeftMargin);\nbreak;\n}\n}\nmCursorCol=newCol;\nbreak;\ncase '?':continueSequence(ESC_CSI_QUESTIONMARK);\nbreak;\ncase '>':continueSequence(ESC_CSI_BIGGERTHAN);\nbreak;\ncase '`':setCursorColRespectingOriginMode(getArg0(1) - 1);\nbreak;\ncase 'c':if (getArg0(0) == 0) mSession.write(\"\\033[?64;1;2;6;9;15;18;21;22c\");\nbreak;\ncase 'd':setCursorRow(Math.min(Math.max(1,getArg0(1)),mRows) - 1);\nbreak;\ncase 'e':setCursorPosition(mCursorCol,mCursorRow + getArg0(1));\nbreak;\ncase 'g':switch (getArg0(0)) {\ncase 0:mTabStop[mCursorCol]=false;\nbreak;\ncase 3:for (int i=0; i < mColumns; i++) {\nmTabStop[i]=false;\n}\nbreak;\ndefault:break;\n}\nbreak;\ncase 'h':doSetMode(true);\nbreak;\ncase 'l':doSetMode(false);\nbreak;\ncase 'm':selectGraphicRendition();\nbreak;\ncase 'n':switch (getArg0(0)) {\ncase 5:byte[] dsr={(byte)27,(byte)'[',(byte)'0',(byte)'n'};\nmSession.write(dsr,0,dsr.length);\nbreak;\ncase 6:mSession.write(String.format(Locale.US,\"\\033[%d;%dR\",mCursorRow + 1,mCursorCol + 1));\nbreak;\ndefault:break;\n}\nbreak;\ncase 'r':{\nmTopMargin=Math.max(0,Math.min(getArg0(1) - 1,mRows - 2));\nmBottomMargin=Math.max(mTopMargin + 2,Math.min(getArg1(mRows),mRows));\nsetCursorPosition(0,0);\n}\nbreak;\ncase 's':if (isDecsetInternalBitSet(DECSET_BIT_LEFTRIGHT_MARGIN_MODE)) {\nmLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2);\nmRightMargin=Math.max(mLeftMargin + 1,Math.min(getArg1(mColumns),mColumns));\nsetCursorPosition(0,0);\n}\n else {\nsaveCursor();\n}\nbreak;\ncase 't':switch (getArg0(0)) {\ncase 11:mSession.write(\"\\033[1t\");\nbreak;\ncase 13:mSession.write(\"\\033[3;0;0t\");\nbreak;\ncase 14:mSession.write(String.format(Locale.US,\"\\033[4;%d;%dt\",mRows * 12,mColumns * 12));\nbreak;\ncase 18:mSession.write(String.format(Locale.US,\"\\033[8;%d;%dt\",mRows,mColumns));\nbreak;\ncase 19:mSession.write(String.format(Locale.US,\"\\033[9;%d;%dt\",mRows,mColumns));\nbreak;\ncase 20:mSession.write(\"\\033]LIconLabel\\033\\\\\");\nbreak;\ncase 21:mSession.write(\"\\033]l\\033\\\\\");\nbreak;\ncase 22:mTitleStack.push(mTitle);\nif (mTitleStack.size() > 20) {\nmTitleStack.remove(0);\n}\nbreak;\ncase 23:if (!mTitleStack.isEmpty()) setTitle(mTitleStack.pop());\nbreak;\ndefault:break;\n}\nbreak;\ncase 'u':restoreCursor();\nbreak;\ncase ' ':continueSequence(ESC_CSI_ARGS_SPACE);\nbreak;\ndefault:parseArg(b);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1088,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 17314,
        "startLineNumber" : 1331,
        "startColumnNumber" : 30,
        "endLineNumber" : 1640,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (b) {\ncase '!':    continueSequence(ESC_CSI_EXCLAMATION);\n  break;\ncase '\"':continueSequence(ESC_CSI_DOUBLE_QUOTE);\nbreak;\ncase '\\'':continueSequence(ESC_CSI_SINGLE_QUOTE);\nbreak;\ncase '$':continueSequence(ESC_CSI_DOLLAR);\nbreak;\ncase '*':continueSequence(ESC_CSI_ARGS_ASTERIX);\nbreak;\ncase '@':{\nmAboutToAutoWrap=false;\nint columnsAfterCursor=mColumns - mCursorCol;\nint spacesToInsert=Math.min(getArg0(1),columnsAfterCursor);\nint charsToMove=columnsAfterCursor - spacesToInsert;\nmScreen.blockCopy(mCursorCol,mCursorRow,charsToMove,1,mCursorCol + spacesToInsert,mCursorRow);\nblockClear(mCursorCol,mCursorRow,spacesToInsert);\n}\nbreak;\ncase 'A':setCursorRow(Math.max(mTopMargin,mCursorRow - getArg0(1)));\nbreak;\ncase 'B':setCursorRow(Math.min(mBottomMargin - 1,mCursorRow + getArg0(1)));\nbreak;\ncase 'C':case 'a':setCursorCol(Math.min(mRightMargin - 1,mCursorCol + getArg0(1)));\nbreak;\ncase 'D':setCursorCol(Math.max(mLeftMargin,mCursorCol - getArg0(1)));\nbreak;\ncase 'E':setCursorPosition(0,mCursorRow + getArg0(1));\nbreak;\ncase 'F':setCursorPosition(0,mCursorRow - getArg0(1));\nbreak;\ncase 'G':setCursorCol(Math.min(Math.max(1,getArg0(1)),mColumns) - 1);\nbreak;\ncase 'H':case 'f':setCursorPosition(getArg1(1) - 1,getArg0(1) - 1);\nbreak;\ncase 'I':setCursorCol(nextTabStop(getArg0(1)));\nbreak;\ncase 'J':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nblockClear(0,mCursorRow + 1,mColumns,mRows - (mCursorRow + 1));\nbreak;\ncase 1:blockClear(0,0,mColumns,mCursorRow);\nblockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,0,mColumns,mRows);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'K':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nbreak;\ncase 1:blockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,mCursorRow,mColumns);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'L':{\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToInsert=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToInsert;\nmScreen.blockCopy(0,mCursorRow,mColumns,linesToMove,0,mCursorRow + linesToInsert);\nblockClear(0,mCursorRow,mColumns,linesToInsert);\n}\nbreak;\ncase 'M':{\nmAboutToAutoWrap=false;\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToDelete=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToDelete;\nmScreen.blockCopy(0,mCursorRow + linesToDelete,mColumns,linesToMove,0,mCursorRow);\nblockClear(0,mCursorRow + linesToMove,mColumns,linesToDelete);\n}\nbreak;\ncase 'P':{\nmAboutToAutoWrap=false;\nint cellsAfterCursor=mColumns - mCursorCol;\nint cellsToDelete=Math.min(getArg0(1),cellsAfterCursor);\nint cellsToMove=cellsAfterCursor - cellsToDelete;\nmScreen.blockCopy(mCursorCol + cellsToDelete,mCursorRow,cellsToMove,1,mCursorCol,mCursorRow);\nblockClear(mCursorCol + cellsToMove,mCursorRow,cellsToDelete);\n}\nbreak;\ncase 'S':{\nfinal int linesToScroll=getArg0(1);\nfor (int i=0; i < linesToScroll; i++) scrollDownOneLine();\nbreak;\n}\ncase 'T':if (mArgIndex == 0) {\nfinal int linesToScrollArg=getArg0(1);\nfinal int linesBetweenTopAndBottomMargins=mBottomMargin - mTopMargin;\nfinal int linesToScroll=Math.min(linesBetweenTopAndBottomMargins,linesToScrollArg);\nmScreen.blockCopy(0,mTopMargin,mColumns,linesBetweenTopAndBottomMargins - linesToScroll,0,mTopMargin + linesToScroll);\nblockClear(0,mTopMargin,mColumns,linesToScroll);\n}\n else {\nunimplementedSequence(b);\n}\nbreak;\ncase 'X':mAboutToAutoWrap=false;\nmScreen.blockSet(mCursorCol,mCursorRow,Math.min(getArg0(1),mColumns - mCursorCol),1,' ',getStyle());\nbreak;\ncase 'Z':int numberOfTabs=getArg0(1);\nint newCol=mLeftMargin;\nfor (int i=mCursorCol - 1; i >= 0; i--) if (mTabStop[i]) {\nif (--numberOfTabs == 0) {\nnewCol=Math.max(i,mLeftMargin);\nbreak;\n}\n}\nmCursorCol=newCol;\nbreak;\ncase '?':continueSequence(ESC_CSI_QUESTIONMARK);\nbreak;\ncase '>':continueSequence(ESC_CSI_BIGGERTHAN);\nbreak;\ncase '`':setCursorColRespectingOriginMode(getArg0(1) - 1);\nbreak;\ncase 'c':if (getArg0(0) == 0) mSession.write(\"\\033[?64;1;2;6;9;15;18;21;22c\");\nbreak;\ncase 'd':setCursorRow(Math.min(Math.max(1,getArg0(1)),mRows) - 1);\nbreak;\ncase 'e':setCursorPosition(mCursorCol,mCursorRow + getArg0(1));\nbreak;\ncase 'g':switch (getArg0(0)) {\ncase 0:mTabStop[mCursorCol]=false;\nbreak;\ncase 3:for (int i=0; i < mColumns; i++) {\nmTabStop[i]=false;\n}\nbreak;\ndefault:break;\n}\nbreak;\ncase 'h':doSetMode(true);\nbreak;\ncase 'l':doSetMode(false);\nbreak;\ncase 'm':selectGraphicRendition();\nbreak;\ncase 'n':switch (getArg0(0)) {\ncase 5:byte[] dsr={(byte)27,(byte)'[',(byte)'0',(byte)'n'};\nmSession.write(dsr,0,dsr.length);\nbreak;\ncase 6:mSession.write(String.format(Locale.US,\"\\033[%d;%dR\",mCursorRow + 1,mCursorCol + 1));\nbreak;\ndefault:break;\n}\nbreak;\ncase 'r':{\nmTopMargin=Math.max(0,Math.min(getArg0(1) - 1,mRows - 2));\nmBottomMargin=Math.max(mTopMargin + 2,Math.min(getArg1(mRows),mRows));\nsetCursorPosition(0,0);\n}\nbreak;\ncase 's':if (isDecsetInternalBitSet(DECSET_BIT_LEFTRIGHT_MARGIN_MODE)) {\nmLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2);\nmRightMargin=Math.max(mLeftMargin + 1,Math.min(getArg1(mColumns),mColumns));\nsetCursorPosition(0,0);\n}\n else {\nsaveCursor();\n}\nbreak;\ncase 't':switch (getArg0(0)) {\ncase 11:mSession.write(\"\\033[1t\");\nbreak;\ncase 13:mSession.write(\"\\033[3;0;0t\");\nbreak;\ncase 14:mSession.write(String.format(Locale.US,\"\\033[4;%d;%dt\",mRows * 12,mColumns * 12));\nbreak;\ncase 18:mSession.write(String.format(Locale.US,\"\\033[8;%d;%dt\",mRows,mColumns));\nbreak;\ncase 19:mSession.write(String.format(Locale.US,\"\\033[9;%d;%dt\",mRows,mColumns));\nbreak;\ncase 20:mSession.write(\"\\033]LIconLabel\\033\\\\\");\nbreak;\ncase 21:mSession.write(\"\\033]l\\033\\\\\");\nbreak;\ncase 22:mTitleStack.push(mTitle);\nif (mTitleStack.size() > 20) {\nmTitleStack.remove(0);\n}\nbreak;\ncase 23:if (!mTitleStack.isEmpty()) setTitle(mTitleStack.pop());\nbreak;\ndefault:break;\n}\nbreak;\ncase 'u':restoreCursor();\nbreak;\ncase ' ':continueSequence(ESC_CSI_ARGS_SPACE);\nbreak;\ndefault:parseArg(b);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1089,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 17425,
        "startLineNumber" : 1330,
        "startColumnNumber" : 4,
        "endLineNumber" : 1640,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Following a CSI - Control Sequence Introducer, \"\\033[\".  {@link #ESC_CSI}. \n */\nprivate void doCsi(int b){\nswitch (b) {\ncase '!':    continueSequence(ESC_CSI_EXCLAMATION);\n  break;\ncase '\"':continueSequence(ESC_CSI_DOUBLE_QUOTE);\nbreak;\ncase '\\'':continueSequence(ESC_CSI_SINGLE_QUOTE);\nbreak;\ncase '$':continueSequence(ESC_CSI_DOLLAR);\nbreak;\ncase '*':continueSequence(ESC_CSI_ARGS_ASTERIX);\nbreak;\ncase '@':{\nmAboutToAutoWrap=false;\nint columnsAfterCursor=mColumns - mCursorCol;\nint spacesToInsert=Math.min(getArg0(1),columnsAfterCursor);\nint charsToMove=columnsAfterCursor - spacesToInsert;\nmScreen.blockCopy(mCursorCol,mCursorRow,charsToMove,1,mCursorCol + spacesToInsert,mCursorRow);\nblockClear(mCursorCol,mCursorRow,spacesToInsert);\n}\nbreak;\ncase 'A':setCursorRow(Math.max(mTopMargin,mCursorRow - getArg0(1)));\nbreak;\ncase 'B':setCursorRow(Math.min(mBottomMargin - 1,mCursorRow + getArg0(1)));\nbreak;\ncase 'C':case 'a':setCursorCol(Math.min(mRightMargin - 1,mCursorCol + getArg0(1)));\nbreak;\ncase 'D':setCursorCol(Math.max(mLeftMargin,mCursorCol - getArg0(1)));\nbreak;\ncase 'E':setCursorPosition(0,mCursorRow + getArg0(1));\nbreak;\ncase 'F':setCursorPosition(0,mCursorRow - getArg0(1));\nbreak;\ncase 'G':setCursorCol(Math.min(Math.max(1,getArg0(1)),mColumns) - 1);\nbreak;\ncase 'H':case 'f':setCursorPosition(getArg1(1) - 1,getArg0(1) - 1);\nbreak;\ncase 'I':setCursorCol(nextTabStop(getArg0(1)));\nbreak;\ncase 'J':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nblockClear(0,mCursorRow + 1,mColumns,mRows - (mCursorRow + 1));\nbreak;\ncase 1:blockClear(0,0,mColumns,mCursorRow);\nblockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,0,mColumns,mRows);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'K':switch (getArg0(0)) {\ncase 0:blockClear(mCursorCol,mCursorRow,mColumns - mCursorCol);\nbreak;\ncase 1:blockClear(0,mCursorRow,mCursorCol + 1);\nbreak;\ncase 2:blockClear(0,mCursorRow,mColumns);\nbreak;\ndefault:unknownSequence(b);\nreturn;\n}\nmAboutToAutoWrap=false;\nbreak;\ncase 'L':{\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToInsert=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToInsert;\nmScreen.blockCopy(0,mCursorRow,mColumns,linesToMove,0,mCursorRow + linesToInsert);\nblockClear(0,mCursorRow,mColumns,linesToInsert);\n}\nbreak;\ncase 'M':{\nmAboutToAutoWrap=false;\nint linesAfterCursor=mBottomMargin - mCursorRow;\nint linesToDelete=Math.min(getArg0(1),linesAfterCursor);\nint linesToMove=linesAfterCursor - linesToDelete;\nmScreen.blockCopy(0,mCursorRow + linesToDelete,mColumns,linesToMove,0,mCursorRow);\nblockClear(0,mCursorRow + linesToMove,mColumns,linesToDelete);\n}\nbreak;\ncase 'P':{\nmAboutToAutoWrap=false;\nint cellsAfterCursor=mColumns - mCursorCol;\nint cellsToDelete=Math.min(getArg0(1),cellsAfterCursor);\nint cellsToMove=cellsAfterCursor - cellsToDelete;\nmScreen.blockCopy(mCursorCol + cellsToDelete,mCursorRow,cellsToMove,1,mCursorCol,mCursorRow);\nblockClear(mCursorCol + cellsToMove,mCursorRow,cellsToDelete);\n}\nbreak;\ncase 'S':{\nfinal int linesToScroll=getArg0(1);\nfor (int i=0; i < linesToScroll; i++) scrollDownOneLine();\nbreak;\n}\ncase 'T':if (mArgIndex == 0) {\nfinal int linesToScrollArg=getArg0(1);\nfinal int linesBetweenTopAndBottomMargins=mBottomMargin - mTopMargin;\nfinal int linesToScroll=Math.min(linesBetweenTopAndBottomMargins,linesToScrollArg);\nmScreen.blockCopy(0,mTopMargin,mColumns,linesBetweenTopAndBottomMargins - linesToScroll,0,mTopMargin + linesToScroll);\nblockClear(0,mTopMargin,mColumns,linesToScroll);\n}\n else {\nunimplementedSequence(b);\n}\nbreak;\ncase 'X':mAboutToAutoWrap=false;\nmScreen.blockSet(mCursorCol,mCursorRow,Math.min(getArg0(1),mColumns - mCursorCol),1,' ',getStyle());\nbreak;\ncase 'Z':int numberOfTabs=getArg0(1);\nint newCol=mLeftMargin;\nfor (int i=mCursorCol - 1; i >= 0; i--) if (mTabStop[i]) {\nif (--numberOfTabs == 0) {\nnewCol=Math.max(i,mLeftMargin);\nbreak;\n}\n}\nmCursorCol=newCol;\nbreak;\ncase '?':continueSequence(ESC_CSI_QUESTIONMARK);\nbreak;\ncase '>':continueSequence(ESC_CSI_BIGGERTHAN);\nbreak;\ncase '`':setCursorColRespectingOriginMode(getArg0(1) - 1);\nbreak;\ncase 'c':if (getArg0(0) == 0) mSession.write(\"\\033[?64;1;2;6;9;15;18;21;22c\");\nbreak;\ncase 'd':setCursorRow(Math.min(Math.max(1,getArg0(1)),mRows) - 1);\nbreak;\ncase 'e':setCursorPosition(mCursorCol,mCursorRow + getArg0(1));\nbreak;\ncase 'g':switch (getArg0(0)) {\ncase 0:mTabStop[mCursorCol]=false;\nbreak;\ncase 3:for (int i=0; i < mColumns; i++) {\nmTabStop[i]=false;\n}\nbreak;\ndefault:break;\n}\nbreak;\ncase 'h':doSetMode(true);\nbreak;\ncase 'l':doSetMode(false);\nbreak;\ncase 'm':selectGraphicRendition();\nbreak;\ncase 'n':switch (getArg0(0)) {\ncase 5:byte[] dsr={(byte)27,(byte)'[',(byte)'0',(byte)'n'};\nmSession.write(dsr,0,dsr.length);\nbreak;\ncase 6:mSession.write(String.format(Locale.US,\"\\033[%d;%dR\",mCursorRow + 1,mCursorCol + 1));\nbreak;\ndefault:break;\n}\nbreak;\ncase 'r':{\nmTopMargin=Math.max(0,Math.min(getArg0(1) - 1,mRows - 2));\nmBottomMargin=Math.max(mTopMargin + 2,Math.min(getArg1(mRows),mRows));\nsetCursorPosition(0,0);\n}\nbreak;\ncase 's':if (isDecsetInternalBitSet(DECSET_BIT_LEFTRIGHT_MARGIN_MODE)) {\nmLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2);\nmRightMargin=Math.max(mLeftMargin + 1,Math.min(getArg1(mColumns),mColumns));\nsetCursorPosition(0,0);\n}\n else {\nsaveCursor();\n}\nbreak;\ncase 't':switch (getArg0(0)) {\ncase 11:mSession.write(\"\\033[1t\");\nbreak;\ncase 13:mSession.write(\"\\033[3;0;0t\");\nbreak;\ncase 14:mSession.write(String.format(Locale.US,\"\\033[4;%d;%dt\",mRows * 12,mColumns * 12));\nbreak;\ncase 18:mSession.write(String.format(Locale.US,\"\\033[8;%d;%dt\",mRows,mColumns));\nbreak;\ncase 19:mSession.write(String.format(Locale.US,\"\\033[9;%d;%dt\",mRows,mColumns));\nbreak;\ncase 20:mSession.write(\"\\033]LIconLabel\\033\\\\\");\nbreak;\ncase 21:mSession.write(\"\\033]l\\033\\\\\");\nbreak;\ncase 22:mTitleStack.push(mTitle);\nif (mTitleStack.size() > 20) {\nmTitleStack.remove(0);\n}\nbreak;\ncase 23:if (!mTitleStack.isEmpty()) setTitle(mTitleStack.pop());\nbreak;\ndefault:break;\n}\nbreak;\ncase 'u':restoreCursor();\nbreak;\ncase ' ':continueSequence(ESC_CSI_ARGS_SPACE);\nbreak;\ndefault:parseArg(b);\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1097,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 1578,
        "startColumnNumber" : 20,
        "endLineNumber" : 1578,
        "endColumnNumber" : 73
      },
      "nodeContext" : "mLeftMargin=Math.min(getArg0(1) - 1,mColumns - 2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 1382,
    "startColumnNumber" : 50,
    "endLineNumber" : 1382,
    "endColumnNumber" : 64
  }, {
    "charLength" : 14,
    "startLineNumber" : 1504,
    "startColumnNumber" : 49,
    "endLineNumber" : 1504,
    "endColumnNumber" : 63
  }, {
    "charLength" : 14,
    "startLineNumber" : 1569,
    "startColumnNumber" : 50,
    "endLineNumber" : 1569,
    "endColumnNumber" : 64
  }, {
    "charLength" : 14,
    "startLineNumber" : 1578,
    "startColumnNumber" : 43,
    "endLineNumber" : 1578,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  } ]
}