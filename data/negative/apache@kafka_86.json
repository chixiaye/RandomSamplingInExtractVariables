{
  "id" : 86,
  "expression" : "entry.compressionType() == CompressionType.ZSTD",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "entry.compressionType() == CompressionType.ZSTD",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 47,
      "startLineNumber" : 239,
      "startColumnNumber" : 35,
      "endLineNumber" : 239,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 239,
        "startColumnNumber" : 20,
        "endLineNumber" : 239,
        "endColumnNumber" : 82
      },
      "nodeContext" : "version < 7 && entry.compressionType() == CompressionType.ZSTD",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 239,
        "startColumnNumber" : 16,
        "endLineNumber" : 242,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (version < 7 && entry.compressionType() == CompressionType.ZSTD) {\n  throw new UnsupportedCompressionTypeException(\"Produce requests with version \" + version + \" are not allowed to \"+ \"use ZStandard compression\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1221,
        "startLineNumber" : 228,
        "startColumnNumber" : 48,
        "endLineNumber" : 247,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Records records=(Records)baseRecords;\n  Iterator<? extends RecordBatch> iterator=records.batches().iterator();\n  if (!iterator.hasNext())   throw new InvalidRecordException(\"Produce requests with version \" + version + \" must have at least \"+ \"one record batch\");\n  RecordBatch entry=iterator.next();\n  if (entry.magic() != RecordBatch.MAGIC_VALUE_V2)   throw new InvalidRecordException(\"Produce requests with version \" + version + \" are only allowed to \"+ \"contain record batches with magic version 2\");\n  if (version < 7 && entry.compressionType() == CompressionType.ZSTD) {\n    throw new UnsupportedCompressionTypeException(\"Produce requests with version \" + version + \" are not allowed to \"+ \"use ZStandard compression\");\n  }\n  if (iterator.hasNext())   throw new InvalidRecordException(\"Produce requests with version \" + version + \" are only allowed to \"+ \"contain exactly one record batch\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1257,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 247,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (baseRecords instanceof Records) {\n  Records records=(Records)baseRecords;\n  Iterator<? extends RecordBatch> iterator=records.batches().iterator();\n  if (!iterator.hasNext())   throw new InvalidRecordException(\"Produce requests with version \" + version + \" must have at least \"+ \"one record batch\");\n  RecordBatch entry=iterator.next();\n  if (entry.magic() != RecordBatch.MAGIC_VALUE_V2)   throw new InvalidRecordException(\"Produce requests with version \" + version + \" are only allowed to \"+ \"contain record batches with magic version 2\");\n  if (version < 7 && entry.compressionType() == CompressionType.ZSTD) {\n    throw new UnsupportedCompressionTypeException(\"Produce requests with version \" + version + \" are not allowed to \"+ \"use ZStandard compression\");\n  }\n  if (iterator.hasNext())   throw new InvalidRecordException(\"Produce requests with version \" + version + \" are only allowed to \"+ \"contain exactly one record batch\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 103,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1281,
        "startLineNumber" : 227,
        "startColumnNumber" : 26,
        "endLineNumber" : 248,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (baseRecords instanceof Records) {\n    Records records=(Records)baseRecords;\n    Iterator<? extends RecordBatch> iterator=records.batches().iterator();\n    if (!iterator.hasNext())     throw new InvalidRecordException(\"Produce requests with version \" + version + \" must have at least \"+ \"one record batch\");\n    RecordBatch entry=iterator.next();\n    if (entry.magic() != RecordBatch.MAGIC_VALUE_V2)     throw new InvalidRecordException(\"Produce requests with version \" + version + \" are only allowed to \"+ \"contain record batches with magic version 2\");\n    if (version < 7 && entry.compressionType() == CompressionType.ZSTD) {\n      throw new UnsupportedCompressionTypeException(\"Produce requests with version \" + version + \" are not allowed to \"+ \"use ZStandard compression\");\n    }\n    if (iterator.hasNext())     throw new InvalidRecordException(\"Produce requests with version \" + version + \" are only allowed to \"+ \"contain exactly one record batch\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1299,
        "startLineNumber" : 227,
        "startColumnNumber" : 8,
        "endLineNumber" : 248,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (version >= 3) {\n  if (baseRecords instanceof Records) {\n    Records records=(Records)baseRecords;\n    Iterator<? extends RecordBatch> iterator=records.batches().iterator();\n    if (!iterator.hasNext())     throw new InvalidRecordException(\"Produce requests with version \" + version + \" must have at least \"+ \"one record batch\");\n    RecordBatch entry=iterator.next();\n    if (entry.magic() != RecordBatch.MAGIC_VALUE_V2)     throw new InvalidRecordException(\"Produce requests with version \" + version + \" are only allowed to \"+ \"contain record batches with magic version 2\");\n    if (version < 7 && entry.compressionType() == CompressionType.ZSTD) {\n      throw new UnsupportedCompressionTypeException(\"Produce requests with version \" + version + \" are not allowed to \"+ \"use ZStandard compression\");\n    }\n    if (iterator.hasNext())     throw new InvalidRecordException(\"Produce requests with version \" + version + \" are only allowed to \"+ \"contain exactly one record batch\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 108,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1608,
        "startLineNumber" : 226,
        "startColumnNumber" : 79,
        "endLineNumber" : 253,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (version >= 3) {\n    if (baseRecords instanceof Records) {\n      Records records=(Records)baseRecords;\n      Iterator<? extends RecordBatch> iterator=records.batches().iterator();\n      if (!iterator.hasNext())       throw new InvalidRecordException(\"Produce requests with version \" + version + \" must have at least \"+ \"one record batch\");\n      RecordBatch entry=iterator.next();\n      if (entry.magic() != RecordBatch.MAGIC_VALUE_V2)       throw new InvalidRecordException(\"Produce requests with version \" + version + \" are only allowed to \"+ \"contain record batches with magic version 2\");\n      if (version < 7 && entry.compressionType() == CompressionType.ZSTD) {\n        throw new UnsupportedCompressionTypeException(\"Produce requests with version \" + version + \" are not allowed to \"+ \"use ZStandard compression\");\n      }\n      if (iterator.hasNext())       throw new InvalidRecordException(\"Produce requests with version \" + version + \" are only allowed to \"+ \"contain exactly one record batch\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 226,
        "startColumnNumber" : 4,
        "endLineNumber" : 253,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void validateRecords(short version,BaseRecords baseRecords){\n  if (version >= 3) {\n    if (baseRecords instanceof Records) {\n      Records records=(Records)baseRecords;\n      Iterator<? extends RecordBatch> iterator=records.batches().iterator();\n      if (!iterator.hasNext())       throw new InvalidRecordException(\"Produce requests with version \" + version + \" must have at least \"+ \"one record batch\");\n      RecordBatch entry=iterator.next();\n      if (entry.magic() != RecordBatch.MAGIC_VALUE_V2)       throw new InvalidRecordException(\"Produce requests with version \" + version + \" are only allowed to \"+ \"contain record batches with magic version 2\");\n      if (version < 7 && entry.compressionType() == CompressionType.ZSTD) {\n        throw new UnsupportedCompressionTypeException(\"Produce requests with version \" + version + \" are not allowed to \"+ \"use ZStandard compression\");\n      }\n      if (iterator.hasNext())       throw new InvalidRecordException(\"Produce requests with version \" + version + \" are only allowed to \"+ \"contain exactly one record batch\");\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 121,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 239,
        "startColumnNumber" : 20,
        "endLineNumber" : 239,
        "endColumnNumber" : 82
      },
      "nodeContext" : "version < 7 && entry.compressionType() == CompressionType.ZSTD",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 47,
    "startLineNumber" : 239,
    "startColumnNumber" : 35,
    "endLineNumber" : 239,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}