{
  "id" : 91,
  "expression" : "lineSegment.array",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/app/src/processing/app/syntax/JEditTextArea.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "lineSegment.array",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 619,
      "startColumnNumber" : 26,
      "endLineNumber" : 619,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 619,
        "startColumnNumber" : 11,
        "endLineNumber" : 619,
        "endColumnNumber" : 43
      },
      "nodeContext" : "segmentArray=lineSegment.array",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 619,
        "startColumnNumber" : 4,
        "endLineNumber" : 619,
        "endColumnNumber" : 44
      },
      "nodeContext" : "char[] segmentArray=lineSegment.array;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2747,
        "startLineNumber" : 611,
        "startColumnNumber" : 2,
        "endLineNumber" : 712,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  TokenMarker tokenMarker=getTokenMarker();\n  FontMetrics fm=painter.getFontMetrics();\n  getLineText(line,lineSegment);\n  char[] segmentArray=lineSegment.array;\n  int segmentOffset=lineSegment.offset;\n  int segmentCount=lineSegment.count;\n  int width=horizontalOffset;\n  if (tokenMarker == null) {\n    for (int i=0; i < segmentCount; i++) {\n      char c=segmentArray[i + segmentOffset];\n      int charWidth;\n      if (c == '\\t')       charWidth=(int)painter.nextTabStop(width,i) - width;\n else       charWidth=fm.charWidth(c);\n      if (painter.isBlockCaretEnabled()) {\n        if (x - charWidth <= width)         return i;\n      }\n else {\n        if (x - charWidth / 2 <= width)         return i;\n      }\n      width+=charWidth;\n    }\n    return segmentCount;\n  }\n else {\n    Token tokens;\n    if (painter.currentLineIndex == line && painter.currentLineTokens != null)     tokens=painter.currentLineTokens;\n else {\n      painter.currentLineIndex=line;\n      tokens=painter.currentLineTokens=tokenMarker.markTokens(lineSegment,line);\n    }\n    int offset=0;\n    Font defaultFont=painter.getFont();\n    SyntaxStyle[] styles=painter.getStyles();\n    for (; ; ) {\n      byte id=tokens.id;\n      if (id == Token.END)       return offset;\n      if (id == Token.NULL)       fm=painter.getFontMetrics();\n else       fm=styles[id].getFontMetrics(defaultFont,this);\n      int length=tokens.length;\n      for (int i=0; i < length; i++) {\n        char c=segmentArray[segmentOffset + offset + i];\n        int charWidth;\n        if (c == '\\t')         charWidth=(int)painter.nextTabStop(width,offset + i) - width;\n else         charWidth=fm.charWidth(c);\n        if (painter.isBlockCaretEnabled()) {\n          if (x - charWidth <= width)           return offset + i;\n        }\n else {\n          if (x - charWidth / 2 <= width)           return offset + i;\n        }\n        width+=charWidth;\n      }\n      offset+=length;\n      tokens=tokens.next;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 337,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2916,
        "startLineNumber" : 605,
        "startColumnNumber" : 2,
        "endLineNumber" : 712,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Converts an x co-ordinate to an offset within a line.\n * @param line The line\n * @param x The x co-ordinate\n */\npublic int xToOffset(int line,int x){\n  TokenMarker tokenMarker=getTokenMarker();\n  FontMetrics fm=painter.getFontMetrics();\n  getLineText(line,lineSegment);\n  char[] segmentArray=lineSegment.array;\n  int segmentOffset=lineSegment.offset;\n  int segmentCount=lineSegment.count;\n  int width=horizontalOffset;\n  if (tokenMarker == null) {\n    for (int i=0; i < segmentCount; i++) {\n      char c=segmentArray[i + segmentOffset];\n      int charWidth;\n      if (c == '\\t')       charWidth=(int)painter.nextTabStop(width,i) - width;\n else       charWidth=fm.charWidth(c);\n      if (painter.isBlockCaretEnabled()) {\n        if (x - charWidth <= width)         return i;\n      }\n else {\n        if (x - charWidth / 2 <= width)         return i;\n      }\n      width+=charWidth;\n    }\n    return segmentCount;\n  }\n else {\n    Token tokens;\n    if (painter.currentLineIndex == line && painter.currentLineTokens != null)     tokens=painter.currentLineTokens;\n else {\n      painter.currentLineIndex=line;\n      tokens=painter.currentLineTokens=tokenMarker.markTokens(lineSegment,line);\n    }\n    int offset=0;\n    Font defaultFont=painter.getFont();\n    SyntaxStyle[] styles=painter.getStyles();\n    for (; ; ) {\n      byte id=tokens.id;\n      if (id == Token.END)       return offset;\n      if (id == Token.NULL)       fm=painter.getFontMetrics();\n else       fm=styles[id].getFontMetrics(defaultFont,this);\n      int length=tokens.length;\n      for (int i=0; i < length; i++) {\n        char c=segmentArray[segmentOffset + offset + i];\n        int charWidth;\n        if (c == '\\t')         charWidth=(int)painter.nextTabStop(width,offset + i) - width;\n else         charWidth=fm.charWidth(c);\n        if (painter.isBlockCaretEnabled()) {\n          if (x - charWidth <= width)           return offset + i;\n        }\n else {\n          if (x - charWidth / 2 <= width)           return offset + i;\n        }\n        width+=charWidth;\n      }\n      offset+=length;\n      tokens=tokens.next;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 348,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 619,
        "startColumnNumber" : 4,
        "endLineNumber" : 619,
        "endColumnNumber" : 44
      },
      "nodeContext" : "char[] segmentArray=lineSegment.array;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "char[]"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 619,
    "startColumnNumber" : 26,
    "endLineNumber" : 619,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}