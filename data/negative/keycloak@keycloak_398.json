{
  "id" : 398,
  "expression" : "encryptedDataElement",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/saml-core/src/main/java/org/keycloak/saml/processing/core/util/XMLEncryptionUtil.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "encryptedDataElement",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 176,
      "startColumnNumber" : 31,
      "endLineNumber" : 176,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 176,
        "startColumnNumber" : 31,
        "endLineNumber" : 176,
        "endColumnNumber" : 67
      },
      "nodeContext" : "encryptedDataElement.getParentNode()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 176,
        "startColumnNumber" : 13,
        "endLineNumber" : 176,
        "endColumnNumber" : 67
      },
      "nodeContext" : "parentOfEncNode=encryptedDataElement.getParentNode()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Node parentOfEncNode=encryptedDataElement.getParentNode();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3852,
        "startLineNumber" : 120,
        "startColumnNumber" : 140,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (elementQName == null)   throw logger.nullArgumentError(\"elementQName\");\n  if (document == null)   throw logger.nullArgumentError(\"document\");\n  String wrappingElementPrefix=wrappingElementQName.getPrefix();\n  if (wrappingElementPrefix == null || \"\".equals(wrappingElementPrefix))   throw logger.wrongTypeError(\"Wrapping element prefix invalid\");\n  Element documentElement=DocumentUtil.getElement(document,elementQName);\n  if (documentElement == null)   throw logger.domMissingDocElementError(elementQName.toString());\n  XMLCipher cipher=null;\n  EncryptedKey encryptedKey=encryptKey(document,secretKey,publicKey,keySize);\n  String encryptionAlgorithm=getXMLEncryptionURL(secretKey.getAlgorithm(),keySize);\n  try {\n    cipher=XMLCipher.getInstance(encryptionAlgorithm);\n    cipher.init(XMLCipher.ENCRYPT_MODE,secretKey);\n  }\n catch (  XMLEncryptionException e1) {\n    throw logger.processingError(e1);\n  }\n  Document encryptedDoc;\n  try {\n    encryptedDoc=cipher.doFinal(document,documentElement);\n  }\n catch (  Exception e) {\n    throw logger.processingError(e);\n  }\n  Element encryptedKeyElement=cipher.martial(document,encryptedKey);\n  final String wrappingElementName;\n  if (StringUtil.isNullOrEmpty(wrappingElementPrefix)) {\n    wrappingElementName=wrappingElementQName.getLocalPart();\n  }\n else {\n    wrappingElementName=wrappingElementPrefix + \":\" + wrappingElementQName.getLocalPart();\n  }\n  Element wrappingElement=encryptedDoc.createElementNS(wrappingElementQName.getNamespaceURI(),wrappingElementName);\n  if (!StringUtil.isNullOrEmpty(wrappingElementPrefix)) {\n    wrappingElement.setAttributeNS(XMLConstants.XMLNS_ATTRIBUTE_NS_URI,\"xmlns:\" + wrappingElementPrefix,wrappingElementQName.getNamespaceURI());\n  }\n  NodeList cipherElements=encryptedDoc.getElementsByTagNameNS(EncryptionConstants.EncryptionSpecNS,EncryptionConstants._TAG_ENCRYPTEDDATA);\n  if (cipherElements == null || cipherElements.getLength() == 0)   throw logger.domMissingElementError(\"xenc:EncryptedData\");\n  Element encryptedDataElement=(Element)cipherElements.item(0);\n  Node parentOfEncNode=encryptedDataElement.getParentNode();\n  parentOfEncNode.replaceChild(wrappingElement,encryptedDataElement);\n  wrappingElement.appendChild(encryptedDataElement);\n  if (addEncryptedKeyInKeyInfo) {\n    Element sigElement=encryptedDoc.createElementNS(XMLSignature.XMLNS,DS_KEY_INFO);\n    sigElement.setAttributeNS(XMLConstants.XMLNS_ATTRIBUTE_NS_URI,\"xmlns:ds\",XMLSignature.XMLNS);\n    sigElement.appendChild(encryptedKeyElement);\n    NodeList nodeList=encryptedDoc.getElementsByTagNameNS(EncryptionConstants.EncryptionSpecNS,EncryptionConstants._TAG_CIPHERDATA);\n    if (nodeList == null || nodeList.getLength() == 0)     throw logger.domMissingElementError(\"xenc:CipherData\");\n    Element cipherDataElement=(Element)nodeList.item(0);\n    Node cipherParent=cipherDataElement.getParentNode();\n    cipherParent.insertBefore(sigElement,cipherDataElement);\n  }\n else {\n    wrappingElement.appendChild(encryptedKeyElement);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 366,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Given an element in a Document, encrypt the element and replace the element in the document with the encrypted data\n * @param elementQName QName of the element that we like to encrypt\n * @param document\n * @param publicKey\n * @param secretKey\n * @param keySize\n * @param wrappingElementQName A QName of an element that will wrap the encrypted element\n * @param addEncryptedKeyInKeyInfo Need for the EncryptedKey to be placed in ds:KeyInfo\n * @throws ProcessingException\n */\npublic static void encryptElement(QName elementQName,Document document,PublicKey publicKey,SecretKey secretKey,int keySize,QName wrappingElementQName,boolean addEncryptedKeyInKeyInfo) throws ProcessingException {\n  if (elementQName == null)   throw logger.nullArgumentError(\"elementQName\");\n  if (document == null)   throw logger.nullArgumentError(\"document\");\n  String wrappingElementPrefix=wrappingElementQName.getPrefix();\n  if (wrappingElementPrefix == null || \"\".equals(wrappingElementPrefix))   throw logger.wrongTypeError(\"Wrapping element prefix invalid\");\n  Element documentElement=DocumentUtil.getElement(document,elementQName);\n  if (documentElement == null)   throw logger.domMissingDocElementError(elementQName.toString());\n  XMLCipher cipher=null;\n  EncryptedKey encryptedKey=encryptKey(document,secretKey,publicKey,keySize);\n  String encryptionAlgorithm=getXMLEncryptionURL(secretKey.getAlgorithm(),keySize);\n  try {\n    cipher=XMLCipher.getInstance(encryptionAlgorithm);\n    cipher.init(XMLCipher.ENCRYPT_MODE,secretKey);\n  }\n catch (  XMLEncryptionException e1) {\n    throw logger.processingError(e1);\n  }\n  Document encryptedDoc;\n  try {\n    encryptedDoc=cipher.doFinal(document,documentElement);\n  }\n catch (  Exception e) {\n    throw logger.processingError(e);\n  }\n  Element encryptedKeyElement=cipher.martial(document,encryptedKey);\n  final String wrappingElementName;\n  if (StringUtil.isNullOrEmpty(wrappingElementPrefix)) {\n    wrappingElementName=wrappingElementQName.getLocalPart();\n  }\n else {\n    wrappingElementName=wrappingElementPrefix + \":\" + wrappingElementQName.getLocalPart();\n  }\n  Element wrappingElement=encryptedDoc.createElementNS(wrappingElementQName.getNamespaceURI(),wrappingElementName);\n  if (!StringUtil.isNullOrEmpty(wrappingElementPrefix)) {\n    wrappingElement.setAttributeNS(XMLConstants.XMLNS_ATTRIBUTE_NS_URI,\"xmlns:\" + wrappingElementPrefix,wrappingElementQName.getNamespaceURI());\n  }\n  NodeList cipherElements=encryptedDoc.getElementsByTagNameNS(EncryptionConstants.EncryptionSpecNS,EncryptionConstants._TAG_ENCRYPTEDDATA);\n  if (cipherElements == null || cipherElements.getLength() == 0)   throw logger.domMissingElementError(\"xenc:EncryptedData\");\n  Element encryptedDataElement=(Element)cipherElements.item(0);\n  Node parentOfEncNode=encryptedDataElement.getParentNode();\n  parentOfEncNode.replaceChild(wrappingElement,encryptedDataElement);\n  wrappingElement.appendChild(encryptedDataElement);\n  if (addEncryptedKeyInKeyInfo) {\n    Element sigElement=encryptedDoc.createElementNS(XMLSignature.XMLNS,DS_KEY_INFO);\n    sigElement.setAttributeNS(XMLConstants.XMLNS_ATTRIBUTE_NS_URI,\"xmlns:ds\",XMLSignature.XMLNS);\n    sigElement.appendChild(encryptedKeyElement);\n    NodeList nodeList=encryptedDoc.getElementsByTagNameNS(EncryptionConstants.EncryptionSpecNS,EncryptionConstants._TAG_CIPHERDATA);\n    if (nodeList == null || nodeList.getLength() == 0)     throw logger.domMissingElementError(\"xenc:CipherData\");\n    Element cipherDataElement=(Element)nodeList.item(0);\n    Node cipherParent=cipherDataElement.getParentNode();\n    cipherParent.insertBefore(sigElement,cipherDataElement);\n  }\n else {\n    wrappingElement.appendChild(encryptedKeyElement);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 400,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Node parentOfEncNode=encryptedDataElement.getParentNode();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.w3c.dom.Element"
  }, {
    "nodeContext" : "encryptedDataElement",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 177,
      "startColumnNumber" : 54,
      "endLineNumber" : 177,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 177,
        "endColumnNumber" : 75
      },
      "nodeContext" : "parentOfEncNode.replaceChild(wrappingElement,encryptedDataElement)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 177,
        "endColumnNumber" : 76
      },
      "nodeContext" : "parentOfEncNode.replaceChild(wrappingElement,encryptedDataElement);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3852,
        "startLineNumber" : 120,
        "startColumnNumber" : 140,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (elementQName == null)   throw logger.nullArgumentError(\"elementQName\");\n  if (document == null)   throw logger.nullArgumentError(\"document\");\n  String wrappingElementPrefix=wrappingElementQName.getPrefix();\n  if (wrappingElementPrefix == null || \"\".equals(wrappingElementPrefix))   throw logger.wrongTypeError(\"Wrapping element prefix invalid\");\n  Element documentElement=DocumentUtil.getElement(document,elementQName);\n  if (documentElement == null)   throw logger.domMissingDocElementError(elementQName.toString());\n  XMLCipher cipher=null;\n  EncryptedKey encryptedKey=encryptKey(document,secretKey,publicKey,keySize);\n  String encryptionAlgorithm=getXMLEncryptionURL(secretKey.getAlgorithm(),keySize);\n  try {\n    cipher=XMLCipher.getInstance(encryptionAlgorithm);\n    cipher.init(XMLCipher.ENCRYPT_MODE,secretKey);\n  }\n catch (  XMLEncryptionException e1) {\n    throw logger.processingError(e1);\n  }\n  Document encryptedDoc;\n  try {\n    encryptedDoc=cipher.doFinal(document,documentElement);\n  }\n catch (  Exception e) {\n    throw logger.processingError(e);\n  }\n  Element encryptedKeyElement=cipher.martial(document,encryptedKey);\n  final String wrappingElementName;\n  if (StringUtil.isNullOrEmpty(wrappingElementPrefix)) {\n    wrappingElementName=wrappingElementQName.getLocalPart();\n  }\n else {\n    wrappingElementName=wrappingElementPrefix + \":\" + wrappingElementQName.getLocalPart();\n  }\n  Element wrappingElement=encryptedDoc.createElementNS(wrappingElementQName.getNamespaceURI(),wrappingElementName);\n  if (!StringUtil.isNullOrEmpty(wrappingElementPrefix)) {\n    wrappingElement.setAttributeNS(XMLConstants.XMLNS_ATTRIBUTE_NS_URI,\"xmlns:\" + wrappingElementPrefix,wrappingElementQName.getNamespaceURI());\n  }\n  NodeList cipherElements=encryptedDoc.getElementsByTagNameNS(EncryptionConstants.EncryptionSpecNS,EncryptionConstants._TAG_ENCRYPTEDDATA);\n  if (cipherElements == null || cipherElements.getLength() == 0)   throw logger.domMissingElementError(\"xenc:EncryptedData\");\n  Element encryptedDataElement=(Element)cipherElements.item(0);\n  Node parentOfEncNode=encryptedDataElement.getParentNode();\n  parentOfEncNode.replaceChild(wrappingElement,encryptedDataElement);\n  wrappingElement.appendChild(encryptedDataElement);\n  if (addEncryptedKeyInKeyInfo) {\n    Element sigElement=encryptedDoc.createElementNS(XMLSignature.XMLNS,DS_KEY_INFO);\n    sigElement.setAttributeNS(XMLConstants.XMLNS_ATTRIBUTE_NS_URI,\"xmlns:ds\",XMLSignature.XMLNS);\n    sigElement.appendChild(encryptedKeyElement);\n    NodeList nodeList=encryptedDoc.getElementsByTagNameNS(EncryptionConstants.EncryptionSpecNS,EncryptionConstants._TAG_CIPHERDATA);\n    if (nodeList == null || nodeList.getLength() == 0)     throw logger.domMissingElementError(\"xenc:CipherData\");\n    Element cipherDataElement=(Element)nodeList.item(0);\n    Node cipherParent=cipherDataElement.getParentNode();\n    cipherParent.insertBefore(sigElement,cipherDataElement);\n  }\n else {\n    wrappingElement.appendChild(encryptedKeyElement);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 366,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Given an element in a Document, encrypt the element and replace the element in the document with the encrypted data\n * @param elementQName QName of the element that we like to encrypt\n * @param document\n * @param publicKey\n * @param secretKey\n * @param keySize\n * @param wrappingElementQName A QName of an element that will wrap the encrypted element\n * @param addEncryptedKeyInKeyInfo Need for the EncryptedKey to be placed in ds:KeyInfo\n * @throws ProcessingException\n */\npublic static void encryptElement(QName elementQName,Document document,PublicKey publicKey,SecretKey secretKey,int keySize,QName wrappingElementQName,boolean addEncryptedKeyInKeyInfo) throws ProcessingException {\n  if (elementQName == null)   throw logger.nullArgumentError(\"elementQName\");\n  if (document == null)   throw logger.nullArgumentError(\"document\");\n  String wrappingElementPrefix=wrappingElementQName.getPrefix();\n  if (wrappingElementPrefix == null || \"\".equals(wrappingElementPrefix))   throw logger.wrongTypeError(\"Wrapping element prefix invalid\");\n  Element documentElement=DocumentUtil.getElement(document,elementQName);\n  if (documentElement == null)   throw logger.domMissingDocElementError(elementQName.toString());\n  XMLCipher cipher=null;\n  EncryptedKey encryptedKey=encryptKey(document,secretKey,publicKey,keySize);\n  String encryptionAlgorithm=getXMLEncryptionURL(secretKey.getAlgorithm(),keySize);\n  try {\n    cipher=XMLCipher.getInstance(encryptionAlgorithm);\n    cipher.init(XMLCipher.ENCRYPT_MODE,secretKey);\n  }\n catch (  XMLEncryptionException e1) {\n    throw logger.processingError(e1);\n  }\n  Document encryptedDoc;\n  try {\n    encryptedDoc=cipher.doFinal(document,documentElement);\n  }\n catch (  Exception e) {\n    throw logger.processingError(e);\n  }\n  Element encryptedKeyElement=cipher.martial(document,encryptedKey);\n  final String wrappingElementName;\n  if (StringUtil.isNullOrEmpty(wrappingElementPrefix)) {\n    wrappingElementName=wrappingElementQName.getLocalPart();\n  }\n else {\n    wrappingElementName=wrappingElementPrefix + \":\" + wrappingElementQName.getLocalPart();\n  }\n  Element wrappingElement=encryptedDoc.createElementNS(wrappingElementQName.getNamespaceURI(),wrappingElementName);\n  if (!StringUtil.isNullOrEmpty(wrappingElementPrefix)) {\n    wrappingElement.setAttributeNS(XMLConstants.XMLNS_ATTRIBUTE_NS_URI,\"xmlns:\" + wrappingElementPrefix,wrappingElementQName.getNamespaceURI());\n  }\n  NodeList cipherElements=encryptedDoc.getElementsByTagNameNS(EncryptionConstants.EncryptionSpecNS,EncryptionConstants._TAG_ENCRYPTEDDATA);\n  if (cipherElements == null || cipherElements.getLength() == 0)   throw logger.domMissingElementError(\"xenc:EncryptedData\");\n  Element encryptedDataElement=(Element)cipherElements.item(0);\n  Node parentOfEncNode=encryptedDataElement.getParentNode();\n  parentOfEncNode.replaceChild(wrappingElement,encryptedDataElement);\n  wrappingElement.appendChild(encryptedDataElement);\n  if (addEncryptedKeyInKeyInfo) {\n    Element sigElement=encryptedDoc.createElementNS(XMLSignature.XMLNS,DS_KEY_INFO);\n    sigElement.setAttributeNS(XMLConstants.XMLNS_ATTRIBUTE_NS_URI,\"xmlns:ds\",XMLSignature.XMLNS);\n    sigElement.appendChild(encryptedKeyElement);\n    NodeList nodeList=encryptedDoc.getElementsByTagNameNS(EncryptionConstants.EncryptionSpecNS,EncryptionConstants._TAG_CIPHERDATA);\n    if (nodeList == null || nodeList.getLength() == 0)     throw logger.domMissingElementError(\"xenc:CipherData\");\n    Element cipherDataElement=(Element)nodeList.item(0);\n    Node cipherParent=cipherDataElement.getParentNode();\n    cipherParent.insertBefore(sigElement,cipherDataElement);\n  }\n else {\n    wrappingElement.appendChild(encryptedKeyElement);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 400,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 177,
        "endColumnNumber" : 76
      },
      "nodeContext" : "parentOfEncNode.replaceChild(wrappingElement,encryptedDataElement);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.w3c.dom.Element"
  }, {
    "nodeContext" : "encryptedDataElement",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 179,
      "startColumnNumber" : 36,
      "endLineNumber" : 179,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 179,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 57
      },
      "nodeContext" : "wrappingElement.appendChild(encryptedDataElement)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 179,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 58
      },
      "nodeContext" : "wrappingElement.appendChild(encryptedDataElement);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3852,
        "startLineNumber" : 120,
        "startColumnNumber" : 140,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (elementQName == null)   throw logger.nullArgumentError(\"elementQName\");\n  if (document == null)   throw logger.nullArgumentError(\"document\");\n  String wrappingElementPrefix=wrappingElementQName.getPrefix();\n  if (wrappingElementPrefix == null || \"\".equals(wrappingElementPrefix))   throw logger.wrongTypeError(\"Wrapping element prefix invalid\");\n  Element documentElement=DocumentUtil.getElement(document,elementQName);\n  if (documentElement == null)   throw logger.domMissingDocElementError(elementQName.toString());\n  XMLCipher cipher=null;\n  EncryptedKey encryptedKey=encryptKey(document,secretKey,publicKey,keySize);\n  String encryptionAlgorithm=getXMLEncryptionURL(secretKey.getAlgorithm(),keySize);\n  try {\n    cipher=XMLCipher.getInstance(encryptionAlgorithm);\n    cipher.init(XMLCipher.ENCRYPT_MODE,secretKey);\n  }\n catch (  XMLEncryptionException e1) {\n    throw logger.processingError(e1);\n  }\n  Document encryptedDoc;\n  try {\n    encryptedDoc=cipher.doFinal(document,documentElement);\n  }\n catch (  Exception e) {\n    throw logger.processingError(e);\n  }\n  Element encryptedKeyElement=cipher.martial(document,encryptedKey);\n  final String wrappingElementName;\n  if (StringUtil.isNullOrEmpty(wrappingElementPrefix)) {\n    wrappingElementName=wrappingElementQName.getLocalPart();\n  }\n else {\n    wrappingElementName=wrappingElementPrefix + \":\" + wrappingElementQName.getLocalPart();\n  }\n  Element wrappingElement=encryptedDoc.createElementNS(wrappingElementQName.getNamespaceURI(),wrappingElementName);\n  if (!StringUtil.isNullOrEmpty(wrappingElementPrefix)) {\n    wrappingElement.setAttributeNS(XMLConstants.XMLNS_ATTRIBUTE_NS_URI,\"xmlns:\" + wrappingElementPrefix,wrappingElementQName.getNamespaceURI());\n  }\n  NodeList cipherElements=encryptedDoc.getElementsByTagNameNS(EncryptionConstants.EncryptionSpecNS,EncryptionConstants._TAG_ENCRYPTEDDATA);\n  if (cipherElements == null || cipherElements.getLength() == 0)   throw logger.domMissingElementError(\"xenc:EncryptedData\");\n  Element encryptedDataElement=(Element)cipherElements.item(0);\n  Node parentOfEncNode=encryptedDataElement.getParentNode();\n  parentOfEncNode.replaceChild(wrappingElement,encryptedDataElement);\n  wrappingElement.appendChild(encryptedDataElement);\n  if (addEncryptedKeyInKeyInfo) {\n    Element sigElement=encryptedDoc.createElementNS(XMLSignature.XMLNS,DS_KEY_INFO);\n    sigElement.setAttributeNS(XMLConstants.XMLNS_ATTRIBUTE_NS_URI,\"xmlns:ds\",XMLSignature.XMLNS);\n    sigElement.appendChild(encryptedKeyElement);\n    NodeList nodeList=encryptedDoc.getElementsByTagNameNS(EncryptionConstants.EncryptionSpecNS,EncryptionConstants._TAG_CIPHERDATA);\n    if (nodeList == null || nodeList.getLength() == 0)     throw logger.domMissingElementError(\"xenc:CipherData\");\n    Element cipherDataElement=(Element)nodeList.item(0);\n    Node cipherParent=cipherDataElement.getParentNode();\n    cipherParent.insertBefore(sigElement,cipherDataElement);\n  }\n else {\n    wrappingElement.appendChild(encryptedKeyElement);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 366,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Given an element in a Document, encrypt the element and replace the element in the document with the encrypted data\n * @param elementQName QName of the element that we like to encrypt\n * @param document\n * @param publicKey\n * @param secretKey\n * @param keySize\n * @param wrappingElementQName A QName of an element that will wrap the encrypted element\n * @param addEncryptedKeyInKeyInfo Need for the EncryptedKey to be placed in ds:KeyInfo\n * @throws ProcessingException\n */\npublic static void encryptElement(QName elementQName,Document document,PublicKey publicKey,SecretKey secretKey,int keySize,QName wrappingElementQName,boolean addEncryptedKeyInKeyInfo) throws ProcessingException {\n  if (elementQName == null)   throw logger.nullArgumentError(\"elementQName\");\n  if (document == null)   throw logger.nullArgumentError(\"document\");\n  String wrappingElementPrefix=wrappingElementQName.getPrefix();\n  if (wrappingElementPrefix == null || \"\".equals(wrappingElementPrefix))   throw logger.wrongTypeError(\"Wrapping element prefix invalid\");\n  Element documentElement=DocumentUtil.getElement(document,elementQName);\n  if (documentElement == null)   throw logger.domMissingDocElementError(elementQName.toString());\n  XMLCipher cipher=null;\n  EncryptedKey encryptedKey=encryptKey(document,secretKey,publicKey,keySize);\n  String encryptionAlgorithm=getXMLEncryptionURL(secretKey.getAlgorithm(),keySize);\n  try {\n    cipher=XMLCipher.getInstance(encryptionAlgorithm);\n    cipher.init(XMLCipher.ENCRYPT_MODE,secretKey);\n  }\n catch (  XMLEncryptionException e1) {\n    throw logger.processingError(e1);\n  }\n  Document encryptedDoc;\n  try {\n    encryptedDoc=cipher.doFinal(document,documentElement);\n  }\n catch (  Exception e) {\n    throw logger.processingError(e);\n  }\n  Element encryptedKeyElement=cipher.martial(document,encryptedKey);\n  final String wrappingElementName;\n  if (StringUtil.isNullOrEmpty(wrappingElementPrefix)) {\n    wrappingElementName=wrappingElementQName.getLocalPart();\n  }\n else {\n    wrappingElementName=wrappingElementPrefix + \":\" + wrappingElementQName.getLocalPart();\n  }\n  Element wrappingElement=encryptedDoc.createElementNS(wrappingElementQName.getNamespaceURI(),wrappingElementName);\n  if (!StringUtil.isNullOrEmpty(wrappingElementPrefix)) {\n    wrappingElement.setAttributeNS(XMLConstants.XMLNS_ATTRIBUTE_NS_URI,\"xmlns:\" + wrappingElementPrefix,wrappingElementQName.getNamespaceURI());\n  }\n  NodeList cipherElements=encryptedDoc.getElementsByTagNameNS(EncryptionConstants.EncryptionSpecNS,EncryptionConstants._TAG_ENCRYPTEDDATA);\n  if (cipherElements == null || cipherElements.getLength() == 0)   throw logger.domMissingElementError(\"xenc:EncryptedData\");\n  Element encryptedDataElement=(Element)cipherElements.item(0);\n  Node parentOfEncNode=encryptedDataElement.getParentNode();\n  parentOfEncNode.replaceChild(wrappingElement,encryptedDataElement);\n  wrappingElement.appendChild(encryptedDataElement);\n  if (addEncryptedKeyInKeyInfo) {\n    Element sigElement=encryptedDoc.createElementNS(XMLSignature.XMLNS,DS_KEY_INFO);\n    sigElement.setAttributeNS(XMLConstants.XMLNS_ATTRIBUTE_NS_URI,\"xmlns:ds\",XMLSignature.XMLNS);\n    sigElement.appendChild(encryptedKeyElement);\n    NodeList nodeList=encryptedDoc.getElementsByTagNameNS(EncryptionConstants.EncryptionSpecNS,EncryptionConstants._TAG_CIPHERDATA);\n    if (nodeList == null || nodeList.getLength() == 0)     throw logger.domMissingElementError(\"xenc:CipherData\");\n    Element cipherDataElement=(Element)nodeList.item(0);\n    Node cipherParent=cipherDataElement.getParentNode();\n    cipherParent.insertBefore(sigElement,cipherDataElement);\n  }\n else {\n    wrappingElement.appendChild(encryptedKeyElement);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 400,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 179,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 58
      },
      "nodeContext" : "wrappingElement.appendChild(encryptedDataElement);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.w3c.dom.Element"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 176,
    "startColumnNumber" : 31,
    "endLineNumber" : 176,
    "endColumnNumber" : 51
  }, {
    "charLength" : 20,
    "startLineNumber" : 177,
    "startColumnNumber" : 54,
    "endLineNumber" : 177,
    "endColumnNumber" : 74
  }, {
    "charLength" : 20,
    "startLineNumber" : 179,
    "startColumnNumber" : 36,
    "endLineNumber" : 179,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}