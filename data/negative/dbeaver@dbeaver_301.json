{
  "id" : 301,
  "expression" : "settings",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "05f28b68d87f0310ba37bb2c571d121cb3d1afaa",
  "filePath" : "plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/spreadsheet/SpreadsheetPresentation.java",
  "occurrences" : 12,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "settings",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 467,
      "startColumnNumber" : 27,
      "endLineNumber" : 467,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 467,
        "startColumnNumber" : 27,
        "endLineNumber" : 467,
        "endColumnNumber" : 48
      },
      "nodeContext" : "settings.isCopyHTML()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 467,
        "startColumnNumber" : 16,
        "endLineNumber" : 467,
        "endColumnNumber" : 48
      },
      "nodeContext" : "copyHTML=settings.isCopyHTML()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 467,
        "startColumnNumber" : 8,
        "endLineNumber" : 467,
        "endColumnNumber" : 49
      },
      "nodeContext" : "boolean copyHTML=settings.isCopyHTML();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5366,
        "startLineNumber" : 466,
        "startColumnNumber" : 79,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 676,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5468,
        "startLineNumber" : 464,
        "startColumnNumber" : 4,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@NotNull @Override public Map<Transfer,Object> copySelection(ResultSetCopySettings settings){\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 694,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 467,
        "startColumnNumber" : 8,
        "endLineNumber" : 467,
        "endColumnNumber" : 49
      },
      "nodeContext" : "boolean copyHTML=settings.isCopyHTML();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ui.controls.resultset.ResultSetCopySettings"
  }, {
    "nodeContext" : "settings",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 470,
      "startColumnNumber" : 33,
      "endLineNumber" : 470,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 470,
        "startColumnNumber" : 33,
        "endLineNumber" : 470,
        "endColumnNumber" : 62
      },
      "nodeContext" : "settings.getColumnDelimiter()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 470,
        "startColumnNumber" : 15,
        "endLineNumber" : 470,
        "endColumnNumber" : 62
      },
      "nodeContext" : "columnDelimiter=settings.getColumnDelimiter()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 470,
        "startColumnNumber" : 8,
        "endLineNumber" : 470,
        "endColumnNumber" : 63
      },
      "nodeContext" : "String columnDelimiter=settings.getColumnDelimiter();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5366,
        "startLineNumber" : 466,
        "startColumnNumber" : 79,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 676,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5468,
        "startLineNumber" : 464,
        "startColumnNumber" : 4,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@NotNull @Override public Map<Transfer,Object> copySelection(ResultSetCopySettings settings){\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 694,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 470,
        "startColumnNumber" : 8,
        "endLineNumber" : 470,
        "endColumnNumber" : 63
      },
      "nodeContext" : "String columnDelimiter=settings.getColumnDelimiter();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ui.controls.resultset.ResultSetCopySettings"
  }, {
    "nodeContext" : "settings",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 475,
      "startColumnNumber" : 30,
      "endLineNumber" : 475,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 475,
        "startColumnNumber" : 30,
        "endLineNumber" : 475,
        "endColumnNumber" : 56
      },
      "nodeContext" : "settings.getRowDelimiter()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 475,
        "startColumnNumber" : 15,
        "endLineNumber" : 475,
        "endColumnNumber" : 56
      },
      "nodeContext" : "rowDelimiter=settings.getRowDelimiter()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 475,
        "startColumnNumber" : 8,
        "endLineNumber" : 475,
        "endColumnNumber" : 57
      },
      "nodeContext" : "String rowDelimiter=settings.getRowDelimiter();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5366,
        "startLineNumber" : 466,
        "startColumnNumber" : 79,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 676,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5468,
        "startLineNumber" : 464,
        "startColumnNumber" : 4,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@NotNull @Override public Map<Transfer,Object> copySelection(ResultSetCopySettings settings){\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 694,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 475,
        "startColumnNumber" : 8,
        "endLineNumber" : 475,
        "endColumnNumber" : 57
      },
      "nodeContext" : "String rowDelimiter=settings.getRowDelimiter();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ui.controls.resultset.ResultSetCopySettings"
  }, {
    "nodeContext" : "settings",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 479,
      "startColumnNumber" : 29,
      "endLineNumber" : 479,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 479,
        "startColumnNumber" : 29,
        "endLineNumber" : 479,
        "endColumnNumber" : 54
      },
      "nodeContext" : "settings.getQuoteString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 479,
        "startColumnNumber" : 15,
        "endLineNumber" : 479,
        "endColumnNumber" : 54
      },
      "nodeContext" : "quoteString=settings.getQuoteString()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 479,
        "startColumnNumber" : 8,
        "endLineNumber" : 479,
        "endColumnNumber" : 55
      },
      "nodeContext" : "String quoteString=settings.getQuoteString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5366,
        "startLineNumber" : 466,
        "startColumnNumber" : 79,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 676,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5468,
        "startLineNumber" : 464,
        "startColumnNumber" : 4,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@NotNull @Override public Map<Transfer,Object> copySelection(ResultSetCopySettings settings){\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 694,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 479,
        "startColumnNumber" : 8,
        "endLineNumber" : 479,
        "endColumnNumber" : 55
      },
      "nodeContext" : "String quoteString=settings.getQuoteString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ui.controls.resultset.ResultSetCopySettings"
  }, {
    "nodeContext" : "settings",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 488,
      "startColumnNumber" : 12,
      "endLineNumber" : 488,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 488,
        "startColumnNumber" : 12,
        "endLineNumber" : 488,
        "endColumnNumber" : 35
      },
      "nodeContext" : "settings.isCopyHeader()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 737,
        "startLineNumber" : 488,
        "startColumnNumber" : 8,
        "endLineNumber" : 504,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (settings.isCopyHeader()) {\n  if (copyHTML)   html.append(\"<thead>\");\n  if (settings.isCopyRowNumbers()) {\n    tdt.append(\"#\");\n    if (copyHTML)     html.append(\"<th>#</th>\");\n  }\n  for (  Object column : selectedColumns) {\n    if (tdt.length() > 0) {\n      tdt.append(columnDelimiter);\n    }\n    String columnText=labelProvider.getText(column);\n    tdt.append(columnText);\n    if (copyHTML)     html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n  }\n  tdt.append(rowDelimiter);\n  if (copyHTML)   html.append(\"</thead>\").append(rowDelimiter);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5366,
        "startLineNumber" : 466,
        "startColumnNumber" : 79,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 676,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5468,
        "startLineNumber" : 464,
        "startColumnNumber" : 4,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@NotNull @Override public Map<Transfer,Object> copySelection(ResultSetCopySettings settings){\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 694,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 488,
        "startColumnNumber" : 12,
        "endLineNumber" : 488,
        "endColumnNumber" : 35
      },
      "nodeContext" : "settings.isCopyHeader()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ui.controls.resultset.ResultSetCopySettings"
  }, {
    "nodeContext" : "settings",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 490,
      "startColumnNumber" : 16,
      "endLineNumber" : 490,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 490,
        "startColumnNumber" : 16,
        "endLineNumber" : 490,
        "endColumnNumber" : 43
      },
      "nodeContext" : "settings.isCopyRowNumbers()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 490,
        "startColumnNumber" : 12,
        "endLineNumber" : 493,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (settings.isCopyRowNumbers()) {\n  tdt.append(\"#\");\n  if (copyHTML)   html.append(\"<th>#</th>\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 708,
        "startLineNumber" : 488,
        "startColumnNumber" : 37,
        "endLineNumber" : 504,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (copyHTML)   html.append(\"<thead>\");\n  if (settings.isCopyRowNumbers()) {\n    tdt.append(\"#\");\n    if (copyHTML)     html.append(\"<th>#</th>\");\n  }\n  for (  Object column : selectedColumns) {\n    if (tdt.length() > 0) {\n      tdt.append(columnDelimiter);\n    }\n    String columnText=labelProvider.getText(column);\n    tdt.append(columnText);\n    if (copyHTML)     html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n  }\n  tdt.append(rowDelimiter);\n  if (copyHTML)   html.append(\"</thead>\").append(rowDelimiter);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 737,
        "startLineNumber" : 488,
        "startColumnNumber" : 8,
        "endLineNumber" : 504,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (settings.isCopyHeader()) {\n  if (copyHTML)   html.append(\"<thead>\");\n  if (settings.isCopyRowNumbers()) {\n    tdt.append(\"#\");\n    if (copyHTML)     html.append(\"<th>#</th>\");\n  }\n  for (  Object column : selectedColumns) {\n    if (tdt.length() > 0) {\n      tdt.append(columnDelimiter);\n    }\n    String columnText=labelProvider.getText(column);\n    tdt.append(columnText);\n    if (copyHTML)     html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n  }\n  tdt.append(rowDelimiter);\n  if (copyHTML)   html.append(\"</thead>\").append(rowDelimiter);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5366,
        "startLineNumber" : 466,
        "startColumnNumber" : 79,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 676,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5468,
        "startLineNumber" : 464,
        "startColumnNumber" : 4,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@NotNull @Override public Map<Transfer,Object> copySelection(ResultSetCopySettings settings){\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 694,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 490,
        "startColumnNumber" : 16,
        "endLineNumber" : 490,
        "endColumnNumber" : 43
      },
      "nodeContext" : "settings.isCopyRowNumbers()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ui.controls.resultset.ResultSetCopySettings"
  }, {
    "nodeContext" : "settings",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 509,
      "startColumnNumber" : 29,
      "endLineNumber" : 509,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 509,
        "startColumnNumber" : 29,
        "endLineNumber" : 509,
        "endColumnNumber" : 52
      },
      "nodeContext" : "settings.isQuoteCells()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 509,
        "startColumnNumber" : 29,
        "endLineNumber" : 509,
        "endColumnNumber" : 80
      },
      "nodeContext" : "settings.isQuoteCells() && selectedCells.size() > 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 509,
        "startColumnNumber" : 16,
        "endLineNumber" : 509,
        "endColumnNumber" : 80
      },
      "nodeContext" : "quoteCells=settings.isQuoteCells() && selectedCells.size() > 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 509,
        "startColumnNumber" : 8,
        "endLineNumber" : 509,
        "endColumnNumber" : 81
      },
      "nodeContext" : "boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5366,
        "startLineNumber" : 466,
        "startColumnNumber" : 79,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 676,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5468,
        "startLineNumber" : 464,
        "startColumnNumber" : 4,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@NotNull @Override public Map<Transfer,Object> copySelection(ResultSetCopySettings settings){\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 694,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 509,
        "startColumnNumber" : 8,
        "endLineNumber" : 509,
        "endColumnNumber" : 81
      },
      "nodeContext" : "boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ui.controls.resultset.ResultSetCopySettings"
  }, {
    "nodeContext" : "settings",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 510,
      "startColumnNumber" : 30,
      "endLineNumber" : 510,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 510,
        "startColumnNumber" : 30,
        "endLineNumber" : 510,
        "endColumnNumber" : 54
      },
      "nodeContext" : "settings.isForceQuotes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 510,
        "startColumnNumber" : 16,
        "endLineNumber" : 510,
        "endColumnNumber" : 54
      },
      "nodeContext" : "forceQuotes=settings.isForceQuotes()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 510,
        "startColumnNumber" : 8,
        "endLineNumber" : 510,
        "endColumnNumber" : 55
      },
      "nodeContext" : "boolean forceQuotes=settings.isForceQuotes();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5366,
        "startLineNumber" : 466,
        "startColumnNumber" : 79,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 676,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5468,
        "startLineNumber" : 464,
        "startColumnNumber" : 4,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@NotNull @Override public Map<Transfer,Object> copySelection(ResultSetCopySettings settings){\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 694,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 510,
        "startColumnNumber" : 8,
        "endLineNumber" : 510,
        "endColumnNumber" : 55
      },
      "nodeContext" : "boolean forceQuotes=settings.isForceQuotes();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ui.controls.resultset.ResultSetCopySettings"
  }, {
    "nodeContext" : "settings",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 528,
      "startColumnNumber" : 20,
      "endLineNumber" : 528,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 528,
        "startColumnNumber" : 20,
        "endLineNumber" : 528,
        "endColumnNumber" : 47
      },
      "nodeContext" : "settings.isCopyRowNumbers()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 280,
        "startLineNumber" : 528,
        "startColumnNumber" : 16,
        "endLineNumber" : 532,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (settings.isCopyRowNumbers()) {\n  String rowNumber=labelProvider.getText(cell.row);\n  tdt.append(rowNumber).append(columnDelimiter);\n  if (copyHTML)   html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1004,
        "startLineNumber" : 514,
        "startColumnNumber" : 62,
        "endLineNumber" : 534,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (prevCell != null && prevCell.col != cell.col) {\n    int prevColIndex=selectedColumns.indexOf(prevCell.col);\n    for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n      tdt.append(columnDelimiter);\n      if (copyHTML)       html.append(\"<td></td>\");\n    }\n  }\n  if (prevCell != null) {\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</tr>\").append(rowDelimiter);\n  }\n  if (settings.isCopyRowNumbers()) {\n    String rowNumber=labelProvider.getText(cell.row);\n    tdt.append(rowNumber).append(columnDelimiter);\n    if (copyHTML)     html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n  }\n  if (copyHTML)   html.append(\"<tr>\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 514,
        "startColumnNumber" : 12,
        "endLineNumber" : 534,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (prevCell == null || cell.row != prevCell.row) {\n  if (prevCell != null && prevCell.col != cell.col) {\n    int prevColIndex=selectedColumns.indexOf(prevCell.col);\n    for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n      tdt.append(columnDelimiter);\n      if (copyHTML)       html.append(\"<td></td>\");\n    }\n  }\n  if (prevCell != null) {\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</tr>\").append(rowDelimiter);\n  }\n  if (settings.isCopyRowNumbers()) {\n    String rowNumber=labelProvider.getText(cell.row);\n    tdt.append(rowNumber).append(columnDelimiter);\n    if (copyHTML)     html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n  }\n  if (copyHTML)   html.append(\"<tr>\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 128,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2914,
        "startLineNumber" : 513,
        "startColumnNumber" : 44,
        "endLineNumber" : 571,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (prevCell == null || cell.row != prevCell.row) {\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n        tdt.append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td></td>\");\n      }\n    }\n    if (prevCell != null) {\n      tdt.append(rowDelimiter);\n      if (copyHTML)       html.append(\"</tr>\").append(rowDelimiter);\n    }\n    if (settings.isCopyRowNumbers()) {\n      String rowNumber=labelProvider.getText(cell.row);\n      tdt.append(rowNumber).append(columnDelimiter);\n      if (copyHTML)       html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n    }\n    if (copyHTML)     html.append(\"<tr>\");\n  }\n  if (prevCell != null && prevCell.col != cell.col) {\n    int prevColIndex=selectedColumns.indexOf(prevCell.col);\n    int curColIndex=selectedColumns.indexOf(cell.col);\n    for (int i=prevColIndex; i < curColIndex; i++) {\n      tdt.append(columnDelimiter);\n      if (i != prevColIndex) {\n        if (copyHTML)         html.append(\"<td></td>\");\n      }\n    }\n  }\n  boolean recordMode=controller.isRecordMode();\n  DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n  ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n  Object value=controller.getModel().getCellValue(column,row);\n  String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n  if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n    if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n      cellText=quoteString + cellText + quoteString;\n    }\n  }\n  tdt.append(cellText);\n  if (copyHTML)   html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n  if (settings.isCut()) {\n    IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n    if (!valueController.isReadOnly()) {\n      valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n    }\n  }\n  prevCell=cell;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 356,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2950,
        "startLineNumber" : 513,
        "startColumnNumber" : 8,
        "endLineNumber" : 571,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (GridCell cell : selectedCells) {\n  if (prevCell == null || cell.row != prevCell.row) {\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n        tdt.append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td></td>\");\n      }\n    }\n    if (prevCell != null) {\n      tdt.append(rowDelimiter);\n      if (copyHTML)       html.append(\"</tr>\").append(rowDelimiter);\n    }\n    if (settings.isCopyRowNumbers()) {\n      String rowNumber=labelProvider.getText(cell.row);\n      tdt.append(rowNumber).append(columnDelimiter);\n      if (copyHTML)       html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n    }\n    if (copyHTML)     html.append(\"<tr>\");\n  }\n  if (prevCell != null && prevCell.col != cell.col) {\n    int prevColIndex=selectedColumns.indexOf(prevCell.col);\n    int curColIndex=selectedColumns.indexOf(cell.col);\n    for (int i=prevColIndex; i < curColIndex; i++) {\n      tdt.append(columnDelimiter);\n      if (i != prevColIndex) {\n        if (copyHTML)         html.append(\"<td></td>\");\n      }\n    }\n  }\n  boolean recordMode=controller.isRecordMode();\n  DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n  ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n  Object value=controller.getModel().getCellValue(column,row);\n  String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n  if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n    if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n      cellText=quoteString + cellText + quoteString;\n    }\n  }\n  tdt.append(cellText);\n  if (copyHTML)   html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n  if (settings.isCut()) {\n    IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n    if (!valueController.isReadOnly()) {\n      valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n    }\n  }\n  prevCell=cell;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 362,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5366,
        "startLineNumber" : 466,
        "startColumnNumber" : 79,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 676,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5468,
        "startLineNumber" : 464,
        "startColumnNumber" : 4,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@NotNull @Override public Map<Transfer,Object> copySelection(ResultSetCopySettings settings){\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 694,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 528,
        "startColumnNumber" : 20,
        "endLineNumber" : 528,
        "endColumnNumber" : 47
      },
      "nodeContext" : "settings.isCopyRowNumbers()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ui.controls.resultset.ResultSetCopySettings"
  }, {
    "nodeContext" : "settings",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 553,
      "startColumnNumber" : 16,
      "endLineNumber" : 553,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 553,
        "startColumnNumber" : 16,
        "endLineNumber" : 553,
        "endColumnNumber" : 36
      },
      "nodeContext" : "settings.getFormat()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 550,
        "startColumnNumber" : 30,
        "endLineNumber" : 553,
        "endColumnNumber" : 37
      },
      "nodeContext" : "column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 550,
        "startColumnNumber" : 19,
        "endLineNumber" : 553,
        "endColumnNumber" : 37
      },
      "nodeContext" : "cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 550,
        "startColumnNumber" : 12,
        "endLineNumber" : 553,
        "endColumnNumber" : 38
      },
      "nodeContext" : "String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2914,
        "startLineNumber" : 513,
        "startColumnNumber" : 44,
        "endLineNumber" : 571,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (prevCell == null || cell.row != prevCell.row) {\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n        tdt.append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td></td>\");\n      }\n    }\n    if (prevCell != null) {\n      tdt.append(rowDelimiter);\n      if (copyHTML)       html.append(\"</tr>\").append(rowDelimiter);\n    }\n    if (settings.isCopyRowNumbers()) {\n      String rowNumber=labelProvider.getText(cell.row);\n      tdt.append(rowNumber).append(columnDelimiter);\n      if (copyHTML)       html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n    }\n    if (copyHTML)     html.append(\"<tr>\");\n  }\n  if (prevCell != null && prevCell.col != cell.col) {\n    int prevColIndex=selectedColumns.indexOf(prevCell.col);\n    int curColIndex=selectedColumns.indexOf(cell.col);\n    for (int i=prevColIndex; i < curColIndex; i++) {\n      tdt.append(columnDelimiter);\n      if (i != prevColIndex) {\n        if (copyHTML)         html.append(\"<td></td>\");\n      }\n    }\n  }\n  boolean recordMode=controller.isRecordMode();\n  DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n  ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n  Object value=controller.getModel().getCellValue(column,row);\n  String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n  if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n    if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n      cellText=quoteString + cellText + quoteString;\n    }\n  }\n  tdt.append(cellText);\n  if (copyHTML)   html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n  if (settings.isCut()) {\n    IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n    if (!valueController.isReadOnly()) {\n      valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n    }\n  }\n  prevCell=cell;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 356,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2950,
        "startLineNumber" : 513,
        "startColumnNumber" : 8,
        "endLineNumber" : 571,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (GridCell cell : selectedCells) {\n  if (prevCell == null || cell.row != prevCell.row) {\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n        tdt.append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td></td>\");\n      }\n    }\n    if (prevCell != null) {\n      tdt.append(rowDelimiter);\n      if (copyHTML)       html.append(\"</tr>\").append(rowDelimiter);\n    }\n    if (settings.isCopyRowNumbers()) {\n      String rowNumber=labelProvider.getText(cell.row);\n      tdt.append(rowNumber).append(columnDelimiter);\n      if (copyHTML)       html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n    }\n    if (copyHTML)     html.append(\"<tr>\");\n  }\n  if (prevCell != null && prevCell.col != cell.col) {\n    int prevColIndex=selectedColumns.indexOf(prevCell.col);\n    int curColIndex=selectedColumns.indexOf(cell.col);\n    for (int i=prevColIndex; i < curColIndex; i++) {\n      tdt.append(columnDelimiter);\n      if (i != prevColIndex) {\n        if (copyHTML)         html.append(\"<td></td>\");\n      }\n    }\n  }\n  boolean recordMode=controller.isRecordMode();\n  DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n  ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n  Object value=controller.getModel().getCellValue(column,row);\n  String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n  if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n    if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n      cellText=quoteString + cellText + quoteString;\n    }\n  }\n  tdt.append(cellText);\n  if (copyHTML)   html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n  if (settings.isCut()) {\n    IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n    if (!valueController.isReadOnly()) {\n      valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n    }\n  }\n  prevCell=cell;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 362,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5366,
        "startLineNumber" : 466,
        "startColumnNumber" : 79,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 676,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5468,
        "startLineNumber" : 464,
        "startColumnNumber" : 4,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@NotNull @Override public Map<Transfer,Object> copySelection(ResultSetCopySettings settings){\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 694,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 553,
        "startColumnNumber" : 16,
        "endLineNumber" : 553,
        "endColumnNumber" : 36
      },
      "nodeContext" : "settings.getFormat()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ui.controls.resultset.ResultSetCopySettings"
  }, {
    "nodeContext" : "settings",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 562,
      "startColumnNumber" : 16,
      "endLineNumber" : 562,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 562,
        "startColumnNumber" : 16,
        "endLineNumber" : 562,
        "endColumnNumber" : 32
      },
      "nodeContext" : "settings.isCut()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 562,
        "startColumnNumber" : 12,
        "endLineNumber" : 568,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (settings.isCut()) {\n  IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n  if (!valueController.isReadOnly()) {\n    valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2914,
        "startLineNumber" : 513,
        "startColumnNumber" : 44,
        "endLineNumber" : 571,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (prevCell == null || cell.row != prevCell.row) {\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n        tdt.append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td></td>\");\n      }\n    }\n    if (prevCell != null) {\n      tdt.append(rowDelimiter);\n      if (copyHTML)       html.append(\"</tr>\").append(rowDelimiter);\n    }\n    if (settings.isCopyRowNumbers()) {\n      String rowNumber=labelProvider.getText(cell.row);\n      tdt.append(rowNumber).append(columnDelimiter);\n      if (copyHTML)       html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n    }\n    if (copyHTML)     html.append(\"<tr>\");\n  }\n  if (prevCell != null && prevCell.col != cell.col) {\n    int prevColIndex=selectedColumns.indexOf(prevCell.col);\n    int curColIndex=selectedColumns.indexOf(cell.col);\n    for (int i=prevColIndex; i < curColIndex; i++) {\n      tdt.append(columnDelimiter);\n      if (i != prevColIndex) {\n        if (copyHTML)         html.append(\"<td></td>\");\n      }\n    }\n  }\n  boolean recordMode=controller.isRecordMode();\n  DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n  ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n  Object value=controller.getModel().getCellValue(column,row);\n  String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n  if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n    if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n      cellText=quoteString + cellText + quoteString;\n    }\n  }\n  tdt.append(cellText);\n  if (copyHTML)   html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n  if (settings.isCut()) {\n    IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n    if (!valueController.isReadOnly()) {\n      valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n    }\n  }\n  prevCell=cell;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 356,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2950,
        "startLineNumber" : 513,
        "startColumnNumber" : 8,
        "endLineNumber" : 571,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (GridCell cell : selectedCells) {\n  if (prevCell == null || cell.row != prevCell.row) {\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n        tdt.append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td></td>\");\n      }\n    }\n    if (prevCell != null) {\n      tdt.append(rowDelimiter);\n      if (copyHTML)       html.append(\"</tr>\").append(rowDelimiter);\n    }\n    if (settings.isCopyRowNumbers()) {\n      String rowNumber=labelProvider.getText(cell.row);\n      tdt.append(rowNumber).append(columnDelimiter);\n      if (copyHTML)       html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n    }\n    if (copyHTML)     html.append(\"<tr>\");\n  }\n  if (prevCell != null && prevCell.col != cell.col) {\n    int prevColIndex=selectedColumns.indexOf(prevCell.col);\n    int curColIndex=selectedColumns.indexOf(cell.col);\n    for (int i=prevColIndex; i < curColIndex; i++) {\n      tdt.append(columnDelimiter);\n      if (i != prevColIndex) {\n        if (copyHTML)         html.append(\"<td></td>\");\n      }\n    }\n  }\n  boolean recordMode=controller.isRecordMode();\n  DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n  ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n  Object value=controller.getModel().getCellValue(column,row);\n  String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n  if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n    if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n      cellText=quoteString + cellText + quoteString;\n    }\n  }\n  tdt.append(cellText);\n  if (copyHTML)   html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n  if (settings.isCut()) {\n    IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n    if (!valueController.isReadOnly()) {\n      valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n    }\n  }\n  prevCell=cell;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 362,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5366,
        "startLineNumber" : 466,
        "startColumnNumber" : 79,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 676,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5468,
        "startLineNumber" : 464,
        "startColumnNumber" : 4,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@NotNull @Override public Map<Transfer,Object> copySelection(ResultSetCopySettings settings){\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 694,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 562,
        "startColumnNumber" : 16,
        "endLineNumber" : 562,
        "endColumnNumber" : 32
      },
      "nodeContext" : "settings.isCut()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ui.controls.resultset.ResultSetCopySettings"
  }, {
    "nodeContext" : "settings",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 576,
      "startColumnNumber" : 12,
      "endLineNumber" : 576,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 576,
        "startColumnNumber" : 12,
        "endLineNumber" : 576,
        "endColumnNumber" : 28
      },
      "nodeContext" : "settings.isCut()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 576,
        "startColumnNumber" : 8,
        "endLineNumber" : 579,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (settings.isCut()) {\n  controller.redrawData(false,false);\n  controller.updatePanelsContent(false);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5366,
        "startLineNumber" : 466,
        "startColumnNumber" : 79,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 676,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5468,
        "startLineNumber" : 464,
        "startColumnNumber" : 4,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@NotNull @Override public Map<Transfer,Object> copySelection(ResultSetCopySettings settings){\n  boolean copyHTML=settings.isCopyHTML();\n  Map<Transfer,Object> formats=new LinkedHashMap<>();\n  String columnDelimiter=settings.getColumnDelimiter();\n  if (columnDelimiter == null) {\n    columnDelimiter=\"\\t\";\n  }\n  String rowDelimiter=settings.getRowDelimiter();\n  if (rowDelimiter == null) {\n    rowDelimiter=GeneralUtils.getDefaultLineSeparator();\n  }\n  String quoteString=settings.getQuoteString();\n  if ((CommonUtils.isEmpty(quoteString))) {\n    quoteString=\"\\\"\";\n  }\n  List<Object> selectedColumns=spreadsheet.getColumnSelection();\n  IGridLabelProvider labelProvider=spreadsheet.getLabelProvider();\n  StringBuilder tdt=new StringBuilder();\n  StringBuilder html=new StringBuilder();\n  html.append(\"<table border=\\\"1\\\">\");\n  if (settings.isCopyHeader()) {\n    if (copyHTML)     html.append(\"<thead>\");\n    if (settings.isCopyRowNumbers()) {\n      tdt.append(\"#\");\n      if (copyHTML)       html.append(\"<th>#</th>\");\n    }\n    for (    Object column : selectedColumns) {\n      if (tdt.length() > 0) {\n        tdt.append(columnDelimiter);\n      }\n      String columnText=labelProvider.getText(column);\n      tdt.append(columnText);\n      if (copyHTML)       html.append(\"<th>\").append(XMLUtils.escapeXml(columnText)).append(\"</th>\");\n    }\n    tdt.append(rowDelimiter);\n    if (copyHTML)     html.append(\"</thead>\").append(rowDelimiter);\n  }\n  if (copyHTML)   html.append(\"<tbody>\");\n  List<GridCell> selectedCells=spreadsheet.getCellSelection();\n  boolean quoteCells=settings.isQuoteCells() && selectedCells.size() > 1;\n  boolean forceQuotes=settings.isForceQuotes();\n  GridCell prevCell=null;\n  for (  GridCell cell : selectedCells) {\n    if (prevCell == null || cell.row != prevCell.row) {\n      if (prevCell != null && prevCell.col != cell.col) {\n        int prevColIndex=selectedColumns.indexOf(prevCell.col);\n        for (int i=prevColIndex; i < selectedColumns.size() - 1; i++) {\n          tdt.append(columnDelimiter);\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n      if (prevCell != null) {\n        tdt.append(rowDelimiter);\n        if (copyHTML)         html.append(\"</tr>\").append(rowDelimiter);\n      }\n      if (settings.isCopyRowNumbers()) {\n        String rowNumber=labelProvider.getText(cell.row);\n        tdt.append(rowNumber).append(columnDelimiter);\n        if (copyHTML)         html.append(\"<td>\").append(rowNumber).append(\"</td>\");\n      }\n      if (copyHTML)       html.append(\"<tr>\");\n    }\n    if (prevCell != null && prevCell.col != cell.col) {\n      int prevColIndex=selectedColumns.indexOf(prevCell.col);\n      int curColIndex=selectedColumns.indexOf(cell.col);\n      for (int i=prevColIndex; i < curColIndex; i++) {\n        tdt.append(columnDelimiter);\n        if (i != prevColIndex) {\n          if (copyHTML)           html.append(\"<td></td>\");\n        }\n      }\n    }\n    boolean recordMode=controller.isRecordMode();\n    DBDAttributeBinding column=(DBDAttributeBinding)(!recordMode ? cell.col : cell.row);\n    ResultSetRow row=(ResultSetRow)(!recordMode ? cell.row : cell.col);\n    Object value=controller.getModel().getCellValue(column,row);\n    String cellText=column.getValueRenderer().getValueDisplayString(column.getAttribute(),value,settings.getFormat());\n    if (forceQuotes || (quoteCells && !CommonUtils.isEmpty(cellText))) {\n      if (forceQuotes || cellText.contains(columnDelimiter) || cellText.contains(rowDelimiter)) {\n        cellText=quoteString + cellText + quoteString;\n      }\n    }\n    tdt.append(cellText);\n    if (copyHTML)     html.append(\"<td>\").append(XMLUtils.escapeXml(cellText)).append(\"</td> \");\n    if (settings.isCut()) {\n      IValueController valueController=new SpreadsheetValueController(controller,column,row,IValueController.EditType.NONE,null);\n      if (!valueController.isReadOnly()) {\n        valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);\n      }\n    }\n    prevCell=cell;\n  }\n  if (copyHTML) {\n    html.append(\"</tbody>\").append(rowDelimiter);\n    html.append(\"</table>\").append(rowDelimiter);\n  }\n  if (settings.isCut()) {\n    controller.redrawData(false,false);\n    controller.updatePanelsContent(false);\n  }\n  formats.put(TextTransfer.getInstance(),tdt.toString());\n  if (copyHTML) {\n    formats.put(HTMLTransfer.getInstance(),html.toString());\n  }\n  return formats;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 694,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 576,
        "startColumnNumber" : 12,
        "endLineNumber" : 576,
        "endColumnNumber" : 28
      },
      "nodeContext" : "settings.isCut()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ui.controls.resultset.ResultSetCopySettings"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 467,
    "startColumnNumber" : 27,
    "endLineNumber" : 467,
    "endColumnNumber" : 35
  }, {
    "charLength" : 8,
    "startLineNumber" : 470,
    "startColumnNumber" : 33,
    "endLineNumber" : 470,
    "endColumnNumber" : 41
  }, {
    "charLength" : 8,
    "startLineNumber" : 475,
    "startColumnNumber" : 30,
    "endLineNumber" : 475,
    "endColumnNumber" : 38
  }, {
    "charLength" : 8,
    "startLineNumber" : 479,
    "startColumnNumber" : 29,
    "endLineNumber" : 479,
    "endColumnNumber" : 37
  }, {
    "charLength" : 8,
    "startLineNumber" : 488,
    "startColumnNumber" : 12,
    "endLineNumber" : 488,
    "endColumnNumber" : 20
  }, {
    "charLength" : 8,
    "startLineNumber" : 490,
    "startColumnNumber" : 16,
    "endLineNumber" : 490,
    "endColumnNumber" : 24
  }, {
    "charLength" : 8,
    "startLineNumber" : 509,
    "startColumnNumber" : 29,
    "endLineNumber" : 509,
    "endColumnNumber" : 37
  }, {
    "charLength" : 8,
    "startLineNumber" : 510,
    "startColumnNumber" : 30,
    "endLineNumber" : 510,
    "endColumnNumber" : 38
  }, {
    "charLength" : 8,
    "startLineNumber" : 528,
    "startColumnNumber" : 20,
    "endLineNumber" : 528,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 553,
    "startColumnNumber" : 16,
    "endLineNumber" : 553,
    "endColumnNumber" : 24
  }, {
    "charLength" : 8,
    "startLineNumber" : 562,
    "startColumnNumber" : 16,
    "endLineNumber" : 562,
    "endColumnNumber" : 24
  }, {
    "charLength" : 8,
    "startLineNumber" : 576,
    "startColumnNumber" : 12,
    "endLineNumber" : 576,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 2
  } ]
}