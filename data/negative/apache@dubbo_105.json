{
  "id" : 105,
  "expression" : "types1[i].getName()",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-common/src/main/java/org/apache/dubbo/common/utils/MethodComparator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "types1[i].getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 61,
      "startColumnNumber" : 28,
      "endLineNumber" : 61,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 61,
        "startColumnNumber" : 28,
        "endLineNumber" : 61,
        "endColumnNumber" : 78
      },
      "nodeContext" : "types1[i].getName().compareTo(types2[i].getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 61,
        "startColumnNumber" : 20,
        "endLineNumber" : 61,
        "endColumnNumber" : 78
      },
      "nodeContext" : "value=types1[i].getName().compareTo(types2[i].getName())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 61,
        "startColumnNumber" : 20,
        "endLineNumber" : 61,
        "endColumnNumber" : 79
      },
      "nodeContext" : "value=types1[i].getName().compareTo(types2[i].getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 190,
        "startLineNumber" : 60,
        "startColumnNumber" : 56,
        "endLineNumber" : 65,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  value=types1[i].getName().compareTo(types2[i].getName());\n  if (value != 0) {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 65,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < types1.length; i++) {\n  value=types1[i].getName().compareTo(types2[i].getName());\n  if (value != 0) {\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 272,
        "startLineNumber" : 59,
        "startColumnNumber" : 28,
        "endLineNumber" : 66,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (int i=0; i < types1.length; i++) {\n    value=types1[i].getName().compareTo(types2[i].getName());\n    if (value != 0) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 288,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 66,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (value == 0) {\n  for (int i=0; i < types1.length; i++) {\n    value=types1[i].getName().compareTo(types2[i].getName());\n    if (value != 0) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 482,
        "startLineNumber" : 52,
        "startColumnNumber" : 24,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Class[] types1=m1.getParameterTypes();\n  Class[] types2=m2.getParameterTypes();\n  value=types1.length - types2.length;\n  if (value == 0) {\n    for (int i=0; i < types1.length; i++) {\n      value=types1[i].getName().compareTo(types2[i].getName());\n      if (value != 0) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value == 0) {\n  Class[] types1=m1.getParameterTypes();\n  Class[] types2=m2.getParameterTypes();\n  value=types1.length - types2.length;\n  if (value == 0) {\n    for (int i=0; i < types1.length; i++) {\n      value=types1[i].getName().compareTo(types2[i].getName());\n      if (value != 0) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 745,
        "startLineNumber" : 41,
        "startColumnNumber" : 45,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (m1.equals(m2)) {\n    return 0;\n  }\n  String n1=m1.getName();\n  String n2=m2.getName();\n  int value=n1.compareTo(n2);\n  if (value == 0) {\n    Class[] types1=m1.getParameterTypes();\n    Class[] types2=m2.getParameterTypes();\n    value=types1.length - types2.length;\n    if (value == 0) {\n      for (int i=0; i < types1.length; i++) {\n        value=types1[i].getName().compareTo(types2[i].getName());\n        if (value != 0) {\n          break;\n        }\n      }\n    }\n  }\n  return Integer.compare(value,0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 800,
        "startLineNumber" : 40,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public int compare(Method m1,Method m2){\n  if (m1.equals(m2)) {\n    return 0;\n  }\n  String n1=m1.getName();\n  String n2=m2.getName();\n  int value=n1.compareTo(n2);\n  if (value == 0) {\n    Class[] types1=m1.getParameterTypes();\n    Class[] types2=m2.getParameterTypes();\n    value=types1.length - types2.length;\n    if (value == 0) {\n      for (int i=0; i < types1.length; i++) {\n        value=types1[i].getName().compareTo(types2[i].getName());\n        if (value != 0) {\n          break;\n        }\n      }\n    }\n  }\n  return Integer.compare(value,0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 128,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 61,
        "startColumnNumber" : 20,
        "endLineNumber" : 61,
        "endColumnNumber" : 79
      },
      "nodeContext" : "value=types1[i].getName().compareTo(types2[i].getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 61,
    "startColumnNumber" : 28,
    "endLineNumber" : 61,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}