{
  "id" : 429,
  "expression" : "token == JSONToken.LITERAL_FLOAT",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/main/java/com/alibaba/fastjson/serializer/IntegerCodec.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "token == JSONToken.LITERAL_FLOAT",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 101,
      "startColumnNumber" : 19,
      "endLineNumber" : 101,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 860,
        "startLineNumber" : 101,
        "startColumnNumber" : 15,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (token == JSONToken.LITERAL_FLOAT) {\n  BigDecimal decimalValue=lexer.decimalValue();\n  lexer.nextToken(JSONToken.COMMA);\n  if (clazz == long.class || clazz == Long.class) {\n    intObj=Long.valueOf(decimalValue.longValue());\n  }\n else {\n    intObj=Integer.valueOf(decimalValue.intValue());\n  }\n}\n else {\n  Object value=parser.parse();\n  try {\n    if (clazz == long.class || clazz == Long.class) {\n      intObj=TypeUtils.castToLong(value);\n    }\n else {\n      intObj=TypeUtils.castToInt(value);\n    }\n  }\n catch (  Exception ex) {\n    throw new JSONException(\"cast error, field : \" + fieldName + \", value \"+ value,ex);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1456,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (token == JSONToken.LITERAL_INT) {\n  if (clazz == long.class || clazz == Long.class) {\n    long longValue=lexer.longValue();\n    intObj=Long.valueOf(longValue);\n  }\n else {\n    try {\n      int val=lexer.intValue();\n      intObj=Integer.valueOf(val);\n    }\n catch (    NumberFormatException ex) {\n      throw new JSONException(\"int value overflow, field : \" + fieldName,ex);\n    }\n  }\n  lexer.nextToken(JSONToken.COMMA);\n}\n else if (token == JSONToken.LITERAL_FLOAT) {\n  BigDecimal decimalValue=lexer.decimalValue();\n  lexer.nextToken(JSONToken.COMMA);\n  if (clazz == long.class || clazz == Long.class) {\n    intObj=Long.valueOf(decimalValue.longValue());\n  }\n else {\n    intObj=Integer.valueOf(decimalValue.intValue());\n  }\n}\n else {\n  Object value=parser.parse();\n  try {\n    if (clazz == long.class || clazz == Long.class) {\n      intObj=TypeUtils.castToLong(value);\n    }\n else {\n      intObj=TypeUtils.castToInt(value);\n    }\n  }\n catch (  Exception ex) {\n    throw new JSONException(\"cast error, field : \" + fieldName + \", value \"+ value,ex);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 178,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1747,
        "startLineNumber" : 78,
        "startColumnNumber" : 84,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final JSONLexer lexer=parser.lexer;\n  int token=lexer.token();\n  if (token == JSONToken.NULL) {\n    lexer.nextToken(JSONToken.COMMA);\n    return null;\n  }\n  Number intObj;\n  if (token == JSONToken.LITERAL_INT) {\n    if (clazz == long.class || clazz == Long.class) {\n      long longValue=lexer.longValue();\n      intObj=Long.valueOf(longValue);\n    }\n else {\n      try {\n        int val=lexer.intValue();\n        intObj=Integer.valueOf(val);\n      }\n catch (      NumberFormatException ex) {\n        throw new JSONException(\"int value overflow, field : \" + fieldName,ex);\n      }\n    }\n    lexer.nextToken(JSONToken.COMMA);\n  }\n else   if (token == JSONToken.LITERAL_FLOAT) {\n    BigDecimal decimalValue=lexer.decimalValue();\n    lexer.nextToken(JSONToken.COMMA);\n    if (clazz == long.class || clazz == Long.class) {\n      intObj=Long.valueOf(decimalValue.longValue());\n    }\n else {\n      intObj=Integer.valueOf(decimalValue.intValue());\n    }\n  }\n else {\n    Object value=parser.parse();\n    try {\n      if (clazz == long.class || clazz == Long.class) {\n        intObj=TypeUtils.castToLong(value);\n      }\n else {\n        intObj=TypeUtils.castToInt(value);\n      }\n    }\n catch (    Exception ex) {\n      throw new JSONException(\"cast error, field : \" + fieldName + \", value \"+ value,ex);\n    }\n  }\n  return (T)intObj;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 221,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1863,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") public <T>T deserialze(DefaultJSONParser parser,Type clazz,Object fieldName){\n  final JSONLexer lexer=parser.lexer;\n  int token=lexer.token();\n  if (token == JSONToken.NULL) {\n    lexer.nextToken(JSONToken.COMMA);\n    return null;\n  }\n  Number intObj;\n  if (token == JSONToken.LITERAL_INT) {\n    if (clazz == long.class || clazz == Long.class) {\n      long longValue=lexer.longValue();\n      intObj=Long.valueOf(longValue);\n    }\n else {\n      try {\n        int val=lexer.intValue();\n        intObj=Integer.valueOf(val);\n      }\n catch (      NumberFormatException ex) {\n        throw new JSONException(\"int value overflow, field : \" + fieldName,ex);\n      }\n    }\n    lexer.nextToken(JSONToken.COMMA);\n  }\n else   if (token == JSONToken.LITERAL_FLOAT) {\n    BigDecimal decimalValue=lexer.decimalValue();\n    lexer.nextToken(JSONToken.COMMA);\n    if (clazz == long.class || clazz == Long.class) {\n      intObj=Long.valueOf(decimalValue.longValue());\n    }\n else {\n      intObj=Integer.valueOf(decimalValue.intValue());\n    }\n  }\n else {\n    Object value=parser.parse();\n    try {\n      if (clazz == long.class || clazz == Long.class) {\n        intObj=TypeUtils.castToLong(value);\n      }\n else {\n        intObj=TypeUtils.castToInt(value);\n      }\n    }\n catch (    Exception ex) {\n      throw new JSONException(\"cast error, field : \" + fieldName + \", value \"+ value,ex);\n    }\n  }\n  return (T)intObj;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 860,
        "startLineNumber" : 101,
        "startColumnNumber" : 15,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (token == JSONToken.LITERAL_FLOAT) {\n  BigDecimal decimalValue=lexer.decimalValue();\n  lexer.nextToken(JSONToken.COMMA);\n  if (clazz == long.class || clazz == Long.class) {\n    intObj=Long.valueOf(decimalValue.longValue());\n  }\n else {\n    intObj=Integer.valueOf(decimalValue.intValue());\n  }\n}\n else {\n  Object value=parser.parse();\n  try {\n    if (clazz == long.class || clazz == Long.class) {\n      intObj=TypeUtils.castToLong(value);\n    }\n else {\n      intObj=TypeUtils.castToInt(value);\n    }\n  }\n catch (  Exception ex) {\n    throw new JSONException(\"cast error, field : \" + fieldName + \", value \"+ value,ex);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 10
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 101,
    "startColumnNumber" : 19,
    "endLineNumber" : 101,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}