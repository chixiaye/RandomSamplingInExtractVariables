{
  "id" : 137,
  "expression" : "Runnable.class",
  "projectName" : "codecentric@spring-boot-admin",
  "commitID" : "cc544df47d4bcdf7138ca3e264797778fb39920a",
  "filePath" : "/spring-boot-admin-starter-client/src/test/java/de/codecentric/boot/admin/client/registration/RegistrationApplicationListenerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Runnable.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 46,
      "startColumnNumber" : 50,
      "endLineNumber" : 46,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 46,
        "startColumnNumber" : 46,
        "endLineNumber" : 46,
        "endColumnNumber" : 65
      },
      "nodeContext" : "isA(Runnable.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 79
      },
      "nodeContext" : "verify(scheduler).scheduleAtFixedRate(isA(Runnable.class),eq(10_000L))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 80
      },
      "nodeContext" : "verify(scheduler).scheduleAtFixedRate(isA(Runnable.class),eq(10_000L));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 508,
        "startLineNumber" : 38,
        "startColumnNumber" : 49,
        "endLineNumber" : 47,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ApplicationRegistrator registrator=mock(ApplicationRegistrator.class);\n  TaskScheduler scheduler=mock(TaskScheduler.class);\n  RegistrationApplicationListener listener=new RegistrationApplicationListener(registrator,scheduler);\n  listener.onApplicationReady(new ApplicationReadyEvent(mock(SpringApplication.class),null,mock(ConfigurableWebApplicationContext.class)));\n  verify(scheduler).scheduleAtFixedRate(isA(Runnable.class),eq(10_000L));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 563,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void test_register() throws Exception {\n  ApplicationRegistrator registrator=mock(ApplicationRegistrator.class);\n  TaskScheduler scheduler=mock(TaskScheduler.class);\n  RegistrationApplicationListener listener=new RegistrationApplicationListener(registrator,scheduler);\n  listener.onApplicationReady(new ApplicationReadyEvent(mock(SpringApplication.class),null,mock(ConfigurableWebApplicationContext.class)));\n  verify(scheduler).scheduleAtFixedRate(isA(Runnable.class),eq(10_000L));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 71,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 80
      },
      "nodeContext" : "verify(scheduler).scheduleAtFixedRate(isA(Runnable.class),eq(10_000L));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.lang.Runnable>"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 46,
    "startColumnNumber" : 50,
    "endLineNumber" : 46,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}