{
  "id" : 227,
  "expression" : "executableElement",
  "projectName" : "androidannotations@androidannotations",
  "commitID" : "b60a7ff27cb1bcb0eac2710c15c4957c0d992e27",
  "filePath" : "/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/helper/APTCodeModelHelper.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "executableElement",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 84,
      "startColumnNumber" : 22,
      "endLineNumber" : 84,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 84,
        "startColumnNumber" : 22,
        "endLineNumber" : 84,
        "endColumnNumber" : 55
      },
      "nodeContext" : "executableElement.getSimpleName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 84,
        "startColumnNumber" : 22,
        "endLineNumber" : 84,
        "endColumnNumber" : 66
      },
      "nodeContext" : "executableElement.getSimpleName().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 84,
        "startColumnNumber" : 9,
        "endLineNumber" : 84,
        "endColumnNumber" : 66
      },
      "nodeContext" : "methodName=executableElement.getSimpleName().toString()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 84,
        "endColumnNumber" : 67
      },
      "nodeContext" : "String methodName=executableElement.getSimpleName().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1400,
        "startLineNumber" : 82,
        "startColumnNumber" : 97,
        "endLineNumber" : 120,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String methodName=executableElement.getSimpleName().toString();\n  JClass returnType=typeMirrorToJClass(executableElement.getReturnType(),holder);\n  List<Parameter> parameters=new ArrayList<Parameter>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    parameters.add(new Parameter(parameterName,parameterClass));\n  }\n  JMethod existingMethod=findAlreadyGeneratedMethod(holder.eBean,methodName,parameters);\n  if (existingMethod != null) {\n    return existingMethod;\n  }\n  JMethod method=holder.eBean.method(JMod.PUBLIC,returnType,methodName);\n  method.annotate(Override.class);\n  List<JVar> methodParameters=new ArrayList<JVar>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    JVar param=method.param(JMod.FINAL,parameterClass,parameterName);\n    methodParameters.add(param);\n  }\n  for (  TypeMirror superThrownType : executableElement.getThrownTypes()) {\n    JClass thrownType=typeMirrorToJClass(superThrownType,holder);\n    method._throws(thrownType);\n  }\n  callSuperMethod(method,holder,method.body());\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 211,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1496,
        "startLineNumber" : 82,
        "startColumnNumber" : 1,
        "endLineNumber" : 120,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public JMethod overrideAnnotatedMethod(ExecutableElement executableElement,EBeanHolder holder){\n  String methodName=executableElement.getSimpleName().toString();\n  JClass returnType=typeMirrorToJClass(executableElement.getReturnType(),holder);\n  List<Parameter> parameters=new ArrayList<Parameter>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    parameters.add(new Parameter(parameterName,parameterClass));\n  }\n  JMethod existingMethod=findAlreadyGeneratedMethod(holder.eBean,methodName,parameters);\n  if (existingMethod != null) {\n    return existingMethod;\n  }\n  JMethod method=holder.eBean.method(JMod.PUBLIC,returnType,methodName);\n  method.annotate(Override.class);\n  List<JVar> methodParameters=new ArrayList<JVar>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    JVar param=method.param(JMod.FINAL,parameterClass,parameterName);\n    methodParameters.add(param);\n  }\n  for (  TypeMirror superThrownType : executableElement.getThrownTypes()) {\n    JClass thrownType=typeMirrorToJClass(superThrownType,holder);\n    method._throws(thrownType);\n  }\n  callSuperMethod(method,holder,method.body());\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 224,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 84,
        "endColumnNumber" : 67
      },
      "nodeContext" : "String methodName=executableElement.getSimpleName().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.ExecutableElement"
  }, {
    "nodeContext" : "executableElement",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 86,
      "startColumnNumber" : 41,
      "endLineNumber" : 86,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 86,
        "startColumnNumber" : 41,
        "endLineNumber" : 86,
        "endColumnNumber" : 74
      },
      "nodeContext" : "executableElement.getReturnType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 86,
        "startColumnNumber" : 22,
        "endLineNumber" : 86,
        "endColumnNumber" : 83
      },
      "nodeContext" : "typeMirrorToJClass(executableElement.getReturnType(),holder)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 86,
        "startColumnNumber" : 9,
        "endLineNumber" : 86,
        "endColumnNumber" : 83
      },
      "nodeContext" : "returnType=typeMirrorToJClass(executableElement.getReturnType(),holder)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 84
      },
      "nodeContext" : "JClass returnType=typeMirrorToJClass(executableElement.getReturnType(),holder);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1400,
        "startLineNumber" : 82,
        "startColumnNumber" : 97,
        "endLineNumber" : 120,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String methodName=executableElement.getSimpleName().toString();\n  JClass returnType=typeMirrorToJClass(executableElement.getReturnType(),holder);\n  List<Parameter> parameters=new ArrayList<Parameter>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    parameters.add(new Parameter(parameterName,parameterClass));\n  }\n  JMethod existingMethod=findAlreadyGeneratedMethod(holder.eBean,methodName,parameters);\n  if (existingMethod != null) {\n    return existingMethod;\n  }\n  JMethod method=holder.eBean.method(JMod.PUBLIC,returnType,methodName);\n  method.annotate(Override.class);\n  List<JVar> methodParameters=new ArrayList<JVar>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    JVar param=method.param(JMod.FINAL,parameterClass,parameterName);\n    methodParameters.add(param);\n  }\n  for (  TypeMirror superThrownType : executableElement.getThrownTypes()) {\n    JClass thrownType=typeMirrorToJClass(superThrownType,holder);\n    method._throws(thrownType);\n  }\n  callSuperMethod(method,holder,method.body());\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 211,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1496,
        "startLineNumber" : 82,
        "startColumnNumber" : 1,
        "endLineNumber" : 120,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public JMethod overrideAnnotatedMethod(ExecutableElement executableElement,EBeanHolder holder){\n  String methodName=executableElement.getSimpleName().toString();\n  JClass returnType=typeMirrorToJClass(executableElement.getReturnType(),holder);\n  List<Parameter> parameters=new ArrayList<Parameter>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    parameters.add(new Parameter(parameterName,parameterClass));\n  }\n  JMethod existingMethod=findAlreadyGeneratedMethod(holder.eBean,methodName,parameters);\n  if (existingMethod != null) {\n    return existingMethod;\n  }\n  JMethod method=holder.eBean.method(JMod.PUBLIC,returnType,methodName);\n  method.annotate(Override.class);\n  List<JVar> methodParameters=new ArrayList<JVar>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    JVar param=method.param(JMod.FINAL,parameterClass,parameterName);\n    methodParameters.add(param);\n  }\n  for (  TypeMirror superThrownType : executableElement.getThrownTypes()) {\n    JClass thrownType=typeMirrorToJClass(superThrownType,holder);\n    method._throws(thrownType);\n  }\n  callSuperMethod(method,holder,method.body());\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 224,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 84
      },
      "nodeContext" : "JClass returnType=typeMirrorToJClass(executableElement.getReturnType(),holder);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.ExecutableElement"
  }, {
    "nodeContext" : "executableElement",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 89,
      "startColumnNumber" : 35,
      "endLineNumber" : 89,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 89,
        "startColumnNumber" : 35,
        "endLineNumber" : 89,
        "endColumnNumber" : 68
      },
      "nodeContext" : "executableElement.getParameters()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (VariableElement parameter : executableElement.getParameters()) {\n  String parameterName=parameter.getSimpleName().toString();\n  JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n  parameters.add(new Parameter(parameterName,parameterClass));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1400,
        "startLineNumber" : 82,
        "startColumnNumber" : 97,
        "endLineNumber" : 120,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String methodName=executableElement.getSimpleName().toString();\n  JClass returnType=typeMirrorToJClass(executableElement.getReturnType(),holder);\n  List<Parameter> parameters=new ArrayList<Parameter>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    parameters.add(new Parameter(parameterName,parameterClass));\n  }\n  JMethod existingMethod=findAlreadyGeneratedMethod(holder.eBean,methodName,parameters);\n  if (existingMethod != null) {\n    return existingMethod;\n  }\n  JMethod method=holder.eBean.method(JMod.PUBLIC,returnType,methodName);\n  method.annotate(Override.class);\n  List<JVar> methodParameters=new ArrayList<JVar>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    JVar param=method.param(JMod.FINAL,parameterClass,parameterName);\n    methodParameters.add(param);\n  }\n  for (  TypeMirror superThrownType : executableElement.getThrownTypes()) {\n    JClass thrownType=typeMirrorToJClass(superThrownType,holder);\n    method._throws(thrownType);\n  }\n  callSuperMethod(method,holder,method.body());\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 211,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1496,
        "startLineNumber" : 82,
        "startColumnNumber" : 1,
        "endLineNumber" : 120,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public JMethod overrideAnnotatedMethod(ExecutableElement executableElement,EBeanHolder holder){\n  String methodName=executableElement.getSimpleName().toString();\n  JClass returnType=typeMirrorToJClass(executableElement.getReturnType(),holder);\n  List<Parameter> parameters=new ArrayList<Parameter>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    parameters.add(new Parameter(parameterName,parameterClass));\n  }\n  JMethod existingMethod=findAlreadyGeneratedMethod(holder.eBean,methodName,parameters);\n  if (existingMethod != null) {\n    return existingMethod;\n  }\n  JMethod method=holder.eBean.method(JMod.PUBLIC,returnType,methodName);\n  method.annotate(Override.class);\n  List<JVar> methodParameters=new ArrayList<JVar>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    JVar param=method.param(JMod.FINAL,parameterClass,parameterName);\n    methodParameters.add(param);\n  }\n  for (  TypeMirror superThrownType : executableElement.getThrownTypes()) {\n    JClass thrownType=typeMirrorToJClass(superThrownType,holder);\n    method._throws(thrownType);\n  }\n  callSuperMethod(method,holder,method.body());\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 224,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 89,
        "startColumnNumber" : 35,
        "endLineNumber" : 89,
        "endColumnNumber" : 68
      },
      "nodeContext" : "executableElement.getParameters()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.ExecutableElement"
  }, {
    "nodeContext" : "executableElement",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 105,
      "startColumnNumber" : 35,
      "endLineNumber" : 105,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 105,
        "startColumnNumber" : 35,
        "endLineNumber" : 105,
        "endColumnNumber" : 68
      },
      "nodeContext" : "executableElement.getParameters()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 317,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 110,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (VariableElement parameter : executableElement.getParameters()) {\n  String parameterName=parameter.getSimpleName().toString();\n  JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n  JVar param=method.param(JMod.FINAL,parameterClass,parameterName);\n  methodParameters.add(param);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1400,
        "startLineNumber" : 82,
        "startColumnNumber" : 97,
        "endLineNumber" : 120,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String methodName=executableElement.getSimpleName().toString();\n  JClass returnType=typeMirrorToJClass(executableElement.getReturnType(),holder);\n  List<Parameter> parameters=new ArrayList<Parameter>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    parameters.add(new Parameter(parameterName,parameterClass));\n  }\n  JMethod existingMethod=findAlreadyGeneratedMethod(holder.eBean,methodName,parameters);\n  if (existingMethod != null) {\n    return existingMethod;\n  }\n  JMethod method=holder.eBean.method(JMod.PUBLIC,returnType,methodName);\n  method.annotate(Override.class);\n  List<JVar> methodParameters=new ArrayList<JVar>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    JVar param=method.param(JMod.FINAL,parameterClass,parameterName);\n    methodParameters.add(param);\n  }\n  for (  TypeMirror superThrownType : executableElement.getThrownTypes()) {\n    JClass thrownType=typeMirrorToJClass(superThrownType,holder);\n    method._throws(thrownType);\n  }\n  callSuperMethod(method,holder,method.body());\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 211,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1496,
        "startLineNumber" : 82,
        "startColumnNumber" : 1,
        "endLineNumber" : 120,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public JMethod overrideAnnotatedMethod(ExecutableElement executableElement,EBeanHolder holder){\n  String methodName=executableElement.getSimpleName().toString();\n  JClass returnType=typeMirrorToJClass(executableElement.getReturnType(),holder);\n  List<Parameter> parameters=new ArrayList<Parameter>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    parameters.add(new Parameter(parameterName,parameterClass));\n  }\n  JMethod existingMethod=findAlreadyGeneratedMethod(holder.eBean,methodName,parameters);\n  if (existingMethod != null) {\n    return existingMethod;\n  }\n  JMethod method=holder.eBean.method(JMod.PUBLIC,returnType,methodName);\n  method.annotate(Override.class);\n  List<JVar> methodParameters=new ArrayList<JVar>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    JVar param=method.param(JMod.FINAL,parameterClass,parameterName);\n    methodParameters.add(param);\n  }\n  for (  TypeMirror superThrownType : executableElement.getThrownTypes()) {\n    JClass thrownType=typeMirrorToJClass(superThrownType,holder);\n    method._throws(thrownType);\n  }\n  callSuperMethod(method,holder,method.body());\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 224,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 105,
        "startColumnNumber" : 35,
        "endLineNumber" : 105,
        "endColumnNumber" : 68
      },
      "nodeContext" : "executableElement.getParameters()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.ExecutableElement"
  }, {
    "nodeContext" : "executableElement",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 112,
      "startColumnNumber" : 36,
      "endLineNumber" : 112,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 112,
        "startColumnNumber" : 36,
        "endLineNumber" : 112,
        "endColumnNumber" : 70
      },
      "nodeContext" : "executableElement.getThrownTypes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 112,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (TypeMirror superThrownType : executableElement.getThrownTypes()) {\n  JClass thrownType=typeMirrorToJClass(superThrownType,holder);\n  method._throws(thrownType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1400,
        "startLineNumber" : 82,
        "startColumnNumber" : 97,
        "endLineNumber" : 120,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String methodName=executableElement.getSimpleName().toString();\n  JClass returnType=typeMirrorToJClass(executableElement.getReturnType(),holder);\n  List<Parameter> parameters=new ArrayList<Parameter>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    parameters.add(new Parameter(parameterName,parameterClass));\n  }\n  JMethod existingMethod=findAlreadyGeneratedMethod(holder.eBean,methodName,parameters);\n  if (existingMethod != null) {\n    return existingMethod;\n  }\n  JMethod method=holder.eBean.method(JMod.PUBLIC,returnType,methodName);\n  method.annotate(Override.class);\n  List<JVar> methodParameters=new ArrayList<JVar>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    JVar param=method.param(JMod.FINAL,parameterClass,parameterName);\n    methodParameters.add(param);\n  }\n  for (  TypeMirror superThrownType : executableElement.getThrownTypes()) {\n    JClass thrownType=typeMirrorToJClass(superThrownType,holder);\n    method._throws(thrownType);\n  }\n  callSuperMethod(method,holder,method.body());\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 211,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1496,
        "startLineNumber" : 82,
        "startColumnNumber" : 1,
        "endLineNumber" : 120,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public JMethod overrideAnnotatedMethod(ExecutableElement executableElement,EBeanHolder holder){\n  String methodName=executableElement.getSimpleName().toString();\n  JClass returnType=typeMirrorToJClass(executableElement.getReturnType(),holder);\n  List<Parameter> parameters=new ArrayList<Parameter>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    parameters.add(new Parameter(parameterName,parameterClass));\n  }\n  JMethod existingMethod=findAlreadyGeneratedMethod(holder.eBean,methodName,parameters);\n  if (existingMethod != null) {\n    return existingMethod;\n  }\n  JMethod method=holder.eBean.method(JMod.PUBLIC,returnType,methodName);\n  method.annotate(Override.class);\n  List<JVar> methodParameters=new ArrayList<JVar>();\n  for (  VariableElement parameter : executableElement.getParameters()) {\n    String parameterName=parameter.getSimpleName().toString();\n    JClass parameterClass=typeMirrorToJClass(parameter.asType(),holder);\n    JVar param=method.param(JMod.FINAL,parameterClass,parameterName);\n    methodParameters.add(param);\n  }\n  for (  TypeMirror superThrownType : executableElement.getThrownTypes()) {\n    JClass thrownType=typeMirrorToJClass(superThrownType,holder);\n    method._throws(thrownType);\n  }\n  callSuperMethod(method,holder,method.body());\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 224,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 112,
        "startColumnNumber" : 36,
        "endLineNumber" : 112,
        "endColumnNumber" : 70
      },
      "nodeContext" : "executableElement.getThrownTypes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.ExecutableElement"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 84,
    "startColumnNumber" : 22,
    "endLineNumber" : 84,
    "endColumnNumber" : 39
  }, {
    "charLength" : 17,
    "startLineNumber" : 86,
    "startColumnNumber" : 41,
    "endLineNumber" : 86,
    "endColumnNumber" : 58
  }, {
    "charLength" : 17,
    "startLineNumber" : 89,
    "startColumnNumber" : 35,
    "endLineNumber" : 89,
    "endColumnNumber" : 52
  }, {
    "charLength" : 17,
    "startLineNumber" : 105,
    "startColumnNumber" : 35,
    "endLineNumber" : 105,
    "endColumnNumber" : 52
  }, {
    "charLength" : 17,
    "startLineNumber" : 112,
    "startColumnNumber" : 36,
    "endLineNumber" : 112,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}