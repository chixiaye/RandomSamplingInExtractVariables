{
  "id" : 174,
  "expression" : "aBlackPointFoundOnBorder",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/zxing/common/detector/WhiteRectangleDetector.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "aBlackPointFoundOnBorder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 99,
      "startColumnNumber" : 11,
      "endLineNumber" : 99,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2337,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (aBlackPointFoundOnBorder) {\n  aBlackPointFoundOnBorder=false;\n  boolean rightBorderNotWhite=true;\n  while ((rightBorderNotWhite || !atLeastOneBlackPointFoundOnRight) && right < width) {\n    rightBorderNotWhite=containsBlackPoint(up,down,right,false);\n    if (rightBorderNotWhite) {\n      right++;\n      aBlackPointFoundOnBorder=true;\n      atLeastOneBlackPointFoundOnRight=true;\n    }\n else     if (!atLeastOneBlackPointFoundOnRight) {\n      right++;\n    }\n  }\n  if (right >= width) {\n    sizeExceeded=true;\n    break;\n  }\n  boolean bottomBorderNotWhite=true;\n  while ((bottomBorderNotWhite || !atLeastOneBlackPointFoundOnBottom) && down < height) {\n    bottomBorderNotWhite=containsBlackPoint(left,right,down,true);\n    if (bottomBorderNotWhite) {\n      down++;\n      aBlackPointFoundOnBorder=true;\n      atLeastOneBlackPointFoundOnBottom=true;\n    }\n else     if (!atLeastOneBlackPointFoundOnBottom) {\n      down++;\n    }\n  }\n  if (down >= height) {\n    sizeExceeded=true;\n    break;\n  }\n  boolean leftBorderNotWhite=true;\n  while ((leftBorderNotWhite || !atLeastOneBlackPointFoundOnLeft) && left >= 0) {\n    leftBorderNotWhite=containsBlackPoint(up,down,left,false);\n    if (leftBorderNotWhite) {\n      left--;\n      aBlackPointFoundOnBorder=true;\n      atLeastOneBlackPointFoundOnLeft=true;\n    }\n else     if (!atLeastOneBlackPointFoundOnLeft) {\n      left--;\n    }\n  }\n  if (left < 0) {\n    sizeExceeded=true;\n    break;\n  }\n  boolean topBorderNotWhite=true;\n  while ((topBorderNotWhite || !atLeastOneBlackPointFoundOnTop) && up >= 0) {\n    topBorderNotWhite=containsBlackPoint(left,right,up,true);\n    if (topBorderNotWhite) {\n      up--;\n      aBlackPointFoundOnBorder=true;\n      atLeastOneBlackPointFoundOnTop=true;\n    }\n else     if (!atLeastOneBlackPointFoundOnTop) {\n      up--;\n    }\n  }\n  if (up < 0) {\n    sizeExceeded=true;\n    break;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 231,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3960,
        "startLineNumber" : 85,
        "startColumnNumber" : 57,
        "endLineNumber" : 233,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int left=leftInit;\n  int right=rightInit;\n  int up=upInit;\n  int down=downInit;\n  boolean sizeExceeded=false;\n  boolean aBlackPointFoundOnBorder=true;\n  boolean atLeastOneBlackPointFoundOnRight=false;\n  boolean atLeastOneBlackPointFoundOnBottom=false;\n  boolean atLeastOneBlackPointFoundOnLeft=false;\n  boolean atLeastOneBlackPointFoundOnTop=false;\n  while (aBlackPointFoundOnBorder) {\n    aBlackPointFoundOnBorder=false;\n    boolean rightBorderNotWhite=true;\n    while ((rightBorderNotWhite || !atLeastOneBlackPointFoundOnRight) && right < width) {\n      rightBorderNotWhite=containsBlackPoint(up,down,right,false);\n      if (rightBorderNotWhite) {\n        right++;\n        aBlackPointFoundOnBorder=true;\n        atLeastOneBlackPointFoundOnRight=true;\n      }\n else       if (!atLeastOneBlackPointFoundOnRight) {\n        right++;\n      }\n    }\n    if (right >= width) {\n      sizeExceeded=true;\n      break;\n    }\n    boolean bottomBorderNotWhite=true;\n    while ((bottomBorderNotWhite || !atLeastOneBlackPointFoundOnBottom) && down < height) {\n      bottomBorderNotWhite=containsBlackPoint(left,right,down,true);\n      if (bottomBorderNotWhite) {\n        down++;\n        aBlackPointFoundOnBorder=true;\n        atLeastOneBlackPointFoundOnBottom=true;\n      }\n else       if (!atLeastOneBlackPointFoundOnBottom) {\n        down++;\n      }\n    }\n    if (down >= height) {\n      sizeExceeded=true;\n      break;\n    }\n    boolean leftBorderNotWhite=true;\n    while ((leftBorderNotWhite || !atLeastOneBlackPointFoundOnLeft) && left >= 0) {\n      leftBorderNotWhite=containsBlackPoint(up,down,left,false);\n      if (leftBorderNotWhite) {\n        left--;\n        aBlackPointFoundOnBorder=true;\n        atLeastOneBlackPointFoundOnLeft=true;\n      }\n else       if (!atLeastOneBlackPointFoundOnLeft) {\n        left--;\n      }\n    }\n    if (left < 0) {\n      sizeExceeded=true;\n      break;\n    }\n    boolean topBorderNotWhite=true;\n    while ((topBorderNotWhite || !atLeastOneBlackPointFoundOnTop) && up >= 0) {\n      topBorderNotWhite=containsBlackPoint(left,right,up,true);\n      if (topBorderNotWhite) {\n        up--;\n        aBlackPointFoundOnBorder=true;\n        atLeastOneBlackPointFoundOnTop=true;\n      }\n else       if (!atLeastOneBlackPointFoundOnTop) {\n        up--;\n      }\n    }\n    if (up < 0) {\n      sizeExceeded=true;\n      break;\n    }\n  }\n  if (!sizeExceeded) {\n    int maxSize=right - left;\n    ResultPoint z=null;\n    for (int i=1; z == null && i < maxSize; i++) {\n      z=getBlackPointOnSegment(left,down - i,left + i,down);\n    }\n    if (z == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    ResultPoint t=null;\n    for (int i=1; t == null && i < maxSize; i++) {\n      t=getBlackPointOnSegment(left,up + i,left + i,up);\n    }\n    if (t == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    ResultPoint x=null;\n    for (int i=1; x == null && i < maxSize; i++) {\n      x=getBlackPointOnSegment(right,up + i,right - i,up);\n    }\n    if (x == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    ResultPoint y=null;\n    for (int i=1; y == null && i < maxSize; i++) {\n      y=getBlackPointOnSegment(right,down - i,right - i,down);\n    }\n    if (y == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    return centerEdges(y,z,x,t);\n  }\n else {\n    throw NotFoundException.getNotFoundInstance();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 481,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4686,
        "startLineNumber" : 71,
        "startColumnNumber" : 2,
        "endLineNumber" : 233,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * <p> Detects a candidate barcode-like rectangular region within an image. It starts around the center of the image, increases the size of the candidate region until it finds a white rectangular region. </p>\n * @return {@link ResultPoint}[] describing the corners of the rectangular region. The first and last points are opposed on the diagonal, as are the second and third. The first point will be the topmost point and the last, the bottommost. The second point will be leftmost and the third, the rightmost\n * @throws NotFoundException if no Data Matrix Code can be found\n */\npublic ResultPoint[] detect() throws NotFoundException {\n  int left=leftInit;\n  int right=rightInit;\n  int up=upInit;\n  int down=downInit;\n  boolean sizeExceeded=false;\n  boolean aBlackPointFoundOnBorder=true;\n  boolean atLeastOneBlackPointFoundOnRight=false;\n  boolean atLeastOneBlackPointFoundOnBottom=false;\n  boolean atLeastOneBlackPointFoundOnLeft=false;\n  boolean atLeastOneBlackPointFoundOnTop=false;\n  while (aBlackPointFoundOnBorder) {\n    aBlackPointFoundOnBorder=false;\n    boolean rightBorderNotWhite=true;\n    while ((rightBorderNotWhite || !atLeastOneBlackPointFoundOnRight) && right < width) {\n      rightBorderNotWhite=containsBlackPoint(up,down,right,false);\n      if (rightBorderNotWhite) {\n        right++;\n        aBlackPointFoundOnBorder=true;\n        atLeastOneBlackPointFoundOnRight=true;\n      }\n else       if (!atLeastOneBlackPointFoundOnRight) {\n        right++;\n      }\n    }\n    if (right >= width) {\n      sizeExceeded=true;\n      break;\n    }\n    boolean bottomBorderNotWhite=true;\n    while ((bottomBorderNotWhite || !atLeastOneBlackPointFoundOnBottom) && down < height) {\n      bottomBorderNotWhite=containsBlackPoint(left,right,down,true);\n      if (bottomBorderNotWhite) {\n        down++;\n        aBlackPointFoundOnBorder=true;\n        atLeastOneBlackPointFoundOnBottom=true;\n      }\n else       if (!atLeastOneBlackPointFoundOnBottom) {\n        down++;\n      }\n    }\n    if (down >= height) {\n      sizeExceeded=true;\n      break;\n    }\n    boolean leftBorderNotWhite=true;\n    while ((leftBorderNotWhite || !atLeastOneBlackPointFoundOnLeft) && left >= 0) {\n      leftBorderNotWhite=containsBlackPoint(up,down,left,false);\n      if (leftBorderNotWhite) {\n        left--;\n        aBlackPointFoundOnBorder=true;\n        atLeastOneBlackPointFoundOnLeft=true;\n      }\n else       if (!atLeastOneBlackPointFoundOnLeft) {\n        left--;\n      }\n    }\n    if (left < 0) {\n      sizeExceeded=true;\n      break;\n    }\n    boolean topBorderNotWhite=true;\n    while ((topBorderNotWhite || !atLeastOneBlackPointFoundOnTop) && up >= 0) {\n      topBorderNotWhite=containsBlackPoint(left,right,up,true);\n      if (topBorderNotWhite) {\n        up--;\n        aBlackPointFoundOnBorder=true;\n        atLeastOneBlackPointFoundOnTop=true;\n      }\n else       if (!atLeastOneBlackPointFoundOnTop) {\n        up--;\n      }\n    }\n    if (up < 0) {\n      sizeExceeded=true;\n      break;\n    }\n  }\n  if (!sizeExceeded) {\n    int maxSize=right - left;\n    ResultPoint z=null;\n    for (int i=1; z == null && i < maxSize; i++) {\n      z=getBlackPointOnSegment(left,down - i,left + i,down);\n    }\n    if (z == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    ResultPoint t=null;\n    for (int i=1; t == null && i < maxSize; i++) {\n      t=getBlackPointOnSegment(left,up + i,left + i,up);\n    }\n    if (t == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    ResultPoint x=null;\n    for (int i=1; x == null && i < maxSize; i++) {\n      x=getBlackPointOnSegment(right,up + i,right - i,up);\n    }\n    if (x == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    ResultPoint y=null;\n    for (int i=1; y == null && i < maxSize; i++) {\n      y=getBlackPointOnSegment(right,down - i,right - i,down);\n    }\n    if (y == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    return centerEdges(y,z,x,t);\n  }\n else {\n    throw NotFoundException.getNotFoundInstance();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 491,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2337,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (aBlackPointFoundOnBorder) {\n  aBlackPointFoundOnBorder=false;\n  boolean rightBorderNotWhite=true;\n  while ((rightBorderNotWhite || !atLeastOneBlackPointFoundOnRight) && right < width) {\n    rightBorderNotWhite=containsBlackPoint(up,down,right,false);\n    if (rightBorderNotWhite) {\n      right++;\n      aBlackPointFoundOnBorder=true;\n      atLeastOneBlackPointFoundOnRight=true;\n    }\n else     if (!atLeastOneBlackPointFoundOnRight) {\n      right++;\n    }\n  }\n  if (right >= width) {\n    sizeExceeded=true;\n    break;\n  }\n  boolean bottomBorderNotWhite=true;\n  while ((bottomBorderNotWhite || !atLeastOneBlackPointFoundOnBottom) && down < height) {\n    bottomBorderNotWhite=containsBlackPoint(left,right,down,true);\n    if (bottomBorderNotWhite) {\n      down++;\n      aBlackPointFoundOnBorder=true;\n      atLeastOneBlackPointFoundOnBottom=true;\n    }\n else     if (!atLeastOneBlackPointFoundOnBottom) {\n      down++;\n    }\n  }\n  if (down >= height) {\n    sizeExceeded=true;\n    break;\n  }\n  boolean leftBorderNotWhite=true;\n  while ((leftBorderNotWhite || !atLeastOneBlackPointFoundOnLeft) && left >= 0) {\n    leftBorderNotWhite=containsBlackPoint(up,down,left,false);\n    if (leftBorderNotWhite) {\n      left--;\n      aBlackPointFoundOnBorder=true;\n      atLeastOneBlackPointFoundOnLeft=true;\n    }\n else     if (!atLeastOneBlackPointFoundOnLeft) {\n      left--;\n    }\n  }\n  if (left < 0) {\n    sizeExceeded=true;\n    break;\n  }\n  boolean topBorderNotWhite=true;\n  while ((topBorderNotWhite || !atLeastOneBlackPointFoundOnTop) && up >= 0) {\n    topBorderNotWhite=containsBlackPoint(left,right,up,true);\n    if (topBorderNotWhite) {\n      up--;\n      aBlackPointFoundOnBorder=true;\n      atLeastOneBlackPointFoundOnTop=true;\n    }\n else     if (!atLeastOneBlackPointFoundOnTop) {\n      up--;\n    }\n  }\n  if (up < 0) {\n    sizeExceeded=true;\n    break;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 231,
      "astHeight" : 10
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 99,
    "startColumnNumber" : 11,
    "endLineNumber" : 99,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ ]
}