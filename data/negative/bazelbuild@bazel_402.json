{
  "id" : 402,
  "expression" : "new HashSet<>(roots)",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/tools/android/java/com/google/devtools/build/android/desugar/langmodel/DependencyGraph.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new HashSet<>(roots)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 28,
      "startColumnNumber" : 29,
      "endLineNumber" : 28,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 5,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 28,
        "startColumnNumber" : 11,
        "endLineNumber" : 28,
        "endColumnNumber" : 49
      },
      "nodeContext" : "discoveredNodes=new HashSet<>(roots)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 28,
        "startColumnNumber" : 4,
        "endLineNumber" : 28,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Set<N> discoveredNodes=new HashSet<>(roots);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 436,
        "startLineNumber" : 26,
        "startColumnNumber" : 97,
        "endLineNumber" : 39,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Set<N> discoveredNodes=new HashSet<>(roots);\n  Queue<N> workingNodes=new ArrayDeque<>(roots);\n  while (!workingNodes.isEmpty()) {\n    N node=workingNodes.remove();\n    for (    N child : node.getAllChildren()) {\n      if (discoveredNodes.add(child)) {\n        workingNodes.add(child);\n      }\n    }\n  }\n  return ImmutableSet.copyOf(discoveredNodes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 620,
        "startLineNumber" : 25,
        "startColumnNumber" : 2,
        "endLineNumber" : 39,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Searches and obtains all nodes that are reachable from the given  {@code roots}. \n */\npublic static <N extends Node<N>>ImmutableSet<N> findAllReachableNodes(ImmutableSet<N> roots){\n  Set<N> discoveredNodes=new HashSet<>(roots);\n  Queue<N> workingNodes=new ArrayDeque<>(roots);\n  while (!workingNodes.isEmpty()) {\n    N node=workingNodes.remove();\n    for (    N child : node.getAllChildren()) {\n      if (discoveredNodes.add(child)) {\n        workingNodes.add(child);\n      }\n    }\n  }\n  return ImmutableSet.copyOf(discoveredNodes);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 90,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 28,
        "startColumnNumber" : 4,
        "endLineNumber" : 28,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Set<N> discoveredNodes=new HashSet<>(roots);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.util.HashSet"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 28,
    "startColumnNumber" : 29,
    "endLineNumber" : 28,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}