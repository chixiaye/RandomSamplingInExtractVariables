{
  "id" : 22,
  "expression" : "method",
  "projectName" : "androidannotations@androidannotations",
  "commitID" : "e451f03252065dcf61604ef44ee685636a747dcc",
  "filePath" : "AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/rest/MethodProcessor.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "method",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 67,
      "startColumnNumber" : 2,
      "endLineNumber" : 67,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 33
      },
      "nodeContext" : "method.annotate(Override.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 34
      },
      "nodeContext" : "method.annotate(Override.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 53,
        "startColumnNumber" : 82,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void generateRestTemplateCallBlock(MethodProcessorHolder methodHolder){\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 34
      },
      "nodeContext" : "method.annotate(Override.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.JMethod"
  }, {
    "nodeContext" : "method",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 69,
      "startColumnNumber" : 16,
      "endLineNumber" : 69,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 69,
        "endColumnNumber" : 29
      },
      "nodeContext" : "method.body()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 69,
        "startColumnNumber" : 9,
        "endLineNumber" : 69,
        "endColumnNumber" : 29
      },
      "nodeContext" : "body=method.body()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 69,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 30
      },
      "nodeContext" : "JBlock body=method.body();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 53,
        "startColumnNumber" : 82,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void generateRestTemplateCallBlock(MethodProcessorHolder methodHolder){\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 69,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 30
      },
      "nodeContext" : "JBlock body=method.body();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.JMethod"
  }, {
    "nodeContext" : "method",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 82,
      "startColumnNumber" : 87,
      "endLineNumber" : 82,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 82,
        "startColumnNumber" : 63,
        "endLineNumber" : 82,
        "endColumnNumber" : 121
      },
      "nodeContext" : "generateMethodParamsVar(method,executableElement,holder)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 82,
        "startColumnNumber" : 39,
        "endLineNumber" : 82,
        "endColumnNumber" : 121
      },
      "nodeContext" : "(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 82,
        "startColumnNumber" : 24,
        "endLineNumber" : 82,
        "endColumnNumber" : 121
      },
      "nodeContext" : "methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 82,
        "startColumnNumber" : 2,
        "endLineNumber" : 82,
        "endColumnNumber" : 122
      },
      "nodeContext" : "TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 53,
        "startColumnNumber" : 82,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void generateRestTemplateCallBlock(MethodProcessorHolder methodHolder){\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 82,
        "startColumnNumber" : 2,
        "endLineNumber" : 82,
        "endColumnNumber" : 122
      },
      "nodeContext" : "TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.JMethod"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 67,
    "startColumnNumber" : 2,
    "endLineNumber" : 67,
    "endColumnNumber" : 8
  }, {
    "charLength" : 6,
    "startLineNumber" : 69,
    "startColumnNumber" : 16,
    "endLineNumber" : 69,
    "endColumnNumber" : 22
  }, {
    "charLength" : 6,
    "startLineNumber" : 82,
    "startColumnNumber" : 87,
    "endLineNumber" : 82,
    "endColumnNumber" : 93
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}