{
  "id" : 368,
  "expression" : "wc",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/test/src/test/java/hudson/AbstractItemSecurity1114Test.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "wc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 41,
      "startColumnNumber" : 12,
      "endLineNumber" : 41,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 41,
        "startColumnNumber" : 12,
        "endLineNumber" : 41,
        "endColumnNumber" : 39
      },
      "nodeContext" : "wc.goTo(\"bypass/myproject\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 41,
        "startColumnNumber" : 12,
        "endLineNumber" : 41,
        "endColumnNumber" : 40
      },
      "nodeContext" : "wc.goTo(\"bypass/myproject\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 40,
        "startColumnNumber" : 12,
        "endLineNumber" : 43,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  wc.goTo(\"bypass/myproject\");\n  Assert.fail(\"expected exception\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  wc.goTo(\"bypass/myproject\");\n  Assert.fail(\"expected exception\");\n}\n catch (FailingHttpStatusCodeException e) {\n  Assert.assertEquals(\"alice can discover\",403,e.getStatusCode());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 28,
        "startColumnNumber" : 46,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n  MockAuthorizationStrategy authorizationStrategy=new MockAuthorizationStrategy();\n  authorizationStrategy.grant(Jenkins.READ).onRoot().toEveryone();\n  authorizationStrategy.grant(Item.DISCOVER).everywhere().to(\"alice\");\n  authorizationStrategy.grant(Item.READ).everywhere().to(\"bob\");\n  j.jenkins.setAuthorizationStrategy(authorizationStrategy);\n  j.createFreeStyleProject(\"myproject\");\n  JenkinsRule.WebClient wc=j.createWebClient().login(\"alice\");\n  try {\n    wc.goTo(\"bypass/myproject\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"alice can discover\",403,e.getStatusCode());\n  }\n  wc=j.createWebClient().login(\"bob\");\n  wc.goTo(\"bypass/myproject\");\n  wc=j.createWebClient().login(\"carol\");\n  try {\n    wc.goTo(\"bypass/nonexisting\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"carol gets 404 for nonexisting project\",404,e.getStatusCode());\n  }\n  try {\n    wc.goTo(\"bypass/myproject\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"carol gets 404 for invisible project\",404,e.getStatusCode());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1749,
        "startLineNumber" : 25,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Issue(\"SECURITY-1114\") @For(AbstractItem.class) public void testAccess() throws Exception {\n  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n  MockAuthorizationStrategy authorizationStrategy=new MockAuthorizationStrategy();\n  authorizationStrategy.grant(Jenkins.READ).onRoot().toEveryone();\n  authorizationStrategy.grant(Item.DISCOVER).everywhere().to(\"alice\");\n  authorizationStrategy.grant(Item.READ).everywhere().to(\"bob\");\n  j.jenkins.setAuthorizationStrategy(authorizationStrategy);\n  j.createFreeStyleProject(\"myproject\");\n  JenkinsRule.WebClient wc=j.createWebClient().login(\"alice\");\n  try {\n    wc.goTo(\"bypass/myproject\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"alice can discover\",403,e.getStatusCode());\n  }\n  wc=j.createWebClient().login(\"bob\");\n  wc.goTo(\"bypass/myproject\");\n  wc=j.createWebClient().login(\"carol\");\n  try {\n    wc.goTo(\"bypass/nonexisting\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"carol gets 404 for nonexisting project\",404,e.getStatusCode());\n  }\n  try {\n    wc.goTo(\"bypass/myproject\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"carol gets 404 for invisible project\",404,e.getStatusCode());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 198,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 41,
        "startColumnNumber" : 12,
        "endLineNumber" : 41,
        "endColumnNumber" : 40
      },
      "nodeContext" : "wc.goTo(\"bypass/myproject\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "JenkinsRule.WebClient"
  }, {
    "nodeContext" : "wc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 49,
      "startColumnNumber" : 8,
      "endLineNumber" : 49,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 35
      },
      "nodeContext" : "wc.goTo(\"bypass/myproject\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 36
      },
      "nodeContext" : "wc.goTo(\"bypass/myproject\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 28,
        "startColumnNumber" : 46,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n  MockAuthorizationStrategy authorizationStrategy=new MockAuthorizationStrategy();\n  authorizationStrategy.grant(Jenkins.READ).onRoot().toEveryone();\n  authorizationStrategy.grant(Item.DISCOVER).everywhere().to(\"alice\");\n  authorizationStrategy.grant(Item.READ).everywhere().to(\"bob\");\n  j.jenkins.setAuthorizationStrategy(authorizationStrategy);\n  j.createFreeStyleProject(\"myproject\");\n  JenkinsRule.WebClient wc=j.createWebClient().login(\"alice\");\n  try {\n    wc.goTo(\"bypass/myproject\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"alice can discover\",403,e.getStatusCode());\n  }\n  wc=j.createWebClient().login(\"bob\");\n  wc.goTo(\"bypass/myproject\");\n  wc=j.createWebClient().login(\"carol\");\n  try {\n    wc.goTo(\"bypass/nonexisting\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"carol gets 404 for nonexisting project\",404,e.getStatusCode());\n  }\n  try {\n    wc.goTo(\"bypass/myproject\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"carol gets 404 for invisible project\",404,e.getStatusCode());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1749,
        "startLineNumber" : 25,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Issue(\"SECURITY-1114\") @For(AbstractItem.class) public void testAccess() throws Exception {\n  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n  MockAuthorizationStrategy authorizationStrategy=new MockAuthorizationStrategy();\n  authorizationStrategy.grant(Jenkins.READ).onRoot().toEveryone();\n  authorizationStrategy.grant(Item.DISCOVER).everywhere().to(\"alice\");\n  authorizationStrategy.grant(Item.READ).everywhere().to(\"bob\");\n  j.jenkins.setAuthorizationStrategy(authorizationStrategy);\n  j.createFreeStyleProject(\"myproject\");\n  JenkinsRule.WebClient wc=j.createWebClient().login(\"alice\");\n  try {\n    wc.goTo(\"bypass/myproject\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"alice can discover\",403,e.getStatusCode());\n  }\n  wc=j.createWebClient().login(\"bob\");\n  wc.goTo(\"bypass/myproject\");\n  wc=j.createWebClient().login(\"carol\");\n  try {\n    wc.goTo(\"bypass/nonexisting\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"carol gets 404 for nonexisting project\",404,e.getStatusCode());\n  }\n  try {\n    wc.goTo(\"bypass/myproject\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"carol gets 404 for invisible project\",404,e.getStatusCode());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 198,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 36
      },
      "nodeContext" : "wc.goTo(\"bypass/myproject\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "JenkinsRule.WebClient"
  }, {
    "nodeContext" : "wc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 55,
      "startColumnNumber" : 12,
      "endLineNumber" : 55,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 41
      },
      "nodeContext" : "wc.goTo(\"bypass/nonexisting\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 42
      },
      "nodeContext" : "wc.goTo(\"bypass/nonexisting\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  wc.goTo(\"bypass/nonexisting\");\n  Assert.fail(\"expected exception\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 262,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  wc.goTo(\"bypass/nonexisting\");\n  Assert.fail(\"expected exception\");\n}\n catch (FailingHttpStatusCodeException e) {\n  Assert.assertEquals(\"carol gets 404 for nonexisting project\",404,e.getStatusCode());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 28,
        "startColumnNumber" : 46,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n  MockAuthorizationStrategy authorizationStrategy=new MockAuthorizationStrategy();\n  authorizationStrategy.grant(Jenkins.READ).onRoot().toEveryone();\n  authorizationStrategy.grant(Item.DISCOVER).everywhere().to(\"alice\");\n  authorizationStrategy.grant(Item.READ).everywhere().to(\"bob\");\n  j.jenkins.setAuthorizationStrategy(authorizationStrategy);\n  j.createFreeStyleProject(\"myproject\");\n  JenkinsRule.WebClient wc=j.createWebClient().login(\"alice\");\n  try {\n    wc.goTo(\"bypass/myproject\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"alice can discover\",403,e.getStatusCode());\n  }\n  wc=j.createWebClient().login(\"bob\");\n  wc.goTo(\"bypass/myproject\");\n  wc=j.createWebClient().login(\"carol\");\n  try {\n    wc.goTo(\"bypass/nonexisting\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"carol gets 404 for nonexisting project\",404,e.getStatusCode());\n  }\n  try {\n    wc.goTo(\"bypass/myproject\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"carol gets 404 for invisible project\",404,e.getStatusCode());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1749,
        "startLineNumber" : 25,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Issue(\"SECURITY-1114\") @For(AbstractItem.class) public void testAccess() throws Exception {\n  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n  MockAuthorizationStrategy authorizationStrategy=new MockAuthorizationStrategy();\n  authorizationStrategy.grant(Jenkins.READ).onRoot().toEveryone();\n  authorizationStrategy.grant(Item.DISCOVER).everywhere().to(\"alice\");\n  authorizationStrategy.grant(Item.READ).everywhere().to(\"bob\");\n  j.jenkins.setAuthorizationStrategy(authorizationStrategy);\n  j.createFreeStyleProject(\"myproject\");\n  JenkinsRule.WebClient wc=j.createWebClient().login(\"alice\");\n  try {\n    wc.goTo(\"bypass/myproject\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"alice can discover\",403,e.getStatusCode());\n  }\n  wc=j.createWebClient().login(\"bob\");\n  wc.goTo(\"bypass/myproject\");\n  wc=j.createWebClient().login(\"carol\");\n  try {\n    wc.goTo(\"bypass/nonexisting\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"carol gets 404 for nonexisting project\",404,e.getStatusCode());\n  }\n  try {\n    wc.goTo(\"bypass/myproject\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"carol gets 404 for invisible project\",404,e.getStatusCode());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 198,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 42
      },
      "nodeContext" : "wc.goTo(\"bypass/nonexisting\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "JenkinsRule.WebClient"
  }, {
    "nodeContext" : "wc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 61,
      "startColumnNumber" : 12,
      "endLineNumber" : 61,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 39
      },
      "nodeContext" : "wc.goTo(\"bypass/myproject\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 40
      },
      "nodeContext" : "wc.goTo(\"bypass/myproject\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  wc.goTo(\"bypass/myproject\");\n  Assert.fail(\"expected exception\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  wc.goTo(\"bypass/myproject\");\n  Assert.fail(\"expected exception\");\n}\n catch (FailingHttpStatusCodeException e) {\n  Assert.assertEquals(\"carol gets 404 for invisible project\",404,e.getStatusCode());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 28,
        "startColumnNumber" : 46,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n  MockAuthorizationStrategy authorizationStrategy=new MockAuthorizationStrategy();\n  authorizationStrategy.grant(Jenkins.READ).onRoot().toEveryone();\n  authorizationStrategy.grant(Item.DISCOVER).everywhere().to(\"alice\");\n  authorizationStrategy.grant(Item.READ).everywhere().to(\"bob\");\n  j.jenkins.setAuthorizationStrategy(authorizationStrategy);\n  j.createFreeStyleProject(\"myproject\");\n  JenkinsRule.WebClient wc=j.createWebClient().login(\"alice\");\n  try {\n    wc.goTo(\"bypass/myproject\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"alice can discover\",403,e.getStatusCode());\n  }\n  wc=j.createWebClient().login(\"bob\");\n  wc.goTo(\"bypass/myproject\");\n  wc=j.createWebClient().login(\"carol\");\n  try {\n    wc.goTo(\"bypass/nonexisting\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"carol gets 404 for nonexisting project\",404,e.getStatusCode());\n  }\n  try {\n    wc.goTo(\"bypass/myproject\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"carol gets 404 for invisible project\",404,e.getStatusCode());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1749,
        "startLineNumber" : 25,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Issue(\"SECURITY-1114\") @For(AbstractItem.class) public void testAccess() throws Exception {\n  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n  MockAuthorizationStrategy authorizationStrategy=new MockAuthorizationStrategy();\n  authorizationStrategy.grant(Jenkins.READ).onRoot().toEveryone();\n  authorizationStrategy.grant(Item.DISCOVER).everywhere().to(\"alice\");\n  authorizationStrategy.grant(Item.READ).everywhere().to(\"bob\");\n  j.jenkins.setAuthorizationStrategy(authorizationStrategy);\n  j.createFreeStyleProject(\"myproject\");\n  JenkinsRule.WebClient wc=j.createWebClient().login(\"alice\");\n  try {\n    wc.goTo(\"bypass/myproject\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"alice can discover\",403,e.getStatusCode());\n  }\n  wc=j.createWebClient().login(\"bob\");\n  wc.goTo(\"bypass/myproject\");\n  wc=j.createWebClient().login(\"carol\");\n  try {\n    wc.goTo(\"bypass/nonexisting\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"carol gets 404 for nonexisting project\",404,e.getStatusCode());\n  }\n  try {\n    wc.goTo(\"bypass/myproject\");\n    Assert.fail(\"expected exception\");\n  }\n catch (  FailingHttpStatusCodeException e) {\n    Assert.assertEquals(\"carol gets 404 for invisible project\",404,e.getStatusCode());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 198,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 40
      },
      "nodeContext" : "wc.goTo(\"bypass/myproject\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "JenkinsRule.WebClient"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 41,
    "startColumnNumber" : 12,
    "endLineNumber" : 41,
    "endColumnNumber" : 14
  }, {
    "charLength" : 2,
    "startLineNumber" : 49,
    "startColumnNumber" : 8,
    "endLineNumber" : 49,
    "endColumnNumber" : 10
  }, {
    "charLength" : 2,
    "startLineNumber" : 55,
    "startColumnNumber" : 12,
    "endLineNumber" : 55,
    "endColumnNumber" : 14
  }, {
    "charLength" : 2,
    "startLineNumber" : 61,
    "startColumnNumber" : 12,
    "endLineNumber" : 61,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}