{
  "id" : 292,
  "expression" : "\"\\r\\n\"",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/src/org/openqa/selenium/remote/codec/w3c/W3CHttpResponseCodec.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"\\r\\n\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 153,
      "startColumnNumber" : 63,
      "endLineNumber" : 153,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 153,
        "startColumnNumber" : 24,
        "endLineNumber" : 153,
        "endColumnNumber" : 76
      },
      "nodeContext" : "((String)response.getValue()).replace(\"\\r\\n\",\"\\n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 153,
        "startColumnNumber" : 6,
        "endLineNumber" : 153,
        "endColumnNumber" : 77
      },
      "nodeContext" : "response.setValue(((String)response.getValue()).replace(\"\\r\\n\",\"\\n\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 153,
        "startColumnNumber" : 6,
        "endLineNumber" : 153,
        "endColumnNumber" : 78
      },
      "nodeContext" : "response.setValue(((String)response.getValue()).replace(\"\\r\\n\",\"\\n\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 284,
        "startLineNumber" : 149,
        "startColumnNumber" : 47,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  response.setValue(((String)response.getValue()).replace(\"\\r\\n\",\"\\n\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 327,
        "startLineNumber" : 149,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (response.getValue() instanceof String) {\n  response.setValue(((String)response.getValue()).replace(\"\\r\\n\",\"\\n\"));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3036,
        "startLineNumber" : 76,
        "startColumnNumber" : 55,
        "endLineNumber" : 157,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String content=string(encodedResponse).trim();\n  log.fine(String.format(\"Decoding response. Response code was: %d and content: %s\",encodedResponse.getStatus(),content));\n  String contentType=nullToEmpty(encodedResponse.getHeader(CONTENT_TYPE));\n  Response response=new Response();\n  if (HTTP_OK != encodedResponse.getStatus()) {\n    log.fine(\"Processing an error\");\n    if (HTTP_BAD_METHOD == encodedResponse.getStatus()) {\n      response.setStatus(ErrorCodes.UNKNOWN_COMMAND);\n      response.setValue(content);\n    }\n else {\n      Map<String,Object> obj=json.toType(content,MAP_TYPE);\n      Object w3cWrappedValue=obj.get(\"value\");\n      if (w3cWrappedValue instanceof Map && ((Map<?,?>)w3cWrappedValue).containsKey(\"error\")) {\n        obj=(Map<String,Object>)w3cWrappedValue;\n      }\n      String message=\"An unknown error has occurred\";\n      if (obj.get(\"message\") instanceof String) {\n        message=(String)obj.get(\"message\");\n      }\n      String error=\"unknown error\";\n      if (obj.get(\"error\") instanceof String) {\n        error=(String)obj.get(\"error\");\n      }\n      response.setState(error);\n      response.setStatus(errorCodes.toStatus(error,Optional.of(encodedResponse.getStatus())));\n      if (\"unexpected alert open\".equals(error) && HTTP_INTERNAL_ERROR == encodedResponse.getStatus()) {\n        String text=\"\";\n        Object data=obj.get(\"data\");\n        if (data != null) {\n          Object rawText=((Map<?,?>)data).get(\"text\");\n          if (rawText instanceof String) {\n            text=(String)rawText;\n          }\n        }\n        response.setValue(new UnhandledAlertException(message,text));\n      }\n else {\n        response.setValue(createException(error,message));\n      }\n    }\n    return response;\n  }\n  response.setState(\"success\");\n  response.setStatus(ErrorCodes.SUCCESS);\n  if (!content.isEmpty()) {\n    if (contentType.startsWith(\"application/json\")) {\n      Map<String,Object> parsed=json.toType(content,MAP_TYPE);\n      if (parsed.containsKey(\"value\")) {\n        Object value=parsed.get(\"value\");\n        response.setValue(value);\n      }\n else {\n        response.setValue(json.toType(content,OBJECT_TYPE));\n      }\n    }\n  }\n  if (response.getValue() instanceof String) {\n    response.setValue(((String)response.getValue()).replace(\"\\r\\n\",\"\\n\"));\n  }\n  return response;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3101,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 157,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Response decode(HttpResponse encodedResponse){\n  String content=string(encodedResponse).trim();\n  log.fine(String.format(\"Decoding response. Response code was: %d and content: %s\",encodedResponse.getStatus(),content));\n  String contentType=nullToEmpty(encodedResponse.getHeader(CONTENT_TYPE));\n  Response response=new Response();\n  if (HTTP_OK != encodedResponse.getStatus()) {\n    log.fine(\"Processing an error\");\n    if (HTTP_BAD_METHOD == encodedResponse.getStatus()) {\n      response.setStatus(ErrorCodes.UNKNOWN_COMMAND);\n      response.setValue(content);\n    }\n else {\n      Map<String,Object> obj=json.toType(content,MAP_TYPE);\n      Object w3cWrappedValue=obj.get(\"value\");\n      if (w3cWrappedValue instanceof Map && ((Map<?,?>)w3cWrappedValue).containsKey(\"error\")) {\n        obj=(Map<String,Object>)w3cWrappedValue;\n      }\n      String message=\"An unknown error has occurred\";\n      if (obj.get(\"message\") instanceof String) {\n        message=(String)obj.get(\"message\");\n      }\n      String error=\"unknown error\";\n      if (obj.get(\"error\") instanceof String) {\n        error=(String)obj.get(\"error\");\n      }\n      response.setState(error);\n      response.setStatus(errorCodes.toStatus(error,Optional.of(encodedResponse.getStatus())));\n      if (\"unexpected alert open\".equals(error) && HTTP_INTERNAL_ERROR == encodedResponse.getStatus()) {\n        String text=\"\";\n        Object data=obj.get(\"data\");\n        if (data != null) {\n          Object rawText=((Map<?,?>)data).get(\"text\");\n          if (rawText instanceof String) {\n            text=(String)rawText;\n          }\n        }\n        response.setValue(new UnhandledAlertException(message,text));\n      }\n else {\n        response.setValue(createException(error,message));\n      }\n    }\n    return response;\n  }\n  response.setState(\"success\");\n  response.setStatus(ErrorCodes.SUCCESS);\n  if (!content.isEmpty()) {\n    if (contentType.startsWith(\"application/json\")) {\n      Map<String,Object> parsed=json.toType(content,MAP_TYPE);\n      if (parsed.containsKey(\"value\")) {\n        Object value=parsed.get(\"value\");\n        response.setValue(value);\n      }\n else {\n        response.setValue(json.toType(content,OBJECT_TYPE));\n      }\n    }\n  }\n  if (response.getValue() instanceof String) {\n    response.setValue(((String)response.getValue()).replace(\"\\r\\n\",\"\\n\"));\n  }\n  return response;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 383,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 153,
        "startColumnNumber" : 6,
        "endLineNumber" : 153,
        "endColumnNumber" : 78
      },
      "nodeContext" : "response.setValue(((String)response.getValue()).replace(\"\\r\\n\",\"\\n\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 153,
    "startColumnNumber" : 63,
    "endLineNumber" : 153,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ ]
}