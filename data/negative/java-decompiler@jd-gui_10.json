{
  "id" : 10,
  "expression" : "dimensionLength-- > 0",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "/services/src/main/java/org/jd/gui/service/type/AbstractTypeFactoryProvider.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "dimensionLength-- > 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 178,
      "startColumnNumber" : 23,
      "endLineNumber" : 178,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 178,
        "startColumnNumber" : 16,
        "endLineNumber" : 179,
        "endColumnNumber" : 36
      },
      "nodeContext" : "while (dimensionLength-- > 0) sb.append(\"[]\");\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 177,
        "startColumnNumber" : 19,
        "endLineNumber" : 180,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  while (dimensionLength-- > 0)   sb.append(\"[]\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 171,
        "startColumnNumber" : 12,
        "endLineNumber" : 180,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (varargsFlag) {\n  if (dimensionLength > 0) {\n    while (--dimensionLength > 0)     sb.append(\"[]\");\n    sb.append(\"...\");\n  }\n}\n else {\n  while (dimensionLength-- > 0)   sb.append(\"[]\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 81,
        "startColumnNumber" : 21,
        "endLineNumber" : 186,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int dimensionLength=0;\n  if (descriptor.charAt(index) == '[') {\n    dimensionLength++;\n    while (++index < length) {\n      if ((descriptor.charAt(index) == 'L') && (index + 1 < length) && (descriptor.charAt(index + 1) == '[')) {\n        index++;\n        length--;\n        dimensionLength++;\n      }\n else       if (descriptor.charAt(index) == '[') {\n        dimensionLength++;\n      }\n else {\n        break;\n      }\n    }\n  }\nswitch (descriptor.charAt(index)) {\ncase 'B':    sb.append(\"byte\");\n  index++;\nbreak;\ncase 'C':sb.append(\"char\");\nindex++;\nbreak;\ncase 'D':sb.append(\"double\");\nindex++;\nbreak;\ncase 'F':sb.append(\"float\");\nindex++;\nbreak;\ncase 'I':sb.append(\"int\");\nindex++;\nbreak;\ncase 'J':sb.append(\"long\");\nindex++;\nbreak;\ncase 'L':case '.':int beginIndex=++index;\nchar c='.';\nwhile (index < length) {\nc=descriptor.charAt(index);\nif ((c == ';') || (c == '<')) break;\nindex++;\n}\nString internalClassName=descriptor.substring(beginIndex,index);\nint lastPackageSeparatorIndex=internalClassName.lastIndexOf('/');\nif (lastPackageSeparatorIndex >= 0) {\ninternalClassName=internalClassName.substring(lastPackageSeparatorIndex + 1);\n}\nsb.append(internalClassName.replace('$','.'));\nif (c == '<') {\nsb.append('<');\nindex=writeSignature(sb,descriptor,length,index + 1,false);\nwhile (descriptor.charAt(index) != '>') {\nsb.append(\", \");\nindex=writeSignature(sb,descriptor,length,index,false);\n}\nsb.append('>');\nindex++;\n}\nif (descriptor.charAt(index) == ';') index++;\nbreak;\ncase 'S':sb.append(\"short\");\nindex++;\nbreak;\ncase 'T':beginIndex=++index;\nindex=descriptor.substring(beginIndex,length).indexOf(';');\nsb.append(descriptor.substring(beginIndex,index));\nindex++;\nbreak;\ncase 'V':sb.append(\"void\");\nindex++;\nbreak;\ncase 'Z':sb.append(\"boolean\");\nindex++;\nbreak;\ncase '-':sb.append(\"? super \");\nindex=writeSignature(sb,descriptor,length,index + 1,false);\nbreak;\ncase '+':sb.append(\"? extends \");\nindex=writeSignature(sb,descriptor,length,index + 1,false);\nbreak;\ncase '*':sb.append('?');\nindex++;\nbreak;\ncase 'X':case 'Y':sb.append(\"int\");\nindex++;\nbreak;\ndefault:throw new RuntimeException(\"SignatureWriter.WriteSignature: invalid signature '\" + descriptor + \"'\");\n}\nif (varargsFlag) {\nif (dimensionLength > 0) {\nwhile (--dimensionLength > 0) sb.append(\"[]\");\nsb.append(\"...\");\n}\n}\n else {\nwhile (dimensionLength-- > 0) sb.append(\"[]\");\n}\nif ((index >= length) || (descriptor.charAt(index) != '.')) break;\nsb.append('.');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 477,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4346,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 186,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  int dimensionLength=0;\n  if (descriptor.charAt(index) == '[') {\n    dimensionLength++;\n    while (++index < length) {\n      if ((descriptor.charAt(index) == 'L') && (index + 1 < length) && (descriptor.charAt(index + 1) == '[')) {\n        index++;\n        length--;\n        dimensionLength++;\n      }\n else       if (descriptor.charAt(index) == '[') {\n        dimensionLength++;\n      }\n else {\n        break;\n      }\n    }\n  }\nswitch (descriptor.charAt(index)) {\ncase 'B':    sb.append(\"byte\");\n  index++;\nbreak;\ncase 'C':sb.append(\"char\");\nindex++;\nbreak;\ncase 'D':sb.append(\"double\");\nindex++;\nbreak;\ncase 'F':sb.append(\"float\");\nindex++;\nbreak;\ncase 'I':sb.append(\"int\");\nindex++;\nbreak;\ncase 'J':sb.append(\"long\");\nindex++;\nbreak;\ncase 'L':case '.':int beginIndex=++index;\nchar c='.';\nwhile (index < length) {\nc=descriptor.charAt(index);\nif ((c == ';') || (c == '<')) break;\nindex++;\n}\nString internalClassName=descriptor.substring(beginIndex,index);\nint lastPackageSeparatorIndex=internalClassName.lastIndexOf('/');\nif (lastPackageSeparatorIndex >= 0) {\ninternalClassName=internalClassName.substring(lastPackageSeparatorIndex + 1);\n}\nsb.append(internalClassName.replace('$','.'));\nif (c == '<') {\nsb.append('<');\nindex=writeSignature(sb,descriptor,length,index + 1,false);\nwhile (descriptor.charAt(index) != '>') {\nsb.append(\", \");\nindex=writeSignature(sb,descriptor,length,index,false);\n}\nsb.append('>');\nindex++;\n}\nif (descriptor.charAt(index) == ';') index++;\nbreak;\ncase 'S':sb.append(\"short\");\nindex++;\nbreak;\ncase 'T':beginIndex=++index;\nindex=descriptor.substring(beginIndex,length).indexOf(';');\nsb.append(descriptor.substring(beginIndex,index));\nindex++;\nbreak;\ncase 'V':sb.append(\"void\");\nindex++;\nbreak;\ncase 'Z':sb.append(\"boolean\");\nindex++;\nbreak;\ncase '-':sb.append(\"? super \");\nindex=writeSignature(sb,descriptor,length,index + 1,false);\nbreak;\ncase '+':sb.append(\"? extends \");\nindex=writeSignature(sb,descriptor,length,index + 1,false);\nbreak;\ncase '*':sb.append('?');\nindex++;\nbreak;\ncase 'X':case 'Y':sb.append(\"int\");\nindex++;\nbreak;\ndefault:throw new RuntimeException(\"SignatureWriter.WriteSignature: invalid signature '\" + descriptor + \"'\");\n}\nif (varargsFlag) {\nif (dimensionLength > 0) {\nwhile (--dimensionLength > 0) sb.append(\"[]\");\nsb.append(\"...\");\n}\n}\n else {\nwhile (dimensionLength-- > 0) sb.append(\"[]\");\n}\nif ((index >= length) || (descriptor.charAt(index) != '.')) break;\nsb.append('.');\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 479,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4389,
        "startLineNumber" : 80,
        "startColumnNumber" : 122,
        "endLineNumber" : 189,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  while (true) {\n    int dimensionLength=0;\n    if (descriptor.charAt(index) == '[') {\n      dimensionLength++;\n      while (++index < length) {\n        if ((descriptor.charAt(index) == 'L') && (index + 1 < length) && (descriptor.charAt(index + 1) == '[')) {\n          index++;\n          length--;\n          dimensionLength++;\n        }\n else         if (descriptor.charAt(index) == '[') {\n          dimensionLength++;\n        }\n else {\n          break;\n        }\n      }\n    }\nswitch (descriptor.charAt(index)) {\ncase 'B':      sb.append(\"byte\");\n    index++;\n  break;\ncase 'C':sb.append(\"char\");\nindex++;\nbreak;\ncase 'D':sb.append(\"double\");\nindex++;\nbreak;\ncase 'F':sb.append(\"float\");\nindex++;\nbreak;\ncase 'I':sb.append(\"int\");\nindex++;\nbreak;\ncase 'J':sb.append(\"long\");\nindex++;\nbreak;\ncase 'L':case '.':int beginIndex=++index;\nchar c='.';\nwhile (index < length) {\nc=descriptor.charAt(index);\nif ((c == ';') || (c == '<')) break;\nindex++;\n}\nString internalClassName=descriptor.substring(beginIndex,index);\nint lastPackageSeparatorIndex=internalClassName.lastIndexOf('/');\nif (lastPackageSeparatorIndex >= 0) {\ninternalClassName=internalClassName.substring(lastPackageSeparatorIndex + 1);\n}\nsb.append(internalClassName.replace('$','.'));\nif (c == '<') {\nsb.append('<');\nindex=writeSignature(sb,descriptor,length,index + 1,false);\nwhile (descriptor.charAt(index) != '>') {\nsb.append(\", \");\nindex=writeSignature(sb,descriptor,length,index,false);\n}\nsb.append('>');\nindex++;\n}\nif (descriptor.charAt(index) == ';') index++;\nbreak;\ncase 'S':sb.append(\"short\");\nindex++;\nbreak;\ncase 'T':beginIndex=++index;\nindex=descriptor.substring(beginIndex,length).indexOf(';');\nsb.append(descriptor.substring(beginIndex,index));\nindex++;\nbreak;\ncase 'V':sb.append(\"void\");\nindex++;\nbreak;\ncase 'Z':sb.append(\"boolean\");\nindex++;\nbreak;\ncase '-':sb.append(\"? super \");\nindex=writeSignature(sb,descriptor,length,index + 1,false);\nbreak;\ncase '+':sb.append(\"? extends \");\nindex=writeSignature(sb,descriptor,length,index + 1,false);\nbreak;\ncase '*':sb.append('?');\nindex++;\nbreak;\ncase 'X':case 'Y':sb.append(\"int\");\nindex++;\nbreak;\ndefault:throw new RuntimeException(\"SignatureWriter.WriteSignature: invalid signature '\" + descriptor + \"'\");\n}\nif (varargsFlag) {\nif (dimensionLength > 0) {\nwhile (--dimensionLength > 0) sb.append(\"[]\");\nsb.append(\"...\");\n}\n}\n else {\nwhile (dimensionLength-- > 0) sb.append(\"[]\");\n}\nif ((index >= length) || (descriptor.charAt(index) != '.')) break;\nsb.append('.');\n}\nreturn index;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 482,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4507,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected static int writeSignature(StringBuilder sb,String descriptor,int length,int index,boolean varargsFlag){\n  while (true) {\n    int dimensionLength=0;\n    if (descriptor.charAt(index) == '[') {\n      dimensionLength++;\n      while (++index < length) {\n        if ((descriptor.charAt(index) == 'L') && (index + 1 < length) && (descriptor.charAt(index + 1) == '[')) {\n          index++;\n          length--;\n          dimensionLength++;\n        }\n else         if (descriptor.charAt(index) == '[') {\n          dimensionLength++;\n        }\n else {\n          break;\n        }\n      }\n    }\nswitch (descriptor.charAt(index)) {\ncase 'B':      sb.append(\"byte\");\n    index++;\n  break;\ncase 'C':sb.append(\"char\");\nindex++;\nbreak;\ncase 'D':sb.append(\"double\");\nindex++;\nbreak;\ncase 'F':sb.append(\"float\");\nindex++;\nbreak;\ncase 'I':sb.append(\"int\");\nindex++;\nbreak;\ncase 'J':sb.append(\"long\");\nindex++;\nbreak;\ncase 'L':case '.':int beginIndex=++index;\nchar c='.';\nwhile (index < length) {\nc=descriptor.charAt(index);\nif ((c == ';') || (c == '<')) break;\nindex++;\n}\nString internalClassName=descriptor.substring(beginIndex,index);\nint lastPackageSeparatorIndex=internalClassName.lastIndexOf('/');\nif (lastPackageSeparatorIndex >= 0) {\ninternalClassName=internalClassName.substring(lastPackageSeparatorIndex + 1);\n}\nsb.append(internalClassName.replace('$','.'));\nif (c == '<') {\nsb.append('<');\nindex=writeSignature(sb,descriptor,length,index + 1,false);\nwhile (descriptor.charAt(index) != '>') {\nsb.append(\", \");\nindex=writeSignature(sb,descriptor,length,index,false);\n}\nsb.append('>');\nindex++;\n}\nif (descriptor.charAt(index) == ';') index++;\nbreak;\ncase 'S':sb.append(\"short\");\nindex++;\nbreak;\ncase 'T':beginIndex=++index;\nindex=descriptor.substring(beginIndex,length).indexOf(';');\nsb.append(descriptor.substring(beginIndex,index));\nindex++;\nbreak;\ncase 'V':sb.append(\"void\");\nindex++;\nbreak;\ncase 'Z':sb.append(\"boolean\");\nindex++;\nbreak;\ncase '-':sb.append(\"? super \");\nindex=writeSignature(sb,descriptor,length,index + 1,false);\nbreak;\ncase '+':sb.append(\"? extends \");\nindex=writeSignature(sb,descriptor,length,index + 1,false);\nbreak;\ncase '*':sb.append('?');\nindex++;\nbreak;\ncase 'X':case 'Y':sb.append(\"int\");\nindex++;\nbreak;\ndefault:throw new RuntimeException(\"SignatureWriter.WriteSignature: invalid signature '\" + descriptor + \"'\");\n}\nif (varargsFlag) {\nif (dimensionLength > 0) {\nwhile (--dimensionLength > 0) sb.append(\"[]\");\nsb.append(\"...\");\n}\n}\n else {\nwhile (dimensionLength-- > 0) sb.append(\"[]\");\n}\nif ((index >= length) || (descriptor.charAt(index) != '.')) break;\nsb.append('.');\n}\nreturn index;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 504,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 178,
        "startColumnNumber" : 16,
        "endLineNumber" : 179,
        "endColumnNumber" : 36
      },
      "nodeContext" : "while (dimensionLength-- > 0) sb.append(\"[]\");\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 178,
    "startColumnNumber" : 23,
    "endLineNumber" : 178,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}