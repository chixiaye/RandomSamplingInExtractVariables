{
  "id" : 169,
  "expression" : "Flux",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/main/java/org/redisson/reactive/RedissonTransferQueueReactive.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Flux",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 46,
      "startColumnNumber" : 15,
      "endLineNumber" : 46,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 1607,
        "startLineNumber" : 46,
        "startColumnNumber" : 15,
        "endLineNumber" : 89,
        "endColumnNumber" : 10
      },
      "nodeContext" : "Flux.create(new Consumer<FluxSink<V>>(){\n  @Override public void accept(  FluxSink<V> emitter){\n    emitter.onRequest(new LongConsumer(){\n      int currentIndex=0;\n      @Override public void accept(      long value){\n        onRequest(true,emitter,value);\n      }\n      protected void onRequest(      boolean forward,      FluxSink<V> emitter,      long n){\n        queue.getValueAsync(currentIndex).onComplete((value,e) -> {\n          if (e != null) {\n            emitter.error(e);\n            return;\n          }\n          if (value != null) {\n            emitter.next(value);\n            if (forward) {\n              currentIndex++;\n            }\n else {\n              currentIndex--;\n            }\n          }\n          if (value == null) {\n            emitter.complete();\n            return;\n          }\n          if (n - 1 == 0) {\n            return;\n          }\n          onRequest(forward,emitter,n - 1);\n        }\n);\n      }\n    }\n);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 144,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1615,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 11
      },
      "nodeContext" : "return Flux.create(new Consumer<FluxSink<V>>(){\n  @Override public void accept(  FluxSink<V> emitter){\n    emitter.onRequest(new LongConsumer(){\n      int currentIndex=0;\n      @Override public void accept(      long value){\n        onRequest(true,emitter,value);\n      }\n      protected void onRequest(      boolean forward,      FluxSink<V> emitter,      long n){\n        queue.getValueAsync(currentIndex).onComplete((value,e) -> {\n          if (e != null) {\n            emitter.error(e);\n            return;\n          }\n          if (value != null) {\n            emitter.next(value);\n            if (forward) {\n              currentIndex++;\n            }\n else {\n              currentIndex--;\n            }\n          }\n          if (value == null) {\n            emitter.complete();\n            return;\n          }\n          if (n - 1 == 0) {\n            return;\n          }\n          onRequest(forward,emitter,n - 1);\n        }\n);\n      }\n    }\n);\n  }\n}\n);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 145,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1631,
        "startLineNumber" : 45,
        "startColumnNumber" : 35,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return Flux.create(new Consumer<FluxSink<V>>(){\n    @Override public void accept(    FluxSink<V> emitter){\n      emitter.onRequest(new LongConsumer(){\n        int currentIndex=0;\n        @Override public void accept(        long value){\n          onRequest(true,emitter,value);\n        }\n        protected void onRequest(        boolean forward,        FluxSink<V> emitter,        long n){\n          queue.getValueAsync(currentIndex).onComplete((value,e) -> {\n            if (e != null) {\n              emitter.error(e);\n              return;\n            }\n            if (value != null) {\n              emitter.next(value);\n              if (forward) {\n                currentIndex++;\n              }\n else {\n                currentIndex--;\n              }\n            }\n            if (value == null) {\n              emitter.complete();\n              return;\n            }\n            if (n - 1 == 0) {\n              return;\n            }\n            onRequest(forward,emitter,n - 1);\n          }\n);\n        }\n      }\n);\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1662,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Publisher<V> iterator(){\n  return Flux.create(new Consumer<FluxSink<V>>(){\n    @Override public void accept(    FluxSink<V> emitter){\n      emitter.onRequest(new LongConsumer(){\n        int currentIndex=0;\n        @Override public void accept(        long value){\n          onRequest(true,emitter,value);\n        }\n        protected void onRequest(        boolean forward,        FluxSink<V> emitter,        long n){\n          queue.getValueAsync(currentIndex).onComplete((value,e) -> {\n            if (e != null) {\n              emitter.error(e);\n              return;\n            }\n            if (value != null) {\n              emitter.next(value);\n              if (forward) {\n                currentIndex++;\n              }\n else {\n                currentIndex--;\n              }\n            }\n            if (value == null) {\n              emitter.complete();\n              return;\n            }\n            if (n - 1 == 0) {\n              return;\n            }\n            onRequest(forward,emitter,n - 1);\n          }\n);\n        }\n      }\n);\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 25
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 1607,
        "startLineNumber" : 46,
        "startColumnNumber" : 15,
        "endLineNumber" : 89,
        "endColumnNumber" : 10
      },
      "nodeContext" : "Flux.create(new Consumer<FluxSink<V>>(){\n  @Override public void accept(  FluxSink<V> emitter){\n    emitter.onRequest(new LongConsumer(){\n      int currentIndex=0;\n      @Override public void accept(      long value){\n        onRequest(true,emitter,value);\n      }\n      protected void onRequest(      boolean forward,      FluxSink<V> emitter,      long n){\n        queue.getValueAsync(currentIndex).onComplete((value,e) -> {\n          if (e != null) {\n            emitter.error(e);\n            return;\n          }\n          if (value != null) {\n            emitter.next(value);\n            if (forward) {\n              currentIndex++;\n            }\n else {\n              currentIndex--;\n            }\n          }\n          if (value == null) {\n            emitter.complete();\n            return;\n          }\n          if (n - 1 == 0) {\n            return;\n          }\n          onRequest(forward,emitter,n - 1);\n        }\n);\n      }\n    }\n);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 144,
      "astHeight" : 22
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 46,
    "startColumnNumber" : 15,
    "endLineNumber" : 46,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ ]
}