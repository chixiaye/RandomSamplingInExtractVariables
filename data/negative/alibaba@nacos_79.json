{
  "id" : 79,
  "expression" : "beatInfo.getServiceName()",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/client/src/main/java/com/alibaba/nacos/client/naming/beat/BeatReactor.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "beatInfo.getServiceName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 201,
      "startColumnNumber" : 44,
      "endLineNumber" : 201,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 201,
        "startColumnNumber" : 20,
        "endLineNumber" : 201,
        "endColumnNumber" : 70
      },
      "nodeContext" : "instance.setServiceName(beatInfo.getServiceName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 201,
        "startColumnNumber" : 20,
        "endLineNumber" : 201,
        "endColumnNumber" : 71
      },
      "nodeContext" : "instance.setServiceName(beatInfo.getServiceName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 846,
        "startLineNumber" : 194,
        "startColumnNumber" : 67,
        "endLineNumber" : 209,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Instance instance=new Instance();\n  instance.setPort(beatInfo.getPort());\n  instance.setIp(beatInfo.getIp());\n  instance.setWeight(beatInfo.getWeight());\n  instance.setMetadata(beatInfo.getMetadata());\n  instance.setClusterName(beatInfo.getCluster());\n  instance.setServiceName(beatInfo.getServiceName());\n  instance.setInstanceId(instance.getInstanceId());\n  instance.setEphemeral(true);\n  try {\n    serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n  }\n catch (  Exception ignore) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 194,
        "startColumnNumber" : 16,
        "endLineNumber" : 209,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (code == NamingResponseCode.RESOURCE_NOT_FOUND) {\n  Instance instance=new Instance();\n  instance.setPort(beatInfo.getPort());\n  instance.setIp(beatInfo.getIp());\n  instance.setWeight(beatInfo.getWeight());\n  instance.setMetadata(beatInfo.getMetadata());\n  instance.setClusterName(beatInfo.getCluster());\n  instance.setServiceName(beatInfo.getServiceName());\n  instance.setInstanceId(instance.getInstanceId());\n  instance.setEphemeral(true);\n  try {\n    serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n  }\n catch (  Exception ignore) {\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1688,
        "startLineNumber" : 179,
        "startColumnNumber" : 16,
        "endLineNumber" : 210,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  JsonNode result=serverProxy.sendBeat(beatInfo,BeatReactor.this.lightBeatEnabled);\n  long interval=result.get(\"clientBeatInterval\").asLong();\n  boolean lightBeatEnabled=false;\n  if (result.has(CommonParams.LIGHT_BEAT_ENABLED)) {\n    lightBeatEnabled=result.get(CommonParams.LIGHT_BEAT_ENABLED).asBoolean();\n  }\n  BeatReactor.this.lightBeatEnabled=lightBeatEnabled;\n  if (interval > 0) {\n    nextTime=interval;\n  }\n  int code=NamingResponseCode.OK;\n  if (result.has(CommonParams.CODE)) {\n    code=result.get(CommonParams.CODE).asInt();\n  }\n  if (code == NamingResponseCode.RESOURCE_NOT_FOUND) {\n    Instance instance=new Instance();\n    instance.setPort(beatInfo.getPort());\n    instance.setIp(beatInfo.getIp());\n    instance.setWeight(beatInfo.getWeight());\n    instance.setMetadata(beatInfo.getMetadata());\n    instance.setClusterName(beatInfo.getCluster());\n    instance.setServiceName(beatInfo.getServiceName());\n    instance.setInstanceId(instance.getInstanceId());\n    instance.setEphemeral(true);\n    try {\n      serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n    }\n catch (    Exception ignore) {\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1936,
        "startLineNumber" : 179,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  JsonNode result=serverProxy.sendBeat(beatInfo,BeatReactor.this.lightBeatEnabled);\n  long interval=result.get(\"clientBeatInterval\").asLong();\n  boolean lightBeatEnabled=false;\n  if (result.has(CommonParams.LIGHT_BEAT_ENABLED)) {\n    lightBeatEnabled=result.get(CommonParams.LIGHT_BEAT_ENABLED).asBoolean();\n  }\n  BeatReactor.this.lightBeatEnabled=lightBeatEnabled;\n  if (interval > 0) {\n    nextTime=interval;\n  }\n  int code=NamingResponseCode.OK;\n  if (result.has(CommonParams.CODE)) {\n    code=result.get(CommonParams.CODE).asInt();\n  }\n  if (code == NamingResponseCode.RESOURCE_NOT_FOUND) {\n    Instance instance=new Instance();\n    instance.setPort(beatInfo.getPort());\n    instance.setIp(beatInfo.getIp());\n    instance.setWeight(beatInfo.getWeight());\n    instance.setMetadata(beatInfo.getMetadata());\n    instance.setClusterName(beatInfo.getCluster());\n    instance.setServiceName(beatInfo.getServiceName());\n    instance.setInstanceId(instance.getInstanceId());\n    instance.setEphemeral(true);\n    try {\n      serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n    }\n catch (    Exception ignore) {\n    }\n  }\n}\n catch (NacosException ex) {\n  NAMING_LOGGER.error(\"[CLIENT-BEAT] failed to send beat: {}, code: {}, msg: {}\",JacksonUtils.toJson(beatInfo),ex.getErrCode(),ex.getErrMsg());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 203,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2183,
        "startLineNumber" : 174,
        "startColumnNumber" : 26,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (beatInfo.isStopped()) {\n    return;\n  }\n  long nextTime=beatInfo.getPeriod();\n  try {\n    JsonNode result=serverProxy.sendBeat(beatInfo,BeatReactor.this.lightBeatEnabled);\n    long interval=result.get(\"clientBeatInterval\").asLong();\n    boolean lightBeatEnabled=false;\n    if (result.has(CommonParams.LIGHT_BEAT_ENABLED)) {\n      lightBeatEnabled=result.get(CommonParams.LIGHT_BEAT_ENABLED).asBoolean();\n    }\n    BeatReactor.this.lightBeatEnabled=lightBeatEnabled;\n    if (interval > 0) {\n      nextTime=interval;\n    }\n    int code=NamingResponseCode.OK;\n    if (result.has(CommonParams.CODE)) {\n      code=result.get(CommonParams.CODE).asInt();\n    }\n    if (code == NamingResponseCode.RESOURCE_NOT_FOUND) {\n      Instance instance=new Instance();\n      instance.setPort(beatInfo.getPort());\n      instance.setIp(beatInfo.getIp());\n      instance.setWeight(beatInfo.getWeight());\n      instance.setMetadata(beatInfo.getMetadata());\n      instance.setClusterName(beatInfo.getCluster());\n      instance.setServiceName(beatInfo.getServiceName());\n      instance.setInstanceId(instance.getInstanceId());\n      instance.setEphemeral(true);\n      try {\n        serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n      }\n catch (      Exception ignore) {\n      }\n    }\n  }\n catch (  NacosException ex) {\n    NAMING_LOGGER.error(\"[CLIENT-BEAT] failed to send beat: {}, code: {}, msg: {}\",JacksonUtils.toJson(beatInfo),ex.getErrCode(),ex.getErrMsg());\n  }\n  executorService.schedule(new BeatTask(beatInfo),nextTime,TimeUnit.MILLISECONDS);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2219,
        "startLineNumber" : 173,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  if (beatInfo.isStopped()) {\n    return;\n  }\n  long nextTime=beatInfo.getPeriod();\n  try {\n    JsonNode result=serverProxy.sendBeat(beatInfo,BeatReactor.this.lightBeatEnabled);\n    long interval=result.get(\"clientBeatInterval\").asLong();\n    boolean lightBeatEnabled=false;\n    if (result.has(CommonParams.LIGHT_BEAT_ENABLED)) {\n      lightBeatEnabled=result.get(CommonParams.LIGHT_BEAT_ENABLED).asBoolean();\n    }\n    BeatReactor.this.lightBeatEnabled=lightBeatEnabled;\n    if (interval > 0) {\n      nextTime=interval;\n    }\n    int code=NamingResponseCode.OK;\n    if (result.has(CommonParams.CODE)) {\n      code=result.get(CommonParams.CODE).asInt();\n    }\n    if (code == NamingResponseCode.RESOURCE_NOT_FOUND) {\n      Instance instance=new Instance();\n      instance.setPort(beatInfo.getPort());\n      instance.setIp(beatInfo.getIp());\n      instance.setWeight(beatInfo.getWeight());\n      instance.setMetadata(beatInfo.getMetadata());\n      instance.setClusterName(beatInfo.getCluster());\n      instance.setServiceName(beatInfo.getServiceName());\n      instance.setInstanceId(instance.getInstanceId());\n      instance.setEphemeral(true);\n      try {\n        serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n      }\n catch (      Exception ignore) {\n      }\n    }\n  }\n catch (  NacosException ex) {\n    NAMING_LOGGER.error(\"[CLIENT-BEAT] failed to send beat: {}, code: {}, msg: {}\",JacksonUtils.toJson(beatInfo),ex.getErrCode(),ex.getErrMsg());\n  }\n  executorService.schedule(new BeatTask(beatInfo),nextTime,TimeUnit.MILLISECONDS);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 235,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 201,
        "startColumnNumber" : 20,
        "endLineNumber" : 201,
        "endColumnNumber" : 71
      },
      "nodeContext" : "instance.setServiceName(beatInfo.getServiceName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "beatInfo.getServiceName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 205,
      "startColumnNumber" : 52,
      "endLineNumber" : 205,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 205,
        "startColumnNumber" : 24,
        "endLineNumber" : 206,
        "endColumnNumber" : 94
      },
      "nodeContext" : "serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 205,
        "startColumnNumber" : 24,
        "endLineNumber" : 206,
        "endColumnNumber" : 95
      },
      "nodeContext" : "serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 204,
        "startColumnNumber" : 24,
        "endLineNumber" : 207,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 204,
        "startColumnNumber" : 20,
        "endLineNumber" : 208,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n}\n catch (Exception ignore) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 846,
        "startLineNumber" : 194,
        "startColumnNumber" : 67,
        "endLineNumber" : 209,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Instance instance=new Instance();\n  instance.setPort(beatInfo.getPort());\n  instance.setIp(beatInfo.getIp());\n  instance.setWeight(beatInfo.getWeight());\n  instance.setMetadata(beatInfo.getMetadata());\n  instance.setClusterName(beatInfo.getCluster());\n  instance.setServiceName(beatInfo.getServiceName());\n  instance.setInstanceId(instance.getInstanceId());\n  instance.setEphemeral(true);\n  try {\n    serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n  }\n catch (  Exception ignore) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 194,
        "startColumnNumber" : 16,
        "endLineNumber" : 209,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (code == NamingResponseCode.RESOURCE_NOT_FOUND) {\n  Instance instance=new Instance();\n  instance.setPort(beatInfo.getPort());\n  instance.setIp(beatInfo.getIp());\n  instance.setWeight(beatInfo.getWeight());\n  instance.setMetadata(beatInfo.getMetadata());\n  instance.setClusterName(beatInfo.getCluster());\n  instance.setServiceName(beatInfo.getServiceName());\n  instance.setInstanceId(instance.getInstanceId());\n  instance.setEphemeral(true);\n  try {\n    serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n  }\n catch (  Exception ignore) {\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1688,
        "startLineNumber" : 179,
        "startColumnNumber" : 16,
        "endLineNumber" : 210,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  JsonNode result=serverProxy.sendBeat(beatInfo,BeatReactor.this.lightBeatEnabled);\n  long interval=result.get(\"clientBeatInterval\").asLong();\n  boolean lightBeatEnabled=false;\n  if (result.has(CommonParams.LIGHT_BEAT_ENABLED)) {\n    lightBeatEnabled=result.get(CommonParams.LIGHT_BEAT_ENABLED).asBoolean();\n  }\n  BeatReactor.this.lightBeatEnabled=lightBeatEnabled;\n  if (interval > 0) {\n    nextTime=interval;\n  }\n  int code=NamingResponseCode.OK;\n  if (result.has(CommonParams.CODE)) {\n    code=result.get(CommonParams.CODE).asInt();\n  }\n  if (code == NamingResponseCode.RESOURCE_NOT_FOUND) {\n    Instance instance=new Instance();\n    instance.setPort(beatInfo.getPort());\n    instance.setIp(beatInfo.getIp());\n    instance.setWeight(beatInfo.getWeight());\n    instance.setMetadata(beatInfo.getMetadata());\n    instance.setClusterName(beatInfo.getCluster());\n    instance.setServiceName(beatInfo.getServiceName());\n    instance.setInstanceId(instance.getInstanceId());\n    instance.setEphemeral(true);\n    try {\n      serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n    }\n catch (    Exception ignore) {\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1936,
        "startLineNumber" : 179,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  JsonNode result=serverProxy.sendBeat(beatInfo,BeatReactor.this.lightBeatEnabled);\n  long interval=result.get(\"clientBeatInterval\").asLong();\n  boolean lightBeatEnabled=false;\n  if (result.has(CommonParams.LIGHT_BEAT_ENABLED)) {\n    lightBeatEnabled=result.get(CommonParams.LIGHT_BEAT_ENABLED).asBoolean();\n  }\n  BeatReactor.this.lightBeatEnabled=lightBeatEnabled;\n  if (interval > 0) {\n    nextTime=interval;\n  }\n  int code=NamingResponseCode.OK;\n  if (result.has(CommonParams.CODE)) {\n    code=result.get(CommonParams.CODE).asInt();\n  }\n  if (code == NamingResponseCode.RESOURCE_NOT_FOUND) {\n    Instance instance=new Instance();\n    instance.setPort(beatInfo.getPort());\n    instance.setIp(beatInfo.getIp());\n    instance.setWeight(beatInfo.getWeight());\n    instance.setMetadata(beatInfo.getMetadata());\n    instance.setClusterName(beatInfo.getCluster());\n    instance.setServiceName(beatInfo.getServiceName());\n    instance.setInstanceId(instance.getInstanceId());\n    instance.setEphemeral(true);\n    try {\n      serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n    }\n catch (    Exception ignore) {\n    }\n  }\n}\n catch (NacosException ex) {\n  NAMING_LOGGER.error(\"[CLIENT-BEAT] failed to send beat: {}, code: {}, msg: {}\",JacksonUtils.toJson(beatInfo),ex.getErrCode(),ex.getErrMsg());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 203,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2183,
        "startLineNumber" : 174,
        "startColumnNumber" : 26,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (beatInfo.isStopped()) {\n    return;\n  }\n  long nextTime=beatInfo.getPeriod();\n  try {\n    JsonNode result=serverProxy.sendBeat(beatInfo,BeatReactor.this.lightBeatEnabled);\n    long interval=result.get(\"clientBeatInterval\").asLong();\n    boolean lightBeatEnabled=false;\n    if (result.has(CommonParams.LIGHT_BEAT_ENABLED)) {\n      lightBeatEnabled=result.get(CommonParams.LIGHT_BEAT_ENABLED).asBoolean();\n    }\n    BeatReactor.this.lightBeatEnabled=lightBeatEnabled;\n    if (interval > 0) {\n      nextTime=interval;\n    }\n    int code=NamingResponseCode.OK;\n    if (result.has(CommonParams.CODE)) {\n      code=result.get(CommonParams.CODE).asInt();\n    }\n    if (code == NamingResponseCode.RESOURCE_NOT_FOUND) {\n      Instance instance=new Instance();\n      instance.setPort(beatInfo.getPort());\n      instance.setIp(beatInfo.getIp());\n      instance.setWeight(beatInfo.getWeight());\n      instance.setMetadata(beatInfo.getMetadata());\n      instance.setClusterName(beatInfo.getCluster());\n      instance.setServiceName(beatInfo.getServiceName());\n      instance.setInstanceId(instance.getInstanceId());\n      instance.setEphemeral(true);\n      try {\n        serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n      }\n catch (      Exception ignore) {\n      }\n    }\n  }\n catch (  NacosException ex) {\n    NAMING_LOGGER.error(\"[CLIENT-BEAT] failed to send beat: {}, code: {}, msg: {}\",JacksonUtils.toJson(beatInfo),ex.getErrCode(),ex.getErrMsg());\n  }\n  executorService.schedule(new BeatTask(beatInfo),nextTime,TimeUnit.MILLISECONDS);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2219,
        "startLineNumber" : 173,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  if (beatInfo.isStopped()) {\n    return;\n  }\n  long nextTime=beatInfo.getPeriod();\n  try {\n    JsonNode result=serverProxy.sendBeat(beatInfo,BeatReactor.this.lightBeatEnabled);\n    long interval=result.get(\"clientBeatInterval\").asLong();\n    boolean lightBeatEnabled=false;\n    if (result.has(CommonParams.LIGHT_BEAT_ENABLED)) {\n      lightBeatEnabled=result.get(CommonParams.LIGHT_BEAT_ENABLED).asBoolean();\n    }\n    BeatReactor.this.lightBeatEnabled=lightBeatEnabled;\n    if (interval > 0) {\n      nextTime=interval;\n    }\n    int code=NamingResponseCode.OK;\n    if (result.has(CommonParams.CODE)) {\n      code=result.get(CommonParams.CODE).asInt();\n    }\n    if (code == NamingResponseCode.RESOURCE_NOT_FOUND) {\n      Instance instance=new Instance();\n      instance.setPort(beatInfo.getPort());\n      instance.setIp(beatInfo.getIp());\n      instance.setWeight(beatInfo.getWeight());\n      instance.setMetadata(beatInfo.getMetadata());\n      instance.setClusterName(beatInfo.getCluster());\n      instance.setServiceName(beatInfo.getServiceName());\n      instance.setInstanceId(instance.getInstanceId());\n      instance.setEphemeral(true);\n      try {\n        serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n      }\n catch (      Exception ignore) {\n      }\n    }\n  }\n catch (  NacosException ex) {\n    NAMING_LOGGER.error(\"[CLIENT-BEAT] failed to send beat: {}, code: {}, msg: {}\",JacksonUtils.toJson(beatInfo),ex.getErrCode(),ex.getErrMsg());\n  }\n  executorService.schedule(new BeatTask(beatInfo),nextTime,TimeUnit.MILLISECONDS);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 235,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 205,
        "startColumnNumber" : 24,
        "endLineNumber" : 206,
        "endColumnNumber" : 94
      },
      "nodeContext" : "serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "beatInfo.getServiceName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 206,
      "startColumnNumber" : 57,
      "endLineNumber" : 206,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 206,
        "startColumnNumber" : 32,
        "endLineNumber" : 206,
        "endColumnNumber" : 83
      },
      "nodeContext" : "NamingUtils.getGroupName(beatInfo.getServiceName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 205,
        "startColumnNumber" : 24,
        "endLineNumber" : 206,
        "endColumnNumber" : 94
      },
      "nodeContext" : "serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 205,
        "startColumnNumber" : 24,
        "endLineNumber" : 206,
        "endColumnNumber" : 95
      },
      "nodeContext" : "serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 204,
        "startColumnNumber" : 24,
        "endLineNumber" : 207,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 204,
        "startColumnNumber" : 20,
        "endLineNumber" : 208,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n}\n catch (Exception ignore) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 846,
        "startLineNumber" : 194,
        "startColumnNumber" : 67,
        "endLineNumber" : 209,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Instance instance=new Instance();\n  instance.setPort(beatInfo.getPort());\n  instance.setIp(beatInfo.getIp());\n  instance.setWeight(beatInfo.getWeight());\n  instance.setMetadata(beatInfo.getMetadata());\n  instance.setClusterName(beatInfo.getCluster());\n  instance.setServiceName(beatInfo.getServiceName());\n  instance.setInstanceId(instance.getInstanceId());\n  instance.setEphemeral(true);\n  try {\n    serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n  }\n catch (  Exception ignore) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 194,
        "startColumnNumber" : 16,
        "endLineNumber" : 209,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (code == NamingResponseCode.RESOURCE_NOT_FOUND) {\n  Instance instance=new Instance();\n  instance.setPort(beatInfo.getPort());\n  instance.setIp(beatInfo.getIp());\n  instance.setWeight(beatInfo.getWeight());\n  instance.setMetadata(beatInfo.getMetadata());\n  instance.setClusterName(beatInfo.getCluster());\n  instance.setServiceName(beatInfo.getServiceName());\n  instance.setInstanceId(instance.getInstanceId());\n  instance.setEphemeral(true);\n  try {\n    serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n  }\n catch (  Exception ignore) {\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1688,
        "startLineNumber" : 179,
        "startColumnNumber" : 16,
        "endLineNumber" : 210,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  JsonNode result=serverProxy.sendBeat(beatInfo,BeatReactor.this.lightBeatEnabled);\n  long interval=result.get(\"clientBeatInterval\").asLong();\n  boolean lightBeatEnabled=false;\n  if (result.has(CommonParams.LIGHT_BEAT_ENABLED)) {\n    lightBeatEnabled=result.get(CommonParams.LIGHT_BEAT_ENABLED).asBoolean();\n  }\n  BeatReactor.this.lightBeatEnabled=lightBeatEnabled;\n  if (interval > 0) {\n    nextTime=interval;\n  }\n  int code=NamingResponseCode.OK;\n  if (result.has(CommonParams.CODE)) {\n    code=result.get(CommonParams.CODE).asInt();\n  }\n  if (code == NamingResponseCode.RESOURCE_NOT_FOUND) {\n    Instance instance=new Instance();\n    instance.setPort(beatInfo.getPort());\n    instance.setIp(beatInfo.getIp());\n    instance.setWeight(beatInfo.getWeight());\n    instance.setMetadata(beatInfo.getMetadata());\n    instance.setClusterName(beatInfo.getCluster());\n    instance.setServiceName(beatInfo.getServiceName());\n    instance.setInstanceId(instance.getInstanceId());\n    instance.setEphemeral(true);\n    try {\n      serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n    }\n catch (    Exception ignore) {\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1936,
        "startLineNumber" : 179,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  JsonNode result=serverProxy.sendBeat(beatInfo,BeatReactor.this.lightBeatEnabled);\n  long interval=result.get(\"clientBeatInterval\").asLong();\n  boolean lightBeatEnabled=false;\n  if (result.has(CommonParams.LIGHT_BEAT_ENABLED)) {\n    lightBeatEnabled=result.get(CommonParams.LIGHT_BEAT_ENABLED).asBoolean();\n  }\n  BeatReactor.this.lightBeatEnabled=lightBeatEnabled;\n  if (interval > 0) {\n    nextTime=interval;\n  }\n  int code=NamingResponseCode.OK;\n  if (result.has(CommonParams.CODE)) {\n    code=result.get(CommonParams.CODE).asInt();\n  }\n  if (code == NamingResponseCode.RESOURCE_NOT_FOUND) {\n    Instance instance=new Instance();\n    instance.setPort(beatInfo.getPort());\n    instance.setIp(beatInfo.getIp());\n    instance.setWeight(beatInfo.getWeight());\n    instance.setMetadata(beatInfo.getMetadata());\n    instance.setClusterName(beatInfo.getCluster());\n    instance.setServiceName(beatInfo.getServiceName());\n    instance.setInstanceId(instance.getInstanceId());\n    instance.setEphemeral(true);\n    try {\n      serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n    }\n catch (    Exception ignore) {\n    }\n  }\n}\n catch (NacosException ex) {\n  NAMING_LOGGER.error(\"[CLIENT-BEAT] failed to send beat: {}, code: {}, msg: {}\",JacksonUtils.toJson(beatInfo),ex.getErrCode(),ex.getErrMsg());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 203,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2183,
        "startLineNumber" : 174,
        "startColumnNumber" : 26,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (beatInfo.isStopped()) {\n    return;\n  }\n  long nextTime=beatInfo.getPeriod();\n  try {\n    JsonNode result=serverProxy.sendBeat(beatInfo,BeatReactor.this.lightBeatEnabled);\n    long interval=result.get(\"clientBeatInterval\").asLong();\n    boolean lightBeatEnabled=false;\n    if (result.has(CommonParams.LIGHT_BEAT_ENABLED)) {\n      lightBeatEnabled=result.get(CommonParams.LIGHT_BEAT_ENABLED).asBoolean();\n    }\n    BeatReactor.this.lightBeatEnabled=lightBeatEnabled;\n    if (interval > 0) {\n      nextTime=interval;\n    }\n    int code=NamingResponseCode.OK;\n    if (result.has(CommonParams.CODE)) {\n      code=result.get(CommonParams.CODE).asInt();\n    }\n    if (code == NamingResponseCode.RESOURCE_NOT_FOUND) {\n      Instance instance=new Instance();\n      instance.setPort(beatInfo.getPort());\n      instance.setIp(beatInfo.getIp());\n      instance.setWeight(beatInfo.getWeight());\n      instance.setMetadata(beatInfo.getMetadata());\n      instance.setClusterName(beatInfo.getCluster());\n      instance.setServiceName(beatInfo.getServiceName());\n      instance.setInstanceId(instance.getInstanceId());\n      instance.setEphemeral(true);\n      try {\n        serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n      }\n catch (      Exception ignore) {\n      }\n    }\n  }\n catch (  NacosException ex) {\n    NAMING_LOGGER.error(\"[CLIENT-BEAT] failed to send beat: {}, code: {}, msg: {}\",JacksonUtils.toJson(beatInfo),ex.getErrCode(),ex.getErrMsg());\n  }\n  executorService.schedule(new BeatTask(beatInfo),nextTime,TimeUnit.MILLISECONDS);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2219,
        "startLineNumber" : 173,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  if (beatInfo.isStopped()) {\n    return;\n  }\n  long nextTime=beatInfo.getPeriod();\n  try {\n    JsonNode result=serverProxy.sendBeat(beatInfo,BeatReactor.this.lightBeatEnabled);\n    long interval=result.get(\"clientBeatInterval\").asLong();\n    boolean lightBeatEnabled=false;\n    if (result.has(CommonParams.LIGHT_BEAT_ENABLED)) {\n      lightBeatEnabled=result.get(CommonParams.LIGHT_BEAT_ENABLED).asBoolean();\n    }\n    BeatReactor.this.lightBeatEnabled=lightBeatEnabled;\n    if (interval > 0) {\n      nextTime=interval;\n    }\n    int code=NamingResponseCode.OK;\n    if (result.has(CommonParams.CODE)) {\n      code=result.get(CommonParams.CODE).asInt();\n    }\n    if (code == NamingResponseCode.RESOURCE_NOT_FOUND) {\n      Instance instance=new Instance();\n      instance.setPort(beatInfo.getPort());\n      instance.setIp(beatInfo.getIp());\n      instance.setWeight(beatInfo.getWeight());\n      instance.setMetadata(beatInfo.getMetadata());\n      instance.setClusterName(beatInfo.getCluster());\n      instance.setServiceName(beatInfo.getServiceName());\n      instance.setInstanceId(instance.getInstanceId());\n      instance.setEphemeral(true);\n      try {\n        serverProxy.registerService(beatInfo.getServiceName(),NamingUtils.getGroupName(beatInfo.getServiceName()),instance);\n      }\n catch (      Exception ignore) {\n      }\n    }\n  }\n catch (  NacosException ex) {\n    NAMING_LOGGER.error(\"[CLIENT-BEAT] failed to send beat: {}, code: {}, msg: {}\",JacksonUtils.toJson(beatInfo),ex.getErrCode(),ex.getErrMsg());\n  }\n  executorService.schedule(new BeatTask(beatInfo),nextTime,TimeUnit.MILLISECONDS);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 235,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 206,
        "startColumnNumber" : 32,
        "endLineNumber" : 206,
        "endColumnNumber" : 83
      },
      "nodeContext" : "NamingUtils.getGroupName(beatInfo.getServiceName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 201,
    "startColumnNumber" : 44,
    "endLineNumber" : 201,
    "endColumnNumber" : 69
  }, {
    "charLength" : 25,
    "startLineNumber" : 205,
    "startColumnNumber" : 52,
    "endLineNumber" : 205,
    "endColumnNumber" : 77
  }, {
    "charLength" : 25,
    "startLineNumber" : 206,
    "startColumnNumber" : 57,
    "endLineNumber" : 206,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  } ]
}