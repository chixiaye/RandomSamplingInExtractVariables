{
  "id" : 337,
  "expression" : "zip",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/impl/FileResolver.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "zip",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 185,
      "startColumnNumber" : 48,
      "endLineNumber" : 185,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 185,
        "startColumnNumber" : 48,
        "endLineNumber" : 185,
        "endColumnNumber" : 61
      },
      "nodeContext" : "zip.entries()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 185,
        "startColumnNumber" : 38,
        "endLineNumber" : 185,
        "endColumnNumber" : 61
      },
      "nodeContext" : "entries=zip.entries()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 185,
        "startColumnNumber" : 6,
        "endLineNumber" : 185,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Enumeration<? extends ZipEntry> entries=zip.entries();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1392,
        "startLineNumber" : 166,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String path=url.getPath();\n  int idx1=path.lastIndexOf(\".jar!\");\n  if (idx1 == -1) {\n    idx1=path.lastIndexOf(\".zip!\");\n  }\n  int idx2=path.lastIndexOf(\".jar!\",idx1 - 1);\n  if (idx2 == -1) {\n    idx2=path.lastIndexOf(\".zip!\",idx1 - 1);\n  }\n  if (idx2 == -1) {\n    File file=new File(URLDecoder.decode(path.substring(5,idx1 + 4),\"UTF-8\"));\n    zip=new ZipFile(file);\n  }\n else {\n    String s=path.substring(idx2 + 6,idx1 + 4);\n    File file=resolveFile(s);\n    zip=new ZipFile(file);\n  }\n  Enumeration<? extends ZipEntry> entries=zip.entries();\n  while (entries.hasMoreElements()) {\n    ZipEntry entry=entries.nextElement();\n    String name=entry.getName();\n    if (name.startsWith(fileName)) {\n      File file=new File(cacheDir,name);\n      if (name.endsWith(\"/\")) {\n        file.mkdirs();\n      }\n else {\n        file.getParentFile().mkdirs();\n        try (InputStream is=zip.getInputStream(entry)){\n          if (ENABLE_CACHING) {\n            Files.copy(is,file.toPath());\n          }\n else {\n            Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n          }\n        }\n catch (        FileAlreadyExistsException ignore) {\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1502,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 211,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  String path=url.getPath();\n  int idx1=path.lastIndexOf(\".jar!\");\n  if (idx1 == -1) {\n    idx1=path.lastIndexOf(\".zip!\");\n  }\n  int idx2=path.lastIndexOf(\".jar!\",idx1 - 1);\n  if (idx2 == -1) {\n    idx2=path.lastIndexOf(\".zip!\",idx1 - 1);\n  }\n  if (idx2 == -1) {\n    File file=new File(URLDecoder.decode(path.substring(5,idx1 + 4),\"UTF-8\"));\n    zip=new ZipFile(file);\n  }\n else {\n    String s=path.substring(idx2 + 6,idx1 + 4);\n    File file=resolveFile(s);\n    zip=new ZipFile(file);\n  }\n  Enumeration<? extends ZipEntry> entries=zip.entries();\n  while (entries.hasMoreElements()) {\n    ZipEntry entry=entries.nextElement();\n    String name=entry.getName();\n    if (name.startsWith(fileName)) {\n      File file=new File(cacheDir,name);\n      if (name.endsWith(\"/\")) {\n        file.mkdirs();\n      }\n else {\n        file.getParentFile().mkdirs();\n        try (InputStream is=zip.getInputStream(entry)){\n          if (ENABLE_CACHING) {\n            Files.copy(is,file.toPath());\n          }\n else {\n            Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n          }\n        }\n catch (        FileAlreadyExistsException ignore) {\n        }\n      }\n    }\n  }\n}\n catch (IOException e) {\n  throw new VertxException(e);\n}\n finally {\n  closeQuietly(zip);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 242,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1578,
        "startLineNumber" : 164,
        "startColumnNumber" : 87,
        "endLineNumber" : 214,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ZipFile zip=null;\n  try {\n    String path=url.getPath();\n    int idx1=path.lastIndexOf(\".jar!\");\n    if (idx1 == -1) {\n      idx1=path.lastIndexOf(\".zip!\");\n    }\n    int idx2=path.lastIndexOf(\".jar!\",idx1 - 1);\n    if (idx2 == -1) {\n      idx2=path.lastIndexOf(\".zip!\",idx1 - 1);\n    }\n    if (idx2 == -1) {\n      File file=new File(URLDecoder.decode(path.substring(5,idx1 + 4),\"UTF-8\"));\n      zip=new ZipFile(file);\n    }\n else {\n      String s=path.substring(idx2 + 6,idx1 + 4);\n      File file=resolveFile(s);\n      zip=new ZipFile(file);\n    }\n    Enumeration<? extends ZipEntry> entries=zip.entries();\n    while (entries.hasMoreElements()) {\n      ZipEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (name.startsWith(fileName)) {\n        File file=new File(cacheDir,name);\n        if (name.endsWith(\"/\")) {\n          file.mkdirs();\n        }\n else {\n          file.getParentFile().mkdirs();\n          try (InputStream is=zip.getInputStream(entry)){\n            if (ENABLE_CACHING) {\n              Files.copy(is,file.toPath());\n            }\n else {\n              Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n            }\n          }\n catch (          FileAlreadyExistsException ignore) {\n          }\n        }\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new VertxException(e);\n  }\n finally {\n    closeQuietly(zip);\n  }\n  return new File(cacheDir,fileName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1663,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 214,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private synchronized File unpackFromJarURL(URL url,String fileName,ClassLoader cl){\n  ZipFile zip=null;\n  try {\n    String path=url.getPath();\n    int idx1=path.lastIndexOf(\".jar!\");\n    if (idx1 == -1) {\n      idx1=path.lastIndexOf(\".zip!\");\n    }\n    int idx2=path.lastIndexOf(\".jar!\",idx1 - 1);\n    if (idx2 == -1) {\n      idx2=path.lastIndexOf(\".zip!\",idx1 - 1);\n    }\n    if (idx2 == -1) {\n      File file=new File(URLDecoder.decode(path.substring(5,idx1 + 4),\"UTF-8\"));\n      zip=new ZipFile(file);\n    }\n else {\n      String s=path.substring(idx2 + 6,idx1 + 4);\n      File file=resolveFile(s);\n      zip=new ZipFile(file);\n    }\n    Enumeration<? extends ZipEntry> entries=zip.entries();\n    while (entries.hasMoreElements()) {\n      ZipEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (name.startsWith(fileName)) {\n        File file=new File(cacheDir,name);\n        if (name.endsWith(\"/\")) {\n          file.mkdirs();\n        }\n else {\n          file.getParentFile().mkdirs();\n          try (InputStream is=zip.getInputStream(entry)){\n            if (ENABLE_CACHING) {\n              Files.copy(is,file.toPath());\n            }\n else {\n              Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n            }\n          }\n catch (          FileAlreadyExistsException ignore) {\n          }\n        }\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new VertxException(e);\n  }\n finally {\n    closeQuietly(zip);\n  }\n  return new File(cacheDir,fileName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 185,
        "startColumnNumber" : 6,
        "endLineNumber" : 185,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Enumeration<? extends ZipEntry> entries=zip.entries();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.zip.ZipFile"
  }, {
    "nodeContext" : "zip",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 196,
      "startColumnNumber" : 34,
      "endLineNumber" : 196,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 196,
        "startColumnNumber" : 34,
        "endLineNumber" : 196,
        "endColumnNumber" : 59
      },
      "nodeContext" : "zip.getInputStream(entry)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 196,
        "startColumnNumber" : 29,
        "endLineNumber" : 196,
        "endColumnNumber" : 59
      },
      "nodeContext" : "is=zip.getInputStream(entry)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 196,
        "startColumnNumber" : 17,
        "endLineNumber" : 196,
        "endColumnNumber" : 59
      },
      "nodeContext" : "InputStream is=zip.getInputStream(entry)",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 328,
        "startLineNumber" : 196,
        "startColumnNumber" : 12,
        "endLineNumber" : 203,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try (InputStream is=zip.getInputStream(entry)){\n  if (ENABLE_CACHING) {\n    Files.copy(is,file.toPath());\n  }\n else {\n    Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n  }\n}\n catch (FileAlreadyExistsException ignore) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 397,
        "startLineNumber" : 194,
        "startColumnNumber" : 17,
        "endLineNumber" : 204,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  file.getParentFile().mkdirs();\n  try (InputStream is=zip.getInputStream(entry)){\n    if (ENABLE_CACHING) {\n      Files.copy(is,file.toPath());\n    }\n else {\n      Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n    }\n  }\n catch (  FileAlreadyExistsException ignore) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 492,
        "startLineNumber" : 191,
        "startColumnNumber" : 10,
        "endLineNumber" : 204,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (name.endsWith(\"/\")) {\n  file.mkdirs();\n}\n else {\n  file.getParentFile().mkdirs();\n  try (InputStream is=zip.getInputStream(entry)){\n    if (ENABLE_CACHING) {\n      Files.copy(is,file.toPath());\n    }\n else {\n      Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n    }\n  }\n catch (  FileAlreadyExistsException ignore) {\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 562,
        "startLineNumber" : 189,
        "startColumnNumber" : 39,
        "endLineNumber" : 205,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  File file=new File(cacheDir,name);\n  if (name.endsWith(\"/\")) {\n    file.mkdirs();\n  }\n else {\n    file.getParentFile().mkdirs();\n    try (InputStream is=zip.getInputStream(entry)){\n      if (ENABLE_CACHING) {\n        Files.copy(is,file.toPath());\n      }\n else {\n        Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n      }\n    }\n catch (    FileAlreadyExistsException ignore) {\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 593,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 205,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (name.startsWith(fileName)) {\n  File file=new File(cacheDir,name);\n  if (name.endsWith(\"/\")) {\n    file.mkdirs();\n  }\n else {\n    file.getParentFile().mkdirs();\n    try (InputStream is=zip.getInputStream(entry)){\n      if (ENABLE_CACHING) {\n        Files.copy(is,file.toPath());\n      }\n else {\n        Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n      }\n    }\n catch (    FileAlreadyExistsException ignore) {\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 73,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 698,
        "startLineNumber" : 186,
        "startColumnNumber" : 40,
        "endLineNumber" : 206,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  ZipEntry entry=entries.nextElement();\n  String name=entry.getName();\n  if (name.startsWith(fileName)) {\n    File file=new File(cacheDir,name);\n    if (name.endsWith(\"/\")) {\n      file.mkdirs();\n    }\n else {\n      file.getParentFile().mkdirs();\n      try (InputStream is=zip.getInputStream(entry)){\n        if (ENABLE_CACHING) {\n          Files.copy(is,file.toPath());\n        }\n else {\n          Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n        }\n      }\n catch (      FileAlreadyExistsException ignore) {\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 732,
        "startLineNumber" : 186,
        "startColumnNumber" : 6,
        "endLineNumber" : 206,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (entries.hasMoreElements()) {\n  ZipEntry entry=entries.nextElement();\n  String name=entry.getName();\n  if (name.startsWith(fileName)) {\n    File file=new File(cacheDir,name);\n    if (name.endsWith(\"/\")) {\n      file.mkdirs();\n    }\n else {\n      file.getParentFile().mkdirs();\n      try (InputStream is=zip.getInputStream(entry)){\n        if (ENABLE_CACHING) {\n          Files.copy(is,file.toPath());\n        }\n else {\n          Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n        }\n      }\n catch (      FileAlreadyExistsException ignore) {\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 94,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1392,
        "startLineNumber" : 166,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String path=url.getPath();\n  int idx1=path.lastIndexOf(\".jar!\");\n  if (idx1 == -1) {\n    idx1=path.lastIndexOf(\".zip!\");\n  }\n  int idx2=path.lastIndexOf(\".jar!\",idx1 - 1);\n  if (idx2 == -1) {\n    idx2=path.lastIndexOf(\".zip!\",idx1 - 1);\n  }\n  if (idx2 == -1) {\n    File file=new File(URLDecoder.decode(path.substring(5,idx1 + 4),\"UTF-8\"));\n    zip=new ZipFile(file);\n  }\n else {\n    String s=path.substring(idx2 + 6,idx1 + 4);\n    File file=resolveFile(s);\n    zip=new ZipFile(file);\n  }\n  Enumeration<? extends ZipEntry> entries=zip.entries();\n  while (entries.hasMoreElements()) {\n    ZipEntry entry=entries.nextElement();\n    String name=entry.getName();\n    if (name.startsWith(fileName)) {\n      File file=new File(cacheDir,name);\n      if (name.endsWith(\"/\")) {\n        file.mkdirs();\n      }\n else {\n        file.getParentFile().mkdirs();\n        try (InputStream is=zip.getInputStream(entry)){\n          if (ENABLE_CACHING) {\n            Files.copy(is,file.toPath());\n          }\n else {\n            Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n          }\n        }\n catch (        FileAlreadyExistsException ignore) {\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1502,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 211,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  String path=url.getPath();\n  int idx1=path.lastIndexOf(\".jar!\");\n  if (idx1 == -1) {\n    idx1=path.lastIndexOf(\".zip!\");\n  }\n  int idx2=path.lastIndexOf(\".jar!\",idx1 - 1);\n  if (idx2 == -1) {\n    idx2=path.lastIndexOf(\".zip!\",idx1 - 1);\n  }\n  if (idx2 == -1) {\n    File file=new File(URLDecoder.decode(path.substring(5,idx1 + 4),\"UTF-8\"));\n    zip=new ZipFile(file);\n  }\n else {\n    String s=path.substring(idx2 + 6,idx1 + 4);\n    File file=resolveFile(s);\n    zip=new ZipFile(file);\n  }\n  Enumeration<? extends ZipEntry> entries=zip.entries();\n  while (entries.hasMoreElements()) {\n    ZipEntry entry=entries.nextElement();\n    String name=entry.getName();\n    if (name.startsWith(fileName)) {\n      File file=new File(cacheDir,name);\n      if (name.endsWith(\"/\")) {\n        file.mkdirs();\n      }\n else {\n        file.getParentFile().mkdirs();\n        try (InputStream is=zip.getInputStream(entry)){\n          if (ENABLE_CACHING) {\n            Files.copy(is,file.toPath());\n          }\n else {\n            Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n          }\n        }\n catch (        FileAlreadyExistsException ignore) {\n        }\n      }\n    }\n  }\n}\n catch (IOException e) {\n  throw new VertxException(e);\n}\n finally {\n  closeQuietly(zip);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 242,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1578,
        "startLineNumber" : 164,
        "startColumnNumber" : 87,
        "endLineNumber" : 214,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ZipFile zip=null;\n  try {\n    String path=url.getPath();\n    int idx1=path.lastIndexOf(\".jar!\");\n    if (idx1 == -1) {\n      idx1=path.lastIndexOf(\".zip!\");\n    }\n    int idx2=path.lastIndexOf(\".jar!\",idx1 - 1);\n    if (idx2 == -1) {\n      idx2=path.lastIndexOf(\".zip!\",idx1 - 1);\n    }\n    if (idx2 == -1) {\n      File file=new File(URLDecoder.decode(path.substring(5,idx1 + 4),\"UTF-8\"));\n      zip=new ZipFile(file);\n    }\n else {\n      String s=path.substring(idx2 + 6,idx1 + 4);\n      File file=resolveFile(s);\n      zip=new ZipFile(file);\n    }\n    Enumeration<? extends ZipEntry> entries=zip.entries();\n    while (entries.hasMoreElements()) {\n      ZipEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (name.startsWith(fileName)) {\n        File file=new File(cacheDir,name);\n        if (name.endsWith(\"/\")) {\n          file.mkdirs();\n        }\n else {\n          file.getParentFile().mkdirs();\n          try (InputStream is=zip.getInputStream(entry)){\n            if (ENABLE_CACHING) {\n              Files.copy(is,file.toPath());\n            }\n else {\n              Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n            }\n          }\n catch (          FileAlreadyExistsException ignore) {\n          }\n        }\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new VertxException(e);\n  }\n finally {\n    closeQuietly(zip);\n  }\n  return new File(cacheDir,fileName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1663,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 214,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private synchronized File unpackFromJarURL(URL url,String fileName,ClassLoader cl){\n  ZipFile zip=null;\n  try {\n    String path=url.getPath();\n    int idx1=path.lastIndexOf(\".jar!\");\n    if (idx1 == -1) {\n      idx1=path.lastIndexOf(\".zip!\");\n    }\n    int idx2=path.lastIndexOf(\".jar!\",idx1 - 1);\n    if (idx2 == -1) {\n      idx2=path.lastIndexOf(\".zip!\",idx1 - 1);\n    }\n    if (idx2 == -1) {\n      File file=new File(URLDecoder.decode(path.substring(5,idx1 + 4),\"UTF-8\"));\n      zip=new ZipFile(file);\n    }\n else {\n      String s=path.substring(idx2 + 6,idx1 + 4);\n      File file=resolveFile(s);\n      zip=new ZipFile(file);\n    }\n    Enumeration<? extends ZipEntry> entries=zip.entries();\n    while (entries.hasMoreElements()) {\n      ZipEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (name.startsWith(fileName)) {\n        File file=new File(cacheDir,name);\n        if (name.endsWith(\"/\")) {\n          file.mkdirs();\n        }\n else {\n          file.getParentFile().mkdirs();\n          try (InputStream is=zip.getInputStream(entry)){\n            if (ENABLE_CACHING) {\n              Files.copy(is,file.toPath());\n            }\n else {\n              Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n            }\n          }\n catch (          FileAlreadyExistsException ignore) {\n          }\n        }\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new VertxException(e);\n  }\n finally {\n    closeQuietly(zip);\n  }\n  return new File(cacheDir,fileName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 196,
        "startColumnNumber" : 17,
        "endLineNumber" : 196,
        "endColumnNumber" : 59
      },
      "nodeContext" : "InputStream is=zip.getInputStream(entry)",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.zip.ZipFile"
  }, {
    "nodeContext" : "zip",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 210,
      "startColumnNumber" : 19,
      "endLineNumber" : 210,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 210,
        "startColumnNumber" : 6,
        "endLineNumber" : 210,
        "endColumnNumber" : 23
      },
      "nodeContext" : "closeQuietly(zip)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 210,
        "startColumnNumber" : 6,
        "endLineNumber" : 210,
        "endColumnNumber" : 24
      },
      "nodeContext" : "closeQuietly(zip);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 209,
        "startColumnNumber" : 14,
        "endLineNumber" : 211,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  closeQuietly(zip);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1502,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 211,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  String path=url.getPath();\n  int idx1=path.lastIndexOf(\".jar!\");\n  if (idx1 == -1) {\n    idx1=path.lastIndexOf(\".zip!\");\n  }\n  int idx2=path.lastIndexOf(\".jar!\",idx1 - 1);\n  if (idx2 == -1) {\n    idx2=path.lastIndexOf(\".zip!\",idx1 - 1);\n  }\n  if (idx2 == -1) {\n    File file=new File(URLDecoder.decode(path.substring(5,idx1 + 4),\"UTF-8\"));\n    zip=new ZipFile(file);\n  }\n else {\n    String s=path.substring(idx2 + 6,idx1 + 4);\n    File file=resolveFile(s);\n    zip=new ZipFile(file);\n  }\n  Enumeration<? extends ZipEntry> entries=zip.entries();\n  while (entries.hasMoreElements()) {\n    ZipEntry entry=entries.nextElement();\n    String name=entry.getName();\n    if (name.startsWith(fileName)) {\n      File file=new File(cacheDir,name);\n      if (name.endsWith(\"/\")) {\n        file.mkdirs();\n      }\n else {\n        file.getParentFile().mkdirs();\n        try (InputStream is=zip.getInputStream(entry)){\n          if (ENABLE_CACHING) {\n            Files.copy(is,file.toPath());\n          }\n else {\n            Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n          }\n        }\n catch (        FileAlreadyExistsException ignore) {\n        }\n      }\n    }\n  }\n}\n catch (IOException e) {\n  throw new VertxException(e);\n}\n finally {\n  closeQuietly(zip);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 242,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1578,
        "startLineNumber" : 164,
        "startColumnNumber" : 87,
        "endLineNumber" : 214,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ZipFile zip=null;\n  try {\n    String path=url.getPath();\n    int idx1=path.lastIndexOf(\".jar!\");\n    if (idx1 == -1) {\n      idx1=path.lastIndexOf(\".zip!\");\n    }\n    int idx2=path.lastIndexOf(\".jar!\",idx1 - 1);\n    if (idx2 == -1) {\n      idx2=path.lastIndexOf(\".zip!\",idx1 - 1);\n    }\n    if (idx2 == -1) {\n      File file=new File(URLDecoder.decode(path.substring(5,idx1 + 4),\"UTF-8\"));\n      zip=new ZipFile(file);\n    }\n else {\n      String s=path.substring(idx2 + 6,idx1 + 4);\n      File file=resolveFile(s);\n      zip=new ZipFile(file);\n    }\n    Enumeration<? extends ZipEntry> entries=zip.entries();\n    while (entries.hasMoreElements()) {\n      ZipEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (name.startsWith(fileName)) {\n        File file=new File(cacheDir,name);\n        if (name.endsWith(\"/\")) {\n          file.mkdirs();\n        }\n else {\n          file.getParentFile().mkdirs();\n          try (InputStream is=zip.getInputStream(entry)){\n            if (ENABLE_CACHING) {\n              Files.copy(is,file.toPath());\n            }\n else {\n              Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n            }\n          }\n catch (          FileAlreadyExistsException ignore) {\n          }\n        }\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new VertxException(e);\n  }\n finally {\n    closeQuietly(zip);\n  }\n  return new File(cacheDir,fileName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1663,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 214,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private synchronized File unpackFromJarURL(URL url,String fileName,ClassLoader cl){\n  ZipFile zip=null;\n  try {\n    String path=url.getPath();\n    int idx1=path.lastIndexOf(\".jar!\");\n    if (idx1 == -1) {\n      idx1=path.lastIndexOf(\".zip!\");\n    }\n    int idx2=path.lastIndexOf(\".jar!\",idx1 - 1);\n    if (idx2 == -1) {\n      idx2=path.lastIndexOf(\".zip!\",idx1 - 1);\n    }\n    if (idx2 == -1) {\n      File file=new File(URLDecoder.decode(path.substring(5,idx1 + 4),\"UTF-8\"));\n      zip=new ZipFile(file);\n    }\n else {\n      String s=path.substring(idx2 + 6,idx1 + 4);\n      File file=resolveFile(s);\n      zip=new ZipFile(file);\n    }\n    Enumeration<? extends ZipEntry> entries=zip.entries();\n    while (entries.hasMoreElements()) {\n      ZipEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (name.startsWith(fileName)) {\n        File file=new File(cacheDir,name);\n        if (name.endsWith(\"/\")) {\n          file.mkdirs();\n        }\n else {\n          file.getParentFile().mkdirs();\n          try (InputStream is=zip.getInputStream(entry)){\n            if (ENABLE_CACHING) {\n              Files.copy(is,file.toPath());\n            }\n else {\n              Files.copy(is,file.toPath(),StandardCopyOption.REPLACE_EXISTING);\n            }\n          }\n catch (          FileAlreadyExistsException ignore) {\n          }\n        }\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new VertxException(e);\n  }\n finally {\n    closeQuietly(zip);\n  }\n  return new File(cacheDir,fileName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 210,
        "startColumnNumber" : 6,
        "endLineNumber" : 210,
        "endColumnNumber" : 24
      },
      "nodeContext" : "closeQuietly(zip);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.zip.ZipFile"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 185,
    "startColumnNumber" : 48,
    "endLineNumber" : 185,
    "endColumnNumber" : 51
  }, {
    "charLength" : 3,
    "startLineNumber" : 196,
    "startColumnNumber" : 34,
    "endLineNumber" : 196,
    "endColumnNumber" : 37
  }, {
    "charLength" : 3,
    "startLineNumber" : 210,
    "startColumnNumber" : 19,
    "endLineNumber" : 210,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}