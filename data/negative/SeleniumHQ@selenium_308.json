{
  "id" : 308,
  "expression" : "id",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "738dd0ee18a142d3fe69fc5f16889ac770188c93",
  "filePath" : "java/server/src/org/openqa/selenium/grid/sessionmap/jdbc/JdbcBackedSessionMap.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "id",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 239,
      "startColumnNumber" : 34,
      "endLineNumber" : 239,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 239,
        "startColumnNumber" : 4,
        "endLineNumber" : 239,
        "endColumnNumber" : 37
      },
      "nodeContext" : "Require.nonNull(\"Session ID\",id)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 239,
        "startColumnNumber" : 4,
        "endLineNumber" : 239,
        "endColumnNumber" : 38
      },
      "nodeContext" : "Require.nonNull(\"Session ID\",id);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1508,
        "startLineNumber" : 238,
        "startColumnNumber" : 35,
        "endLineNumber" : 269,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  try (Span span=tracer.getCurrentContext().createSpan(\"DELETE from  sessions_map where session_ids = ?\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=getDeleteSqlForSession(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"delete\");\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"delete\"));\n      int rowCount=statement.executeUpdate();\n      attributeMap.put(\"rows.deleted\",EventAttribute.setValue(rowCount));\n      span.addEvent(\"Deleted session from the database\",attributeMap);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to delete session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e.getMessage());\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 183,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1553,
        "startLineNumber" : 237,
        "startColumnNumber" : 2,
        "endLineNumber" : 269,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void remove(SessionId id){\n  Require.nonNull(\"Session ID\",id);\n  try (Span span=tracer.getCurrentContext().createSpan(\"DELETE from  sessions_map where session_ids = ?\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=getDeleteSqlForSession(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"delete\");\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"delete\"));\n      int rowCount=statement.executeUpdate();\n      attributeMap.put(\"rows.deleted\",EventAttribute.setValue(rowCount));\n      span.addEvent(\"Deleted session from the database\",attributeMap);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to delete session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e.getMessage());\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 239,
        "startColumnNumber" : 4,
        "endLineNumber" : 239,
        "endColumnNumber" : 38
      },
      "nodeContext" : "Require.nonNull(\"Session ID\",id);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.SessionId"
  }, {
    "nodeContext" : "id",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 243,
      "startColumnNumber" : 30,
      "endLineNumber" : 243,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 243,
        "startColumnNumber" : 6,
        "endLineNumber" : 243,
        "endColumnNumber" : 33
      },
      "nodeContext" : "SESSION_ID.accept(span,id)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 243,
        "startColumnNumber" : 6,
        "endLineNumber" : 243,
        "endColumnNumber" : 34
      },
      "nodeContext" : "SESSION_ID.accept(span,id);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1343,
        "startLineNumber" : 241,
        "startColumnNumber" : 60,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=getDeleteSqlForSession(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"delete\");\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"delete\"));\n    int rowCount=statement.executeUpdate();\n    attributeMap.put(\"rows.deleted\",EventAttribute.setValue(rowCount));\n    span.addEvent(\"Deleted session from the database\",attributeMap);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to delete session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1459,
        "startLineNumber" : 240,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"DELETE from  sessions_map where session_ids = ?\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=getDeleteSqlForSession(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"delete\");\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"delete\"));\n    int rowCount=statement.executeUpdate();\n    attributeMap.put(\"rows.deleted\",EventAttribute.setValue(rowCount));\n    span.addEvent(\"Deleted session from the database\",attributeMap);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to delete session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e.getMessage());\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 176,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1508,
        "startLineNumber" : 238,
        "startColumnNumber" : 35,
        "endLineNumber" : 269,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  try (Span span=tracer.getCurrentContext().createSpan(\"DELETE from  sessions_map where session_ids = ?\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=getDeleteSqlForSession(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"delete\");\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"delete\"));\n      int rowCount=statement.executeUpdate();\n      attributeMap.put(\"rows.deleted\",EventAttribute.setValue(rowCount));\n      span.addEvent(\"Deleted session from the database\",attributeMap);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to delete session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e.getMessage());\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 183,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1553,
        "startLineNumber" : 237,
        "startColumnNumber" : 2,
        "endLineNumber" : 269,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void remove(SessionId id){\n  Require.nonNull(\"Session ID\",id);\n  try (Span span=tracer.getCurrentContext().createSpan(\"DELETE from  sessions_map where session_ids = ?\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=getDeleteSqlForSession(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"delete\");\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"delete\"));\n      int rowCount=statement.executeUpdate();\n      attributeMap.put(\"rows.deleted\",EventAttribute.setValue(rowCount));\n      span.addEvent(\"Deleted session from the database\",attributeMap);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to delete session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e.getMessage());\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 243,
        "startColumnNumber" : 6,
        "endLineNumber" : 243,
        "endColumnNumber" : 34
      },
      "nodeContext" : "SESSION_ID.accept(span,id);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.SessionId"
  }, {
    "nodeContext" : "id",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 244,
      "startColumnNumber" : 44,
      "endLineNumber" : 244,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 244,
        "startColumnNumber" : 6,
        "endLineNumber" : 244,
        "endColumnNumber" : 47
      },
      "nodeContext" : "SESSION_ID_EVENT.accept(attributeMap,id)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 244,
        "startColumnNumber" : 6,
        "endLineNumber" : 244,
        "endColumnNumber" : 48
      },
      "nodeContext" : "SESSION_ID_EVENT.accept(attributeMap,id);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1343,
        "startLineNumber" : 241,
        "startColumnNumber" : 60,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=getDeleteSqlForSession(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"delete\");\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"delete\"));\n    int rowCount=statement.executeUpdate();\n    attributeMap.put(\"rows.deleted\",EventAttribute.setValue(rowCount));\n    span.addEvent(\"Deleted session from the database\",attributeMap);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to delete session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1459,
        "startLineNumber" : 240,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"DELETE from  sessions_map where session_ids = ?\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=getDeleteSqlForSession(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"delete\");\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"delete\"));\n    int rowCount=statement.executeUpdate();\n    attributeMap.put(\"rows.deleted\",EventAttribute.setValue(rowCount));\n    span.addEvent(\"Deleted session from the database\",attributeMap);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to delete session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e.getMessage());\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 176,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1508,
        "startLineNumber" : 238,
        "startColumnNumber" : 35,
        "endLineNumber" : 269,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  try (Span span=tracer.getCurrentContext().createSpan(\"DELETE from  sessions_map where session_ids = ?\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=getDeleteSqlForSession(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"delete\");\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"delete\"));\n      int rowCount=statement.executeUpdate();\n      attributeMap.put(\"rows.deleted\",EventAttribute.setValue(rowCount));\n      span.addEvent(\"Deleted session from the database\",attributeMap);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to delete session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e.getMessage());\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 183,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1553,
        "startLineNumber" : 237,
        "startColumnNumber" : 2,
        "endLineNumber" : 269,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void remove(SessionId id){\n  Require.nonNull(\"Session ID\",id);\n  try (Span span=tracer.getCurrentContext().createSpan(\"DELETE from  sessions_map where session_ids = ?\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=getDeleteSqlForSession(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"delete\");\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"delete\"));\n      int rowCount=statement.executeUpdate();\n      attributeMap.put(\"rows.deleted\",EventAttribute.setValue(rowCount));\n      span.addEvent(\"Deleted session from the database\",attributeMap);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to delete session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e.getMessage());\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 244,
        "startColumnNumber" : 6,
        "endLineNumber" : 244,
        "endColumnNumber" : 48
      },
      "nodeContext" : "SESSION_ID_EVENT.accept(attributeMap,id);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.SessionId"
  }, {
    "nodeContext" : "id",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 248,
      "startColumnNumber" : 64,
      "endLineNumber" : 248,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 248,
        "startColumnNumber" : 41,
        "endLineNumber" : 248,
        "endColumnNumber" : 67
      },
      "nodeContext" : "getDeleteSqlForSession(id)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 248,
        "startColumnNumber" : 29,
        "endLineNumber" : 248,
        "endColumnNumber" : 67
      },
      "nodeContext" : "statement=getDeleteSqlForSession(id)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 248,
        "startColumnNumber" : 11,
        "endLineNumber" : 248,
        "endColumnNumber" : 67
      },
      "nodeContext" : "PreparedStatement statement=getDeleteSqlForSession(id)",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 248,
        "startColumnNumber" : 6,
        "endLineNumber" : 267,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=getDeleteSqlForSession(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"delete\");\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"delete\"));\n  int rowCount=statement.executeUpdate();\n  attributeMap.put(\"rows.deleted\",EventAttribute.setValue(rowCount));\n  span.addEvent(\"Deleted session from the database\",attributeMap);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to delete session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 129,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1343,
        "startLineNumber" : 241,
        "startColumnNumber" : 60,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=getDeleteSqlForSession(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"delete\");\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"delete\"));\n    int rowCount=statement.executeUpdate();\n    attributeMap.put(\"rows.deleted\",EventAttribute.setValue(rowCount));\n    span.addEvent(\"Deleted session from the database\",attributeMap);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to delete session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1459,
        "startLineNumber" : 240,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"DELETE from  sessions_map where session_ids = ?\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=getDeleteSqlForSession(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"delete\");\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"delete\"));\n    int rowCount=statement.executeUpdate();\n    attributeMap.put(\"rows.deleted\",EventAttribute.setValue(rowCount));\n    span.addEvent(\"Deleted session from the database\",attributeMap);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to delete session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e.getMessage());\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 176,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1508,
        "startLineNumber" : 238,
        "startColumnNumber" : 35,
        "endLineNumber" : 269,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  try (Span span=tracer.getCurrentContext().createSpan(\"DELETE from  sessions_map where session_ids = ?\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=getDeleteSqlForSession(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"delete\");\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"delete\"));\n      int rowCount=statement.executeUpdate();\n      attributeMap.put(\"rows.deleted\",EventAttribute.setValue(rowCount));\n      span.addEvent(\"Deleted session from the database\",attributeMap);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to delete session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e.getMessage());\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 183,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1553,
        "startLineNumber" : 237,
        "startColumnNumber" : 2,
        "endLineNumber" : 269,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void remove(SessionId id){\n  Require.nonNull(\"Session ID\",id);\n  try (Span span=tracer.getCurrentContext().createSpan(\"DELETE from  sessions_map where session_ids = ?\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=getDeleteSqlForSession(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"delete\");\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"delete\"));\n      int rowCount=statement.executeUpdate();\n      attributeMap.put(\"rows.deleted\",EventAttribute.setValue(rowCount));\n      span.addEvent(\"Deleted session from the database\",attributeMap);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to delete session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e.getMessage());\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 248,
        "startColumnNumber" : 11,
        "endLineNumber" : 248,
        "endColumnNumber" : 67
      },
      "nodeContext" : "PreparedStatement statement=getDeleteSqlForSession(id)",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.SessionId"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 239,
    "startColumnNumber" : 34,
    "endLineNumber" : 239,
    "endColumnNumber" : 36
  }, {
    "charLength" : 2,
    "startLineNumber" : 243,
    "startColumnNumber" : 30,
    "endLineNumber" : 243,
    "endColumnNumber" : 32
  }, {
    "charLength" : 2,
    "startLineNumber" : 244,
    "startColumnNumber" : 44,
    "endLineNumber" : 244,
    "endColumnNumber" : 46
  }, {
    "charLength" : 2,
    "startLineNumber" : 248,
    "startColumnNumber" : 64,
    "endLineNumber" : 248,
    "endColumnNumber" : 66
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}