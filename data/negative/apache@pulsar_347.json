{
  "id" : 347,
  "expression" : "i < messages",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ProducerSemaphoreTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < messages",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 74,
      "startColumnNumber" : 28,
      "endLineNumber" : 74,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < messages; i++) {\n  futures.add(producer.newMessage().value((\"Semaphore-test-\" + i).getBytes()).sendAsync());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 29,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (int i=0; i < messages; i++) {\n    futures.add(producer.newMessage().value((\"Semaphore-test-\" + i).getBytes()).sendAsync());\n  }\n  Assert.assertEquals(producer.getSemaphore().get().availablePermits(),pendingQueueSize - messages);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 390,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  for (int i=0; i < messages; i++) {\n    futures.add(producer.newMessage().value((\"Semaphore-test-\" + i).getBytes()).sendAsync());\n  }\n  Assert.assertEquals(producer.getSemaphore().get().availablePermits(),pendingQueueSize - messages);\n}\n  finally {\n  producer.getClientCnx().channel().config().setAutoRead(true);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 57,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2932,
        "startLineNumber" : 59,
        "startColumnNumber" : 128,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int pendingQueueSize=100;\n  @Cleanup ProducerImpl<byte[]> producer=(ProducerImpl<byte[]>)pulsarClient.newProducer().topic(\"testProducerSemaphoreAcquire\").maxPendingMessages(pendingQueueSize).enableBatching(false).create();\n  final int messages=10;\n  final List<CompletableFuture<MessageId>> futures=new ArrayList<>(messages);\n  producer.getClientCnx().channel().config().setAutoRead(false);\n  try {\n    for (int i=0; i < messages; i++) {\n      futures.add(producer.newMessage().value((\"Semaphore-test-\" + i).getBytes()).sendAsync());\n    }\n    Assert.assertEquals(producer.getSemaphore().get().availablePermits(),pendingQueueSize - messages);\n  }\n  finally {\n    producer.getClientCnx().channel().config().setAutoRead(true);\n  }\n  FutureUtil.waitForAll(futures).get();\n  Assert.assertEquals(producer.getSemaphore().get().availablePermits(),pendingQueueSize);\n  futures.clear();\n  producer.getClientCnx().channel().config().setAutoRead(false);\n  try {\n    for (int i=0; i < messages / 2; i++) {\n      MessageMetadata metadata=new MessageMetadata().setNumMessagesInBatch(10);\n      MessageImpl<byte[]> msg=MessageImpl.create(metadata,ByteBuffer.wrap(new byte[0]),Schema.BYTES);\n      futures.add(producer.sendAsync(msg));\n    }\n    Assert.assertEquals(producer.getSemaphore().get().availablePermits(),pendingQueueSize - messages / 2);\n  }\n  finally {\n    producer.getClientCnx().channel().config().setAutoRead(true);\n  }\n  FutureUtil.waitForAll(futures).get();\n  Assert.assertEquals(producer.getSemaphore().get().availablePermits(),pendingQueueSize);\n  futures.clear();\n  Assert.assertEquals(producer.getSemaphore().get().availablePermits(),pendingQueueSize);\n  producer.getClientCnx().channel().config().setAutoRead(false);\n  try {\n    for (int i=0; i < messages / 2; i++) {\n      futures.add(producer.newMessage().value((\"Semaphore-test-\" + i).getBytes()).sendAsync());\n    }\n    Assert.assertEquals(producer.getSemaphore().get().availablePermits(),pendingQueueSize - messages / 2);\n  }\n  finally {\n    producer.getClientCnx().channel().config().setAutoRead(true);\n  }\n  FutureUtil.waitForAll(futures).get();\n  Assert.assertEquals(producer.getSemaphore().get().availablePermits(),pendingQueueSize);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 377,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3083,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeOut=30000) public void testProducerSemaphoreAcquireAndRelease() throws PulsarClientException, ExecutionException, InterruptedException {\n  final int pendingQueueSize=100;\n  @Cleanup ProducerImpl<byte[]> producer=(ProducerImpl<byte[]>)pulsarClient.newProducer().topic(\"testProducerSemaphoreAcquire\").maxPendingMessages(pendingQueueSize).enableBatching(false).create();\n  final int messages=10;\n  final List<CompletableFuture<MessageId>> futures=new ArrayList<>(messages);\n  producer.getClientCnx().channel().config().setAutoRead(false);\n  try {\n    for (int i=0; i < messages; i++) {\n      futures.add(producer.newMessage().value((\"Semaphore-test-\" + i).getBytes()).sendAsync());\n    }\n    Assert.assertEquals(producer.getSemaphore().get().availablePermits(),pendingQueueSize - messages);\n  }\n  finally {\n    producer.getClientCnx().channel().config().setAutoRead(true);\n  }\n  FutureUtil.waitForAll(futures).get();\n  Assert.assertEquals(producer.getSemaphore().get().availablePermits(),pendingQueueSize);\n  futures.clear();\n  producer.getClientCnx().channel().config().setAutoRead(false);\n  try {\n    for (int i=0; i < messages / 2; i++) {\n      MessageMetadata metadata=new MessageMetadata().setNumMessagesInBatch(10);\n      MessageImpl<byte[]> msg=MessageImpl.create(metadata,ByteBuffer.wrap(new byte[0]),Schema.BYTES);\n      futures.add(producer.sendAsync(msg));\n    }\n    Assert.assertEquals(producer.getSemaphore().get().availablePermits(),pendingQueueSize - messages / 2);\n  }\n  finally {\n    producer.getClientCnx().channel().config().setAutoRead(true);\n  }\n  FutureUtil.waitForAll(futures).get();\n  Assert.assertEquals(producer.getSemaphore().get().availablePermits(),pendingQueueSize);\n  futures.clear();\n  Assert.assertEquals(producer.getSemaphore().get().availablePermits(),pendingQueueSize);\n  producer.getClientCnx().channel().config().setAutoRead(false);\n  try {\n    for (int i=0; i < messages / 2; i++) {\n      futures.add(producer.newMessage().value((\"Semaphore-test-\" + i).getBytes()).sendAsync());\n    }\n    Assert.assertEquals(producer.getSemaphore().get().availablePermits(),pendingQueueSize - messages / 2);\n  }\n  finally {\n    producer.getClientCnx().channel().config().setAutoRead(true);\n  }\n  FutureUtil.waitForAll(futures).get();\n  Assert.assertEquals(producer.getSemaphore().get().availablePermits(),pendingQueueSize);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 392,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < messages; i++) {\n  futures.add(producer.newMessage().value((\"Semaphore-test-\" + i).getBytes()).sendAsync());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 29,
      "astHeight" : 10
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 74,
    "startColumnNumber" : 28,
    "endLineNumber" : 74,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}