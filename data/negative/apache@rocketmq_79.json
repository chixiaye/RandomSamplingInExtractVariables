{
  "id" : 79,
  "expression" : "responseHeader.getQueueId()",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "responseHeader.getQueueId()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 451,
      "startColumnNumber" : 46,
      "endLineNumber" : 451,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 451,
        "startColumnNumber" : 16,
        "endLineNumber" : 451,
        "endColumnNumber" : 74
      },
      "nodeContext" : "sendMessageContext.setQueueId(responseHeader.getQueueId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 451,
        "startColumnNumber" : 16,
        "endLineNumber" : 451,
        "endColumnNumber" : 75
      },
      "nodeContext" : "sendMessageContext.setQueueId(responseHeader.getQueueId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 862,
        "startLineNumber" : 449,
        "startColumnNumber" : 38,
        "endLineNumber" : 462,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  sendMessageContext.setMsgId(responseHeader.getMsgId());\n  sendMessageContext.setQueueId(responseHeader.getQueueId());\n  sendMessageContext.setQueueOffset(responseHeader.getQueueOffset());\n  int commercialBaseCount=brokerController.getBrokerConfig().getCommercialBaseCount();\n  int wroteSize=putMessageResult.getAppendMessageResult().getWroteBytes();\n  int incValue=(int)Math.ceil(wroteSize / BrokerStatsManager.SIZE_PER_COUNT) * commercialBaseCount;\n  sendMessageContext.setCommercialSendStats(BrokerStatsManager.StatsType.SEND_SUCCESS);\n  sendMessageContext.setCommercialSendTimes(incValue);\n  sendMessageContext.setCommercialSendSize(wroteSize);\n  sendMessageContext.setCommercialOwner(owner);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 80,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 888,
        "startLineNumber" : 449,
        "startColumnNumber" : 12,
        "endLineNumber" : 462,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (hasSendMessageHook()) {\n  sendMessageContext.setMsgId(responseHeader.getMsgId());\n  sendMessageContext.setQueueId(responseHeader.getQueueId());\n  sendMessageContext.setQueueOffset(responseHeader.getQueueOffset());\n  int commercialBaseCount=brokerController.getBrokerConfig().getCommercialBaseCount();\n  int wroteSize=putMessageResult.getAppendMessageResult().getWroteBytes();\n  int incValue=(int)Math.ceil(wroteSize / BrokerStatsManager.SIZE_PER_COUNT) * commercialBaseCount;\n  sendMessageContext.setCommercialSendStats(BrokerStatsManager.StatsType.SEND_SUCCESS);\n  sendMessageContext.setCommercialSendTimes(incValue);\n  sendMessageContext.setCommercialSendSize(wroteSize);\n  sendMessageContext.setCommercialOwner(owner);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 83,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1720,
        "startLineNumber" : 434,
        "startColumnNumber" : 20,
        "endLineNumber" : 464,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.brokerController.getBrokerStatsManager().incTopicPutNums(msg.getTopic(),putMessageResult.getAppendMessageResult().getMsgNum(),1);\n  this.brokerController.getBrokerStatsManager().incTopicPutSize(msg.getTopic(),putMessageResult.getAppendMessageResult().getWroteBytes());\n  this.brokerController.getBrokerStatsManager().incBrokerPutNums(putMessageResult.getAppendMessageResult().getMsgNum());\n  response.setRemark(null);\n  responseHeader.setMsgId(putMessageResult.getAppendMessageResult().getMsgId());\n  responseHeader.setQueueId(queueIdInt);\n  responseHeader.setQueueOffset(putMessageResult.getAppendMessageResult().getLogicsOffset());\n  doResponse(ctx,request,response);\n  if (hasSendMessageHook()) {\n    sendMessageContext.setMsgId(responseHeader.getMsgId());\n    sendMessageContext.setQueueId(responseHeader.getQueueId());\n    sendMessageContext.setQueueOffset(responseHeader.getQueueOffset());\n    int commercialBaseCount=brokerController.getBrokerConfig().getCommercialBaseCount();\n    int wroteSize=putMessageResult.getAppendMessageResult().getWroteBytes();\n    int incValue=(int)Math.ceil(wroteSize / BrokerStatsManager.SIZE_PER_COUNT) * commercialBaseCount;\n    sendMessageContext.setCommercialSendStats(BrokerStatsManager.StatsType.SEND_SUCCESS);\n    sendMessageContext.setCommercialSendTimes(incValue);\n    sendMessageContext.setCommercialSendSize(wroteSize);\n    sendMessageContext.setCommercialOwner(owner);\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2259,
        "startLineNumber" : 434,
        "startColumnNumber" : 8,
        "endLineNumber" : 474,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (sendOK) {\n  this.brokerController.getBrokerStatsManager().incTopicPutNums(msg.getTopic(),putMessageResult.getAppendMessageResult().getMsgNum(),1);\n  this.brokerController.getBrokerStatsManager().incTopicPutSize(msg.getTopic(),putMessageResult.getAppendMessageResult().getWroteBytes());\n  this.brokerController.getBrokerStatsManager().incBrokerPutNums(putMessageResult.getAppendMessageResult().getMsgNum());\n  response.setRemark(null);\n  responseHeader.setMsgId(putMessageResult.getAppendMessageResult().getMsgId());\n  responseHeader.setQueueId(queueIdInt);\n  responseHeader.setQueueOffset(putMessageResult.getAppendMessageResult().getLogicsOffset());\n  doResponse(ctx,request,response);\n  if (hasSendMessageHook()) {\n    sendMessageContext.setMsgId(responseHeader.getMsgId());\n    sendMessageContext.setQueueId(responseHeader.getQueueId());\n    sendMessageContext.setQueueOffset(responseHeader.getQueueOffset());\n    int commercialBaseCount=brokerController.getBrokerConfig().getCommercialBaseCount();\n    int wroteSize=putMessageResult.getAppendMessageResult().getWroteBytes();\n    int incValue=(int)Math.ceil(wroteSize / BrokerStatsManager.SIZE_PER_COUNT) * commercialBaseCount;\n    sendMessageContext.setCommercialSendStats(BrokerStatsManager.StatsType.SEND_SUCCESS);\n    sendMessageContext.setCommercialSendTimes(incValue);\n    sendMessageContext.setCommercialSendSize(wroteSize);\n    sendMessageContext.setCommercialOwner(owner);\n  }\n  return null;\n}\n else {\n  if (hasSendMessageHook()) {\n    int wroteSize=request.getBody().length;\n    int incValue=(int)Math.ceil(wroteSize / BrokerStatsManager.SIZE_PER_COUNT);\n    sendMessageContext.setCommercialSendStats(BrokerStatsManager.StatsType.SEND_FAILURE);\n    sendMessageContext.setCommercialSendTimes(incValue);\n    sendMessageContext.setCommercialSendSize(wroteSize);\n    sendMessageContext.setCommercialOwner(owner);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4781,
        "startLineNumber" : 376,
        "startColumnNumber" : 24,
        "endLineNumber" : 476,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (putMessageResult == null) {\n    response.setCode(ResponseCode.SYSTEM_ERROR);\n    response.setRemark(\"store putMessage return null\");\n    return response;\n  }\n  boolean sendOK=false;\nswitch (putMessageResult.getPutMessageStatus()) {\ncase PUT_OK:    sendOK=true;\n  response.setCode(ResponseCode.SUCCESS);\nbreak;\ncase FLUSH_DISK_TIMEOUT:response.setCode(ResponseCode.FLUSH_DISK_TIMEOUT);\nsendOK=true;\nbreak;\ncase FLUSH_SLAVE_TIMEOUT:response.setCode(ResponseCode.FLUSH_SLAVE_TIMEOUT);\nsendOK=true;\nbreak;\ncase SLAVE_NOT_AVAILABLE:response.setCode(ResponseCode.SLAVE_NOT_AVAILABLE);\nsendOK=true;\nbreak;\ncase CREATE_MAPEDFILE_FAILED:response.setCode(ResponseCode.SYSTEM_ERROR);\nresponse.setRemark(\"create mapped file failed, server is busy or broken.\");\nbreak;\ncase MESSAGE_ILLEGAL:case PROPERTIES_SIZE_EXCEEDED:response.setCode(ResponseCode.MESSAGE_ILLEGAL);\nresponse.setRemark(\"the message is illegal, maybe msg body or properties length not matched. msg body length limit 128k, msg properties length limit 32k.\");\nbreak;\ncase SERVICE_NOT_AVAILABLE:response.setCode(ResponseCode.SERVICE_NOT_AVAILABLE);\nresponse.setRemark(\"service not available now, maybe disk full, \" + diskUtil() + \", maybe your broker machine memory too small.\");\nbreak;\ncase OS_PAGECACHE_BUSY:response.setCode(ResponseCode.SYSTEM_ERROR);\nresponse.setRemark(\"[PC_SYNCHRONIZED]broker busy, start flow control for a while\");\nbreak;\ncase UNKNOWN_ERROR:response.setCode(ResponseCode.SYSTEM_ERROR);\nresponse.setRemark(\"UNKNOWN_ERROR\");\nbreak;\ndefault:response.setCode(ResponseCode.SYSTEM_ERROR);\nresponse.setRemark(\"UNKNOWN_ERROR DEFAULT\");\nbreak;\n}\nString owner=request.getExtFields().get(BrokerStatsManager.COMMERCIAL_OWNER);\nif (sendOK) {\nthis.brokerController.getBrokerStatsManager().incTopicPutNums(msg.getTopic(),putMessageResult.getAppendMessageResult().getMsgNum(),1);\nthis.brokerController.getBrokerStatsManager().incTopicPutSize(msg.getTopic(),putMessageResult.getAppendMessageResult().getWroteBytes());\nthis.brokerController.getBrokerStatsManager().incBrokerPutNums(putMessageResult.getAppendMessageResult().getMsgNum());\nresponse.setRemark(null);\nresponseHeader.setMsgId(putMessageResult.getAppendMessageResult().getMsgId());\nresponseHeader.setQueueId(queueIdInt);\nresponseHeader.setQueueOffset(putMessageResult.getAppendMessageResult().getLogicsOffset());\ndoResponse(ctx,request,response);\nif (hasSendMessageHook()) {\nsendMessageContext.setMsgId(responseHeader.getMsgId());\nsendMessageContext.setQueueId(responseHeader.getQueueId());\nsendMessageContext.setQueueOffset(responseHeader.getQueueOffset());\nint commercialBaseCount=brokerController.getBrokerConfig().getCommercialBaseCount();\nint wroteSize=putMessageResult.getAppendMessageResult().getWroteBytes();\nint incValue=(int)Math.ceil(wroteSize / BrokerStatsManager.SIZE_PER_COUNT) * commercialBaseCount;\nsendMessageContext.setCommercialSendStats(BrokerStatsManager.StatsType.SEND_SUCCESS);\nsendMessageContext.setCommercialSendTimes(incValue);\nsendMessageContext.setCommercialSendSize(wroteSize);\nsendMessageContext.setCommercialOwner(owner);\n}\nreturn null;\n}\n else {\nif (hasSendMessageHook()) {\nint wroteSize=request.getBody().length;\nint incValue=(int)Math.ceil(wroteSize / BrokerStatsManager.SIZE_PER_COUNT);\nsendMessageContext.setCommercialSendStats(BrokerStatsManager.StatsType.SEND_FAILURE);\nsendMessageContext.setCommercialSendTimes(incValue);\nsendMessageContext.setCommercialSendSize(wroteSize);\nsendMessageContext.setCommercialOwner(owner);\n}\n}\nreturn response;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5078,
        "startLineNumber" : 373,
        "startColumnNumber" : 4,
        "endLineNumber" : 476,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private RemotingCommand handlePutMessageResult(PutMessageResult putMessageResult,RemotingCommand response,RemotingCommand request,MessageExt msg,SendMessageResponseHeader responseHeader,SendMessageContext sendMessageContext,ChannelHandlerContext ctx,int queueIdInt){\n  if (putMessageResult == null) {\n    response.setCode(ResponseCode.SYSTEM_ERROR);\n    response.setRemark(\"store putMessage return null\");\n    return response;\n  }\n  boolean sendOK=false;\nswitch (putMessageResult.getPutMessageStatus()) {\ncase PUT_OK:    sendOK=true;\n  response.setCode(ResponseCode.SUCCESS);\nbreak;\ncase FLUSH_DISK_TIMEOUT:response.setCode(ResponseCode.FLUSH_DISK_TIMEOUT);\nsendOK=true;\nbreak;\ncase FLUSH_SLAVE_TIMEOUT:response.setCode(ResponseCode.FLUSH_SLAVE_TIMEOUT);\nsendOK=true;\nbreak;\ncase SLAVE_NOT_AVAILABLE:response.setCode(ResponseCode.SLAVE_NOT_AVAILABLE);\nsendOK=true;\nbreak;\ncase CREATE_MAPEDFILE_FAILED:response.setCode(ResponseCode.SYSTEM_ERROR);\nresponse.setRemark(\"create mapped file failed, server is busy or broken.\");\nbreak;\ncase MESSAGE_ILLEGAL:case PROPERTIES_SIZE_EXCEEDED:response.setCode(ResponseCode.MESSAGE_ILLEGAL);\nresponse.setRemark(\"the message is illegal, maybe msg body or properties length not matched. msg body length limit 128k, msg properties length limit 32k.\");\nbreak;\ncase SERVICE_NOT_AVAILABLE:response.setCode(ResponseCode.SERVICE_NOT_AVAILABLE);\nresponse.setRemark(\"service not available now, maybe disk full, \" + diskUtil() + \", maybe your broker machine memory too small.\");\nbreak;\ncase OS_PAGECACHE_BUSY:response.setCode(ResponseCode.SYSTEM_ERROR);\nresponse.setRemark(\"[PC_SYNCHRONIZED]broker busy, start flow control for a while\");\nbreak;\ncase UNKNOWN_ERROR:response.setCode(ResponseCode.SYSTEM_ERROR);\nresponse.setRemark(\"UNKNOWN_ERROR\");\nbreak;\ndefault:response.setCode(ResponseCode.SYSTEM_ERROR);\nresponse.setRemark(\"UNKNOWN_ERROR DEFAULT\");\nbreak;\n}\nString owner=request.getExtFields().get(BrokerStatsManager.COMMERCIAL_OWNER);\nif (sendOK) {\nthis.brokerController.getBrokerStatsManager().incTopicPutNums(msg.getTopic(),putMessageResult.getAppendMessageResult().getMsgNum(),1);\nthis.brokerController.getBrokerStatsManager().incTopicPutSize(msg.getTopic(),putMessageResult.getAppendMessageResult().getWroteBytes());\nthis.brokerController.getBrokerStatsManager().incBrokerPutNums(putMessageResult.getAppendMessageResult().getMsgNum());\nresponse.setRemark(null);\nresponseHeader.setMsgId(putMessageResult.getAppendMessageResult().getMsgId());\nresponseHeader.setQueueId(queueIdInt);\nresponseHeader.setQueueOffset(putMessageResult.getAppendMessageResult().getLogicsOffset());\ndoResponse(ctx,request,response);\nif (hasSendMessageHook()) {\nsendMessageContext.setMsgId(responseHeader.getMsgId());\nsendMessageContext.setQueueId(responseHeader.getQueueId());\nsendMessageContext.setQueueOffset(responseHeader.getQueueOffset());\nint commercialBaseCount=brokerController.getBrokerConfig().getCommercialBaseCount();\nint wroteSize=putMessageResult.getAppendMessageResult().getWroteBytes();\nint incValue=(int)Math.ceil(wroteSize / BrokerStatsManager.SIZE_PER_COUNT) * commercialBaseCount;\nsendMessageContext.setCommercialSendStats(BrokerStatsManager.StatsType.SEND_SUCCESS);\nsendMessageContext.setCommercialSendTimes(incValue);\nsendMessageContext.setCommercialSendSize(wroteSize);\nsendMessageContext.setCommercialOwner(owner);\n}\nreturn null;\n}\n else {\nif (hasSendMessageHook()) {\nint wroteSize=request.getBody().length;\nint incValue=(int)Math.ceil(wroteSize / BrokerStatsManager.SIZE_PER_COUNT);\nsendMessageContext.setCommercialSendStats(BrokerStatsManager.StatsType.SEND_FAILURE);\nsendMessageContext.setCommercialSendTimes(incValue);\nsendMessageContext.setCommercialSendSize(wroteSize);\nsendMessageContext.setCommercialOwner(owner);\n}\n}\nreturn response;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 451,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 451,
        "startColumnNumber" : 16,
        "endLineNumber" : 451,
        "endColumnNumber" : 75
      },
      "nodeContext" : "sendMessageContext.setQueueId(responseHeader.getQueueId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.Integer"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 451,
    "startColumnNumber" : 46,
    "endLineNumber" : 451,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ ]
}