{
  "id" : 402,
  "expression" : "System",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/compaction/CompactionRetentionTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "System",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 124,
      "startColumnNumber" : 70,
      "endLineNumber" : 124,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 124,
        "startColumnNumber" : 70,
        "endLineNumber" : 124,
        "endColumnNumber" : 87
      },
      "nodeContext" : "System.nanoTime()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 124,
        "startColumnNumber" : 23,
        "endLineNumber" : 124,
        "endColumnNumber" : 87
      },
      "nodeContext" : "\"persistent://my-tenant/use/my-ns/my-topic-\" + System.nanoTime()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 124,
        "startColumnNumber" : 15,
        "endLineNumber" : 124,
        "endColumnNumber" : 87
      },
      "nodeContext" : "topic=\"persistent://my-tenant/use/my-ns/my-topic-\" + System.nanoTime()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 88
      },
      "nodeContext" : "String topic=\"persistent://my-tenant/use/my-ns/my-topic-\" + System.nanoTime();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2389,
        "startLineNumber" : 123,
        "startColumnNumber" : 50,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String topic=\"persistent://my-tenant/use/my-ns/my-topic-\" + System.nanoTime();\n  Set<String> keys=Sets.newHashSet(\"a\",\"b\",\"c\");\n  Set<String> keysToExpire=Sets.newHashSet(\"x1\",\"x2\");\n  Set<String> allKeys=new HashSet<>();\n  allKeys.addAll(keys);\n  allKeys.addAll(keysToExpire);\n  ObjectMapper mapper=new ObjectMapper();\n  mapper.configure(SerializationFeature.INDENT_OUTPUT,true);\n  @Cleanup Producer<Integer> producer=pulsarClient.newProducer(Schema.INT32).topic(topic).create();\n  Compactor compactor=new TwoPhaseCompactor(conf,pulsarClient,bk,compactionScheduler);\n  compactor.compact(topic).join();\n  log.info(\" ---- X 1: {}\",mapper.writeValueAsString(admin.topics().getInternalStats(topic,false)));\n  int round=1;\n  for (  String key : allKeys) {\n    producer.newMessage().key(key).value(round).send();\n  }\n  log.info(\" ---- X 2: {}\",mapper.writeValueAsString(admin.topics().getInternalStats(topic,false)));\n  validateMessages(pulsarClient,true,topic,round,allKeys);\n  compactor.compact(topic).join();\n  log.info(\" ---- X 3: {}\",mapper.writeValueAsString(admin.topics().getInternalStats(topic,false)));\n  validateMessages(pulsarClient,true,topic,round,allKeys);\n  round=2;\n  for (  String key : allKeys) {\n    producer.newMessage().key(key).value(round).send();\n  }\n  compactor.compact(topic).join();\n  validateMessages(pulsarClient,true,topic,round,allKeys);\n  for (  String key : keysToExpire) {\n    producer.newMessage().key(key).send();\n  }\n  compactor.compact(topic).join();\n  log.info(\" ---- X 4: {}\",mapper.writeValueAsString(admin.topics().getInternalStats(topic,false)));\n  validateMessages(pulsarClient,true,topic,round,keys);\n  validateMessages(pulsarClient,false,topic,round,Collections.emptySet());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 302,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2528,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Compaction should retain expired keys in the compacted view\n */\n@Test public void testCompaction() throws Exception {\n  String topic=\"persistent://my-tenant/use/my-ns/my-topic-\" + System.nanoTime();\n  Set<String> keys=Sets.newHashSet(\"a\",\"b\",\"c\");\n  Set<String> keysToExpire=Sets.newHashSet(\"x1\",\"x2\");\n  Set<String> allKeys=new HashSet<>();\n  allKeys.addAll(keys);\n  allKeys.addAll(keysToExpire);\n  ObjectMapper mapper=new ObjectMapper();\n  mapper.configure(SerializationFeature.INDENT_OUTPUT,true);\n  @Cleanup Producer<Integer> producer=pulsarClient.newProducer(Schema.INT32).topic(topic).create();\n  Compactor compactor=new TwoPhaseCompactor(conf,pulsarClient,bk,compactionScheduler);\n  compactor.compact(topic).join();\n  log.info(\" ---- X 1: {}\",mapper.writeValueAsString(admin.topics().getInternalStats(topic,false)));\n  int round=1;\n  for (  String key : allKeys) {\n    producer.newMessage().key(key).value(round).send();\n  }\n  log.info(\" ---- X 2: {}\",mapper.writeValueAsString(admin.topics().getInternalStats(topic,false)));\n  validateMessages(pulsarClient,true,topic,round,allKeys);\n  compactor.compact(topic).join();\n  log.info(\" ---- X 3: {}\",mapper.writeValueAsString(admin.topics().getInternalStats(topic,false)));\n  validateMessages(pulsarClient,true,topic,round,allKeys);\n  round=2;\n  for (  String key : allKeys) {\n    producer.newMessage().key(key).value(round).send();\n  }\n  compactor.compact(topic).join();\n  validateMessages(pulsarClient,true,topic,round,allKeys);\n  for (  String key : keysToExpire) {\n    producer.newMessage().key(key).send();\n  }\n  compactor.compact(topic).join();\n  log.info(\" ---- X 4: {}\",mapper.writeValueAsString(admin.topics().getInternalStats(topic,false)));\n  validateMessages(pulsarClient,true,topic,round,keys);\n  validateMessages(pulsarClient,false,topic,round,Collections.emptySet());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 311,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 88
      },
      "nodeContext" : "String topic=\"persistent://my-tenant/use/my-ns/my-topic-\" + System.nanoTime();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.System"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 124,
    "startColumnNumber" : 70,
    "endLineNumber" : 124,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}