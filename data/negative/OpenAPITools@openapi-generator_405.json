{
  "id" : 405,
  "expression" : "\"values\"",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "d68d65ce00c49b43ca238ada5d843cd9e681bff6",
  "filePath" : "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"values\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 1093,
      "startColumnNumber" : 77,
      "endLineNumber" : 1093,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 1093,
        "startColumnNumber" : 55,
        "endLineNumber" : 1093,
        "endColumnNumber" : 86
      },
      "nodeContext" : "p.allowableValues.get(\"values\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 1093,
        "startColumnNumber" : 40,
        "endLineNumber" : 1093,
        "endColumnNumber" : 86
      },
      "nodeContext" : "(List<Object>)p.allowableValues.get(\"values\")",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 1093,
        "startColumnNumber" : 31,
        "endLineNumber" : 1093,
        "endColumnNumber" : 86
      },
      "nodeContext" : "values=(List<Object>)p.allowableValues.get(\"values\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 1093,
        "startColumnNumber" : 12,
        "endLineNumber" : 1093,
        "endColumnNumber" : 87
      },
      "nodeContext" : "final List<Object> values=(List<Object>)p.allowableValues.get(\"values\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 1091,
        "startColumnNumber" : 32,
        "endLineNumber" : 1095,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final List<Object> values=(List<Object>)p.allowableValues.get(\"values\");\n  example=String.valueOf(values.get(0));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 357,
        "startLineNumber" : 1091,
        "startColumnNumber" : 8,
        "endLineNumber" : 1099,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (hasAllowableValues) {\n  final List<Object> values=(List<Object>)p.allowableValues.get(\"values\");\n  example=String.valueOf(values.get(0));\n}\n else if (p.defaultValue == null) {\n  example=p.example;\n}\n else {\n  example=p.defaultValue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3915,
        "startLineNumber" : 1087,
        "startColumnNumber" : 61,
        "endLineNumber" : 1193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String example;\n  boolean hasAllowableValues=p.allowableValues != null && !p.allowableValues.isEmpty();\n  if (hasAllowableValues) {\n    final List<Object> values=(List<Object>)p.allowableValues.get(\"values\");\n    example=String.valueOf(values.get(0));\n  }\n else   if (p.defaultValue == null) {\n    example=p.example;\n  }\n else {\n    example=p.defaultValue;\n  }\n  String type=p.baseType;\n  if (type == null) {\n    type=p.dataType;\n  }\n  if (\"String\".equals(type)) {\n    if (example == null) {\n      example=p.paramName + \"_example\";\n    }\n    example=\"\\\"\" + escapeText(example) + \"\\\"\";\n  }\n else   if (\"Integer\".equals(type) || \"Short\".equals(type)) {\n    if (example == null) {\n      example=\"56\";\n    }\n  }\n else   if (\"Long\".equals(type)) {\n    if (example == null) {\n      example=\"56\";\n    }\n    example=StringUtils.appendIfMissingIgnoreCase(example,\"L\");\n  }\n else   if (\"Float\".equals(type)) {\n    if (example == null) {\n      example=\"3.4\";\n    }\n    example=StringUtils.appendIfMissingIgnoreCase(example,\"F\");\n  }\n else   if (\"Double\".equals(type)) {\n    if (example == null) {\n      example=\"3.4\";\n    }\n    example=StringUtils.appendIfMissingIgnoreCase(example,\"D\");\n  }\n else   if (\"Boolean\".equals(type)) {\n    if (example == null) {\n      example=\"true\";\n    }\n  }\n else   if (\"File\".equals(type)) {\n    if (example == null) {\n      example=\"/path/to/file\";\n    }\n    example=\"new File(\\\"\" + escapeText(example) + \"\\\")\";\n  }\n else   if (\"Date\".equals(type)) {\n    example=\"new Date()\";\n  }\n else   if (\"LocalDate\".equals(type)) {\n    if (example == null) {\n      example=\"LocalDate.now()\";\n    }\n else {\n      example=\"LocalDate.parse(\\\"\" + example + \"\\\")\";\n    }\n  }\n else   if (\"OffsetDateTime\".equals(type)) {\n    if (example == null) {\n      example=\"OffsetDateTime.now()\";\n    }\n else {\n      example=\"OffsetDateTime.parse(\\\"\" + example + \"\\\")\";\n    }\n  }\n else   if (\"BigDecimal\".equals(type)) {\n    if (example == null) {\n      example=\"new BigDecimal(78)\";\n    }\n else {\n      example=\"new BigDecimal(\\\"\" + example + \"\\\")\";\n    }\n  }\n else   if (\"UUID\".equals(type)) {\n    if (example == null) {\n      example=\"UUID.randomUUID()\";\n    }\n else {\n      example=\"UUID.fromString(\\\"\" + example + \"\\\")\";\n    }\n  }\n else   if (hasAllowableValues) {\n    example=type + \".fromValue(\\\"\" + example+ \"\\\")\";\n  }\n else   if (!languageSpecificPrimitives.contains(type)) {\n    example=\"new \" + type + \"()\";\n  }\n  if (example == null) {\n    example=\"null\";\n  }\n else   if (Boolean.TRUE.equals(p.isArray)) {\n    if (p.items.defaultValue != null) {\n      String innerExample;\n      if (\"String\".equals(p.items.dataType)) {\n        innerExample=\"\\\"\" + p.items.defaultValue + \"\\\"\";\n      }\n else {\n        innerExample=p.items.defaultValue;\n      }\n      example=\"Arrays.asList(\" + innerExample + \")\";\n    }\n else {\n      example=\"Arrays.asList()\";\n    }\n  }\n else   if (Boolean.TRUE.equals(p.isMap)) {\n    example=\"new HashMap()\";\n  }\n  p.example=example;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 473,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3986,
        "startLineNumber" : 1086,
        "startColumnNumber" : 4,
        "endLineNumber" : 1193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void setParameterExampleValue(CodegenParameter p){\n  String example;\n  boolean hasAllowableValues=p.allowableValues != null && !p.allowableValues.isEmpty();\n  if (hasAllowableValues) {\n    final List<Object> values=(List<Object>)p.allowableValues.get(\"values\");\n    example=String.valueOf(values.get(0));\n  }\n else   if (p.defaultValue == null) {\n    example=p.example;\n  }\n else {\n    example=p.defaultValue;\n  }\n  String type=p.baseType;\n  if (type == null) {\n    type=p.dataType;\n  }\n  if (\"String\".equals(type)) {\n    if (example == null) {\n      example=p.paramName + \"_example\";\n    }\n    example=\"\\\"\" + escapeText(example) + \"\\\"\";\n  }\n else   if (\"Integer\".equals(type) || \"Short\".equals(type)) {\n    if (example == null) {\n      example=\"56\";\n    }\n  }\n else   if (\"Long\".equals(type)) {\n    if (example == null) {\n      example=\"56\";\n    }\n    example=StringUtils.appendIfMissingIgnoreCase(example,\"L\");\n  }\n else   if (\"Float\".equals(type)) {\n    if (example == null) {\n      example=\"3.4\";\n    }\n    example=StringUtils.appendIfMissingIgnoreCase(example,\"F\");\n  }\n else   if (\"Double\".equals(type)) {\n    if (example == null) {\n      example=\"3.4\";\n    }\n    example=StringUtils.appendIfMissingIgnoreCase(example,\"D\");\n  }\n else   if (\"Boolean\".equals(type)) {\n    if (example == null) {\n      example=\"true\";\n    }\n  }\n else   if (\"File\".equals(type)) {\n    if (example == null) {\n      example=\"/path/to/file\";\n    }\n    example=\"new File(\\\"\" + escapeText(example) + \"\\\")\";\n  }\n else   if (\"Date\".equals(type)) {\n    example=\"new Date()\";\n  }\n else   if (\"LocalDate\".equals(type)) {\n    if (example == null) {\n      example=\"LocalDate.now()\";\n    }\n else {\n      example=\"LocalDate.parse(\\\"\" + example + \"\\\")\";\n    }\n  }\n else   if (\"OffsetDateTime\".equals(type)) {\n    if (example == null) {\n      example=\"OffsetDateTime.now()\";\n    }\n else {\n      example=\"OffsetDateTime.parse(\\\"\" + example + \"\\\")\";\n    }\n  }\n else   if (\"BigDecimal\".equals(type)) {\n    if (example == null) {\n      example=\"new BigDecimal(78)\";\n    }\n else {\n      example=\"new BigDecimal(\\\"\" + example + \"\\\")\";\n    }\n  }\n else   if (\"UUID\".equals(type)) {\n    if (example == null) {\n      example=\"UUID.randomUUID()\";\n    }\n else {\n      example=\"UUID.fromString(\\\"\" + example + \"\\\")\";\n    }\n  }\n else   if (hasAllowableValues) {\n    example=type + \".fromValue(\\\"\" + example+ \"\\\")\";\n  }\n else   if (!languageSpecificPrimitives.contains(type)) {\n    example=\"new \" + type + \"()\";\n  }\n  if (example == null) {\n    example=\"null\";\n  }\n else   if (Boolean.TRUE.equals(p.isArray)) {\n    if (p.items.defaultValue != null) {\n      String innerExample;\n      if (\"String\".equals(p.items.dataType)) {\n        innerExample=\"\\\"\" + p.items.defaultValue + \"\\\"\";\n      }\n else {\n        innerExample=p.items.defaultValue;\n      }\n      example=\"Arrays.asList(\" + innerExample + \")\";\n    }\n else {\n      example=\"Arrays.asList()\";\n    }\n  }\n else   if (Boolean.TRUE.equals(p.isMap)) {\n    example=\"new HashMap()\";\n  }\n  p.example=example;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 483,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 1093,
        "startColumnNumber" : 12,
        "endLineNumber" : 1093,
        "endColumnNumber" : 87
      },
      "nodeContext" : "final List<Object> values=(List<Object>)p.allowableValues.get(\"values\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 1093,
    "startColumnNumber" : 77,
    "endLineNumber" : 1093,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ ]
}