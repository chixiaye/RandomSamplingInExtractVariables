{
  "id" : 471,
  "expression" : "lastValue",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/ui/Bar.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "lastValue",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 80,
      "startColumnNumber" : 11,
      "endLineNumber" : 80,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 80,
        "startColumnNumber" : 11,
        "endLineNumber" : 80,
        "endColumnNumber" : 31
      },
      "nodeContext" : "lastValue > computed",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (lastValue > computed) {\n  blink=1f;\n  lastValue=computed;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1647,
        "startLineNumber" : 70,
        "startColumnNumber" : 22,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (fraction == null)   return;\n  float computed;\n  try {\n    computed=Mathf.clamp(fraction.get());\n  }\n catch (  Exception e) {\n    computed=0f;\n  }\n  if (lastValue > computed) {\n    blink=1f;\n    lastValue=computed;\n  }\n  if (Float.isNaN(lastValue))   lastValue=0;\n  if (Float.isInfinite(lastValue))   lastValue=1f;\n  if (Float.isNaN(value))   value=0;\n  if (Float.isInfinite(value))   value=1f;\n  if (Float.isNaN(computed))   computed=0;\n  if (Float.isInfinite(computed))   computed=1f;\n  blink=Mathf.lerpDelta(blink,0f,0.2f);\n  value=Mathf.lerpDelta(value,computed,0.15f);\n  Drawable bar=Tex.bar;\n  Draw.colorl(0.1f);\n  bar.draw(x,y,width,height);\n  Draw.color(color,blinkColor,blink);\n  Drawable top=Tex.barTop;\n  float topWidth=width * value;\n  if (topWidth > Core.atlas.find(\"bar-top\").width) {\n    top.draw(x,y,topWidth,height);\n  }\n else {\n    if (ScissorStack.push(scissor.set(x,y,topWidth,height))) {\n      top.draw(x,y,Core.atlas.find(\"bar-top\").width,height);\n      ScissorStack.pop();\n    }\n  }\n  Draw.color();\n  Font font=Fonts.outline;\n  GlyphLayout lay=Pools.obtain(GlyphLayout.class,GlyphLayout::new);\n  lay.setText(font,name);\n  font.setColor(Color.white);\n  font.draw(name,x + width / 2f - lay.width / 2f,y + height / 2f + lay.height / 2f + 1);\n  Pools.free(lay);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1679,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void draw(){\n  if (fraction == null)   return;\n  float computed;\n  try {\n    computed=Mathf.clamp(fraction.get());\n  }\n catch (  Exception e) {\n    computed=0f;\n  }\n  if (lastValue > computed) {\n    blink=1f;\n    lastValue=computed;\n  }\n  if (Float.isNaN(lastValue))   lastValue=0;\n  if (Float.isInfinite(lastValue))   lastValue=1f;\n  if (Float.isNaN(value))   value=0;\n  if (Float.isInfinite(value))   value=1f;\n  if (Float.isNaN(computed))   computed=0;\n  if (Float.isInfinite(computed))   computed=1f;\n  blink=Mathf.lerpDelta(blink,0f,0.2f);\n  value=Mathf.lerpDelta(value,computed,0.15f);\n  Drawable bar=Tex.bar;\n  Draw.colorl(0.1f);\n  bar.draw(x,y,width,height);\n  Draw.color(color,blinkColor,blink);\n  Drawable top=Tex.barTop;\n  float topWidth=width * value;\n  if (topWidth > Core.atlas.find(\"bar-top\").width) {\n    top.draw(x,y,topWidth,height);\n  }\n else {\n    if (ScissorStack.push(scissor.set(x,y,topWidth,height))) {\n      top.draw(x,y,Core.atlas.find(\"bar-top\").width,height);\n      ScissorStack.pop();\n    }\n  }\n  Draw.color();\n  Font font=Fonts.outline;\n  GlyphLayout lay=Pools.obtain(GlyphLayout.class,GlyphLayout::new);\n  lay.setText(font,name);\n  font.setColor(Color.white);\n  font.draw(name,x + width / 2f - lay.width / 2f,y + height / 2f + lay.height / 2f + 1);\n  Pools.free(lay);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 80,
        "startColumnNumber" : 11,
        "endLineNumber" : 80,
        "endColumnNumber" : 31
      },
      "nodeContext" : "lastValue > computed",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "float"
  }, {
    "nodeContext" : "lastValue",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 85,
      "startColumnNumber" : 23,
      "endLineNumber" : 85,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 85,
        "startColumnNumber" : 11,
        "endLineNumber" : 85,
        "endColumnNumber" : 33
      },
      "nodeContext" : "Float.isNaN(lastValue)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 49
      },
      "nodeContext" : "if (Float.isNaN(lastValue)) lastValue=0;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1647,
        "startLineNumber" : 70,
        "startColumnNumber" : 22,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (fraction == null)   return;\n  float computed;\n  try {\n    computed=Mathf.clamp(fraction.get());\n  }\n catch (  Exception e) {\n    computed=0f;\n  }\n  if (lastValue > computed) {\n    blink=1f;\n    lastValue=computed;\n  }\n  if (Float.isNaN(lastValue))   lastValue=0;\n  if (Float.isInfinite(lastValue))   lastValue=1f;\n  if (Float.isNaN(value))   value=0;\n  if (Float.isInfinite(value))   value=1f;\n  if (Float.isNaN(computed))   computed=0;\n  if (Float.isInfinite(computed))   computed=1f;\n  blink=Mathf.lerpDelta(blink,0f,0.2f);\n  value=Mathf.lerpDelta(value,computed,0.15f);\n  Drawable bar=Tex.bar;\n  Draw.colorl(0.1f);\n  bar.draw(x,y,width,height);\n  Draw.color(color,blinkColor,blink);\n  Drawable top=Tex.barTop;\n  float topWidth=width * value;\n  if (topWidth > Core.atlas.find(\"bar-top\").width) {\n    top.draw(x,y,topWidth,height);\n  }\n else {\n    if (ScissorStack.push(scissor.set(x,y,topWidth,height))) {\n      top.draw(x,y,Core.atlas.find(\"bar-top\").width,height);\n      ScissorStack.pop();\n    }\n  }\n  Draw.color();\n  Font font=Fonts.outline;\n  GlyphLayout lay=Pools.obtain(GlyphLayout.class,GlyphLayout::new);\n  lay.setText(font,name);\n  font.setColor(Color.white);\n  font.draw(name,x + width / 2f - lay.width / 2f,y + height / 2f + lay.height / 2f + 1);\n  Pools.free(lay);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1679,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void draw(){\n  if (fraction == null)   return;\n  float computed;\n  try {\n    computed=Mathf.clamp(fraction.get());\n  }\n catch (  Exception e) {\n    computed=0f;\n  }\n  if (lastValue > computed) {\n    blink=1f;\n    lastValue=computed;\n  }\n  if (Float.isNaN(lastValue))   lastValue=0;\n  if (Float.isInfinite(lastValue))   lastValue=1f;\n  if (Float.isNaN(value))   value=0;\n  if (Float.isInfinite(value))   value=1f;\n  if (Float.isNaN(computed))   computed=0;\n  if (Float.isInfinite(computed))   computed=1f;\n  blink=Mathf.lerpDelta(blink,0f,0.2f);\n  value=Mathf.lerpDelta(value,computed,0.15f);\n  Drawable bar=Tex.bar;\n  Draw.colorl(0.1f);\n  bar.draw(x,y,width,height);\n  Draw.color(color,blinkColor,blink);\n  Drawable top=Tex.barTop;\n  float topWidth=width * value;\n  if (topWidth > Core.atlas.find(\"bar-top\").width) {\n    top.draw(x,y,topWidth,height);\n  }\n else {\n    if (ScissorStack.push(scissor.set(x,y,topWidth,height))) {\n      top.draw(x,y,Core.atlas.find(\"bar-top\").width,height);\n      ScissorStack.pop();\n    }\n  }\n  Draw.color();\n  Font font=Fonts.outline;\n  GlyphLayout lay=Pools.obtain(GlyphLayout.class,GlyphLayout::new);\n  lay.setText(font,name);\n  font.setColor(Color.white);\n  font.draw(name,x + width / 2f - lay.width / 2f,y + height / 2f + lay.height / 2f + 1);\n  Pools.free(lay);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 49
      },
      "nodeContext" : "if (Float.isNaN(lastValue)) lastValue=0;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "float"
  }, {
    "nodeContext" : "lastValue",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 86,
      "startColumnNumber" : 28,
      "endLineNumber" : 86,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 86,
        "startColumnNumber" : 11,
        "endLineNumber" : 86,
        "endColumnNumber" : 38
      },
      "nodeContext" : "Float.isInfinite(lastValue)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 55
      },
      "nodeContext" : "if (Float.isInfinite(lastValue)) lastValue=1f;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1647,
        "startLineNumber" : 70,
        "startColumnNumber" : 22,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (fraction == null)   return;\n  float computed;\n  try {\n    computed=Mathf.clamp(fraction.get());\n  }\n catch (  Exception e) {\n    computed=0f;\n  }\n  if (lastValue > computed) {\n    blink=1f;\n    lastValue=computed;\n  }\n  if (Float.isNaN(lastValue))   lastValue=0;\n  if (Float.isInfinite(lastValue))   lastValue=1f;\n  if (Float.isNaN(value))   value=0;\n  if (Float.isInfinite(value))   value=1f;\n  if (Float.isNaN(computed))   computed=0;\n  if (Float.isInfinite(computed))   computed=1f;\n  blink=Mathf.lerpDelta(blink,0f,0.2f);\n  value=Mathf.lerpDelta(value,computed,0.15f);\n  Drawable bar=Tex.bar;\n  Draw.colorl(0.1f);\n  bar.draw(x,y,width,height);\n  Draw.color(color,blinkColor,blink);\n  Drawable top=Tex.barTop;\n  float topWidth=width * value;\n  if (topWidth > Core.atlas.find(\"bar-top\").width) {\n    top.draw(x,y,topWidth,height);\n  }\n else {\n    if (ScissorStack.push(scissor.set(x,y,topWidth,height))) {\n      top.draw(x,y,Core.atlas.find(\"bar-top\").width,height);\n      ScissorStack.pop();\n    }\n  }\n  Draw.color();\n  Font font=Fonts.outline;\n  GlyphLayout lay=Pools.obtain(GlyphLayout.class,GlyphLayout::new);\n  lay.setText(font,name);\n  font.setColor(Color.white);\n  font.draw(name,x + width / 2f - lay.width / 2f,y + height / 2f + lay.height / 2f + 1);\n  Pools.free(lay);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1679,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void draw(){\n  if (fraction == null)   return;\n  float computed;\n  try {\n    computed=Mathf.clamp(fraction.get());\n  }\n catch (  Exception e) {\n    computed=0f;\n  }\n  if (lastValue > computed) {\n    blink=1f;\n    lastValue=computed;\n  }\n  if (Float.isNaN(lastValue))   lastValue=0;\n  if (Float.isInfinite(lastValue))   lastValue=1f;\n  if (Float.isNaN(value))   value=0;\n  if (Float.isInfinite(value))   value=1f;\n  if (Float.isNaN(computed))   computed=0;\n  if (Float.isInfinite(computed))   computed=1f;\n  blink=Mathf.lerpDelta(blink,0f,0.2f);\n  value=Mathf.lerpDelta(value,computed,0.15f);\n  Drawable bar=Tex.bar;\n  Draw.colorl(0.1f);\n  bar.draw(x,y,width,height);\n  Draw.color(color,blinkColor,blink);\n  Drawable top=Tex.barTop;\n  float topWidth=width * value;\n  if (topWidth > Core.atlas.find(\"bar-top\").width) {\n    top.draw(x,y,topWidth,height);\n  }\n else {\n    if (ScissorStack.push(scissor.set(x,y,topWidth,height))) {\n      top.draw(x,y,Core.atlas.find(\"bar-top\").width,height);\n      ScissorStack.pop();\n    }\n  }\n  Draw.color();\n  Font font=Fonts.outline;\n  GlyphLayout lay=Pools.obtain(GlyphLayout.class,GlyphLayout::new);\n  lay.setText(font,name);\n  font.setColor(Color.white);\n  font.draw(name,x + width / 2f - lay.width / 2f,y + height / 2f + lay.height / 2f + 1);\n  Pools.free(lay);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 55
      },
      "nodeContext" : "if (Float.isInfinite(lastValue)) lastValue=1f;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 80,
    "startColumnNumber" : 11,
    "endLineNumber" : 80,
    "endColumnNumber" : 20
  }, {
    "charLength" : 9,
    "startLineNumber" : 85,
    "startColumnNumber" : 23,
    "endLineNumber" : 85,
    "endColumnNumber" : 32
  }, {
    "charLength" : 9,
    "startLineNumber" : 86,
    "startColumnNumber" : 28,
    "endLineNumber" : 86,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}