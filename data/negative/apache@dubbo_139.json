{
  "id" : 139,
  "expression" : "entry.getValue() != null",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/util/DubboUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "entry.getValue() != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 206,
      "startColumnNumber" : 23,
      "endLineNumber" : 206,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 205,
        "startColumnNumber" : 16,
        "endLineNumber" : 206,
        "endColumnNumber" : 47
      },
      "nodeContext" : "propertyName.startsWith(DUBBO_PREFIX + PROPERTY_NAME_SEPARATOR) && entry.getValue() != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 208,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (propertyName.startsWith(DUBBO_PREFIX + PROPERTY_NAME_SEPARATOR) && entry.getValue() != null) {\n  dubboProperties.put(propertyName,environment.resolvePlaceholders(entry.getValue().toString()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 329,
        "startLineNumber" : 202,
        "startColumnNumber" : 70,
        "endLineNumber" : 210,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String propertyName=entry.getKey();\n  if (propertyName.startsWith(DUBBO_PREFIX + PROPERTY_NAME_SEPARATOR) && entry.getValue() != null) {\n    dubboProperties.put(propertyName,environment.resolvePlaceholders(entry.getValue().toString()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 391,
        "startLineNumber" : 202,
        "startColumnNumber" : 8,
        "endLineNumber" : 210,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,Object> entry : properties.entrySet()) {\n  String propertyName=entry.getKey();\n  if (propertyName.startsWith(DUBBO_PREFIX + PROPERTY_NAME_SEPARATOR) && entry.getValue() != null) {\n    dubboProperties.put(propertyName,environment.resolvePlaceholders(entry.getValue().toString()));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 51,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 646,
        "startLineNumber" : 196,
        "startColumnNumber" : 103,
        "endLineNumber" : 213,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SortedMap<String,Object> dubboProperties=new TreeMap<>();\n  Map<String,Object> properties=EnvironmentUtils.extractProperties(environment);\n  for (  Map.Entry<String,Object> entry : properties.entrySet()) {\n    String propertyName=entry.getKey();\n    if (propertyName.startsWith(DUBBO_PREFIX + PROPERTY_NAME_SEPARATOR) && entry.getValue() != null) {\n      dubboProperties.put(propertyName,environment.resolvePlaceholders(entry.getValue().toString()));\n    }\n  }\n  return Collections.unmodifiableSortedMap(dubboProperties);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 936,
        "startLineNumber" : 190,
        "startColumnNumber" : 4,
        "endLineNumber" : 213,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Filters Dubbo Properties from  {@link ConfigurableEnvironment}\n * @param environment {@link ConfigurableEnvironment}\n * @return Read-only SortedMap\n */\npublic static SortedMap<String,Object> filterDubboProperties(ConfigurableEnvironment environment){\n  SortedMap<String,Object> dubboProperties=new TreeMap<>();\n  Map<String,Object> properties=EnvironmentUtils.extractProperties(environment);\n  for (  Map.Entry<String,Object> entry : properties.entrySet()) {\n    String propertyName=entry.getKey();\n    if (propertyName.startsWith(DUBBO_PREFIX + PROPERTY_NAME_SEPARATOR) && entry.getValue() != null) {\n      dubboProperties.put(propertyName,environment.resolvePlaceholders(entry.getValue().toString()));\n    }\n  }\n  return Collections.unmodifiableSortedMap(dubboProperties);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 101,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 205,
        "startColumnNumber" : 16,
        "endLineNumber" : 206,
        "endColumnNumber" : 47
      },
      "nodeContext" : "propertyName.startsWith(DUBBO_PREFIX + PROPERTY_NAME_SEPARATOR) && entry.getValue() != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 206,
    "startColumnNumber" : 23,
    "endLineNumber" : 206,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}