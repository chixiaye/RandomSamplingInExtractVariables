{
  "id" : 198,
  "expression" : "Long.valueOf(subSequenceNumber)",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/model/SequenceNumber.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Long.valueOf(subSequenceNumber)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 68,
      "startColumnNumber" : 50,
      "endLineNumber" : 68,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 68,
        "startColumnNumber" : 50,
        "endLineNumber" : 68,
        "endColumnNumber" : 92
      },
      "nodeContext" : "Long.valueOf(subSequenceNumber).hashCode()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 68,
        "startColumnNumber" : 22,
        "endLineNumber" : 68,
        "endColumnNumber" : 92
      },
      "nodeContext" : "sequenceNumber.hashCode() + Long.valueOf(subSequenceNumber).hashCode()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 68,
        "startColumnNumber" : 21,
        "endLineNumber" : 68,
        "endColumnNumber" : 93
      },
      "nodeContext" : "(sequenceNumber.hashCode() + Long.valueOf(subSequenceNumber).hashCode())",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 68,
        "startColumnNumber" : 16,
        "endLineNumber" : 68,
        "endColumnNumber" : 93
      },
      "nodeContext" : "37 * (sequenceNumber.hashCode() + Long.valueOf(subSequenceNumber).hashCode())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 93
      },
      "nodeContext" : "this.cachedHash=37 * (sequenceNumber.hashCode() + Long.valueOf(subSequenceNumber).hashCode())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 94
      },
      "nodeContext" : "this.cachedHash=37 * (sequenceNumber.hashCode() + Long.valueOf(subSequenceNumber).hashCode());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 63,
        "startColumnNumber" : 73,
        "endLineNumber" : 69,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.sequenceNumber=checkNotNull(sequenceNumber);\n  this.subSequenceNumber=subSequenceNumber;\n  this.cachedHash=37 * (sequenceNumber.hashCode() + Long.valueOf(subSequenceNumber).hashCode());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 804,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Create a new instance, with the specified sequence number and subsequence number. To represent the sequence number for a non-aggregated Kinesis record, the subsequence number should be -1. Otherwise, give a non-negative sequence number to represent an aggregated Kinesis record.\n * @param sequenceNumber the sequence number\n * @param subSequenceNumber the subsequence number (-1 to represent non-aggregated Kinesisrecords)\n */\npublic SequenceNumber(String sequenceNumber,long subSequenceNumber){\n  this.sequenceNumber=checkNotNull(sequenceNumber);\n  this.subSequenceNumber=subSequenceNumber;\n  this.cachedHash=37 * (sequenceNumber.hashCode() + Long.valueOf(subSequenceNumber).hashCode());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 44,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 68,
        "startColumnNumber" : 16,
        "endLineNumber" : 68,
        "endColumnNumber" : 93
      },
      "nodeContext" : "37 * (sequenceNumber.hashCode() + Long.valueOf(subSequenceNumber).hashCode())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "java.lang.Long"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 68,
    "startColumnNumber" : 50,
    "endLineNumber" : 68,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}