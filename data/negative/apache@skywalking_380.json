{
  "id" : 380,
  "expression" : "queueName",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rabbitmq/RabbitMQProducerInterceptor.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "queueName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 76,
      "startColumnNumber" : 123,
      "endLineNumber" : 76,
      "endColumnNumber" : 132
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 76,
        "startColumnNumber" : 64,
        "endLineNumber" : 76,
        "endColumnNumber" : 163
      },
      "nodeContext" : "OPERATE_NAME_PREFIX + \"Topic/\" + exChangeName+ \"Queue/\"+ queueName+ PRODUCER_OPERATE_NAME_SUFFIX",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 76,
        "startColumnNumber" : 34,
        "endLineNumber" : 76,
        "endColumnNumber" : 185
      },
      "nodeContext" : "ContextManager.createExitSpan(OPERATE_NAME_PREFIX + \"Topic/\" + exChangeName+ \"Queue/\"+ queueName+ PRODUCER_OPERATE_NAME_SUFFIX,contextCarrier,url)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 76,
        "startColumnNumber" : 21,
        "endLineNumber" : 76,
        "endColumnNumber" : 185
      },
      "nodeContext" : "activeSpan=ContextManager.createExitSpan(OPERATE_NAME_PREFIX + \"Topic/\" + exChangeName+ \"Queue/\"+ queueName+ PRODUCER_OPERATE_NAME_SUFFIX,contextCarrier,url)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 186
      },
      "nodeContext" : "AbstractSpan activeSpan=ContextManager.createExitSpan(OPERATE_NAME_PREFIX + \"Topic/\" + exChangeName+ \"Queue/\"+ queueName+ PRODUCER_OPERATE_NAME_SUFFIX,contextCarrier,url);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2609,
        "startLineNumber" : 43,
        "startColumnNumber" : 55,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ContextCarrier contextCarrier=new ContextCarrier();\n  AMQP.BasicProperties properties=(AMQP.BasicProperties)allArguments[4];\n  AMQP.BasicProperties.Builder propertiesBuilder;\n  Map<String,Object> headers=new HashMap<String,Object>();\n  if (properties != null) {\n    propertiesBuilder=properties.builder().appId(properties.getAppId()).clusterId(properties.getClusterId()).contentEncoding(properties.getContentEncoding()).contentType(properties.getContentType()).correlationId(properties.getCorrelationId()).deliveryMode(properties.getDeliveryMode()).expiration(properties.getExpiration()).messageId(properties.getMessageId()).priority(properties.getPriority()).replyTo(properties.getReplyTo()).timestamp(properties.getTimestamp()).type(properties.getType()).userId(properties.getUserId());\n    if (properties.getHeaders() != null) {\n      headers.putAll(properties.getHeaders());\n    }\n  }\n else {\n    propertiesBuilder=new AMQP.BasicProperties.Builder();\n  }\n  String exChangeName=(String)allArguments[0];\n  String queueName=(String)allArguments[1];\n  String url=(String)objInst.getSkyWalkingDynamicField();\n  AbstractSpan activeSpan=ContextManager.createExitSpan(OPERATE_NAME_PREFIX + \"Topic/\" + exChangeName+ \"Queue/\"+ queueName+ PRODUCER_OPERATE_NAME_SUFFIX,contextCarrier,url);\n  Tags.MQ_BROKER.set(activeSpan,url);\n  Tags.MQ_QUEUE.set(activeSpan,queueName);\n  Tags.MQ_TOPIC.set(activeSpan,exChangeName);\n  contextCarrier.extensionInjector().injectSendingTimestamp();\n  SpanLayer.asMQ(activeSpan);\n  activeSpan.setComponent(ComponentsDefine.RABBITMQ_PRODUCER);\n  CarrierItem next=contextCarrier.items();\n  while (next.hasNext()) {\n    next=next.next();\n    headers.put(next.getHeadKey(),next.getHeadValue());\n  }\n  allArguments[4]=propertiesBuilder.headers(headers).build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2794,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void beforeMethod(EnhancedInstance objInst,Method method,Object[] allArguments,Class<?>[] argumentsTypes,MethodInterceptResult result) throws Throwable {\n  ContextCarrier contextCarrier=new ContextCarrier();\n  AMQP.BasicProperties properties=(AMQP.BasicProperties)allArguments[4];\n  AMQP.BasicProperties.Builder propertiesBuilder;\n  Map<String,Object> headers=new HashMap<String,Object>();\n  if (properties != null) {\n    propertiesBuilder=properties.builder().appId(properties.getAppId()).clusterId(properties.getClusterId()).contentEncoding(properties.getContentEncoding()).contentType(properties.getContentType()).correlationId(properties.getCorrelationId()).deliveryMode(properties.getDeliveryMode()).expiration(properties.getExpiration()).messageId(properties.getMessageId()).priority(properties.getPriority()).replyTo(properties.getReplyTo()).timestamp(properties.getTimestamp()).type(properties.getType()).userId(properties.getUserId());\n    if (properties.getHeaders() != null) {\n      headers.putAll(properties.getHeaders());\n    }\n  }\n else {\n    propertiesBuilder=new AMQP.BasicProperties.Builder();\n  }\n  String exChangeName=(String)allArguments[0];\n  String queueName=(String)allArguments[1];\n  String url=(String)objInst.getSkyWalkingDynamicField();\n  AbstractSpan activeSpan=ContextManager.createExitSpan(OPERATE_NAME_PREFIX + \"Topic/\" + exChangeName+ \"Queue/\"+ queueName+ PRODUCER_OPERATE_NAME_SUFFIX,contextCarrier,url);\n  Tags.MQ_BROKER.set(activeSpan,url);\n  Tags.MQ_QUEUE.set(activeSpan,queueName);\n  Tags.MQ_TOPIC.set(activeSpan,exChangeName);\n  contextCarrier.extensionInjector().injectSendingTimestamp();\n  SpanLayer.asMQ(activeSpan);\n  activeSpan.setComponent(ComponentsDefine.RABBITMQ_PRODUCER);\n  CarrierItem next=contextCarrier.items();\n  while (next.hasNext()) {\n    next=next.next();\n    headers.put(next.getHeadKey(),next.getHeadValue());\n  }\n  allArguments[4]=propertiesBuilder.headers(headers).build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 318,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 186
      },
      "nodeContext" : "AbstractSpan activeSpan=ContextManager.createExitSpan(OPERATE_NAME_PREFIX + \"Topic/\" + exChangeName+ \"Queue/\"+ queueName+ PRODUCER_OPERATE_NAME_SUFFIX,contextCarrier,url);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "queueName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 78,
      "startColumnNumber" : 38,
      "endLineNumber" : 78,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 48
      },
      "nodeContext" : "Tags.MQ_QUEUE.set(activeSpan,queueName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Tags.MQ_QUEUE.set(activeSpan,queueName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2609,
        "startLineNumber" : 43,
        "startColumnNumber" : 55,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ContextCarrier contextCarrier=new ContextCarrier();\n  AMQP.BasicProperties properties=(AMQP.BasicProperties)allArguments[4];\n  AMQP.BasicProperties.Builder propertiesBuilder;\n  Map<String,Object> headers=new HashMap<String,Object>();\n  if (properties != null) {\n    propertiesBuilder=properties.builder().appId(properties.getAppId()).clusterId(properties.getClusterId()).contentEncoding(properties.getContentEncoding()).contentType(properties.getContentType()).correlationId(properties.getCorrelationId()).deliveryMode(properties.getDeliveryMode()).expiration(properties.getExpiration()).messageId(properties.getMessageId()).priority(properties.getPriority()).replyTo(properties.getReplyTo()).timestamp(properties.getTimestamp()).type(properties.getType()).userId(properties.getUserId());\n    if (properties.getHeaders() != null) {\n      headers.putAll(properties.getHeaders());\n    }\n  }\n else {\n    propertiesBuilder=new AMQP.BasicProperties.Builder();\n  }\n  String exChangeName=(String)allArguments[0];\n  String queueName=(String)allArguments[1];\n  String url=(String)objInst.getSkyWalkingDynamicField();\n  AbstractSpan activeSpan=ContextManager.createExitSpan(OPERATE_NAME_PREFIX + \"Topic/\" + exChangeName+ \"Queue/\"+ queueName+ PRODUCER_OPERATE_NAME_SUFFIX,contextCarrier,url);\n  Tags.MQ_BROKER.set(activeSpan,url);\n  Tags.MQ_QUEUE.set(activeSpan,queueName);\n  Tags.MQ_TOPIC.set(activeSpan,exChangeName);\n  contextCarrier.extensionInjector().injectSendingTimestamp();\n  SpanLayer.asMQ(activeSpan);\n  activeSpan.setComponent(ComponentsDefine.RABBITMQ_PRODUCER);\n  CarrierItem next=contextCarrier.items();\n  while (next.hasNext()) {\n    next=next.next();\n    headers.put(next.getHeadKey(),next.getHeadValue());\n  }\n  allArguments[4]=propertiesBuilder.headers(headers).build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2794,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void beforeMethod(EnhancedInstance objInst,Method method,Object[] allArguments,Class<?>[] argumentsTypes,MethodInterceptResult result) throws Throwable {\n  ContextCarrier contextCarrier=new ContextCarrier();\n  AMQP.BasicProperties properties=(AMQP.BasicProperties)allArguments[4];\n  AMQP.BasicProperties.Builder propertiesBuilder;\n  Map<String,Object> headers=new HashMap<String,Object>();\n  if (properties != null) {\n    propertiesBuilder=properties.builder().appId(properties.getAppId()).clusterId(properties.getClusterId()).contentEncoding(properties.getContentEncoding()).contentType(properties.getContentType()).correlationId(properties.getCorrelationId()).deliveryMode(properties.getDeliveryMode()).expiration(properties.getExpiration()).messageId(properties.getMessageId()).priority(properties.getPriority()).replyTo(properties.getReplyTo()).timestamp(properties.getTimestamp()).type(properties.getType()).userId(properties.getUserId());\n    if (properties.getHeaders() != null) {\n      headers.putAll(properties.getHeaders());\n    }\n  }\n else {\n    propertiesBuilder=new AMQP.BasicProperties.Builder();\n  }\n  String exChangeName=(String)allArguments[0];\n  String queueName=(String)allArguments[1];\n  String url=(String)objInst.getSkyWalkingDynamicField();\n  AbstractSpan activeSpan=ContextManager.createExitSpan(OPERATE_NAME_PREFIX + \"Topic/\" + exChangeName+ \"Queue/\"+ queueName+ PRODUCER_OPERATE_NAME_SUFFIX,contextCarrier,url);\n  Tags.MQ_BROKER.set(activeSpan,url);\n  Tags.MQ_QUEUE.set(activeSpan,queueName);\n  Tags.MQ_TOPIC.set(activeSpan,exChangeName);\n  contextCarrier.extensionInjector().injectSendingTimestamp();\n  SpanLayer.asMQ(activeSpan);\n  activeSpan.setComponent(ComponentsDefine.RABBITMQ_PRODUCER);\n  CarrierItem next=contextCarrier.items();\n  while (next.hasNext()) {\n    next=next.next();\n    headers.put(next.getHeadKey(),next.getHeadValue());\n  }\n  allArguments[4]=propertiesBuilder.headers(headers).build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 318,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Tags.MQ_QUEUE.set(activeSpan,queueName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 76,
    "startColumnNumber" : 123,
    "endLineNumber" : 76,
    "endColumnNumber" : 132
  }, {
    "charLength" : 9,
    "startLineNumber" : 78,
    "startColumnNumber" : 38,
    "endLineNumber" : 78,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}