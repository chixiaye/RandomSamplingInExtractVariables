{
  "id" : 107,
  "expression" : "!found.isPresent()",
  "projectName" : "iluwatar@java-design-patterns",
  "commitID" : "428efc7d53449a51d25dfda4141742629ecbb0b2",
  "filePath" : "/layers/src/main/java/com/iluwatar/layers/service/CakeBakingServiceImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!found.isPresent()",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 76,
      "startColumnNumber" : 10,
      "endLineNumber" : 76,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 76,
        "startColumnNumber" : 6,
        "endLineNumber" : 80,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!found.isPresent()) {\n  throw new CakeBakingException(String.format(\"Layer %s is not available\",info.name));\n}\n else {\n  foundLayers.add(found.get());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 321,
        "startLineNumber" : 73,
        "startColumnNumber" : 55,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Optional<CakeLayer> found=allLayers.stream().filter(layer -> layer.getName().equals(info.name)).findFirst();\n  if (!found.isPresent()) {\n    throw new CakeBakingException(String.format(\"Layer %s is not available\",info.name));\n  }\n else {\n    foundLayers.add(found.get());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 372,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (CakeLayerInfo info : cakeInfo.cakeLayerInfos) {\n  Optional<CakeLayer> found=allLayers.stream().filter(layer -> layer.getName().equals(info.name)).findFirst();\n  if (!found.isPresent()) {\n    throw new CakeBakingException(String.format(\"Layer %s is not available\",info.name));\n  }\n else {\n    foundLayers.add(found.get());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1704,
        "startLineNumber" : 62,
        "startColumnNumber" : 72,
        "endLineNumber" : 102,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<CakeTopping> allToppings=getAvailableToppingEntities();\n  List<CakeTopping> matchingToppings=allToppings.stream().filter(t -> t.getName().equals(cakeInfo.cakeToppingInfo.name)).collect(Collectors.toList());\n  if (matchingToppings.isEmpty()) {\n    throw new CakeBakingException(String.format(\"Topping %s is not available\",cakeInfo.cakeToppingInfo.name));\n  }\n  List<CakeLayer> allLayers=getAvailableLayerEntities();\n  Set<CakeLayer> foundLayers=new HashSet<>();\n  for (  CakeLayerInfo info : cakeInfo.cakeLayerInfos) {\n    Optional<CakeLayer> found=allLayers.stream().filter(layer -> layer.getName().equals(info.name)).findFirst();\n    if (!found.isPresent()) {\n      throw new CakeBakingException(String.format(\"Layer %s is not available\",info.name));\n    }\n else {\n      foundLayers.add(found.get());\n    }\n  }\n  CakeToppingDao toppingBean=context.getBean(CakeToppingDao.class);\n  Optional<CakeTopping> topping=toppingBean.findById(matchingToppings.iterator().next().getId());\n  CakeDao cakeBean=context.getBean(CakeDao.class);\n  if (topping.isPresent()) {\n    Cake cake=new Cake();\n    cake.setTopping(topping.get());\n    cake.setLayers(foundLayers);\n    cakeBean.save(cake);\n    topping.get().setCake(cake);\n    toppingBean.save(topping.get());\n    CakeLayerDao layerBean=context.getBean(CakeLayerDao.class);\n    for (    CakeLayer layer : foundLayers) {\n      layer.setCake(cake);\n      layerBean.save(layer);\n    }\n  }\n else {\n    throw new CakeBakingException(String.format(\"Topping %s is not available\",cakeInfo.cakeToppingInfo.name));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1786,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 102,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void bakeNewCake(CakeInfo cakeInfo) throws CakeBakingException {\n  List<CakeTopping> allToppings=getAvailableToppingEntities();\n  List<CakeTopping> matchingToppings=allToppings.stream().filter(t -> t.getName().equals(cakeInfo.cakeToppingInfo.name)).collect(Collectors.toList());\n  if (matchingToppings.isEmpty()) {\n    throw new CakeBakingException(String.format(\"Topping %s is not available\",cakeInfo.cakeToppingInfo.name));\n  }\n  List<CakeLayer> allLayers=getAvailableLayerEntities();\n  Set<CakeLayer> foundLayers=new HashSet<>();\n  for (  CakeLayerInfo info : cakeInfo.cakeLayerInfos) {\n    Optional<CakeLayer> found=allLayers.stream().filter(layer -> layer.getName().equals(info.name)).findFirst();\n    if (!found.isPresent()) {\n      throw new CakeBakingException(String.format(\"Layer %s is not available\",info.name));\n    }\n else {\n      foundLayers.add(found.get());\n    }\n  }\n  CakeToppingDao toppingBean=context.getBean(CakeToppingDao.class);\n  Optional<CakeTopping> topping=toppingBean.findById(matchingToppings.iterator().next().getId());\n  CakeDao cakeBean=context.getBean(CakeDao.class);\n  if (topping.isPresent()) {\n    Cake cake=new Cake();\n    cake.setTopping(topping.get());\n    cake.setLayers(foundLayers);\n    cakeBean.save(cake);\n    topping.get().setCake(cake);\n    toppingBean.save(topping.get());\n    CakeLayerDao layerBean=context.getBean(CakeLayerDao.class);\n    for (    CakeLayer layer : foundLayers) {\n      layer.setCake(cake);\n      layerBean.save(layer);\n    }\n  }\n else {\n    throw new CakeBakingException(String.format(\"Topping %s is not available\",cakeInfo.cakeToppingInfo.name));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 280,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 76,
        "startColumnNumber" : 6,
        "endLineNumber" : 80,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!found.isPresent()) {\n  throw new CakeBakingException(String.format(\"Layer %s is not available\",info.name));\n}\n else {\n  foundLayers.add(found.get());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 76,
    "startColumnNumber" : 10,
    "endLineNumber" : 76,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}