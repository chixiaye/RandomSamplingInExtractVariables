{
  "id" : 150,
  "expression" : "\"Merged mode fetches target resource item from the server, applies attribute changes to it, and sends it\"",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/integration/client-cli/admin-cli/src/main/java/org/keycloak/client/admin/cli/commands/UpdateCmd.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Merged mode fetches target resource item from the server, applies attribute changes to it, and sends it\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 105,
      "startLineNumber" : 152,
      "startColumnNumber" : 20,
      "endLineNumber" : 152,
      "endColumnNumber" : 125
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 152,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 126
      },
      "nodeContext" : "out.println(\"Merged mode fetches target resource item from the server, applies attribute changes to it, and sends it\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 152,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 127
      },
      "nodeContext" : "out.println(\"Merged mode fetches target resource item from the server, applies attribute changes to it, and sends it\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6783,
        "startLineNumber" : 95,
        "startColumnNumber" : 33,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringWriter sb=new StringWriter();\n  PrintWriter out=new PrintWriter(sb);\n  out.println(\"Usage: \" + CMD + \" update ENDPOINT_URI [ARGUMENTS]\");\n  out.println();\n  out.println(\"Command to update existing resources on the server.\");\n  out.println();\n  out.println(\"Use '\" + CMD + \" config credentials' to establish an authenticated sessions, or use CREDENTIALS OPTIONS\");\n  out.println(\"to perform one time authentication.\");\n  out.println();\n  out.println(\"Arguments:\");\n  out.println();\n  out.println(\"  Global options:\");\n  out.println(\"    -x                    Print full stack trace when exiting with error\");\n  out.println(\"    --config              Path to the config file (\" + DEFAULT_CONFIG_FILE_STRING + \" by default)\");\n  out.println(\"    --no-config           Don't use config file - no authentication info is loaded or saved\");\n  out.println(\"    --token               Token to use to invoke on Keycloak.  Other credential may be ignored if this flag is set.\");\n  out.println(\"    --truststore PATH     Path to a truststore containing trusted certificates\");\n  out.println(\"    --trustpass PASSWORD  Truststore password (prompted for if not specified and --truststore is used)\");\n  out.println(\"    CREDENTIALS OPTIONS   Same set of options as accepted by '\" + CMD + \" config credentials' in order to establish\");\n  out.println(\"                          an authenticated sessions. In combination with --no-config option this allows transient\");\n  out.println(\"                          (on-the-fly) authentication to be performed which leaves no tokens in config file.\");\n  out.println();\n  out.println(\"  Command specific options:\");\n  out.println(\"    ENDPOINT_URI              URI used to compose a target resource url. Commonly used values start with:\");\n  out.println(\"                              realms/, users/, roles/, groups/, clients/, keys/, components/ ...\");\n  out.println(\"                              If it starts with 'http://' then it will be used as target resource url\");\n  out.println(\"    -r, --target-realm REALM  Target realm to issue requests against if not the one authenticated against\");\n  out.println(\"    -s, --set NAME=VALUE      Set a specific attribute NAME to a specified value VALUE\");\n  out.println(\"              NAME+=VALUE     Add item VALUE to list attribute NAME\");\n  out.println(\"    -d, --delete NAME         Remove a specific attribute NAME from JSON request body\");\n  out.println(\"    -f, --file FILENAME       Read object from file or standard input if FILENAME is set to '-'\");\n  out.println(\"    -b, --body CONTENT        Content to be sent as-is or used as a JSON object template\");\n  out.println(\"    -q, --query NAME=VALUE    Add to request URI a NAME query parameter with value VALUE\");\n  out.println(\"    -h, --header NAME=VALUE   Set request header NAME to VALUE\");\n  out.println(\"    -m, --merge               Merge new values with existing configuration on the server\");\n  out.println(\"                              Merge is automatically enabled unless --file is specified\");\n  out.println(\"    -n, --no-merge            Suppress merge mode\");\n  out.println();\n  out.println(\"    -H, --print-headers       Print response headers\");\n  out.println(\"    -o, --output              After update output the new resource to standard output\");\n  out.println(\"    -F, --fields FILTER       A filter pattern to specify which fields of a JSON response to output\");\n  out.println(\"                              Use '\" + CMD + \" get --help' for more info on FILTER syntax.\");\n  out.println(\"    -c, --compressed          Don't pretty print the output\");\n  out.println(\"    -a, --admin-root URL      URL of Admin REST endpoint root if not default - e.g. http://localhost:8080/auth/admin\");\n  out.println();\n  out.println();\n  out.println(\"Nested attributes are supported by using '.' to separate components of a KEY. Optionaly, the KEY components \");\n  out.println(\"can be quoted with double quotes - e.g. my_client.attributes.\\\"external.user.id\\\". If VALUE starts with [ and \");\n  out.println(\"ends with ] the attribute will be set as a JSON array. If VALUE starts with { and ends with } the attribute \");\n  out.println(\"will be set as a JSON object. If KEY ends with an array index - e.g. clients[3]=VALUE - then the specified item\");\n  out.println(\"of the array is updated. If KEY+=VALUE syntax is used, then KEY is assumed to be an array, and another item is\");\n  out.println(\"added to it.\");\n  out.println();\n  out.println(\"Attributes can also be deleted. If KEY ends with an array index, then the targeted item of an array is removed\");\n  out.println(\"and the following items are shifted.\");\n  out.println();\n  out.println(\"Merged mode fetches target resource item from the server, applies attribute changes to it, and sends it\");\n  out.println(\"back to the server.\");\n  out.println();\n  out.println();\n  out.println(\"Examples:\");\n  out.println();\n  out.println(\"Update a target realm by fetching current configuration from the server, and applying specified changes\");\n  out.println(\"  \" + PROMPT + \" \"+ CMD+ \" update realms/demorealm -s registrationAllowed=true\");\n  out.println();\n  out.println(\"Update a client by overwriting existing configuration using local file as a template (replace ID with client's 'id'):\");\n  if (OS_ARCH.isWindows()) {\n    out.println(\"  \" + PROMPT + \" \"+ CMD+ \" update clients/ID -f new_my_client.json -s \\\"redirectUris=[\\\\\\\"http://localhost:8080/myapp/*\\\\\\\"]\\\"\");\n  }\n else {\n    out.println(\"  \" + PROMPT + \" \"+ CMD+ \" update clients/ID -f new_my_client.json -s 'redirectUris=[\\\"http://localhost:8080/myapp/*\\\"]'\");\n  }\n  out.println();\n  out.println(\"Update client by fetching current configuration from server and merging with specified changes (replace ID with client's 'id'):\");\n  out.println(\"  \" + PROMPT + \" \"+ CMD+ \" update clients/ID -f new_my_client.json -s enabled=true --merge\");\n  out.println();\n  out.println(\"Reset user's password (replace ID with user's 'id'):\");\n  out.println(\"  \" + PROMPT + \" \"+ CMD+ \" update users/ID/reset-password -r demorealm -s type=password -s value=NEWPASSWORD -s temporary=true -n\");\n  out.println();\n  out.println();\n  out.println(\"Use '\" + CMD + \" help' for general information and a list of commands\");\n  return sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6812,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static String usage(){\n  StringWriter sb=new StringWriter();\n  PrintWriter out=new PrintWriter(sb);\n  out.println(\"Usage: \" + CMD + \" update ENDPOINT_URI [ARGUMENTS]\");\n  out.println();\n  out.println(\"Command to update existing resources on the server.\");\n  out.println();\n  out.println(\"Use '\" + CMD + \" config credentials' to establish an authenticated sessions, or use CREDENTIALS OPTIONS\");\n  out.println(\"to perform one time authentication.\");\n  out.println();\n  out.println(\"Arguments:\");\n  out.println();\n  out.println(\"  Global options:\");\n  out.println(\"    -x                    Print full stack trace when exiting with error\");\n  out.println(\"    --config              Path to the config file (\" + DEFAULT_CONFIG_FILE_STRING + \" by default)\");\n  out.println(\"    --no-config           Don't use config file - no authentication info is loaded or saved\");\n  out.println(\"    --token               Token to use to invoke on Keycloak.  Other credential may be ignored if this flag is set.\");\n  out.println(\"    --truststore PATH     Path to a truststore containing trusted certificates\");\n  out.println(\"    --trustpass PASSWORD  Truststore password (prompted for if not specified and --truststore is used)\");\n  out.println(\"    CREDENTIALS OPTIONS   Same set of options as accepted by '\" + CMD + \" config credentials' in order to establish\");\n  out.println(\"                          an authenticated sessions. In combination with --no-config option this allows transient\");\n  out.println(\"                          (on-the-fly) authentication to be performed which leaves no tokens in config file.\");\n  out.println();\n  out.println(\"  Command specific options:\");\n  out.println(\"    ENDPOINT_URI              URI used to compose a target resource url. Commonly used values start with:\");\n  out.println(\"                              realms/, users/, roles/, groups/, clients/, keys/, components/ ...\");\n  out.println(\"                              If it starts with 'http://' then it will be used as target resource url\");\n  out.println(\"    -r, --target-realm REALM  Target realm to issue requests against if not the one authenticated against\");\n  out.println(\"    -s, --set NAME=VALUE      Set a specific attribute NAME to a specified value VALUE\");\n  out.println(\"              NAME+=VALUE     Add item VALUE to list attribute NAME\");\n  out.println(\"    -d, --delete NAME         Remove a specific attribute NAME from JSON request body\");\n  out.println(\"    -f, --file FILENAME       Read object from file or standard input if FILENAME is set to '-'\");\n  out.println(\"    -b, --body CONTENT        Content to be sent as-is or used as a JSON object template\");\n  out.println(\"    -q, --query NAME=VALUE    Add to request URI a NAME query parameter with value VALUE\");\n  out.println(\"    -h, --header NAME=VALUE   Set request header NAME to VALUE\");\n  out.println(\"    -m, --merge               Merge new values with existing configuration on the server\");\n  out.println(\"                              Merge is automatically enabled unless --file is specified\");\n  out.println(\"    -n, --no-merge            Suppress merge mode\");\n  out.println();\n  out.println(\"    -H, --print-headers       Print response headers\");\n  out.println(\"    -o, --output              After update output the new resource to standard output\");\n  out.println(\"    -F, --fields FILTER       A filter pattern to specify which fields of a JSON response to output\");\n  out.println(\"                              Use '\" + CMD + \" get --help' for more info on FILTER syntax.\");\n  out.println(\"    -c, --compressed          Don't pretty print the output\");\n  out.println(\"    -a, --admin-root URL      URL of Admin REST endpoint root if not default - e.g. http://localhost:8080/auth/admin\");\n  out.println();\n  out.println();\n  out.println(\"Nested attributes are supported by using '.' to separate components of a KEY. Optionaly, the KEY components \");\n  out.println(\"can be quoted with double quotes - e.g. my_client.attributes.\\\"external.user.id\\\". If VALUE starts with [ and \");\n  out.println(\"ends with ] the attribute will be set as a JSON array. If VALUE starts with { and ends with } the attribute \");\n  out.println(\"will be set as a JSON object. If KEY ends with an array index - e.g. clients[3]=VALUE - then the specified item\");\n  out.println(\"of the array is updated. If KEY+=VALUE syntax is used, then KEY is assumed to be an array, and another item is\");\n  out.println(\"added to it.\");\n  out.println();\n  out.println(\"Attributes can also be deleted. If KEY ends with an array index, then the targeted item of an array is removed\");\n  out.println(\"and the following items are shifted.\");\n  out.println();\n  out.println(\"Merged mode fetches target resource item from the server, applies attribute changes to it, and sends it\");\n  out.println(\"back to the server.\");\n  out.println();\n  out.println();\n  out.println(\"Examples:\");\n  out.println();\n  out.println(\"Update a target realm by fetching current configuration from the server, and applying specified changes\");\n  out.println(\"  \" + PROMPT + \" \"+ CMD+ \" update realms/demorealm -s registrationAllowed=true\");\n  out.println();\n  out.println(\"Update a client by overwriting existing configuration using local file as a template (replace ID with client's 'id'):\");\n  if (OS_ARCH.isWindows()) {\n    out.println(\"  \" + PROMPT + \" \"+ CMD+ \" update clients/ID -f new_my_client.json -s \\\"redirectUris=[\\\\\\\"http://localhost:8080/myapp/*\\\\\\\"]\\\"\");\n  }\n else {\n    out.println(\"  \" + PROMPT + \" \"+ CMD+ \" update clients/ID -f new_my_client.json -s 'redirectUris=[\\\"http://localhost:8080/myapp/*\\\"]'\");\n  }\n  out.println();\n  out.println(\"Update client by fetching current configuration from server and merging with specified changes (replace ID with client's 'id'):\");\n  out.println(\"  \" + PROMPT + \" \"+ CMD+ \" update clients/ID -f new_my_client.json -s enabled=true --merge\");\n  out.println();\n  out.println(\"Reset user's password (replace ID with user's 'id'):\");\n  out.println(\"  \" + PROMPT + \" \"+ CMD+ \" update users/ID/reset-password -r demorealm -s type=password -s value=NEWPASSWORD -s temporary=true -n\");\n  out.println();\n  out.println();\n  out.println(\"Use '\" + CMD + \" help' for general information and a list of commands\");\n  return sb.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 434,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 152,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 127
      },
      "nodeContext" : "out.println(\"Merged mode fetches target resource item from the server, applies attribute changes to it, and sends it\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 17,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 105,
    "startLineNumber" : 152,
    "startColumnNumber" : 20,
    "endLineNumber" : 152,
    "endColumnNumber" : 125
  } ],
  "layoutRelationDataList" : [ ]
}