{
  "id" : 371,
  "expression" : "g.getTokenDisplayName(a.label)",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/automata/ATNPrinter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "g.getTokenDisplayName(a.label)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 90,
      "startColumnNumber" : 20,
      "endLineNumber" : 90,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 50
      },
      "nodeContext" : "label=g.getTokenDisplayName(a.label)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 90,
        "startColumnNumber" : 5,
        "endLineNumber" : 90,
        "endColumnNumber" : 51
      },
      "nodeContext" : "String label=g.getTokenDisplayName(a.label);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 88,
        "startColumnNumber" : 44,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  AtomTransition a=(AtomTransition)t;\n  String label=g.getTokenDisplayName(a.label);\n  buf.append(\"-\").append(label).append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 88,
        "startColumnNumber" : 9,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (t instanceof AtomTransition) {\n  AtomTransition a=(AtomTransition)t;\n  String label=g.getTokenDisplayName(a.label);\n  buf.append(\"-\").append(label).append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n else {\n  buf.append(\"-\").append(t.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 835,
        "startLineNumber" : 78,
        "startColumnNumber" : 9,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (t instanceof SetTransition) {\n  SetTransition st=(SetTransition)t;\n  boolean not=st instanceof NotSetTransition;\n  if (g.isLexer()) {\n    buf.append(\"-\").append(not ? \"~\" : \"\").append(st.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n else {\n    buf.append(\"-\").append(not ? \"~\" : \"\").append(st.label().toString(g.getVocabulary())).append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n}\n else if (t instanceof AtomTransition) {\n  AtomTransition a=(AtomTransition)t;\n  String label=g.getTokenDisplayName(a.label);\n  buf.append(\"-\").append(label).append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n else {\n  buf.append(\"-\").append(t.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 163,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1042,
        "startLineNumber" : 74,
        "startColumnNumber" : 9,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (t instanceof ActionTransition) {\n  ActionTransition a=(ActionTransition)t;\n  buf.append(\"-\").append(a.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n else if (t instanceof SetTransition) {\n  SetTransition st=(SetTransition)t;\n  boolean not=st instanceof NotSetTransition;\n  if (g.isLexer()) {\n    buf.append(\"-\").append(not ? \"~\" : \"\").append(st.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n else {\n    buf.append(\"-\").append(not ? \"~\" : \"\").append(st.label().toString(g.getVocabulary())).append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n}\n else if (t instanceof AtomTransition) {\n  AtomTransition a=(AtomTransition)t;\n  String label=g.getTokenDisplayName(a.label);\n  buf.append(\"-\").append(label).append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n else {\n  buf.append(\"-\").append(t.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 201,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1232,
        "startLineNumber" : 71,
        "startColumnNumber" : 9,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (t instanceof RuleTransition) {\n  buf.append(\"-\").append(g.getRule(((RuleTransition)t).ruleIndex).name).append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n else if (t instanceof ActionTransition) {\n  ActionTransition a=(ActionTransition)t;\n  buf.append(\"-\").append(a.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n else if (t instanceof SetTransition) {\n  SetTransition st=(SetTransition)t;\n  boolean not=st instanceof NotSetTransition;\n  if (g.isLexer()) {\n    buf.append(\"-\").append(not ? \"~\" : \"\").append(st.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n else {\n    buf.append(\"-\").append(not ? \"~\" : \"\").append(st.label().toString(g.getVocabulary())).append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n}\n else if (t instanceof AtomTransition) {\n  AtomTransition a=(AtomTransition)t;\n  String label=g.getTokenDisplayName(a.label);\n  buf.append(\"-\").append(label).append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n else {\n  buf.append(\"-\").append(t.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 239,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1359,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (t instanceof EpsilonTransition) {\n  buf.append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n else if (t instanceof RuleTransition) {\n  buf.append(\"-\").append(g.getRule(((RuleTransition)t).ruleIndex).name).append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n else if (t instanceof ActionTransition) {\n  ActionTransition a=(ActionTransition)t;\n  buf.append(\"-\").append(a.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n else if (t instanceof SetTransition) {\n  SetTransition st=(SetTransition)t;\n  boolean not=st instanceof NotSetTransition;\n  if (g.isLexer()) {\n    buf.append(\"-\").append(not ? \"~\" : \"\").append(st.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n else {\n    buf.append(\"-\").append(not ? \"~\" : \"\").append(st.label().toString(g.getVocabulary())).append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n}\n else if (t instanceof AtomTransition) {\n  AtomTransition a=(AtomTransition)t;\n  String label=g.getTokenDisplayName(a.label);\n  buf.append(\"-\").append(label).append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n else {\n  buf.append(\"-\").append(t.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 260,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1648,
        "startLineNumber" : 61,
        "startColumnNumber" : 27,
        "endLineNumber" : 96,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Transition t=s.transition(i);\n  if (!(s instanceof RuleStopState)) {\n    if (t instanceof RuleTransition)     work.add(((RuleTransition)t).followState);\n else     work.add(t.target);\n  }\n  buf.append(getStateString(s));\n  if (t instanceof EpsilonTransition) {\n    buf.append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n else   if (t instanceof RuleTransition) {\n    buf.append(\"-\").append(g.getRule(((RuleTransition)t).ruleIndex).name).append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n else   if (t instanceof ActionTransition) {\n    ActionTransition a=(ActionTransition)t;\n    buf.append(\"-\").append(a.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n else   if (t instanceof SetTransition) {\n    SetTransition st=(SetTransition)t;\n    boolean not=st instanceof NotSetTransition;\n    if (g.isLexer()) {\n      buf.append(\"-\").append(not ? \"~\" : \"\").append(st.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n    }\n else {\n      buf.append(\"-\").append(not ? \"~\" : \"\").append(st.label().toString(g.getVocabulary())).append(\"->\").append(getStateString(t.target)).append('\\n');\n    }\n  }\n else   if (t instanceof AtomTransition) {\n    AtomTransition a=(AtomTransition)t;\n    String label=g.getTokenDisplayName(a.label);\n    buf.append(\"-\").append(label).append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n else {\n    buf.append(\"-\").append(t.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 308,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1672,
        "startLineNumber" : 61,
        "startColumnNumber" : 3,
        "endLineNumber" : 96,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  Transition t=s.transition(i);\n  if (!(s instanceof RuleStopState)) {\n    if (t instanceof RuleTransition)     work.add(((RuleTransition)t).followState);\n else     work.add(t.target);\n  }\n  buf.append(getStateString(s));\n  if (t instanceof EpsilonTransition) {\n    buf.append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n else   if (t instanceof RuleTransition) {\n    buf.append(\"-\").append(g.getRule(((RuleTransition)t).ruleIndex).name).append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n else   if (t instanceof ActionTransition) {\n    ActionTransition a=(ActionTransition)t;\n    buf.append(\"-\").append(a.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n else   if (t instanceof SetTransition) {\n    SetTransition st=(SetTransition)t;\n    boolean not=st instanceof NotSetTransition;\n    if (g.isLexer()) {\n      buf.append(\"-\").append(not ? \"~\" : \"\").append(st.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n    }\n else {\n      buf.append(\"-\").append(not ? \"~\" : \"\").append(st.label().toString(g.getVocabulary())).append(\"->\").append(getStateString(t.target)).append('\\n');\n    }\n  }\n else   if (t instanceof AtomTransition) {\n    AtomTransition a=(AtomTransition)t;\n    String label=g.getTokenDisplayName(a.label);\n    buf.append(\"-\").append(label).append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n else {\n    buf.append(\"-\").append(t.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 319,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1857,
        "startLineNumber" : 55,
        "startColumnNumber" : 28,
        "endLineNumber" : 97,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  s=work.remove(0);\n  if (marked.contains(s))   continue;\n  int n=s.getNumberOfTransitions();\n  marked.add(s);\n  for (int i=0; i < n; i++) {\n    Transition t=s.transition(i);\n    if (!(s instanceof RuleStopState)) {\n      if (t instanceof RuleTransition)       work.add(((RuleTransition)t).followState);\n else       work.add(t.target);\n    }\n    buf.append(getStateString(s));\n    if (t instanceof EpsilonTransition) {\n      buf.append(\"->\").append(getStateString(t.target)).append('\\n');\n    }\n else     if (t instanceof RuleTransition) {\n      buf.append(\"-\").append(g.getRule(((RuleTransition)t).ruleIndex).name).append(\"->\").append(getStateString(t.target)).append('\\n');\n    }\n else     if (t instanceof ActionTransition) {\n      ActionTransition a=(ActionTransition)t;\n      buf.append(\"-\").append(a.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n    }\n else     if (t instanceof SetTransition) {\n      SetTransition st=(SetTransition)t;\n      boolean not=st instanceof NotSetTransition;\n      if (g.isLexer()) {\n        buf.append(\"-\").append(not ? \"~\" : \"\").append(st.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n      }\n else {\n        buf.append(\"-\").append(not ? \"~\" : \"\").append(st.label().toString(g.getVocabulary())).append(\"->\").append(getStateString(t.target)).append('\\n');\n      }\n    }\n else     if (t instanceof AtomTransition) {\n      AtomTransition a=(AtomTransition)t;\n      String label=g.getTokenDisplayName(a.label);\n      buf.append(\"-\").append(label).append(\"->\").append(getStateString(t.target)).append('\\n');\n    }\n else {\n      buf.append(\"-\").append(t.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1883,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 97,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (!work.isEmpty()) {\n  s=work.remove(0);\n  if (marked.contains(s))   continue;\n  int n=s.getNumberOfTransitions();\n  marked.add(s);\n  for (int i=0; i < n; i++) {\n    Transition t=s.transition(i);\n    if (!(s instanceof RuleStopState)) {\n      if (t instanceof RuleTransition)       work.add(((RuleTransition)t).followState);\n else       work.add(t.target);\n    }\n    buf.append(getStateString(s));\n    if (t instanceof EpsilonTransition) {\n      buf.append(\"->\").append(getStateString(t.target)).append('\\n');\n    }\n else     if (t instanceof RuleTransition) {\n      buf.append(\"-\").append(g.getRule(((RuleTransition)t).ruleIndex).name).append(\"->\").append(getStateString(t.target)).append('\\n');\n    }\n else     if (t instanceof ActionTransition) {\n      ActionTransition a=(ActionTransition)t;\n      buf.append(\"-\").append(a.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n    }\n else     if (t instanceof SetTransition) {\n      SetTransition st=(SetTransition)t;\n      boolean not=st instanceof NotSetTransition;\n      if (g.isLexer()) {\n        buf.append(\"-\").append(not ? \"~\" : \"\").append(st.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n      }\n else {\n        buf.append(\"-\").append(not ? \"~\" : \"\").append(st.label().toString(g.getVocabulary())).append(\"->\").append(getStateString(t.target)).append('\\n');\n      }\n    }\n else     if (t instanceof AtomTransition) {\n      AtomTransition a=(AtomTransition)t;\n      String label=g.getTokenDisplayName(a.label);\n      buf.append(\"-\").append(label).append(\"->\").append(getStateString(t.target)).append('\\n');\n    }\n else {\n      buf.append(\"-\").append(t.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 350,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2112,
        "startLineNumber" : 45,
        "startColumnNumber" : 26,
        "endLineNumber" : 99,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (start == null)   return null;\n  marked=new HashSet<ATNState>();\n  work=new ArrayList<ATNState>();\n  work.add(start);\n  StringBuilder buf=new StringBuilder();\n  ATNState s;\n  while (!work.isEmpty()) {\n    s=work.remove(0);\n    if (marked.contains(s))     continue;\n    int n=s.getNumberOfTransitions();\n    marked.add(s);\n    for (int i=0; i < n; i++) {\n      Transition t=s.transition(i);\n      if (!(s instanceof RuleStopState)) {\n        if (t instanceof RuleTransition)         work.add(((RuleTransition)t).followState);\n else         work.add(t.target);\n      }\n      buf.append(getStateString(s));\n      if (t instanceof EpsilonTransition) {\n        buf.append(\"->\").append(getStateString(t.target)).append('\\n');\n      }\n else       if (t instanceof RuleTransition) {\n        buf.append(\"-\").append(g.getRule(((RuleTransition)t).ruleIndex).name).append(\"->\").append(getStateString(t.target)).append('\\n');\n      }\n else       if (t instanceof ActionTransition) {\n        ActionTransition a=(ActionTransition)t;\n        buf.append(\"-\").append(a.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n      }\n else       if (t instanceof SetTransition) {\n        SetTransition st=(SetTransition)t;\n        boolean not=st instanceof NotSetTransition;\n        if (g.isLexer()) {\n          buf.append(\"-\").append(not ? \"~\" : \"\").append(st.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n        }\n else {\n          buf.append(\"-\").append(not ? \"~\" : \"\").append(st.label().toString(g.getVocabulary())).append(\"->\").append(getStateString(t.target)).append('\\n');\n        }\n      }\n else       if (t instanceof AtomTransition) {\n        AtomTransition a=(AtomTransition)t;\n        String label=g.getTokenDisplayName(a.label);\n        buf.append(\"-\").append(label).append(\"->\").append(getStateString(t.target)).append('\\n');\n      }\n else {\n        buf.append(\"-\").append(t.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n      }\n    }\n  }\n  return buf.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 397,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2137,
        "startLineNumber" : 45,
        "startColumnNumber" : 1,
        "endLineNumber" : 99,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public String asString(){\n  if (start == null)   return null;\n  marked=new HashSet<ATNState>();\n  work=new ArrayList<ATNState>();\n  work.add(start);\n  StringBuilder buf=new StringBuilder();\n  ATNState s;\n  while (!work.isEmpty()) {\n    s=work.remove(0);\n    if (marked.contains(s))     continue;\n    int n=s.getNumberOfTransitions();\n    marked.add(s);\n    for (int i=0; i < n; i++) {\n      Transition t=s.transition(i);\n      if (!(s instanceof RuleStopState)) {\n        if (t instanceof RuleTransition)         work.add(((RuleTransition)t).followState);\n else         work.add(t.target);\n      }\n      buf.append(getStateString(s));\n      if (t instanceof EpsilonTransition) {\n        buf.append(\"->\").append(getStateString(t.target)).append('\\n');\n      }\n else       if (t instanceof RuleTransition) {\n        buf.append(\"-\").append(g.getRule(((RuleTransition)t).ruleIndex).name).append(\"->\").append(getStateString(t.target)).append('\\n');\n      }\n else       if (t instanceof ActionTransition) {\n        ActionTransition a=(ActionTransition)t;\n        buf.append(\"-\").append(a.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n      }\n else       if (t instanceof SetTransition) {\n        SetTransition st=(SetTransition)t;\n        boolean not=st instanceof NotSetTransition;\n        if (g.isLexer()) {\n          buf.append(\"-\").append(not ? \"~\" : \"\").append(st.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n        }\n else {\n          buf.append(\"-\").append(not ? \"~\" : \"\").append(st.label().toString(g.getVocabulary())).append(\"->\").append(getStateString(t.target)).append('\\n');\n        }\n      }\n else       if (t instanceof AtomTransition) {\n        AtomTransition a=(AtomTransition)t;\n        String label=g.getTokenDisplayName(a.label);\n        buf.append(\"-\").append(label).append(\"->\").append(getStateString(t.target)).append('\\n');\n      }\n else {\n        buf.append(\"-\").append(t.toString()).append(\"->\").append(getStateString(t.target)).append('\\n');\n      }\n    }\n  }\n  return buf.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 402,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 90,
        "startColumnNumber" : 5,
        "endLineNumber" : 90,
        "endColumnNumber" : 51
      },
      "nodeContext" : "String label=g.getTokenDisplayName(a.label);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 90,
    "startColumnNumber" : 20,
    "endLineNumber" : 90,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}