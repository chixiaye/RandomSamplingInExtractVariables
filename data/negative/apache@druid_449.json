{
  "id" : 449,
  "expression" : "valueChunkFactor",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/segment/data/V3CompressedVSizeColumnarMultiIntsSerializerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "valueChunkFactor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 216,
      "startColumnNumber" : 10,
      "endLineNumber" : 216,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 229,
        "startLineNumber" : 211,
        "startColumnNumber" : 58,
        "endLineNumber" : 219,
        "endColumnNumber" : 7
      },
      "nodeContext" : "new CompressedVSizeColumnarIntsSerializer(TEST_COLUMN_NAME,segmentWriteOutMedium,\"value\",maxValue,valueChunkFactor,byteOrder,compressionStrategy)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 211,
        "startColumnNumber" : 44,
        "endLineNumber" : 219,
        "endColumnNumber" : 7
      },
      "nodeContext" : "valueWriter=new CompressedVSizeColumnarIntsSerializer(TEST_COLUMN_NAME,segmentWriteOutMedium,\"value\",maxValue,valueChunkFactor,byteOrder,compressionStrategy)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 282,
        "startLineNumber" : 211,
        "startColumnNumber" : 6,
        "endLineNumber" : 219,
        "endColumnNumber" : 8
      },
      "nodeContext" : "CompressedVSizeColumnarIntsSerializer valueWriter=new CompressedVSizeColumnarIntsSerializer(TEST_COLUMN_NAME,segmentWriteOutMedium,\"value\",maxValue,valueChunkFactor,byteOrder,compressionStrategy);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2364,
        "startLineNumber" : 201,
        "startColumnNumber" : 97,
        "endLineNumber" : 258,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int maxValue=vals.size() > 0 ? getMaxValue(vals) : 0;\n  CompressedColumnarIntsSerializer offsetWriter=new CompressedColumnarIntsSerializer(TEST_COLUMN_NAME,segmentWriteOutMedium,\"offset\",offsetChunkFactor,byteOrder,compressionStrategy);\n  CompressedVSizeColumnarIntsSerializer valueWriter=new CompressedVSizeColumnarIntsSerializer(TEST_COLUMN_NAME,segmentWriteOutMedium,\"value\",maxValue,valueChunkFactor,byteOrder,compressionStrategy);\n  V3CompressedVSizeColumnarMultiIntsSerializer writer=new V3CompressedVSizeColumnarMultiIntsSerializer(TEST_COLUMN_NAME,offsetWriter,valueWriter);\n  V3CompressedVSizeColumnarMultiIntsSupplier supplierFromIterable=V3CompressedVSizeColumnarMultiIntsSupplier.fromIterable(Iterables.transform(vals,ArrayBasedIndexedInts::new),offsetChunkFactor,maxValue,byteOrder,compressionStrategy,segmentWriteOutMedium.getCloser());\n  writer.open();\n  for (  int[] val : vals) {\n    writer.addValues(new ArrayBasedIndexedInts(val));\n  }\n  long writtenLength=writer.getSerializedSize();\n  final WriteOutBytes writeOutBytes=segmentWriteOutMedium.makeWriteOutBytes();\n  writer.writeTo(writeOutBytes,smoosher);\n  smoosher.close();\n  Assert.assertEquals(writtenLength,supplierFromIterable.getSerializedSize());\n  V3CompressedVSizeColumnarMultiIntsSupplier supplierFromByteBuffer=V3CompressedVSizeColumnarMultiIntsSupplier.fromByteBuffer(ByteBuffer.wrap(IOUtils.toByteArray(writeOutBytes.asInputStream())),byteOrder);\n  try (final ColumnarMultiInts columnarMultiInts=supplierFromByteBuffer.get()){\n    Assert.assertEquals(columnarMultiInts.size(),vals.size());\n    for (int i=0; i < vals.size(); ++i) {\n      IndexedInts subVals=columnarMultiInts.get(i);\n      Assert.assertEquals(subVals.size(),vals.get(i).length);\n      for (int j=0, size=subVals.size(); j < size; ++j) {\n        Assert.assertEquals(subVals.get(j),vals.get(i)[j]);\n      }\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2457,
        "startLineNumber" : 201,
        "startColumnNumber" : 4,
        "endLineNumber" : 258,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium()){\n  int maxValue=vals.size() > 0 ? getMaxValue(vals) : 0;\n  CompressedColumnarIntsSerializer offsetWriter=new CompressedColumnarIntsSerializer(TEST_COLUMN_NAME,segmentWriteOutMedium,\"offset\",offsetChunkFactor,byteOrder,compressionStrategy);\n  CompressedVSizeColumnarIntsSerializer valueWriter=new CompressedVSizeColumnarIntsSerializer(TEST_COLUMN_NAME,segmentWriteOutMedium,\"value\",maxValue,valueChunkFactor,byteOrder,compressionStrategy);\n  V3CompressedVSizeColumnarMultiIntsSerializer writer=new V3CompressedVSizeColumnarMultiIntsSerializer(TEST_COLUMN_NAME,offsetWriter,valueWriter);\n  V3CompressedVSizeColumnarMultiIntsSupplier supplierFromIterable=V3CompressedVSizeColumnarMultiIntsSupplier.fromIterable(Iterables.transform(vals,ArrayBasedIndexedInts::new),offsetChunkFactor,maxValue,byteOrder,compressionStrategy,segmentWriteOutMedium.getCloser());\n  writer.open();\n  for (  int[] val : vals) {\n    writer.addValues(new ArrayBasedIndexedInts(val));\n  }\n  long writtenLength=writer.getSerializedSize();\n  final WriteOutBytes writeOutBytes=segmentWriteOutMedium.makeWriteOutBytes();\n  writer.writeTo(writeOutBytes,smoosher);\n  smoosher.close();\n  Assert.assertEquals(writtenLength,supplierFromIterable.getSerializedSize());\n  V3CompressedVSizeColumnarMultiIntsSupplier supplierFromByteBuffer=V3CompressedVSizeColumnarMultiIntsSupplier.fromByteBuffer(ByteBuffer.wrap(IOUtils.toByteArray(writeOutBytes.asInputStream())),byteOrder);\n  try (final ColumnarMultiInts columnarMultiInts=supplierFromByteBuffer.get()){\n    Assert.assertEquals(columnarMultiInts.size(),vals.size());\n    for (int i=0; i < vals.size(); ++i) {\n      IndexedInts subVals=columnarMultiInts.get(i);\n      Assert.assertEquals(subVals.size(),vals.get(i).length);\n      for (int j=0, size=subVals.size(); j < size; ++j) {\n        Assert.assertEquals(subVals.get(j),vals.get(i)[j]);\n      }\n    }\n  }\n }\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 246,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2543,
        "startLineNumber" : 198,
        "startColumnNumber" : 2,
        "endLineNumber" : 259,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  FileSmoosher smoosher=new FileSmoosher(temporaryFolder.newFolder());\n  try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium()){\n    int maxValue=vals.size() > 0 ? getMaxValue(vals) : 0;\n    CompressedColumnarIntsSerializer offsetWriter=new CompressedColumnarIntsSerializer(TEST_COLUMN_NAME,segmentWriteOutMedium,\"offset\",offsetChunkFactor,byteOrder,compressionStrategy);\n    CompressedVSizeColumnarIntsSerializer valueWriter=new CompressedVSizeColumnarIntsSerializer(TEST_COLUMN_NAME,segmentWriteOutMedium,\"value\",maxValue,valueChunkFactor,byteOrder,compressionStrategy);\n    V3CompressedVSizeColumnarMultiIntsSerializer writer=new V3CompressedVSizeColumnarMultiIntsSerializer(TEST_COLUMN_NAME,offsetWriter,valueWriter);\n    V3CompressedVSizeColumnarMultiIntsSupplier supplierFromIterable=V3CompressedVSizeColumnarMultiIntsSupplier.fromIterable(Iterables.transform(vals,ArrayBasedIndexedInts::new),offsetChunkFactor,maxValue,byteOrder,compressionStrategy,segmentWriteOutMedium.getCloser());\n    writer.open();\n    for (    int[] val : vals) {\n      writer.addValues(new ArrayBasedIndexedInts(val));\n    }\n    long writtenLength=writer.getSerializedSize();\n    final WriteOutBytes writeOutBytes=segmentWriteOutMedium.makeWriteOutBytes();\n    writer.writeTo(writeOutBytes,smoosher);\n    smoosher.close();\n    Assert.assertEquals(writtenLength,supplierFromIterable.getSerializedSize());\n    V3CompressedVSizeColumnarMultiIntsSupplier supplierFromByteBuffer=V3CompressedVSizeColumnarMultiIntsSupplier.fromByteBuffer(ByteBuffer.wrap(IOUtils.toByteArray(writeOutBytes.asInputStream())),byteOrder);\n    try (final ColumnarMultiInts columnarMultiInts=supplierFromByteBuffer.get()){\n      Assert.assertEquals(columnarMultiInts.size(),vals.size());\n      for (int i=0; i < vals.size(); ++i) {\n        IndexedInts subVals=columnarMultiInts.get(i);\n        Assert.assertEquals(subVals.size(),vals.get(i).length);\n        for (int j=0, size=subVals.size(); j < size; ++j) {\n          Assert.assertEquals(subVals.get(j),vals.get(i)[j]);\n        }\n      }\n    }\n   }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 258,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2647,
        "startLineNumber" : 197,
        "startColumnNumber" : 2,
        "endLineNumber" : 259,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void checkSerializedSizeAndData(int offsetChunkFactor,int valueChunkFactor) throws Exception {\n  FileSmoosher smoosher=new FileSmoosher(temporaryFolder.newFolder());\n  try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium()){\n    int maxValue=vals.size() > 0 ? getMaxValue(vals) : 0;\n    CompressedColumnarIntsSerializer offsetWriter=new CompressedColumnarIntsSerializer(TEST_COLUMN_NAME,segmentWriteOutMedium,\"offset\",offsetChunkFactor,byteOrder,compressionStrategy);\n    CompressedVSizeColumnarIntsSerializer valueWriter=new CompressedVSizeColumnarIntsSerializer(TEST_COLUMN_NAME,segmentWriteOutMedium,\"value\",maxValue,valueChunkFactor,byteOrder,compressionStrategy);\n    V3CompressedVSizeColumnarMultiIntsSerializer writer=new V3CompressedVSizeColumnarMultiIntsSerializer(TEST_COLUMN_NAME,offsetWriter,valueWriter);\n    V3CompressedVSizeColumnarMultiIntsSupplier supplierFromIterable=V3CompressedVSizeColumnarMultiIntsSupplier.fromIterable(Iterables.transform(vals,ArrayBasedIndexedInts::new),offsetChunkFactor,maxValue,byteOrder,compressionStrategy,segmentWriteOutMedium.getCloser());\n    writer.open();\n    for (    int[] val : vals) {\n      writer.addValues(new ArrayBasedIndexedInts(val));\n    }\n    long writtenLength=writer.getSerializedSize();\n    final WriteOutBytes writeOutBytes=segmentWriteOutMedium.makeWriteOutBytes();\n    writer.writeTo(writeOutBytes,smoosher);\n    smoosher.close();\n    Assert.assertEquals(writtenLength,supplierFromIterable.getSerializedSize());\n    V3CompressedVSizeColumnarMultiIntsSupplier supplierFromByteBuffer=V3CompressedVSizeColumnarMultiIntsSupplier.fromByteBuffer(ByteBuffer.wrap(IOUtils.toByteArray(writeOutBytes.asInputStream())),byteOrder);\n    try (final ColumnarMultiInts columnarMultiInts=supplierFromByteBuffer.get()){\n      Assert.assertEquals(columnarMultiInts.size(),vals.size());\n      for (int i=0; i < vals.size(); ++i) {\n        IndexedInts subVals=columnarMultiInts.get(i);\n        Assert.assertEquals(subVals.size(),vals.get(i).length);\n        for (int j=0, size=subVals.size(); j < size; ++j) {\n          Assert.assertEquals(subVals.get(j),vals.get(i)[j]);\n        }\n      }\n    }\n   }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 229,
        "startLineNumber" : 211,
        "startColumnNumber" : 58,
        "endLineNumber" : 219,
        "endColumnNumber" : 7
      },
      "nodeContext" : "new CompressedVSizeColumnarIntsSerializer(TEST_COLUMN_NAME,segmentWriteOutMedium,\"value\",maxValue,valueChunkFactor,byteOrder,compressionStrategy)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 216,
    "startColumnNumber" : 10,
    "endLineNumber" : 216,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}