{
  "id" : 26,
  "expression" : "TokenVerifier.create(reviewRequest.getSpec().getToken(),AccessToken.class).realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(),realm.getName()))",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/services/src/main/java/org/keycloak/protocol/openshift/OpenShiftTokenReviewEndpoint.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TokenVerifier.create(reviewRequest.getSpec().getToken(),AccessToken.class).realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(),realm.getName()))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 184,
      "startLineNumber" : 95,
      "startColumnNumber" : 50,
      "endLineNumber" : 96,
      "endColumnNumber" : 108
    },
    "astNodeNumber" : 26,
    "astHeight" : 6,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 254,
        "startLineNumber" : 95,
        "startColumnNumber" : 50,
        "endLineNumber" : 97,
        "endColumnNumber" : 69
      },
      "nodeContext" : "TokenVerifier.create(reviewRequest.getSpec().getToken(),AccessToken.class).realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(),realm.getName())).audience(reviewRequest.getSpec().getAudiences())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 265,
        "startLineNumber" : 95,
        "startColumnNumber" : 39,
        "endLineNumber" : 97,
        "endColumnNumber" : 69
      },
      "nodeContext" : "verifier=TokenVerifier.create(reviewRequest.getSpec().getToken(),AccessToken.class).realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(),realm.getName())).audience(reviewRequest.getSpec().getAudiences())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 70
      },
      "nodeContext" : "TokenVerifier<AccessToken> verifier=TokenVerifier.create(reviewRequest.getSpec().getToken(),AccessToken.class).realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(),realm.getName())).audience(reviewRequest.getSpec().getAudiences());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 633,
        "startLineNumber" : 94,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TokenVerifier<AccessToken> verifier=TokenVerifier.create(reviewRequest.getSpec().getToken(),AccessToken.class).realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(),realm.getName())).audience(reviewRequest.getSpec().getAudiences());\n  SignatureVerifierContext verifierContext=session.getProvider(SignatureProvider.class,verifier.getHeader().getAlgorithm().name()).verifier(verifier.getHeader().getKeyId());\n  verifier.verifierContext(verifierContext);\n  verifier.verify();\n  token=verifier.getToken();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 757,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  TokenVerifier<AccessToken> verifier=TokenVerifier.create(reviewRequest.getSpec().getToken(),AccessToken.class).realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(),realm.getName())).audience(reviewRequest.getSpec().getAudiences());\n  SignatureVerifierContext verifierContext=session.getProvider(SignatureProvider.class,verifier.getHeader().getAlgorithm().name()).verifier(verifier.getHeader().getKeyId());\n  verifier.verifierContext(verifierContext);\n  verifier.verify();\n  token=verifier.getToken();\n}\n catch (VerificationException e) {\n  error(401,Errors.INVALID_TOKEN,\"Token verification failure\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 97,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2359,
        "startLineNumber" : 80,
        "startColumnNumber" : 147,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  event.event(EventType.INTROSPECT_TOKEN);\n  if (clientId != null) {\n    session.setAttribute(\"client_id\",clientId);\n  }\n  checkSsl();\n  checkRealm();\n  authorizeClient();\n  RealmModel realm=session.getContext().getRealm();\n  AccessToken token=null;\n  try {\n    TokenVerifier<AccessToken> verifier=TokenVerifier.create(reviewRequest.getSpec().getToken(),AccessToken.class).realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(),realm.getName())).audience(reviewRequest.getSpec().getAudiences());\n    SignatureVerifierContext verifierContext=session.getProvider(SignatureProvider.class,verifier.getHeader().getAlgorithm().name()).verifier(verifier.getHeader().getKeyId());\n    verifier.verifierContext(verifierContext);\n    verifier.verify();\n    token=verifier.getToken();\n  }\n catch (  VerificationException e) {\n    error(401,Errors.INVALID_TOKEN,\"Token verification failure\");\n  }\n  if (!tokenManager.checkTokenValidForIntrospection(session,realm,token,true)) {\n    error(401,Errors.INVALID_TOKEN,\"Token verification failure\");\n  }\n  OpenShiftTokenReviewResponseRepresentation response=new OpenShiftTokenReviewResponseRepresentation();\n  response.getStatus().setAuthenticated(true);\n  response.getStatus().setUser(new OpenShiftTokenReviewResponseRepresentation.User());\n  OpenShiftTokenReviewResponseRepresentation.User userRep=response.getStatus().getUser();\n  userRep.setUid(token.getSubject());\n  userRep.setUsername(token.getPreferredUsername());\n  if (token.getScope() != null && !token.getScope().isEmpty()) {\n    OpenShiftTokenReviewResponseRepresentation.Extra extra=new OpenShiftTokenReviewResponseRepresentation.Extra();\n    extra.setScopes(token.getScope().split(\" \"));\n    userRep.setExtra(extra);\n  }\n  if (token.getOtherClaims() != null && token.getOtherClaims().get(\"groups\") != null) {\n    List<String> groups=(List<String>)token.getOtherClaims().get(\"groups\");\n    userRep.setGroups(groups);\n  }\n  event.success();\n  return Response.ok(response,MediaType.APPLICATION_JSON).build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2622,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Path(\"/{client_id}\") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response tokenReview(@PathParam(\"client_id\") String clientId,OpenShiftTokenReviewRequestRepresentation reviewRequest) throws Exception {\n  event.event(EventType.INTROSPECT_TOKEN);\n  if (clientId != null) {\n    session.setAttribute(\"client_id\",clientId);\n  }\n  checkSsl();\n  checkRealm();\n  authorizeClient();\n  RealmModel realm=session.getContext().getRealm();\n  AccessToken token=null;\n  try {\n    TokenVerifier<AccessToken> verifier=TokenVerifier.create(reviewRequest.getSpec().getToken(),AccessToken.class).realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(),realm.getName())).audience(reviewRequest.getSpec().getAudiences());\n    SignatureVerifierContext verifierContext=session.getProvider(SignatureProvider.class,verifier.getHeader().getAlgorithm().name()).verifier(verifier.getHeader().getKeyId());\n    verifier.verifierContext(verifierContext);\n    verifier.verify();\n    token=verifier.getToken();\n  }\n catch (  VerificationException e) {\n    error(401,Errors.INVALID_TOKEN,\"Token verification failure\");\n  }\n  if (!tokenManager.checkTokenValidForIntrospection(session,realm,token,true)) {\n    error(401,Errors.INVALID_TOKEN,\"Token verification failure\");\n  }\n  OpenShiftTokenReviewResponseRepresentation response=new OpenShiftTokenReviewResponseRepresentation();\n  response.getStatus().setAuthenticated(true);\n  response.getStatus().setUser(new OpenShiftTokenReviewResponseRepresentation.User());\n  OpenShiftTokenReviewResponseRepresentation.User userRep=response.getStatus().getUser();\n  userRep.setUid(token.getSubject());\n  userRep.setUsername(token.getPreferredUsername());\n  if (token.getScope() != null && !token.getScope().isEmpty()) {\n    OpenShiftTokenReviewResponseRepresentation.Extra extra=new OpenShiftTokenReviewResponseRepresentation.Extra();\n    extra.setScopes(token.getScope().split(\" \"));\n    userRep.setExtra(extra);\n  }\n  if (token.getOtherClaims() != null && token.getOtherClaims().get(\"groups\") != null) {\n    List<String> groups=(List<String>)token.getOtherClaims().get(\"groups\");\n    userRep.setGroups(groups);\n  }\n  event.success();\n  return Response.ok(response,MediaType.APPLICATION_JSON).build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 254,
        "startLineNumber" : 95,
        "startColumnNumber" : 50,
        "endLineNumber" : 97,
        "endColumnNumber" : 69
      },
      "nodeContext" : "TokenVerifier.create(reviewRequest.getSpec().getToken(),AccessToken.class).realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(),realm.getName())).audience(reviewRequest.getSpec().getAudiences())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 33,
      "astHeight" : 7
    },
    "tokenLength" : 15,
    "type" : "org.keycloak.TokenVerifier<org.keycloak.representations.AccessToken>"
  } ],
  "positionList" : [ {
    "charLength" : 184,
    "startLineNumber" : 95,
    "startColumnNumber" : 50,
    "endLineNumber" : 96,
    "endColumnNumber" : 108
  } ],
  "layoutRelationDataList" : [ ]
}