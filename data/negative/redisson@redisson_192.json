{
  "id" : 192,
  "expression" : "(ByteBuf)params.get(j)",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/main/java/org/redisson/RedissonLocalCachedMap.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(ByteBuf)params.get(j)",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 629,
      "startColumnNumber" : 30,
      "endLineNumber" : 629,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 629,
        "startColumnNumber" : 24,
        "endLineNumber" : 629,
        "endColumnNumber" : 53
      },
      "nodeContext" : "key=(ByteBuf)params.get(j)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 629,
        "startColumnNumber" : 16,
        "endLineNumber" : 629,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ByteBuf key=(ByteBuf)params.get(j);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 219,
        "startLineNumber" : 628,
        "startColumnNumber" : 55,
        "endLineNumber" : 633,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ByteBuf key=(ByteBuf)params.get(j);\n  ByteBuf value=(ByteBuf)params.get(j + 1);\n  entries.add(new LocalCachedMapUpdate.Entry(key,value));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 262,
        "startLineNumber" : 628,
        "startColumnNumber" : 12,
        "endLineNumber" : 633,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int j=2; j < params.size(); j+=2) {\n  ByteBuf key=(ByteBuf)params.get(j);\n  ByteBuf value=(ByteBuf)params.get(j + 1);\n  entries.add(new LocalCachedMapUpdate.Entry(key,value));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 52,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 626,
        "startColumnNumber" : 49,
        "endLineNumber" : 635,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<LocalCachedMapUpdate.Entry> entries=new ArrayList<LocalCachedMapUpdate.Entry>();\n  for (int j=2; j < params.size(); j+=2) {\n    ByteBuf key=(ByteBuf)params.get(j);\n    ByteBuf value=(ByteBuf)params.get(j + 1);\n    entries.add(new LocalCachedMapUpdate.Entry(key,value));\n  }\n  msgEncoded=encode(new LocalCachedMapUpdate(entries));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 80,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 640,
        "startLineNumber" : 626,
        "startColumnNumber" : 8,
        "endLineNumber" : 637,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (syncStrategy == SyncStrategy.UPDATE) {\n  List<LocalCachedMapUpdate.Entry> entries=new ArrayList<LocalCachedMapUpdate.Entry>();\n  for (int j=2; j < params.size(); j+=2) {\n    ByteBuf key=(ByteBuf)params.get(j);\n    ByteBuf value=(ByteBuf)params.get(j + 1);\n    entries.add(new LocalCachedMapUpdate.Entry(key,value));\n  }\n  msgEncoded=encode(new LocalCachedMapUpdate(entries));\n}\n else if (syncStrategy == SyncStrategy.INVALIDATE) {\n  msgEncoded=encode(new LocalCachedMapInvalidate(instanceId,hashes));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 103,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 597,
        "startColumnNumber" : 84,
        "endLineNumber" : 679,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (storeMode == LocalCachedMapOptions.StoreMode.LOCALCACHE) {\n    for (    Entry<? extends K,? extends V> entry : map.entrySet()) {\n      ByteBuf keyEncoded=encodeMapKey(entry.getKey());\n      CacheKey cacheKey=localCacheView.toCacheKey(keyEncoded);\n      cachePut(cacheKey,entry.getKey(),entry.getValue());\n      broadcastLocalCacheStore(entry.getValue(),keyEncoded,cacheKey);\n    }\n    return RedissonPromise.newSucceededFuture(null);\n  }\n  List<Object> params=new ArrayList<Object>(map.size() * 3);\n  params.add(invalidateEntryOnChange);\n  params.add(map.size() * 2);\n  byte[][] hashes=new byte[map.size()][];\n  int i=0;\n  for (  java.util.Map.Entry<? extends K,? extends V> t : map.entrySet()) {\n    ByteBuf mapKey=encodeMapKey(t.getKey());\n    ByteBuf mapValue=encodeMapValue(t.getValue());\n    params.add(mapKey);\n    params.add(mapValue);\n    CacheKey cacheKey=localCacheView.toCacheKey(mapKey);\n    hashes[i]=cacheKey.getKeyHash();\n    i++;\n  }\n  ByteBuf msgEncoded=null;\n  if (syncStrategy == SyncStrategy.UPDATE) {\n    List<LocalCachedMapUpdate.Entry> entries=new ArrayList<LocalCachedMapUpdate.Entry>();\n    for (int j=2; j < params.size(); j+=2) {\n      ByteBuf key=(ByteBuf)params.get(j);\n      ByteBuf value=(ByteBuf)params.get(j + 1);\n      entries.add(new LocalCachedMapUpdate.Entry(key,value));\n    }\n    msgEncoded=encode(new LocalCachedMapUpdate(entries));\n  }\n else   if (syncStrategy == SyncStrategy.INVALIDATE) {\n    msgEncoded=encode(new LocalCachedMapInvalidate(instanceId,hashes));\n  }\n  if (invalidateEntryOnChange == 2) {\n    long time=System.currentTimeMillis();\n    for (    byte[] hash : hashes) {\n      byte[] entryId=generateLogEntryId(hash);\n      params.add(time);\n      params.add(entryId);\n    }\n  }\n  if (msgEncoded != null) {\n    params.add(msgEncoded);\n  }\n  RPromise<Void> result=new RedissonPromise<Void>();\n  RFuture<Void> future=commandExecutor.evalWriteAsync(getName(),codec,RedisCommands.EVAL_VOID,\"for i=3, tonumber(ARGV[2]) + 2, 5000 do \" + \"redis.call('hmset', KEYS[1], unpack(ARGV, i, math.min(i+4999, tonumber(ARGV[2]) + 2))); \" + \"end; \"+ \"if ARGV[1] == '1' then \"+ \"redis.call('publish', KEYS[2], ARGV[#ARGV]); \"+ \"end;\"+ \"if ARGV[1] == '2' then \"+ \"for i=tonumber(ARGV[2]) + 2 + 1, #ARGV - 1, 5000 do \"+ \"redis.call('hmset', KEYS[3], unpack(ARGV, i, math.min(i+4999, #ARGV - 1))); \"+ \"end; \"+ \"redis.call('publish', KEYS[2], ARGV[#ARGV]); \"+ \"end;\",Arrays.<Object>asList(getName(),listener.getInvalidationTopicName(),listener.getUpdatesLogName()),params.toArray());\n  future.onComplete((res,e) -> {\n    if (e != null) {\n      result.tryFailure(e);\n      return;\n    }\n    cacheMap(map);\n    result.trySuccess(null);\n  }\n);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3598,
        "startLineNumber" : 596,
        "startColumnNumber" : 4,
        "endLineNumber" : 679,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected RFuture<Void> putAllOperationAsync(Map<? extends K,? extends V> map){\n  if (storeMode == LocalCachedMapOptions.StoreMode.LOCALCACHE) {\n    for (    Entry<? extends K,? extends V> entry : map.entrySet()) {\n      ByteBuf keyEncoded=encodeMapKey(entry.getKey());\n      CacheKey cacheKey=localCacheView.toCacheKey(keyEncoded);\n      cachePut(cacheKey,entry.getKey(),entry.getValue());\n      broadcastLocalCacheStore(entry.getValue(),keyEncoded,cacheKey);\n    }\n    return RedissonPromise.newSucceededFuture(null);\n  }\n  List<Object> params=new ArrayList<Object>(map.size() * 3);\n  params.add(invalidateEntryOnChange);\n  params.add(map.size() * 2);\n  byte[][] hashes=new byte[map.size()][];\n  int i=0;\n  for (  java.util.Map.Entry<? extends K,? extends V> t : map.entrySet()) {\n    ByteBuf mapKey=encodeMapKey(t.getKey());\n    ByteBuf mapValue=encodeMapValue(t.getValue());\n    params.add(mapKey);\n    params.add(mapValue);\n    CacheKey cacheKey=localCacheView.toCacheKey(mapKey);\n    hashes[i]=cacheKey.getKeyHash();\n    i++;\n  }\n  ByteBuf msgEncoded=null;\n  if (syncStrategy == SyncStrategy.UPDATE) {\n    List<LocalCachedMapUpdate.Entry> entries=new ArrayList<LocalCachedMapUpdate.Entry>();\n    for (int j=2; j < params.size(); j+=2) {\n      ByteBuf key=(ByteBuf)params.get(j);\n      ByteBuf value=(ByteBuf)params.get(j + 1);\n      entries.add(new LocalCachedMapUpdate.Entry(key,value));\n    }\n    msgEncoded=encode(new LocalCachedMapUpdate(entries));\n  }\n else   if (syncStrategy == SyncStrategy.INVALIDATE) {\n    msgEncoded=encode(new LocalCachedMapInvalidate(instanceId,hashes));\n  }\n  if (invalidateEntryOnChange == 2) {\n    long time=System.currentTimeMillis();\n    for (    byte[] hash : hashes) {\n      byte[] entryId=generateLogEntryId(hash);\n      params.add(time);\n      params.add(entryId);\n    }\n  }\n  if (msgEncoded != null) {\n    params.add(msgEncoded);\n  }\n  RPromise<Void> result=new RedissonPromise<Void>();\n  RFuture<Void> future=commandExecutor.evalWriteAsync(getName(),codec,RedisCommands.EVAL_VOID,\"for i=3, tonumber(ARGV[2]) + 2, 5000 do \" + \"redis.call('hmset', KEYS[1], unpack(ARGV, i, math.min(i+4999, tonumber(ARGV[2]) + 2))); \" + \"end; \"+ \"if ARGV[1] == '1' then \"+ \"redis.call('publish', KEYS[2], ARGV[#ARGV]); \"+ \"end;\"+ \"if ARGV[1] == '2' then \"+ \"for i=tonumber(ARGV[2]) + 2 + 1, #ARGV - 1, 5000 do \"+ \"redis.call('hmset', KEYS[3], unpack(ARGV, i, math.min(i+4999, #ARGV - 1))); \"+ \"end; \"+ \"redis.call('publish', KEYS[2], ARGV[#ARGV]); \"+ \"end;\",Arrays.<Object>asList(getName(),listener.getInvalidationTopicName(),listener.getUpdatesLogName()),params.toArray());\n  future.onComplete((res,e) -> {\n    if (e != null) {\n      result.tryFailure(e);\n      return;\n    }\n    cacheMap(map);\n    result.trySuccess(null);\n  }\n);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 464,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 629,
        "startColumnNumber" : 16,
        "endLineNumber" : 629,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ByteBuf key=(ByteBuf)params.get(j);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "org.redisson.cache.ByteBuf"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 629,
    "startColumnNumber" : 30,
    "endLineNumber" : 629,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}