{
  "id" : 280,
  "expression" : "videoFormats",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4b1609d569d2a5976b5856432e9b5a37dc483a87",
  "filePath" : "library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaPeriod.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "videoFormats",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 650,
      "startColumnNumber" : 28,
      "endLineNumber" : 650,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 650,
        "startColumnNumber" : 28,
        "endLineNumber" : 650,
        "endColumnNumber" : 47
      },
      "nodeContext" : "videoFormats.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 650,
        "startColumnNumber" : 24,
        "endLineNumber" : 650,
        "endColumnNumber" : 47
      },
      "nodeContext" : "i < videoFormats.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 650,
        "startColumnNumber" : 8,
        "endLineNumber" : 652,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < videoFormats.length; i++) {\n  videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 933,
        "startLineNumber" : 648,
        "startColumnNumber" : 35,
        "endLineNumber" : 670,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Format[] videoFormats=new Format[selectedVariantsCount];\n  for (int i=0; i < videoFormats.length; i++) {\n    videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n  }\n  muxedTrackGroups.add(new TrackGroup(videoFormats));\n  if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n    muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n  }\n  List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n  if (ccFormats != null) {\n    for (int i=0; i < ccFormats.size(); i++) {\n      muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1475,
        "startLineNumber" : 648,
        "startColumnNumber" : 6,
        "endLineNumber" : 681,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (numberOfVideoCodecs > 0) {\n  Format[] videoFormats=new Format[selectedVariantsCount];\n  for (int i=0; i < videoFormats.length; i++) {\n    videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n  }\n  muxedTrackGroups.add(new TrackGroup(videoFormats));\n  if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n    muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n  }\n  List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n  if (ccFormats != null) {\n    for (int i=0; i < ccFormats.size(); i++) {\n      muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n    }\n  }\n}\n else {\n  Format[] audioFormats=new Format[selectedVariantsCount];\n  for (int i=0; i < audioFormats.length; i++) {\n    audioFormats[i]=deriveAudioFormat(selectedPlaylistFormats[i],masterPlaylist.muxedAudioFormat,true);\n  }\n  muxedTrackGroups.add(new TrackGroup(audioFormats));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 175,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2058,
        "startLineNumber" : 646,
        "startColumnNumber" : 77,
        "endLineNumber" : 695,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TrackGroup> muxedTrackGroups=new ArrayList<>();\n  if (numberOfVideoCodecs > 0) {\n    Format[] videoFormats=new Format[selectedVariantsCount];\n    for (int i=0; i < videoFormats.length; i++) {\n      videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n    }\n    muxedTrackGroups.add(new TrackGroup(videoFormats));\n    if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n      muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n    }\n    List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n    if (ccFormats != null) {\n      for (int i=0; i < ccFormats.size(); i++) {\n        muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n      }\n    }\n  }\n else {\n    Format[] audioFormats=new Format[selectedVariantsCount];\n    for (int i=0; i < audioFormats.length; i++) {\n      audioFormats[i]=deriveAudioFormat(selectedPlaylistFormats[i],masterPlaylist.muxedAudioFormat,true);\n    }\n    muxedTrackGroups.add(new TrackGroup(audioFormats));\n  }\n  TrackGroup id3TrackGroup=new TrackGroup(new Format.Builder().setId(\"ID3\").setSampleMimeType(MimeTypes.APPLICATION_ID3).build());\n  muxedTrackGroups.add(id3TrackGroup);\n  sampleStreamWrapper.prepareWithMasterPlaylistInfo(muxedTrackGroups.toArray(new TrackGroup[0]),0,muxedTrackGroups.indexOf(id3TrackGroup));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2131,
        "startLineNumber" : 646,
        "startColumnNumber" : 4,
        "endLineNumber" : 695,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (allowChunklessPreparation && codecsStringAllowsChunklessPreparation) {\n  List<TrackGroup> muxedTrackGroups=new ArrayList<>();\n  if (numberOfVideoCodecs > 0) {\n    Format[] videoFormats=new Format[selectedVariantsCount];\n    for (int i=0; i < videoFormats.length; i++) {\n      videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n    }\n    muxedTrackGroups.add(new TrackGroup(videoFormats));\n    if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n      muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n    }\n    List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n    if (ccFormats != null) {\n      for (int i=0; i < ccFormats.size(); i++) {\n        muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n      }\n    }\n  }\n else {\n    Format[] audioFormats=new Format[selectedVariantsCount];\n    for (int i=0; i < audioFormats.length; i++) {\n      audioFormats[i]=deriveAudioFormat(selectedPlaylistFormats[i],masterPlaylist.muxedAudioFormat,true);\n    }\n    muxedTrackGroups.add(new TrackGroup(audioFormats));\n  }\n  TrackGroup id3TrackGroup=new TrackGroup(new Format.Builder().setId(\"ID3\").setSampleMimeType(MimeTypes.APPLICATION_ID3).build());\n  muxedTrackGroups.add(id3TrackGroup);\n  sampleStreamWrapper.prepareWithMasterPlaylistInfo(muxedTrackGroups.toArray(new TrackGroup[0]),0,muxedTrackGroups.indexOf(id3TrackGroup));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 238,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5378,
        "startLineNumber" : 579,
        "startColumnNumber" : 54,
        "endLineNumber" : 696,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int[] variantTypes=new int[masterPlaylist.variants.size()];\n  int videoVariantCount=0;\n  int audioVariantCount=0;\n  for (int i=0; i < masterPlaylist.variants.size(); i++) {\n    Variant variant=masterPlaylist.variants.get(i);\n    Format format=variant.format;\n    if (format.height > 0 || Util.getCodecsOfType(format.codecs,C.TRACK_TYPE_VIDEO) != null) {\n      variantTypes[i]=C.TRACK_TYPE_VIDEO;\n      videoVariantCount++;\n    }\n else     if (Util.getCodecsOfType(format.codecs,C.TRACK_TYPE_AUDIO) != null) {\n      variantTypes[i]=C.TRACK_TYPE_AUDIO;\n      audioVariantCount++;\n    }\n else {\n      variantTypes[i]=C.TRACK_TYPE_UNKNOWN;\n    }\n  }\n  boolean useVideoVariantsOnly=false;\n  boolean useNonAudioVariantsOnly=false;\n  int selectedVariantsCount=variantTypes.length;\n  if (videoVariantCount > 0) {\n    useVideoVariantsOnly=true;\n    selectedVariantsCount=videoVariantCount;\n  }\n else   if (audioVariantCount < variantTypes.length) {\n    useNonAudioVariantsOnly=true;\n    selectedVariantsCount=variantTypes.length - audioVariantCount;\n  }\n  Uri[] selectedPlaylistUrls=new Uri[selectedVariantsCount];\n  Format[] selectedPlaylistFormats=new Format[selectedVariantsCount];\n  int[] selectedVariantIndices=new int[selectedVariantsCount];\n  int outIndex=0;\n  for (int i=0; i < masterPlaylist.variants.size(); i++) {\n    if ((!useVideoVariantsOnly || variantTypes[i] == C.TRACK_TYPE_VIDEO) && (!useNonAudioVariantsOnly || variantTypes[i] != C.TRACK_TYPE_AUDIO)) {\n      Variant variant=masterPlaylist.variants.get(i);\n      selectedPlaylistUrls[outIndex]=variant.url;\n      selectedPlaylistFormats[outIndex]=variant.format;\n      selectedVariantIndices[outIndex++]=i;\n    }\n  }\n  String codecs=selectedPlaylistFormats[0].codecs;\n  int numberOfVideoCodecs=Util.getCodecCountOfType(codecs,C.TRACK_TYPE_VIDEO);\n  int numberOfAudioCodecs=Util.getCodecCountOfType(codecs,C.TRACK_TYPE_AUDIO);\n  boolean codecsStringAllowsChunklessPreparation=numberOfAudioCodecs <= 1 && numberOfVideoCodecs <= 1 && numberOfAudioCodecs + numberOfVideoCodecs > 0;\n  int trackType=!useVideoVariantsOnly && numberOfAudioCodecs > 0 ? C.TRACK_TYPE_AUDIO : C.TRACK_TYPE_DEFAULT;\n  HlsSampleStreamWrapper sampleStreamWrapper=buildSampleStreamWrapper(trackType,selectedPlaylistUrls,selectedPlaylistFormats,masterPlaylist.muxedAudioFormat,masterPlaylist.muxedCaptionFormats,overridingDrmInitData,positionUs);\n  sampleStreamWrappers.add(sampleStreamWrapper);\n  manifestUrlIndicesPerWrapper.add(selectedVariantIndices);\n  if (allowChunklessPreparation && codecsStringAllowsChunklessPreparation) {\n    List<TrackGroup> muxedTrackGroups=new ArrayList<>();\n    if (numberOfVideoCodecs > 0) {\n      Format[] videoFormats=new Format[selectedVariantsCount];\n      for (int i=0; i < videoFormats.length; i++) {\n        videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n      }\n      muxedTrackGroups.add(new TrackGroup(videoFormats));\n      if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n        muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n      }\n      List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n      if (ccFormats != null) {\n        for (int i=0; i < ccFormats.size(); i++) {\n          muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n        }\n      }\n    }\n else {\n      Format[] audioFormats=new Format[selectedVariantsCount];\n      for (int i=0; i < audioFormats.length; i++) {\n        audioFormats[i]=deriveAudioFormat(selectedPlaylistFormats[i],masterPlaylist.muxedAudioFormat,true);\n      }\n      muxedTrackGroups.add(new TrackGroup(audioFormats));\n    }\n    TrackGroup id3TrackGroup=new TrackGroup(new Format.Builder().setId(\"ID3\").setSampleMimeType(MimeTypes.APPLICATION_ID3).build());\n    muxedTrackGroups.add(id3TrackGroup);\n    sampleStreamWrapper.prepareWithMasterPlaylistInfo(muxedTrackGroups.toArray(new TrackGroup[0]),0,muxedTrackGroups.indexOf(id3TrackGroup));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 622,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7335,
        "startLineNumber" : 546,
        "startColumnNumber" : 2,
        "endLineNumber" : 696,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This method creates and starts preparation of the main  {@link HlsSampleStreamWrapper}. <p>The main sample stream wrapper is the first element of  {@link #sampleStreamWrappers}. It provides  {@link SampleStream}s for the variant urls in the master playlist. It may be adaptive and may contain multiple muxed tracks. <p>If chunkless preparation is allowed, the media period will try preparation without segment downloads. This is only possible if variants contain the CODECS attribute. If not, traditional preparation with segment downloads will take place. The following points apply to chunkless preparation: <ul> <li>A muxed audio track will be exposed if the codecs list contain an audio entry and the master playlist either contains an EXT-X-MEDIA tag without the URI attribute or does not contain any EXT-X-MEDIA tag. <li>Closed captions will only be exposed if they are declared by the master playlist. <li>An ID3 track is exposed preemptively, in case the segments contain an ID3 track. </ul>\n * @param masterPlaylist The HLS master playlist.\n * @param positionUs If preparation requires any chunk downloads, the position in microseconds atwhich downloading should start. Ignored otherwise.\n * @param sampleStreamWrappers List to which the built main sample stream wrapper should be added.\n * @param manifestUrlIndicesPerWrapper List to which the selected variant indices should be added.\n * @param overridingDrmInitData Overriding {@link DrmInitData}, keyed by protection scheme type (i.e.  {@link DrmInitData#schemeType}).\n */\nprivate void buildAndPrepareMainSampleStreamWrapper(HlsMasterPlaylist masterPlaylist,long positionUs,List<HlsSampleStreamWrapper> sampleStreamWrappers,List<int[]> manifestUrlIndicesPerWrapper,Map<String,DrmInitData> overridingDrmInitData){\n  int[] variantTypes=new int[masterPlaylist.variants.size()];\n  int videoVariantCount=0;\n  int audioVariantCount=0;\n  for (int i=0; i < masterPlaylist.variants.size(); i++) {\n    Variant variant=masterPlaylist.variants.get(i);\n    Format format=variant.format;\n    if (format.height > 0 || Util.getCodecsOfType(format.codecs,C.TRACK_TYPE_VIDEO) != null) {\n      variantTypes[i]=C.TRACK_TYPE_VIDEO;\n      videoVariantCount++;\n    }\n else     if (Util.getCodecsOfType(format.codecs,C.TRACK_TYPE_AUDIO) != null) {\n      variantTypes[i]=C.TRACK_TYPE_AUDIO;\n      audioVariantCount++;\n    }\n else {\n      variantTypes[i]=C.TRACK_TYPE_UNKNOWN;\n    }\n  }\n  boolean useVideoVariantsOnly=false;\n  boolean useNonAudioVariantsOnly=false;\n  int selectedVariantsCount=variantTypes.length;\n  if (videoVariantCount > 0) {\n    useVideoVariantsOnly=true;\n    selectedVariantsCount=videoVariantCount;\n  }\n else   if (audioVariantCount < variantTypes.length) {\n    useNonAudioVariantsOnly=true;\n    selectedVariantsCount=variantTypes.length - audioVariantCount;\n  }\n  Uri[] selectedPlaylistUrls=new Uri[selectedVariantsCount];\n  Format[] selectedPlaylistFormats=new Format[selectedVariantsCount];\n  int[] selectedVariantIndices=new int[selectedVariantsCount];\n  int outIndex=0;\n  for (int i=0; i < masterPlaylist.variants.size(); i++) {\n    if ((!useVideoVariantsOnly || variantTypes[i] == C.TRACK_TYPE_VIDEO) && (!useNonAudioVariantsOnly || variantTypes[i] != C.TRACK_TYPE_AUDIO)) {\n      Variant variant=masterPlaylist.variants.get(i);\n      selectedPlaylistUrls[outIndex]=variant.url;\n      selectedPlaylistFormats[outIndex]=variant.format;\n      selectedVariantIndices[outIndex++]=i;\n    }\n  }\n  String codecs=selectedPlaylistFormats[0].codecs;\n  int numberOfVideoCodecs=Util.getCodecCountOfType(codecs,C.TRACK_TYPE_VIDEO);\n  int numberOfAudioCodecs=Util.getCodecCountOfType(codecs,C.TRACK_TYPE_AUDIO);\n  boolean codecsStringAllowsChunklessPreparation=numberOfAudioCodecs <= 1 && numberOfVideoCodecs <= 1 && numberOfAudioCodecs + numberOfVideoCodecs > 0;\n  int trackType=!useVideoVariantsOnly && numberOfAudioCodecs > 0 ? C.TRACK_TYPE_AUDIO : C.TRACK_TYPE_DEFAULT;\n  HlsSampleStreamWrapper sampleStreamWrapper=buildSampleStreamWrapper(trackType,selectedPlaylistUrls,selectedPlaylistFormats,masterPlaylist.muxedAudioFormat,masterPlaylist.muxedCaptionFormats,overridingDrmInitData,positionUs);\n  sampleStreamWrappers.add(sampleStreamWrapper);\n  manifestUrlIndicesPerWrapper.add(selectedVariantIndices);\n  if (allowChunklessPreparation && codecsStringAllowsChunklessPreparation) {\n    List<TrackGroup> muxedTrackGroups=new ArrayList<>();\n    if (numberOfVideoCodecs > 0) {\n      Format[] videoFormats=new Format[selectedVariantsCount];\n      for (int i=0; i < videoFormats.length; i++) {\n        videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n      }\n      muxedTrackGroups.add(new TrackGroup(videoFormats));\n      if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n        muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n      }\n      List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n      if (ccFormats != null) {\n        for (int i=0; i < ccFormats.size(); i++) {\n          muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n        }\n      }\n    }\n else {\n      Format[] audioFormats=new Format[selectedVariantsCount];\n      for (int i=0; i < audioFormats.length; i++) {\n        audioFormats[i]=deriveAudioFormat(selectedPlaylistFormats[i],masterPlaylist.muxedAudioFormat,true);\n      }\n      muxedTrackGroups.add(new TrackGroup(audioFormats));\n    }\n    TrackGroup id3TrackGroup=new TrackGroup(new Format.Builder().setId(\"ID3\").setSampleMimeType(MimeTypes.APPLICATION_ID3).build());\n    muxedTrackGroups.add(id3TrackGroup);\n    sampleStreamWrapper.prepareWithMasterPlaylistInfo(muxedTrackGroups.toArray(new TrackGroup[0]),0,muxedTrackGroups.indexOf(id3TrackGroup));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 658,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 650,
        "startColumnNumber" : 24,
        "endLineNumber" : 650,
        "endColumnNumber" : 47
      },
      "nodeContext" : "i < videoFormats.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.Format[]"
  }, {
    "nodeContext" : "videoFormats",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 651,
      "startColumnNumber" : 10,
      "endLineNumber" : 651,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 651,
        "startColumnNumber" : 10,
        "endLineNumber" : 651,
        "endColumnNumber" : 25
      },
      "nodeContext" : "videoFormats[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 651,
        "startColumnNumber" : 10,
        "endLineNumber" : 651,
        "endColumnNumber" : 73
      },
      "nodeContext" : "videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i])",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 651,
        "startColumnNumber" : 10,
        "endLineNumber" : 651,
        "endColumnNumber" : 74
      },
      "nodeContext" : "videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 650,
        "startColumnNumber" : 54,
        "endLineNumber" : 652,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 650,
        "startColumnNumber" : 8,
        "endLineNumber" : 652,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < videoFormats.length; i++) {\n  videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 933,
        "startLineNumber" : 648,
        "startColumnNumber" : 35,
        "endLineNumber" : 670,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Format[] videoFormats=new Format[selectedVariantsCount];\n  for (int i=0; i < videoFormats.length; i++) {\n    videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n  }\n  muxedTrackGroups.add(new TrackGroup(videoFormats));\n  if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n    muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n  }\n  List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n  if (ccFormats != null) {\n    for (int i=0; i < ccFormats.size(); i++) {\n      muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1475,
        "startLineNumber" : 648,
        "startColumnNumber" : 6,
        "endLineNumber" : 681,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (numberOfVideoCodecs > 0) {\n  Format[] videoFormats=new Format[selectedVariantsCount];\n  for (int i=0; i < videoFormats.length; i++) {\n    videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n  }\n  muxedTrackGroups.add(new TrackGroup(videoFormats));\n  if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n    muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n  }\n  List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n  if (ccFormats != null) {\n    for (int i=0; i < ccFormats.size(); i++) {\n      muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n    }\n  }\n}\n else {\n  Format[] audioFormats=new Format[selectedVariantsCount];\n  for (int i=0; i < audioFormats.length; i++) {\n    audioFormats[i]=deriveAudioFormat(selectedPlaylistFormats[i],masterPlaylist.muxedAudioFormat,true);\n  }\n  muxedTrackGroups.add(new TrackGroup(audioFormats));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 175,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2058,
        "startLineNumber" : 646,
        "startColumnNumber" : 77,
        "endLineNumber" : 695,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TrackGroup> muxedTrackGroups=new ArrayList<>();\n  if (numberOfVideoCodecs > 0) {\n    Format[] videoFormats=new Format[selectedVariantsCount];\n    for (int i=0; i < videoFormats.length; i++) {\n      videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n    }\n    muxedTrackGroups.add(new TrackGroup(videoFormats));\n    if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n      muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n    }\n    List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n    if (ccFormats != null) {\n      for (int i=0; i < ccFormats.size(); i++) {\n        muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n      }\n    }\n  }\n else {\n    Format[] audioFormats=new Format[selectedVariantsCount];\n    for (int i=0; i < audioFormats.length; i++) {\n      audioFormats[i]=deriveAudioFormat(selectedPlaylistFormats[i],masterPlaylist.muxedAudioFormat,true);\n    }\n    muxedTrackGroups.add(new TrackGroup(audioFormats));\n  }\n  TrackGroup id3TrackGroup=new TrackGroup(new Format.Builder().setId(\"ID3\").setSampleMimeType(MimeTypes.APPLICATION_ID3).build());\n  muxedTrackGroups.add(id3TrackGroup);\n  sampleStreamWrapper.prepareWithMasterPlaylistInfo(muxedTrackGroups.toArray(new TrackGroup[0]),0,muxedTrackGroups.indexOf(id3TrackGroup));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2131,
        "startLineNumber" : 646,
        "startColumnNumber" : 4,
        "endLineNumber" : 695,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (allowChunklessPreparation && codecsStringAllowsChunklessPreparation) {\n  List<TrackGroup> muxedTrackGroups=new ArrayList<>();\n  if (numberOfVideoCodecs > 0) {\n    Format[] videoFormats=new Format[selectedVariantsCount];\n    for (int i=0; i < videoFormats.length; i++) {\n      videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n    }\n    muxedTrackGroups.add(new TrackGroup(videoFormats));\n    if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n      muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n    }\n    List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n    if (ccFormats != null) {\n      for (int i=0; i < ccFormats.size(); i++) {\n        muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n      }\n    }\n  }\n else {\n    Format[] audioFormats=new Format[selectedVariantsCount];\n    for (int i=0; i < audioFormats.length; i++) {\n      audioFormats[i]=deriveAudioFormat(selectedPlaylistFormats[i],masterPlaylist.muxedAudioFormat,true);\n    }\n    muxedTrackGroups.add(new TrackGroup(audioFormats));\n  }\n  TrackGroup id3TrackGroup=new TrackGroup(new Format.Builder().setId(\"ID3\").setSampleMimeType(MimeTypes.APPLICATION_ID3).build());\n  muxedTrackGroups.add(id3TrackGroup);\n  sampleStreamWrapper.prepareWithMasterPlaylistInfo(muxedTrackGroups.toArray(new TrackGroup[0]),0,muxedTrackGroups.indexOf(id3TrackGroup));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 238,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5378,
        "startLineNumber" : 579,
        "startColumnNumber" : 54,
        "endLineNumber" : 696,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int[] variantTypes=new int[masterPlaylist.variants.size()];\n  int videoVariantCount=0;\n  int audioVariantCount=0;\n  for (int i=0; i < masterPlaylist.variants.size(); i++) {\n    Variant variant=masterPlaylist.variants.get(i);\n    Format format=variant.format;\n    if (format.height > 0 || Util.getCodecsOfType(format.codecs,C.TRACK_TYPE_VIDEO) != null) {\n      variantTypes[i]=C.TRACK_TYPE_VIDEO;\n      videoVariantCount++;\n    }\n else     if (Util.getCodecsOfType(format.codecs,C.TRACK_TYPE_AUDIO) != null) {\n      variantTypes[i]=C.TRACK_TYPE_AUDIO;\n      audioVariantCount++;\n    }\n else {\n      variantTypes[i]=C.TRACK_TYPE_UNKNOWN;\n    }\n  }\n  boolean useVideoVariantsOnly=false;\n  boolean useNonAudioVariantsOnly=false;\n  int selectedVariantsCount=variantTypes.length;\n  if (videoVariantCount > 0) {\n    useVideoVariantsOnly=true;\n    selectedVariantsCount=videoVariantCount;\n  }\n else   if (audioVariantCount < variantTypes.length) {\n    useNonAudioVariantsOnly=true;\n    selectedVariantsCount=variantTypes.length - audioVariantCount;\n  }\n  Uri[] selectedPlaylistUrls=new Uri[selectedVariantsCount];\n  Format[] selectedPlaylistFormats=new Format[selectedVariantsCount];\n  int[] selectedVariantIndices=new int[selectedVariantsCount];\n  int outIndex=0;\n  for (int i=0; i < masterPlaylist.variants.size(); i++) {\n    if ((!useVideoVariantsOnly || variantTypes[i] == C.TRACK_TYPE_VIDEO) && (!useNonAudioVariantsOnly || variantTypes[i] != C.TRACK_TYPE_AUDIO)) {\n      Variant variant=masterPlaylist.variants.get(i);\n      selectedPlaylistUrls[outIndex]=variant.url;\n      selectedPlaylistFormats[outIndex]=variant.format;\n      selectedVariantIndices[outIndex++]=i;\n    }\n  }\n  String codecs=selectedPlaylistFormats[0].codecs;\n  int numberOfVideoCodecs=Util.getCodecCountOfType(codecs,C.TRACK_TYPE_VIDEO);\n  int numberOfAudioCodecs=Util.getCodecCountOfType(codecs,C.TRACK_TYPE_AUDIO);\n  boolean codecsStringAllowsChunklessPreparation=numberOfAudioCodecs <= 1 && numberOfVideoCodecs <= 1 && numberOfAudioCodecs + numberOfVideoCodecs > 0;\n  int trackType=!useVideoVariantsOnly && numberOfAudioCodecs > 0 ? C.TRACK_TYPE_AUDIO : C.TRACK_TYPE_DEFAULT;\n  HlsSampleStreamWrapper sampleStreamWrapper=buildSampleStreamWrapper(trackType,selectedPlaylistUrls,selectedPlaylistFormats,masterPlaylist.muxedAudioFormat,masterPlaylist.muxedCaptionFormats,overridingDrmInitData,positionUs);\n  sampleStreamWrappers.add(sampleStreamWrapper);\n  manifestUrlIndicesPerWrapper.add(selectedVariantIndices);\n  if (allowChunklessPreparation && codecsStringAllowsChunklessPreparation) {\n    List<TrackGroup> muxedTrackGroups=new ArrayList<>();\n    if (numberOfVideoCodecs > 0) {\n      Format[] videoFormats=new Format[selectedVariantsCount];\n      for (int i=0; i < videoFormats.length; i++) {\n        videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n      }\n      muxedTrackGroups.add(new TrackGroup(videoFormats));\n      if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n        muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n      }\n      List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n      if (ccFormats != null) {\n        for (int i=0; i < ccFormats.size(); i++) {\n          muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n        }\n      }\n    }\n else {\n      Format[] audioFormats=new Format[selectedVariantsCount];\n      for (int i=0; i < audioFormats.length; i++) {\n        audioFormats[i]=deriveAudioFormat(selectedPlaylistFormats[i],masterPlaylist.muxedAudioFormat,true);\n      }\n      muxedTrackGroups.add(new TrackGroup(audioFormats));\n    }\n    TrackGroup id3TrackGroup=new TrackGroup(new Format.Builder().setId(\"ID3\").setSampleMimeType(MimeTypes.APPLICATION_ID3).build());\n    muxedTrackGroups.add(id3TrackGroup);\n    sampleStreamWrapper.prepareWithMasterPlaylistInfo(muxedTrackGroups.toArray(new TrackGroup[0]),0,muxedTrackGroups.indexOf(id3TrackGroup));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 622,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7335,
        "startLineNumber" : 546,
        "startColumnNumber" : 2,
        "endLineNumber" : 696,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This method creates and starts preparation of the main  {@link HlsSampleStreamWrapper}. <p>The main sample stream wrapper is the first element of  {@link #sampleStreamWrappers}. It provides  {@link SampleStream}s for the variant urls in the master playlist. It may be adaptive and may contain multiple muxed tracks. <p>If chunkless preparation is allowed, the media period will try preparation without segment downloads. This is only possible if variants contain the CODECS attribute. If not, traditional preparation with segment downloads will take place. The following points apply to chunkless preparation: <ul> <li>A muxed audio track will be exposed if the codecs list contain an audio entry and the master playlist either contains an EXT-X-MEDIA tag without the URI attribute or does not contain any EXT-X-MEDIA tag. <li>Closed captions will only be exposed if they are declared by the master playlist. <li>An ID3 track is exposed preemptively, in case the segments contain an ID3 track. </ul>\n * @param masterPlaylist The HLS master playlist.\n * @param positionUs If preparation requires any chunk downloads, the position in microseconds atwhich downloading should start. Ignored otherwise.\n * @param sampleStreamWrappers List to which the built main sample stream wrapper should be added.\n * @param manifestUrlIndicesPerWrapper List to which the selected variant indices should be added.\n * @param overridingDrmInitData Overriding {@link DrmInitData}, keyed by protection scheme type (i.e.  {@link DrmInitData#schemeType}).\n */\nprivate void buildAndPrepareMainSampleStreamWrapper(HlsMasterPlaylist masterPlaylist,long positionUs,List<HlsSampleStreamWrapper> sampleStreamWrappers,List<int[]> manifestUrlIndicesPerWrapper,Map<String,DrmInitData> overridingDrmInitData){\n  int[] variantTypes=new int[masterPlaylist.variants.size()];\n  int videoVariantCount=0;\n  int audioVariantCount=0;\n  for (int i=0; i < masterPlaylist.variants.size(); i++) {\n    Variant variant=masterPlaylist.variants.get(i);\n    Format format=variant.format;\n    if (format.height > 0 || Util.getCodecsOfType(format.codecs,C.TRACK_TYPE_VIDEO) != null) {\n      variantTypes[i]=C.TRACK_TYPE_VIDEO;\n      videoVariantCount++;\n    }\n else     if (Util.getCodecsOfType(format.codecs,C.TRACK_TYPE_AUDIO) != null) {\n      variantTypes[i]=C.TRACK_TYPE_AUDIO;\n      audioVariantCount++;\n    }\n else {\n      variantTypes[i]=C.TRACK_TYPE_UNKNOWN;\n    }\n  }\n  boolean useVideoVariantsOnly=false;\n  boolean useNonAudioVariantsOnly=false;\n  int selectedVariantsCount=variantTypes.length;\n  if (videoVariantCount > 0) {\n    useVideoVariantsOnly=true;\n    selectedVariantsCount=videoVariantCount;\n  }\n else   if (audioVariantCount < variantTypes.length) {\n    useNonAudioVariantsOnly=true;\n    selectedVariantsCount=variantTypes.length - audioVariantCount;\n  }\n  Uri[] selectedPlaylistUrls=new Uri[selectedVariantsCount];\n  Format[] selectedPlaylistFormats=new Format[selectedVariantsCount];\n  int[] selectedVariantIndices=new int[selectedVariantsCount];\n  int outIndex=0;\n  for (int i=0; i < masterPlaylist.variants.size(); i++) {\n    if ((!useVideoVariantsOnly || variantTypes[i] == C.TRACK_TYPE_VIDEO) && (!useNonAudioVariantsOnly || variantTypes[i] != C.TRACK_TYPE_AUDIO)) {\n      Variant variant=masterPlaylist.variants.get(i);\n      selectedPlaylistUrls[outIndex]=variant.url;\n      selectedPlaylistFormats[outIndex]=variant.format;\n      selectedVariantIndices[outIndex++]=i;\n    }\n  }\n  String codecs=selectedPlaylistFormats[0].codecs;\n  int numberOfVideoCodecs=Util.getCodecCountOfType(codecs,C.TRACK_TYPE_VIDEO);\n  int numberOfAudioCodecs=Util.getCodecCountOfType(codecs,C.TRACK_TYPE_AUDIO);\n  boolean codecsStringAllowsChunklessPreparation=numberOfAudioCodecs <= 1 && numberOfVideoCodecs <= 1 && numberOfAudioCodecs + numberOfVideoCodecs > 0;\n  int trackType=!useVideoVariantsOnly && numberOfAudioCodecs > 0 ? C.TRACK_TYPE_AUDIO : C.TRACK_TYPE_DEFAULT;\n  HlsSampleStreamWrapper sampleStreamWrapper=buildSampleStreamWrapper(trackType,selectedPlaylistUrls,selectedPlaylistFormats,masterPlaylist.muxedAudioFormat,masterPlaylist.muxedCaptionFormats,overridingDrmInitData,positionUs);\n  sampleStreamWrappers.add(sampleStreamWrapper);\n  manifestUrlIndicesPerWrapper.add(selectedVariantIndices);\n  if (allowChunklessPreparation && codecsStringAllowsChunklessPreparation) {\n    List<TrackGroup> muxedTrackGroups=new ArrayList<>();\n    if (numberOfVideoCodecs > 0) {\n      Format[] videoFormats=new Format[selectedVariantsCount];\n      for (int i=0; i < videoFormats.length; i++) {\n        videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n      }\n      muxedTrackGroups.add(new TrackGroup(videoFormats));\n      if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n        muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n      }\n      List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n      if (ccFormats != null) {\n        for (int i=0; i < ccFormats.size(); i++) {\n          muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n        }\n      }\n    }\n else {\n      Format[] audioFormats=new Format[selectedVariantsCount];\n      for (int i=0; i < audioFormats.length; i++) {\n        audioFormats[i]=deriveAudioFormat(selectedPlaylistFormats[i],masterPlaylist.muxedAudioFormat,true);\n      }\n      muxedTrackGroups.add(new TrackGroup(audioFormats));\n    }\n    TrackGroup id3TrackGroup=new TrackGroup(new Format.Builder().setId(\"ID3\").setSampleMimeType(MimeTypes.APPLICATION_ID3).build());\n    muxedTrackGroups.add(id3TrackGroup);\n    sampleStreamWrapper.prepareWithMasterPlaylistInfo(muxedTrackGroups.toArray(new TrackGroup[0]),0,muxedTrackGroups.indexOf(id3TrackGroup));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 658,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 651,
        "startColumnNumber" : 10,
        "endLineNumber" : 651,
        "endColumnNumber" : 74
      },
      "nodeContext" : "videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.Format[]"
  }, {
    "nodeContext" : "videoFormats",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 653,
      "startColumnNumber" : 44,
      "endLineNumber" : 653,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 653,
        "startColumnNumber" : 29,
        "endLineNumber" : 653,
        "endColumnNumber" : 57
      },
      "nodeContext" : "new TrackGroup(videoFormats)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 653,
        "startColumnNumber" : 8,
        "endLineNumber" : 653,
        "endColumnNumber" : 58
      },
      "nodeContext" : "muxedTrackGroups.add(new TrackGroup(videoFormats))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 653,
        "startColumnNumber" : 8,
        "endLineNumber" : 653,
        "endColumnNumber" : 59
      },
      "nodeContext" : "muxedTrackGroups.add(new TrackGroup(videoFormats));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 933,
        "startLineNumber" : 648,
        "startColumnNumber" : 35,
        "endLineNumber" : 670,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Format[] videoFormats=new Format[selectedVariantsCount];\n  for (int i=0; i < videoFormats.length; i++) {\n    videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n  }\n  muxedTrackGroups.add(new TrackGroup(videoFormats));\n  if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n    muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n  }\n  List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n  if (ccFormats != null) {\n    for (int i=0; i < ccFormats.size(); i++) {\n      muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1475,
        "startLineNumber" : 648,
        "startColumnNumber" : 6,
        "endLineNumber" : 681,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (numberOfVideoCodecs > 0) {\n  Format[] videoFormats=new Format[selectedVariantsCount];\n  for (int i=0; i < videoFormats.length; i++) {\n    videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n  }\n  muxedTrackGroups.add(new TrackGroup(videoFormats));\n  if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n    muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n  }\n  List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n  if (ccFormats != null) {\n    for (int i=0; i < ccFormats.size(); i++) {\n      muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n    }\n  }\n}\n else {\n  Format[] audioFormats=new Format[selectedVariantsCount];\n  for (int i=0; i < audioFormats.length; i++) {\n    audioFormats[i]=deriveAudioFormat(selectedPlaylistFormats[i],masterPlaylist.muxedAudioFormat,true);\n  }\n  muxedTrackGroups.add(new TrackGroup(audioFormats));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 175,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2058,
        "startLineNumber" : 646,
        "startColumnNumber" : 77,
        "endLineNumber" : 695,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TrackGroup> muxedTrackGroups=new ArrayList<>();\n  if (numberOfVideoCodecs > 0) {\n    Format[] videoFormats=new Format[selectedVariantsCount];\n    for (int i=0; i < videoFormats.length; i++) {\n      videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n    }\n    muxedTrackGroups.add(new TrackGroup(videoFormats));\n    if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n      muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n    }\n    List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n    if (ccFormats != null) {\n      for (int i=0; i < ccFormats.size(); i++) {\n        muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n      }\n    }\n  }\n else {\n    Format[] audioFormats=new Format[selectedVariantsCount];\n    for (int i=0; i < audioFormats.length; i++) {\n      audioFormats[i]=deriveAudioFormat(selectedPlaylistFormats[i],masterPlaylist.muxedAudioFormat,true);\n    }\n    muxedTrackGroups.add(new TrackGroup(audioFormats));\n  }\n  TrackGroup id3TrackGroup=new TrackGroup(new Format.Builder().setId(\"ID3\").setSampleMimeType(MimeTypes.APPLICATION_ID3).build());\n  muxedTrackGroups.add(id3TrackGroup);\n  sampleStreamWrapper.prepareWithMasterPlaylistInfo(muxedTrackGroups.toArray(new TrackGroup[0]),0,muxedTrackGroups.indexOf(id3TrackGroup));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2131,
        "startLineNumber" : 646,
        "startColumnNumber" : 4,
        "endLineNumber" : 695,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (allowChunklessPreparation && codecsStringAllowsChunklessPreparation) {\n  List<TrackGroup> muxedTrackGroups=new ArrayList<>();\n  if (numberOfVideoCodecs > 0) {\n    Format[] videoFormats=new Format[selectedVariantsCount];\n    for (int i=0; i < videoFormats.length; i++) {\n      videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n    }\n    muxedTrackGroups.add(new TrackGroup(videoFormats));\n    if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n      muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n    }\n    List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n    if (ccFormats != null) {\n      for (int i=0; i < ccFormats.size(); i++) {\n        muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n      }\n    }\n  }\n else {\n    Format[] audioFormats=new Format[selectedVariantsCount];\n    for (int i=0; i < audioFormats.length; i++) {\n      audioFormats[i]=deriveAudioFormat(selectedPlaylistFormats[i],masterPlaylist.muxedAudioFormat,true);\n    }\n    muxedTrackGroups.add(new TrackGroup(audioFormats));\n  }\n  TrackGroup id3TrackGroup=new TrackGroup(new Format.Builder().setId(\"ID3\").setSampleMimeType(MimeTypes.APPLICATION_ID3).build());\n  muxedTrackGroups.add(id3TrackGroup);\n  sampleStreamWrapper.prepareWithMasterPlaylistInfo(muxedTrackGroups.toArray(new TrackGroup[0]),0,muxedTrackGroups.indexOf(id3TrackGroup));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 238,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5378,
        "startLineNumber" : 579,
        "startColumnNumber" : 54,
        "endLineNumber" : 696,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int[] variantTypes=new int[masterPlaylist.variants.size()];\n  int videoVariantCount=0;\n  int audioVariantCount=0;\n  for (int i=0; i < masterPlaylist.variants.size(); i++) {\n    Variant variant=masterPlaylist.variants.get(i);\n    Format format=variant.format;\n    if (format.height > 0 || Util.getCodecsOfType(format.codecs,C.TRACK_TYPE_VIDEO) != null) {\n      variantTypes[i]=C.TRACK_TYPE_VIDEO;\n      videoVariantCount++;\n    }\n else     if (Util.getCodecsOfType(format.codecs,C.TRACK_TYPE_AUDIO) != null) {\n      variantTypes[i]=C.TRACK_TYPE_AUDIO;\n      audioVariantCount++;\n    }\n else {\n      variantTypes[i]=C.TRACK_TYPE_UNKNOWN;\n    }\n  }\n  boolean useVideoVariantsOnly=false;\n  boolean useNonAudioVariantsOnly=false;\n  int selectedVariantsCount=variantTypes.length;\n  if (videoVariantCount > 0) {\n    useVideoVariantsOnly=true;\n    selectedVariantsCount=videoVariantCount;\n  }\n else   if (audioVariantCount < variantTypes.length) {\n    useNonAudioVariantsOnly=true;\n    selectedVariantsCount=variantTypes.length - audioVariantCount;\n  }\n  Uri[] selectedPlaylistUrls=new Uri[selectedVariantsCount];\n  Format[] selectedPlaylistFormats=new Format[selectedVariantsCount];\n  int[] selectedVariantIndices=new int[selectedVariantsCount];\n  int outIndex=0;\n  for (int i=0; i < masterPlaylist.variants.size(); i++) {\n    if ((!useVideoVariantsOnly || variantTypes[i] == C.TRACK_TYPE_VIDEO) && (!useNonAudioVariantsOnly || variantTypes[i] != C.TRACK_TYPE_AUDIO)) {\n      Variant variant=masterPlaylist.variants.get(i);\n      selectedPlaylistUrls[outIndex]=variant.url;\n      selectedPlaylistFormats[outIndex]=variant.format;\n      selectedVariantIndices[outIndex++]=i;\n    }\n  }\n  String codecs=selectedPlaylistFormats[0].codecs;\n  int numberOfVideoCodecs=Util.getCodecCountOfType(codecs,C.TRACK_TYPE_VIDEO);\n  int numberOfAudioCodecs=Util.getCodecCountOfType(codecs,C.TRACK_TYPE_AUDIO);\n  boolean codecsStringAllowsChunklessPreparation=numberOfAudioCodecs <= 1 && numberOfVideoCodecs <= 1 && numberOfAudioCodecs + numberOfVideoCodecs > 0;\n  int trackType=!useVideoVariantsOnly && numberOfAudioCodecs > 0 ? C.TRACK_TYPE_AUDIO : C.TRACK_TYPE_DEFAULT;\n  HlsSampleStreamWrapper sampleStreamWrapper=buildSampleStreamWrapper(trackType,selectedPlaylistUrls,selectedPlaylistFormats,masterPlaylist.muxedAudioFormat,masterPlaylist.muxedCaptionFormats,overridingDrmInitData,positionUs);\n  sampleStreamWrappers.add(sampleStreamWrapper);\n  manifestUrlIndicesPerWrapper.add(selectedVariantIndices);\n  if (allowChunklessPreparation && codecsStringAllowsChunklessPreparation) {\n    List<TrackGroup> muxedTrackGroups=new ArrayList<>();\n    if (numberOfVideoCodecs > 0) {\n      Format[] videoFormats=new Format[selectedVariantsCount];\n      for (int i=0; i < videoFormats.length; i++) {\n        videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n      }\n      muxedTrackGroups.add(new TrackGroup(videoFormats));\n      if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n        muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n      }\n      List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n      if (ccFormats != null) {\n        for (int i=0; i < ccFormats.size(); i++) {\n          muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n        }\n      }\n    }\n else {\n      Format[] audioFormats=new Format[selectedVariantsCount];\n      for (int i=0; i < audioFormats.length; i++) {\n        audioFormats[i]=deriveAudioFormat(selectedPlaylistFormats[i],masterPlaylist.muxedAudioFormat,true);\n      }\n      muxedTrackGroups.add(new TrackGroup(audioFormats));\n    }\n    TrackGroup id3TrackGroup=new TrackGroup(new Format.Builder().setId(\"ID3\").setSampleMimeType(MimeTypes.APPLICATION_ID3).build());\n    muxedTrackGroups.add(id3TrackGroup);\n    sampleStreamWrapper.prepareWithMasterPlaylistInfo(muxedTrackGroups.toArray(new TrackGroup[0]),0,muxedTrackGroups.indexOf(id3TrackGroup));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 622,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7335,
        "startLineNumber" : 546,
        "startColumnNumber" : 2,
        "endLineNumber" : 696,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This method creates and starts preparation of the main  {@link HlsSampleStreamWrapper}. <p>The main sample stream wrapper is the first element of  {@link #sampleStreamWrappers}. It provides  {@link SampleStream}s for the variant urls in the master playlist. It may be adaptive and may contain multiple muxed tracks. <p>If chunkless preparation is allowed, the media period will try preparation without segment downloads. This is only possible if variants contain the CODECS attribute. If not, traditional preparation with segment downloads will take place. The following points apply to chunkless preparation: <ul> <li>A muxed audio track will be exposed if the codecs list contain an audio entry and the master playlist either contains an EXT-X-MEDIA tag without the URI attribute or does not contain any EXT-X-MEDIA tag. <li>Closed captions will only be exposed if they are declared by the master playlist. <li>An ID3 track is exposed preemptively, in case the segments contain an ID3 track. </ul>\n * @param masterPlaylist The HLS master playlist.\n * @param positionUs If preparation requires any chunk downloads, the position in microseconds atwhich downloading should start. Ignored otherwise.\n * @param sampleStreamWrappers List to which the built main sample stream wrapper should be added.\n * @param manifestUrlIndicesPerWrapper List to which the selected variant indices should be added.\n * @param overridingDrmInitData Overriding {@link DrmInitData}, keyed by protection scheme type (i.e.  {@link DrmInitData#schemeType}).\n */\nprivate void buildAndPrepareMainSampleStreamWrapper(HlsMasterPlaylist masterPlaylist,long positionUs,List<HlsSampleStreamWrapper> sampleStreamWrappers,List<int[]> manifestUrlIndicesPerWrapper,Map<String,DrmInitData> overridingDrmInitData){\n  int[] variantTypes=new int[masterPlaylist.variants.size()];\n  int videoVariantCount=0;\n  int audioVariantCount=0;\n  for (int i=0; i < masterPlaylist.variants.size(); i++) {\n    Variant variant=masterPlaylist.variants.get(i);\n    Format format=variant.format;\n    if (format.height > 0 || Util.getCodecsOfType(format.codecs,C.TRACK_TYPE_VIDEO) != null) {\n      variantTypes[i]=C.TRACK_TYPE_VIDEO;\n      videoVariantCount++;\n    }\n else     if (Util.getCodecsOfType(format.codecs,C.TRACK_TYPE_AUDIO) != null) {\n      variantTypes[i]=C.TRACK_TYPE_AUDIO;\n      audioVariantCount++;\n    }\n else {\n      variantTypes[i]=C.TRACK_TYPE_UNKNOWN;\n    }\n  }\n  boolean useVideoVariantsOnly=false;\n  boolean useNonAudioVariantsOnly=false;\n  int selectedVariantsCount=variantTypes.length;\n  if (videoVariantCount > 0) {\n    useVideoVariantsOnly=true;\n    selectedVariantsCount=videoVariantCount;\n  }\n else   if (audioVariantCount < variantTypes.length) {\n    useNonAudioVariantsOnly=true;\n    selectedVariantsCount=variantTypes.length - audioVariantCount;\n  }\n  Uri[] selectedPlaylistUrls=new Uri[selectedVariantsCount];\n  Format[] selectedPlaylistFormats=new Format[selectedVariantsCount];\n  int[] selectedVariantIndices=new int[selectedVariantsCount];\n  int outIndex=0;\n  for (int i=0; i < masterPlaylist.variants.size(); i++) {\n    if ((!useVideoVariantsOnly || variantTypes[i] == C.TRACK_TYPE_VIDEO) && (!useNonAudioVariantsOnly || variantTypes[i] != C.TRACK_TYPE_AUDIO)) {\n      Variant variant=masterPlaylist.variants.get(i);\n      selectedPlaylistUrls[outIndex]=variant.url;\n      selectedPlaylistFormats[outIndex]=variant.format;\n      selectedVariantIndices[outIndex++]=i;\n    }\n  }\n  String codecs=selectedPlaylistFormats[0].codecs;\n  int numberOfVideoCodecs=Util.getCodecCountOfType(codecs,C.TRACK_TYPE_VIDEO);\n  int numberOfAudioCodecs=Util.getCodecCountOfType(codecs,C.TRACK_TYPE_AUDIO);\n  boolean codecsStringAllowsChunklessPreparation=numberOfAudioCodecs <= 1 && numberOfVideoCodecs <= 1 && numberOfAudioCodecs + numberOfVideoCodecs > 0;\n  int trackType=!useVideoVariantsOnly && numberOfAudioCodecs > 0 ? C.TRACK_TYPE_AUDIO : C.TRACK_TYPE_DEFAULT;\n  HlsSampleStreamWrapper sampleStreamWrapper=buildSampleStreamWrapper(trackType,selectedPlaylistUrls,selectedPlaylistFormats,masterPlaylist.muxedAudioFormat,masterPlaylist.muxedCaptionFormats,overridingDrmInitData,positionUs);\n  sampleStreamWrappers.add(sampleStreamWrapper);\n  manifestUrlIndicesPerWrapper.add(selectedVariantIndices);\n  if (allowChunklessPreparation && codecsStringAllowsChunklessPreparation) {\n    List<TrackGroup> muxedTrackGroups=new ArrayList<>();\n    if (numberOfVideoCodecs > 0) {\n      Format[] videoFormats=new Format[selectedVariantsCount];\n      for (int i=0; i < videoFormats.length; i++) {\n        videoFormats[i]=deriveVideoFormat(selectedPlaylistFormats[i]);\n      }\n      muxedTrackGroups.add(new TrackGroup(videoFormats));\n      if (numberOfAudioCodecs > 0 && (masterPlaylist.muxedAudioFormat != null || masterPlaylist.audios.isEmpty())) {\n        muxedTrackGroups.add(new TrackGroup(deriveAudioFormat(selectedPlaylistFormats[0],masterPlaylist.muxedAudioFormat,false)));\n      }\n      List<Format> ccFormats=masterPlaylist.muxedCaptionFormats;\n      if (ccFormats != null) {\n        for (int i=0; i < ccFormats.size(); i++) {\n          muxedTrackGroups.add(new TrackGroup(ccFormats.get(i)));\n        }\n      }\n    }\n else {\n      Format[] audioFormats=new Format[selectedVariantsCount];\n      for (int i=0; i < audioFormats.length; i++) {\n        audioFormats[i]=deriveAudioFormat(selectedPlaylistFormats[i],masterPlaylist.muxedAudioFormat,true);\n      }\n      muxedTrackGroups.add(new TrackGroup(audioFormats));\n    }\n    TrackGroup id3TrackGroup=new TrackGroup(new Format.Builder().setId(\"ID3\").setSampleMimeType(MimeTypes.APPLICATION_ID3).build());\n    muxedTrackGroups.add(id3TrackGroup);\n    sampleStreamWrapper.prepareWithMasterPlaylistInfo(muxedTrackGroups.toArray(new TrackGroup[0]),0,muxedTrackGroups.indexOf(id3TrackGroup));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 658,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 653,
        "startColumnNumber" : 8,
        "endLineNumber" : 653,
        "endColumnNumber" : 59
      },
      "nodeContext" : "muxedTrackGroups.add(new TrackGroup(videoFormats));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.Format[]"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 650,
    "startColumnNumber" : 28,
    "endLineNumber" : 650,
    "endColumnNumber" : 40
  }, {
    "charLength" : 12,
    "startLineNumber" : 651,
    "startColumnNumber" : 10,
    "endLineNumber" : 651,
    "endColumnNumber" : 22
  }, {
    "charLength" : 12,
    "startLineNumber" : 653,
    "startColumnNumber" : 44,
    "endLineNumber" : 653,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}