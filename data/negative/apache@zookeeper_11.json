{
  "id" : 11,
  "expression" : "ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT)",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/test/RecoveryTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 111,
      "startLineNumber" : 149,
      "startColumnNumber" : 23,
      "endLineNumber" : 150,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4565,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zs);\n  LOG.info(\"starting up the the server, waiting\");\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating nodes\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  Stat stat=new Stat();\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    LOG.info(\"Checking \" + path);\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  stat=new Stat();\n  LOG.info(\"Check 2\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4648,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 190,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zs);\n  LOG.info(\"starting up the the server, waiting\");\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating nodes\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  Stat stat=new Stat();\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    LOG.info(\"Checking \" + path);\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  stat=new Stat();\n  LOG.info(\"Check 2\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n}\n  finally {\n  SyncRequestProcessor.snapCount=oldSnapCount;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 576,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4928,
        "startLineNumber" : 71,
        "startColumnNumber" : 48,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  int oldSnapCount=SyncRequestProcessor.snapCount;\n  SyncRequestProcessor.snapCount=1000;\n  try {\n    final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n    NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n    f.startup(zs);\n    LOG.info(\"starting up the the server, waiting\");\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n    String path;\n    LOG.info(\"starting creating nodes\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    Stat stat=new Stat();\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      LOG.info(\"Checking \" + path);\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    stat=new Stat();\n    LOG.info(\"Check 2\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  }\n  finally {\n    SyncRequestProcessor.snapCount=oldSnapCount;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 613,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5667,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecovery() throws Exception {\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  int oldSnapCount=SyncRequestProcessor.snapCount;\n  SyncRequestProcessor.snapCount=1000;\n  try {\n    final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n    NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n    f.startup(zs);\n    LOG.info(\"starting up the the server, waiting\");\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n    String path;\n    LOG.info(\"starting creating nodes\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    Stat stat=new Stat();\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      LOG.info(\"Checking \" + path);\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    stat=new Stat();\n    LOG.info(\"Check 2\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  }\n  finally {\n    SyncRequestProcessor.snapCount=oldSnapCount;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 621,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 6,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 111,
    "startLineNumber" : 149,
    "startColumnNumber" : 23,
    "endLineNumber" : 150,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ ]
}