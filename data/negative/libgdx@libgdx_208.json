{
  "id" : 208,
  "expression" : "hi",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/Dynamics.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "hi",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 102,
      "startColumnNumber" : 11,
      "endLineNumber" : 102,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.AssertStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 102,
        "startColumnNumber" : 11,
        "endLineNumber" : 102,
        "endColumnNumber" : 24
      },
      "nodeContext" : "hi.isDirect()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assert hi.isDirect() : \"Buffer must be allocated direct.\";\n",
      "nodeType" : "AssertStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 588,
        "startLineNumber" : 96,
        "startColumnNumber" : 263,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assert A.isDirect() : \"Buffer must be allocated direct.\";\n  assert x.isDirect() : \"Buffer must be allocated direct.\";\n  assert b.isDirect() : \"Buffer must be allocated direct.\";\n  assert w.isDirect() : \"Buffer must be allocated direct.\";\n  assert lo.isDirect() : \"Buffer must be allocated direct.\";\n  assert hi.isDirect() : \"Buffer must be allocated direct.\";\n  assert findex.isDirect() : \"Buffer must be allocated direct.\";\n{\n    return DynamicsJNI.btSolveDantzigLCP(n,A,x,b,w,nub,lo,hi,findex,btDantzigScratchMemory.getCPtr(scratch),scratch);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 849,
        "startLineNumber" : 96,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static boolean btSolveDantzigLCP(int n,java.nio.FloatBuffer A,java.nio.FloatBuffer x,java.nio.FloatBuffer b,java.nio.FloatBuffer w,int nub,java.nio.FloatBuffer lo,java.nio.FloatBuffer hi,java.nio.IntBuffer findex,btDantzigScratchMemory scratch){\n  assert A.isDirect() : \"Buffer must be allocated direct.\";\n  assert x.isDirect() : \"Buffer must be allocated direct.\";\n  assert b.isDirect() : \"Buffer must be allocated direct.\";\n  assert w.isDirect() : \"Buffer must be allocated direct.\";\n  assert lo.isDirect() : \"Buffer must be allocated direct.\";\n  assert hi.isDirect() : \"Buffer must be allocated direct.\";\n  assert findex.isDirect() : \"Buffer must be allocated direct.\";\n{\n    return DynamicsJNI.btSolveDantzigLCP(n,A,x,b,w,nub,lo,hi,findex,btDantzigScratchMemory.getCPtr(scratch),scratch);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assert hi.isDirect() : \"Buffer must be allocated direct.\";\n",
      "nodeType" : "AssertStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "hi",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 105,
      "startColumnNumber" : 67,
      "endLineNumber" : 105,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 105,
        "startColumnNumber" : 13,
        "endLineNumber" : 105,
        "endColumnNumber" : 128
      },
      "nodeContext" : "DynamicsJNI.btSolveDantzigLCP(n,A,x,b,w,nub,lo,hi,findex,btDantzigScratchMemory.getCPtr(scratch),scratch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 105,
        "startColumnNumber" : 6,
        "endLineNumber" : 105,
        "endColumnNumber" : 129
      },
      "nodeContext" : "return DynamicsJNI.btSolveDantzigLCP(n,A,x,b,w,nub,lo,hi,findex,btDantzigScratchMemory.getCPtr(scratch),scratch);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return DynamicsJNI.btSolveDantzigLCP(n,A,x,b,w,nub,lo,hi,findex,btDantzigScratchMemory.getCPtr(scratch),scratch);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 588,
        "startLineNumber" : 96,
        "startColumnNumber" : 263,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assert A.isDirect() : \"Buffer must be allocated direct.\";\n  assert x.isDirect() : \"Buffer must be allocated direct.\";\n  assert b.isDirect() : \"Buffer must be allocated direct.\";\n  assert w.isDirect() : \"Buffer must be allocated direct.\";\n  assert lo.isDirect() : \"Buffer must be allocated direct.\";\n  assert hi.isDirect() : \"Buffer must be allocated direct.\";\n  assert findex.isDirect() : \"Buffer must be allocated direct.\";\n{\n    return DynamicsJNI.btSolveDantzigLCP(n,A,x,b,w,nub,lo,hi,findex,btDantzigScratchMemory.getCPtr(scratch),scratch);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 849,
        "startLineNumber" : 96,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static boolean btSolveDantzigLCP(int n,java.nio.FloatBuffer A,java.nio.FloatBuffer x,java.nio.FloatBuffer b,java.nio.FloatBuffer w,int nub,java.nio.FloatBuffer lo,java.nio.FloatBuffer hi,java.nio.IntBuffer findex,btDantzigScratchMemory scratch){\n  assert A.isDirect() : \"Buffer must be allocated direct.\";\n  assert x.isDirect() : \"Buffer must be allocated direct.\";\n  assert b.isDirect() : \"Buffer must be allocated direct.\";\n  assert w.isDirect() : \"Buffer must be allocated direct.\";\n  assert lo.isDirect() : \"Buffer must be allocated direct.\";\n  assert hi.isDirect() : \"Buffer must be allocated direct.\";\n  assert findex.isDirect() : \"Buffer must be allocated direct.\";\n{\n    return DynamicsJNI.btSolveDantzigLCP(n,A,x,b,w,nub,lo,hi,findex,btDantzigScratchMemory.getCPtr(scratch),scratch);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 105,
        "startColumnNumber" : 6,
        "endLineNumber" : 105,
        "endColumnNumber" : 129
      },
      "nodeContext" : "return DynamicsJNI.btSolveDantzigLCP(n,A,x,b,w,nub,lo,hi,findex,btDantzigScratchMemory.getCPtr(scratch),scratch);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 18,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 102,
    "startColumnNumber" : 11,
    "endLineNumber" : 102,
    "endColumnNumber" : 13
  }, {
    "charLength" : 2,
    "startLineNumber" : 105,
    "startColumnNumber" : 67,
    "endLineNumber" : 105,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}