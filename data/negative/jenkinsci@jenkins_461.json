{
  "id" : 461,
  "expression" : "o.isConnecting()",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/slaves/RetentionStrategy.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "o.isConnecting()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 222,
      "startColumnNumber" : 41,
      "endLineNumber" : 222,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 222,
        "startColumnNumber" : 25,
        "endLineNumber" : 222,
        "endColumnNumber" : 57
      },
      "nodeContext" : "o.isOnline() || o.isConnecting()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 222,
        "startColumnNumber" : 24,
        "endLineNumber" : 222,
        "endColumnNumber" : 58
      },
      "nodeContext" : "(o.isOnline() || o.isConnecting())",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 222,
        "startColumnNumber" : 24,
        "endLineNumber" : 222,
        "endColumnNumber" : 105
      },
      "nodeContext" : "(o.isOnline() || o.isConnecting()) && o.isPartiallyIdle() && o.isAcceptingTasks()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 294,
        "startLineNumber" : 222,
        "startColumnNumber" : 20,
        "endLineNumber" : 226,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if ((o.isOnline() || o.isConnecting()) && o.isPartiallyIdle() && o.isAcceptingTasks()) {\n  final int idleExecutors=o.countIdle();\n  if (idleExecutors > 0)   availableComputers.put(o,idleExecutors);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 336,
        "startLineNumber" : 221,
        "startColumnNumber" : 64,
        "endLineNumber" : 227,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if ((o.isOnline() || o.isConnecting()) && o.isPartiallyIdle() && o.isAcceptingTasks()) {\n    final int idleExecutors=o.countIdle();\n    if (idleExecutors > 0)     availableComputers.put(o,idleExecutors);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 384,
        "startLineNumber" : 221,
        "startColumnNumber" : 16,
        "endLineNumber" : 227,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (Computer o : Jenkins.get().getComputers()) {\n  if ((o.isOnline() || o.isConnecting()) && o.isPartiallyIdle() && o.isAcceptingTasks()) {\n    final int idleExecutors=o.countIdle();\n    if (idleExecutors > 0)     availableComputers.put(o,idleExecutors);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2564,
        "startLineNumber" : 219,
        "startColumnNumber" : 56,
        "endLineNumber" : 264,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final HashMap<Computer,Integer> availableComputers=new HashMap<>();\n  for (  Computer o : Jenkins.get().getComputers()) {\n    if ((o.isOnline() || o.isConnecting()) && o.isPartiallyIdle() && o.isAcceptingTasks()) {\n      final int idleExecutors=o.countIdle();\n      if (idleExecutors > 0)       availableComputers.put(o,idleExecutors);\n    }\n  }\n  boolean needComputer=false;\n  long demandMilliseconds=0;\n  for (  Queue.BuildableItem item : Queue.getInstance().getBuildableItems()) {\n    boolean needExecutor=true;\n    for (    Computer o : Collections.unmodifiableSet(availableComputers.keySet())) {\n      Node otherNode=o.getNode();\n      if (otherNode != null && otherNode.canTake(item) == null) {\n        needExecutor=false;\n        final int availableExecutors=availableComputers.remove(o);\n        if (availableExecutors > 1) {\n          availableComputers.put(o,availableExecutors - 1);\n        }\n else {\n          availableComputers.remove(o);\n        }\n        break;\n      }\n    }\n    Node checkedNode=c.getNode();\n    if (needExecutor && checkedNode != null && checkedNode.canTake(item) == null) {\n      demandMilliseconds=System.currentTimeMillis() - item.buildableStartMilliseconds;\n      needComputer=demandMilliseconds > TimeUnit.MINUTES.toMillis(inDemandDelay);\n      break;\n    }\n  }\n  if (needComputer) {\n    logger.log(Level.INFO,\"Launching computer {0} as it has been in demand for {1}\",new Object[]{c.getName(),Util.getTimeSpanString(demandMilliseconds)});\n    c.connect(false);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3410,
        "startLineNumber" : 219,
        "startColumnNumber" : 12,
        "endLineNumber" : 275,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (c.isOffline() && c.isLaunchSupported()) {\n  final HashMap<Computer,Integer> availableComputers=new HashMap<>();\n  for (  Computer o : Jenkins.get().getComputers()) {\n    if ((o.isOnline() || o.isConnecting()) && o.isPartiallyIdle() && o.isAcceptingTasks()) {\n      final int idleExecutors=o.countIdle();\n      if (idleExecutors > 0)       availableComputers.put(o,idleExecutors);\n    }\n  }\n  boolean needComputer=false;\n  long demandMilliseconds=0;\n  for (  Queue.BuildableItem item : Queue.getInstance().getBuildableItems()) {\n    boolean needExecutor=true;\n    for (    Computer o : Collections.unmodifiableSet(availableComputers.keySet())) {\n      Node otherNode=o.getNode();\n      if (otherNode != null && otherNode.canTake(item) == null) {\n        needExecutor=false;\n        final int availableExecutors=availableComputers.remove(o);\n        if (availableExecutors > 1) {\n          availableComputers.put(o,availableExecutors - 1);\n        }\n else {\n          availableComputers.remove(o);\n        }\n        break;\n      }\n    }\n    Node checkedNode=c.getNode();\n    if (needExecutor && checkedNode != null && checkedNode.canTake(item) == null) {\n      demandMilliseconds=System.currentTimeMillis() - item.buildableStartMilliseconds;\n      needComputer=demandMilliseconds > TimeUnit.MINUTES.toMillis(inDemandDelay);\n      break;\n    }\n  }\n  if (needComputer) {\n    logger.log(Level.INFO,\"Launching computer {0} as it has been in demand for {1}\",new Object[]{c.getName(),Util.getTimeSpanString(demandMilliseconds)});\n    c.connect(false);\n  }\n}\n else if (c.isIdle()) {\n  final long idleMilliseconds=System.currentTimeMillis() - c.getIdleStartMilliseconds();\n  if (idleMilliseconds > TimeUnit.MINUTES.toMillis(idleDelay)) {\n    logger.log(Level.INFO,\"Disconnecting computer {0} as it has been idle for {1}\",new Object[]{c.getName(),Util.getTimeSpanString(idleMilliseconds)});\n    c.disconnect(new OfflineCause.IdleOfflineCause());\n  }\n else {\n    return TimeUnit.MILLISECONDS.toMinutes(TimeUnit.MINUTES.toMillis(idleDelay) - idleMilliseconds);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 308,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3459,
        "startLineNumber" : 218,
        "startColumnNumber" : 49,
        "endLineNumber" : 277,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (c.isOffline() && c.isLaunchSupported()) {\n    final HashMap<Computer,Integer> availableComputers=new HashMap<>();\n    for (    Computer o : Jenkins.get().getComputers()) {\n      if ((o.isOnline() || o.isConnecting()) && o.isPartiallyIdle() && o.isAcceptingTasks()) {\n        final int idleExecutors=o.countIdle();\n        if (idleExecutors > 0)         availableComputers.put(o,idleExecutors);\n      }\n    }\n    boolean needComputer=false;\n    long demandMilliseconds=0;\n    for (    Queue.BuildableItem item : Queue.getInstance().getBuildableItems()) {\n      boolean needExecutor=true;\n      for (      Computer o : Collections.unmodifiableSet(availableComputers.keySet())) {\n        Node otherNode=o.getNode();\n        if (otherNode != null && otherNode.canTake(item) == null) {\n          needExecutor=false;\n          final int availableExecutors=availableComputers.remove(o);\n          if (availableExecutors > 1) {\n            availableComputers.put(o,availableExecutors - 1);\n          }\n else {\n            availableComputers.remove(o);\n          }\n          break;\n        }\n      }\n      Node checkedNode=c.getNode();\n      if (needExecutor && checkedNode != null && checkedNode.canTake(item) == null) {\n        demandMilliseconds=System.currentTimeMillis() - item.buildableStartMilliseconds;\n        needComputer=demandMilliseconds > TimeUnit.MINUTES.toMillis(inDemandDelay);\n        break;\n      }\n    }\n    if (needComputer) {\n      logger.log(Level.INFO,\"Launching computer {0} as it has been in demand for {1}\",new Object[]{c.getName(),Util.getTimeSpanString(demandMilliseconds)});\n      c.connect(false);\n    }\n  }\n else   if (c.isIdle()) {\n    final long idleMilliseconds=System.currentTimeMillis() - c.getIdleStartMilliseconds();\n    if (idleMilliseconds > TimeUnit.MINUTES.toMillis(idleDelay)) {\n      logger.log(Level.INFO,\"Disconnecting computer {0} as it has been idle for {1}\",new Object[]{c.getName(),Util.getTimeSpanString(idleMilliseconds)});\n      c.disconnect(new OfflineCause.IdleOfflineCause());\n    }\n else {\n      return TimeUnit.MILLISECONDS.toMinutes(TimeUnit.MINUTES.toMillis(idleDelay) - idleMilliseconds);\n    }\n  }\n  return 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3566,
        "startLineNumber" : 216,
        "startColumnNumber" : 8,
        "endLineNumber" : 277,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override @GuardedBy(\"hudson.model.Queue.lock\") public long check(final SlaveComputer c){\n  if (c.isOffline() && c.isLaunchSupported()) {\n    final HashMap<Computer,Integer> availableComputers=new HashMap<>();\n    for (    Computer o : Jenkins.get().getComputers()) {\n      if ((o.isOnline() || o.isConnecting()) && o.isPartiallyIdle() && o.isAcceptingTasks()) {\n        final int idleExecutors=o.countIdle();\n        if (idleExecutors > 0)         availableComputers.put(o,idleExecutors);\n      }\n    }\n    boolean needComputer=false;\n    long demandMilliseconds=0;\n    for (    Queue.BuildableItem item : Queue.getInstance().getBuildableItems()) {\n      boolean needExecutor=true;\n      for (      Computer o : Collections.unmodifiableSet(availableComputers.keySet())) {\n        Node otherNode=o.getNode();\n        if (otherNode != null && otherNode.canTake(item) == null) {\n          needExecutor=false;\n          final int availableExecutors=availableComputers.remove(o);\n          if (availableExecutors > 1) {\n            availableComputers.put(o,availableExecutors - 1);\n          }\n else {\n            availableComputers.remove(o);\n          }\n          break;\n        }\n      }\n      Node checkedNode=c.getNode();\n      if (needExecutor && checkedNode != null && checkedNode.canTake(item) == null) {\n        demandMilliseconds=System.currentTimeMillis() - item.buildableStartMilliseconds;\n        needComputer=demandMilliseconds > TimeUnit.MINUTES.toMillis(inDemandDelay);\n        break;\n      }\n    }\n    if (needComputer) {\n      logger.log(Level.INFO,\"Launching computer {0} as it has been in demand for {1}\",new Object[]{c.getName(),Util.getTimeSpanString(demandMilliseconds)});\n      c.connect(false);\n    }\n  }\n else   if (c.isIdle()) {\n    final long idleMilliseconds=System.currentTimeMillis() - c.getIdleStartMilliseconds();\n    if (idleMilliseconds > TimeUnit.MINUTES.toMillis(idleDelay)) {\n      logger.log(Level.INFO,\"Disconnecting computer {0} as it has been idle for {1}\",new Object[]{c.getName(),Util.getTimeSpanString(idleMilliseconds)});\n      c.disconnect(new OfflineCause.IdleOfflineCause());\n    }\n else {\n      return TimeUnit.MILLISECONDS.toMinutes(TimeUnit.MINUTES.toMillis(idleDelay) - idleMilliseconds);\n    }\n  }\n  return 1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 325,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 222,
        "startColumnNumber" : 24,
        "endLineNumber" : 222,
        "endColumnNumber" : 105
      },
      "nodeContext" : "(o.isOnline() || o.isConnecting()) && o.isPartiallyIdle() && o.isAcceptingTasks()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 222,
    "startColumnNumber" : 41,
    "endLineNumber" : 222,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}