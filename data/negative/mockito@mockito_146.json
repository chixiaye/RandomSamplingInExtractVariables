{
  "id" : 146,
  "expression" : "settings.useConstructor()",
  "projectName" : "mockito@mockito",
  "commitID" : "0b883e189676b7362b39f7a3ec97af7005e024dd",
  "filePath" : "src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "settings.useConstructor()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 91,
      "startColumnNumber" : 38,
      "endLineNumber" : 91,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 91,
        "startColumnNumber" : 19,
        "endLineNumber" : 91,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Mockito.mock(type,settings.useConstructor())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 65
      },
      "nodeContext" : "return Mockito.mock(type,settings.useConstructor());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 90,
        "startColumnNumber" : 32,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return Mockito.mock(type,settings.useConstructor());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type.isInterface()) {\n  return Mockito.mock(type,settings.useConstructor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2352,
        "startLineNumber" : 86,
        "startColumnNumber" : 93,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockSettings settings=withSettings().defaultAnswer(CALLS_REAL_METHODS).name(field.getName());\n  Class<?> type=field.getType();\n  if (type.isInterface()) {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n  int modifiers=type.getModifiers();\n  if (Modifier.isPrivate(modifiers) && Modifier.isAbstract(modifiers) && type.getEnclosingClass() != null) {\n    throw new MockitoException(join(\"@Spy annotation can't initialize private abstract inner classes.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + type.getEnclosingClass().getSimpleName() + \"'\",\"\",\"You should augment the visibility of this inner class\"));\n  }\n  if (!Modifier.isStatic(modifiers)) {\n    Class<?> enclosing=type.getEnclosingClass();\n    if (enclosing != null) {\n      if (!enclosing.isInstance(testInstance)) {\n        throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n      }\n      return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n    }\n  }\n  Constructor<?> constructor;\n  try {\n    constructor=type.getDeclaredConstructor();\n  }\n catch (  NoSuchMethodException e) {\n    throw new MockitoException(\"Please ensure that the type '\" + type.getSimpleName() + \"' has a no-arg constructor.\");\n  }\n  if (Modifier.isPrivate(constructor.getModifiers())) {\n    constructor.setAccessible(true);\n    return Mockito.mock(type,settings.spiedInstance(constructor.newInstance()));\n  }\n else {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2517,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Object newSpyInstance(Object testInstance,Field field) throws InstantiationException, IllegalAccessException, InvocationTargetException {\n  MockSettings settings=withSettings().defaultAnswer(CALLS_REAL_METHODS).name(field.getName());\n  Class<?> type=field.getType();\n  if (type.isInterface()) {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n  int modifiers=type.getModifiers();\n  if (Modifier.isPrivate(modifiers) && Modifier.isAbstract(modifiers) && type.getEnclosingClass() != null) {\n    throw new MockitoException(join(\"@Spy annotation can't initialize private abstract inner classes.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + type.getEnclosingClass().getSimpleName() + \"'\",\"\",\"You should augment the visibility of this inner class\"));\n  }\n  if (!Modifier.isStatic(modifiers)) {\n    Class<?> enclosing=type.getEnclosingClass();\n    if (enclosing != null) {\n      if (!enclosing.isInstance(testInstance)) {\n        throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n      }\n      return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n    }\n  }\n  Constructor<?> constructor;\n  try {\n    constructor=type.getDeclaredConstructor();\n  }\n catch (  NoSuchMethodException e) {\n    throw new MockitoException(\"Please ensure that the type '\" + type.getSimpleName() + \"' has a no-arg constructor.\");\n  }\n  if (Modifier.isPrivate(constructor.getModifiers())) {\n    constructor.setAccessible(true);\n    return Mockito.mock(type,settings.spiedInstance(constructor.newInstance()));\n  }\n else {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 65
      },
      "nodeContext" : "return Mockito.mock(type,settings.useConstructor());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "org.mockito.MockSettings"
  }, {
    "nodeContext" : "settings.useConstructor()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 110,
      "startColumnNumber" : 42,
      "endLineNumber" : 110,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 110,
        "startColumnNumber" : 42,
        "endLineNumber" : 111,
        "endColumnNumber" : 78
      },
      "nodeContext" : "settings.useConstructor().outerInstance(testInstance)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 110,
        "startColumnNumber" : 23,
        "endLineNumber" : 111,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Mockito.mock(type,settings.useConstructor().outerInstance(testInstance))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 110,
        "startColumnNumber" : 16,
        "endLineNumber" : 111,
        "endColumnNumber" : 80
      },
      "nodeContext" : "return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 642,
        "startLineNumber" : 103,
        "startColumnNumber" : 35,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!enclosing.isInstance(testInstance)) {\n    throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n  }\n  return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 665,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (enclosing != null) {\n  if (!enclosing.isInstance(testInstance)) {\n    throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n  }\n  return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 101,
        "startColumnNumber" : 43,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Class<?> enclosing=type.getEnclosingClass();\n  if (enclosing != null) {\n    if (!enclosing.isInstance(testInstance)) {\n      throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n    }\n    return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 786,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!Modifier.isStatic(modifiers)) {\n  Class<?> enclosing=type.getEnclosingClass();\n  if (enclosing != null) {\n    if (!enclosing.isInstance(testInstance)) {\n      throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n    }\n    return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2352,
        "startLineNumber" : 86,
        "startColumnNumber" : 93,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockSettings settings=withSettings().defaultAnswer(CALLS_REAL_METHODS).name(field.getName());\n  Class<?> type=field.getType();\n  if (type.isInterface()) {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n  int modifiers=type.getModifiers();\n  if (Modifier.isPrivate(modifiers) && Modifier.isAbstract(modifiers) && type.getEnclosingClass() != null) {\n    throw new MockitoException(join(\"@Spy annotation can't initialize private abstract inner classes.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + type.getEnclosingClass().getSimpleName() + \"'\",\"\",\"You should augment the visibility of this inner class\"));\n  }\n  if (!Modifier.isStatic(modifiers)) {\n    Class<?> enclosing=type.getEnclosingClass();\n    if (enclosing != null) {\n      if (!enclosing.isInstance(testInstance)) {\n        throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n      }\n      return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n    }\n  }\n  Constructor<?> constructor;\n  try {\n    constructor=type.getDeclaredConstructor();\n  }\n catch (  NoSuchMethodException e) {\n    throw new MockitoException(\"Please ensure that the type '\" + type.getSimpleName() + \"' has a no-arg constructor.\");\n  }\n  if (Modifier.isPrivate(constructor.getModifiers())) {\n    constructor.setAccessible(true);\n    return Mockito.mock(type,settings.spiedInstance(constructor.newInstance()));\n  }\n else {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2517,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Object newSpyInstance(Object testInstance,Field field) throws InstantiationException, IllegalAccessException, InvocationTargetException {\n  MockSettings settings=withSettings().defaultAnswer(CALLS_REAL_METHODS).name(field.getName());\n  Class<?> type=field.getType();\n  if (type.isInterface()) {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n  int modifiers=type.getModifiers();\n  if (Modifier.isPrivate(modifiers) && Modifier.isAbstract(modifiers) && type.getEnclosingClass() != null) {\n    throw new MockitoException(join(\"@Spy annotation can't initialize private abstract inner classes.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + type.getEnclosingClass().getSimpleName() + \"'\",\"\",\"You should augment the visibility of this inner class\"));\n  }\n  if (!Modifier.isStatic(modifiers)) {\n    Class<?> enclosing=type.getEnclosingClass();\n    if (enclosing != null) {\n      if (!enclosing.isInstance(testInstance)) {\n        throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n      }\n      return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n    }\n  }\n  Constructor<?> constructor;\n  try {\n    constructor=type.getDeclaredConstructor();\n  }\n catch (  NoSuchMethodException e) {\n    throw new MockitoException(\"Please ensure that the type '\" + type.getSimpleName() + \"' has a no-arg constructor.\");\n  }\n  if (Modifier.isPrivate(constructor.getModifiers())) {\n    constructor.setAccessible(true);\n    return Mockito.mock(type,settings.spiedInstance(constructor.newInstance()));\n  }\n else {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 110,
        "startColumnNumber" : 42,
        "endLineNumber" : 111,
        "endColumnNumber" : 78
      },
      "nodeContext" : "settings.useConstructor().outerInstance(testInstance)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "org.mockito.MockSettings"
  }, {
    "nodeContext" : "settings.useConstructor()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 125,
      "startColumnNumber" : 38,
      "endLineNumber" : 125,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 125,
        "startColumnNumber" : 19,
        "endLineNumber" : 125,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Mockito.mock(type,settings.useConstructor())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 65
      },
      "nodeContext" : "return Mockito.mock(type,settings.useConstructor());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 124,
        "startColumnNumber" : 15,
        "endLineNumber" : 126,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return Mockito.mock(type,settings.useConstructor());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Modifier.isPrivate(constructor.getModifiers())) {\n  constructor.setAccessible(true);\n  return Mockito.mock(type,settings.spiedInstance(constructor.newInstance()));\n}\n else {\n  return Mockito.mock(type,settings.useConstructor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2352,
        "startLineNumber" : 86,
        "startColumnNumber" : 93,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockSettings settings=withSettings().defaultAnswer(CALLS_REAL_METHODS).name(field.getName());\n  Class<?> type=field.getType();\n  if (type.isInterface()) {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n  int modifiers=type.getModifiers();\n  if (Modifier.isPrivate(modifiers) && Modifier.isAbstract(modifiers) && type.getEnclosingClass() != null) {\n    throw new MockitoException(join(\"@Spy annotation can't initialize private abstract inner classes.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + type.getEnclosingClass().getSimpleName() + \"'\",\"\",\"You should augment the visibility of this inner class\"));\n  }\n  if (!Modifier.isStatic(modifiers)) {\n    Class<?> enclosing=type.getEnclosingClass();\n    if (enclosing != null) {\n      if (!enclosing.isInstance(testInstance)) {\n        throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n      }\n      return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n    }\n  }\n  Constructor<?> constructor;\n  try {\n    constructor=type.getDeclaredConstructor();\n  }\n catch (  NoSuchMethodException e) {\n    throw new MockitoException(\"Please ensure that the type '\" + type.getSimpleName() + \"' has a no-arg constructor.\");\n  }\n  if (Modifier.isPrivate(constructor.getModifiers())) {\n    constructor.setAccessible(true);\n    return Mockito.mock(type,settings.spiedInstance(constructor.newInstance()));\n  }\n else {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2517,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Object newSpyInstance(Object testInstance,Field field) throws InstantiationException, IllegalAccessException, InvocationTargetException {\n  MockSettings settings=withSettings().defaultAnswer(CALLS_REAL_METHODS).name(field.getName());\n  Class<?> type=field.getType();\n  if (type.isInterface()) {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n  int modifiers=type.getModifiers();\n  if (Modifier.isPrivate(modifiers) && Modifier.isAbstract(modifiers) && type.getEnclosingClass() != null) {\n    throw new MockitoException(join(\"@Spy annotation can't initialize private abstract inner classes.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + type.getEnclosingClass().getSimpleName() + \"'\",\"\",\"You should augment the visibility of this inner class\"));\n  }\n  if (!Modifier.isStatic(modifiers)) {\n    Class<?> enclosing=type.getEnclosingClass();\n    if (enclosing != null) {\n      if (!enclosing.isInstance(testInstance)) {\n        throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n      }\n      return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n    }\n  }\n  Constructor<?> constructor;\n  try {\n    constructor=type.getDeclaredConstructor();\n  }\n catch (  NoSuchMethodException e) {\n    throw new MockitoException(\"Please ensure that the type '\" + type.getSimpleName() + \"' has a no-arg constructor.\");\n  }\n  if (Modifier.isPrivate(constructor.getModifiers())) {\n    constructor.setAccessible(true);\n    return Mockito.mock(type,settings.spiedInstance(constructor.newInstance()));\n  }\n else {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 65
      },
      "nodeContext" : "return Mockito.mock(type,settings.useConstructor());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "org.mockito.MockSettings"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 91,
    "startColumnNumber" : 38,
    "endLineNumber" : 91,
    "endColumnNumber" : 63
  }, {
    "charLength" : 25,
    "startLineNumber" : 110,
    "startColumnNumber" : 42,
    "endLineNumber" : 110,
    "endColumnNumber" : 67
  }, {
    "charLength" : 25,
    "startLineNumber" : 125,
    "startColumnNumber" : 38,
    "endLineNumber" : 125,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}