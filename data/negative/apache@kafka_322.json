{
  "id" : 322,
  "expression" : "1",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/SourceTaskOffsetCommitterTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 147,
      "startColumnNumber" : 49,
      "endLineNumber" : 147,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 147,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 51
      },
      "nodeContext" : "EasyMock.expect(taskId.task()).andReturn(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 147,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 52
      },
      "nodeContext" : "EasyMock.expect(taskId.task()).andReturn(1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2223,
        "startLineNumber" : 131,
        "startColumnNumber" : 46,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PowerMock.replayAll();\n  assertTrue(committers.isEmpty());\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andReturn(null);\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  PowerMock.replayAll();\n  committers.put(taskId,taskFuture);\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andThrow(new CancellationException());\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  mockLog.trace(EasyMock.anyString(),EasyMock.<Object>anyObject());\n  PowerMock.expectLastCall();\n  PowerMock.replayAll();\n  committers.put(taskId,taskFuture);\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andThrow(new InterruptedException());\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  PowerMock.replayAll();\n  try {\n    committers.put(taskId,taskFuture);\n    committer.remove(taskId);\n    fail(\"Expected ConnectException to be raised\");\n  }\n catch (  ConnectException e) {\n  }\n  PowerMock.verifyAll();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2275,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRemove() throws Exception {\n  PowerMock.replayAll();\n  assertTrue(committers.isEmpty());\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andReturn(null);\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  PowerMock.replayAll();\n  committers.put(taskId,taskFuture);\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andThrow(new CancellationException());\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  mockLog.trace(EasyMock.anyString(),EasyMock.<Object>anyObject());\n  PowerMock.expectLastCall();\n  PowerMock.replayAll();\n  committers.put(taskId,taskFuture);\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andThrow(new InterruptedException());\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  PowerMock.replayAll();\n  try {\n    committers.put(taskId,taskFuture);\n    committer.remove(taskId);\n    fail(\"Expected ConnectException to be raised\");\n  }\n catch (  ConnectException e) {\n  }\n  PowerMock.verifyAll();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 147,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 52
      },
      "nodeContext" : "EasyMock.expect(taskId.task()).andReturn(1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 162,
      "startColumnNumber" : 49,
      "endLineNumber" : 162,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 162,
        "startColumnNumber" : 8,
        "endLineNumber" : 162,
        "endColumnNumber" : 51
      },
      "nodeContext" : "EasyMock.expect(taskId.task()).andReturn(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 162,
        "startColumnNumber" : 8,
        "endLineNumber" : 162,
        "endColumnNumber" : 52
      },
      "nodeContext" : "EasyMock.expect(taskId.task()).andReturn(1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2223,
        "startLineNumber" : 131,
        "startColumnNumber" : 46,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PowerMock.replayAll();\n  assertTrue(committers.isEmpty());\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andReturn(null);\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  PowerMock.replayAll();\n  committers.put(taskId,taskFuture);\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andThrow(new CancellationException());\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  mockLog.trace(EasyMock.anyString(),EasyMock.<Object>anyObject());\n  PowerMock.expectLastCall();\n  PowerMock.replayAll();\n  committers.put(taskId,taskFuture);\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andThrow(new InterruptedException());\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  PowerMock.replayAll();\n  try {\n    committers.put(taskId,taskFuture);\n    committer.remove(taskId);\n    fail(\"Expected ConnectException to be raised\");\n  }\n catch (  ConnectException e) {\n  }\n  PowerMock.verifyAll();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2275,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRemove() throws Exception {\n  PowerMock.replayAll();\n  assertTrue(committers.isEmpty());\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andReturn(null);\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  PowerMock.replayAll();\n  committers.put(taskId,taskFuture);\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andThrow(new CancellationException());\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  mockLog.trace(EasyMock.anyString(),EasyMock.<Object>anyObject());\n  PowerMock.expectLastCall();\n  PowerMock.replayAll();\n  committers.put(taskId,taskFuture);\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andThrow(new InterruptedException());\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  PowerMock.replayAll();\n  try {\n    committers.put(taskId,taskFuture);\n    committer.remove(taskId);\n    fail(\"Expected ConnectException to be raised\");\n  }\n catch (  ConnectException e) {\n  }\n  PowerMock.verifyAll();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 162,
        "startColumnNumber" : 8,
        "endLineNumber" : 162,
        "endColumnNumber" : 52
      },
      "nodeContext" : "EasyMock.expect(taskId.task()).andReturn(1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 179,
      "startColumnNumber" : 49,
      "endLineNumber" : 179,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 179,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 51
      },
      "nodeContext" : "EasyMock.expect(taskId.task()).andReturn(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 179,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 52
      },
      "nodeContext" : "EasyMock.expect(taskId.task()).andReturn(1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2223,
        "startLineNumber" : 131,
        "startColumnNumber" : 46,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PowerMock.replayAll();\n  assertTrue(committers.isEmpty());\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andReturn(null);\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  PowerMock.replayAll();\n  committers.put(taskId,taskFuture);\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andThrow(new CancellationException());\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  mockLog.trace(EasyMock.anyString(),EasyMock.<Object>anyObject());\n  PowerMock.expectLastCall();\n  PowerMock.replayAll();\n  committers.put(taskId,taskFuture);\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andThrow(new InterruptedException());\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  PowerMock.replayAll();\n  try {\n    committers.put(taskId,taskFuture);\n    committer.remove(taskId);\n    fail(\"Expected ConnectException to be raised\");\n  }\n catch (  ConnectException e) {\n  }\n  PowerMock.verifyAll();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2275,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRemove() throws Exception {\n  PowerMock.replayAll();\n  assertTrue(committers.isEmpty());\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andReturn(null);\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  PowerMock.replayAll();\n  committers.put(taskId,taskFuture);\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andThrow(new CancellationException());\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  mockLog.trace(EasyMock.anyString(),EasyMock.<Object>anyObject());\n  PowerMock.expectLastCall();\n  PowerMock.replayAll();\n  committers.put(taskId,taskFuture);\n  committer.remove(taskId);\n  assertTrue(committers.isEmpty());\n  PowerMock.verifyAll();\n  PowerMock.resetAll();\n  EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);\n  EasyMock.expect(taskFuture.isDone()).andReturn(false);\n  EasyMock.expect(taskFuture.get()).andThrow(new InterruptedException());\n  EasyMock.expect(taskId.connector()).andReturn(\"MyConnector\");\n  EasyMock.expect(taskId.task()).andReturn(1);\n  PowerMock.replayAll();\n  try {\n    committers.put(taskId,taskFuture);\n    committer.remove(taskId);\n    fail(\"Expected ConnectException to be raised\");\n  }\n catch (  ConnectException e) {\n  }\n  PowerMock.verifyAll();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 179,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 52
      },
      "nodeContext" : "EasyMock.expect(taskId.task()).andReturn(1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 147,
    "startColumnNumber" : 49,
    "endLineNumber" : 147,
    "endColumnNumber" : 50
  }, {
    "charLength" : 1,
    "startLineNumber" : 162,
    "startColumnNumber" : 49,
    "endLineNumber" : 162,
    "endColumnNumber" : 50
  }, {
    "charLength" : 1,
    "startLineNumber" : 179,
    "startColumnNumber" : 49,
    "endLineNumber" : 179,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}