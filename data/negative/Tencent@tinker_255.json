{
  "id" : 255,
  "expression" : "null",
  "projectName" : "Tencent@tinker",
  "commitID" : "8e8108e5cf1668bc4a4e33c5ac971e61f44a590d",
  "filePath" : "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/UpgradePatch.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 70,
      "startColumnNumber" : 24,
      "endLineNumber" : 70,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 70,
        "endColumnNumber" : 28
      },
      "nodeContext" : "patchMd5 == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (patchMd5 == null) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 70,
        "endColumnNumber" : 28
      },
      "nodeContext" : "patchMd5 == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 86,
      "startColumnNumber" : 24,
      "endLineNumber" : 86,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 28
      },
      "nodeContext" : "pkgProps == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (pkgProps == null) {\n  TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 28
      },
      "nodeContext" : "pkgProps == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 92,
      "startColumnNumber" : 61,
      "endLineNumber" : 92,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 92,
        "startColumnNumber" : 40,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "isProtectedAppStr != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 92,
        "startColumnNumber" : 40,
        "endLineNumber" : 92,
        "endColumnNumber" : 97
      },
      "nodeContext" : "isProtectedAppStr != null && !isProtectedAppStr.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 92,
        "startColumnNumber" : 40,
        "endLineNumber" : 92,
        "endColumnNumber" : 131
      },
      "nodeContext" : "isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 92,
        "startColumnNumber" : 39,
        "endLineNumber" : 92,
        "endColumnNumber" : 132
      },
      "nodeContext" : "(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 92,
        "startColumnNumber" : 22,
        "endLineNumber" : 92,
        "endColumnNumber" : 132
      },
      "nodeContext" : "isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 133
      },
      "nodeContext" : "final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 133
      },
      "nodeContext" : "final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 100,
      "startColumnNumber" : 23,
      "endLineNumber" : 100,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 27
      },
      "nodeContext" : "oldInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1830,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oldInfo != null) {\n  if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n    return false;\n  }\n  if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n    manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n    return false;\n  }\n  final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n    TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n    UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n    return true;\n  }\n  final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n  newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n}\n else {\n  newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 169,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 27
      },
      "nodeContext" : "oldInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 101,
      "startColumnNumber" : 38,
      "endLineNumber" : 101,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 42
      },
      "nodeContext" : "oldInfo.oldVersion == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 72
      },
      "nodeContext" : "oldInfo.oldVersion == null || oldInfo.newVersion == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 98
      },
      "nodeContext" : "oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 329,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n  manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1652,
        "startLineNumber" : 100,
        "startColumnNumber" : 29,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n    return false;\n  }\n  if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n    manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n    return false;\n  }\n  final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n    TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n    UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n    return true;\n  }\n  final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n  newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1830,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oldInfo != null) {\n  if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n    return false;\n  }\n  if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n    manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n    return false;\n  }\n  final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n    TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n    UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n    return true;\n  }\n  final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n  newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n}\n else {\n  newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 169,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 98
      },
      "nodeContext" : "oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 101,
      "startColumnNumber" : 68,
      "endLineNumber" : 101,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 101,
        "startColumnNumber" : 46,
        "endLineNumber" : 101,
        "endColumnNumber" : 72
      },
      "nodeContext" : "oldInfo.newVersion == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 72
      },
      "nodeContext" : "oldInfo.oldVersion == null || oldInfo.newVersion == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 98
      },
      "nodeContext" : "oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 329,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n  manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1652,
        "startLineNumber" : 100,
        "startColumnNumber" : 29,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n    return false;\n  }\n  if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n    manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n    return false;\n  }\n  final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n    TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n    UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n    return true;\n  }\n  final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n  newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1830,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oldInfo != null) {\n  if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n    return false;\n  }\n  if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n    manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n    return false;\n  }\n  final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n    TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n    UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n    return true;\n  }\n  final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n  newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n}\n else {\n  newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 169,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 98
      },
      "nodeContext" : "oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 101,
      "startColumnNumber" : 94,
      "endLineNumber" : 101,
      "endColumnNumber" : 98
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 101,
        "startColumnNumber" : 76,
        "endLineNumber" : 101,
        "endColumnNumber" : 98
      },
      "nodeContext" : "oldInfo.oatDir == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 98
      },
      "nodeContext" : "oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 329,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n  manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1652,
        "startLineNumber" : 100,
        "startColumnNumber" : 29,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n    return false;\n  }\n  if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n    manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n    return false;\n  }\n  final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n    TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n    UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n    return true;\n  }\n  final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n  newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1830,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oldInfo != null) {\n  if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n    return false;\n  }\n  if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n    manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n    return false;\n  }\n  final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n    TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n    UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n    return true;\n  }\n  final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n  newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n}\n else {\n  newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 169,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 98
      },
      "nodeContext" : "oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 70,
    "startColumnNumber" : 24,
    "endLineNumber" : 70,
    "endColumnNumber" : 28
  }, {
    "charLength" : 4,
    "startLineNumber" : 86,
    "startColumnNumber" : 24,
    "endLineNumber" : 86,
    "endColumnNumber" : 28
  }, {
    "charLength" : 4,
    "startLineNumber" : 92,
    "startColumnNumber" : 61,
    "endLineNumber" : 92,
    "endColumnNumber" : 65
  }, {
    "charLength" : 4,
    "startLineNumber" : 100,
    "startColumnNumber" : 23,
    "endLineNumber" : 100,
    "endColumnNumber" : 27
  }, {
    "charLength" : 4,
    "startLineNumber" : 101,
    "startColumnNumber" : 38,
    "endLineNumber" : 101,
    "endColumnNumber" : 42
  }, {
    "charLength" : 4,
    "startLineNumber" : 101,
    "startColumnNumber" : 68,
    "endLineNumber" : 101,
    "endColumnNumber" : 72
  }, {
    "charLength" : 4,
    "startLineNumber" : 101,
    "startColumnNumber" : 94,
    "endLineNumber" : 101,
    "endColumnNumber" : 98
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 1
  } ]
}