{
  "id" : 369,
  "expression" : "isScriptProperty",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.cmp.simple/src/org/jkiss/dbeaver/tools/compare/simple/CompareObjectsExecutor.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "isScriptProperty",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 258,
      "startColumnNumber" : 33,
      "endLineNumber" : 258,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 258,
        "startColumnNumber" : 32,
        "endLineNumber" : 258,
        "endColumnNumber" : 49
      },
      "nodeContext" : "!isScriptProperty",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 258,
        "startColumnNumber" : 28,
        "endLineNumber" : 260,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (!isScriptProperty) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 256,
        "startColumnNumber" : 44,
        "endLineNumber" : 261,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (!isScriptProperty) {\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 303,
        "startLineNumber" : 256,
        "startColumnNumber" : 24,
        "endLineNumber" : 263,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (compareScripts) {\n  if (!isScriptProperty) {\n    continue;\n  }\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 351,
        "startLineNumber" : 255,
        "startColumnNumber" : 48,
        "endLineNumber" : 264,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (compareScripts) {\n    if (!isScriptProperty) {\n      continue;\n    }\n  }\n else {\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 379,
        "startLineNumber" : 255,
        "startColumnNumber" : 20,
        "endLineNumber" : 264,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!compareLazyProperties) {\n  if (compareScripts) {\n    if (!isScriptProperty) {\n      continue;\n    }\n  }\n else {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 419,
        "startLineNumber" : 254,
        "startColumnNumber" : 35,
        "endLineNumber" : 265,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (!compareLazyProperties) {\n    if (compareScripts) {\n      if (!isScriptProperty) {\n        continue;\n      }\n    }\n else {\n      continue;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 562,
        "startLineNumber" : 254,
        "startColumnNumber" : 16,
        "endLineNumber" : 269,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (prop.isLazy()) {\n  if (!compareLazyProperties) {\n    if (compareScripts) {\n      if (!isScriptProperty) {\n        continue;\n      }\n    }\n else {\n      continue;\n    }\n  }\n}\n else {\n  if (prop.isHidden()) {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1328,
        "startLineNumber" : 252,
        "startColumnNumber" : 61,
        "endLineNumber" : 281,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean isScriptProperty=prop.getId().equals(DBConstants.PARAM_OBJECT_DEFINITION_TEXT) || prop.getId().equals(DBConstants.PARAM_EXTENDED_DEFINITION_TEXT);\n  if (prop.isLazy()) {\n    if (!compareLazyProperties) {\n      if (compareScripts) {\n        if (!isScriptProperty) {\n          continue;\n        }\n      }\n else {\n        continue;\n      }\n    }\n  }\n else {\n    if (prop.isHidden()) {\n      continue;\n    }\n  }\n  if (onlyStruct && !isScriptProperty) {\n    continue;\n  }\n  Object propertyValue=propertySource.getPropertyValue(monitor,databaseObject,prop,true);\nsynchronized (PROPS_LOCK) {\n    if (propertyValue instanceof DBPNamedObject) {\n      propertyValue=((DBPNamedObject)propertyValue).getName();\n    }\n    nodeProperties.put(prop,propertyValue);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1377,
        "startLineNumber" : 252,
        "startColumnNumber" : 12,
        "endLineNumber" : 281,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (ObjectPropertyDescriptor prop : properties) {\n  boolean isScriptProperty=prop.getId().equals(DBConstants.PARAM_OBJECT_DEFINITION_TEXT) || prop.getId().equals(DBConstants.PARAM_EXTENDED_DEFINITION_TEXT);\n  if (prop.isLazy()) {\n    if (!compareLazyProperties) {\n      if (compareScripts) {\n        if (!isScriptProperty) {\n          continue;\n        }\n      }\n else {\n        continue;\n      }\n    }\n  }\n else {\n    if (prop.isHidden()) {\n      continue;\n    }\n  }\n  if (onlyStruct && !isScriptProperty) {\n    continue;\n  }\n  Object propertyValue=propertySource.getPropertyValue(monitor,databaseObject,prop,true);\nsynchronized (PROPS_LOCK) {\n    if (propertyValue instanceof DBPNamedObject) {\n      propertyValue=((DBPNamedObject)propertyValue).getName();\n    }\n    nodeProperties.put(prop,propertyValue);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 98,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2002,
        "startLineNumber" : 241,
        "startColumnNumber" : 43,
        "endLineNumber" : 283,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (monitor.isCanceled()) {\n    throw new InterruptedException();\n  }\n  DBSObject databaseObject=node.getObject();\n  Map<DBPPropertyDescriptor,Object> nodeProperties=propertyValues.get(databaseObject);\n  if (nodeProperties == null) {\n    nodeProperties=new IdentityHashMap<>();\n    propertyValues.put(databaseObject,nodeProperties);\n  }\n  PropertyCollector propertySource=new PropertyCollector(databaseObject,compareLazyProperties || compareScripts);\n  for (  ObjectPropertyDescriptor prop : properties) {\n    boolean isScriptProperty=prop.getId().equals(DBConstants.PARAM_OBJECT_DEFINITION_TEXT) || prop.getId().equals(DBConstants.PARAM_EXTENDED_DEFINITION_TEXT);\n    if (prop.isLazy()) {\n      if (!compareLazyProperties) {\n        if (compareScripts) {\n          if (!isScriptProperty) {\n            continue;\n          }\n        }\n else {\n          continue;\n        }\n      }\n    }\n else {\n      if (prop.isHidden()) {\n        continue;\n      }\n    }\n    if (onlyStruct && !isScriptProperty) {\n      continue;\n    }\n    Object propertyValue=propertySource.getPropertyValue(monitor,databaseObject,prop,true);\nsynchronized (PROPS_LOCK) {\n      if (propertyValue instanceof DBPNamedObject) {\n        propertyValue=((DBPNamedObject)propertyValue).getName();\n      }\n      nodeProperties.put(prop,propertyValue);\n    }\n  }\n  monitor.worked(1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2037,
        "startLineNumber" : 241,
        "startColumnNumber" : 8,
        "endLineNumber" : 283,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (DBNDatabaseNode node : nodes) {\n  if (monitor.isCanceled()) {\n    throw new InterruptedException();\n  }\n  DBSObject databaseObject=node.getObject();\n  Map<DBPPropertyDescriptor,Object> nodeProperties=propertyValues.get(databaseObject);\n  if (nodeProperties == null) {\n    nodeProperties=new IdentityHashMap<>();\n    propertyValues.put(databaseObject,nodeProperties);\n  }\n  PropertyCollector propertySource=new PropertyCollector(databaseObject,compareLazyProperties || compareScripts);\n  for (  ObjectPropertyDescriptor prop : properties) {\n    boolean isScriptProperty=prop.getId().equals(DBConstants.PARAM_OBJECT_DEFINITION_TEXT) || prop.getId().equals(DBConstants.PARAM_EXTENDED_DEFINITION_TEXT);\n    if (prop.isLazy()) {\n      if (!compareLazyProperties) {\n        if (compareScripts) {\n          if (!isScriptProperty) {\n            continue;\n          }\n        }\n else {\n          continue;\n        }\n      }\n    }\n else {\n      if (prop.isHidden()) {\n        continue;\n      }\n    }\n    if (onlyStruct && !isScriptProperty) {\n      continue;\n    }\n    Object propertyValue=propertySource.getPropertyValue(monitor,databaseObject,prop,true);\nsynchronized (PROPS_LOCK) {\n      if (propertyValue instanceof DBPNamedObject) {\n        propertyValue=((DBPNamedObject)propertyValue).getName();\n      }\n      nodeProperties.put(prop,propertyValue);\n    }\n  }\n  monitor.worked(1);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 171,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4026,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 289,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean onlyStruct=settings.isCompareOnlyStructure();\n  this.initializedCount=0;\n  this.initializeError=null;\n  this.propertyValues.clear();\n  StringBuilder title=new StringBuilder();\n{\n    monitor.subTask(\"Initialize nodes\");\n    for (    DBNDatabaseNode node : nodes) {\n      if (title.length() > 0)       title.append(\", \");\n      title.append(node.getNodeFullName());\n      node.initializeNode(null,initializeFinisher);\n      monitor.worked(1);\n    }\n    while (initializedCount != nodes.size()) {\n      if (initializeError != null) {\n        throw new DBException(initializeError.getMessage());\n      }\n      Thread.sleep(50);\n      if (monitor.isCanceled()) {\n        throw new InterruptedException();\n      }\n    }\n  }\n  monitor.subTask(\"Compare \" + title.toString());\n  boolean compareLazyProperties=false;\n  DBNDatabaseNode firstNode=nodes.get(0);\n  List<ObjectPropertyDescriptor> properties=ObjectPropertyDescriptor.extractAnnotations(null,firstNode.getObject().getClass(),getDataSourceFilter(firstNode),null);\n  for (  ObjectPropertyDescriptor prop : properties) {\n    if (prop.isLazy()) {\n      compareLazyProperties=true;\n      break;\n    }\n  }\n  boolean compareScripts=compareLazyProperties && settings.isCompareScripts();\n  compareLazyProperties=compareLazyProperties && settings.isCompareLazyProperties();\n  if (onlyStruct && !compareScripts) {\n    return;\n  }\n  for (  DBNDatabaseNode node : nodes) {\n    if (monitor.isCanceled()) {\n      throw new InterruptedException();\n    }\n    DBSObject databaseObject=node.getObject();\n    Map<DBPPropertyDescriptor,Object> nodeProperties=propertyValues.get(databaseObject);\n    if (nodeProperties == null) {\n      nodeProperties=new IdentityHashMap<>();\n      propertyValues.put(databaseObject,nodeProperties);\n    }\n    PropertyCollector propertySource=new PropertyCollector(databaseObject,compareLazyProperties || compareScripts);\n    for (    ObjectPropertyDescriptor prop : properties) {\n      boolean isScriptProperty=prop.getId().equals(DBConstants.PARAM_OBJECT_DEFINITION_TEXT) || prop.getId().equals(DBConstants.PARAM_EXTENDED_DEFINITION_TEXT);\n      if (prop.isLazy()) {\n        if (!compareLazyProperties) {\n          if (compareScripts) {\n            if (!isScriptProperty) {\n              continue;\n            }\n          }\n else {\n            continue;\n          }\n        }\n      }\n else {\n        if (prop.isHidden()) {\n          continue;\n        }\n      }\n      if (onlyStruct && !isScriptProperty) {\n        continue;\n      }\n      Object propertyValue=propertySource.getPropertyValue(monitor,databaseObject,prop,true);\nsynchronized (PROPS_LOCK) {\n        if (propertyValue instanceof DBPNamedObject) {\n          propertyValue=((DBPNamedObject)propertyValue).getName();\n        }\n        nodeProperties.put(prop,propertyValue);\n      }\n    }\n    monitor.worked(1);\n  }\n  for (  ObjectPropertyDescriptor prop : properties) {\n    reportPropertyCompare(prop);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 376,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4159,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 289,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void compareProperties(DBRProgressMonitor monitor,List<DBNDatabaseNode> nodes) throws DBException, InterruptedException {\n  boolean onlyStruct=settings.isCompareOnlyStructure();\n  this.initializedCount=0;\n  this.initializeError=null;\n  this.propertyValues.clear();\n  StringBuilder title=new StringBuilder();\n{\n    monitor.subTask(\"Initialize nodes\");\n    for (    DBNDatabaseNode node : nodes) {\n      if (title.length() > 0)       title.append(\", \");\n      title.append(node.getNodeFullName());\n      node.initializeNode(null,initializeFinisher);\n      monitor.worked(1);\n    }\n    while (initializedCount != nodes.size()) {\n      if (initializeError != null) {\n        throw new DBException(initializeError.getMessage());\n      }\n      Thread.sleep(50);\n      if (monitor.isCanceled()) {\n        throw new InterruptedException();\n      }\n    }\n  }\n  monitor.subTask(\"Compare \" + title.toString());\n  boolean compareLazyProperties=false;\n  DBNDatabaseNode firstNode=nodes.get(0);\n  List<ObjectPropertyDescriptor> properties=ObjectPropertyDescriptor.extractAnnotations(null,firstNode.getObject().getClass(),getDataSourceFilter(firstNode),null);\n  for (  ObjectPropertyDescriptor prop : properties) {\n    if (prop.isLazy()) {\n      compareLazyProperties=true;\n      break;\n    }\n  }\n  boolean compareScripts=compareLazyProperties && settings.isCompareScripts();\n  compareLazyProperties=compareLazyProperties && settings.isCompareLazyProperties();\n  if (onlyStruct && !compareScripts) {\n    return;\n  }\n  for (  DBNDatabaseNode node : nodes) {\n    if (monitor.isCanceled()) {\n      throw new InterruptedException();\n    }\n    DBSObject databaseObject=node.getObject();\n    Map<DBPPropertyDescriptor,Object> nodeProperties=propertyValues.get(databaseObject);\n    if (nodeProperties == null) {\n      nodeProperties=new IdentityHashMap<>();\n      propertyValues.put(databaseObject,nodeProperties);\n    }\n    PropertyCollector propertySource=new PropertyCollector(databaseObject,compareLazyProperties || compareScripts);\n    for (    ObjectPropertyDescriptor prop : properties) {\n      boolean isScriptProperty=prop.getId().equals(DBConstants.PARAM_OBJECT_DEFINITION_TEXT) || prop.getId().equals(DBConstants.PARAM_EXTENDED_DEFINITION_TEXT);\n      if (prop.isLazy()) {\n        if (!compareLazyProperties) {\n          if (compareScripts) {\n            if (!isScriptProperty) {\n              continue;\n            }\n          }\n else {\n            continue;\n          }\n        }\n      }\n else {\n        if (prop.isHidden()) {\n          continue;\n        }\n      }\n      if (onlyStruct && !isScriptProperty) {\n        continue;\n      }\n      Object propertyValue=propertySource.getPropertyValue(monitor,databaseObject,prop,true);\nsynchronized (PROPS_LOCK) {\n        if (propertyValue instanceof DBPNamedObject) {\n          propertyValue=((DBPNamedObject)propertyValue).getName();\n        }\n        nodeProperties.put(prop,propertyValue);\n      }\n    }\n    monitor.worked(1);\n  }\n  for (  ObjectPropertyDescriptor prop : properties) {\n    reportPropertyCompare(prop);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 395,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 258,
        "startColumnNumber" : 32,
        "endLineNumber" : 258,
        "endColumnNumber" : 49
      },
      "nodeContext" : "!isScriptProperty",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "isScriptProperty",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 270,
      "startColumnNumber" : 35,
      "endLineNumber" : 270,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 270,
        "startColumnNumber" : 34,
        "endLineNumber" : 270,
        "endColumnNumber" : 51
      },
      "nodeContext" : "!isScriptProperty",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 270,
        "startColumnNumber" : 20,
        "endLineNumber" : 270,
        "endColumnNumber" : 51
      },
      "nodeContext" : "onlyStruct && !isScriptProperty",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 270,
        "startColumnNumber" : 16,
        "endLineNumber" : 272,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (onlyStruct && !isScriptProperty) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1328,
        "startLineNumber" : 252,
        "startColumnNumber" : 61,
        "endLineNumber" : 281,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean isScriptProperty=prop.getId().equals(DBConstants.PARAM_OBJECT_DEFINITION_TEXT) || prop.getId().equals(DBConstants.PARAM_EXTENDED_DEFINITION_TEXT);\n  if (prop.isLazy()) {\n    if (!compareLazyProperties) {\n      if (compareScripts) {\n        if (!isScriptProperty) {\n          continue;\n        }\n      }\n else {\n        continue;\n      }\n    }\n  }\n else {\n    if (prop.isHidden()) {\n      continue;\n    }\n  }\n  if (onlyStruct && !isScriptProperty) {\n    continue;\n  }\n  Object propertyValue=propertySource.getPropertyValue(monitor,databaseObject,prop,true);\nsynchronized (PROPS_LOCK) {\n    if (propertyValue instanceof DBPNamedObject) {\n      propertyValue=((DBPNamedObject)propertyValue).getName();\n    }\n    nodeProperties.put(prop,propertyValue);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1377,
        "startLineNumber" : 252,
        "startColumnNumber" : 12,
        "endLineNumber" : 281,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (ObjectPropertyDescriptor prop : properties) {\n  boolean isScriptProperty=prop.getId().equals(DBConstants.PARAM_OBJECT_DEFINITION_TEXT) || prop.getId().equals(DBConstants.PARAM_EXTENDED_DEFINITION_TEXT);\n  if (prop.isLazy()) {\n    if (!compareLazyProperties) {\n      if (compareScripts) {\n        if (!isScriptProperty) {\n          continue;\n        }\n      }\n else {\n        continue;\n      }\n    }\n  }\n else {\n    if (prop.isHidden()) {\n      continue;\n    }\n  }\n  if (onlyStruct && !isScriptProperty) {\n    continue;\n  }\n  Object propertyValue=propertySource.getPropertyValue(monitor,databaseObject,prop,true);\nsynchronized (PROPS_LOCK) {\n    if (propertyValue instanceof DBPNamedObject) {\n      propertyValue=((DBPNamedObject)propertyValue).getName();\n    }\n    nodeProperties.put(prop,propertyValue);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 98,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2002,
        "startLineNumber" : 241,
        "startColumnNumber" : 43,
        "endLineNumber" : 283,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (monitor.isCanceled()) {\n    throw new InterruptedException();\n  }\n  DBSObject databaseObject=node.getObject();\n  Map<DBPPropertyDescriptor,Object> nodeProperties=propertyValues.get(databaseObject);\n  if (nodeProperties == null) {\n    nodeProperties=new IdentityHashMap<>();\n    propertyValues.put(databaseObject,nodeProperties);\n  }\n  PropertyCollector propertySource=new PropertyCollector(databaseObject,compareLazyProperties || compareScripts);\n  for (  ObjectPropertyDescriptor prop : properties) {\n    boolean isScriptProperty=prop.getId().equals(DBConstants.PARAM_OBJECT_DEFINITION_TEXT) || prop.getId().equals(DBConstants.PARAM_EXTENDED_DEFINITION_TEXT);\n    if (prop.isLazy()) {\n      if (!compareLazyProperties) {\n        if (compareScripts) {\n          if (!isScriptProperty) {\n            continue;\n          }\n        }\n else {\n          continue;\n        }\n      }\n    }\n else {\n      if (prop.isHidden()) {\n        continue;\n      }\n    }\n    if (onlyStruct && !isScriptProperty) {\n      continue;\n    }\n    Object propertyValue=propertySource.getPropertyValue(monitor,databaseObject,prop,true);\nsynchronized (PROPS_LOCK) {\n      if (propertyValue instanceof DBPNamedObject) {\n        propertyValue=((DBPNamedObject)propertyValue).getName();\n      }\n      nodeProperties.put(prop,propertyValue);\n    }\n  }\n  monitor.worked(1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2037,
        "startLineNumber" : 241,
        "startColumnNumber" : 8,
        "endLineNumber" : 283,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (DBNDatabaseNode node : nodes) {\n  if (monitor.isCanceled()) {\n    throw new InterruptedException();\n  }\n  DBSObject databaseObject=node.getObject();\n  Map<DBPPropertyDescriptor,Object> nodeProperties=propertyValues.get(databaseObject);\n  if (nodeProperties == null) {\n    nodeProperties=new IdentityHashMap<>();\n    propertyValues.put(databaseObject,nodeProperties);\n  }\n  PropertyCollector propertySource=new PropertyCollector(databaseObject,compareLazyProperties || compareScripts);\n  for (  ObjectPropertyDescriptor prop : properties) {\n    boolean isScriptProperty=prop.getId().equals(DBConstants.PARAM_OBJECT_DEFINITION_TEXT) || prop.getId().equals(DBConstants.PARAM_EXTENDED_DEFINITION_TEXT);\n    if (prop.isLazy()) {\n      if (!compareLazyProperties) {\n        if (compareScripts) {\n          if (!isScriptProperty) {\n            continue;\n          }\n        }\n else {\n          continue;\n        }\n      }\n    }\n else {\n      if (prop.isHidden()) {\n        continue;\n      }\n    }\n    if (onlyStruct && !isScriptProperty) {\n      continue;\n    }\n    Object propertyValue=propertySource.getPropertyValue(monitor,databaseObject,prop,true);\nsynchronized (PROPS_LOCK) {\n      if (propertyValue instanceof DBPNamedObject) {\n        propertyValue=((DBPNamedObject)propertyValue).getName();\n      }\n      nodeProperties.put(prop,propertyValue);\n    }\n  }\n  monitor.worked(1);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 171,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4026,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 289,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean onlyStruct=settings.isCompareOnlyStructure();\n  this.initializedCount=0;\n  this.initializeError=null;\n  this.propertyValues.clear();\n  StringBuilder title=new StringBuilder();\n{\n    monitor.subTask(\"Initialize nodes\");\n    for (    DBNDatabaseNode node : nodes) {\n      if (title.length() > 0)       title.append(\", \");\n      title.append(node.getNodeFullName());\n      node.initializeNode(null,initializeFinisher);\n      monitor.worked(1);\n    }\n    while (initializedCount != nodes.size()) {\n      if (initializeError != null) {\n        throw new DBException(initializeError.getMessage());\n      }\n      Thread.sleep(50);\n      if (monitor.isCanceled()) {\n        throw new InterruptedException();\n      }\n    }\n  }\n  monitor.subTask(\"Compare \" + title.toString());\n  boolean compareLazyProperties=false;\n  DBNDatabaseNode firstNode=nodes.get(0);\n  List<ObjectPropertyDescriptor> properties=ObjectPropertyDescriptor.extractAnnotations(null,firstNode.getObject().getClass(),getDataSourceFilter(firstNode),null);\n  for (  ObjectPropertyDescriptor prop : properties) {\n    if (prop.isLazy()) {\n      compareLazyProperties=true;\n      break;\n    }\n  }\n  boolean compareScripts=compareLazyProperties && settings.isCompareScripts();\n  compareLazyProperties=compareLazyProperties && settings.isCompareLazyProperties();\n  if (onlyStruct && !compareScripts) {\n    return;\n  }\n  for (  DBNDatabaseNode node : nodes) {\n    if (monitor.isCanceled()) {\n      throw new InterruptedException();\n    }\n    DBSObject databaseObject=node.getObject();\n    Map<DBPPropertyDescriptor,Object> nodeProperties=propertyValues.get(databaseObject);\n    if (nodeProperties == null) {\n      nodeProperties=new IdentityHashMap<>();\n      propertyValues.put(databaseObject,nodeProperties);\n    }\n    PropertyCollector propertySource=new PropertyCollector(databaseObject,compareLazyProperties || compareScripts);\n    for (    ObjectPropertyDescriptor prop : properties) {\n      boolean isScriptProperty=prop.getId().equals(DBConstants.PARAM_OBJECT_DEFINITION_TEXT) || prop.getId().equals(DBConstants.PARAM_EXTENDED_DEFINITION_TEXT);\n      if (prop.isLazy()) {\n        if (!compareLazyProperties) {\n          if (compareScripts) {\n            if (!isScriptProperty) {\n              continue;\n            }\n          }\n else {\n            continue;\n          }\n        }\n      }\n else {\n        if (prop.isHidden()) {\n          continue;\n        }\n      }\n      if (onlyStruct && !isScriptProperty) {\n        continue;\n      }\n      Object propertyValue=propertySource.getPropertyValue(monitor,databaseObject,prop,true);\nsynchronized (PROPS_LOCK) {\n        if (propertyValue instanceof DBPNamedObject) {\n          propertyValue=((DBPNamedObject)propertyValue).getName();\n        }\n        nodeProperties.put(prop,propertyValue);\n      }\n    }\n    monitor.worked(1);\n  }\n  for (  ObjectPropertyDescriptor prop : properties) {\n    reportPropertyCompare(prop);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 376,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4159,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 289,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void compareProperties(DBRProgressMonitor monitor,List<DBNDatabaseNode> nodes) throws DBException, InterruptedException {\n  boolean onlyStruct=settings.isCompareOnlyStructure();\n  this.initializedCount=0;\n  this.initializeError=null;\n  this.propertyValues.clear();\n  StringBuilder title=new StringBuilder();\n{\n    monitor.subTask(\"Initialize nodes\");\n    for (    DBNDatabaseNode node : nodes) {\n      if (title.length() > 0)       title.append(\", \");\n      title.append(node.getNodeFullName());\n      node.initializeNode(null,initializeFinisher);\n      monitor.worked(1);\n    }\n    while (initializedCount != nodes.size()) {\n      if (initializeError != null) {\n        throw new DBException(initializeError.getMessage());\n      }\n      Thread.sleep(50);\n      if (monitor.isCanceled()) {\n        throw new InterruptedException();\n      }\n    }\n  }\n  monitor.subTask(\"Compare \" + title.toString());\n  boolean compareLazyProperties=false;\n  DBNDatabaseNode firstNode=nodes.get(0);\n  List<ObjectPropertyDescriptor> properties=ObjectPropertyDescriptor.extractAnnotations(null,firstNode.getObject().getClass(),getDataSourceFilter(firstNode),null);\n  for (  ObjectPropertyDescriptor prop : properties) {\n    if (prop.isLazy()) {\n      compareLazyProperties=true;\n      break;\n    }\n  }\n  boolean compareScripts=compareLazyProperties && settings.isCompareScripts();\n  compareLazyProperties=compareLazyProperties && settings.isCompareLazyProperties();\n  if (onlyStruct && !compareScripts) {\n    return;\n  }\n  for (  DBNDatabaseNode node : nodes) {\n    if (monitor.isCanceled()) {\n      throw new InterruptedException();\n    }\n    DBSObject databaseObject=node.getObject();\n    Map<DBPPropertyDescriptor,Object> nodeProperties=propertyValues.get(databaseObject);\n    if (nodeProperties == null) {\n      nodeProperties=new IdentityHashMap<>();\n      propertyValues.put(databaseObject,nodeProperties);\n    }\n    PropertyCollector propertySource=new PropertyCollector(databaseObject,compareLazyProperties || compareScripts);\n    for (    ObjectPropertyDescriptor prop : properties) {\n      boolean isScriptProperty=prop.getId().equals(DBConstants.PARAM_OBJECT_DEFINITION_TEXT) || prop.getId().equals(DBConstants.PARAM_EXTENDED_DEFINITION_TEXT);\n      if (prop.isLazy()) {\n        if (!compareLazyProperties) {\n          if (compareScripts) {\n            if (!isScriptProperty) {\n              continue;\n            }\n          }\n else {\n            continue;\n          }\n        }\n      }\n else {\n        if (prop.isHidden()) {\n          continue;\n        }\n      }\n      if (onlyStruct && !isScriptProperty) {\n        continue;\n      }\n      Object propertyValue=propertySource.getPropertyValue(monitor,databaseObject,prop,true);\nsynchronized (PROPS_LOCK) {\n        if (propertyValue instanceof DBPNamedObject) {\n          propertyValue=((DBPNamedObject)propertyValue).getName();\n        }\n        nodeProperties.put(prop,propertyValue);\n      }\n    }\n    monitor.worked(1);\n  }\n  for (  ObjectPropertyDescriptor prop : properties) {\n    reportPropertyCompare(prop);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 395,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 270,
        "startColumnNumber" : 20,
        "endLineNumber" : 270,
        "endColumnNumber" : 51
      },
      "nodeContext" : "onlyStruct && !isScriptProperty",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 258,
    "startColumnNumber" : 33,
    "endLineNumber" : 258,
    "endColumnNumber" : 49
  }, {
    "charLength" : 16,
    "startLineNumber" : 270,
    "startColumnNumber" : 35,
    "endLineNumber" : 270,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}