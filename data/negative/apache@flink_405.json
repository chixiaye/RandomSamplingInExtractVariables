{
  "id" : 405,
  "expression" : "tempDirs[k]",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/test/java/org/apache/flink/runtime/io/disk/iomanager/IOManagerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tempDirs[k]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 72,
      "startColumnNumber" : 64,
      "endLineNumber" : 72,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 72,
        "startColumnNumber" : 24,
        "endLineNumber" : 72,
        "endColumnNumber" : 76
      },
      "nodeContext" : "path.getParentFile().getParent().equals(tempDirs[k])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 72,
        "startColumnNumber" : 20,
        "endLineNumber" : 74,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (path.getParentFile().getParent().equals(tempDirs[k])) {\n  counters[k]++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 71,
        "startColumnNumber" : 58,
        "endLineNumber" : 75,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (path.getParentFile().getParent().equals(tempDirs[k])) {\n    counters[k]++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 71,
        "startColumnNumber" : 16,
        "endLineNumber" : 75,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int k=0; k < tempDirs.length; k++) {\n  if (path.getParentFile().getParent().equals(tempDirs[k])) {\n    counters[k]++;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 716,
        "startLineNumber" : 59,
        "startColumnNumber" : 58,
        "endLineNumber" : 76,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FileIOChannel.ID id=enumerator.next();\n  File path=id.getPathFile();\n  assertTrue(\"Channel IDs must name an absolute path.\",path.isAbsolute());\n  assertFalse(\"Channel IDs must name a file, not a directory.\",path.isDirectory());\n  assertTrue(\"Path is not in the temp directory.\",tempPath.equals(path.getParentFile().getParentFile().getParentFile()));\n  for (int k=0; k < tempDirs.length; k++) {\n    if (path.getParentFile().getParent().equals(tempDirs[k])) {\n      counters[k]++;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 78,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 762,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < 3 * tempDirs.length; i++) {\n  FileIOChannel.ID id=enumerator.next();\n  File path=id.getPathFile();\n  assertTrue(\"Channel IDs must name an absolute path.\",path.isAbsolute());\n  assertFalse(\"Channel IDs must name a file, not a directory.\",path.isDirectory());\n  assertTrue(\"Path is not in the temp directory.\",tempPath.equals(path.getParentFile().getParentFile().getParentFile()));\n  for (int k=0; k < tempDirs.length; k++) {\n    if (path.getParentFile().getParent().equals(tempDirs[k])) {\n      counters[k]++;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 93,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 987,
        "startLineNumber" : 56,
        "startColumnNumber" : 60,
        "endLineNumber" : 81,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  FileIOChannel.Enumerator enumerator=ioMan.createChannelEnumerator();\n  for (int i=0; i < 3 * tempDirs.length; i++) {\n    FileIOChannel.ID id=enumerator.next();\n    File path=id.getPathFile();\n    assertTrue(\"Channel IDs must name an absolute path.\",path.isAbsolute());\n    assertFalse(\"Channel IDs must name a file, not a directory.\",path.isDirectory());\n    assertTrue(\"Path is not in the temp directory.\",tempPath.equals(path.getParentFile().getParentFile().getParentFile()));\n    for (int k=0; k < tempDirs.length; k++) {\n      if (path.getParentFile().getParent().equals(tempDirs[k])) {\n        counters[k]++;\n      }\n    }\n  }\n  for (int k=0; k < tempDirs.length; k++) {\n    assertEquals(3,counters[k]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1039,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (IOManager ioMan=new TestIOManager(tempDirs)){\n  FileIOChannel.Enumerator enumerator=ioMan.createChannelEnumerator();\n  for (int i=0; i < 3 * tempDirs.length; i++) {\n    FileIOChannel.ID id=enumerator.next();\n    File path=id.getPathFile();\n    assertTrue(\"Channel IDs must name an absolute path.\",path.isAbsolute());\n    assertFalse(\"Channel IDs must name a file, not a directory.\",path.isDirectory());\n    assertTrue(\"Path is not in the temp directory.\",tempPath.equals(path.getParentFile().getParentFile().getParentFile()));\n    for (int k=0; k < tempDirs.length; k++) {\n      if (path.getParentFile().getParent().equals(tempDirs[k])) {\n        counters[k]++;\n      }\n    }\n  }\n  for (int k=0; k < tempDirs.length; k++) {\n    assertEquals(3,counters[k]);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 135,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1554,
        "startLineNumber" : 43,
        "startColumnNumber" : 53,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File tempPath=temporaryFolder.newFolder();\n  String[] tempDirs=new String[]{new File(tempPath,\"a\").getAbsolutePath(),new File(tempPath,\"b\").getAbsolutePath(),new File(tempPath,\"c\").getAbsolutePath(),new File(tempPath,\"d\").getAbsolutePath(),new File(tempPath,\"e\").getAbsolutePath()};\n  int[] counters=new int[tempDirs.length];\n  try (IOManager ioMan=new TestIOManager(tempDirs)){\n    FileIOChannel.Enumerator enumerator=ioMan.createChannelEnumerator();\n    for (int i=0; i < 3 * tempDirs.length; i++) {\n      FileIOChannel.ID id=enumerator.next();\n      File path=id.getPathFile();\n      assertTrue(\"Channel IDs must name an absolute path.\",path.isAbsolute());\n      assertFalse(\"Channel IDs must name a file, not a directory.\",path.isDirectory());\n      assertTrue(\"Path is not in the temp directory.\",tempPath.equals(path.getParentFile().getParentFile().getParentFile()));\n      for (int k=0; k < tempDirs.length; k++) {\n        if (path.getParentFile().getParent().equals(tempDirs[k])) {\n          counters[k]++;\n        }\n      }\n    }\n    for (int k=0; k < tempDirs.length; k++) {\n      assertEquals(3,counters[k]);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1613,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void channelEnumerator() throws Exception {\n  File tempPath=temporaryFolder.newFolder();\n  String[] tempDirs=new String[]{new File(tempPath,\"a\").getAbsolutePath(),new File(tempPath,\"b\").getAbsolutePath(),new File(tempPath,\"c\").getAbsolutePath(),new File(tempPath,\"d\").getAbsolutePath(),new File(tempPath,\"e\").getAbsolutePath()};\n  int[] counters=new int[tempDirs.length];\n  try (IOManager ioMan=new TestIOManager(tempDirs)){\n    FileIOChannel.Enumerator enumerator=ioMan.createChannelEnumerator();\n    for (int i=0; i < 3 * tempDirs.length; i++) {\n      FileIOChannel.ID id=enumerator.next();\n      File path=id.getPathFile();\n      assertTrue(\"Channel IDs must name an absolute path.\",path.isAbsolute());\n      assertFalse(\"Channel IDs must name a file, not a directory.\",path.isDirectory());\n      assertTrue(\"Path is not in the temp directory.\",tempPath.equals(path.getParentFile().getParentFile().getParentFile()));\n      for (int k=0; k < tempDirs.length; k++) {\n        if (path.getParentFile().getParent().equals(tempDirs[k])) {\n          counters[k]++;\n        }\n      }\n    }\n    for (int k=0; k < tempDirs.length; k++) {\n      assertEquals(3,counters[k]);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 213,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 72,
        "startColumnNumber" : 24,
        "endLineNumber" : 72,
        "endColumnNumber" : 76
      },
      "nodeContext" : "path.getParentFile().getParent().equals(tempDirs[k])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 72,
    "startColumnNumber" : 64,
    "endLineNumber" : 72,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}