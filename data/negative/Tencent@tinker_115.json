{
  "id" : 115,
  "expression" : "prevCh == '['",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/PatternUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "prevCh == '['",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 37,
      "startColumnNumber" : 16,
      "endLineNumber" : 37,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 37,
        "startColumnNumber" : 16,
        "endLineNumber" : 37,
        "endColumnNumber" : 42
      },
      "nodeContext" : "prevCh == '[' && ch == ']'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 41,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (prevCh == '[' && ch == ']') {\n  sb.append(\"\\\\[\");\n}\n else {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 34,
        "startColumnNumber" : 58,
        "endLineNumber" : 42,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  char ch=dotPattern.charAt(i);\n  char prevCh=dotPattern.charAt(i - 1);\n  if (prevCh == '[' && ch == ']') {\n    sb.append(\"\\\\[\");\n  }\n else {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 295,
        "startLineNumber" : 34,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (i=dotPattern.length() - 1; i >= 1; i-=2) {\n  char ch=dotPattern.charAt(i);\n  char prevCh=dotPattern.charAt(i - 1);\n  if (prevCh == '[' && ch == ']') {\n    sb.append(\"\\\\[\");\n  }\n else {\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2075,
        "startLineNumber" : 24,
        "startColumnNumber" : 81,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (dotPattern.startsWith(\"L\") && dotPattern.endsWith(\";\") || dotPattern.startsWith(\"[\")) {\n    return dotPattern.replace('.','/').replace(\"[\",\"\\\\[\");\n  }\n  String descriptor=dotPattern.replace('.','/');\n  StringBuilder sb=new StringBuilder();\n  int i;\n  for (i=dotPattern.length() - 1; i >= 1; i-=2) {\n    char ch=dotPattern.charAt(i);\n    char prevCh=dotPattern.charAt(i - 1);\n    if (prevCh == '[' && ch == ']') {\n      sb.append(\"\\\\[\");\n    }\n else {\n      break;\n    }\n  }\n  descriptor=descriptor.substring(0,i + 1);\n  if (\"void\".equals(descriptor)) {\n    descriptor=\"V\";\n    sb.append(descriptor);\n  }\n else   if (\"boolean\".equals(descriptor)) {\n    descriptor=\"Z\";\n    sb.append(descriptor);\n  }\n else   if (\"byte\".equals(descriptor)) {\n    descriptor=\"B\";\n    sb.append(descriptor);\n  }\n else   if (\"short\".equals(descriptor)) {\n    descriptor=\"S\";\n    sb.append(descriptor);\n  }\n else   if (\"char\".equals(descriptor)) {\n    descriptor=\"C\";\n    sb.append(descriptor);\n  }\n else   if (\"int\".equals(descriptor)) {\n    descriptor=\"I\";\n    sb.append(descriptor);\n  }\n else   if (\"long\".equals(descriptor)) {\n    descriptor=\"J\";\n    sb.append(descriptor);\n  }\n else   if (\"float\".equals(descriptor)) {\n    descriptor=\"F\";\n    sb.append(descriptor);\n  }\n else   if (\"double\".equals(descriptor)) {\n    descriptor=\"D\";\n    sb.append(descriptor);\n  }\n else {\n    sb.append('L').append(descriptor);\n    if (!descriptor.endsWith(\";\")) {\n      sb.append(';');\n    }\n  }\n  String regEx=sb.toString();\n  regEx=regEx.replace(\"*\",\".*\");\n  regEx=regEx.replace(\"?\",\".?\");\n  regEx=regEx.replace(\"$\",\"\\\\$\");\n  regEx='^' + regEx + '$';\n  return regEx;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 305,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2152,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static String dotClassNamePatternToDescriptorRegEx(String dotPattern){\n  if (dotPattern.startsWith(\"L\") && dotPattern.endsWith(\";\") || dotPattern.startsWith(\"[\")) {\n    return dotPattern.replace('.','/').replace(\"[\",\"\\\\[\");\n  }\n  String descriptor=dotPattern.replace('.','/');\n  StringBuilder sb=new StringBuilder();\n  int i;\n  for (i=dotPattern.length() - 1; i >= 1; i-=2) {\n    char ch=dotPattern.charAt(i);\n    char prevCh=dotPattern.charAt(i - 1);\n    if (prevCh == '[' && ch == ']') {\n      sb.append(\"\\\\[\");\n    }\n else {\n      break;\n    }\n  }\n  descriptor=descriptor.substring(0,i + 1);\n  if (\"void\".equals(descriptor)) {\n    descriptor=\"V\";\n    sb.append(descriptor);\n  }\n else   if (\"boolean\".equals(descriptor)) {\n    descriptor=\"Z\";\n    sb.append(descriptor);\n  }\n else   if (\"byte\".equals(descriptor)) {\n    descriptor=\"B\";\n    sb.append(descriptor);\n  }\n else   if (\"short\".equals(descriptor)) {\n    descriptor=\"S\";\n    sb.append(descriptor);\n  }\n else   if (\"char\".equals(descriptor)) {\n    descriptor=\"C\";\n    sb.append(descriptor);\n  }\n else   if (\"int\".equals(descriptor)) {\n    descriptor=\"I\";\n    sb.append(descriptor);\n  }\n else   if (\"long\".equals(descriptor)) {\n    descriptor=\"J\";\n    sb.append(descriptor);\n  }\n else   if (\"float\".equals(descriptor)) {\n    descriptor=\"F\";\n    sb.append(descriptor);\n  }\n else   if (\"double\".equals(descriptor)) {\n    descriptor=\"D\";\n    sb.append(descriptor);\n  }\n else {\n    sb.append('L').append(descriptor);\n    if (!descriptor.endsWith(\";\")) {\n      sb.append(';');\n    }\n  }\n  String regEx=sb.toString();\n  regEx=regEx.replace(\"*\",\".*\");\n  regEx=regEx.replace(\"?\",\".?\");\n  regEx=regEx.replace(\"$\",\"\\\\$\");\n  regEx='^' + regEx + '$';\n  return regEx;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 37,
        "startColumnNumber" : 16,
        "endLineNumber" : 37,
        "endColumnNumber" : 42
      },
      "nodeContext" : "prevCh == '[' && ch == ']'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 37,
    "startColumnNumber" : 16,
    "endLineNumber" : 37,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}