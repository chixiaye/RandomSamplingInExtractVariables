{
  "id" : 254,
  "expression" : "\"crashes/crash-report-\" + new SimpleDateFormat(\"MM_dd_yyyy_HH_mm_ss\").format(new Date()) + \".txt\"",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/net/CrashSender.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"crashes/crash-report-\" + new SimpleDateFormat(\"MM_dd_yyyy_HH_mm_ss\").format(new Date()) + \".txt\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 97,
      "startLineNumber" : 90,
      "startColumnNumber" : 81,
      "endLineNumber" : 90,
      "endColumnNumber" : 178
    },
    "astNodeNumber" : 12,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 90,
        "startColumnNumber" : 28,
        "endLineNumber" : 90,
        "endColumnNumber" : 179
      },
      "nodeContext" : "new File(OS.getAppDataDirectoryString(Vars.appName),\"crashes/crash-report-\" + new SimpleDateFormat(\"MM_dd_yyyy_HH_mm_ss\").format(new Date()) + \".txt\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 90,
        "startColumnNumber" : 21,
        "endLineNumber" : 90,
        "endColumnNumber" : 179
      },
      "nodeContext" : "file=new File(OS.getAppDataDirectoryString(Vars.appName),\"crashes/crash-report-\" + new SimpleDateFormat(\"MM_dd_yyyy_HH_mm_ss\").format(new Date()) + \".txt\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 90,
        "startColumnNumber" : 16,
        "endLineNumber" : 90,
        "endColumnNumber" : 180
      },
      "nodeContext" : "File file=new File(OS.getAppDataDirectoryString(Vars.appName),\"crashes/crash-report-\" + new SimpleDateFormat(\"MM_dd_yyyy_HH_mm_ss\").format(new Date()) + \".txt\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 414,
        "startLineNumber" : 89,
        "startColumnNumber" : 15,
        "endLineNumber" : 94,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  File file=new File(OS.getAppDataDirectoryString(Vars.appName),\"crashes/crash-report-\" + new SimpleDateFormat(\"MM_dd_yyyy_HH_mm_ss\").format(new Date()) + \".txt\");\n  new Fi(OS.getAppDataDirectoryString(Vars.appName)).child(\"crashes\").mkdirs();\n  new Fi(file).writeString(createReport(parseException(exception)));\n  writeListener.get(file);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 516,
        "startLineNumber" : 89,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  File file=new File(OS.getAppDataDirectoryString(Vars.appName),\"crashes/crash-report-\" + new SimpleDateFormat(\"MM_dd_yyyy_HH_mm_ss\").format(new Date()) + \".txt\");\n  new Fi(OS.getAppDataDirectoryString(Vars.appName)).child(\"crashes\").mkdirs();\n  new Fi(file).writeString(createReport(parseException(exception)));\n  writeListener.get(file);\n}\n catch (Throwable e) {\n  Log.err(\"Failed to save local crash report.\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 72,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5299,
        "startLineNumber" : 49,
        "startColumnNumber" : 11,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    Log.err(exception);\n  }\n catch (  Throwable no) {\n    exception.printStackTrace();\n  }\n  try {\n    settings.manualSave();\n  }\n catch (  Throwable ignored) {\n  }\n  if (Version.build == -1 || (System.getProperty(\"user.name\").equals(\"anuke\") && \"release\".equals(Version.modifier))) {\n    ret();\n  }\n  if (Version.number == 0) {\n    try {\n      ObjectMap<String,String> map=new ObjectMap<>();\n      PropertiesUtils.load(map,new InputStreamReader(CrashSender.class.getResourceAsStream(\"/version.properties\")));\n      Version.type=map.get(\"type\");\n      Version.number=Integer.parseInt(map.get(\"number\"));\n      Version.modifier=map.get(\"modifier\");\n      if (map.get(\"build\").contains(\".\")) {\n        String[] split=map.get(\"build\").split(\"\\\\.\");\n        Version.build=Integer.parseInt(split[0]);\n        Version.revision=Integer.parseInt(split[1]);\n      }\n else {\n        Version.build=Strings.canParseInt(map.get(\"build\")) ? Integer.parseInt(map.get(\"build\")) : -1;\n      }\n    }\n catch (    Throwable e) {\n      e.printStackTrace();\n      Log.err(\"Failed to parse version.\");\n    }\n  }\n  try {\n    File file=new File(OS.getAppDataDirectoryString(Vars.appName),\"crashes/crash-report-\" + new SimpleDateFormat(\"MM_dd_yyyy_HH_mm_ss\").format(new Date()) + \".txt\");\n    new Fi(OS.getAppDataDirectoryString(Vars.appName)).child(\"crashes\").mkdirs();\n    new Fi(file).writeString(createReport(parseException(exception)));\n    writeListener.get(file);\n  }\n catch (  Throwable e) {\n    Log.err(\"Failed to save local crash report.\",e);\n  }\n  try {\n    if (!Core.settings.getBool(\"crashreport\",true)) {\n      ret();\n    }\n  }\n catch (  Throwable ignored) {\n  }\n  try {\n    if (Vars.mods != null && !Vars.mods.list().isEmpty()) {\n      ret();\n    }\n  }\n catch (  Throwable ignored) {\n  }\n  if (Version.number == 0) {\n    ret();\n  }\n  boolean netActive=false, netServer=false;\n  try {\n    netActive=net.active();\n    netServer=net.server();\n    net.dispose();\n  }\n catch (  Throwable ignored) {\n  }\n  JsonValue value=new JsonValue(ValueType.object);\n  boolean fn=netActive, fs=netServer;\n  ex(() -> value.addChild(\"versionType\",new JsonValue(Version.type)));\n  ex(() -> value.addChild(\"versionNumber\",new JsonValue(Version.number)));\n  ex(() -> value.addChild(\"versionModifier\",new JsonValue(Version.modifier)));\n  ex(() -> value.addChild(\"build\",new JsonValue(Version.build)));\n  ex(() -> value.addChild(\"revision\",new JsonValue(Version.revision)));\n  ex(() -> value.addChild(\"net\",new JsonValue(fn)));\n  ex(() -> value.addChild(\"server\",new JsonValue(fs)));\n  ex(() -> value.addChild(\"players\",new JsonValue(Groups.player.size())));\n  ex(() -> value.addChild(\"state\",new JsonValue(Vars.state.getState().name())));\n  ex(() -> value.addChild(\"os\",new JsonValue(System.getProperty(\"os.name\") + \"x\" + (OS.is64Bit ? \"64\" : \"32\"))));\n  ex(() -> value.addChild(\"trace\",new JsonValue(parseException(exception))));\n  ex(() -> value.addChild(\"javaVersion\",new JsonValue(System.getProperty(\"java.version\"))));\n  ex(() -> value.addChild(\"javaArch\",new JsonValue(System.getProperty(\"sun.arch.data.model\"))));\n  boolean[] sent={false};\n  Log.info(\"Sending crash report.\");\n  httpPost(Vars.crashReportURL,value.toJson(OutputType.json),r -> {\n    Log.info(\"Crash sent successfully.\");\n    sent[0]=true;\n    System.exit(1);\n  }\n,t -> {\n    t.printStackTrace();\n    sent[0]=true;\n    System.exit(-1);\n  }\n);\n  try {\n    while (!sent[0]) {\n      Thread.sleep(30);\n    }\n  }\n catch (  InterruptedException ignored) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 668,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5372,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  try {\n    Log.err(exception);\n  }\n catch (  Throwable no) {\n    exception.printStackTrace();\n  }\n  try {\n    settings.manualSave();\n  }\n catch (  Throwable ignored) {\n  }\n  if (Version.build == -1 || (System.getProperty(\"user.name\").equals(\"anuke\") && \"release\".equals(Version.modifier))) {\n    ret();\n  }\n  if (Version.number == 0) {\n    try {\n      ObjectMap<String,String> map=new ObjectMap<>();\n      PropertiesUtils.load(map,new InputStreamReader(CrashSender.class.getResourceAsStream(\"/version.properties\")));\n      Version.type=map.get(\"type\");\n      Version.number=Integer.parseInt(map.get(\"number\"));\n      Version.modifier=map.get(\"modifier\");\n      if (map.get(\"build\").contains(\".\")) {\n        String[] split=map.get(\"build\").split(\"\\\\.\");\n        Version.build=Integer.parseInt(split[0]);\n        Version.revision=Integer.parseInt(split[1]);\n      }\n else {\n        Version.build=Strings.canParseInt(map.get(\"build\")) ? Integer.parseInt(map.get(\"build\")) : -1;\n      }\n    }\n catch (    Throwable e) {\n      e.printStackTrace();\n      Log.err(\"Failed to parse version.\");\n    }\n  }\n  try {\n    File file=new File(OS.getAppDataDirectoryString(Vars.appName),\"crashes/crash-report-\" + new SimpleDateFormat(\"MM_dd_yyyy_HH_mm_ss\").format(new Date()) + \".txt\");\n    new Fi(OS.getAppDataDirectoryString(Vars.appName)).child(\"crashes\").mkdirs();\n    new Fi(file).writeString(createReport(parseException(exception)));\n    writeListener.get(file);\n  }\n catch (  Throwable e) {\n    Log.err(\"Failed to save local crash report.\",e);\n  }\n  try {\n    if (!Core.settings.getBool(\"crashreport\",true)) {\n      ret();\n    }\n  }\n catch (  Throwable ignored) {\n  }\n  try {\n    if (Vars.mods != null && !Vars.mods.list().isEmpty()) {\n      ret();\n    }\n  }\n catch (  Throwable ignored) {\n  }\n  if (Version.number == 0) {\n    ret();\n  }\n  boolean netActive=false, netServer=false;\n  try {\n    netActive=net.active();\n    netServer=net.server();\n    net.dispose();\n  }\n catch (  Throwable ignored) {\n  }\n  JsonValue value=new JsonValue(ValueType.object);\n  boolean fn=netActive, fs=netServer;\n  ex(() -> value.addChild(\"versionType\",new JsonValue(Version.type)));\n  ex(() -> value.addChild(\"versionNumber\",new JsonValue(Version.number)));\n  ex(() -> value.addChild(\"versionModifier\",new JsonValue(Version.modifier)));\n  ex(() -> value.addChild(\"build\",new JsonValue(Version.build)));\n  ex(() -> value.addChild(\"revision\",new JsonValue(Version.revision)));\n  ex(() -> value.addChild(\"net\",new JsonValue(fn)));\n  ex(() -> value.addChild(\"server\",new JsonValue(fs)));\n  ex(() -> value.addChild(\"players\",new JsonValue(Groups.player.size())));\n  ex(() -> value.addChild(\"state\",new JsonValue(Vars.state.getState().name())));\n  ex(() -> value.addChild(\"os\",new JsonValue(System.getProperty(\"os.name\") + \"x\" + (OS.is64Bit ? \"64\" : \"32\"))));\n  ex(() -> value.addChild(\"trace\",new JsonValue(parseException(exception))));\n  ex(() -> value.addChild(\"javaVersion\",new JsonValue(System.getProperty(\"java.version\"))));\n  ex(() -> value.addChild(\"javaArch\",new JsonValue(System.getProperty(\"sun.arch.data.model\"))));\n  boolean[] sent={false};\n  Log.info(\"Sending crash report.\");\n  httpPost(Vars.crashReportURL,value.toJson(OutputType.json),r -> {\n    Log.info(\"Crash sent successfully.\");\n    sent[0]=true;\n    System.exit(1);\n  }\n,t -> {\n    t.printStackTrace();\n    sent[0]=true;\n    System.exit(-1);\n  }\n);\n  try {\n    while (!sent[0]) {\n      Thread.sleep(30);\n    }\n  }\n catch (  InterruptedException ignored) {\n  }\n}\n catch (Throwable death) {\n  death.printStackTrace();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 679,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 48,
        "startColumnNumber" : 74,
        "endLineNumber" : 174,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    try {\n      Log.err(exception);\n    }\n catch (    Throwable no) {\n      exception.printStackTrace();\n    }\n    try {\n      settings.manualSave();\n    }\n catch (    Throwable ignored) {\n    }\n    if (Version.build == -1 || (System.getProperty(\"user.name\").equals(\"anuke\") && \"release\".equals(Version.modifier))) {\n      ret();\n    }\n    if (Version.number == 0) {\n      try {\n        ObjectMap<String,String> map=new ObjectMap<>();\n        PropertiesUtils.load(map,new InputStreamReader(CrashSender.class.getResourceAsStream(\"/version.properties\")));\n        Version.type=map.get(\"type\");\n        Version.number=Integer.parseInt(map.get(\"number\"));\n        Version.modifier=map.get(\"modifier\");\n        if (map.get(\"build\").contains(\".\")) {\n          String[] split=map.get(\"build\").split(\"\\\\.\");\n          Version.build=Integer.parseInt(split[0]);\n          Version.revision=Integer.parseInt(split[1]);\n        }\n else {\n          Version.build=Strings.canParseInt(map.get(\"build\")) ? Integer.parseInt(map.get(\"build\")) : -1;\n        }\n      }\n catch (      Throwable e) {\n        e.printStackTrace();\n        Log.err(\"Failed to parse version.\");\n      }\n    }\n    try {\n      File file=new File(OS.getAppDataDirectoryString(Vars.appName),\"crashes/crash-report-\" + new SimpleDateFormat(\"MM_dd_yyyy_HH_mm_ss\").format(new Date()) + \".txt\");\n      new Fi(OS.getAppDataDirectoryString(Vars.appName)).child(\"crashes\").mkdirs();\n      new Fi(file).writeString(createReport(parseException(exception)));\n      writeListener.get(file);\n    }\n catch (    Throwable e) {\n      Log.err(\"Failed to save local crash report.\",e);\n    }\n    try {\n      if (!Core.settings.getBool(\"crashreport\",true)) {\n        ret();\n      }\n    }\n catch (    Throwable ignored) {\n    }\n    try {\n      if (Vars.mods != null && !Vars.mods.list().isEmpty()) {\n        ret();\n      }\n    }\n catch (    Throwable ignored) {\n    }\n    if (Version.number == 0) {\n      ret();\n    }\n    boolean netActive=false, netServer=false;\n    try {\n      netActive=net.active();\n      netServer=net.server();\n      net.dispose();\n    }\n catch (    Throwable ignored) {\n    }\n    JsonValue value=new JsonValue(ValueType.object);\n    boolean fn=netActive, fs=netServer;\n    ex(() -> value.addChild(\"versionType\",new JsonValue(Version.type)));\n    ex(() -> value.addChild(\"versionNumber\",new JsonValue(Version.number)));\n    ex(() -> value.addChild(\"versionModifier\",new JsonValue(Version.modifier)));\n    ex(() -> value.addChild(\"build\",new JsonValue(Version.build)));\n    ex(() -> value.addChild(\"revision\",new JsonValue(Version.revision)));\n    ex(() -> value.addChild(\"net\",new JsonValue(fn)));\n    ex(() -> value.addChild(\"server\",new JsonValue(fs)));\n    ex(() -> value.addChild(\"players\",new JsonValue(Groups.player.size())));\n    ex(() -> value.addChild(\"state\",new JsonValue(Vars.state.getState().name())));\n    ex(() -> value.addChild(\"os\",new JsonValue(System.getProperty(\"os.name\") + \"x\" + (OS.is64Bit ? \"64\" : \"32\"))));\n    ex(() -> value.addChild(\"trace\",new JsonValue(parseException(exception))));\n    ex(() -> value.addChild(\"javaVersion\",new JsonValue(System.getProperty(\"java.version\"))));\n    ex(() -> value.addChild(\"javaArch\",new JsonValue(System.getProperty(\"sun.arch.data.model\"))));\n    boolean[] sent={false};\n    Log.info(\"Sending crash report.\");\n    httpPost(Vars.crashReportURL,value.toJson(OutputType.json),r -> {\n      Log.info(\"Crash sent successfully.\");\n      sent[0]=true;\n      System.exit(1);\n    }\n,t -> {\n      t.printStackTrace();\n      sent[0]=true;\n      System.exit(-1);\n    }\n);\n    try {\n      while (!sent[0]) {\n        Thread.sleep(30);\n      }\n    }\n catch (    InterruptedException ignored) {\n    }\n  }\n catch (  Throwable death) {\n    death.printStackTrace();\n  }\n  ret();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 683,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5474,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void send(Throwable exception,Cons<File> writeListener){\n  try {\n    try {\n      Log.err(exception);\n    }\n catch (    Throwable no) {\n      exception.printStackTrace();\n    }\n    try {\n      settings.manualSave();\n    }\n catch (    Throwable ignored) {\n    }\n    if (Version.build == -1 || (System.getProperty(\"user.name\").equals(\"anuke\") && \"release\".equals(Version.modifier))) {\n      ret();\n    }\n    if (Version.number == 0) {\n      try {\n        ObjectMap<String,String> map=new ObjectMap<>();\n        PropertiesUtils.load(map,new InputStreamReader(CrashSender.class.getResourceAsStream(\"/version.properties\")));\n        Version.type=map.get(\"type\");\n        Version.number=Integer.parseInt(map.get(\"number\"));\n        Version.modifier=map.get(\"modifier\");\n        if (map.get(\"build\").contains(\".\")) {\n          String[] split=map.get(\"build\").split(\"\\\\.\");\n          Version.build=Integer.parseInt(split[0]);\n          Version.revision=Integer.parseInt(split[1]);\n        }\n else {\n          Version.build=Strings.canParseInt(map.get(\"build\")) ? Integer.parseInt(map.get(\"build\")) : -1;\n        }\n      }\n catch (      Throwable e) {\n        e.printStackTrace();\n        Log.err(\"Failed to parse version.\");\n      }\n    }\n    try {\n      File file=new File(OS.getAppDataDirectoryString(Vars.appName),\"crashes/crash-report-\" + new SimpleDateFormat(\"MM_dd_yyyy_HH_mm_ss\").format(new Date()) + \".txt\");\n      new Fi(OS.getAppDataDirectoryString(Vars.appName)).child(\"crashes\").mkdirs();\n      new Fi(file).writeString(createReport(parseException(exception)));\n      writeListener.get(file);\n    }\n catch (    Throwable e) {\n      Log.err(\"Failed to save local crash report.\",e);\n    }\n    try {\n      if (!Core.settings.getBool(\"crashreport\",true)) {\n        ret();\n      }\n    }\n catch (    Throwable ignored) {\n    }\n    try {\n      if (Vars.mods != null && !Vars.mods.list().isEmpty()) {\n        ret();\n      }\n    }\n catch (    Throwable ignored) {\n    }\n    if (Version.number == 0) {\n      ret();\n    }\n    boolean netActive=false, netServer=false;\n    try {\n      netActive=net.active();\n      netServer=net.server();\n      net.dispose();\n    }\n catch (    Throwable ignored) {\n    }\n    JsonValue value=new JsonValue(ValueType.object);\n    boolean fn=netActive, fs=netServer;\n    ex(() -> value.addChild(\"versionType\",new JsonValue(Version.type)));\n    ex(() -> value.addChild(\"versionNumber\",new JsonValue(Version.number)));\n    ex(() -> value.addChild(\"versionModifier\",new JsonValue(Version.modifier)));\n    ex(() -> value.addChild(\"build\",new JsonValue(Version.build)));\n    ex(() -> value.addChild(\"revision\",new JsonValue(Version.revision)));\n    ex(() -> value.addChild(\"net\",new JsonValue(fn)));\n    ex(() -> value.addChild(\"server\",new JsonValue(fs)));\n    ex(() -> value.addChild(\"players\",new JsonValue(Groups.player.size())));\n    ex(() -> value.addChild(\"state\",new JsonValue(Vars.state.getState().name())));\n    ex(() -> value.addChild(\"os\",new JsonValue(System.getProperty(\"os.name\") + \"x\" + (OS.is64Bit ? \"64\" : \"32\"))));\n    ex(() -> value.addChild(\"trace\",new JsonValue(parseException(exception))));\n    ex(() -> value.addChild(\"javaVersion\",new JsonValue(System.getProperty(\"java.version\"))));\n    ex(() -> value.addChild(\"javaArch\",new JsonValue(System.getProperty(\"sun.arch.data.model\"))));\n    boolean[] sent={false};\n    Log.info(\"Sending crash report.\");\n    httpPost(Vars.crashReportURL,value.toJson(OutputType.json),r -> {\n      Log.info(\"Crash sent successfully.\");\n      sent[0]=true;\n      System.exit(1);\n    }\n,t -> {\n      t.printStackTrace();\n      sent[0]=true;\n      System.exit(-1);\n    }\n);\n    try {\n      while (!sent[0]) {\n        Thread.sleep(30);\n      }\n    }\n catch (    InterruptedException ignored) {\n    }\n  }\n catch (  Throwable death) {\n    death.printStackTrace();\n  }\n  ret();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 699,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 90,
        "startColumnNumber" : 16,
        "endLineNumber" : 90,
        "endColumnNumber" : 180
      },
      "nodeContext" : "File file=new File(OS.getAppDataDirectoryString(Vars.appName),\"crashes/crash-report-\" + new SimpleDateFormat(\"MM_dd_yyyy_HH_mm_ss\").format(new Date()) + \".txt\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    },
    "tokenLength" : 13,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 97,
    "startLineNumber" : 90,
    "startColumnNumber" : 81,
    "endLineNumber" : 90,
    "endColumnNumber" : 178
  } ],
  "layoutRelationDataList" : [ ]
}