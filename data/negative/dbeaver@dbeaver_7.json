{
  "id" : 7,
  "expression" : "String.valueOf(i++) + \". \" + version+ \" == \"+ c.getCanonical()",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/maven/versioning/ComparableVersion.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "String.valueOf(i++) + \". \" + version+ \" == \"+ c.getCanonical()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 64,
      "startLineNumber" : 421,
      "startColumnNumber" : 31,
      "endLineNumber" : 421,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 12,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 421,
        "startColumnNumber" : 12,
        "endLineNumber" : 421,
        "endColumnNumber" : 96
      },
      "nodeContext" : "System.out.println(String.valueOf(i++) + \". \" + version+ \" == \"+ c.getCanonical())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 421,
        "startColumnNumber" : 12,
        "endLineNumber" : 421,
        "endColumnNumber" : 97
      },
      "nodeContext" : "System.out.println(String.valueOf(i++) + \". \" + version+ \" == \"+ c.getCanonical());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 412,
        "startColumnNumber" : 36,
        "endLineNumber" : 424,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ComparableVersion c=new ComparableVersion(version);\n  if (prev != null) {\n    int compare=prev.compareTo(c);\n    System.out.println(\"   \" + prev.toString() + ' '+ ((compare == 0) ? \"==\" : ((compare < 0) ? \"<\" : \">\"))+ ' '+ version);\n  }\n  System.out.println(String.valueOf(i++) + \". \" + version+ \" == \"+ c.getCanonical());\n  prev=c;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 482,
        "startLineNumber" : 412,
        "startColumnNumber" : 8,
        "endLineNumber" : 424,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String version : args) {\n  ComparableVersion c=new ComparableVersion(version);\n  if (prev != null) {\n    int compare=prev.compareTo(c);\n    System.out.println(\"   \" + prev.toString() + ' '+ ((compare == 0) ? \"==\" : ((compare < 0) ? \"<\" : \">\"))+ ' '+ version);\n  }\n  System.out.println(String.valueOf(i++) + \". \" + version+ \" == \"+ c.getCanonical());\n  prev=c;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 80,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 731,
        "startLineNumber" : 404,
        "startColumnNumber" : 44,
        "endLineNumber" : 425,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  System.out.println(\"Display parameters as parsed by Maven (in canonical form) and comparison result:\");\n  if (args.length == 0) {\n    return;\n  }\n  ComparableVersion prev=null;\n  int i=1;\n  for (  String version : args) {\n    ComparableVersion c=new ComparableVersion(version);\n    if (prev != null) {\n      int compare=prev.compareTo(c);\n      System.out.println(\"   \" + prev.toString() + ' '+ ((compare == 0) ? \"==\" : ((compare < 0) ? \"<\" : \">\"))+ ' '+ version);\n    }\n    System.out.println(String.valueOf(i++) + \". \" + version+ \" == \"+ c.getCanonical());\n    prev=c;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 906,
        "startLineNumber" : 399,
        "startColumnNumber" : 4,
        "endLineNumber" : 425,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Main to test version parsing and comparison.\n * @param args the version strings to parse and compare\n */\npublic static void main(String... args){\n  System.out.println(\"Display parameters as parsed by Maven (in canonical form) and comparison result:\");\n  if (args.length == 0) {\n    return;\n  }\n  ComparableVersion prev=null;\n  int i=1;\n  for (  String version : args) {\n    ComparableVersion c=new ComparableVersion(version);\n    if (prev != null) {\n      int compare=prev.compareTo(c);\n      System.out.println(\"   \" + prev.toString() + ' '+ ((compare == 0) ? \"==\" : ((compare < 0) ? \"<\" : \">\"))+ ' '+ version);\n    }\n    System.out.println(String.valueOf(i++) + \". \" + version+ \" == \"+ c.getCanonical());\n    prev=c;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 421,
        "startColumnNumber" : 12,
        "endLineNumber" : 421,
        "endColumnNumber" : 97
      },
      "nodeContext" : "System.out.println(String.valueOf(i++) + \". \" + version+ \" == \"+ c.getCanonical());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 10,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 64,
    "startLineNumber" : 421,
    "startColumnNumber" : 31,
    "endLineNumber" : 421,
    "endColumnNumber" : 95
  } ],
  "layoutRelationDataList" : [ ]
}