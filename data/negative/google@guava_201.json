{
  "id" : 201,
  "expression" : "t",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava/src/com/google/common/base/NullnessCasts.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "t",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 56,
      "startColumnNumber" : 11,
      "endLineNumber" : 56,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 13
      },
      "nodeContext" : "return t;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 55,
        "startColumnNumber" : 85,
        "endLineNumber" : 57,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  return t;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2254,
        "startLineNumber" : 25,
        "startColumnNumber" : 2,
        "endLineNumber" : 57,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Accepts a  {@code @Nullable T} and returns a plain {@code T}, without performing any check that that conversion is safe. <p>This method is intended to help with usages of type parameters that have  {@linkplain ParametricNullness parametric nullness}. If a type parameter instead ranges over only non-null types (or if the type is a non-variable type, like  {@code String}), then code should almost never use this method, preferring instead to call  {@code requireNonNull} so as to benefit fromits runtime check. <p>An example use case for this method is in implementing an  {@code Iterator<T>} whose {@code next} field is lazily initialized. The type of that field would be {@code @Nullable T}, and the code would be responsible for populating a \"real\"  {@code T} (which might still be the value{@code null}!) before returning it to callers. Depending on how the code is structured, a nullness analysis might not understand that the field has been populated. To avoid that problem without having to add  {@code @SuppressWarnings}, the code can call this method. <p>Why <i>not</i> just add  {@code SuppressWarnings}? The problem is that this method is typically useful for  {@code return} statements. That leaves the code with two options: Eitheradd the suppression to the whole method (which turns off checking for a large section of code), or extract a variable, and put the suppression on that. However, a local variable typically doesn't work: Because nullness analyses typically infer the nullness of local variables, there's no way to assign a  {@code @Nullable T} to a field {@code T foo;} and instruct theanalysis that that means \"plain  {@code T}\" rather than the inferred type  {@code @Nullable T}. (Even if supported added  {@code @NonNull}, that would not help, since the problem case addressed by this method is the case in which  {@code T} has parametric nullness -- and thus itsvalue may be legitimately  {@code null}.)\n */\n@ParametricNullness @SuppressWarnings(\"nullness\") static <T extends @Nullable Object>T uncheckedCastNullableTToT(@CheckForNull T t){\n  return t;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 26,
      "astHeight" : 5
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 13
      },
      "nodeContext" : "return t;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "T"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 56,
    "startColumnNumber" : 11,
    "endLineNumber" : 56,
    "endColumnNumber" : 12
  } ],
  "layoutRelationDataList" : [ ]
}