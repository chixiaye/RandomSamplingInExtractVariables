{
  "id" : 480,
  "expression" : "functionInstanceId",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionRuntimeManager.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "functionInstanceId",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 800,
      "startColumnNumber" : 30,
      "endLineNumber" : 800,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 800,
        "startColumnNumber" : 30,
        "endLineNumber" : 800,
        "endColumnNumber" : 58
      },
      "nodeContext" : "functionInstanceId.getName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 800,
        "startColumnNumber" : 23,
        "endLineNumber" : 800,
        "endColumnNumber" : 58
      },
      "nodeContext" : "name=functionInstanceId.getName()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 800,
        "startColumnNumber" : 16,
        "endLineNumber" : 800,
        "endColumnNumber" : 59
      },
      "nodeContext" : "String name=functionInstanceId.getName();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 950,
        "startLineNumber" : 795,
        "startColumnNumber" : 19,
        "endLineNumber" : 813,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n  String name=functionInstanceId.getName();\n  String namespace=functionInstanceId.getNamespace();\n  String tenant=functionInstanceId.getTenant();\n  Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n  if (assignments.size() > 1) {\n    this.conditionallyStopFunction(functionRuntimeInfo);\n  }\n else {\n    this.conditionallyTerminateFunction(functionRuntimeInfo);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1262,
        "startLineNumber" : 792,
        "startColumnNumber" : 12,
        "endLineNumber" : 813,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (this.functionMetaDataManager.containsFunction(functionDetails.getTenant(),functionDetails.getNamespace(),functionDetails.getName())) {\n  this.conditionallyStopFunction(functionRuntimeInfo);\n}\n else {\n  FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n  String name=functionInstanceId.getName();\n  String namespace=functionInstanceId.getNamespace();\n  String tenant=functionInstanceId.getTenant();\n  Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n  if (assignments.size() > 1) {\n    this.conditionallyStopFunction(functionRuntimeInfo);\n  }\n else {\n    this.conditionallyTerminateFunction(functionRuntimeInfo);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1784,
        "startLineNumber" : 787,
        "startColumnNumber" : 41,
        "endLineNumber" : 815,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Function.FunctionDetails functionDetails=functionRuntimeInfo.getFunctionInstance().getFunctionMetaData().getFunctionDetails();\n  if (this.functionMetaDataManager.containsFunction(functionDetails.getTenant(),functionDetails.getNamespace(),functionDetails.getName())) {\n    this.conditionallyStopFunction(functionRuntimeInfo);\n  }\n else {\n    FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n    String name=functionInstanceId.getName();\n    String namespace=functionInstanceId.getNamespace();\n    String tenant=functionInstanceId.getTenant();\n    Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n    if (assignments.size() > 1) {\n      this.conditionallyStopFunction(functionRuntimeInfo);\n    }\n else {\n      this.conditionallyTerminateFunction(functionRuntimeInfo);\n    }\n  }\n  this.functionRuntimeInfos.remove(fullyQualifiedInstanceId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1817,
        "startLineNumber" : 787,
        "startColumnNumber" : 8,
        "endLineNumber" : 815,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (functionRuntimeInfo != null) {\n  Function.FunctionDetails functionDetails=functionRuntimeInfo.getFunctionInstance().getFunctionMetaData().getFunctionDetails();\n  if (this.functionMetaDataManager.containsFunction(functionDetails.getTenant(),functionDetails.getNamespace(),functionDetails.getName())) {\n    this.conditionallyStopFunction(functionRuntimeInfo);\n  }\n else {\n    FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n    String name=functionInstanceId.getName();\n    String namespace=functionInstanceId.getNamespace();\n    String tenant=functionInstanceId.getTenant();\n    Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n    if (assignments.size() > 1) {\n      this.conditionallyStopFunction(functionRuntimeInfo);\n    }\n else {\n      this.conditionallyTerminateFunction(functionRuntimeInfo);\n    }\n  }\n  this.functionRuntimeInfos.remove(fullyQualifiedInstanceId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2481,
        "startLineNumber" : 785,
        "startColumnNumber" : 79,
        "endLineNumber" : 828,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionRuntimeInfo functionRuntimeInfo=_getFunctionRuntimeInfo(fullyQualifiedInstanceId);\n  if (functionRuntimeInfo != null) {\n    Function.FunctionDetails functionDetails=functionRuntimeInfo.getFunctionInstance().getFunctionMetaData().getFunctionDetails();\n    if (this.functionMetaDataManager.containsFunction(functionDetails.getTenant(),functionDetails.getNamespace(),functionDetails.getName())) {\n      this.conditionallyStopFunction(functionRuntimeInfo);\n    }\n else {\n      FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n      String name=functionInstanceId.getName();\n      String namespace=functionInstanceId.getNamespace();\n      String tenant=functionInstanceId.getTenant();\n      Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n      if (assignments.size() > 1) {\n        this.conditionallyStopFunction(functionRuntimeInfo);\n      }\n else {\n        this.conditionallyTerminateFunction(functionRuntimeInfo);\n      }\n    }\n    this.functionRuntimeInfos.remove(fullyQualifiedInstanceId);\n  }\n  String workerId=null;\n  for (  Entry<String,Map<String,Assignment>> workerAssignments : workerIdToAssignments.entrySet()) {\n    if (workerAssignments.getValue().remove(fullyQualifiedInstanceId) != null) {\n      workerId=workerAssignments.getKey();\n      break;\n    }\n  }\n  Map<String,Assignment> worker;\n  if (workerId != null && ((worker=workerIdToAssignments.get(workerId)) != null && worker.isEmpty())) {\n    this.workerIdToAssignments.remove(workerId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 203,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2556,
        "startLineNumber" : 785,
        "startColumnNumber" : 4,
        "endLineNumber" : 828,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public synchronized void deleteAssignment(String fullyQualifiedInstanceId){\n  FunctionRuntimeInfo functionRuntimeInfo=_getFunctionRuntimeInfo(fullyQualifiedInstanceId);\n  if (functionRuntimeInfo != null) {\n    Function.FunctionDetails functionDetails=functionRuntimeInfo.getFunctionInstance().getFunctionMetaData().getFunctionDetails();\n    if (this.functionMetaDataManager.containsFunction(functionDetails.getTenant(),functionDetails.getNamespace(),functionDetails.getName())) {\n      this.conditionallyStopFunction(functionRuntimeInfo);\n    }\n else {\n      FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n      String name=functionInstanceId.getName();\n      String namespace=functionInstanceId.getNamespace();\n      String tenant=functionInstanceId.getTenant();\n      Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n      if (assignments.size() > 1) {\n        this.conditionallyStopFunction(functionRuntimeInfo);\n      }\n else {\n        this.conditionallyTerminateFunction(functionRuntimeInfo);\n      }\n    }\n    this.functionRuntimeInfos.remove(fullyQualifiedInstanceId);\n  }\n  String workerId=null;\n  for (  Entry<String,Map<String,Assignment>> workerAssignments : workerIdToAssignments.entrySet()) {\n    if (workerAssignments.getValue().remove(fullyQualifiedInstanceId) != null) {\n      workerId=workerAssignments.getKey();\n      break;\n    }\n  }\n  Map<String,Assignment> worker;\n  if (workerId != null && ((worker=workerIdToAssignments.get(workerId)) != null && worker.isEmpty())) {\n    this.workerIdToAssignments.remove(workerId);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 800,
        "startColumnNumber" : 16,
        "endLineNumber" : 800,
        "endColumnNumber" : 59
      },
      "nodeContext" : "String name=functionInstanceId.getName();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.functions.utils.FunctionInstanceId"
  }, {
    "nodeContext" : "functionInstanceId",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 801,
      "startColumnNumber" : 35,
      "endLineNumber" : 801,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 801,
        "startColumnNumber" : 35,
        "endLineNumber" : 801,
        "endColumnNumber" : 68
      },
      "nodeContext" : "functionInstanceId.getNamespace()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 801,
        "startColumnNumber" : 23,
        "endLineNumber" : 801,
        "endColumnNumber" : 68
      },
      "nodeContext" : "namespace=functionInstanceId.getNamespace()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 801,
        "startColumnNumber" : 16,
        "endLineNumber" : 801,
        "endColumnNumber" : 69
      },
      "nodeContext" : "String namespace=functionInstanceId.getNamespace();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 950,
        "startLineNumber" : 795,
        "startColumnNumber" : 19,
        "endLineNumber" : 813,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n  String name=functionInstanceId.getName();\n  String namespace=functionInstanceId.getNamespace();\n  String tenant=functionInstanceId.getTenant();\n  Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n  if (assignments.size() > 1) {\n    this.conditionallyStopFunction(functionRuntimeInfo);\n  }\n else {\n    this.conditionallyTerminateFunction(functionRuntimeInfo);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1262,
        "startLineNumber" : 792,
        "startColumnNumber" : 12,
        "endLineNumber" : 813,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (this.functionMetaDataManager.containsFunction(functionDetails.getTenant(),functionDetails.getNamespace(),functionDetails.getName())) {\n  this.conditionallyStopFunction(functionRuntimeInfo);\n}\n else {\n  FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n  String name=functionInstanceId.getName();\n  String namespace=functionInstanceId.getNamespace();\n  String tenant=functionInstanceId.getTenant();\n  Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n  if (assignments.size() > 1) {\n    this.conditionallyStopFunction(functionRuntimeInfo);\n  }\n else {\n    this.conditionallyTerminateFunction(functionRuntimeInfo);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1784,
        "startLineNumber" : 787,
        "startColumnNumber" : 41,
        "endLineNumber" : 815,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Function.FunctionDetails functionDetails=functionRuntimeInfo.getFunctionInstance().getFunctionMetaData().getFunctionDetails();\n  if (this.functionMetaDataManager.containsFunction(functionDetails.getTenant(),functionDetails.getNamespace(),functionDetails.getName())) {\n    this.conditionallyStopFunction(functionRuntimeInfo);\n  }\n else {\n    FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n    String name=functionInstanceId.getName();\n    String namespace=functionInstanceId.getNamespace();\n    String tenant=functionInstanceId.getTenant();\n    Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n    if (assignments.size() > 1) {\n      this.conditionallyStopFunction(functionRuntimeInfo);\n    }\n else {\n      this.conditionallyTerminateFunction(functionRuntimeInfo);\n    }\n  }\n  this.functionRuntimeInfos.remove(fullyQualifiedInstanceId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1817,
        "startLineNumber" : 787,
        "startColumnNumber" : 8,
        "endLineNumber" : 815,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (functionRuntimeInfo != null) {\n  Function.FunctionDetails functionDetails=functionRuntimeInfo.getFunctionInstance().getFunctionMetaData().getFunctionDetails();\n  if (this.functionMetaDataManager.containsFunction(functionDetails.getTenant(),functionDetails.getNamespace(),functionDetails.getName())) {\n    this.conditionallyStopFunction(functionRuntimeInfo);\n  }\n else {\n    FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n    String name=functionInstanceId.getName();\n    String namespace=functionInstanceId.getNamespace();\n    String tenant=functionInstanceId.getTenant();\n    Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n    if (assignments.size() > 1) {\n      this.conditionallyStopFunction(functionRuntimeInfo);\n    }\n else {\n      this.conditionallyTerminateFunction(functionRuntimeInfo);\n    }\n  }\n  this.functionRuntimeInfos.remove(fullyQualifiedInstanceId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2481,
        "startLineNumber" : 785,
        "startColumnNumber" : 79,
        "endLineNumber" : 828,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionRuntimeInfo functionRuntimeInfo=_getFunctionRuntimeInfo(fullyQualifiedInstanceId);\n  if (functionRuntimeInfo != null) {\n    Function.FunctionDetails functionDetails=functionRuntimeInfo.getFunctionInstance().getFunctionMetaData().getFunctionDetails();\n    if (this.functionMetaDataManager.containsFunction(functionDetails.getTenant(),functionDetails.getNamespace(),functionDetails.getName())) {\n      this.conditionallyStopFunction(functionRuntimeInfo);\n    }\n else {\n      FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n      String name=functionInstanceId.getName();\n      String namespace=functionInstanceId.getNamespace();\n      String tenant=functionInstanceId.getTenant();\n      Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n      if (assignments.size() > 1) {\n        this.conditionallyStopFunction(functionRuntimeInfo);\n      }\n else {\n        this.conditionallyTerminateFunction(functionRuntimeInfo);\n      }\n    }\n    this.functionRuntimeInfos.remove(fullyQualifiedInstanceId);\n  }\n  String workerId=null;\n  for (  Entry<String,Map<String,Assignment>> workerAssignments : workerIdToAssignments.entrySet()) {\n    if (workerAssignments.getValue().remove(fullyQualifiedInstanceId) != null) {\n      workerId=workerAssignments.getKey();\n      break;\n    }\n  }\n  Map<String,Assignment> worker;\n  if (workerId != null && ((worker=workerIdToAssignments.get(workerId)) != null && worker.isEmpty())) {\n    this.workerIdToAssignments.remove(workerId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 203,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2556,
        "startLineNumber" : 785,
        "startColumnNumber" : 4,
        "endLineNumber" : 828,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public synchronized void deleteAssignment(String fullyQualifiedInstanceId){\n  FunctionRuntimeInfo functionRuntimeInfo=_getFunctionRuntimeInfo(fullyQualifiedInstanceId);\n  if (functionRuntimeInfo != null) {\n    Function.FunctionDetails functionDetails=functionRuntimeInfo.getFunctionInstance().getFunctionMetaData().getFunctionDetails();\n    if (this.functionMetaDataManager.containsFunction(functionDetails.getTenant(),functionDetails.getNamespace(),functionDetails.getName())) {\n      this.conditionallyStopFunction(functionRuntimeInfo);\n    }\n else {\n      FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n      String name=functionInstanceId.getName();\n      String namespace=functionInstanceId.getNamespace();\n      String tenant=functionInstanceId.getTenant();\n      Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n      if (assignments.size() > 1) {\n        this.conditionallyStopFunction(functionRuntimeInfo);\n      }\n else {\n        this.conditionallyTerminateFunction(functionRuntimeInfo);\n      }\n    }\n    this.functionRuntimeInfos.remove(fullyQualifiedInstanceId);\n  }\n  String workerId=null;\n  for (  Entry<String,Map<String,Assignment>> workerAssignments : workerIdToAssignments.entrySet()) {\n    if (workerAssignments.getValue().remove(fullyQualifiedInstanceId) != null) {\n      workerId=workerAssignments.getKey();\n      break;\n    }\n  }\n  Map<String,Assignment> worker;\n  if (workerId != null && ((worker=workerIdToAssignments.get(workerId)) != null && worker.isEmpty())) {\n    this.workerIdToAssignments.remove(workerId);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 801,
        "startColumnNumber" : 16,
        "endLineNumber" : 801,
        "endColumnNumber" : 69
      },
      "nodeContext" : "String namespace=functionInstanceId.getNamespace();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.functions.utils.FunctionInstanceId"
  }, {
    "nodeContext" : "functionInstanceId",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 802,
      "startColumnNumber" : 32,
      "endLineNumber" : 802,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 802,
        "startColumnNumber" : 32,
        "endLineNumber" : 802,
        "endColumnNumber" : 62
      },
      "nodeContext" : "functionInstanceId.getTenant()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 802,
        "startColumnNumber" : 23,
        "endLineNumber" : 802,
        "endColumnNumber" : 62
      },
      "nodeContext" : "tenant=functionInstanceId.getTenant()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 802,
        "startColumnNumber" : 16,
        "endLineNumber" : 802,
        "endColumnNumber" : 63
      },
      "nodeContext" : "String tenant=functionInstanceId.getTenant();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 950,
        "startLineNumber" : 795,
        "startColumnNumber" : 19,
        "endLineNumber" : 813,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n  String name=functionInstanceId.getName();\n  String namespace=functionInstanceId.getNamespace();\n  String tenant=functionInstanceId.getTenant();\n  Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n  if (assignments.size() > 1) {\n    this.conditionallyStopFunction(functionRuntimeInfo);\n  }\n else {\n    this.conditionallyTerminateFunction(functionRuntimeInfo);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1262,
        "startLineNumber" : 792,
        "startColumnNumber" : 12,
        "endLineNumber" : 813,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (this.functionMetaDataManager.containsFunction(functionDetails.getTenant(),functionDetails.getNamespace(),functionDetails.getName())) {\n  this.conditionallyStopFunction(functionRuntimeInfo);\n}\n else {\n  FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n  String name=functionInstanceId.getName();\n  String namespace=functionInstanceId.getNamespace();\n  String tenant=functionInstanceId.getTenant();\n  Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n  if (assignments.size() > 1) {\n    this.conditionallyStopFunction(functionRuntimeInfo);\n  }\n else {\n    this.conditionallyTerminateFunction(functionRuntimeInfo);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1784,
        "startLineNumber" : 787,
        "startColumnNumber" : 41,
        "endLineNumber" : 815,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Function.FunctionDetails functionDetails=functionRuntimeInfo.getFunctionInstance().getFunctionMetaData().getFunctionDetails();\n  if (this.functionMetaDataManager.containsFunction(functionDetails.getTenant(),functionDetails.getNamespace(),functionDetails.getName())) {\n    this.conditionallyStopFunction(functionRuntimeInfo);\n  }\n else {\n    FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n    String name=functionInstanceId.getName();\n    String namespace=functionInstanceId.getNamespace();\n    String tenant=functionInstanceId.getTenant();\n    Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n    if (assignments.size() > 1) {\n      this.conditionallyStopFunction(functionRuntimeInfo);\n    }\n else {\n      this.conditionallyTerminateFunction(functionRuntimeInfo);\n    }\n  }\n  this.functionRuntimeInfos.remove(fullyQualifiedInstanceId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1817,
        "startLineNumber" : 787,
        "startColumnNumber" : 8,
        "endLineNumber" : 815,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (functionRuntimeInfo != null) {\n  Function.FunctionDetails functionDetails=functionRuntimeInfo.getFunctionInstance().getFunctionMetaData().getFunctionDetails();\n  if (this.functionMetaDataManager.containsFunction(functionDetails.getTenant(),functionDetails.getNamespace(),functionDetails.getName())) {\n    this.conditionallyStopFunction(functionRuntimeInfo);\n  }\n else {\n    FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n    String name=functionInstanceId.getName();\n    String namespace=functionInstanceId.getNamespace();\n    String tenant=functionInstanceId.getTenant();\n    Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n    if (assignments.size() > 1) {\n      this.conditionallyStopFunction(functionRuntimeInfo);\n    }\n else {\n      this.conditionallyTerminateFunction(functionRuntimeInfo);\n    }\n  }\n  this.functionRuntimeInfos.remove(fullyQualifiedInstanceId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2481,
        "startLineNumber" : 785,
        "startColumnNumber" : 79,
        "endLineNumber" : 828,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionRuntimeInfo functionRuntimeInfo=_getFunctionRuntimeInfo(fullyQualifiedInstanceId);\n  if (functionRuntimeInfo != null) {\n    Function.FunctionDetails functionDetails=functionRuntimeInfo.getFunctionInstance().getFunctionMetaData().getFunctionDetails();\n    if (this.functionMetaDataManager.containsFunction(functionDetails.getTenant(),functionDetails.getNamespace(),functionDetails.getName())) {\n      this.conditionallyStopFunction(functionRuntimeInfo);\n    }\n else {\n      FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n      String name=functionInstanceId.getName();\n      String namespace=functionInstanceId.getNamespace();\n      String tenant=functionInstanceId.getTenant();\n      Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n      if (assignments.size() > 1) {\n        this.conditionallyStopFunction(functionRuntimeInfo);\n      }\n else {\n        this.conditionallyTerminateFunction(functionRuntimeInfo);\n      }\n    }\n    this.functionRuntimeInfos.remove(fullyQualifiedInstanceId);\n  }\n  String workerId=null;\n  for (  Entry<String,Map<String,Assignment>> workerAssignments : workerIdToAssignments.entrySet()) {\n    if (workerAssignments.getValue().remove(fullyQualifiedInstanceId) != null) {\n      workerId=workerAssignments.getKey();\n      break;\n    }\n  }\n  Map<String,Assignment> worker;\n  if (workerId != null && ((worker=workerIdToAssignments.get(workerId)) != null && worker.isEmpty())) {\n    this.workerIdToAssignments.remove(workerId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 203,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2556,
        "startLineNumber" : 785,
        "startColumnNumber" : 4,
        "endLineNumber" : 828,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public synchronized void deleteAssignment(String fullyQualifiedInstanceId){\n  FunctionRuntimeInfo functionRuntimeInfo=_getFunctionRuntimeInfo(fullyQualifiedInstanceId);\n  if (functionRuntimeInfo != null) {\n    Function.FunctionDetails functionDetails=functionRuntimeInfo.getFunctionInstance().getFunctionMetaData().getFunctionDetails();\n    if (this.functionMetaDataManager.containsFunction(functionDetails.getTenant(),functionDetails.getNamespace(),functionDetails.getName())) {\n      this.conditionallyStopFunction(functionRuntimeInfo);\n    }\n else {\n      FunctionInstanceId functionInstanceId=new FunctionInstanceId(fullyQualifiedInstanceId);\n      String name=functionInstanceId.getName();\n      String namespace=functionInstanceId.getNamespace();\n      String tenant=functionInstanceId.getTenant();\n      Collection<Assignment> assignments=findFunctionAssignments(tenant,namespace,name,this.workerIdToAssignments);\n      if (assignments.size() > 1) {\n        this.conditionallyStopFunction(functionRuntimeInfo);\n      }\n else {\n        this.conditionallyTerminateFunction(functionRuntimeInfo);\n      }\n    }\n    this.functionRuntimeInfos.remove(fullyQualifiedInstanceId);\n  }\n  String workerId=null;\n  for (  Entry<String,Map<String,Assignment>> workerAssignments : workerIdToAssignments.entrySet()) {\n    if (workerAssignments.getValue().remove(fullyQualifiedInstanceId) != null) {\n      workerId=workerAssignments.getKey();\n      break;\n    }\n  }\n  Map<String,Assignment> worker;\n  if (workerId != null && ((worker=workerIdToAssignments.get(workerId)) != null && worker.isEmpty())) {\n    this.workerIdToAssignments.remove(workerId);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 802,
        "startColumnNumber" : 16,
        "endLineNumber" : 802,
        "endColumnNumber" : 63
      },
      "nodeContext" : "String tenant=functionInstanceId.getTenant();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.functions.utils.FunctionInstanceId"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 800,
    "startColumnNumber" : 30,
    "endLineNumber" : 800,
    "endColumnNumber" : 48
  }, {
    "charLength" : 18,
    "startLineNumber" : 801,
    "startColumnNumber" : 35,
    "endLineNumber" : 801,
    "endColumnNumber" : 53
  }, {
    "charLength" : 18,
    "startLineNumber" : 802,
    "startColumnNumber" : 32,
    "endLineNumber" : 802,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}