{
  "id" : 283,
  "expression" : "serviceUrl",
  "projectName" : "Netflix@eureka",
  "commitID" : "295f257424f0952b17a6903940bbd4e2f2fced03",
  "filePath" : "eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java",
  "occurrences" : 11,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "serviceUrl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 95,
      "startColumnNumber" : 26,
      "endLineNumber" : 95,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 95,
        "startColumnNumber" : 26,
        "endLineNumber" : 95,
        "endColumnNumber" : 45
      },
      "nodeContext" : "serviceUrl.intern()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 45
      },
      "nodeContext" : "this.serviceUrl=serviceUrl.intern()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 46
      },
      "nodeContext" : "this.serviceUrl=serviceUrl.intern();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2389,
        "startLineNumber" : 94,
        "startColumnNumber" : 45,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2430,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 46
      },
      "nodeContext" : "this.serviceUrl=serviceUrl.intern();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "serviceUrl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 96,
      "startColumnNumber" : 56,
      "endLineNumber" : 96,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 96,
        "startColumnNumber" : 20,
        "endLineNumber" : 96,
        "endColumnNumber" : 78
      },
      "nodeContext" : "getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 78
      },
      "nodeContext" : "this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \"",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 79
      },
      "nodeContext" : "this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2389,
        "startLineNumber" : 94,
        "startColumnNumber" : 45,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2430,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 79
      },
      "nodeContext" : "this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "serviceUrl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 97,
      "startColumnNumber" : 43,
      "endLineNumber" : 97,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 97,
        "startColumnNumber" : 32,
        "endLineNumber" : 97,
        "endColumnNumber" : 79
      },
      "nodeContext" : "getBatcher(serviceUrl,Action.Heartbeat.name())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 79
      },
      "nodeContext" : "this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 80
      },
      "nodeContext" : "this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2389,
        "startLineNumber" : 94,
        "startColumnNumber" : 45,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2430,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 80
      },
      "nodeContext" : "this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "serviceUrl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 98,
      "startColumnNumber" : 40,
      "endLineNumber" : 98,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 98,
        "startColumnNumber" : 29,
        "endLineNumber" : 98,
        "endColumnNumber" : 79
      },
      "nodeContext" : "getBatcher(serviceUrl,Action.StatusUpdate.name())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 79
      },
      "nodeContext" : "this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 80
      },
      "nodeContext" : "this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2389,
        "startLineNumber" : 94,
        "startColumnNumber" : 45,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2430,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 80
      },
      "nodeContext" : "this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "serviceUrl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 99,
      "startColumnNumber" : 43,
      "endLineNumber" : 99,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 99,
        "startColumnNumber" : 32,
        "endLineNumber" : 99,
        "endColumnNumber" : 91
      },
      "nodeContext" : "getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 91
      },
      "nodeContext" : "this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 92
      },
      "nodeContext" : "this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2389,
        "startLineNumber" : 94,
        "startColumnNumber" : 45,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2430,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 92
      },
      "nodeContext" : "this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "serviceUrl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 100,
      "startColumnNumber" : 42,
      "endLineNumber" : 100,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 100,
        "startColumnNumber" : 31,
        "endLineNumber" : 100,
        "endColumnNumber" : 77
      },
      "nodeContext" : "getBatcher(serviceUrl,Action.Register.name())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 77
      },
      "nodeContext" : "this.registerBatcher=getBatcher(serviceUrl,Action.Register.name())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 78
      },
      "nodeContext" : "this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2389,
        "startLineNumber" : 94,
        "startColumnNumber" : 45,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2430,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 78
      },
      "nodeContext" : "this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "serviceUrl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 101,
      "startColumnNumber" : 40,
      "endLineNumber" : 101,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 101,
        "startColumnNumber" : 29,
        "endLineNumber" : 101,
        "endColumnNumber" : 73
      },
      "nodeContext" : "getBatcher(serviceUrl,Action.Cancel.name())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 73
      },
      "nodeContext" : "this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 74
      },
      "nodeContext" : "this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2389,
        "startLineNumber" : 94,
        "startColumnNumber" : 45,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2430,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 74
      },
      "nodeContext" : "this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "serviceUrl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 109,
      "startColumnNumber" : 43,
      "endLineNumber" : 109,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 109,
        "startColumnNumber" : 35,
        "endLineNumber" : 109,
        "endColumnNumber" : 54
      },
      "nodeContext" : "new URL(serviceUrl)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 109,
        "startColumnNumber" : 35,
        "endLineNumber" : 109,
        "endColumnNumber" : 64
      },
      "nodeContext" : "new URL(serviceUrl).getHost()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 109,
        "startColumnNumber" : 24,
        "endLineNumber" : 109,
        "endColumnNumber" : 64
      },
      "nodeContext" : "hostname=new URL(serviceUrl).getHost()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 109,
        "startColumnNumber" : 24,
        "endLineNumber" : 109,
        "endColumnNumber" : 65
      },
      "nodeContext" : "hostname=new URL(serviceUrl).getHost();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 108,
        "startColumnNumber" : 24,
        "endLineNumber" : 110,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  hostname=new URL(serviceUrl).getHost();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 108,
        "startColumnNumber" : 20,
        "endLineNumber" : 112,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  hostname=new URL(serviceUrl).getHost();\n}\n catch (MalformedURLException e) {\n  hostname=serviceUrl;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 106,
        "startColumnNumber" : 20,
        "endLineNumber" : 121,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String hostname;\n  try {\n    hostname=new URL(serviceUrl).getHost();\n  }\n catch (  MalformedURLException e) {\n    hostname=serviceUrl;\n  }\n  String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n  jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n  jerseyApacheClient=jerseyClient.getClient();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1028,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 124,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  String hostname;\n  try {\n    hostname=new URL(serviceUrl).getHost();\n  }\n catch (  MalformedURLException e) {\n    hostname=serviceUrl;\n  }\n  String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n  jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n  jerseyApacheClient=jerseyClient.getClient();\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 77,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1060,
        "startLineNumber" : 105,
        "startColumnNumber" : 44,
        "endLineNumber" : 125,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    String hostname;\n    try {\n      hostname=new URL(serviceUrl).getHost();\n    }\n catch (    MalformedURLException e) {\n      hostname=serviceUrl;\n    }\n    String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n    jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n    jerseyApacheClient=jerseyClient.getClient();\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 78,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1092,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (jerseyApacheClient == null) {\n  try {\n    String hostname;\n    try {\n      hostname=new URL(serviceUrl).getHost();\n    }\n catch (    MalformedURLException e) {\n      hostname=serviceUrl;\n    }\n    String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n    jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n    jerseyApacheClient=jerseyClient.getClient();\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1510,
        "startLineNumber" : 103,
        "startColumnNumber" : 39,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (jerseyApacheClient == null) {\n    try {\n      String hostname;\n      try {\n        hostname=new URL(serviceUrl).getHost();\n      }\n catch (      MalformedURLException e) {\n        hostname=serviceUrl;\n      }\n      String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n      jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n      jerseyApacheClient=jerseyClient.getClient();\n    }\n catch (    Throwable e) {\n      throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n    }\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1541,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (this.serviceUrl) {\n  if (jerseyApacheClient == null) {\n    try {\n      String hostname;\n      try {\n        hostname=new URL(serviceUrl).getHost();\n      }\n catch (      MalformedURLException e) {\n        hostname=serviceUrl;\n      }\n      String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n      jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n      jerseyApacheClient=jerseyClient.getClient();\n    }\n catch (    Throwable e) {\n      throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n    }\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 132,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2389,
        "startLineNumber" : 94,
        "startColumnNumber" : 45,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2430,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 109,
        "startColumnNumber" : 24,
        "endLineNumber" : 109,
        "endColumnNumber" : 65
      },
      "nodeContext" : "hostname=new URL(serviceUrl).getHost();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "serviceUrl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 111,
      "startColumnNumber" : 35,
      "endLineNumber" : 111,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 111,
        "startColumnNumber" : 24,
        "endLineNumber" : 111,
        "endColumnNumber" : 45
      },
      "nodeContext" : "hostname=serviceUrl",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 111,
        "startColumnNumber" : 24,
        "endLineNumber" : 111,
        "endColumnNumber" : 46
      },
      "nodeContext" : "hostname=serviceUrl;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 110,
        "startColumnNumber" : 54,
        "endLineNumber" : 112,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  hostname=serviceUrl;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 110,
        "startColumnNumber" : 22,
        "endLineNumber" : 112,
        "endColumnNumber" : 21
      },
      "nodeContext" : "catch (MalformedURLException e) {\n  hostname=serviceUrl;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 108,
        "startColumnNumber" : 20,
        "endLineNumber" : 112,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  hostname=new URL(serviceUrl).getHost();\n}\n catch (MalformedURLException e) {\n  hostname=serviceUrl;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 106,
        "startColumnNumber" : 20,
        "endLineNumber" : 121,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String hostname;\n  try {\n    hostname=new URL(serviceUrl).getHost();\n  }\n catch (  MalformedURLException e) {\n    hostname=serviceUrl;\n  }\n  String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n  jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n  jerseyApacheClient=jerseyClient.getClient();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1028,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 124,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  String hostname;\n  try {\n    hostname=new URL(serviceUrl).getHost();\n  }\n catch (  MalformedURLException e) {\n    hostname=serviceUrl;\n  }\n  String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n  jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n  jerseyApacheClient=jerseyClient.getClient();\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 77,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1060,
        "startLineNumber" : 105,
        "startColumnNumber" : 44,
        "endLineNumber" : 125,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    String hostname;\n    try {\n      hostname=new URL(serviceUrl).getHost();\n    }\n catch (    MalformedURLException e) {\n      hostname=serviceUrl;\n    }\n    String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n    jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n    jerseyApacheClient=jerseyClient.getClient();\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 78,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1092,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (jerseyApacheClient == null) {\n  try {\n    String hostname;\n    try {\n      hostname=new URL(serviceUrl).getHost();\n    }\n catch (    MalformedURLException e) {\n      hostname=serviceUrl;\n    }\n    String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n    jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n    jerseyApacheClient=jerseyClient.getClient();\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1510,
        "startLineNumber" : 103,
        "startColumnNumber" : 39,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (jerseyApacheClient == null) {\n    try {\n      String hostname;\n      try {\n        hostname=new URL(serviceUrl).getHost();\n      }\n catch (      MalformedURLException e) {\n        hostname=serviceUrl;\n      }\n      String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n      jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n      jerseyApacheClient=jerseyClient.getClient();\n    }\n catch (    Throwable e) {\n      throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n    }\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1541,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (this.serviceUrl) {\n  if (jerseyApacheClient == null) {\n    try {\n      String hostname;\n      try {\n        hostname=new URL(serviceUrl).getHost();\n      }\n catch (      MalformedURLException e) {\n        hostname=serviceUrl;\n      }\n      String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n      jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n      jerseyApacheClient=jerseyClient.getClient();\n    }\n catch (    Throwable e) {\n      throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n    }\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 132,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2389,
        "startLineNumber" : 94,
        "startColumnNumber" : 45,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2430,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 111,
        "startColumnNumber" : 24,
        "endLineNumber" : 111,
        "endColumnNumber" : 46
      },
      "nodeContext" : "hostname=serviceUrl;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "serviceUrl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 137,
      "startColumnNumber" : 44,
      "endLineNumber" : 137,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 137,
        "startColumnNumber" : 36,
        "endLineNumber" : 137,
        "endColumnNumber" : 55
      },
      "nodeContext" : "new URL(serviceUrl)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 137,
        "startColumnNumber" : 36,
        "endLineNumber" : 137,
        "endColumnNumber" : 65
      },
      "nodeContext" : "new URL(serviceUrl).getHost()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 137,
        "startColumnNumber" : 19,
        "endLineNumber" : 137,
        "endColumnNumber" : 65
      },
      "nodeContext" : "serviceUrlHost=new URL(serviceUrl).getHost()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 137,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 66
      },
      "nodeContext" : "String serviceUrlHost=new URL(serviceUrl).getHost();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 136,
        "startColumnNumber" : 12,
        "endLineNumber" : 139,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String serviceUrlHost=new URL(serviceUrl).getHost();\n  Monitors.registerObject(serviceUrlHost,this);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 136,
        "startColumnNumber" : 8,
        "endLineNumber" : 142,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  String serviceUrlHost=new URL(serviceUrl).getHost();\n  Monitors.registerObject(serviceUrlHost,this);\n}\n catch (Throwable e) {\n  logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2389,
        "startLineNumber" : 94,
        "startColumnNumber" : 45,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2430,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 137,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 66
      },
      "nodeContext" : "String serviceUrlHost=new URL(serviceUrl).getHost();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "serviceUrl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 141,
      "startColumnNumber" : 22,
      "endLineNumber" : 141,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 140,
        "startColumnNumber" : 25,
        "endLineNumber" : 141,
        "endColumnNumber" : 32
      },
      "nodeContext" : "\"Cannot register monitors for Peer eureka node :\" + serviceUrl",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 140,
        "startColumnNumber" : 12,
        "endLineNumber" : 141,
        "endColumnNumber" : 36
      },
      "nodeContext" : "logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 140,
        "startColumnNumber" : 12,
        "endLineNumber" : 141,
        "endColumnNumber" : 37
      },
      "nodeContext" : "logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 139,
        "startColumnNumber" : 30,
        "endLineNumber" : 142,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 139,
        "startColumnNumber" : 10,
        "endLineNumber" : 142,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Throwable e) {\n  logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 136,
        "startColumnNumber" : 8,
        "endLineNumber" : 142,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  String serviceUrlHost=new URL(serviceUrl).getHost();\n  Monitors.registerObject(serviceUrlHost,this);\n}\n catch (Throwable e) {\n  logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2389,
        "startLineNumber" : 94,
        "startColumnNumber" : 45,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2430,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 140,
        "startColumnNumber" : 25,
        "endLineNumber" : 141,
        "endColumnNumber" : 32
      },
      "nodeContext" : "\"Cannot register monitors for Peer eureka node :\" + serviceUrl",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 95,
    "startColumnNumber" : 26,
    "endLineNumber" : 95,
    "endColumnNumber" : 36
  }, {
    "charLength" : 10,
    "startLineNumber" : 96,
    "startColumnNumber" : 56,
    "endLineNumber" : 96,
    "endColumnNumber" : 66
  }, {
    "charLength" : 10,
    "startLineNumber" : 97,
    "startColumnNumber" : 43,
    "endLineNumber" : 97,
    "endColumnNumber" : 53
  }, {
    "charLength" : 10,
    "startLineNumber" : 98,
    "startColumnNumber" : 40,
    "endLineNumber" : 98,
    "endColumnNumber" : 50
  }, {
    "charLength" : 10,
    "startLineNumber" : 99,
    "startColumnNumber" : 43,
    "endLineNumber" : 99,
    "endColumnNumber" : 53
  }, {
    "charLength" : 10,
    "startLineNumber" : 100,
    "startColumnNumber" : 42,
    "endLineNumber" : 100,
    "endColumnNumber" : 52
  }, {
    "charLength" : 10,
    "startLineNumber" : 101,
    "startColumnNumber" : 40,
    "endLineNumber" : 101,
    "endColumnNumber" : 50
  }, {
    "charLength" : 10,
    "startLineNumber" : 109,
    "startColumnNumber" : 43,
    "endLineNumber" : 109,
    "endColumnNumber" : 53
  }, {
    "charLength" : 10,
    "startLineNumber" : 111,
    "startColumnNumber" : 35,
    "endLineNumber" : 111,
    "endColumnNumber" : 45
  }, {
    "charLength" : 10,
    "startLineNumber" : 137,
    "startColumnNumber" : 44,
    "endLineNumber" : 137,
    "endColumnNumber" : 54
  }, {
    "charLength" : 10,
    "startLineNumber" : 141,
    "startColumnNumber" : 22,
    "endLineNumber" : 141,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 12
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 12
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 12
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 12
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 12
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 12
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 12
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 11
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 5
  } ]
}