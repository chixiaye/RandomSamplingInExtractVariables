{
  "id" : 183,
  "expression" : "newProjects",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/planner/plan/rules/logical/ProjectWatermarkAssignerTransposeRule.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "newProjects",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 147,
      "startColumnNumber" : 32,
      "endLineNumber" : 147,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 147,
        "startColumnNumber" : 16,
        "endLineNumber" : 147,
        "endColumnNumber" : 82
      },
      "nodeContext" : "builder.project(newProjects,project.getRowType().getFieldNames())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 147,
        "startColumnNumber" : 16,
        "endLineNumber" : 147,
        "endColumnNumber" : 90
      },
      "nodeContext" : "builder.project(newProjects,project.getRowType().getFieldNames()).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 146,
        "startColumnNumber" : 16,
        "endLineNumber" : 147,
        "endColumnNumber" : 90
      },
      "nodeContext" : "newProject=builder.project(newProjects,project.getRowType().getFieldNames()).build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 146,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 91
      },
      "nodeContext" : "RelNode newProject=builder.project(newProjects,project.getRowType().getFieldNames()).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3666,
        "startLineNumber" : 75,
        "startColumnNumber" : 45,
        "endLineNumber" : 149,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LogicalProject project=call.rel(0);\n  LogicalWatermarkAssigner watermarkAssigner=call.rel(1);\n  NestedSchema nestedSchema=getUsedFieldsInTopLevelProjectAndWatermarkAssigner(project,watermarkAssigner);\n  FlinkRelBuilder builder=(FlinkRelBuilder)call.builder().push(watermarkAssigner.getInput());\n  List<RexInputRef> transposedProjects=new LinkedList<>();\n  List<String> usedNames=new LinkedList<>();\n  for (  NestedColumn column : nestedSchema.columns().values()) {\n    column.setIndexOfLeafInNewSchema(transposedProjects.size());\n    column.markLeaf();\n    usedNames.add(column.name());\n    transposedProjects.add(builder.field(column.indexInOriginSchema()));\n  }\n  String rowTimeName=watermarkAssigner.getRowType().getFieldNames().get(watermarkAssigner.rowtimeFieldIndex());\n  int indexOfRowTimeInTransposedProject;\n  if (nestedSchema.columns().get(rowTimeName) == null) {\n    int rowTimeIndexInInput=watermarkAssigner.rowtimeFieldIndex();\n    indexOfRowTimeInTransposedProject=transposedProjects.size();\n    transposedProjects.add(builder.field(rowTimeIndexInInput));\n    usedNames.add(rowTimeName);\n  }\n else {\n    indexOfRowTimeInTransposedProject=nestedSchema.columns().get(rowTimeName).indexOfLeafInNewSchema();\n  }\n  builder.project(transposedProjects,usedNames);\n  RexNode newWatermarkExpr=watermarkAssigner.watermarkExpr().accept(new RexShuttle(){\n    @Override public RexNode visitInputRef(    RexInputRef inputRef){\n      String fieldName=watermarkAssigner.getRowType().getFieldNames().get(inputRef.getIndex());\n      return builder.field(nestedSchema.columns().get(fieldName).indexOfLeafInNewSchema());\n    }\n  }\n);\n  builder.watermark(indexOfRowTimeInTransposedProject,newWatermarkExpr);\n  List<RexNode> newProjects=NestedProjectionUtil.rewrite(project.getProjects(),nestedSchema,call.builder().getRexBuilder());\n  RelNode newProject=builder.project(newProjects,project.getRowType().getFieldNames()).build();\n  call.transformTo(newProject);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 280,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3721,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 149,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void onMatch(RelOptRuleCall call){\n  LogicalProject project=call.rel(0);\n  LogicalWatermarkAssigner watermarkAssigner=call.rel(1);\n  NestedSchema nestedSchema=getUsedFieldsInTopLevelProjectAndWatermarkAssigner(project,watermarkAssigner);\n  FlinkRelBuilder builder=(FlinkRelBuilder)call.builder().push(watermarkAssigner.getInput());\n  List<RexInputRef> transposedProjects=new LinkedList<>();\n  List<String> usedNames=new LinkedList<>();\n  for (  NestedColumn column : nestedSchema.columns().values()) {\n    column.setIndexOfLeafInNewSchema(transposedProjects.size());\n    column.markLeaf();\n    usedNames.add(column.name());\n    transposedProjects.add(builder.field(column.indexInOriginSchema()));\n  }\n  String rowTimeName=watermarkAssigner.getRowType().getFieldNames().get(watermarkAssigner.rowtimeFieldIndex());\n  int indexOfRowTimeInTransposedProject;\n  if (nestedSchema.columns().get(rowTimeName) == null) {\n    int rowTimeIndexInInput=watermarkAssigner.rowtimeFieldIndex();\n    indexOfRowTimeInTransposedProject=transposedProjects.size();\n    transposedProjects.add(builder.field(rowTimeIndexInInput));\n    usedNames.add(rowTimeName);\n  }\n else {\n    indexOfRowTimeInTransposedProject=nestedSchema.columns().get(rowTimeName).indexOfLeafInNewSchema();\n  }\n  builder.project(transposedProjects,usedNames);\n  RexNode newWatermarkExpr=watermarkAssigner.watermarkExpr().accept(new RexShuttle(){\n    @Override public RexNode visitInputRef(    RexInputRef inputRef){\n      String fieldName=watermarkAssigner.getRowType().getFieldNames().get(inputRef.getIndex());\n      return builder.field(nestedSchema.columns().get(fieldName).indexOfLeafInNewSchema());\n    }\n  }\n);\n  builder.watermark(indexOfRowTimeInTransposedProject,newWatermarkExpr);\n  List<RexNode> newProjects=NestedProjectionUtil.rewrite(project.getProjects(),nestedSchema,call.builder().getRexBuilder());\n  RelNode newProject=builder.project(newProjects,project.getRowType().getFieldNames()).build();\n  call.transformTo(newProject);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 147,
        "startColumnNumber" : 16,
        "endLineNumber" : 147,
        "endColumnNumber" : 90
      },
      "nodeContext" : "builder.project(newProjects,project.getRowType().getFieldNames()).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.flink.table.planner.plan.rules.logical.RexNode>"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 147,
    "startColumnNumber" : 32,
    "endLineNumber" : 147,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}