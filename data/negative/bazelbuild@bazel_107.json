{
  "id" : 107,
  "expression" : "\"my_aspect\"",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/build/skydoc/SkydocTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"my_aspect\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 696,
      "startColumnNumber" : 53,
      "endLineNumber" : 696,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 696,
        "startColumnNumber" : 4,
        "endLineNumber" : 696,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertThat(aspectInfo.getAspectName()).isEqualTo(\"my_aspect\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 696,
        "startColumnNumber" : 4,
        "endLineNumber" : 696,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertThat(aspectInfo.getAspectName()).isEqualTo(\"my_aspect\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1821,
        "startLineNumber" : 663,
        "startColumnNumber" : 48,
        "endLineNumber" : 703,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  scratch.file(\"/execroot/io_bazel/test/test.bzl\",\"def my_aspect_impl(ctx):\\n\" + \"    return []\\n\" + \"\\n\"+ \"my_aspect = aspect(\\n\"+ \"    implementation = my_aspect_impl,\\n\"+ \"    doc = \\\"This is my aspect. It does stuff.\\\",\\n\"+ \"    attr_aspects = [\\\"deps\\\"],\\n\"+ \"    attrs = {\\n\"+ \"        \\\"first\\\": attr.label(mandatory = True, allow_single_file = True),\\n\"+ \"        \\\"second\\\": attr.string_dict(mandatory = True),\\n\"+ \"        \\\"_third\\\": attr.label(mandatory = True, allow_single_file = True),\\n\"+ \"    },\\n\"+ \")\");\n  ImmutableMap.Builder<String,AspectInfo> aspectInfoMap=ImmutableMap.builder();\n  skydocMain.eval(StarlarkSemantics.DEFAULT,Label.parseAbsoluteUnchecked(\"//test:test.bzl\"),ImmutableMap.builder(),ImmutableMap.builder(),ImmutableMap.builder(),aspectInfoMap,ImmutableMap.builder());\n  Map<String,AspectInfo> aspectInfos=aspectInfoMap.build();\n  assertThat(aspectInfos).hasSize(1);\n  ModuleInfo moduleInfo=new ProtoRenderer().appendAspectInfos(aspectInfos.values()).getModuleInfo().build();\n  AspectInfo aspectInfo=moduleInfo.getAspectInfo(0);\n  assertThat(aspectInfo.getAspectName()).isEqualTo(\"my_aspect\");\n  assertThat(aspectInfo.getDocString()).isEqualTo(\"This is my aspect. It does stuff.\");\n  assertThat(getAttrNames(aspectInfo)).containsExactly(\"name\",\"first\",\"second\").inOrder();\n  assertThat(getAttrTypes(aspectInfo)).containsExactly(AttributeType.NAME,AttributeType.LABEL,AttributeType.STRING_DICT).inOrder();\n  assertThat(aspectInfo.getAspectAttributeList()).containsExactly(\"deps\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1875,
        "startLineNumber" : 662,
        "startColumnNumber" : 2,
        "endLineNumber" : 703,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testAspectInfo() throws Exception {\n  scratch.file(\"/execroot/io_bazel/test/test.bzl\",\"def my_aspect_impl(ctx):\\n\" + \"    return []\\n\" + \"\\n\"+ \"my_aspect = aspect(\\n\"+ \"    implementation = my_aspect_impl,\\n\"+ \"    doc = \\\"This is my aspect. It does stuff.\\\",\\n\"+ \"    attr_aspects = [\\\"deps\\\"],\\n\"+ \"    attrs = {\\n\"+ \"        \\\"first\\\": attr.label(mandatory = True, allow_single_file = True),\\n\"+ \"        \\\"second\\\": attr.string_dict(mandatory = True),\\n\"+ \"        \\\"_third\\\": attr.label(mandatory = True, allow_single_file = True),\\n\"+ \"    },\\n\"+ \")\");\n  ImmutableMap.Builder<String,AspectInfo> aspectInfoMap=ImmutableMap.builder();\n  skydocMain.eval(StarlarkSemantics.DEFAULT,Label.parseAbsoluteUnchecked(\"//test:test.bzl\"),ImmutableMap.builder(),ImmutableMap.builder(),ImmutableMap.builder(),aspectInfoMap,ImmutableMap.builder());\n  Map<String,AspectInfo> aspectInfos=aspectInfoMap.build();\n  assertThat(aspectInfos).hasSize(1);\n  ModuleInfo moduleInfo=new ProtoRenderer().appendAspectInfos(aspectInfos.values()).getModuleInfo().build();\n  AspectInfo aspectInfo=moduleInfo.getAspectInfo(0);\n  assertThat(aspectInfo.getAspectName()).isEqualTo(\"my_aspect\");\n  assertThat(aspectInfo.getDocString()).isEqualTo(\"This is my aspect. It does stuff.\");\n  assertThat(getAttrNames(aspectInfo)).containsExactly(\"name\",\"first\",\"second\").inOrder();\n  assertThat(getAttrTypes(aspectInfo)).containsExactly(AttributeType.NAME,AttributeType.LABEL,AttributeType.STRING_DICT).inOrder();\n  assertThat(aspectInfo.getAspectAttributeList()).containsExactly(\"deps\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 696,
        "startColumnNumber" : 4,
        "endLineNumber" : 696,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertThat(aspectInfo.getAspectName()).isEqualTo(\"my_aspect\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 696,
    "startColumnNumber" : 53,
    "endLineNumber" : 696,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}