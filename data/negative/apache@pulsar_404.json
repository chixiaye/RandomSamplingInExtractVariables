{
  "id" : 404,
  "expression" : "\"This is the second line\\n\"",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-io/kafka-connect-adaptor/src/test/java/org/apache/pulsar/io/kafka/connect/KafkaConnectSourceTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"This is the second line\\n\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 115,
      "startColumnNumber" : 23,
      "endLineNumber" : 115,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 115,
        "startColumnNumber" : 15,
        "endLineNumber" : 115,
        "endColumnNumber" : 50
      },
      "nodeContext" : "line2=\"This is the second line\\n\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 51
      },
      "nodeContext" : "String line2=\"This is the second line\\n\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1767,
        "startLineNumber" : 103,
        "startColumnNumber" : 51,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  kafkaConnectSource=new KafkaConnectSource();\n  kafkaConnectSource.open(config,context);\n  OutputStream os=Files.newOutputStream(tempFile.toPath());\n  String line1=\"This is the first line\\n\";\n  os.write(line1.getBytes());\n  os.flush();\n  log.info(\"write 2 lines.\");\n  String line2=\"This is the second line\\n\";\n  os.write(line2.getBytes());\n  os.flush();\n  log.info(\"finish write, will read 2 lines\");\n  Record<KeyValue<byte[],byte[]>> record=kafkaConnectSource.read();\n  String readBack1=new String(record.getValue().getValue());\n  assertTrue(line1.contains(readBack1));\n  assertNull(record.getValue().getKey());\n  log.info(\"read line1: {}\",readBack1);\n  record.ack();\n  record=kafkaConnectSource.read();\n  String readBack2=new String(record.getValue().getValue());\n  assertTrue(line2.contains(readBack2));\n  assertNull(record.getValue().getKey());\n  assertTrue(record.getPartitionId().isPresent());\n  assertFalse(record.getPartitionIndex().isPresent());\n  log.info(\"read line2: {}\",readBack2);\n  record.ack();\n  String line3=\"This is the 3rd line\\n\";\n  os.write(line3.getBytes());\n  os.flush();\n  record=kafkaConnectSource.read();\n  String readBack3=new String(record.getValue().getValue());\n  assertTrue(line3.contains(readBack3));\n  assertNull(record.getValue().getKey());\n  log.info(\"read line3: {}\",readBack3);\n  record.ack();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1824,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testOpenAndRead() throws Exception {\n  kafkaConnectSource=new KafkaConnectSource();\n  kafkaConnectSource.open(config,context);\n  OutputStream os=Files.newOutputStream(tempFile.toPath());\n  String line1=\"This is the first line\\n\";\n  os.write(line1.getBytes());\n  os.flush();\n  log.info(\"write 2 lines.\");\n  String line2=\"This is the second line\\n\";\n  os.write(line2.getBytes());\n  os.flush();\n  log.info(\"finish write, will read 2 lines\");\n  Record<KeyValue<byte[],byte[]>> record=kafkaConnectSource.read();\n  String readBack1=new String(record.getValue().getValue());\n  assertTrue(line1.contains(readBack1));\n  assertNull(record.getValue().getKey());\n  log.info(\"read line1: {}\",readBack1);\n  record.ack();\n  record=kafkaConnectSource.read();\n  String readBack2=new String(record.getValue().getValue());\n  assertTrue(line2.contains(readBack2));\n  assertNull(record.getValue().getKey());\n  assertTrue(record.getPartitionId().isPresent());\n  assertFalse(record.getPartitionIndex().isPresent());\n  log.info(\"read line2: {}\",readBack2);\n  record.ack();\n  String line3=\"This is the 3rd line\\n\";\n  os.write(line3.getBytes());\n  os.flush();\n  record=kafkaConnectSource.read();\n  String readBack3=new String(record.getValue().getValue());\n  assertTrue(line3.contains(readBack3));\n  assertNull(record.getValue().getKey());\n  log.info(\"read line3: {}\",readBack3);\n  record.ack();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 51
      },
      "nodeContext" : "String line2=\"This is the second line\\n\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 6,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 115,
    "startColumnNumber" : 23,
    "endLineNumber" : 115,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}