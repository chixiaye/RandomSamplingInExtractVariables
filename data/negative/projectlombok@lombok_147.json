{
  "id" : 147,
  "expression" : "new GetterMethod(method.name,method.restype)",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/handlers/JavacHandlerUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new GetterMethod(method.name,method.restype)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 45,
      "startLineNumber" : 523,
      "startColumnNumber" : 11,
      "endLineNumber" : 523,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 9,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 523,
        "startColumnNumber" : 4,
        "endLineNumber" : 523,
        "endColumnNumber" : 57
      },
      "nodeContext" : "return new GetterMethod(method.name,method.restype);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 502,
        "startLineNumber" : 515,
        "startColumnNumber" : 53,
        "endLineNumber" : 524,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (potentialGetter.getKind() != Kind.METHOD)   continue;\n  JCMethodDecl method=(JCMethodDecl)potentialGetter.get();\n  if (!method.name.toString().equalsIgnoreCase(potentialGetterName))   continue;\n  if ((method.mods.flags & Flags.STATIC) != 0)   continue;\n  if (method.params != null && method.params.size() > 0)   continue;\n  return new GetterMethod(method.name,method.restype);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 552,
        "startLineNumber" : 515,
        "startColumnNumber" : 3,
        "endLineNumber" : 524,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (JavacNode potentialGetter : typeNode.down()) {\n  if (potentialGetter.getKind() != Kind.METHOD)   continue;\n  JCMethodDecl method=(JCMethodDecl)potentialGetter.get();\n  if (!method.name.toString().equalsIgnoreCase(potentialGetterName))   continue;\n  if ((method.mods.flags & Flags.STATIC) != 0)   continue;\n  if (method.params != null && method.params.size() > 0)   continue;\n  return new GetterMethod(method.name,method.restype);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 561,
        "startLineNumber" : 514,
        "startColumnNumber" : 61,
        "endLineNumber" : 525,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (  JavacNode potentialGetter : typeNode.down()) {\n    if (potentialGetter.getKind() != Kind.METHOD)     continue;\n    JCMethodDecl method=(JCMethodDecl)potentialGetter.get();\n    if (!method.name.toString().equalsIgnoreCase(potentialGetterName))     continue;\n    if ((method.mods.flags & Flags.STATIC) != 0)     continue;\n    if (method.params != null && method.params.size() > 0)     continue;\n    return new GetterMethod(method.name,method.restype);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 620,
        "startLineNumber" : 514,
        "startColumnNumber" : 2,
        "endLineNumber" : 525,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (String potentialGetterName : toAllGetterNames(field)) {\n  for (  JavacNode potentialGetter : typeNode.down()) {\n    if (potentialGetter.getKind() != Kind.METHOD)     continue;\n    JCMethodDecl method=(JCMethodDecl)potentialGetter.get();\n    if (!method.name.toString().equalsIgnoreCase(potentialGetterName))     continue;\n    if ((method.mods.flags & Flags.STATIC) != 0)     continue;\n    if (method.params != null && method.params.size() > 0)     continue;\n    return new GetterMethod(method.name,method.restype);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 88,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2135,
        "startLineNumber" : 511,
        "startColumnNumber" : 57,
        "endLineNumber" : 562,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  JCVariableDecl decl=(JCVariableDecl)field.get();\n  JavacNode typeNode=field.up();\n  for (  String potentialGetterName : toAllGetterNames(field)) {\n    for (    JavacNode potentialGetter : typeNode.down()) {\n      if (potentialGetter.getKind() != Kind.METHOD)       continue;\n      JCMethodDecl method=(JCMethodDecl)potentialGetter.get();\n      if (!method.name.toString().equalsIgnoreCase(potentialGetterName))       continue;\n      if ((method.mods.flags & Flags.STATIC) != 0)       continue;\n      if (method.params != null && method.params.size() > 0)       continue;\n      return new GetterMethod(method.name,method.restype);\n    }\n  }\n  boolean hasGetterAnnotation=false;\n  for (  JavacNode child : field.down()) {\n    if (child.getKind() == Kind.ANNOTATION && annotationTypeMatches(Getter.class,child)) {\n      AnnotationValues<Getter> ann=createAnnotation(Getter.class,child);\n      if (ann.getInstance().value() == AccessLevel.NONE)       return null;\n      hasGetterAnnotation=true;\n    }\n  }\n  if (!hasGetterAnnotation && new HandleGetter().fieldQualifiesForGetterGeneration(field)) {\n    JavacNode containingType=field.up();\n    if (containingType != null)     for (    JavacNode child : containingType.down()) {\n      if (child.getKind() == Kind.ANNOTATION && annotationTypeMatches(Data.class,child))       hasGetterAnnotation=true;\n      if (child.getKind() == Kind.ANNOTATION && annotationTypeMatches(Getter.class,child)) {\n        AnnotationValues<Getter> ann=createAnnotation(Getter.class,child);\n        if (ann.getInstance().value() == AccessLevel.NONE)         return null;\n        hasGetterAnnotation=true;\n      }\n    }\n  }\n  if (hasGetterAnnotation) {\n    String getterName=toGetterName(field);\n    if (getterName == null)     return null;\n    return new GetterMethod(field.toName(getterName),decl.vartype);\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 295,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2191,
        "startLineNumber" : 511,
        "startColumnNumber" : 1,
        "endLineNumber" : 562,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static GetterMethod findGetter(JavacNode field){\n  JCVariableDecl decl=(JCVariableDecl)field.get();\n  JavacNode typeNode=field.up();\n  for (  String potentialGetterName : toAllGetterNames(field)) {\n    for (    JavacNode potentialGetter : typeNode.down()) {\n      if (potentialGetter.getKind() != Kind.METHOD)       continue;\n      JCMethodDecl method=(JCMethodDecl)potentialGetter.get();\n      if (!method.name.toString().equalsIgnoreCase(potentialGetterName))       continue;\n      if ((method.mods.flags & Flags.STATIC) != 0)       continue;\n      if (method.params != null && method.params.size() > 0)       continue;\n      return new GetterMethod(method.name,method.restype);\n    }\n  }\n  boolean hasGetterAnnotation=false;\n  for (  JavacNode child : field.down()) {\n    if (child.getKind() == Kind.ANNOTATION && annotationTypeMatches(Getter.class,child)) {\n      AnnotationValues<Getter> ann=createAnnotation(Getter.class,child);\n      if (ann.getInstance().value() == AccessLevel.NONE)       return null;\n      hasGetterAnnotation=true;\n    }\n  }\n  if (!hasGetterAnnotation && new HandleGetter().fieldQualifiesForGetterGeneration(field)) {\n    JavacNode containingType=field.up();\n    if (containingType != null)     for (    JavacNode child : containingType.down()) {\n      if (child.getKind() == Kind.ANNOTATION && annotationTypeMatches(Data.class,child))       hasGetterAnnotation=true;\n      if (child.getKind() == Kind.ANNOTATION && annotationTypeMatches(Getter.class,child)) {\n        AnnotationValues<Getter> ann=createAnnotation(Getter.class,child);\n        if (ann.getInstance().value() == AccessLevel.NONE)         return null;\n        hasGetterAnnotation=true;\n      }\n    }\n  }\n  if (hasGetterAnnotation) {\n    String getterName=toGetterName(field);\n    if (getterName == null)     return null;\n    return new GetterMethod(field.toName(getterName),decl.vartype);\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 305,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 523,
        "startColumnNumber" : 4,
        "endLineNumber" : 523,
        "endColumnNumber" : 57
      },
      "nodeContext" : "return new GetterMethod(method.name,method.restype);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "lombok.javac.handlers.JavacHandlerUtil.GetterMethod"
  } ],
  "positionList" : [ {
    "charLength" : 45,
    "startLineNumber" : 523,
    "startColumnNumber" : 11,
    "endLineNumber" : 523,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}