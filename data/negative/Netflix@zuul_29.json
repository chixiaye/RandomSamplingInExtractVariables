{
  "id" : 29,
  "expression" : "responseBodySize.intValue()",
  "projectName" : "Netflix@zuul",
  "commitID" : "f8ef3551d8dd57a512336315ec51bb6c0444c517",
  "filePath" : "/zuul-core/src/main/java/com/netflix/netty/common/accesslog/AccessLogPublisher.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "responseBodySize.intValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 83,
      "startColumnNumber" : 66,
      "endLineNumber" : 83,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 83,
        "startColumnNumber" : 66,
        "endLineNumber" : 83,
        "endColumnNumber" : 97
      },
      "nodeContext" : "responseBodySize.intValue() > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 83,
        "startColumnNumber" : 38,
        "endLineNumber" : 83,
        "endColumnNumber" : 97
      },
      "nodeContext" : "responseBodySize != null && responseBodySize.intValue() > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 83,
        "startColumnNumber" : 37,
        "endLineNumber" : 83,
        "endColumnNumber" : 98
      },
      "nodeContext" : "(responseBodySize != null && responseBodySize.intValue() > 0)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 83,
        "startColumnNumber" : 37,
        "endLineNumber" : 83,
        "endColumnNumber" : 134
      },
      "nodeContext" : "(responseBodySize != null && responseBodySize.intValue() > 0) ? responseBodySize.toString() : \"-\"",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 83,
        "startColumnNumber" : 15,
        "endLineNumber" : 83,
        "endColumnNumber" : 134
      },
      "nodeContext" : "responseBodySizeStr=(responseBodySize != null && responseBodySize.intValue() > 0) ? responseBodySize.toString() : \"-\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 135
      },
      "nodeContext" : "String responseBodySizeStr=(responseBodySize != null && responseBodySize.intValue() > 0) ? responseBodySize.toString() : \"-\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2428,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 112,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringBuilder sb=new StringBuilder();\n  String dateTimeStr=dateTime != null ? dateTime.format(DATE_TIME_FORMATTER) : \"-----T-:-:-\";\n  String remoteIpStr=(remoteIp != null && !remoteIp.isEmpty()) ? remoteIp : \"-\";\n  String port=localPort != null ? localPort.toString() : \"-\";\n  String method=request != null ? request.method().toString().toUpperCase() : \"-\";\n  String uri=request != null ? request.uri() : \"-\";\n  if (uri.length() > URI_LENGTH_LIMIT.get()) {\n    uri=uri.substring(0,URI_LENGTH_LIMIT.get());\n  }\n  String status=response != null ? String.valueOf(response.status().code()) : \"-\";\n  String requestId=null;\n  try {\n    requestId=requestIdProvider.apply(channel,request);\n  }\n catch (  Exception ex) {\n    LOG.error(\"requestIdProvider failed in AccessLogPublisher method={}, uri={}, status={}\",method,uri,status);\n  }\n  requestId=requestId != null ? requestId : \"-\";\n  String durationStr=(durationNs != null && durationNs.longValue() > 0) ? String.valueOf(durationNs / 1000) : \"-\";\n  String requestBodySizeStr=(requestBodySize != null && requestBodySize.intValue() > 0) ? requestBodySize.toString() : \"-\";\n  String responseBodySizeStr=(responseBodySize != null && responseBodySize.intValue() > 0) ? responseBodySize.toString() : \"-\";\n  sb.append(dateTimeStr).append(DELIM).append(remoteIpStr).append(DELIM).append(port).append(DELIM).append(method).append(DELIM).append(uri).append(DELIM).append(status).append(DELIM).append(durationStr).append(DELIM).append(responseBodySizeStr).append(DELIM).append(requestId).append(DELIM).append(requestBodySizeStr);\n  if (request != null && request.headers() != null) {\n    includeMatchingHeaders(sb,LOG_REQ_HEADERS,request.headers());\n  }\n  if (response != null && response.headers() != null) {\n    includeMatchingHeaders(sb,LOG_RESP_HEADERS,response.headers());\n  }\n  final String access=sb.toString();\n  logger.info(access);\n  LOG.debug(access);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 338,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2657,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 112,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void log(Channel channel,HttpRequest request,HttpResponse response,LocalDateTime dateTime,Integer localPort,String remoteIp,Long durationNs,Integer requestBodySize,Integer responseBodySize){\n  StringBuilder sb=new StringBuilder();\n  String dateTimeStr=dateTime != null ? dateTime.format(DATE_TIME_FORMATTER) : \"-----T-:-:-\";\n  String remoteIpStr=(remoteIp != null && !remoteIp.isEmpty()) ? remoteIp : \"-\";\n  String port=localPort != null ? localPort.toString() : \"-\";\n  String method=request != null ? request.method().toString().toUpperCase() : \"-\";\n  String uri=request != null ? request.uri() : \"-\";\n  if (uri.length() > URI_LENGTH_LIMIT.get()) {\n    uri=uri.substring(0,URI_LENGTH_LIMIT.get());\n  }\n  String status=response != null ? String.valueOf(response.status().code()) : \"-\";\n  String requestId=null;\n  try {\n    requestId=requestIdProvider.apply(channel,request);\n  }\n catch (  Exception ex) {\n    LOG.error(\"requestIdProvider failed in AccessLogPublisher method={}, uri={}, status={}\",method,uri,status);\n  }\n  requestId=requestId != null ? requestId : \"-\";\n  String durationStr=(durationNs != null && durationNs.longValue() > 0) ? String.valueOf(durationNs / 1000) : \"-\";\n  String requestBodySizeStr=(requestBodySize != null && requestBodySize.intValue() > 0) ? requestBodySize.toString() : \"-\";\n  String responseBodySizeStr=(responseBodySize != null && responseBodySize.intValue() > 0) ? responseBodySize.toString() : \"-\";\n  sb.append(dateTimeStr).append(DELIM).append(remoteIpStr).append(DELIM).append(port).append(DELIM).append(method).append(DELIM).append(uri).append(DELIM).append(status).append(DELIM).append(durationStr).append(DELIM).append(responseBodySizeStr).append(DELIM).append(requestId).append(DELIM).append(requestBodySizeStr);\n  if (request != null && request.headers() != null) {\n    includeMatchingHeaders(sb,LOG_REQ_HEADERS,request.headers());\n  }\n  if (response != null && response.headers() != null) {\n    includeMatchingHeaders(sb,LOG_RESP_HEADERS,response.headers());\n  }\n  final String access=sb.toString();\n  logger.info(access);\n  LOG.debug(access);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 378,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 135
      },
      "nodeContext" : "String responseBodySizeStr=(responseBodySize != null && responseBodySize.intValue() > 0) ? responseBodySize.toString() : \"-\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 83,
    "startColumnNumber" : 66,
    "endLineNumber" : 83,
    "endColumnNumber" : 93
  } ],
  "layoutRelationDataList" : [ ]
}