{
  "id" : 218,
  "expression" : "ByteArrayCodec",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson-spring-data/redisson-spring-data-23/src/main/java/org/redisson/spring/data/connection/RedissonReactiveZSetCommands.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ByteArrayCodec",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 176,
      "startColumnNumber" : 54,
      "endLineNumber" : 176,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 176,
        "startColumnNumber" : 54,
        "endLineNumber" : 176,
        "endColumnNumber" : 77
      },
      "nodeContext" : "ByteArrayCodec.INSTANCE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 176,
        "startColumnNumber" : 41,
        "endLineNumber" : 177,
        "endColumnNumber" : 65
      },
      "nodeContext" : "read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 176,
        "startColumnNumber" : 37,
        "endLineNumber" : 177,
        "endColumnNumber" : 65
      },
      "nodeContext" : "m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 176,
        "startColumnNumber" : 20,
        "endLineNumber" : 177,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 249,
        "startLineNumber" : 175,
        "startColumnNumber" : 44,
        "endLineNumber" : 179,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n  flux=m.flatMapMany(e -> Flux.fromIterable(e));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 522,
        "startLineNumber" : 175,
        "startColumnNumber" : 16,
        "endLineNumber" : 182,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (command.isWithScores()) {\n  Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n  flux=m.flatMapMany(e -> Flux.fromIterable(e));\n}\n else {\n  Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n  flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 554,
        "startLineNumber" : 174,
        "startColumnNumber" : 57,
        "endLineNumber" : 183,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (command.isWithScores()) {\n    Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n    flux=m.flatMapMany(e -> Flux.fromIterable(e));\n  }\n else {\n    Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n    flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1165,
        "startLineNumber" : 174,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (command.getDirection() == Direction.ASC) {\n  if (command.isWithScores()) {\n    Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n    flux=m.flatMapMany(e -> Flux.fromIterable(e));\n  }\n else {\n    Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n    flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n  }\n}\n else {\n  if (command.isWithScores()) {\n    Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n    flux=m.flatMapMany(e -> Flux.fromIterable(e));\n  }\n else {\n    Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n    flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 186,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1667,
        "startLineNumber" : 163,
        "startColumnNumber" : 44,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getRange(),\"Range must not be null!\");\n  byte[] keyBuf=toByteArray(command.getKey());\n  long start=command.getRange().getLowerBound().getValue().orElse(0L);\n  long end=command.getRange().getUpperBound().getValue().get();\n  Flux<Tuple> flux;\n  if (command.getDirection() == Direction.ASC) {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n else {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n  return Mono.just(new CommandResponse<>(command,flux));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 259,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1678,
        "startLineNumber" : 163,
        "startColumnNumber" : 33,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "command -> {\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getRange(),\"Range must not be null!\");\n  byte[] keyBuf=toByteArray(command.getKey());\n  long start=command.getRange().getLowerBound().getValue().orElse(0L);\n  long end=command.getRange().getUpperBound().getValue().get();\n  Flux<Tuple> flux;\n  if (command.getDirection() == Direction.ASC) {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n else {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n  return Mono.just(new CommandResponse<>(command,flux));\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 262,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 176,
        "startColumnNumber" : 54,
        "endLineNumber" : 176,
        "endColumnNumber" : 77
      },
      "nodeContext" : "ByteArrayCodec.INSTANCE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "ByteArrayCodec",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 180,
      "startColumnNumber" : 55,
      "endLineNumber" : 180,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 180,
        "startColumnNumber" : 55,
        "endLineNumber" : 180,
        "endColumnNumber" : 78
      },
      "nodeContext" : "ByteArrayCodec.INSTANCE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 180,
        "startColumnNumber" : 42,
        "endLineNumber" : 180,
        "endColumnNumber" : 107
      },
      "nodeContext" : "read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 180,
        "startColumnNumber" : 38,
        "endLineNumber" : 180,
        "endColumnNumber" : 107
      },
      "nodeContext" : "m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 180,
        "startColumnNumber" : 20,
        "endLineNumber" : 180,
        "endColumnNumber" : 108
      },
      "nodeContext" : "Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 182,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n  flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 522,
        "startLineNumber" : 175,
        "startColumnNumber" : 16,
        "endLineNumber" : 182,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (command.isWithScores()) {\n  Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n  flux=m.flatMapMany(e -> Flux.fromIterable(e));\n}\n else {\n  Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n  flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 554,
        "startLineNumber" : 174,
        "startColumnNumber" : 57,
        "endLineNumber" : 183,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (command.isWithScores()) {\n    Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n    flux=m.flatMapMany(e -> Flux.fromIterable(e));\n  }\n else {\n    Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n    flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1165,
        "startLineNumber" : 174,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (command.getDirection() == Direction.ASC) {\n  if (command.isWithScores()) {\n    Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n    flux=m.flatMapMany(e -> Flux.fromIterable(e));\n  }\n else {\n    Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n    flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n  }\n}\n else {\n  if (command.isWithScores()) {\n    Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n    flux=m.flatMapMany(e -> Flux.fromIterable(e));\n  }\n else {\n    Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n    flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 186,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1667,
        "startLineNumber" : 163,
        "startColumnNumber" : 44,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getRange(),\"Range must not be null!\");\n  byte[] keyBuf=toByteArray(command.getKey());\n  long start=command.getRange().getLowerBound().getValue().orElse(0L);\n  long end=command.getRange().getUpperBound().getValue().get();\n  Flux<Tuple> flux;\n  if (command.getDirection() == Direction.ASC) {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n else {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n  return Mono.just(new CommandResponse<>(command,flux));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 259,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1678,
        "startLineNumber" : 163,
        "startColumnNumber" : 33,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "command -> {\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getRange(),\"Range must not be null!\");\n  byte[] keyBuf=toByteArray(command.getKey());\n  long start=command.getRange().getLowerBound().getValue().orElse(0L);\n  long end=command.getRange().getUpperBound().getValue().get();\n  Flux<Tuple> flux;\n  if (command.getDirection() == Direction.ASC) {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n else {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n  return Mono.just(new CommandResponse<>(command,flux));\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 262,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 180,
        "startColumnNumber" : 20,
        "endLineNumber" : 180,
        "endColumnNumber" : 108
      },
      "nodeContext" : "Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "ByteArrayCodec",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 185,
      "startColumnNumber" : 54,
      "endLineNumber" : 185,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 185,
        "startColumnNumber" : 54,
        "endLineNumber" : 185,
        "endColumnNumber" : 77
      },
      "nodeContext" : "ByteArrayCodec.INSTANCE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 185,
        "startColumnNumber" : 41,
        "endLineNumber" : 186,
        "endColumnNumber" : 65
      },
      "nodeContext" : "read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 185,
        "startColumnNumber" : 37,
        "endLineNumber" : 186,
        "endColumnNumber" : 65
      },
      "nodeContext" : "m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 185,
        "startColumnNumber" : 20,
        "endLineNumber" : 186,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 184,
        "startColumnNumber" : 44,
        "endLineNumber" : 188,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n  flux=m.flatMapMany(e -> Flux.fromIterable(e));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 528,
        "startLineNumber" : 184,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (command.isWithScores()) {\n  Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n  flux=m.flatMapMany(e -> Flux.fromIterable(e));\n}\n else {\n  Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n  flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 183,
        "startColumnNumber" : 19,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (command.isWithScores()) {\n    Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n    flux=m.flatMapMany(e -> Flux.fromIterable(e));\n  }\n else {\n    Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n    flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1165,
        "startLineNumber" : 174,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (command.getDirection() == Direction.ASC) {\n  if (command.isWithScores()) {\n    Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n    flux=m.flatMapMany(e -> Flux.fromIterable(e));\n  }\n else {\n    Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n    flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n  }\n}\n else {\n  if (command.isWithScores()) {\n    Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n    flux=m.flatMapMany(e -> Flux.fromIterable(e));\n  }\n else {\n    Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n    flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 186,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1667,
        "startLineNumber" : 163,
        "startColumnNumber" : 44,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getRange(),\"Range must not be null!\");\n  byte[] keyBuf=toByteArray(command.getKey());\n  long start=command.getRange().getLowerBound().getValue().orElse(0L);\n  long end=command.getRange().getUpperBound().getValue().get();\n  Flux<Tuple> flux;\n  if (command.getDirection() == Direction.ASC) {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n else {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n  return Mono.just(new CommandResponse<>(command,flux));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 259,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1678,
        "startLineNumber" : 163,
        "startColumnNumber" : 33,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "command -> {\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getRange(),\"Range must not be null!\");\n  byte[] keyBuf=toByteArray(command.getKey());\n  long start=command.getRange().getLowerBound().getValue().orElse(0L);\n  long end=command.getRange().getUpperBound().getValue().get();\n  Flux<Tuple> flux;\n  if (command.getDirection() == Direction.ASC) {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n else {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n  return Mono.just(new CommandResponse<>(command,flux));\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 262,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 185,
        "startColumnNumber" : 54,
        "endLineNumber" : 185,
        "endColumnNumber" : 77
      },
      "nodeContext" : "ByteArrayCodec.INSTANCE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "ByteArrayCodec",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 189,
      "startColumnNumber" : 55,
      "endLineNumber" : 189,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 189,
        "startColumnNumber" : 55,
        "endLineNumber" : 189,
        "endColumnNumber" : 78
      },
      "nodeContext" : "ByteArrayCodec.INSTANCE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 189,
        "startColumnNumber" : 42,
        "endLineNumber" : 189,
        "endColumnNumber" : 110
      },
      "nodeContext" : "read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 189,
        "startColumnNumber" : 38,
        "endLineNumber" : 189,
        "endColumnNumber" : 110
      },
      "nodeContext" : "m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 189,
        "startColumnNumber" : 20,
        "endLineNumber" : 189,
        "endColumnNumber" : 111
      },
      "nodeContext" : "Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 188,
        "startColumnNumber" : 23,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n  flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 528,
        "startLineNumber" : 184,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (command.isWithScores()) {\n  Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n  flux=m.flatMapMany(e -> Flux.fromIterable(e));\n}\n else {\n  Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n  flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 183,
        "startColumnNumber" : 19,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (command.isWithScores()) {\n    Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n    flux=m.flatMapMany(e -> Flux.fromIterable(e));\n  }\n else {\n    Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n    flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1165,
        "startLineNumber" : 174,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (command.getDirection() == Direction.ASC) {\n  if (command.isWithScores()) {\n    Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n    flux=m.flatMapMany(e -> Flux.fromIterable(e));\n  }\n else {\n    Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n    flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n  }\n}\n else {\n  if (command.isWithScores()) {\n    Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n    flux=m.flatMapMany(e -> Flux.fromIterable(e));\n  }\n else {\n    Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n    flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 186,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1667,
        "startLineNumber" : 163,
        "startColumnNumber" : 44,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getRange(),\"Range must not be null!\");\n  byte[] keyBuf=toByteArray(command.getKey());\n  long start=command.getRange().getLowerBound().getValue().orElse(0L);\n  long end=command.getRange().getUpperBound().getValue().get();\n  Flux<Tuple> flux;\n  if (command.getDirection() == Direction.ASC) {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n else {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n  return Mono.just(new CommandResponse<>(command,flux));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 259,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1678,
        "startLineNumber" : 163,
        "startColumnNumber" : 33,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "command -> {\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getRange(),\"Range must not be null!\");\n  byte[] keyBuf=toByteArray(command.getKey());\n  long start=command.getRange().getLowerBound().getValue().orElse(0L);\n  long end=command.getRange().getUpperBound().getValue().get();\n  Flux<Tuple> flux;\n  if (command.getDirection() == Direction.ASC) {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n else {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n  return Mono.just(new CommandResponse<>(command,flux));\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 262,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 189,
        "startColumnNumber" : 20,
        "endLineNumber" : 189,
        "endColumnNumber" : 111
      },
      "nodeContext" : "Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 176,
    "startColumnNumber" : 54,
    "endLineNumber" : 176,
    "endColumnNumber" : 68
  }, {
    "charLength" : 14,
    "startLineNumber" : 180,
    "startColumnNumber" : 55,
    "endLineNumber" : 180,
    "endColumnNumber" : 69
  }, {
    "charLength" : 14,
    "startLineNumber" : 185,
    "startColumnNumber" : 54,
    "endLineNumber" : 185,
    "endColumnNumber" : 68
  }, {
    "charLength" : 14,
    "startLineNumber" : 189,
    "startColumnNumber" : 55,
    "endLineNumber" : 189,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  } ]
}