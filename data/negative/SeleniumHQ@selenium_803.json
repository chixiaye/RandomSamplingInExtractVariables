{
  "id" : 803,
  "expression" : "EventAttribute",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "e88d0e206d15eab761f73d35217fd3b1df322868",
  "filePath" : "java/server/src/org/openqa/selenium/grid/distributor/Distributor.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "EventAttribute",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 159,
      "startColumnNumber" : 8,
      "endLineNumber" : 159,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 159,
        "startColumnNumber" : 8,
        "endLineNumber" : 159,
        "endColumnNumber" : 53
      },
      "nodeContext" : "EventAttribute.setValue(getClass().getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 158,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 54
      },
      "nodeContext" : "attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 158,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 55
      },
      "nodeContext" : "attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3236,
        "startLineNumber" : 155,
        "startColumnNumber" : 68,
        "endLineNumber" : 228,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  Optional<Supplier<CreateSessionResponse>> selected;\n  CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n  Lock writeLock=this.lock.writeLock();\n  writeLock.lock();\n  try {\n    ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n    Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n    selected=selectedHost.map(host -> host.reserve(firstRequest));\n  }\n  finally {\n    writeLock.unlock();\n  }\n  CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n    span.setAttribute(\"error\",true);\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    return exception;\n  }\n).get();\n  sessions.add(sessionResponse.getSession());\n  SessionId sessionId=sessionResponse.getSession().getId();\n  Capabilities caps=sessionResponse.getSession().getCapabilities();\n  String sessionUri=sessionResponse.getSession().getUri().toString();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by the distributor\",attributeMap);\n  return sessionResponse;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 374,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4250,
        "startLineNumber" : 153,
        "startColumnNumber" : 4,
        "endLineNumber" : 250,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  Optional<Supplier<CreateSessionResponse>> selected;\n  CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n  Lock writeLock=this.lock.writeLock();\n  writeLock.lock();\n  try {\n    ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n    Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n    selected=selectedHost.map(host -> host.reserve(firstRequest));\n  }\n  finally {\n    writeLock.unlock();\n  }\n  CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n    span.setAttribute(\"error\",true);\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    return exception;\n  }\n).get();\n  sessions.add(sessionResponse.getSession());\n  SessionId sessionId=sessionResponse.getSession().getId();\n  Capabilities caps=sessionResponse.getSession().getCapabilities();\n  String sessionUri=sessionResponse.getSession().getUri().toString();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by the distributor\",attributeMap);\n  return sessionResponse;\n}\n catch (SessionNotCreatedException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.ABORTED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw e;\n}\ncatch (IOException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.UNKNOWN);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new SessionNotCreatedException(e.getMessage(),e);\n}\n finally {\n  span.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 511,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4408,
        "startLineNumber" : 149,
        "startColumnNumber" : 38,
        "endLineNumber" : 251,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Span span=newSpanAsChildOf(tracer,request,\"distributor.new_session\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    Optional<Supplier<CreateSessionResponse>> selected;\n    CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n    Lock writeLock=this.lock.writeLock();\n    writeLock.lock();\n    try {\n      ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n      Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n      selected=selectedHost.map(host -> host.reserve(firstRequest));\n    }\n  finally {\n      writeLock.unlock();\n    }\n    CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n      span.setAttribute(\"error\",true);\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      return exception;\n    }\n).get();\n    sessions.add(sessionResponse.getSession());\n    SessionId sessionId=sessionResponse.getSession().getId();\n    Capabilities caps=sessionResponse.getSession().getCapabilities();\n    String sessionUri=sessionResponse.getSession().getUri().toString();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by the distributor\",attributeMap);\n    return sessionResponse;\n  }\n catch (  SessionNotCreatedException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.ABORTED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw e;\n  }\ncatch (  IOException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new SessionNotCreatedException(e.getMessage(),e);\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 536,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4507,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 251,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public CreateSessionResponse newSession(HttpRequest request) throws SessionNotCreatedException {\n  Span span=newSpanAsChildOf(tracer,request,\"distributor.new_session\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    Optional<Supplier<CreateSessionResponse>> selected;\n    CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n    Lock writeLock=this.lock.writeLock();\n    writeLock.lock();\n    try {\n      ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n      Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n      selected=selectedHost.map(host -> host.reserve(firstRequest));\n    }\n  finally {\n      writeLock.unlock();\n    }\n    CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n      span.setAttribute(\"error\",true);\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      return exception;\n    }\n).get();\n    sessions.add(sessionResponse.getSession());\n    SessionId sessionId=sessionResponse.getSession().getId();\n    Capabilities caps=sessionResponse.getSession().getCapabilities();\n    String sessionUri=sessionResponse.getSession().getUri().toString();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by the distributor\",attributeMap);\n    return sessionResponse;\n  }\n catch (  SessionNotCreatedException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.ABORTED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw e;\n  }\ncatch (  IOException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new SessionNotCreatedException(e.getMessage(),e);\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 159,
        "startColumnNumber" : 8,
        "endLineNumber" : 159,
        "endColumnNumber" : 53
      },
      "nodeContext" : "EventAttribute.setValue(getClass().getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.EventAttribute"
  }, {
    "nodeContext" : "EventAttribute",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 162,
      "startColumnNumber" : 42,
      "endLineNumber" : 162,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 162,
        "startColumnNumber" : 42,
        "endLineNumber" : 162,
        "endColumnNumber" : 85
      },
      "nodeContext" : "EventAttribute.setValue(payload.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 162,
        "startColumnNumber" : 6,
        "endLineNumber" : 162,
        "endColumnNumber" : 86
      },
      "nodeContext" : "attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 162,
        "startColumnNumber" : 6,
        "endLineNumber" : 162,
        "endColumnNumber" : 87
      },
      "nodeContext" : "attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3236,
        "startLineNumber" : 155,
        "startColumnNumber" : 68,
        "endLineNumber" : 228,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  Optional<Supplier<CreateSessionResponse>> selected;\n  CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n  Lock writeLock=this.lock.writeLock();\n  writeLock.lock();\n  try {\n    ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n    Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n    selected=selectedHost.map(host -> host.reserve(firstRequest));\n  }\n  finally {\n    writeLock.unlock();\n  }\n  CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n    span.setAttribute(\"error\",true);\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    return exception;\n  }\n).get();\n  sessions.add(sessionResponse.getSession());\n  SessionId sessionId=sessionResponse.getSession().getId();\n  Capabilities caps=sessionResponse.getSession().getCapabilities();\n  String sessionUri=sessionResponse.getSession().getUri().toString();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by the distributor\",attributeMap);\n  return sessionResponse;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 374,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4250,
        "startLineNumber" : 153,
        "startColumnNumber" : 4,
        "endLineNumber" : 250,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  Optional<Supplier<CreateSessionResponse>> selected;\n  CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n  Lock writeLock=this.lock.writeLock();\n  writeLock.lock();\n  try {\n    ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n    Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n    selected=selectedHost.map(host -> host.reserve(firstRequest));\n  }\n  finally {\n    writeLock.unlock();\n  }\n  CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n    span.setAttribute(\"error\",true);\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    return exception;\n  }\n).get();\n  sessions.add(sessionResponse.getSession());\n  SessionId sessionId=sessionResponse.getSession().getId();\n  Capabilities caps=sessionResponse.getSession().getCapabilities();\n  String sessionUri=sessionResponse.getSession().getUri().toString();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by the distributor\",attributeMap);\n  return sessionResponse;\n}\n catch (SessionNotCreatedException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.ABORTED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw e;\n}\ncatch (IOException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.UNKNOWN);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new SessionNotCreatedException(e.getMessage(),e);\n}\n finally {\n  span.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 511,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4408,
        "startLineNumber" : 149,
        "startColumnNumber" : 38,
        "endLineNumber" : 251,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Span span=newSpanAsChildOf(tracer,request,\"distributor.new_session\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    Optional<Supplier<CreateSessionResponse>> selected;\n    CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n    Lock writeLock=this.lock.writeLock();\n    writeLock.lock();\n    try {\n      ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n      Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n      selected=selectedHost.map(host -> host.reserve(firstRequest));\n    }\n  finally {\n      writeLock.unlock();\n    }\n    CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n      span.setAttribute(\"error\",true);\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      return exception;\n    }\n).get();\n    sessions.add(sessionResponse.getSession());\n    SessionId sessionId=sessionResponse.getSession().getId();\n    Capabilities caps=sessionResponse.getSession().getCapabilities();\n    String sessionUri=sessionResponse.getSession().getUri().toString();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by the distributor\",attributeMap);\n    return sessionResponse;\n  }\n catch (  SessionNotCreatedException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.ABORTED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw e;\n  }\ncatch (  IOException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new SessionNotCreatedException(e.getMessage(),e);\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 536,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4507,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 251,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public CreateSessionResponse newSession(HttpRequest request) throws SessionNotCreatedException {\n  Span span=newSpanAsChildOf(tracer,request,\"distributor.new_session\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    Optional<Supplier<CreateSessionResponse>> selected;\n    CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n    Lock writeLock=this.lock.writeLock();\n    writeLock.lock();\n    try {\n      ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n      Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n      selected=selectedHost.map(host -> host.reserve(firstRequest));\n    }\n  finally {\n      writeLock.unlock();\n    }\n    CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n      span.setAttribute(\"error\",true);\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      return exception;\n    }\n).get();\n    sessions.add(sessionResponse.getSession());\n    SessionId sessionId=sessionResponse.getSession().getId();\n    Capabilities caps=sessionResponse.getSession().getCapabilities();\n    String sessionUri=sessionResponse.getSession().getUri().toString();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by the distributor\",attributeMap);\n    return sessionResponse;\n  }\n catch (  SessionNotCreatedException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.ABORTED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw e;\n  }\ncatch (  IOException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new SessionNotCreatedException(e.getMessage(),e);\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 162,
        "startColumnNumber" : 6,
        "endLineNumber" : 162,
        "endColumnNumber" : 87
      },
      "nodeContext" : "attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.EventAttribute"
  }, {
    "nodeContext" : "EventAttribute",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 168,
      "startColumnNumber" : 10,
      "endLineNumber" : 168,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 168,
        "startColumnNumber" : 10,
        "endLineNumber" : 169,
        "endColumnNumber" : 37
      },
      "nodeContext" : "EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 38
      },
      "nodeContext" : "attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 39
      },
      "nodeContext" : "attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 457,
        "startLineNumber" : 164,
        "startColumnNumber" : 31,
        "endLineNumber" : 172,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n  EXCEPTION.accept(attributeMap,exception);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 482,
        "startLineNumber" : 164,
        "startColumnNumber" : 6,
        "endLineNumber" : 172,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!iterator.hasNext()) {\n  SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n  EXCEPTION.accept(attributeMap,exception);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3236,
        "startLineNumber" : 155,
        "startColumnNumber" : 68,
        "endLineNumber" : 228,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  Optional<Supplier<CreateSessionResponse>> selected;\n  CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n  Lock writeLock=this.lock.writeLock();\n  writeLock.lock();\n  try {\n    ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n    Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n    selected=selectedHost.map(host -> host.reserve(firstRequest));\n  }\n  finally {\n    writeLock.unlock();\n  }\n  CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n    span.setAttribute(\"error\",true);\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    return exception;\n  }\n).get();\n  sessions.add(sessionResponse.getSession());\n  SessionId sessionId=sessionResponse.getSession().getId();\n  Capabilities caps=sessionResponse.getSession().getCapabilities();\n  String sessionUri=sessionResponse.getSession().getUri().toString();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by the distributor\",attributeMap);\n  return sessionResponse;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 374,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4250,
        "startLineNumber" : 153,
        "startColumnNumber" : 4,
        "endLineNumber" : 250,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  Optional<Supplier<CreateSessionResponse>> selected;\n  CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n  Lock writeLock=this.lock.writeLock();\n  writeLock.lock();\n  try {\n    ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n    Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n    selected=selectedHost.map(host -> host.reserve(firstRequest));\n  }\n  finally {\n    writeLock.unlock();\n  }\n  CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n    span.setAttribute(\"error\",true);\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    return exception;\n  }\n).get();\n  sessions.add(sessionResponse.getSession());\n  SessionId sessionId=sessionResponse.getSession().getId();\n  Capabilities caps=sessionResponse.getSession().getCapabilities();\n  String sessionUri=sessionResponse.getSession().getUri().toString();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by the distributor\",attributeMap);\n  return sessionResponse;\n}\n catch (SessionNotCreatedException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.ABORTED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw e;\n}\ncatch (IOException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.UNKNOWN);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new SessionNotCreatedException(e.getMessage(),e);\n}\n finally {\n  span.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 511,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4408,
        "startLineNumber" : 149,
        "startColumnNumber" : 38,
        "endLineNumber" : 251,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Span span=newSpanAsChildOf(tracer,request,\"distributor.new_session\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    Optional<Supplier<CreateSessionResponse>> selected;\n    CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n    Lock writeLock=this.lock.writeLock();\n    writeLock.lock();\n    try {\n      ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n      Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n      selected=selectedHost.map(host -> host.reserve(firstRequest));\n    }\n  finally {\n      writeLock.unlock();\n    }\n    CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n      span.setAttribute(\"error\",true);\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      return exception;\n    }\n).get();\n    sessions.add(sessionResponse.getSession());\n    SessionId sessionId=sessionResponse.getSession().getId();\n    Capabilities caps=sessionResponse.getSession().getCapabilities();\n    String sessionUri=sessionResponse.getSession().getUri().toString();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by the distributor\",attributeMap);\n    return sessionResponse;\n  }\n catch (  SessionNotCreatedException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.ABORTED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw e;\n  }\ncatch (  IOException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new SessionNotCreatedException(e.getMessage(),e);\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 536,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4507,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 251,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public CreateSessionResponse newSession(HttpRequest request) throws SessionNotCreatedException {\n  Span span=newSpanAsChildOf(tracer,request,\"distributor.new_session\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    Optional<Supplier<CreateSessionResponse>> selected;\n    CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n    Lock writeLock=this.lock.writeLock();\n    writeLock.lock();\n    try {\n      ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n      Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n      selected=selectedHost.map(host -> host.reserve(firstRequest));\n    }\n  finally {\n      writeLock.unlock();\n    }\n    CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n      span.setAttribute(\"error\",true);\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      return exception;\n    }\n).get();\n    sessions.add(sessionResponse.getSession());\n    SessionId sessionId=sessionResponse.getSession().getId();\n    Capabilities caps=sessionResponse.getSession().getCapabilities();\n    String sessionUri=sessionResponse.getSession().getUri().toString();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by the distributor\",attributeMap);\n    return sessionResponse;\n  }\n catch (  SessionNotCreatedException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.ABORTED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw e;\n  }\ncatch (  IOException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new SessionNotCreatedException(e.getMessage(),e);\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 168,
        "startColumnNumber" : 10,
        "endLineNumber" : 169,
        "endColumnNumber" : 37
      },
      "nodeContext" : "EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.EventAttribute"
  }, {
    "nodeContext" : "EventAttribute",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 224,
      "startColumnNumber" : 58,
      "endLineNumber" : 224,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 224,
        "startColumnNumber" : 58,
        "endLineNumber" : 224,
        "endColumnNumber" : 93
      },
      "nodeContext" : "EventAttribute.setValue(sessionUri)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 224,
        "startColumnNumber" : 6,
        "endLineNumber" : 224,
        "endColumnNumber" : 94
      },
      "nodeContext" : "attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 224,
        "startColumnNumber" : 6,
        "endLineNumber" : 224,
        "endColumnNumber" : 95
      },
      "nodeContext" : "attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3236,
        "startLineNumber" : 155,
        "startColumnNumber" : 68,
        "endLineNumber" : 228,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  Optional<Supplier<CreateSessionResponse>> selected;\n  CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n  Lock writeLock=this.lock.writeLock();\n  writeLock.lock();\n  try {\n    ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n    Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n    selected=selectedHost.map(host -> host.reserve(firstRequest));\n  }\n  finally {\n    writeLock.unlock();\n  }\n  CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n    span.setAttribute(\"error\",true);\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    return exception;\n  }\n).get();\n  sessions.add(sessionResponse.getSession());\n  SessionId sessionId=sessionResponse.getSession().getId();\n  Capabilities caps=sessionResponse.getSession().getCapabilities();\n  String sessionUri=sessionResponse.getSession().getUri().toString();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by the distributor\",attributeMap);\n  return sessionResponse;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 374,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4250,
        "startLineNumber" : 153,
        "startColumnNumber" : 4,
        "endLineNumber" : 250,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  Optional<Supplier<CreateSessionResponse>> selected;\n  CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n  Lock writeLock=this.lock.writeLock();\n  writeLock.lock();\n  try {\n    ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n    Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n    selected=selectedHost.map(host -> host.reserve(firstRequest));\n  }\n  finally {\n    writeLock.unlock();\n  }\n  CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n    span.setAttribute(\"error\",true);\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    return exception;\n  }\n).get();\n  sessions.add(sessionResponse.getSession());\n  SessionId sessionId=sessionResponse.getSession().getId();\n  Capabilities caps=sessionResponse.getSession().getCapabilities();\n  String sessionUri=sessionResponse.getSession().getUri().toString();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by the distributor\",attributeMap);\n  return sessionResponse;\n}\n catch (SessionNotCreatedException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.ABORTED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw e;\n}\ncatch (IOException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.UNKNOWN);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new SessionNotCreatedException(e.getMessage(),e);\n}\n finally {\n  span.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 511,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4408,
        "startLineNumber" : 149,
        "startColumnNumber" : 38,
        "endLineNumber" : 251,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Span span=newSpanAsChildOf(tracer,request,\"distributor.new_session\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    Optional<Supplier<CreateSessionResponse>> selected;\n    CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n    Lock writeLock=this.lock.writeLock();\n    writeLock.lock();\n    try {\n      ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n      Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n      selected=selectedHost.map(host -> host.reserve(firstRequest));\n    }\n  finally {\n      writeLock.unlock();\n    }\n    CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n      span.setAttribute(\"error\",true);\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      return exception;\n    }\n).get();\n    sessions.add(sessionResponse.getSession());\n    SessionId sessionId=sessionResponse.getSession().getId();\n    Capabilities caps=sessionResponse.getSession().getCapabilities();\n    String sessionUri=sessionResponse.getSession().getUri().toString();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by the distributor\",attributeMap);\n    return sessionResponse;\n  }\n catch (  SessionNotCreatedException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.ABORTED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw e;\n  }\ncatch (  IOException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new SessionNotCreatedException(e.getMessage(),e);\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 536,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4507,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 251,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public CreateSessionResponse newSession(HttpRequest request) throws SessionNotCreatedException {\n  Span span=newSpanAsChildOf(tracer,request,\"distributor.new_session\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    Optional<Supplier<CreateSessionResponse>> selected;\n    CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n    Lock writeLock=this.lock.writeLock();\n    writeLock.lock();\n    try {\n      ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n      Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n      selected=selectedHost.map(host -> host.reserve(firstRequest));\n    }\n  finally {\n      writeLock.unlock();\n    }\n    CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n      span.setAttribute(\"error\",true);\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      return exception;\n    }\n).get();\n    sessions.add(sessionResponse.getSession());\n    SessionId sessionId=sessionResponse.getSession().getId();\n    Capabilities caps=sessionResponse.getSession().getCapabilities();\n    String sessionUri=sessionResponse.getSession().getUri().toString();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by the distributor\",attributeMap);\n    return sessionResponse;\n  }\n catch (  SessionNotCreatedException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.ABORTED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw e;\n  }\ncatch (  IOException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new SessionNotCreatedException(e.getMessage(),e);\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 224,
        "startColumnNumber" : 6,
        "endLineNumber" : 224,
        "endColumnNumber" : 95
      },
      "nodeContext" : "attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.EventAttribute"
  }, {
    "nodeContext" : "EventAttribute",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 234,
      "startColumnNumber" : 8,
      "endLineNumber" : 234,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 234,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 78
      },
      "nodeContext" : "EventAttribute.setValue(\"Unable to create session: \" + e.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 233,
        "startColumnNumber" : 6,
        "endLineNumber" : 234,
        "endColumnNumber" : 79
      },
      "nodeContext" : "attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 233,
        "startColumnNumber" : 6,
        "endLineNumber" : 234,
        "endColumnNumber" : 80
      },
      "nodeContext" : "attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 228,
        "startColumnNumber" : 43,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.ABORTED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw e;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 228,
        "startColumnNumber" : 6,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "catch (SessionNotCreatedException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.ABORTED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw e;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 54,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4250,
        "startLineNumber" : 153,
        "startColumnNumber" : 4,
        "endLineNumber" : 250,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  Optional<Supplier<CreateSessionResponse>> selected;\n  CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n  Lock writeLock=this.lock.writeLock();\n  writeLock.lock();\n  try {\n    ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n    Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n    selected=selectedHost.map(host -> host.reserve(firstRequest));\n  }\n  finally {\n    writeLock.unlock();\n  }\n  CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n    span.setAttribute(\"error\",true);\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    return exception;\n  }\n).get();\n  sessions.add(sessionResponse.getSession());\n  SessionId sessionId=sessionResponse.getSession().getId();\n  Capabilities caps=sessionResponse.getSession().getCapabilities();\n  String sessionUri=sessionResponse.getSession().getUri().toString();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by the distributor\",attributeMap);\n  return sessionResponse;\n}\n catch (SessionNotCreatedException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.ABORTED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw e;\n}\ncatch (IOException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.UNKNOWN);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new SessionNotCreatedException(e.getMessage(),e);\n}\n finally {\n  span.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 511,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4408,
        "startLineNumber" : 149,
        "startColumnNumber" : 38,
        "endLineNumber" : 251,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Span span=newSpanAsChildOf(tracer,request,\"distributor.new_session\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    Optional<Supplier<CreateSessionResponse>> selected;\n    CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n    Lock writeLock=this.lock.writeLock();\n    writeLock.lock();\n    try {\n      ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n      Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n      selected=selectedHost.map(host -> host.reserve(firstRequest));\n    }\n  finally {\n      writeLock.unlock();\n    }\n    CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n      span.setAttribute(\"error\",true);\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      return exception;\n    }\n).get();\n    sessions.add(sessionResponse.getSession());\n    SessionId sessionId=sessionResponse.getSession().getId();\n    Capabilities caps=sessionResponse.getSession().getCapabilities();\n    String sessionUri=sessionResponse.getSession().getUri().toString();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by the distributor\",attributeMap);\n    return sessionResponse;\n  }\n catch (  SessionNotCreatedException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.ABORTED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw e;\n  }\ncatch (  IOException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new SessionNotCreatedException(e.getMessage(),e);\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 536,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4507,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 251,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public CreateSessionResponse newSession(HttpRequest request) throws SessionNotCreatedException {\n  Span span=newSpanAsChildOf(tracer,request,\"distributor.new_session\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    Optional<Supplier<CreateSessionResponse>> selected;\n    CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n    Lock writeLock=this.lock.writeLock();\n    writeLock.lock();\n    try {\n      ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n      Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n      selected=selectedHost.map(host -> host.reserve(firstRequest));\n    }\n  finally {\n      writeLock.unlock();\n    }\n    CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n      span.setAttribute(\"error\",true);\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      return exception;\n    }\n).get();\n    sessions.add(sessionResponse.getSession());\n    SessionId sessionId=sessionResponse.getSession().getId();\n    Capabilities caps=sessionResponse.getSession().getCapabilities();\n    String sessionUri=sessionResponse.getSession().getUri().toString();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by the distributor\",attributeMap);\n    return sessionResponse;\n  }\n catch (  SessionNotCreatedException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.ABORTED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw e;\n  }\ncatch (  IOException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new SessionNotCreatedException(e.getMessage(),e);\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 234,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 78
      },
      "nodeContext" : "EventAttribute.setValue(\"Unable to create session: \" + e.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.EventAttribute"
  }, {
    "nodeContext" : "EventAttribute",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 244,
      "startColumnNumber" : 8,
      "endLineNumber" : 244,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 244,
        "startColumnNumber" : 8,
        "endLineNumber" : 244,
        "endColumnNumber" : 110
      },
      "nodeContext" : "EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 243,
        "startColumnNumber" : 6,
        "endLineNumber" : 244,
        "endColumnNumber" : 111
      },
      "nodeContext" : "attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 243,
        "startColumnNumber" : 6,
        "endLineNumber" : 244,
        "endColumnNumber" : 112
      },
      "nodeContext" : "attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 238,
        "startColumnNumber" : 28,
        "endLineNumber" : 248,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.UNKNOWN);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new SessionNotCreatedException(e.getMessage(),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 464,
        "startLineNumber" : 238,
        "startColumnNumber" : 6,
        "endLineNumber" : 248,
        "endColumnNumber" : 5
      },
      "nodeContext" : "catch (IOException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.UNKNOWN);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new SessionNotCreatedException(e.getMessage(),e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 60,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4250,
        "startLineNumber" : 153,
        "startColumnNumber" : 4,
        "endLineNumber" : 250,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  Optional<Supplier<CreateSessionResponse>> selected;\n  CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n  Lock writeLock=this.lock.writeLock();\n  writeLock.lock();\n  try {\n    ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n    Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n    selected=selectedHost.map(host -> host.reserve(firstRequest));\n  }\n  finally {\n    writeLock.unlock();\n  }\n  CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n    span.setAttribute(\"error\",true);\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    return exception;\n  }\n).get();\n  sessions.add(sessionResponse.getSession());\n  SessionId sessionId=sessionResponse.getSession().getId();\n  Capabilities caps=sessionResponse.getSession().getCapabilities();\n  String sessionUri=sessionResponse.getSession().getUri().toString();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by the distributor\",attributeMap);\n  return sessionResponse;\n}\n catch (SessionNotCreatedException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.ABORTED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw e;\n}\ncatch (IOException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.UNKNOWN);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new SessionNotCreatedException(e.getMessage(),e);\n}\n finally {\n  span.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 511,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4408,
        "startLineNumber" : 149,
        "startColumnNumber" : 38,
        "endLineNumber" : 251,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Span span=newSpanAsChildOf(tracer,request,\"distributor.new_session\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    Optional<Supplier<CreateSessionResponse>> selected;\n    CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n    Lock writeLock=this.lock.writeLock();\n    writeLock.lock();\n    try {\n      ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n      Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n      selected=selectedHost.map(host -> host.reserve(firstRequest));\n    }\n  finally {\n      writeLock.unlock();\n    }\n    CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n      span.setAttribute(\"error\",true);\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      return exception;\n    }\n).get();\n    sessions.add(sessionResponse.getSession());\n    SessionId sessionId=sessionResponse.getSession().getId();\n    Capabilities caps=sessionResponse.getSession().getCapabilities();\n    String sessionUri=sessionResponse.getSession().getUri().toString();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by the distributor\",attributeMap);\n    return sessionResponse;\n  }\n catch (  SessionNotCreatedException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.ABORTED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw e;\n  }\ncatch (  IOException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new SessionNotCreatedException(e.getMessage(),e);\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 536,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4507,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 251,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public CreateSessionResponse newSession(HttpRequest request) throws SessionNotCreatedException {\n  Span span=newSpanAsChildOf(tracer,request,\"distributor.new_session\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session. No capabilities found: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    Optional<Supplier<CreateSessionResponse>> selected;\n    CreateSessionRequest firstRequest=new CreateSessionRequest(payload.getDownstreamDialects(),iterator.next(),ImmutableMap.of(\"span\",span));\n    Lock writeLock=this.lock.writeLock();\n    writeLock.lock();\n    try {\n      ImmutableSet<Host> availableHosts=getModel().stream().filter(host -> UP.equals(host.getHostStatus())).collect(toImmutableSet());\n      Optional<Host> selectedHost=hostSelector.selectHost(firstRequest.getCapabilities(),availableHosts);\n      selected=selectedHost.map(host -> host.reserve(firstRequest));\n    }\n  finally {\n      writeLock.unlock();\n    }\n    CreateSessionResponse sessionResponse=selected.orElseThrow(() -> {\n      span.setAttribute(\"error\",true);\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"Unable to find provider for session: \" + payload.stream().map(Capabilities::toString).collect(Collectors.joining(\", \")));\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to find provider for session: \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      return exception;\n    }\n).get();\n    sessions.add(sessionResponse.getSession());\n    SessionId sessionId=sessionResponse.getSession().getId();\n    Capabilities caps=sessionResponse.getSession().getCapabilities();\n    String sessionUri=sessionResponse.getSession().getUri().toString();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by the distributor\",attributeMap);\n    return sessionResponse;\n  }\n catch (  SessionNotCreatedException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.ABORTED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to create session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw e;\n  }\ncatch (  IOException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new SessionNotCreatedException(e.getMessage(),e);\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 244,
        "startColumnNumber" : 8,
        "endLineNumber" : 244,
        "endColumnNumber" : 110
      },
      "nodeContext" : "EventAttribute.setValue(\"Unknown error in LocalDistributor while creating session: \" + e.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.EventAttribute"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 159,
    "startColumnNumber" : 8,
    "endLineNumber" : 159,
    "endColumnNumber" : 22
  }, {
    "charLength" : 14,
    "startLineNumber" : 162,
    "startColumnNumber" : 42,
    "endLineNumber" : 162,
    "endColumnNumber" : 56
  }, {
    "charLength" : 14,
    "startLineNumber" : 168,
    "startColumnNumber" : 10,
    "endLineNumber" : 168,
    "endColumnNumber" : 24
  }, {
    "charLength" : 14,
    "startLineNumber" : 224,
    "startColumnNumber" : 58,
    "endLineNumber" : 224,
    "endColumnNumber" : 72
  }, {
    "charLength" : 14,
    "startLineNumber" : 234,
    "startColumnNumber" : 8,
    "endLineNumber" : 234,
    "endColumnNumber" : 22
  }, {
    "charLength" : 14,
    "startLineNumber" : 244,
    "startColumnNumber" : 8,
    "endLineNumber" : 244,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  } ]
}