{
  "id" : 207,
  "expression" : "length",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-json/src/main/java/cn/hutool/json/JSONStrFormater.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "length",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 33,
      "startColumnNumber" : 22,
      "endLineNumber" : 33,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 33,
        "startColumnNumber" : 18,
        "endLineNumber" : 33,
        "endColumnNumber" : 28
      },
      "nodeContext" : "i < length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1792,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < length; i++) {\n  key=json.charAt(i);\n  if ('\"' == key || '\\'' == key) {\n    if (null == wrapChar) {\n      wrapChar=key;\n    }\n else     if (isEscapeMode) {\n      isEscapeMode=false;\n    }\n else     if (wrapChar.equals(key)) {\n      wrapChar=null;\n    }\n    result.append(key);\n    continue;\n  }\n else   if ('\\\\' == key) {\n    if (null != wrapChar) {\n      isEscapeMode=!isEscapeMode;\n      result.append(key);\n      continue;\n    }\n else {\n      result.append(key);\n    }\n  }\n  if (null != wrapChar) {\n    result.append(key);\n    continue;\n  }\n  if ((key == '[') || (key == '{')) {\n    if ((i - 1 > 0) && (json.charAt(i - 1) == ':')) {\n      result.append(NEW_LINE);\n      result.append(indent(number));\n    }\n    result.append(key);\n    result.append(NEW_LINE);\n    number++;\n    result.append(indent(number));\n    continue;\n  }\n  if ((key == ']') || (key == '}')) {\n    result.append(NEW_LINE);\n    number--;\n    result.append(indent(number));\n    result.append(key);\n    if (((i + 1) < length) && (json.charAt(i + 1) != ',')) {\n      result.append(NEW_LINE);\n    }\n    continue;\n  }\n  if ((key == ',')) {\n    result.append(key);\n    result.append(NEW_LINE);\n    result.append(indent(number));\n    continue;\n  }\n  result.append(key);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 245,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2013,
        "startLineNumber" : 25,
        "startColumnNumber" : 42,
        "endLineNumber" : 112,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final StringBuilder result=new StringBuilder();\n  Character wrapChar=null;\n  boolean isEscapeMode=false;\n  int length=json.length();\n  int number=0;\n  char key;\n  for (int i=0; i < length; i++) {\n    key=json.charAt(i);\n    if ('\"' == key || '\\'' == key) {\n      if (null == wrapChar) {\n        wrapChar=key;\n      }\n else       if (isEscapeMode) {\n        isEscapeMode=false;\n      }\n else       if (wrapChar.equals(key)) {\n        wrapChar=null;\n      }\n      result.append(key);\n      continue;\n    }\n else     if ('\\\\' == key) {\n      if (null != wrapChar) {\n        isEscapeMode=!isEscapeMode;\n        result.append(key);\n        continue;\n      }\n else {\n        result.append(key);\n      }\n    }\n    if (null != wrapChar) {\n      result.append(key);\n      continue;\n    }\n    if ((key == '[') || (key == '{')) {\n      if ((i - 1 > 0) && (json.charAt(i - 1) == ':')) {\n        result.append(NEW_LINE);\n        result.append(indent(number));\n      }\n      result.append(key);\n      result.append(NEW_LINE);\n      number++;\n      result.append(indent(number));\n      continue;\n    }\n    if ((key == ']') || (key == '}')) {\n      result.append(NEW_LINE);\n      number--;\n      result.append(indent(number));\n      result.append(key);\n      if (((i + 1) < length) && (json.charAt(i + 1) != ',')) {\n        result.append(NEW_LINE);\n      }\n      continue;\n    }\n    if ((key == ',')) {\n      result.append(key);\n      result.append(NEW_LINE);\n      result.append(indent(number));\n      continue;\n    }\n    result.append(key);\n  }\n  return result.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 286,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2148,
        "startLineNumber" : 19,
        "startColumnNumber" : 1,
        "endLineNumber" : 112,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 返回格式化JSON字符串。\n * @param json 未格式化的JSON字符串。\n * @return 格式化的JSON字符串。\n */\npublic static String format(String json){\n  final StringBuilder result=new StringBuilder();\n  Character wrapChar=null;\n  boolean isEscapeMode=false;\n  int length=json.length();\n  int number=0;\n  char key;\n  for (int i=0; i < length; i++) {\n    key=json.charAt(i);\n    if ('\"' == key || '\\'' == key) {\n      if (null == wrapChar) {\n        wrapChar=key;\n      }\n else       if (isEscapeMode) {\n        isEscapeMode=false;\n      }\n else       if (wrapChar.equals(key)) {\n        wrapChar=null;\n      }\n      result.append(key);\n      continue;\n    }\n else     if ('\\\\' == key) {\n      if (null != wrapChar) {\n        isEscapeMode=!isEscapeMode;\n        result.append(key);\n        continue;\n      }\n else {\n        result.append(key);\n      }\n    }\n    if (null != wrapChar) {\n      result.append(key);\n      continue;\n    }\n    if ((key == '[') || (key == '{')) {\n      if ((i - 1 > 0) && (json.charAt(i - 1) == ':')) {\n        result.append(NEW_LINE);\n        result.append(indent(number));\n      }\n      result.append(key);\n      result.append(NEW_LINE);\n      number++;\n      result.append(indent(number));\n      continue;\n    }\n    if ((key == ']') || (key == '}')) {\n      result.append(NEW_LINE);\n      number--;\n      result.append(indent(number));\n      result.append(key);\n      if (((i + 1) < length) && (json.charAt(i + 1) != ',')) {\n        result.append(NEW_LINE);\n      }\n      continue;\n    }\n    if ((key == ',')) {\n      result.append(key);\n      result.append(NEW_LINE);\n      result.append(indent(number));\n      continue;\n    }\n    result.append(key);\n  }\n  return result.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 297,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 33,
        "startColumnNumber" : 18,
        "endLineNumber" : 33,
        "endColumnNumber" : 28
      },
      "nodeContext" : "i < length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "length",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 93,
      "startColumnNumber" : 19,
      "endLineNumber" : 93,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 93,
        "startColumnNumber" : 9,
        "endLineNumber" : 93,
        "endColumnNumber" : 25
      },
      "nodeContext" : "(i + 1) < length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 26
      },
      "nodeContext" : "((i + 1) < length)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 57
      },
      "nodeContext" : "((i + 1) < length) && (json.charAt(i + 1) != ',')",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (((i + 1) < length) && (json.charAt(i + 1) != ',')) {\n  result.append(NEW_LINE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 387,
        "startLineNumber" : 84,
        "startColumnNumber" : 37,
        "endLineNumber" : 98,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  result.append(NEW_LINE);\n  number--;\n  result.append(indent(number));\n  result.append(key);\n  if (((i + 1) < length) && (json.charAt(i + 1) != ',')) {\n    result.append(NEW_LINE);\n  }\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 421,
        "startLineNumber" : 84,
        "startColumnNumber" : 3,
        "endLineNumber" : 98,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if ((key == ']') || (key == '}')) {\n  result.append(NEW_LINE);\n  number--;\n  result.append(indent(number));\n  result.append(key);\n  if (((i + 1) < length) && (json.charAt(i + 1) != ',')) {\n    result.append(NEW_LINE);\n  }\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1759,
        "startLineNumber" : 33,
        "startColumnNumber" : 35,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  key=json.charAt(i);\n  if ('\"' == key || '\\'' == key) {\n    if (null == wrapChar) {\n      wrapChar=key;\n    }\n else     if (isEscapeMode) {\n      isEscapeMode=false;\n    }\n else     if (wrapChar.equals(key)) {\n      wrapChar=null;\n    }\n    result.append(key);\n    continue;\n  }\n else   if ('\\\\' == key) {\n    if (null != wrapChar) {\n      isEscapeMode=!isEscapeMode;\n      result.append(key);\n      continue;\n    }\n else {\n      result.append(key);\n    }\n  }\n  if (null != wrapChar) {\n    result.append(key);\n    continue;\n  }\n  if ((key == '[') || (key == '{')) {\n    if ((i - 1 > 0) && (json.charAt(i - 1) == ':')) {\n      result.append(NEW_LINE);\n      result.append(indent(number));\n    }\n    result.append(key);\n    result.append(NEW_LINE);\n    number++;\n    result.append(indent(number));\n    continue;\n  }\n  if ((key == ']') || (key == '}')) {\n    result.append(NEW_LINE);\n    number--;\n    result.append(indent(number));\n    result.append(key);\n    if (((i + 1) < length) && (json.charAt(i + 1) != ',')) {\n      result.append(NEW_LINE);\n    }\n    continue;\n  }\n  if ((key == ',')) {\n    result.append(key);\n    result.append(NEW_LINE);\n    result.append(indent(number));\n    continue;\n  }\n  result.append(key);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1792,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < length; i++) {\n  key=json.charAt(i);\n  if ('\"' == key || '\\'' == key) {\n    if (null == wrapChar) {\n      wrapChar=key;\n    }\n else     if (isEscapeMode) {\n      isEscapeMode=false;\n    }\n else     if (wrapChar.equals(key)) {\n      wrapChar=null;\n    }\n    result.append(key);\n    continue;\n  }\n else   if ('\\\\' == key) {\n    if (null != wrapChar) {\n      isEscapeMode=!isEscapeMode;\n      result.append(key);\n      continue;\n    }\n else {\n      result.append(key);\n    }\n  }\n  if (null != wrapChar) {\n    result.append(key);\n    continue;\n  }\n  if ((key == '[') || (key == '{')) {\n    if ((i - 1 > 0) && (json.charAt(i - 1) == ':')) {\n      result.append(NEW_LINE);\n      result.append(indent(number));\n    }\n    result.append(key);\n    result.append(NEW_LINE);\n    number++;\n    result.append(indent(number));\n    continue;\n  }\n  if ((key == ']') || (key == '}')) {\n    result.append(NEW_LINE);\n    number--;\n    result.append(indent(number));\n    result.append(key);\n    if (((i + 1) < length) && (json.charAt(i + 1) != ',')) {\n      result.append(NEW_LINE);\n    }\n    continue;\n  }\n  if ((key == ',')) {\n    result.append(key);\n    result.append(NEW_LINE);\n    result.append(indent(number));\n    continue;\n  }\n  result.append(key);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 245,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2013,
        "startLineNumber" : 25,
        "startColumnNumber" : 42,
        "endLineNumber" : 112,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final StringBuilder result=new StringBuilder();\n  Character wrapChar=null;\n  boolean isEscapeMode=false;\n  int length=json.length();\n  int number=0;\n  char key;\n  for (int i=0; i < length; i++) {\n    key=json.charAt(i);\n    if ('\"' == key || '\\'' == key) {\n      if (null == wrapChar) {\n        wrapChar=key;\n      }\n else       if (isEscapeMode) {\n        isEscapeMode=false;\n      }\n else       if (wrapChar.equals(key)) {\n        wrapChar=null;\n      }\n      result.append(key);\n      continue;\n    }\n else     if ('\\\\' == key) {\n      if (null != wrapChar) {\n        isEscapeMode=!isEscapeMode;\n        result.append(key);\n        continue;\n      }\n else {\n        result.append(key);\n      }\n    }\n    if (null != wrapChar) {\n      result.append(key);\n      continue;\n    }\n    if ((key == '[') || (key == '{')) {\n      if ((i - 1 > 0) && (json.charAt(i - 1) == ':')) {\n        result.append(NEW_LINE);\n        result.append(indent(number));\n      }\n      result.append(key);\n      result.append(NEW_LINE);\n      number++;\n      result.append(indent(number));\n      continue;\n    }\n    if ((key == ']') || (key == '}')) {\n      result.append(NEW_LINE);\n      number--;\n      result.append(indent(number));\n      result.append(key);\n      if (((i + 1) < length) && (json.charAt(i + 1) != ',')) {\n        result.append(NEW_LINE);\n      }\n      continue;\n    }\n    if ((key == ',')) {\n      result.append(key);\n      result.append(NEW_LINE);\n      result.append(indent(number));\n      continue;\n    }\n    result.append(key);\n  }\n  return result.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 286,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2148,
        "startLineNumber" : 19,
        "startColumnNumber" : 1,
        "endLineNumber" : 112,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 返回格式化JSON字符串。\n * @param json 未格式化的JSON字符串。\n * @return 格式化的JSON字符串。\n */\npublic static String format(String json){\n  final StringBuilder result=new StringBuilder();\n  Character wrapChar=null;\n  boolean isEscapeMode=false;\n  int length=json.length();\n  int number=0;\n  char key;\n  for (int i=0; i < length; i++) {\n    key=json.charAt(i);\n    if ('\"' == key || '\\'' == key) {\n      if (null == wrapChar) {\n        wrapChar=key;\n      }\n else       if (isEscapeMode) {\n        isEscapeMode=false;\n      }\n else       if (wrapChar.equals(key)) {\n        wrapChar=null;\n      }\n      result.append(key);\n      continue;\n    }\n else     if ('\\\\' == key) {\n      if (null != wrapChar) {\n        isEscapeMode=!isEscapeMode;\n        result.append(key);\n        continue;\n      }\n else {\n        result.append(key);\n      }\n    }\n    if (null != wrapChar) {\n      result.append(key);\n      continue;\n    }\n    if ((key == '[') || (key == '{')) {\n      if ((i - 1 > 0) && (json.charAt(i - 1) == ':')) {\n        result.append(NEW_LINE);\n        result.append(indent(number));\n      }\n      result.append(key);\n      result.append(NEW_LINE);\n      number++;\n      result.append(indent(number));\n      continue;\n    }\n    if ((key == ']') || (key == '}')) {\n      result.append(NEW_LINE);\n      number--;\n      result.append(indent(number));\n      result.append(key);\n      if (((i + 1) < length) && (json.charAt(i + 1) != ',')) {\n        result.append(NEW_LINE);\n      }\n      continue;\n    }\n    if ((key == ',')) {\n      result.append(key);\n      result.append(NEW_LINE);\n      result.append(indent(number));\n      continue;\n    }\n    result.append(key);\n  }\n  return result.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 297,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 57
      },
      "nodeContext" : "((i + 1) < length) && (json.charAt(i + 1) != ',')",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 33,
    "startColumnNumber" : 22,
    "endLineNumber" : 33,
    "endColumnNumber" : 28
  }, {
    "charLength" : 6,
    "startLineNumber" : 93,
    "startColumnNumber" : 19,
    "endLineNumber" : 93,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  } ]
}