{
  "id" : 63,
  "expression" : "clientChannel",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/transport-sctp/src/test/java/io/netty/channel/sctp/SctpLimitStreamsTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "clientChannel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 68,
      "startColumnNumber" : 28,
      "endLineNumber" : 68,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 68,
        "startColumnNumber" : 28,
        "endLineNumber" : 68,
        "endColumnNumber" : 55
      },
      "nodeContext" : "clientChannel.association()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 68,
        "startColumnNumber" : 28,
        "endLineNumber" : 68,
        "endColumnNumber" : 76
      },
      "nodeContext" : "clientChannel.association().maxOutboundStreams()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertEquals(1,clientChannel.association().maxOutboundStreams())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertEquals(1,clientChannel.association().maxOutboundStreams());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1333,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ServerBootstrap serverBootstrap=new ServerBootstrap();\n  serverBootstrap.group(loop).channel(serverClass()).option(ChannelOption.SO_REUSEADDR,true).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(1,1)).localAddress(new InetSocketAddress(0)).childHandler(new ChannelHandlerAdapter(){\n  }\n);\n  Bootstrap clientBootstrap=new Bootstrap().group(loop).channel(clientClass()).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(112,112)).handler(new ChannelHandlerAdapter(){\n  }\n);\n  Channel serverChannel=serverBootstrap.bind().get();\n  SctpChannel clientChannel=(SctpChannel)clientBootstrap.connect(serverChannel.localAddress()).get();\n  assertEquals(1,clientChannel.association().maxOutboundStreams());\n  assertEquals(1,clientChannel.association().maxInboundStreams());\n  serverChannel.close().syncUninterruptibly();\n  clientChannel.close().syncUninterruptibly();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1398,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ServerBootstrap serverBootstrap=new ServerBootstrap();\n  serverBootstrap.group(loop).channel(serverClass()).option(ChannelOption.SO_REUSEADDR,true).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(1,1)).localAddress(new InetSocketAddress(0)).childHandler(new ChannelHandlerAdapter(){\n  }\n);\n  Bootstrap clientBootstrap=new Bootstrap().group(loop).channel(clientClass()).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(112,112)).handler(new ChannelHandlerAdapter(){\n  }\n);\n  Channel serverChannel=serverBootstrap.bind().get();\n  SctpChannel clientChannel=(SctpChannel)clientBootstrap.connect(serverChannel.localAddress()).get();\n  assertEquals(1,clientChannel.association().maxOutboundStreams());\n  assertEquals(1,clientChannel.association().maxInboundStreams());\n  serverChannel.close().syncUninterruptibly();\n  clientChannel.close().syncUninterruptibly();\n}\n  finally {\n  loop.shutdownGracefully();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 143,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1468,
        "startLineNumber" : 47,
        "startColumnNumber" : 58,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EventLoopGroup loop=newEventLoopGroup();\n  try {\n    ServerBootstrap serverBootstrap=new ServerBootstrap();\n    serverBootstrap.group(loop).channel(serverClass()).option(ChannelOption.SO_REUSEADDR,true).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(1,1)).localAddress(new InetSocketAddress(0)).childHandler(new ChannelHandlerAdapter(){\n    }\n);\n    Bootstrap clientBootstrap=new Bootstrap().group(loop).channel(clientClass()).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(112,112)).handler(new ChannelHandlerAdapter(){\n    }\n);\n    Channel serverChannel=serverBootstrap.bind().get();\n    SctpChannel clientChannel=(SctpChannel)clientBootstrap.connect(serverChannel.localAddress()).get();\n    assertEquals(1,clientChannel.association().maxOutboundStreams());\n    assertEquals(1,clientChannel.association().maxInboundStreams());\n    serverChannel.close().syncUninterruptibly();\n    clientChannel.close().syncUninterruptibly();\n  }\n  finally {\n    loop.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressForbidden(reason=\"test-only\") @Test @Timeout(value=5000,unit=TimeUnit.MILLISECONDS) public void testSctpInitMaxstreams() throws Exception {\n  EventLoopGroup loop=newEventLoopGroup();\n  try {\n    ServerBootstrap serverBootstrap=new ServerBootstrap();\n    serverBootstrap.group(loop).channel(serverClass()).option(ChannelOption.SO_REUSEADDR,true).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(1,1)).localAddress(new InetSocketAddress(0)).childHandler(new ChannelHandlerAdapter(){\n    }\n);\n    Bootstrap clientBootstrap=new Bootstrap().group(loop).channel(clientClass()).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(112,112)).handler(new ChannelHandlerAdapter(){\n    }\n);\n    Channel serverChannel=serverBootstrap.bind().get();\n    SctpChannel clientChannel=(SctpChannel)clientBootstrap.connect(serverChannel.localAddress()).get();\n    assertEquals(1,clientChannel.association().maxOutboundStreams());\n    assertEquals(1,clientChannel.association().maxInboundStreams());\n    serverChannel.close().syncUninterruptibly();\n    clientChannel.close().syncUninterruptibly();\n  }\n  finally {\n    loop.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 174,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertEquals(1,clientChannel.association().maxOutboundStreams());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.channel.sctp.SctpChannel"
  }, {
    "nodeContext" : "clientChannel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 69,
      "startColumnNumber" : 28,
      "endLineNumber" : 69,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 69,
        "startColumnNumber" : 28,
        "endLineNumber" : 69,
        "endColumnNumber" : 55
      },
      "nodeContext" : "clientChannel.association()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 69,
        "startColumnNumber" : 28,
        "endLineNumber" : 69,
        "endColumnNumber" : 75
      },
      "nodeContext" : "clientChannel.association().maxInboundStreams()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertEquals(1,clientChannel.association().maxInboundStreams())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertEquals(1,clientChannel.association().maxInboundStreams());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1333,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ServerBootstrap serverBootstrap=new ServerBootstrap();\n  serverBootstrap.group(loop).channel(serverClass()).option(ChannelOption.SO_REUSEADDR,true).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(1,1)).localAddress(new InetSocketAddress(0)).childHandler(new ChannelHandlerAdapter(){\n  }\n);\n  Bootstrap clientBootstrap=new Bootstrap().group(loop).channel(clientClass()).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(112,112)).handler(new ChannelHandlerAdapter(){\n  }\n);\n  Channel serverChannel=serverBootstrap.bind().get();\n  SctpChannel clientChannel=(SctpChannel)clientBootstrap.connect(serverChannel.localAddress()).get();\n  assertEquals(1,clientChannel.association().maxOutboundStreams());\n  assertEquals(1,clientChannel.association().maxInboundStreams());\n  serverChannel.close().syncUninterruptibly();\n  clientChannel.close().syncUninterruptibly();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1398,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ServerBootstrap serverBootstrap=new ServerBootstrap();\n  serverBootstrap.group(loop).channel(serverClass()).option(ChannelOption.SO_REUSEADDR,true).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(1,1)).localAddress(new InetSocketAddress(0)).childHandler(new ChannelHandlerAdapter(){\n  }\n);\n  Bootstrap clientBootstrap=new Bootstrap().group(loop).channel(clientClass()).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(112,112)).handler(new ChannelHandlerAdapter(){\n  }\n);\n  Channel serverChannel=serverBootstrap.bind().get();\n  SctpChannel clientChannel=(SctpChannel)clientBootstrap.connect(serverChannel.localAddress()).get();\n  assertEquals(1,clientChannel.association().maxOutboundStreams());\n  assertEquals(1,clientChannel.association().maxInboundStreams());\n  serverChannel.close().syncUninterruptibly();\n  clientChannel.close().syncUninterruptibly();\n}\n  finally {\n  loop.shutdownGracefully();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 143,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1468,
        "startLineNumber" : 47,
        "startColumnNumber" : 58,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EventLoopGroup loop=newEventLoopGroup();\n  try {\n    ServerBootstrap serverBootstrap=new ServerBootstrap();\n    serverBootstrap.group(loop).channel(serverClass()).option(ChannelOption.SO_REUSEADDR,true).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(1,1)).localAddress(new InetSocketAddress(0)).childHandler(new ChannelHandlerAdapter(){\n    }\n);\n    Bootstrap clientBootstrap=new Bootstrap().group(loop).channel(clientClass()).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(112,112)).handler(new ChannelHandlerAdapter(){\n    }\n);\n    Channel serverChannel=serverBootstrap.bind().get();\n    SctpChannel clientChannel=(SctpChannel)clientBootstrap.connect(serverChannel.localAddress()).get();\n    assertEquals(1,clientChannel.association().maxOutboundStreams());\n    assertEquals(1,clientChannel.association().maxInboundStreams());\n    serverChannel.close().syncUninterruptibly();\n    clientChannel.close().syncUninterruptibly();\n  }\n  finally {\n    loop.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressForbidden(reason=\"test-only\") @Test @Timeout(value=5000,unit=TimeUnit.MILLISECONDS) public void testSctpInitMaxstreams() throws Exception {\n  EventLoopGroup loop=newEventLoopGroup();\n  try {\n    ServerBootstrap serverBootstrap=new ServerBootstrap();\n    serverBootstrap.group(loop).channel(serverClass()).option(ChannelOption.SO_REUSEADDR,true).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(1,1)).localAddress(new InetSocketAddress(0)).childHandler(new ChannelHandlerAdapter(){\n    }\n);\n    Bootstrap clientBootstrap=new Bootstrap().group(loop).channel(clientClass()).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(112,112)).handler(new ChannelHandlerAdapter(){\n    }\n);\n    Channel serverChannel=serverBootstrap.bind().get();\n    SctpChannel clientChannel=(SctpChannel)clientBootstrap.connect(serverChannel.localAddress()).get();\n    assertEquals(1,clientChannel.association().maxOutboundStreams());\n    assertEquals(1,clientChannel.association().maxInboundStreams());\n    serverChannel.close().syncUninterruptibly();\n    clientChannel.close().syncUninterruptibly();\n  }\n  finally {\n    loop.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 174,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertEquals(1,clientChannel.association().maxInboundStreams());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.channel.sctp.SctpChannel"
  }, {
    "nodeContext" : "clientChannel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 71,
      "startColumnNumber" : 12,
      "endLineNumber" : 71,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 33
      },
      "nodeContext" : "clientChannel.close()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 55
      },
      "nodeContext" : "clientChannel.close().syncUninterruptibly()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 56
      },
      "nodeContext" : "clientChannel.close().syncUninterruptibly();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1333,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ServerBootstrap serverBootstrap=new ServerBootstrap();\n  serverBootstrap.group(loop).channel(serverClass()).option(ChannelOption.SO_REUSEADDR,true).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(1,1)).localAddress(new InetSocketAddress(0)).childHandler(new ChannelHandlerAdapter(){\n  }\n);\n  Bootstrap clientBootstrap=new Bootstrap().group(loop).channel(clientClass()).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(112,112)).handler(new ChannelHandlerAdapter(){\n  }\n);\n  Channel serverChannel=serverBootstrap.bind().get();\n  SctpChannel clientChannel=(SctpChannel)clientBootstrap.connect(serverChannel.localAddress()).get();\n  assertEquals(1,clientChannel.association().maxOutboundStreams());\n  assertEquals(1,clientChannel.association().maxInboundStreams());\n  serverChannel.close().syncUninterruptibly();\n  clientChannel.close().syncUninterruptibly();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1398,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ServerBootstrap serverBootstrap=new ServerBootstrap();\n  serverBootstrap.group(loop).channel(serverClass()).option(ChannelOption.SO_REUSEADDR,true).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(1,1)).localAddress(new InetSocketAddress(0)).childHandler(new ChannelHandlerAdapter(){\n  }\n);\n  Bootstrap clientBootstrap=new Bootstrap().group(loop).channel(clientClass()).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(112,112)).handler(new ChannelHandlerAdapter(){\n  }\n);\n  Channel serverChannel=serverBootstrap.bind().get();\n  SctpChannel clientChannel=(SctpChannel)clientBootstrap.connect(serverChannel.localAddress()).get();\n  assertEquals(1,clientChannel.association().maxOutboundStreams());\n  assertEquals(1,clientChannel.association().maxInboundStreams());\n  serverChannel.close().syncUninterruptibly();\n  clientChannel.close().syncUninterruptibly();\n}\n  finally {\n  loop.shutdownGracefully();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 143,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1468,
        "startLineNumber" : 47,
        "startColumnNumber" : 58,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EventLoopGroup loop=newEventLoopGroup();\n  try {\n    ServerBootstrap serverBootstrap=new ServerBootstrap();\n    serverBootstrap.group(loop).channel(serverClass()).option(ChannelOption.SO_REUSEADDR,true).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(1,1)).localAddress(new InetSocketAddress(0)).childHandler(new ChannelHandlerAdapter(){\n    }\n);\n    Bootstrap clientBootstrap=new Bootstrap().group(loop).channel(clientClass()).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(112,112)).handler(new ChannelHandlerAdapter(){\n    }\n);\n    Channel serverChannel=serverBootstrap.bind().get();\n    SctpChannel clientChannel=(SctpChannel)clientBootstrap.connect(serverChannel.localAddress()).get();\n    assertEquals(1,clientChannel.association().maxOutboundStreams());\n    assertEquals(1,clientChannel.association().maxInboundStreams());\n    serverChannel.close().syncUninterruptibly();\n    clientChannel.close().syncUninterruptibly();\n  }\n  finally {\n    loop.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressForbidden(reason=\"test-only\") @Test @Timeout(value=5000,unit=TimeUnit.MILLISECONDS) public void testSctpInitMaxstreams() throws Exception {\n  EventLoopGroup loop=newEventLoopGroup();\n  try {\n    ServerBootstrap serverBootstrap=new ServerBootstrap();\n    serverBootstrap.group(loop).channel(serverClass()).option(ChannelOption.SO_REUSEADDR,true).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(1,1)).localAddress(new InetSocketAddress(0)).childHandler(new ChannelHandlerAdapter(){\n    }\n);\n    Bootstrap clientBootstrap=new Bootstrap().group(loop).channel(clientClass()).option(SctpChannelOption.SCTP_INIT_MAXSTREAMS,SctpStandardSocketOptions.InitMaxStreams.create(112,112)).handler(new ChannelHandlerAdapter(){\n    }\n);\n    Channel serverChannel=serverBootstrap.bind().get();\n    SctpChannel clientChannel=(SctpChannel)clientBootstrap.connect(serverChannel.localAddress()).get();\n    assertEquals(1,clientChannel.association().maxOutboundStreams());\n    assertEquals(1,clientChannel.association().maxInboundStreams());\n    serverChannel.close().syncUninterruptibly();\n    clientChannel.close().syncUninterruptibly();\n  }\n  finally {\n    loop.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 174,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 56
      },
      "nodeContext" : "clientChannel.close().syncUninterruptibly();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.channel.sctp.SctpChannel"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 68,
    "startColumnNumber" : 28,
    "endLineNumber" : 68,
    "endColumnNumber" : 41
  }, {
    "charLength" : 13,
    "startLineNumber" : 69,
    "startColumnNumber" : 28,
    "endLineNumber" : 69,
    "endColumnNumber" : 41
  }, {
    "charLength" : 13,
    "startLineNumber" : 71,
    "startColumnNumber" : 12,
    "endLineNumber" : 71,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}