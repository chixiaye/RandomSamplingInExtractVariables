{
  "id" : 33,
  "expression" : "\"Pass \"",
  "projectName" : "skylot@jadx",
  "commitID" : "cf79a519d3f7fbd6d260eeaead449b473ce76698",
  "filePath" : "jadx-core/src/test/java/jadx/tests/functional/JadxVisitorsOrderTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Pass \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 59,
      "startColumnNumber" : 16,
      "endLineNumber" : 59,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 59,
        "startColumnNumber" : 16,
        "endLineNumber" : 59,
        "endColumnNumber" : 77
      },
      "nodeContext" : "\"Pass \" + passName + \" must be before \"+ cls.getSimpleName()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 59,
        "startColumnNumber" : 5,
        "endLineNumber" : 59,
        "endColumnNumber" : 78
      },
      "nodeContext" : "errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 59,
        "startColumnNumber" : 5,
        "endLineNumber" : 59,
        "endColumnNumber" : 79
      },
      "nodeContext" : "errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 58,
        "startColumnNumber" : 36,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (classList.indexOf(cls) < i) {\n  errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 57,
        "startColumnNumber" : 65,
        "endLineNumber" : 61,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (classList.indexOf(cls) < i) {\n    errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 57,
        "startColumnNumber" : 3,
        "endLineNumber" : 61,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n  if (classList.indexOf(cls) < i) {\n    errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 938,
        "startLineNumber" : 44,
        "startColumnNumber" : 42,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n  JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(passClass);\n  String passName=passClass.getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 978,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < passes.size(); i++) {\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n  JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(passClass);\n  String passName=passClass.getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 160,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1268,
        "startLineNumber" : 35,
        "startColumnNumber" : 65,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n    JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(passClass);\n    String passName=passClass.getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 230,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1332,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static List<String> check(List<IDexTreeVisitor> passes){\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n    JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(passClass);\n    String passName=passClass.getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 59,
        "startColumnNumber" : 5,
        "endLineNumber" : 59,
        "endColumnNumber" : 79
      },
      "nodeContext" : "errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"Pass \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 64,
      "startColumnNumber" : 16,
      "endLineNumber" : 64,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 64,
        "startColumnNumber" : 16,
        "endLineNumber" : 64,
        "endColumnNumber" : 76
      },
      "nodeContext" : "\"Pass \" + passName + \" must be after \"+ cls.getSimpleName()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 64,
        "startColumnNumber" : 5,
        "endLineNumber" : 64,
        "endColumnNumber" : 77
      },
      "nodeContext" : "errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 64,
        "startColumnNumber" : 5,
        "endLineNumber" : 64,
        "endColumnNumber" : 78
      },
      "nodeContext" : "errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 63,
        "startColumnNumber" : 36,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (classList.indexOf(cls) > i) {\n  errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 62,
        "startColumnNumber" : 64,
        "endLineNumber" : 66,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (classList.indexOf(cls) > i) {\n    errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 190,
        "startLineNumber" : 62,
        "startColumnNumber" : 3,
        "endLineNumber" : 66,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n  if (classList.indexOf(cls) > i) {\n    errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 938,
        "startLineNumber" : 44,
        "startColumnNumber" : 42,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n  JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(passClass);\n  String passName=passClass.getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 978,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < passes.size(); i++) {\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n  JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(passClass);\n  String passName=passClass.getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 160,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1268,
        "startLineNumber" : 35,
        "startColumnNumber" : 65,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n    JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(passClass);\n    String passName=passClass.getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 230,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1332,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static List<String> check(List<IDexTreeVisitor> passes){\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n    JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(passClass);\n    String passName=passClass.getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 64,
        "startColumnNumber" : 5,
        "endLineNumber" : 64,
        "endColumnNumber" : 78
      },
      "nodeContext" : "errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 59,
    "startColumnNumber" : 16,
    "endLineNumber" : 59,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 64,
    "startColumnNumber" : 16,
    "endLineNumber" : 64,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  } ]
}