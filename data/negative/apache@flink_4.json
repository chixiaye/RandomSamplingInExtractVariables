{
  "id" : 4,
  "expression" : "Boolean.class",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-planner/src/main/java/org/apache/calcite/rex/RexLiteral.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Boolean.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 1092,
      "startColumnNumber" : 36,
      "endLineNumber" : 1092,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 1092,
        "startColumnNumber" : 27,
        "endLineNumber" : 1092,
        "endColumnNumber" : 49
      },
      "nodeContext" : "clazz == Boolean.class",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 1092,
        "startColumnNumber" : 23,
        "endLineNumber" : 1095,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (clazz == Boolean.class) {\n  return clazz.cast(getValueAs(BigDecimal.class).signum() < 0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 1090,
        "startColumnNumber" : 23,
        "endLineNumber" : 1095,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (clazz == String.class) {\n  return clazz.cast(intervalString(getValueAs(BigDecimal.class).abs()));\n}\n else if (clazz == Boolean.class) {\n  return clazz.cast(getValueAs(BigDecimal.class).signum() < 0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 1088,
        "startColumnNumber" : 23,
        "endLineNumber" : 1095,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (clazz == Long.class) {\n  return clazz.cast(((BigDecimal)value).longValue());\n}\n else if (clazz == String.class) {\n  return clazz.cast(intervalString(getValueAs(BigDecimal.class).abs()));\n}\n else if (clazz == Boolean.class) {\n  return clazz.cast(getValueAs(BigDecimal.class).signum() < 0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 567,
        "startLineNumber" : 1086,
        "startColumnNumber" : 16,
        "endLineNumber" : 1095,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (clazz == Integer.class) {\n  return clazz.cast(((BigDecimal)value).intValue());\n}\n else if (clazz == Long.class) {\n  return clazz.cast(((BigDecimal)value).longValue());\n}\n else if (clazz == String.class) {\n  return clazz.cast(intervalString(getValueAs(BigDecimal.class).abs()));\n}\n else if (clazz == Boolean.class) {\n  return clazz.cast(getValueAs(BigDecimal.class).signum() < 0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4807,
        "startLineNumber" : 990,
        "startColumnNumber" : 8,
        "endLineNumber" : 1097,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (typeName) {\ncase BINARY:  if (clazz == byte[].class) {\n    return clazz.cast(((ByteString)value).getBytes());\n  }\nbreak;\ncase CHAR:if (clazz == String.class) {\nreturn clazz.cast(((NlsString)value).getValue());\n}\n else if (clazz == Character.class) {\nreturn clazz.cast(((NlsString)value).getValue().charAt(0));\n}\nbreak;\ncase VARCHAR:if (clazz == String.class) {\nreturn clazz.cast(((NlsString)value).getValue());\n}\nbreak;\ncase DECIMAL:if (clazz == Long.class) {\nreturn clazz.cast(((BigDecimal)value).unscaledValue().longValue());\n}\ncase BIGINT:case INTEGER:case SMALLINT:case TINYINT:case DOUBLE:case REAL:case FLOAT:if (clazz == Long.class) {\nreturn clazz.cast(((BigDecimal)value).longValue());\n}\n else if (clazz == Integer.class) {\nreturn clazz.cast(((BigDecimal)value).intValue());\n}\n else if (clazz == Short.class) {\nreturn clazz.cast(((BigDecimal)value).shortValue());\n}\n else if (clazz == Byte.class) {\nreturn clazz.cast(((BigDecimal)value).byteValue());\n}\n else if (clazz == Double.class) {\nreturn clazz.cast(((BigDecimal)value).doubleValue());\n}\n else if (clazz == Float.class) {\nreturn clazz.cast(((BigDecimal)value).floatValue());\n}\nbreak;\ncase DATE:if (clazz == Integer.class) {\nreturn clazz.cast(((DateString)value).getDaysSinceEpoch());\n}\n else if (clazz == Calendar.class) {\nreturn clazz.cast(((DateString)value).toCalendar());\n}\nbreak;\ncase TIME:if (clazz == Integer.class) {\nreturn clazz.cast(((TimeString)value).getMillisOfDay());\n}\n else if (clazz == Calendar.class) {\nreturn clazz.cast(((TimeString)value).toCalendar());\n}\nbreak;\ncase TIME_WITH_LOCAL_TIME_ZONE:if (clazz == Integer.class) {\nreturn clazz.cast(((TimeString)value).getMillisOfDay());\n}\nbreak;\ncase TIMESTAMP:if (clazz == Long.class) {\nreturn clazz.cast(((TimestampString)value).getMillisSinceEpoch());\n}\n else if (clazz == Calendar.class) {\nreturn clazz.cast(((TimestampString)value).toCalendar());\n}\nbreak;\ncase TIMESTAMP_WITH_LOCAL_TIME_ZONE:if (clazz == Long.class) {\nreturn clazz.cast(((TimestampString)value).getMillisSinceEpoch());\n}\n else if (clazz == Calendar.class) {\nreturn clazz.cast(((TimestampString)value).toCalendar());\n}\nbreak;\ncase INTERVAL_YEAR:case INTERVAL_YEAR_MONTH:case INTERVAL_MONTH:case INTERVAL_DAY:case INTERVAL_DAY_HOUR:case INTERVAL_DAY_MINUTE:case INTERVAL_DAY_SECOND:case INTERVAL_HOUR:case INTERVAL_HOUR_MINUTE:case INTERVAL_HOUR_SECOND:case INTERVAL_MINUTE:case INTERVAL_MINUTE_SECOND:case INTERVAL_SECOND:if (clazz == Integer.class) {\nreturn clazz.cast(((BigDecimal)value).intValue());\n}\n else if (clazz == Long.class) {\nreturn clazz.cast(((BigDecimal)value).longValue());\n}\n else if (clazz == String.class) {\nreturn clazz.cast(intervalString(getValueAs(BigDecimal.class).abs()));\n}\n else if (clazz == Boolean.class) {\nreturn clazz.cast(getValueAs(BigDecimal.class).signum() < 0);\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 512,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5016,
        "startLineNumber" : 986,
        "startColumnNumber" : 44,
        "endLineNumber" : 1099,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (value == null || clazz.isInstance(value)) {\n    return clazz.cast(value);\n  }\nswitch (typeName) {\ncase BINARY:    if (clazz == byte[].class) {\n      return clazz.cast(((ByteString)value).getBytes());\n    }\n  break;\ncase CHAR:if (clazz == String.class) {\n  return clazz.cast(((NlsString)value).getValue());\n}\n else if (clazz == Character.class) {\n  return clazz.cast(((NlsString)value).getValue().charAt(0));\n}\nbreak;\ncase VARCHAR:if (clazz == String.class) {\nreturn clazz.cast(((NlsString)value).getValue());\n}\nbreak;\ncase DECIMAL:if (clazz == Long.class) {\nreturn clazz.cast(((BigDecimal)value).unscaledValue().longValue());\n}\ncase BIGINT:case INTEGER:case SMALLINT:case TINYINT:case DOUBLE:case REAL:case FLOAT:if (clazz == Long.class) {\nreturn clazz.cast(((BigDecimal)value).longValue());\n}\n else if (clazz == Integer.class) {\nreturn clazz.cast(((BigDecimal)value).intValue());\n}\n else if (clazz == Short.class) {\nreturn clazz.cast(((BigDecimal)value).shortValue());\n}\n else if (clazz == Byte.class) {\nreturn clazz.cast(((BigDecimal)value).byteValue());\n}\n else if (clazz == Double.class) {\nreturn clazz.cast(((BigDecimal)value).doubleValue());\n}\n else if (clazz == Float.class) {\nreturn clazz.cast(((BigDecimal)value).floatValue());\n}\nbreak;\ncase DATE:if (clazz == Integer.class) {\nreturn clazz.cast(((DateString)value).getDaysSinceEpoch());\n}\n else if (clazz == Calendar.class) {\nreturn clazz.cast(((DateString)value).toCalendar());\n}\nbreak;\ncase TIME:if (clazz == Integer.class) {\nreturn clazz.cast(((TimeString)value).getMillisOfDay());\n}\n else if (clazz == Calendar.class) {\nreturn clazz.cast(((TimeString)value).toCalendar());\n}\nbreak;\ncase TIME_WITH_LOCAL_TIME_ZONE:if (clazz == Integer.class) {\nreturn clazz.cast(((TimeString)value).getMillisOfDay());\n}\nbreak;\ncase TIMESTAMP:if (clazz == Long.class) {\nreturn clazz.cast(((TimestampString)value).getMillisSinceEpoch());\n}\n else if (clazz == Calendar.class) {\nreturn clazz.cast(((TimestampString)value).toCalendar());\n}\nbreak;\ncase TIMESTAMP_WITH_LOCAL_TIME_ZONE:if (clazz == Long.class) {\nreturn clazz.cast(((TimestampString)value).getMillisSinceEpoch());\n}\n else if (clazz == Calendar.class) {\nreturn clazz.cast(((TimestampString)value).toCalendar());\n}\nbreak;\ncase INTERVAL_YEAR:case INTERVAL_YEAR_MONTH:case INTERVAL_MONTH:case INTERVAL_DAY:case INTERVAL_DAY_HOUR:case INTERVAL_DAY_MINUTE:case INTERVAL_DAY_SECOND:case INTERVAL_HOUR:case INTERVAL_HOUR_MINUTE:case INTERVAL_HOUR_SECOND:case INTERVAL_MINUTE:case INTERVAL_MINUTE_SECOND:case INTERVAL_SECOND:if (clazz == Integer.class) {\nreturn clazz.cast(((BigDecimal)value).intValue());\n}\n else if (clazz == Long.class) {\nreturn clazz.cast(((BigDecimal)value).longValue());\n}\n else if (clazz == String.class) {\nreturn clazz.cast(intervalString(getValueAs(BigDecimal.class).abs()));\n}\n else if (clazz == Boolean.class) {\nreturn clazz.cast(getValueAs(BigDecimal.class).signum() < 0);\n}\nbreak;\n}\nthrow new AssertionError(\"cannot convert \" + typeName + \" literal to \"+ clazz);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 537,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5966,
        "startLineNumber" : 965,
        "startColumnNumber" : 4,
        "endLineNumber" : 1099,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns the value of this literal as an instance of the specified class. <p>The following SQL types allow more than one form: <ul> <li>CHAR as  {@link NlsString} or {@link String}<li>TIME as  {@link TimeString},  {@link Integer} (milliseconds since midnight), {@link Calendar} (in UTC)<li>DATE as  {@link DateString},  {@link Integer} (days since 1970-01-01), {@link Calendar}<li>TIMESTAMP as  {@link TimestampString},  {@link Long} (milliseconds since 1970-01-0100:00:00),  {@link Calendar}<li>DECIMAL as  {@link BigDecimal} or {@link Long}</ul> <p>Called with  {@code clazz} = {@link Comparable}, returns the value in its native form.\n * @param clazz Desired return type\n * @param < T > Return type\n * @return Value of this literal in the desired type\n */\npublic <T>T getValueAs(Class<T> clazz){\n  if (value == null || clazz.isInstance(value)) {\n    return clazz.cast(value);\n  }\nswitch (typeName) {\ncase BINARY:    if (clazz == byte[].class) {\n      return clazz.cast(((ByteString)value).getBytes());\n    }\n  break;\ncase CHAR:if (clazz == String.class) {\n  return clazz.cast(((NlsString)value).getValue());\n}\n else if (clazz == Character.class) {\n  return clazz.cast(((NlsString)value).getValue().charAt(0));\n}\nbreak;\ncase VARCHAR:if (clazz == String.class) {\nreturn clazz.cast(((NlsString)value).getValue());\n}\nbreak;\ncase DECIMAL:if (clazz == Long.class) {\nreturn clazz.cast(((BigDecimal)value).unscaledValue().longValue());\n}\ncase BIGINT:case INTEGER:case SMALLINT:case TINYINT:case DOUBLE:case REAL:case FLOAT:if (clazz == Long.class) {\nreturn clazz.cast(((BigDecimal)value).longValue());\n}\n else if (clazz == Integer.class) {\nreturn clazz.cast(((BigDecimal)value).intValue());\n}\n else if (clazz == Short.class) {\nreturn clazz.cast(((BigDecimal)value).shortValue());\n}\n else if (clazz == Byte.class) {\nreturn clazz.cast(((BigDecimal)value).byteValue());\n}\n else if (clazz == Double.class) {\nreturn clazz.cast(((BigDecimal)value).doubleValue());\n}\n else if (clazz == Float.class) {\nreturn clazz.cast(((BigDecimal)value).floatValue());\n}\nbreak;\ncase DATE:if (clazz == Integer.class) {\nreturn clazz.cast(((DateString)value).getDaysSinceEpoch());\n}\n else if (clazz == Calendar.class) {\nreturn clazz.cast(((DateString)value).toCalendar());\n}\nbreak;\ncase TIME:if (clazz == Integer.class) {\nreturn clazz.cast(((TimeString)value).getMillisOfDay());\n}\n else if (clazz == Calendar.class) {\nreturn clazz.cast(((TimeString)value).toCalendar());\n}\nbreak;\ncase TIME_WITH_LOCAL_TIME_ZONE:if (clazz == Integer.class) {\nreturn clazz.cast(((TimeString)value).getMillisOfDay());\n}\nbreak;\ncase TIMESTAMP:if (clazz == Long.class) {\nreturn clazz.cast(((TimestampString)value).getMillisSinceEpoch());\n}\n else if (clazz == Calendar.class) {\nreturn clazz.cast(((TimestampString)value).toCalendar());\n}\nbreak;\ncase TIMESTAMP_WITH_LOCAL_TIME_ZONE:if (clazz == Long.class) {\nreturn clazz.cast(((TimestampString)value).getMillisSinceEpoch());\n}\n else if (clazz == Calendar.class) {\nreturn clazz.cast(((TimestampString)value).toCalendar());\n}\nbreak;\ncase INTERVAL_YEAR:case INTERVAL_YEAR_MONTH:case INTERVAL_MONTH:case INTERVAL_DAY:case INTERVAL_DAY_HOUR:case INTERVAL_DAY_MINUTE:case INTERVAL_DAY_SECOND:case INTERVAL_HOUR:case INTERVAL_HOUR_MINUTE:case INTERVAL_HOUR_SECOND:case INTERVAL_MINUTE:case INTERVAL_MINUTE_SECOND:case INTERVAL_SECOND:if (clazz == Integer.class) {\nreturn clazz.cast(((BigDecimal)value).intValue());\n}\n else if (clazz == Long.class) {\nreturn clazz.cast(((BigDecimal)value).longValue());\n}\n else if (clazz == String.class) {\nreturn clazz.cast(intervalString(getValueAs(BigDecimal.class).abs()));\n}\n else if (clazz == Boolean.class) {\nreturn clazz.cast(getValueAs(BigDecimal.class).signum() < 0);\n}\nbreak;\n}\nthrow new AssertionError(\"cannot convert \" + typeName + \" literal to \"+ clazz);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 552,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 1092,
        "startColumnNumber" : 27,
        "endLineNumber" : 1092,
        "endColumnNumber" : 49
      },
      "nodeContext" : "clazz == Boolean.class",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.lang.Boolean>"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 1092,
    "startColumnNumber" : 36,
    "endLineNumber" : 1092,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}