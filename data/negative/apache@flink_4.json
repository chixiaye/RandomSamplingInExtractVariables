{
  "id" : 4,
  "expression" : "next.buffer()",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/BoundedBlockingSubpartitionWriteReadTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "next.buffer()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 199,
      "startColumnNumber" : 58,
      "endLineNumber" : 199,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 199,
        "startColumnNumber" : 58,
        "endLineNumber" : 199,
        "endColumnNumber" : 82
      },
      "nodeContext" : "next.buffer().isBuffer()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 199,
        "startColumnNumber" : 15,
        "endLineNumber" : 199,
        "endColumnNumber" : 82
      },
      "nodeContext" : "(next=reader.getNextBuffer()) != null && next.buffer().isBuffer()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while ((next=reader.getNextBuffer()) != null && next.buffer().isBuffer()) {\n  assertTrue(next.isDataAvailable());\n  assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n  ByteBuffer buffer=next.buffer().getNioBufferReadable();\n  if (compressionEnabled && next.buffer().isCompressed()) {\n    Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n    buffer=uncompressedBuffer.getNioBufferReadable();\n    uncompressedBuffer.recycleBuffer();\n  }\n  while (buffer.hasRemaining()) {\n    assertEquals(expectedNextLong++,buffer.getLong());\n  }\n  next.buffer().recycleBuffer();\n  nextExpectedBacklog--;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1047,
        "startLineNumber" : 194,
        "startColumnNumber" : 29,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BufferAndBacklog next;\n  long expectedNextLong=0L;\n  int nextExpectedBacklog=numBuffers - 1;\n  while ((next=reader.getNextBuffer()) != null && next.buffer().isBuffer()) {\n    assertTrue(next.isDataAvailable());\n    assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n    ByteBuffer buffer=next.buffer().getNioBufferReadable();\n    if (compressionEnabled && next.buffer().isCompressed()) {\n      Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n      buffer=uncompressedBuffer.getNioBufferReadable();\n      uncompressedBuffer.recycleBuffer();\n    }\n    while (buffer.hasRemaining()) {\n      assertEquals(expectedNextLong++,buffer.getLong());\n    }\n    next.buffer().recycleBuffer();\n    nextExpectedBacklog--;\n  }\n  assertEquals(numLongs,expectedNextLong);\n  assertEquals(-1,nextExpectedBacklog);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1290,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void readLongs(ResultSubpartitionView reader,long numLongs,int numBuffers,boolean compressionEnabled,BufferDecompressor decompressor) throws Exception {\n  BufferAndBacklog next;\n  long expectedNextLong=0L;\n  int nextExpectedBacklog=numBuffers - 1;\n  while ((next=reader.getNextBuffer()) != null && next.buffer().isBuffer()) {\n    assertTrue(next.isDataAvailable());\n    assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n    ByteBuffer buffer=next.buffer().getNioBufferReadable();\n    if (compressionEnabled && next.buffer().isCompressed()) {\n      Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n      buffer=uncompressedBuffer.getNioBufferReadable();\n      uncompressedBuffer.recycleBuffer();\n    }\n    while (buffer.hasRemaining()) {\n      assertEquals(expectedNextLong++,buffer.getLong());\n    }\n    next.buffer().recycleBuffer();\n    nextExpectedBacklog--;\n  }\n  assertEquals(numLongs,expectedNextLong);\n  assertEquals(-1,nextExpectedBacklog);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 144,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 199,
        "startColumnNumber" : 15,
        "endLineNumber" : 199,
        "endColumnNumber" : 82
      },
      "nodeContext" : "(next=reader.getNextBuffer()) != null && next.buffer().isBuffer()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "org.apache.flink.runtime.io.network.buffer.Buffer"
  }, {
    "nodeContext" : "next.buffer()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 203,
      "startColumnNumber" : 32,
      "endLineNumber" : 203,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 203,
        "startColumnNumber" : 32,
        "endLineNumber" : 203,
        "endColumnNumber" : 68
      },
      "nodeContext" : "next.buffer().getNioBufferReadable()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 203,
        "startColumnNumber" : 23,
        "endLineNumber" : 203,
        "endColumnNumber" : 68
      },
      "nodeContext" : "buffer=next.buffer().getNioBufferReadable()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 203,
        "startColumnNumber" : 12,
        "endLineNumber" : 203,
        "endColumnNumber" : 69
      },
      "nodeContext" : "ByteBuffer buffer=next.buffer().getNioBufferReadable();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 739,
        "startLineNumber" : 199,
        "startColumnNumber" : 84,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertTrue(next.isDataAvailable());\n  assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n  ByteBuffer buffer=next.buffer().getNioBufferReadable();\n  if (compressionEnabled && next.buffer().isCompressed()) {\n    Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n    buffer=uncompressedBuffer.getNioBufferReadable();\n    uncompressedBuffer.recycleBuffer();\n  }\n  while (buffer.hasRemaining()) {\n    assertEquals(expectedNextLong++,buffer.getLong());\n  }\n  next.buffer().recycleBuffer();\n  nextExpectedBacklog--;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while ((next=reader.getNextBuffer()) != null && next.buffer().isBuffer()) {\n  assertTrue(next.isDataAvailable());\n  assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n  ByteBuffer buffer=next.buffer().getNioBufferReadable();\n  if (compressionEnabled && next.buffer().isCompressed()) {\n    Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n    buffer=uncompressedBuffer.getNioBufferReadable();\n    uncompressedBuffer.recycleBuffer();\n  }\n  while (buffer.hasRemaining()) {\n    assertEquals(expectedNextLong++,buffer.getLong());\n  }\n  next.buffer().recycleBuffer();\n  nextExpectedBacklog--;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1047,
        "startLineNumber" : 194,
        "startColumnNumber" : 29,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BufferAndBacklog next;\n  long expectedNextLong=0L;\n  int nextExpectedBacklog=numBuffers - 1;\n  while ((next=reader.getNextBuffer()) != null && next.buffer().isBuffer()) {\n    assertTrue(next.isDataAvailable());\n    assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n    ByteBuffer buffer=next.buffer().getNioBufferReadable();\n    if (compressionEnabled && next.buffer().isCompressed()) {\n      Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n      buffer=uncompressedBuffer.getNioBufferReadable();\n      uncompressedBuffer.recycleBuffer();\n    }\n    while (buffer.hasRemaining()) {\n      assertEquals(expectedNextLong++,buffer.getLong());\n    }\n    next.buffer().recycleBuffer();\n    nextExpectedBacklog--;\n  }\n  assertEquals(numLongs,expectedNextLong);\n  assertEquals(-1,nextExpectedBacklog);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1290,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void readLongs(ResultSubpartitionView reader,long numLongs,int numBuffers,boolean compressionEnabled,BufferDecompressor decompressor) throws Exception {\n  BufferAndBacklog next;\n  long expectedNextLong=0L;\n  int nextExpectedBacklog=numBuffers - 1;\n  while ((next=reader.getNextBuffer()) != null && next.buffer().isBuffer()) {\n    assertTrue(next.isDataAvailable());\n    assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n    ByteBuffer buffer=next.buffer().getNioBufferReadable();\n    if (compressionEnabled && next.buffer().isCompressed()) {\n      Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n      buffer=uncompressedBuffer.getNioBufferReadable();\n      uncompressedBuffer.recycleBuffer();\n    }\n    while (buffer.hasRemaining()) {\n      assertEquals(expectedNextLong++,buffer.getLong());\n    }\n    next.buffer().recycleBuffer();\n    nextExpectedBacklog--;\n  }\n  assertEquals(numLongs,expectedNextLong);\n  assertEquals(-1,nextExpectedBacklog);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 144,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 203,
        "startColumnNumber" : 12,
        "endLineNumber" : 203,
        "endColumnNumber" : 69
      },
      "nodeContext" : "ByteBuffer buffer=next.buffer().getNioBufferReadable();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.apache.flink.runtime.io.network.buffer.Buffer"
  }, {
    "nodeContext" : "next.buffer()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 204,
      "startColumnNumber" : 38,
      "endLineNumber" : 204,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 204,
        "startColumnNumber" : 38,
        "endLineNumber" : 204,
        "endColumnNumber" : 66
      },
      "nodeContext" : "next.buffer().isCompressed()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 204,
        "startColumnNumber" : 16,
        "endLineNumber" : 204,
        "endColumnNumber" : 66
      },
      "nodeContext" : "compressionEnabled && next.buffer().isCompressed()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 204,
        "startColumnNumber" : 12,
        "endLineNumber" : 209,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (compressionEnabled && next.buffer().isCompressed()) {\n  Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n  buffer=uncompressedBuffer.getNioBufferReadable();\n  uncompressedBuffer.recycleBuffer();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 739,
        "startLineNumber" : 199,
        "startColumnNumber" : 84,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertTrue(next.isDataAvailable());\n  assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n  ByteBuffer buffer=next.buffer().getNioBufferReadable();\n  if (compressionEnabled && next.buffer().isCompressed()) {\n    Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n    buffer=uncompressedBuffer.getNioBufferReadable();\n    uncompressedBuffer.recycleBuffer();\n  }\n  while (buffer.hasRemaining()) {\n    assertEquals(expectedNextLong++,buffer.getLong());\n  }\n  next.buffer().recycleBuffer();\n  nextExpectedBacklog--;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while ((next=reader.getNextBuffer()) != null && next.buffer().isBuffer()) {\n  assertTrue(next.isDataAvailable());\n  assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n  ByteBuffer buffer=next.buffer().getNioBufferReadable();\n  if (compressionEnabled && next.buffer().isCompressed()) {\n    Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n    buffer=uncompressedBuffer.getNioBufferReadable();\n    uncompressedBuffer.recycleBuffer();\n  }\n  while (buffer.hasRemaining()) {\n    assertEquals(expectedNextLong++,buffer.getLong());\n  }\n  next.buffer().recycleBuffer();\n  nextExpectedBacklog--;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1047,
        "startLineNumber" : 194,
        "startColumnNumber" : 29,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BufferAndBacklog next;\n  long expectedNextLong=0L;\n  int nextExpectedBacklog=numBuffers - 1;\n  while ((next=reader.getNextBuffer()) != null && next.buffer().isBuffer()) {\n    assertTrue(next.isDataAvailable());\n    assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n    ByteBuffer buffer=next.buffer().getNioBufferReadable();\n    if (compressionEnabled && next.buffer().isCompressed()) {\n      Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n      buffer=uncompressedBuffer.getNioBufferReadable();\n      uncompressedBuffer.recycleBuffer();\n    }\n    while (buffer.hasRemaining()) {\n      assertEquals(expectedNextLong++,buffer.getLong());\n    }\n    next.buffer().recycleBuffer();\n    nextExpectedBacklog--;\n  }\n  assertEquals(numLongs,expectedNextLong);\n  assertEquals(-1,nextExpectedBacklog);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1290,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void readLongs(ResultSubpartitionView reader,long numLongs,int numBuffers,boolean compressionEnabled,BufferDecompressor decompressor) throws Exception {\n  BufferAndBacklog next;\n  long expectedNextLong=0L;\n  int nextExpectedBacklog=numBuffers - 1;\n  while ((next=reader.getNextBuffer()) != null && next.buffer().isBuffer()) {\n    assertTrue(next.isDataAvailable());\n    assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n    ByteBuffer buffer=next.buffer().getNioBufferReadable();\n    if (compressionEnabled && next.buffer().isCompressed()) {\n      Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n      buffer=uncompressedBuffer.getNioBufferReadable();\n      uncompressedBuffer.recycleBuffer();\n    }\n    while (buffer.hasRemaining()) {\n      assertEquals(expectedNextLong++,buffer.getLong());\n    }\n    next.buffer().recycleBuffer();\n    nextExpectedBacklog--;\n  }\n  assertEquals(numLongs,expectedNextLong);\n  assertEquals(-1,nextExpectedBacklog);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 144,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 204,
        "startColumnNumber" : 16,
        "endLineNumber" : 204,
        "endColumnNumber" : 66
      },
      "nodeContext" : "compressionEnabled && next.buffer().isCompressed()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "org.apache.flink.runtime.io.network.buffer.Buffer"
  }, {
    "nodeContext" : "next.buffer()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 206,
      "startColumnNumber" : 68,
      "endLineNumber" : 206,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 206,
        "startColumnNumber" : 24,
        "endLineNumber" : 206,
        "endColumnNumber" : 82
      },
      "nodeContext" : "decompressor.decompressToIntermediateBuffer(next.buffer())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 205,
        "startColumnNumber" : 23,
        "endLineNumber" : 206,
        "endColumnNumber" : 82
      },
      "nodeContext" : "uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 205,
        "startColumnNumber" : 16,
        "endLineNumber" : 206,
        "endColumnNumber" : 83
      },
      "nodeContext" : "Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 263,
        "startLineNumber" : 204,
        "startColumnNumber" : 68,
        "endLineNumber" : 209,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n  buffer=uncompressedBuffer.getNioBufferReadable();\n  uncompressedBuffer.recycleBuffer();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 204,
        "startColumnNumber" : 12,
        "endLineNumber" : 209,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (compressionEnabled && next.buffer().isCompressed()) {\n  Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n  buffer=uncompressedBuffer.getNioBufferReadable();\n  uncompressedBuffer.recycleBuffer();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 739,
        "startLineNumber" : 199,
        "startColumnNumber" : 84,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertTrue(next.isDataAvailable());\n  assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n  ByteBuffer buffer=next.buffer().getNioBufferReadable();\n  if (compressionEnabled && next.buffer().isCompressed()) {\n    Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n    buffer=uncompressedBuffer.getNioBufferReadable();\n    uncompressedBuffer.recycleBuffer();\n  }\n  while (buffer.hasRemaining()) {\n    assertEquals(expectedNextLong++,buffer.getLong());\n  }\n  next.buffer().recycleBuffer();\n  nextExpectedBacklog--;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while ((next=reader.getNextBuffer()) != null && next.buffer().isBuffer()) {\n  assertTrue(next.isDataAvailable());\n  assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n  ByteBuffer buffer=next.buffer().getNioBufferReadable();\n  if (compressionEnabled && next.buffer().isCompressed()) {\n    Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n    buffer=uncompressedBuffer.getNioBufferReadable();\n    uncompressedBuffer.recycleBuffer();\n  }\n  while (buffer.hasRemaining()) {\n    assertEquals(expectedNextLong++,buffer.getLong());\n  }\n  next.buffer().recycleBuffer();\n  nextExpectedBacklog--;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1047,
        "startLineNumber" : 194,
        "startColumnNumber" : 29,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BufferAndBacklog next;\n  long expectedNextLong=0L;\n  int nextExpectedBacklog=numBuffers - 1;\n  while ((next=reader.getNextBuffer()) != null && next.buffer().isBuffer()) {\n    assertTrue(next.isDataAvailable());\n    assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n    ByteBuffer buffer=next.buffer().getNioBufferReadable();\n    if (compressionEnabled && next.buffer().isCompressed()) {\n      Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n      buffer=uncompressedBuffer.getNioBufferReadable();\n      uncompressedBuffer.recycleBuffer();\n    }\n    while (buffer.hasRemaining()) {\n      assertEquals(expectedNextLong++,buffer.getLong());\n    }\n    next.buffer().recycleBuffer();\n    nextExpectedBacklog--;\n  }\n  assertEquals(numLongs,expectedNextLong);\n  assertEquals(-1,nextExpectedBacklog);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1290,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void readLongs(ResultSubpartitionView reader,long numLongs,int numBuffers,boolean compressionEnabled,BufferDecompressor decompressor) throws Exception {\n  BufferAndBacklog next;\n  long expectedNextLong=0L;\n  int nextExpectedBacklog=numBuffers - 1;\n  while ((next=reader.getNextBuffer()) != null && next.buffer().isBuffer()) {\n    assertTrue(next.isDataAvailable());\n    assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n    ByteBuffer buffer=next.buffer().getNioBufferReadable();\n    if (compressionEnabled && next.buffer().isCompressed()) {\n      Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n      buffer=uncompressedBuffer.getNioBufferReadable();\n      uncompressedBuffer.recycleBuffer();\n    }\n    while (buffer.hasRemaining()) {\n      assertEquals(expectedNextLong++,buffer.getLong());\n    }\n    next.buffer().recycleBuffer();\n    nextExpectedBacklog--;\n  }\n  assertEquals(numLongs,expectedNextLong);\n  assertEquals(-1,nextExpectedBacklog);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 144,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 206,
        "startColumnNumber" : 24,
        "endLineNumber" : 206,
        "endColumnNumber" : 82
      },
      "nodeContext" : "decompressor.decompressToIntermediateBuffer(next.buffer())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "org.apache.flink.runtime.io.network.buffer.Buffer"
  }, {
    "nodeContext" : "next.buffer()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 214,
      "startColumnNumber" : 12,
      "endLineNumber" : 214,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 214,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 41
      },
      "nodeContext" : "next.buffer().recycleBuffer()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 214,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 42
      },
      "nodeContext" : "next.buffer().recycleBuffer();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 739,
        "startLineNumber" : 199,
        "startColumnNumber" : 84,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertTrue(next.isDataAvailable());\n  assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n  ByteBuffer buffer=next.buffer().getNioBufferReadable();\n  if (compressionEnabled && next.buffer().isCompressed()) {\n    Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n    buffer=uncompressedBuffer.getNioBufferReadable();\n    uncompressedBuffer.recycleBuffer();\n  }\n  while (buffer.hasRemaining()) {\n    assertEquals(expectedNextLong++,buffer.getLong());\n  }\n  next.buffer().recycleBuffer();\n  nextExpectedBacklog--;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while ((next=reader.getNextBuffer()) != null && next.buffer().isBuffer()) {\n  assertTrue(next.isDataAvailable());\n  assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n  ByteBuffer buffer=next.buffer().getNioBufferReadable();\n  if (compressionEnabled && next.buffer().isCompressed()) {\n    Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n    buffer=uncompressedBuffer.getNioBufferReadable();\n    uncompressedBuffer.recycleBuffer();\n  }\n  while (buffer.hasRemaining()) {\n    assertEquals(expectedNextLong++,buffer.getLong());\n  }\n  next.buffer().recycleBuffer();\n  nextExpectedBacklog--;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1047,
        "startLineNumber" : 194,
        "startColumnNumber" : 29,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BufferAndBacklog next;\n  long expectedNextLong=0L;\n  int nextExpectedBacklog=numBuffers - 1;\n  while ((next=reader.getNextBuffer()) != null && next.buffer().isBuffer()) {\n    assertTrue(next.isDataAvailable());\n    assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n    ByteBuffer buffer=next.buffer().getNioBufferReadable();\n    if (compressionEnabled && next.buffer().isCompressed()) {\n      Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n      buffer=uncompressedBuffer.getNioBufferReadable();\n      uncompressedBuffer.recycleBuffer();\n    }\n    while (buffer.hasRemaining()) {\n      assertEquals(expectedNextLong++,buffer.getLong());\n    }\n    next.buffer().recycleBuffer();\n    nextExpectedBacklog--;\n  }\n  assertEquals(numLongs,expectedNextLong);\n  assertEquals(-1,nextExpectedBacklog);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1290,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void readLongs(ResultSubpartitionView reader,long numLongs,int numBuffers,boolean compressionEnabled,BufferDecompressor decompressor) throws Exception {\n  BufferAndBacklog next;\n  long expectedNextLong=0L;\n  int nextExpectedBacklog=numBuffers - 1;\n  while ((next=reader.getNextBuffer()) != null && next.buffer().isBuffer()) {\n    assertTrue(next.isDataAvailable());\n    assertEquals(nextExpectedBacklog,next.buffersInBacklog());\n    ByteBuffer buffer=next.buffer().getNioBufferReadable();\n    if (compressionEnabled && next.buffer().isCompressed()) {\n      Buffer uncompressedBuffer=decompressor.decompressToIntermediateBuffer(next.buffer());\n      buffer=uncompressedBuffer.getNioBufferReadable();\n      uncompressedBuffer.recycleBuffer();\n    }\n    while (buffer.hasRemaining()) {\n      assertEquals(expectedNextLong++,buffer.getLong());\n    }\n    next.buffer().recycleBuffer();\n    nextExpectedBacklog--;\n  }\n  assertEquals(numLongs,expectedNextLong);\n  assertEquals(-1,nextExpectedBacklog);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 144,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 214,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 42
      },
      "nodeContext" : "next.buffer().recycleBuffer();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "org.apache.flink.runtime.io.network.buffer.Buffer"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 199,
    "startColumnNumber" : 58,
    "endLineNumber" : 199,
    "endColumnNumber" : 71
  }, {
    "charLength" : 13,
    "startLineNumber" : 203,
    "startColumnNumber" : 32,
    "endLineNumber" : 203,
    "endColumnNumber" : 45
  }, {
    "charLength" : 13,
    "startLineNumber" : 204,
    "startColumnNumber" : 38,
    "endLineNumber" : 204,
    "endColumnNumber" : 51
  }, {
    "charLength" : 13,
    "startLineNumber" : 206,
    "startColumnNumber" : 68,
    "endLineNumber" : 206,
    "endColumnNumber" : 81
  }, {
    "charLength" : 13,
    "startLineNumber" : 214,
    "startColumnNumber" : 12,
    "endLineNumber" : 214,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}