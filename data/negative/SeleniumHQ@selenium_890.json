{
  "id" : 890,
  "expression" : "writeLock",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "55273655c3d71590e7590a5c7e3f210b3576f617",
  "filePath" : "java/server/src/org/openqa/selenium/grid/distributor/local/LocalDistributor.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "writeLock",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 145,
      "startColumnNumber" : 4,
      "endLineNumber" : 145,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 145,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 20
      },
      "nodeContext" : "writeLock.lock()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 145,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "writeLock.lock();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1080,
        "startLineNumber" : 134,
        "startColumnNumber" : 70,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Node\",status);\n  Secret nodeSecret=status.getRegistrationSecret() == null ? null : new Secret(status.getRegistrationSecret());\n  if (!Objects.equals(registrationSecret,nodeSecret)) {\n    LOG.severe(String.format(\"Node at %s failed to send correct registration secret. Node NOT registered.\",status.getUri()));\n    bus.fire(new NodeRejectedEvent(status.getUri()));\n    return;\n  }\n  Lock writeLock=lock.writeLock();\n  writeLock.lock();\n  try {\n    if (nodes.containsKey(status.getId())) {\n      return;\n    }\n    Set<Capabilities> capabilities=status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet());\n    RemoteNode remoteNode=new RemoteNode(tracer,clientFactory,status.getId(),status.getUri(),registrationSecret,capabilities);\n    add(remoteNode);\n  }\n  finally {\n    writeLock.unlock();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1148,
        "startLineNumber" : 134,
        "startColumnNumber" : 2,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void register(Secret registrationSecret,NodeStatus status){\n  Require.nonNull(\"Node\",status);\n  Secret nodeSecret=status.getRegistrationSecret() == null ? null : new Secret(status.getRegistrationSecret());\n  if (!Objects.equals(registrationSecret,nodeSecret)) {\n    LOG.severe(String.format(\"Node at %s failed to send correct registration secret. Node NOT registered.\",status.getUri()));\n    bus.fire(new NodeRejectedEvent(status.getUri()));\n    return;\n  }\n  Lock writeLock=lock.writeLock();\n  writeLock.lock();\n  try {\n    if (nodes.containsKey(status.getId())) {\n      return;\n    }\n    Set<Capabilities> capabilities=status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet());\n    RemoteNode remoteNode=new RemoteNode(tracer,clientFactory,status.getId(),status.getUri(),registrationSecret,capabilities);\n    add(remoteNode);\n  }\n  finally {\n    writeLock.unlock();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 144,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 145,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "writeLock.lock();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.locks.Lock"
  }, {
    "nodeContext" : "writeLock",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 167,
      "startColumnNumber" : 6,
      "endLineNumber" : 167,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 167,
        "startColumnNumber" : 6,
        "endLineNumber" : 167,
        "endColumnNumber" : 24
      },
      "nodeContext" : "writeLock.unlock()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 167,
        "startColumnNumber" : 6,
        "endLineNumber" : 167,
        "endColumnNumber" : 25
      },
      "nodeContext" : "writeLock.unlock();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 166,
        "startColumnNumber" : 14,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  writeLock.unlock();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 590,
        "startLineNumber" : 146,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  if (nodes.containsKey(status.getId())) {\n    return;\n  }\n  Set<Capabilities> capabilities=status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet());\n  RemoteNode remoteNode=new RemoteNode(tracer,clientFactory,status.getId(),status.getUri(),registrationSecret,capabilities);\n  add(remoteNode);\n}\n  finally {\n  writeLock.unlock();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 65,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1080,
        "startLineNumber" : 134,
        "startColumnNumber" : 70,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Node\",status);\n  Secret nodeSecret=status.getRegistrationSecret() == null ? null : new Secret(status.getRegistrationSecret());\n  if (!Objects.equals(registrationSecret,nodeSecret)) {\n    LOG.severe(String.format(\"Node at %s failed to send correct registration secret. Node NOT registered.\",status.getUri()));\n    bus.fire(new NodeRejectedEvent(status.getUri()));\n    return;\n  }\n  Lock writeLock=lock.writeLock();\n  writeLock.lock();\n  try {\n    if (nodes.containsKey(status.getId())) {\n      return;\n    }\n    Set<Capabilities> capabilities=status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet());\n    RemoteNode remoteNode=new RemoteNode(tracer,clientFactory,status.getId(),status.getUri(),registrationSecret,capabilities);\n    add(remoteNode);\n  }\n  finally {\n    writeLock.unlock();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1148,
        "startLineNumber" : 134,
        "startColumnNumber" : 2,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void register(Secret registrationSecret,NodeStatus status){\n  Require.nonNull(\"Node\",status);\n  Secret nodeSecret=status.getRegistrationSecret() == null ? null : new Secret(status.getRegistrationSecret());\n  if (!Objects.equals(registrationSecret,nodeSecret)) {\n    LOG.severe(String.format(\"Node at %s failed to send correct registration secret. Node NOT registered.\",status.getUri()));\n    bus.fire(new NodeRejectedEvent(status.getUri()));\n    return;\n  }\n  Lock writeLock=lock.writeLock();\n  writeLock.lock();\n  try {\n    if (nodes.containsKey(status.getId())) {\n      return;\n    }\n    Set<Capabilities> capabilities=status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet());\n    RemoteNode remoteNode=new RemoteNode(tracer,clientFactory,status.getId(),status.getUri(),registrationSecret,capabilities);\n    add(remoteNode);\n  }\n  finally {\n    writeLock.unlock();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 144,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 167,
        "startColumnNumber" : 6,
        "endLineNumber" : 167,
        "endColumnNumber" : 25
      },
      "nodeContext" : "writeLock.unlock();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.locks.Lock"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 145,
    "startColumnNumber" : 4,
    "endLineNumber" : 145,
    "endColumnNumber" : 13
  }, {
    "charLength" : 9,
    "startLineNumber" : 167,
    "startColumnNumber" : 6,
    "endLineNumber" : 167,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}