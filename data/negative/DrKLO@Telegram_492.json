{
  "id" : 492,
  "expression" : "new ExifInterface(is)",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new ExifInterface(is)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 1242,
      "startColumnNumber" : 65,
      "endLineNumber" : 1242,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 1242,
        "startColumnNumber" : 58,
        "endLineNumber" : 1242,
        "endColumnNumber" : 86
      },
      "nodeContext" : "exif=new ExifInterface(is)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 1242,
        "startColumnNumber" : 44,
        "endLineNumber" : 1242,
        "endColumnNumber" : 87
      },
      "nodeContext" : "ExifInterface exif=new ExifInterface(is);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1019,
        "startLineNumber" : 1241,
        "startColumnNumber" : 44,
        "endLineNumber" : 1255,
        "endColumnNumber" : 41
      },
      "nodeContext" : "{\n  ExifInterface exif=new ExifInterface(is);\n  int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:    orientation=90;\n  break;\ncase ExifInterface.ORIENTATION_ROTATE_180:orientation=180;\nbreak;\ncase ExifInterface.ORIENTATION_ROTATE_270:orientation=270;\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1093,
        "startLineNumber" : 1241,
        "startColumnNumber" : 40,
        "endLineNumber" : 1257,
        "endColumnNumber" : 41
      },
      "nodeContext" : "try {\n  ExifInterface exif=new ExifInterface(is);\n  int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:    orientation=90;\n  break;\ncase ExifInterface.ORIENTATION_ROTATE_180:orientation=180;\nbreak;\ncase ExifInterface.ORIENTATION_ROTATE_270:orientation=270;\nbreak;\n}\n}\n catch (Throwable ignore) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 57,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1242,
        "startLineNumber" : 1240,
        "startColumnNumber" : 104,
        "endLineNumber" : 1259,
        "endColumnNumber" : 37
      },
      "nodeContext" : "{\n  try {\n    ExifInterface exif=new ExifInterface(is);\n    int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:      orientation=90;\n    break;\ncase ExifInterface.ORIENTATION_ROTATE_180:  orientation=180;\nbreak;\ncase ExifInterface.ORIENTATION_ROTATE_270:orientation=270;\nbreak;\n}\n}\n catch (Throwable ignore) {\n}\nis.getChannel().position(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1310,
        "startLineNumber" : 1240,
        "startColumnNumber" : 36,
        "endLineNumber" : 1259,
        "endColumnNumber" : 37
      },
      "nodeContext" : "if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n  try {\n    ExifInterface exif=new ExifInterface(is);\n    int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:      orientation=90;\n    break;\ncase ExifInterface.ORIENTATION_ROTATE_180:  orientation=180;\nbreak;\ncase ExifInterface.ORIENTATION_ROTATE_270:orientation=270;\nbreak;\n}\n}\n catch (Throwable ignore) {\n}\nis.getChannel().position(0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1919,
        "startLineNumber" : 1233,
        "startColumnNumber" : 39,
        "endLineNumber" : 1262,
        "endColumnNumber" : 33
      },
      "nodeContext" : "{\n  FileInputStream is;\n  if (inEncryptedFile) {\n    is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n  }\n else {\n    is=new FileInputStream(cacheFileFinal);\n  }\n  if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n    try {\n      ExifInterface exif=new ExifInterface(is);\n      int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:        orientation=90;\n      break;\ncase ExifInterface.ORIENTATION_ROTATE_180:    orientation=180;\n  break;\ncase ExifInterface.ORIENTATION_ROTATE_270:orientation=270;\nbreak;\n}\n}\n catch (Throwable ignore) {\n}\nis.getChannel().position(0);\n}\nimage=BitmapFactory.decodeStream(is,null,opts);\nis.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3850,
        "startLineNumber" : 1206,
        "startColumnNumber" : 32,
        "endLineNumber" : 1262,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (opts.inPurgeable || secureDocumentKey != null) {\n  RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n  int len=(int)f.length();\n  int offset=0;\n  byte[] bytes=bytesLocal.get();\n  byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n  if (data == null) {\n    bytes=data=new byte[len];\n    bytesLocal.set(bytes);\n  }\n  f.readFully(data,0,len);\n  f.close();\n  boolean error=false;\n  if (secureDocumentKey != null) {\n    EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n    byte[] hash=Utilities.computeSHA256(data,0,len);\n    if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n      error=true;\n    }\n    offset=(data[0] & 0xff);\n    len-=offset;\n  }\n else   if (inEncryptedFile) {\n    EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n  }\n  if (!error) {\n    image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n  }\n}\n else {\n  FileInputStream is;\n  if (inEncryptedFile) {\n    is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n  }\n else {\n    is=new FileInputStream(cacheFileFinal);\n  }\n  if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n    try {\n      ExifInterface exif=new ExifInterface(is);\n      int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:        orientation=90;\n      break;\ncase ExifInterface.ORIENTATION_ROTATE_180:    orientation=180;\n  break;\ncase ExifInterface.ORIENTATION_ROTATE_270:orientation=270;\nbreak;\n}\n}\n catch (Throwable ignore) {\n}\nis.getChannel().position(0);\n}\nimage=BitmapFactory.decodeStream(is,null,opts);\nis.close();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 293,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3914,
        "startLineNumber" : 1205,
        "startColumnNumber" : 35,
        "endLineNumber" : 1263,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  if (opts.inPurgeable || secureDocumentKey != null) {\n    RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n    int len=(int)f.length();\n    int offset=0;\n    byte[] bytes=bytesLocal.get();\n    byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n    if (data == null) {\n      bytes=data=new byte[len];\n      bytesLocal.set(bytes);\n    }\n    f.readFully(data,0,len);\n    f.close();\n    boolean error=false;\n    if (secureDocumentKey != null) {\n      EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n      byte[] hash=Utilities.computeSHA256(data,0,len);\n      if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n        error=true;\n      }\n      offset=(data[0] & 0xff);\n      len-=offset;\n    }\n else     if (inEncryptedFile) {\n      EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n    }\n    if (!error) {\n      image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n    }\n  }\n else {\n    FileInputStream is;\n    if (inEncryptedFile) {\n      is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n    }\n else {\n      is=new FileInputStream(cacheFileFinal);\n    }\n    if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n      try {\n        ExifInterface exif=new ExifInterface(is);\n        int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:          orientation=90;\n        break;\ncase ExifInterface.ORIENTATION_ROTATE_180:      orientation=180;\n    break;\ncase ExifInterface.ORIENTATION_ROTATE_270:  orientation=270;\nbreak;\n}\n}\n catch (Throwable ignore) {\n}\nis.getChannel().position(0);\n}\nimage=BitmapFactory.decodeStream(is,null,opts);\nis.close();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4766,
        "startLineNumber" : 1194,
        "startColumnNumber" : 28,
        "endLineNumber" : 1263,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (useNativeWebpLoader) {\n  RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n  ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n  BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n  bmOptions.inJustDecodeBounds=true;\n  Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n  image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n  Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n  file.close();\n}\n else {\n  if (opts.inPurgeable || secureDocumentKey != null) {\n    RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n    int len=(int)f.length();\n    int offset=0;\n    byte[] bytes=bytesLocal.get();\n    byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n    if (data == null) {\n      bytes=data=new byte[len];\n      bytesLocal.set(bytes);\n    }\n    f.readFully(data,0,len);\n    f.close();\n    boolean error=false;\n    if (secureDocumentKey != null) {\n      EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n      byte[] hash=Utilities.computeSHA256(data,0,len);\n      if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n        error=true;\n      }\n      offset=(data[0] & 0xff);\n      len-=offset;\n    }\n else     if (inEncryptedFile) {\n      EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n    }\n    if (!error) {\n      image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n    }\n  }\n else {\n    FileInputStream is;\n    if (inEncryptedFile) {\n      is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n    }\n else {\n      is=new FileInputStream(cacheFileFinal);\n    }\n    if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n      try {\n        ExifInterface exif=new ExifInterface(is);\n        int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:          orientation=90;\n        break;\ncase ExifInterface.ORIENTATION_ROTATE_180:      orientation=180;\n    break;\ncase ExifInterface.ORIENTATION_ROTATE_270:  orientation=270;\nbreak;\n}\n}\n catch (Throwable ignore) {\n}\nis.getChannel().position(0);\n}\nimage=BitmapFactory.decodeStream(is,null,opts);\nis.close();\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 390,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4822,
        "startLineNumber" : 1193,
        "startColumnNumber" : 43,
        "endLineNumber" : 1264,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (useNativeWebpLoader) {\n    RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n    ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n    BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n    bmOptions.inJustDecodeBounds=true;\n    Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n    image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n    Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n    file.close();\n  }\n else {\n    if (opts.inPurgeable || secureDocumentKey != null) {\n      RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n      int len=(int)f.length();\n      int offset=0;\n      byte[] bytes=bytesLocal.get();\n      byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n      if (data == null) {\n        bytes=data=new byte[len];\n        bytesLocal.set(bytes);\n      }\n      f.readFully(data,0,len);\n      f.close();\n      boolean error=false;\n      if (secureDocumentKey != null) {\n        EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n        byte[] hash=Utilities.computeSHA256(data,0,len);\n        if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n          error=true;\n        }\n        offset=(data[0] & 0xff);\n        len-=offset;\n      }\n else       if (inEncryptedFile) {\n        EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n      }\n      if (!error) {\n        image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n      }\n    }\n else {\n      FileInputStream is;\n      if (inEncryptedFile) {\n        is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n      }\n else {\n        is=new FileInputStream(cacheFileFinal);\n      }\n      if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n        try {\n          ExifInterface exif=new ExifInterface(is);\n          int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:            orientation=90;\n          break;\ncase ExifInterface.ORIENTATION_ROTATE_180:        orientation=180;\n      break;\ncase ExifInterface.ORIENTATION_ROTATE_270:    orientation=270;\n  break;\n}\n}\n catch (Throwable ignore) {\n}\nis.getChannel().position(0);\n}\nimage=BitmapFactory.decodeStream(is,null,opts);\nis.close();\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 391,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4841,
        "startLineNumber" : 1193,
        "startColumnNumber" : 24,
        "endLineNumber" : 1264,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (image == null) {\n  if (useNativeWebpLoader) {\n    RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n    ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n    BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n    bmOptions.inJustDecodeBounds=true;\n    Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n    image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n    Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n    file.close();\n  }\n else {\n    if (opts.inPurgeable || secureDocumentKey != null) {\n      RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n      int len=(int)f.length();\n      int offset=0;\n      byte[] bytes=bytesLocal.get();\n      byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n      if (data == null) {\n        bytes=data=new byte[len];\n        bytesLocal.set(bytes);\n      }\n      f.readFully(data,0,len);\n      f.close();\n      boolean error=false;\n      if (secureDocumentKey != null) {\n        EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n        byte[] hash=Utilities.computeSHA256(data,0,len);\n        if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n          error=true;\n        }\n        offset=(data[0] & 0xff);\n        len-=offset;\n      }\n else       if (inEncryptedFile) {\n        EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n      }\n      if (!error) {\n        image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n      }\n    }\n else {\n      FileInputStream is;\n      if (inEncryptedFile) {\n        is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n      }\n else {\n        is=new FileInputStream(cacheFileFinal);\n      }\n      if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n        try {\n          ExifInterface exif=new ExifInterface(is);\n          int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:            orientation=90;\n          break;\ncase ExifInterface.ORIENTATION_ROTATE_180:        orientation=180;\n      break;\ncase ExifInterface.ORIENTATION_ROTATE_270:    orientation=270;\n  break;\n}\n}\n catch (Throwable ignore) {\n}\nis.getChannel().position(0);\n}\nimage=BitmapFactory.decodeStream(is,null,opts);\nis.close();\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 395,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 10127,
        "startLineNumber" : 1164,
        "startColumnNumber" : 24,
        "endLineNumber" : 1321,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int delay=20;\n  if (mediaId != null) {\n    delay=0;\n  }\n  if (delay != 0 && lastCacheOutTime != 0 && lastCacheOutTime > System.currentTimeMillis() - delay && Build.VERSION.SDK_INT < 21) {\n    Thread.sleep(delay);\n  }\n  lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n    if (isCancelled) {\n      return;\n    }\n  }\n  if (force8888 || cacheImage.filter == null || blurType != 0 || cacheImage.imageLocation.path != null) {\n    opts.inPreferredConfig=Bitmap.Config.ARGB_8888;\n  }\n else {\n    opts.inPreferredConfig=Bitmap.Config.RGB_565;\n  }\n  opts.inDither=false;\n  if (mediaId != null && mediaThumbPath == null) {\n    if (mediaIsVideo) {\n      image=MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n    }\n else {\n      image=MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n    }\n  }\n  if (image == null) {\n    if (useNativeWebpLoader) {\n      RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n      ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n      BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n      bmOptions.inJustDecodeBounds=true;\n      Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n      image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n      Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n      file.close();\n    }\n else {\n      if (opts.inPurgeable || secureDocumentKey != null) {\n        RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n        int len=(int)f.length();\n        int offset=0;\n        byte[] bytes=bytesLocal.get();\n        byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n        if (data == null) {\n          bytes=data=new byte[len];\n          bytesLocal.set(bytes);\n        }\n        f.readFully(data,0,len);\n        f.close();\n        boolean error=false;\n        if (secureDocumentKey != null) {\n          EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n          byte[] hash=Utilities.computeSHA256(data,0,len);\n          if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n            error=true;\n          }\n          offset=(data[0] & 0xff);\n          len-=offset;\n        }\n else         if (inEncryptedFile) {\n          EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n        }\n        if (!error) {\n          image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n        }\n      }\n else {\n        FileInputStream is;\n        if (inEncryptedFile) {\n          is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n        }\n else {\n          is=new FileInputStream(cacheFileFinal);\n        }\n        if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n          try {\n            ExifInterface exif=new ExifInterface(is);\n            int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:              orientation=90;\n            break;\ncase ExifInterface.ORIENTATION_ROTATE_180:          orientation=180;\n        break;\ncase ExifInterface.ORIENTATION_ROTATE_270:      orientation=270;\n    break;\n}\n}\n catch (Throwable ignore) {\n}\nis.getChannel().position(0);\n}\nimage=BitmapFactory.decodeStream(is,null,opts);\nis.close();\n}\n}\n}\nif (image == null) {\nif (canDeleteFile && (cacheFileFinal.length() == 0 || cacheImage.filter == null)) {\ncacheFileFinal.delete();\n}\n}\n else {\nboolean blured=false;\nif (cacheImage.filter != null) {\nfloat bitmapW=image.getWidth();\nfloat bitmapH=image.getHeight();\nif (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\nBitmap scaledBitmap;\nif (bitmapW > bitmapH && w_filter > h_filter) {\nfloat scaleFactor=bitmapW / w_filter;\nif (scaleFactor > 1) {\nscaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n}\n else {\nscaledBitmap=image;\n}\n}\n else {\nfloat scaleFactor=bitmapH / h_filter;\nif (scaleFactor > 1) {\nscaledBitmap=Bitmaps.createScaledBitmap(image,(int)(bitmapW / scaleFactor),(int)h_filter,true);\n}\n else {\nscaledBitmap=image;\n}\n}\nif (image != scaledBitmap) {\nimage.recycle();\nimage=scaledBitmap;\n}\n}\nif (image != null) {\nif (checkInversion) {\nBitmap b=image;\nint w=image.getWidth();\nint h=image.getHeight();\nif (w * h > 150 * 150) {\nb=Bitmaps.createScaledBitmap(image,100,100,false);\n}\nneedInvert=Utilities.needInvert(b,opts.inPurgeable ? 0 : 1,b.getWidth(),b.getHeight(),b.getRowBytes()) != 0;\nif (b != image) {\nb.recycle();\n}\n}\nif (blurType != 0 && bitmapH < 100 && bitmapW < 100) {\nif (image.getConfig() == Bitmap.Config.ARGB_8888) {\nUtilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n}\nblured=true;\n}\n}\n}\nif (!blured && opts.inPurgeable) {\nUtilities.pinBitmap(image);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 872,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10181,
        "startLineNumber" : 1164,
        "startColumnNumber" : 20,
        "endLineNumber" : 1323,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  int delay=20;\n  if (mediaId != null) {\n    delay=0;\n  }\n  if (delay != 0 && lastCacheOutTime != 0 && lastCacheOutTime > System.currentTimeMillis() - delay && Build.VERSION.SDK_INT < 21) {\n    Thread.sleep(delay);\n  }\n  lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n    if (isCancelled) {\n      return;\n    }\n  }\n  if (force8888 || cacheImage.filter == null || blurType != 0 || cacheImage.imageLocation.path != null) {\n    opts.inPreferredConfig=Bitmap.Config.ARGB_8888;\n  }\n else {\n    opts.inPreferredConfig=Bitmap.Config.RGB_565;\n  }\n  opts.inDither=false;\n  if (mediaId != null && mediaThumbPath == null) {\n    if (mediaIsVideo) {\n      image=MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n    }\n else {\n      image=MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n    }\n  }\n  if (image == null) {\n    if (useNativeWebpLoader) {\n      RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n      ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n      BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n      bmOptions.inJustDecodeBounds=true;\n      Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n      image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n      Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n      file.close();\n    }\n else {\n      if (opts.inPurgeable || secureDocumentKey != null) {\n        RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n        int len=(int)f.length();\n        int offset=0;\n        byte[] bytes=bytesLocal.get();\n        byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n        if (data == null) {\n          bytes=data=new byte[len];\n          bytesLocal.set(bytes);\n        }\n        f.readFully(data,0,len);\n        f.close();\n        boolean error=false;\n        if (secureDocumentKey != null) {\n          EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n          byte[] hash=Utilities.computeSHA256(data,0,len);\n          if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n            error=true;\n          }\n          offset=(data[0] & 0xff);\n          len-=offset;\n        }\n else         if (inEncryptedFile) {\n          EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n        }\n        if (!error) {\n          image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n        }\n      }\n else {\n        FileInputStream is;\n        if (inEncryptedFile) {\n          is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n        }\n else {\n          is=new FileInputStream(cacheFileFinal);\n        }\n        if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n          try {\n            ExifInterface exif=new ExifInterface(is);\n            int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:              orientation=90;\n            break;\ncase ExifInterface.ORIENTATION_ROTATE_180:          orientation=180;\n        break;\ncase ExifInterface.ORIENTATION_ROTATE_270:      orientation=270;\n    break;\n}\n}\n catch (Throwable ignore) {\n}\nis.getChannel().position(0);\n}\nimage=BitmapFactory.decodeStream(is,null,opts);\nis.close();\n}\n}\n}\nif (image == null) {\nif (canDeleteFile && (cacheFileFinal.length() == 0 || cacheImage.filter == null)) {\ncacheFileFinal.delete();\n}\n}\n else {\nboolean blured=false;\nif (cacheImage.filter != null) {\nfloat bitmapW=image.getWidth();\nfloat bitmapH=image.getHeight();\nif (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\nBitmap scaledBitmap;\nif (bitmapW > bitmapH && w_filter > h_filter) {\nfloat scaleFactor=bitmapW / w_filter;\nif (scaleFactor > 1) {\nscaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n}\n else {\nscaledBitmap=image;\n}\n}\n else {\nfloat scaleFactor=bitmapH / h_filter;\nif (scaleFactor > 1) {\nscaledBitmap=Bitmaps.createScaledBitmap(image,(int)(bitmapW / scaleFactor),(int)h_filter,true);\n}\n else {\nscaledBitmap=image;\n}\n}\nif (image != scaledBitmap) {\nimage.recycle();\nimage=scaledBitmap;\n}\n}\nif (image != null) {\nif (checkInversion) {\nBitmap b=image;\nint w=image.getWidth();\nint h=image.getHeight();\nif (w * h > 150 * 150) {\nb=Bitmaps.createScaledBitmap(image,100,100,false);\n}\nneedInvert=Utilities.needInvert(b,opts.inPurgeable ? 0 : 1,b.getWidth(),b.getHeight(),b.getRowBytes()) != 0;\nif (b != image) {\nb.recycle();\n}\n}\nif (blurType != 0 && bitmapH < 100 && bitmapW < 100) {\nif (image.getConfig() == Bitmap.Config.ARGB_8888) {\nUtilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n}\nblured=true;\n}\n}\n}\nif (!blured && opts.inPurgeable) {\nUtilities.pinBitmap(image);\n}\n}\n}\n catch (Throwable ignore) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 879,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 10221,
        "startLineNumber" : 1163,
        "startColumnNumber" : 23,
        "endLineNumber" : 1324,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  try {\n    int delay=20;\n    if (mediaId != null) {\n      delay=0;\n    }\n    if (delay != 0 && lastCacheOutTime != 0 && lastCacheOutTime > System.currentTimeMillis() - delay && Build.VERSION.SDK_INT < 21) {\n      Thread.sleep(delay);\n    }\n    lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n      if (isCancelled) {\n        return;\n      }\n    }\n    if (force8888 || cacheImage.filter == null || blurType != 0 || cacheImage.imageLocation.path != null) {\n      opts.inPreferredConfig=Bitmap.Config.ARGB_8888;\n    }\n else {\n      opts.inPreferredConfig=Bitmap.Config.RGB_565;\n    }\n    opts.inDither=false;\n    if (mediaId != null && mediaThumbPath == null) {\n      if (mediaIsVideo) {\n        image=MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n      }\n else {\n        image=MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n      }\n    }\n    if (image == null) {\n      if (useNativeWebpLoader) {\n        RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n        ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n        BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n        bmOptions.inJustDecodeBounds=true;\n        Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n        image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n        Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n        file.close();\n      }\n else {\n        if (opts.inPurgeable || secureDocumentKey != null) {\n          RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n          int len=(int)f.length();\n          int offset=0;\n          byte[] bytes=bytesLocal.get();\n          byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n          if (data == null) {\n            bytes=data=new byte[len];\n            bytesLocal.set(bytes);\n          }\n          f.readFully(data,0,len);\n          f.close();\n          boolean error=false;\n          if (secureDocumentKey != null) {\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n            byte[] hash=Utilities.computeSHA256(data,0,len);\n            if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n              error=true;\n            }\n            offset=(data[0] & 0xff);\n            len-=offset;\n          }\n else           if (inEncryptedFile) {\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n          }\n          if (!error) {\n            image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n          }\n        }\n else {\n          FileInputStream is;\n          if (inEncryptedFile) {\n            is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n          }\n else {\n            is=new FileInputStream(cacheFileFinal);\n          }\n          if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n            try {\n              ExifInterface exif=new ExifInterface(is);\n              int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:                orientation=90;\n              break;\ncase ExifInterface.ORIENTATION_ROTATE_180:            orientation=180;\n          break;\ncase ExifInterface.ORIENTATION_ROTATE_270:        orientation=270;\n      break;\n  }\n}\n catch (Throwable ignore) {\n}\nis.getChannel().position(0);\n}\nimage=BitmapFactory.decodeStream(is,null,opts);\nis.close();\n}\n}\n}\nif (image == null) {\nif (canDeleteFile && (cacheFileFinal.length() == 0 || cacheImage.filter == null)) {\ncacheFileFinal.delete();\n}\n}\n else {\nboolean blured=false;\nif (cacheImage.filter != null) {\nfloat bitmapW=image.getWidth();\nfloat bitmapH=image.getHeight();\nif (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\nBitmap scaledBitmap;\nif (bitmapW > bitmapH && w_filter > h_filter) {\nfloat scaleFactor=bitmapW / w_filter;\nif (scaleFactor > 1) {\n  scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n}\n else {\n  scaledBitmap=image;\n}\n}\n else {\nfloat scaleFactor=bitmapH / h_filter;\nif (scaleFactor > 1) {\n  scaledBitmap=Bitmaps.createScaledBitmap(image,(int)(bitmapW / scaleFactor),(int)h_filter,true);\n}\n else {\n  scaledBitmap=image;\n}\n}\nif (image != scaledBitmap) {\nimage.recycle();\nimage=scaledBitmap;\n}\n}\nif (image != null) {\nif (checkInversion) {\nBitmap b=image;\nint w=image.getWidth();\nint h=image.getHeight();\nif (w * h > 150 * 150) {\n  b=Bitmaps.createScaledBitmap(image,100,100,false);\n}\nneedInvert=Utilities.needInvert(b,opts.inPurgeable ? 0 : 1,b.getWidth(),b.getHeight(),b.getRowBytes()) != 0;\nif (b != image) {\n  b.recycle();\n}\n}\nif (blurType != 0 && bitmapH < 100 && bitmapW < 100) {\nif (image.getConfig() == Bitmap.Config.ARGB_8888) {\n  Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n}\nblured=true;\n}\n}\n}\nif (!blured && opts.inPurgeable) {\nUtilities.pinBitmap(image);\n}\n}\n}\n catch (Throwable ignore) {\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 880,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16777,
        "startLineNumber" : 1062,
        "startColumnNumber" : 16,
        "endLineNumber" : 1324,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n  try {\n    lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n      if (isCancelled) {\n        return;\n      }\n    }\n    if (useNativeWebpLoader) {\n      RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n      ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n      BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n      bmOptions.inJustDecodeBounds=true;\n      Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n      image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n      Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n      file.close();\n    }\n else {\n      if (opts.inPurgeable || secureDocumentKey != null) {\n        RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n        int len=(int)f.length();\n        int offset=0;\n        byte[] bytesThumb=bytesThumbLocal.get();\n        byte[] data=bytesThumb != null && bytesThumb.length >= len ? bytesThumb : null;\n        if (data == null) {\n          bytesThumb=data=new byte[len];\n          bytesThumbLocal.set(bytesThumb);\n        }\n        f.readFully(data,0,len);\n        f.close();\n        boolean error=false;\n        if (secureDocumentKey != null) {\n          EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n          byte[] hash=Utilities.computeSHA256(data,0,len);\n          if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n            error=true;\n          }\n          offset=(data[0] & 0xff);\n          len-=offset;\n        }\n else         if (inEncryptedFile) {\n          EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n        }\n        if (!error) {\n          image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n        }\n      }\n else {\n        FileInputStream is;\n        if (inEncryptedFile) {\n          is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n        }\n else {\n          is=new FileInputStream(cacheFileFinal);\n        }\n        image=BitmapFactory.decodeStream(is,null,opts);\n        is.close();\n      }\n    }\n    if (image == null) {\n      if (cacheFileFinal.length() == 0 || cacheImage.filter == null) {\n        cacheFileFinal.delete();\n      }\n    }\n else {\n      if (cacheImage.filter != null) {\n        float bitmapW=image.getWidth();\n        float bitmapH=image.getHeight();\n        if (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\n          float scaleFactor=bitmapW / w_filter;\n          Bitmap scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n          if (image != scaledBitmap) {\n            image.recycle();\n            image=scaledBitmap;\n          }\n        }\n      }\n      if (checkInversion) {\n        needInvert=Utilities.needInvert(image,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes()) != 0;\n      }\n      if (blurType == 1) {\n        if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n          Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n        }\n      }\n else       if (blurType == 2) {\n        if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n          Utilities.blurBitmap(image,1,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n        }\n      }\n else       if (blurType == 3) {\n        if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n          Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n        }\n      }\n else       if (blurType == 0 && opts.inPurgeable) {\n        Utilities.pinBitmap(image);\n      }\n    }\n  }\n catch (  Throwable e) {\n    FileLog.e(e);\n  }\n}\n else {\n  try {\n    int delay=20;\n    if (mediaId != null) {\n      delay=0;\n    }\n    if (delay != 0 && lastCacheOutTime != 0 && lastCacheOutTime > System.currentTimeMillis() - delay && Build.VERSION.SDK_INT < 21) {\n      Thread.sleep(delay);\n    }\n    lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n      if (isCancelled) {\n        return;\n      }\n    }\n    if (force8888 || cacheImage.filter == null || blurType != 0 || cacheImage.imageLocation.path != null) {\n      opts.inPreferredConfig=Bitmap.Config.ARGB_8888;\n    }\n else {\n      opts.inPreferredConfig=Bitmap.Config.RGB_565;\n    }\n    opts.inDither=false;\n    if (mediaId != null && mediaThumbPath == null) {\n      if (mediaIsVideo) {\n        image=MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n      }\n else {\n        image=MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n      }\n    }\n    if (image == null) {\n      if (useNativeWebpLoader) {\n        RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n        ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n        BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n        bmOptions.inJustDecodeBounds=true;\n        Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n        image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n        Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n        file.close();\n      }\n else {\n        if (opts.inPurgeable || secureDocumentKey != null) {\n          RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n          int len=(int)f.length();\n          int offset=0;\n          byte[] bytes=bytesLocal.get();\n          byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n          if (data == null) {\n            bytes=data=new byte[len];\n            bytesLocal.set(bytes);\n          }\n          f.readFully(data,0,len);\n          f.close();\n          boolean error=false;\n          if (secureDocumentKey != null) {\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n            byte[] hash=Utilities.computeSHA256(data,0,len);\n            if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n              error=true;\n            }\n            offset=(data[0] & 0xff);\n            len-=offset;\n          }\n else           if (inEncryptedFile) {\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n          }\n          if (!error) {\n            image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n          }\n        }\n else {\n          FileInputStream is;\n          if (inEncryptedFile) {\n            is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n          }\n else {\n            is=new FileInputStream(cacheFileFinal);\n          }\n          if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n            try {\n              ExifInterface exif=new ExifInterface(is);\n              int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:                orientation=90;\n              break;\ncase ExifInterface.ORIENTATION_ROTATE_180:            orientation=180;\n          break;\ncase ExifInterface.ORIENTATION_ROTATE_270:        orientation=270;\n      break;\n  }\n}\n catch (Throwable ignore) {\n}\nis.getChannel().position(0);\n}\nimage=BitmapFactory.decodeStream(is,null,opts);\nis.close();\n}\n}\n}\nif (image == null) {\nif (canDeleteFile && (cacheFileFinal.length() == 0 || cacheImage.filter == null)) {\ncacheFileFinal.delete();\n}\n}\n else {\nboolean blured=false;\nif (cacheImage.filter != null) {\nfloat bitmapW=image.getWidth();\nfloat bitmapH=image.getHeight();\nif (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\nBitmap scaledBitmap;\nif (bitmapW > bitmapH && w_filter > h_filter) {\nfloat scaleFactor=bitmapW / w_filter;\nif (scaleFactor > 1) {\n  scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n}\n else {\n  scaledBitmap=image;\n}\n}\n else {\nfloat scaleFactor=bitmapH / h_filter;\nif (scaleFactor > 1) {\n  scaledBitmap=Bitmaps.createScaledBitmap(image,(int)(bitmapW / scaleFactor),(int)h_filter,true);\n}\n else {\n  scaledBitmap=image;\n}\n}\nif (image != scaledBitmap) {\nimage.recycle();\nimage=scaledBitmap;\n}\n}\nif (image != null) {\nif (checkInversion) {\nBitmap b=image;\nint w=image.getWidth();\nint h=image.getHeight();\nif (w * h > 150 * 150) {\n  b=Bitmaps.createScaledBitmap(image,100,100,false);\n}\nneedInvert=Utilities.needInvert(b,opts.inPurgeable ? 0 : 1,b.getWidth(),b.getHeight(),b.getRowBytes()) != 0;\nif (b != image) {\n  b.recycle();\n}\n}\nif (blurType != 0 && bitmapH < 100 && bitmapW < 100) {\nif (image.getConfig() == Bitmap.Config.ARGB_8888) {\n  Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n}\nblured=true;\n}\n}\n}\nif (!blured && opts.inPurgeable) {\nUtilities.pinBitmap(image);\n}\n}\n}\n catch (Throwable ignore) {\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1526,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 28003,
        "startLineNumber" : 859,
        "startColumnNumber" : 19,
        "endLineNumber" : 1331,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long mediaId=null;\n  boolean mediaIsVideo=false;\n  Bitmap image=null;\n  boolean needInvert=false;\n  int orientation=0;\n  File cacheFileFinal=cacheImage.finalFilePath;\n  boolean inEncryptedFile=cacheImage.secureDocument != null || cacheImage.encryptionKeyPath != null && cacheFileFinal != null && cacheFileFinal.getAbsolutePath().endsWith(\".enc\");\n  SecureDocumentKey secureDocumentKey;\n  byte[] secureDocumentHash;\n  if (cacheImage.secureDocument != null) {\n    secureDocumentKey=cacheImage.secureDocument.secureDocumentKey;\n    if (cacheImage.secureDocument.secureFile != null && cacheImage.secureDocument.secureFile.file_hash != null) {\n      secureDocumentHash=cacheImage.secureDocument.secureFile.file_hash;\n    }\n else {\n      secureDocumentHash=cacheImage.secureDocument.fileHash;\n    }\n  }\n else {\n    secureDocumentKey=null;\n    secureDocumentHash=null;\n  }\n  boolean canDeleteFile=true;\n  boolean useNativeWebpLoader=false;\n  if (Build.VERSION.SDK_INT < 19) {\n    RandomAccessFile randomAccessFile=null;\n    try {\n      randomAccessFile=new RandomAccessFile(cacheFileFinal,\"r\");\n      byte[] bytes;\n      if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n        bytes=headerThumb;\n      }\n else {\n        bytes=header;\n      }\n      randomAccessFile.readFully(bytes,0,bytes.length);\n      String str=new String(bytes).toLowerCase();\n      str=str.toLowerCase();\n      if (str.startsWith(\"riff\") && str.endsWith(\"webp\")) {\n        useNativeWebpLoader=true;\n      }\n      randomAccessFile.close();\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n finally {\n      if (randomAccessFile != null) {\n        try {\n          randomAccessFile.close();\n        }\n catch (        Exception e) {\n          FileLog.e(e);\n        }\n      }\n    }\n  }\n  String mediaThumbPath=null;\n  if (cacheImage.imageLocation.path != null) {\n    String location=cacheImage.imageLocation.path;\n    if (location.startsWith(\"thumb://\")) {\n      int idx=location.indexOf(\":\",8);\n      if (idx >= 0) {\n        mediaId=Long.parseLong(location.substring(8,idx));\n        mediaIsVideo=false;\n        mediaThumbPath=location.substring(idx + 1);\n      }\n      canDeleteFile=false;\n    }\n else     if (location.startsWith(\"vthumb://\")) {\n      int idx=location.indexOf(\":\",9);\n      if (idx >= 0) {\n        mediaId=Long.parseLong(location.substring(9,idx));\n        mediaIsVideo=true;\n      }\n      canDeleteFile=false;\n    }\n else     if (!location.startsWith(\"http\")) {\n      canDeleteFile=false;\n    }\n  }\n  BitmapFactory.Options opts=new BitmapFactory.Options();\n  opts.inSampleSize=1;\n  if (Build.VERSION.SDK_INT < 21) {\n    opts.inPurgeable=true;\n  }\n  float w_filter=0;\n  float h_filter=0;\n  int blurType=0;\n  boolean checkInversion=false;\n  boolean force8888=canForce8888;\n  try {\n    if (cacheImage.filter != null) {\n      String[] args=cacheImage.filter.split(\"_\");\n      if (args.length >= 2) {\n        w_filter=Float.parseFloat(args[0]) * AndroidUtilities.density;\n        h_filter=Float.parseFloat(args[1]) * AndroidUtilities.density;\n      }\n      if (cacheImage.filter.contains(\"b2\")) {\n        blurType=3;\n      }\n else       if (cacheImage.filter.contains(\"b1\")) {\n        blurType=2;\n      }\n else       if (cacheImage.filter.contains(\"b\")) {\n        blurType=1;\n      }\n      if (cacheImage.filter.contains(\"i\")) {\n        checkInversion=true;\n      }\n      if (cacheImage.filter.contains(\"f\")) {\n        force8888=true;\n      }\n      if (!useNativeWebpLoader && w_filter != 0 && h_filter != 0) {\n        opts.inJustDecodeBounds=true;\n        if (mediaId != null && mediaThumbPath == null) {\n          if (mediaIsVideo) {\n            MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n          }\n else {\n            MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n          }\n        }\n else {\n          if (secureDocumentKey != null) {\n            RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n            int len=(int)f.length();\n            byte[] bytes=bytesLocal.get();\n            byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n            if (data == null) {\n              bytes=data=new byte[len];\n              bytesLocal.set(bytes);\n            }\n            f.readFully(data,0,len);\n            f.close();\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n            byte[] hash=Utilities.computeSHA256(data,0,len);\n            boolean error=false;\n            if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n              error=true;\n            }\n            int offset=(data[0] & 0xff);\n            len-=offset;\n            if (!error) {\n              BitmapFactory.decodeByteArray(data,offset,len,opts);\n            }\n          }\n else {\n            FileInputStream is;\n            if (inEncryptedFile) {\n              is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n            }\n else {\n              is=new FileInputStream(cacheFileFinal);\n            }\n            BitmapFactory.decodeStream(is,null,opts);\n            is.close();\n          }\n        }\n        float photoW=opts.outWidth;\n        float photoH=opts.outHeight;\n        float scaleFactor;\n        if (w_filter >= h_filter && photoW > photoH) {\n          scaleFactor=Math.max(photoW / w_filter,photoH / h_filter);\n        }\n else {\n          scaleFactor=Math.min(photoW / w_filter,photoH / h_filter);\n        }\n        if (scaleFactor < 1.2f) {\n          scaleFactor=1;\n        }\n        opts.inJustDecodeBounds=false;\n        if (scaleFactor > 1.0f && (photoW > w_filter || photoH > h_filter)) {\n          int sample=1;\n          do {\n            sample*=2;\n          }\n while (sample * 2 < scaleFactor);\n          opts.inSampleSize=sample;\n        }\n else {\n          opts.inSampleSize=(int)scaleFactor;\n        }\n      }\n    }\n else     if (mediaThumbPath != null) {\n      opts.inJustDecodeBounds=true;\n      opts.inPreferredConfig=force8888 ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;\n      FileInputStream is=new FileInputStream(cacheFileFinal);\n      image=BitmapFactory.decodeStream(is,null,opts);\n      is.close();\n      int photoW2=opts.outWidth;\n      int photoH2=opts.outHeight;\n      opts.inJustDecodeBounds=false;\n      int screenSize=Math.max(66,Math.min(AndroidUtilities.getRealScreenSize().x,AndroidUtilities.getRealScreenSize().y));\n      float scaleFactor=(Math.min(photoH2,photoW2) / (float)screenSize) * 6f;\n      if (scaleFactor < 1) {\n        scaleFactor=1;\n      }\n      if (scaleFactor > 1.0f) {\n        int sample=1;\n        do {\n          sample*=2;\n        }\n while (sample * 2 <= scaleFactor);\n        opts.inSampleSize=sample;\n      }\n else {\n        opts.inSampleSize=(int)scaleFactor;\n      }\n    }\n  }\n catch (  Throwable e) {\n    FileLog.e(e);\n  }\n  if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n    try {\n      lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n        if (isCancelled) {\n          return;\n        }\n      }\n      if (useNativeWebpLoader) {\n        RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n        ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n        BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n        bmOptions.inJustDecodeBounds=true;\n        Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n        image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n        Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n        file.close();\n      }\n else {\n        if (opts.inPurgeable || secureDocumentKey != null) {\n          RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n          int len=(int)f.length();\n          int offset=0;\n          byte[] bytesThumb=bytesThumbLocal.get();\n          byte[] data=bytesThumb != null && bytesThumb.length >= len ? bytesThumb : null;\n          if (data == null) {\n            bytesThumb=data=new byte[len];\n            bytesThumbLocal.set(bytesThumb);\n          }\n          f.readFully(data,0,len);\n          f.close();\n          boolean error=false;\n          if (secureDocumentKey != null) {\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n            byte[] hash=Utilities.computeSHA256(data,0,len);\n            if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n              error=true;\n            }\n            offset=(data[0] & 0xff);\n            len-=offset;\n          }\n else           if (inEncryptedFile) {\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n          }\n          if (!error) {\n            image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n          }\n        }\n else {\n          FileInputStream is;\n          if (inEncryptedFile) {\n            is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n          }\n else {\n            is=new FileInputStream(cacheFileFinal);\n          }\n          image=BitmapFactory.decodeStream(is,null,opts);\n          is.close();\n        }\n      }\n      if (image == null) {\n        if (cacheFileFinal.length() == 0 || cacheImage.filter == null) {\n          cacheFileFinal.delete();\n        }\n      }\n else {\n        if (cacheImage.filter != null) {\n          float bitmapW=image.getWidth();\n          float bitmapH=image.getHeight();\n          if (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\n            float scaleFactor=bitmapW / w_filter;\n            Bitmap scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n            if (image != scaledBitmap) {\n              image.recycle();\n              image=scaledBitmap;\n            }\n          }\n        }\n        if (checkInversion) {\n          needInvert=Utilities.needInvert(image,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes()) != 0;\n        }\n        if (blurType == 1) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 2) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,1,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 3) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 0 && opts.inPurgeable) {\n          Utilities.pinBitmap(image);\n        }\n      }\n    }\n catch (    Throwable e) {\n      FileLog.e(e);\n    }\n  }\n else {\n    try {\n      int delay=20;\n      if (mediaId != null) {\n        delay=0;\n      }\n      if (delay != 0 && lastCacheOutTime != 0 && lastCacheOutTime > System.currentTimeMillis() - delay && Build.VERSION.SDK_INT < 21) {\n        Thread.sleep(delay);\n      }\n      lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n        if (isCancelled) {\n          return;\n        }\n      }\n      if (force8888 || cacheImage.filter == null || blurType != 0 || cacheImage.imageLocation.path != null) {\n        opts.inPreferredConfig=Bitmap.Config.ARGB_8888;\n      }\n else {\n        opts.inPreferredConfig=Bitmap.Config.RGB_565;\n      }\n      opts.inDither=false;\n      if (mediaId != null && mediaThumbPath == null) {\n        if (mediaIsVideo) {\n          image=MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n        }\n else {\n          image=MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n        }\n      }\n      if (image == null) {\n        if (useNativeWebpLoader) {\n          RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n          ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n          BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n          bmOptions.inJustDecodeBounds=true;\n          Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n          image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n          Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n          file.close();\n        }\n else {\n          if (opts.inPurgeable || secureDocumentKey != null) {\n            RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n            int len=(int)f.length();\n            int offset=0;\n            byte[] bytes=bytesLocal.get();\n            byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n            if (data == null) {\n              bytes=data=new byte[len];\n              bytesLocal.set(bytes);\n            }\n            f.readFully(data,0,len);\n            f.close();\n            boolean error=false;\n            if (secureDocumentKey != null) {\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n              byte[] hash=Utilities.computeSHA256(data,0,len);\n              if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n                error=true;\n              }\n              offset=(data[0] & 0xff);\n              len-=offset;\n            }\n else             if (inEncryptedFile) {\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n            }\n            if (!error) {\n              image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n            }\n          }\n else {\n            FileInputStream is;\n            if (inEncryptedFile) {\n              is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n            }\n else {\n              is=new FileInputStream(cacheFileFinal);\n            }\n            if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n              try {\n                ExifInterface exif=new ExifInterface(is);\n                int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:                  orientation=90;\n                break;\ncase ExifInterface.ORIENTATION_ROTATE_180:              orientation=180;\n            break;\ncase ExifInterface.ORIENTATION_ROTATE_270:          orientation=270;\n        break;\n    }\n  }\n catch (  Throwable ignore) {\n  }\n  is.getChannel().position(0);\n}\nimage=BitmapFactory.decodeStream(is,null,opts);\nis.close();\n}\n}\n}\nif (image == null) {\nif (canDeleteFile && (cacheFileFinal.length() == 0 || cacheImage.filter == null)) {\ncacheFileFinal.delete();\n}\n}\n else {\nboolean blured=false;\nif (cacheImage.filter != null) {\nfloat bitmapW=image.getWidth();\nfloat bitmapH=image.getHeight();\nif (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\nBitmap scaledBitmap;\nif (bitmapW > bitmapH && w_filter > h_filter) {\n  float scaleFactor=bitmapW / w_filter;\n  if (scaleFactor > 1) {\n    scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n  }\n else {\n    scaledBitmap=image;\n  }\n}\n else {\n  float scaleFactor=bitmapH / h_filter;\n  if (scaleFactor > 1) {\n    scaledBitmap=Bitmaps.createScaledBitmap(image,(int)(bitmapW / scaleFactor),(int)h_filter,true);\n  }\n else {\n    scaledBitmap=image;\n  }\n}\nif (image != scaledBitmap) {\n  image.recycle();\n  image=scaledBitmap;\n}\n}\nif (image != null) {\nif (checkInversion) {\n  Bitmap b=image;\n  int w=image.getWidth();\n  int h=image.getHeight();\n  if (w * h > 150 * 150) {\n    b=Bitmaps.createScaledBitmap(image,100,100,false);\n  }\n  needInvert=Utilities.needInvert(b,opts.inPurgeable ? 0 : 1,b.getWidth(),b.getHeight(),b.getRowBytes()) != 0;\n  if (b != image) {\n    b.recycle();\n  }\n}\nif (blurType != 0 && bitmapH < 100 && bitmapW < 100) {\n  if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n    Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n  }\n  blured=true;\n}\n}\n}\nif (!blured && opts.inPurgeable) {\nUtilities.pinBitmap(image);\n}\n}\n}\n catch (Throwable ignore) {\n}\n}\nThread.interrupted();\nif (needInvert || orientation != 0) {\nonPostExecute(image != null ? new ExtendedBitmapDrawable(image,needInvert,orientation) : null);\n}\n else {\nonPostExecute(image != null ? new BitmapDrawable(image) : null);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2671,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 29298,
        "startLineNumber" : 842,
        "startColumnNumber" : 19,
        "endLineNumber" : 1331,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (cacheImage.imageType == FileLoader.IMAGE_TYPE_ANIMATION) {\n  AnimatedFileDrawable fileDrawable;\n  long seekTo;\n  if (cacheImage.imageLocation != null) {\n    seekTo=cacheImage.imageLocation.videoSeekTo;\n  }\n else {\n    seekTo=0;\n  }\n  if (AUTOPLAY_FILTER.equals(cacheImage.filter) && !(cacheImage.imageLocation.document instanceof TLRPC.TL_documentEncrypted)) {\n    TLRPC.Document document=cacheImage.imageLocation.document instanceof TLRPC.Document ? cacheImage.imageLocation.document : null;\n    int size=document != null ? cacheImage.size : cacheImage.imageLocation.currentSize;\n    fileDrawable=new AnimatedFileDrawable(cacheImage.finalFilePath,false,size,document,document == null ? cacheImage.imageLocation : null,cacheImage.parentObject,seekTo,cacheImage.currentAccount,false);\n  }\n else {\n    fileDrawable=new AnimatedFileDrawable(cacheImage.finalFilePath,\"d\".equals(cacheImage.filter),0,null,null,null,seekTo,cacheImage.currentAccount,false);\n  }\n  Thread.interrupted();\n  onPostExecute(fileDrawable);\n}\n else {\n  Long mediaId=null;\n  boolean mediaIsVideo=false;\n  Bitmap image=null;\n  boolean needInvert=false;\n  int orientation=0;\n  File cacheFileFinal=cacheImage.finalFilePath;\n  boolean inEncryptedFile=cacheImage.secureDocument != null || cacheImage.encryptionKeyPath != null && cacheFileFinal != null && cacheFileFinal.getAbsolutePath().endsWith(\".enc\");\n  SecureDocumentKey secureDocumentKey;\n  byte[] secureDocumentHash;\n  if (cacheImage.secureDocument != null) {\n    secureDocumentKey=cacheImage.secureDocument.secureDocumentKey;\n    if (cacheImage.secureDocument.secureFile != null && cacheImage.secureDocument.secureFile.file_hash != null) {\n      secureDocumentHash=cacheImage.secureDocument.secureFile.file_hash;\n    }\n else {\n      secureDocumentHash=cacheImage.secureDocument.fileHash;\n    }\n  }\n else {\n    secureDocumentKey=null;\n    secureDocumentHash=null;\n  }\n  boolean canDeleteFile=true;\n  boolean useNativeWebpLoader=false;\n  if (Build.VERSION.SDK_INT < 19) {\n    RandomAccessFile randomAccessFile=null;\n    try {\n      randomAccessFile=new RandomAccessFile(cacheFileFinal,\"r\");\n      byte[] bytes;\n      if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n        bytes=headerThumb;\n      }\n else {\n        bytes=header;\n      }\n      randomAccessFile.readFully(bytes,0,bytes.length);\n      String str=new String(bytes).toLowerCase();\n      str=str.toLowerCase();\n      if (str.startsWith(\"riff\") && str.endsWith(\"webp\")) {\n        useNativeWebpLoader=true;\n      }\n      randomAccessFile.close();\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n finally {\n      if (randomAccessFile != null) {\n        try {\n          randomAccessFile.close();\n        }\n catch (        Exception e) {\n          FileLog.e(e);\n        }\n      }\n    }\n  }\n  String mediaThumbPath=null;\n  if (cacheImage.imageLocation.path != null) {\n    String location=cacheImage.imageLocation.path;\n    if (location.startsWith(\"thumb://\")) {\n      int idx=location.indexOf(\":\",8);\n      if (idx >= 0) {\n        mediaId=Long.parseLong(location.substring(8,idx));\n        mediaIsVideo=false;\n        mediaThumbPath=location.substring(idx + 1);\n      }\n      canDeleteFile=false;\n    }\n else     if (location.startsWith(\"vthumb://\")) {\n      int idx=location.indexOf(\":\",9);\n      if (idx >= 0) {\n        mediaId=Long.parseLong(location.substring(9,idx));\n        mediaIsVideo=true;\n      }\n      canDeleteFile=false;\n    }\n else     if (!location.startsWith(\"http\")) {\n      canDeleteFile=false;\n    }\n  }\n  BitmapFactory.Options opts=new BitmapFactory.Options();\n  opts.inSampleSize=1;\n  if (Build.VERSION.SDK_INT < 21) {\n    opts.inPurgeable=true;\n  }\n  float w_filter=0;\n  float h_filter=0;\n  int blurType=0;\n  boolean checkInversion=false;\n  boolean force8888=canForce8888;\n  try {\n    if (cacheImage.filter != null) {\n      String[] args=cacheImage.filter.split(\"_\");\n      if (args.length >= 2) {\n        w_filter=Float.parseFloat(args[0]) * AndroidUtilities.density;\n        h_filter=Float.parseFloat(args[1]) * AndroidUtilities.density;\n      }\n      if (cacheImage.filter.contains(\"b2\")) {\n        blurType=3;\n      }\n else       if (cacheImage.filter.contains(\"b1\")) {\n        blurType=2;\n      }\n else       if (cacheImage.filter.contains(\"b\")) {\n        blurType=1;\n      }\n      if (cacheImage.filter.contains(\"i\")) {\n        checkInversion=true;\n      }\n      if (cacheImage.filter.contains(\"f\")) {\n        force8888=true;\n      }\n      if (!useNativeWebpLoader && w_filter != 0 && h_filter != 0) {\n        opts.inJustDecodeBounds=true;\n        if (mediaId != null && mediaThumbPath == null) {\n          if (mediaIsVideo) {\n            MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n          }\n else {\n            MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n          }\n        }\n else {\n          if (secureDocumentKey != null) {\n            RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n            int len=(int)f.length();\n            byte[] bytes=bytesLocal.get();\n            byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n            if (data == null) {\n              bytes=data=new byte[len];\n              bytesLocal.set(bytes);\n            }\n            f.readFully(data,0,len);\n            f.close();\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n            byte[] hash=Utilities.computeSHA256(data,0,len);\n            boolean error=false;\n            if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n              error=true;\n            }\n            int offset=(data[0] & 0xff);\n            len-=offset;\n            if (!error) {\n              BitmapFactory.decodeByteArray(data,offset,len,opts);\n            }\n          }\n else {\n            FileInputStream is;\n            if (inEncryptedFile) {\n              is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n            }\n else {\n              is=new FileInputStream(cacheFileFinal);\n            }\n            BitmapFactory.decodeStream(is,null,opts);\n            is.close();\n          }\n        }\n        float photoW=opts.outWidth;\n        float photoH=opts.outHeight;\n        float scaleFactor;\n        if (w_filter >= h_filter && photoW > photoH) {\n          scaleFactor=Math.max(photoW / w_filter,photoH / h_filter);\n        }\n else {\n          scaleFactor=Math.min(photoW / w_filter,photoH / h_filter);\n        }\n        if (scaleFactor < 1.2f) {\n          scaleFactor=1;\n        }\n        opts.inJustDecodeBounds=false;\n        if (scaleFactor > 1.0f && (photoW > w_filter || photoH > h_filter)) {\n          int sample=1;\n          do {\n            sample*=2;\n          }\n while (sample * 2 < scaleFactor);\n          opts.inSampleSize=sample;\n        }\n else {\n          opts.inSampleSize=(int)scaleFactor;\n        }\n      }\n    }\n else     if (mediaThumbPath != null) {\n      opts.inJustDecodeBounds=true;\n      opts.inPreferredConfig=force8888 ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;\n      FileInputStream is=new FileInputStream(cacheFileFinal);\n      image=BitmapFactory.decodeStream(is,null,opts);\n      is.close();\n      int photoW2=opts.outWidth;\n      int photoH2=opts.outHeight;\n      opts.inJustDecodeBounds=false;\n      int screenSize=Math.max(66,Math.min(AndroidUtilities.getRealScreenSize().x,AndroidUtilities.getRealScreenSize().y));\n      float scaleFactor=(Math.min(photoH2,photoW2) / (float)screenSize) * 6f;\n      if (scaleFactor < 1) {\n        scaleFactor=1;\n      }\n      if (scaleFactor > 1.0f) {\n        int sample=1;\n        do {\n          sample*=2;\n        }\n while (sample * 2 <= scaleFactor);\n        opts.inSampleSize=sample;\n      }\n else {\n        opts.inSampleSize=(int)scaleFactor;\n      }\n    }\n  }\n catch (  Throwable e) {\n    FileLog.e(e);\n  }\n  if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n    try {\n      lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n        if (isCancelled) {\n          return;\n        }\n      }\n      if (useNativeWebpLoader) {\n        RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n        ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n        BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n        bmOptions.inJustDecodeBounds=true;\n        Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n        image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n        Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n        file.close();\n      }\n else {\n        if (opts.inPurgeable || secureDocumentKey != null) {\n          RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n          int len=(int)f.length();\n          int offset=0;\n          byte[] bytesThumb=bytesThumbLocal.get();\n          byte[] data=bytesThumb != null && bytesThumb.length >= len ? bytesThumb : null;\n          if (data == null) {\n            bytesThumb=data=new byte[len];\n            bytesThumbLocal.set(bytesThumb);\n          }\n          f.readFully(data,0,len);\n          f.close();\n          boolean error=false;\n          if (secureDocumentKey != null) {\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n            byte[] hash=Utilities.computeSHA256(data,0,len);\n            if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n              error=true;\n            }\n            offset=(data[0] & 0xff);\n            len-=offset;\n          }\n else           if (inEncryptedFile) {\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n          }\n          if (!error) {\n            image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n          }\n        }\n else {\n          FileInputStream is;\n          if (inEncryptedFile) {\n            is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n          }\n else {\n            is=new FileInputStream(cacheFileFinal);\n          }\n          image=BitmapFactory.decodeStream(is,null,opts);\n          is.close();\n        }\n      }\n      if (image == null) {\n        if (cacheFileFinal.length() == 0 || cacheImage.filter == null) {\n          cacheFileFinal.delete();\n        }\n      }\n else {\n        if (cacheImage.filter != null) {\n          float bitmapW=image.getWidth();\n          float bitmapH=image.getHeight();\n          if (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\n            float scaleFactor=bitmapW / w_filter;\n            Bitmap scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n            if (image != scaledBitmap) {\n              image.recycle();\n              image=scaledBitmap;\n            }\n          }\n        }\n        if (checkInversion) {\n          needInvert=Utilities.needInvert(image,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes()) != 0;\n        }\n        if (blurType == 1) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 2) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,1,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 3) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 0 && opts.inPurgeable) {\n          Utilities.pinBitmap(image);\n        }\n      }\n    }\n catch (    Throwable e) {\n      FileLog.e(e);\n    }\n  }\n else {\n    try {\n      int delay=20;\n      if (mediaId != null) {\n        delay=0;\n      }\n      if (delay != 0 && lastCacheOutTime != 0 && lastCacheOutTime > System.currentTimeMillis() - delay && Build.VERSION.SDK_INT < 21) {\n        Thread.sleep(delay);\n      }\n      lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n        if (isCancelled) {\n          return;\n        }\n      }\n      if (force8888 || cacheImage.filter == null || blurType != 0 || cacheImage.imageLocation.path != null) {\n        opts.inPreferredConfig=Bitmap.Config.ARGB_8888;\n      }\n else {\n        opts.inPreferredConfig=Bitmap.Config.RGB_565;\n      }\n      opts.inDither=false;\n      if (mediaId != null && mediaThumbPath == null) {\n        if (mediaIsVideo) {\n          image=MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n        }\n else {\n          image=MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n        }\n      }\n      if (image == null) {\n        if (useNativeWebpLoader) {\n          RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n          ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n          BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n          bmOptions.inJustDecodeBounds=true;\n          Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n          image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n          Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n          file.close();\n        }\n else {\n          if (opts.inPurgeable || secureDocumentKey != null) {\n            RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n            int len=(int)f.length();\n            int offset=0;\n            byte[] bytes=bytesLocal.get();\n            byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n            if (data == null) {\n              bytes=data=new byte[len];\n              bytesLocal.set(bytes);\n            }\n            f.readFully(data,0,len);\n            f.close();\n            boolean error=false;\n            if (secureDocumentKey != null) {\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n              byte[] hash=Utilities.computeSHA256(data,0,len);\n              if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n                error=true;\n              }\n              offset=(data[0] & 0xff);\n              len-=offset;\n            }\n else             if (inEncryptedFile) {\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n            }\n            if (!error) {\n              image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n            }\n          }\n else {\n            FileInputStream is;\n            if (inEncryptedFile) {\n              is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n            }\n else {\n              is=new FileInputStream(cacheFileFinal);\n            }\n            if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n              try {\n                ExifInterface exif=new ExifInterface(is);\n                int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:                  orientation=90;\n                break;\ncase ExifInterface.ORIENTATION_ROTATE_180:              orientation=180;\n            break;\ncase ExifInterface.ORIENTATION_ROTATE_270:          orientation=270;\n        break;\n    }\n  }\n catch (  Throwable ignore) {\n  }\n  is.getChannel().position(0);\n}\nimage=BitmapFactory.decodeStream(is,null,opts);\nis.close();\n}\n}\n}\nif (image == null) {\nif (canDeleteFile && (cacheFileFinal.length() == 0 || cacheImage.filter == null)) {\ncacheFileFinal.delete();\n}\n}\n else {\nboolean blured=false;\nif (cacheImage.filter != null) {\nfloat bitmapW=image.getWidth();\nfloat bitmapH=image.getHeight();\nif (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\nBitmap scaledBitmap;\nif (bitmapW > bitmapH && w_filter > h_filter) {\n  float scaleFactor=bitmapW / w_filter;\n  if (scaleFactor > 1) {\n    scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n  }\n else {\n    scaledBitmap=image;\n  }\n}\n else {\n  float scaleFactor=bitmapH / h_filter;\n  if (scaleFactor > 1) {\n    scaledBitmap=Bitmaps.createScaledBitmap(image,(int)(bitmapW / scaleFactor),(int)h_filter,true);\n  }\n else {\n    scaledBitmap=image;\n  }\n}\nif (image != scaledBitmap) {\n  image.recycle();\n  image=scaledBitmap;\n}\n}\nif (image != null) {\nif (checkInversion) {\n  Bitmap b=image;\n  int w=image.getWidth();\n  int h=image.getHeight();\n  if (w * h > 150 * 150) {\n    b=Bitmaps.createScaledBitmap(image,100,100,false);\n  }\n  needInvert=Utilities.needInvert(b,opts.inPurgeable ? 0 : 1,b.getWidth(),b.getHeight(),b.getRowBytes()) != 0;\n  if (b != image) {\n    b.recycle();\n  }\n}\nif (blurType != 0 && bitmapH < 100 && bitmapW < 100) {\n  if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n    Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n  }\n  blured=true;\n}\n}\n}\nif (!blured && opts.inPurgeable) {\nUtilities.pinBitmap(image);\n}\n}\n}\n catch (Throwable ignore) {\n}\n}\nThread.interrupted();\nif (needInvert || orientation != 0) {\nonPostExecute(image != null ? new ExtendedBitmapDrawable(image,needInvert,orientation) : null);\n}\n else {\nonPostExecute(image != null ? new BitmapDrawable(image) : null);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2831,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 32662,
        "startLineNumber" : 783,
        "startColumnNumber" : 19,
        "endLineNumber" : 1331,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (cacheImage.imageType == FileLoader.IMAGE_TYPE_LOTTIE) {\n  int w=Math.min(512,AndroidUtilities.dp(170.6f));\n  int h=Math.min(512,AndroidUtilities.dp(170.6f));\n  boolean precache=false;\n  boolean limitFps=false;\n  int autoRepeat=1;\n  int[] colors=null;\n  String diceEmoji=null;\n  if (cacheImage.filter != null) {\n    String[] args=cacheImage.filter.split(\"_\");\n    if (args.length >= 2) {\n      float w_filter=Float.parseFloat(args[0]);\n      float h_filter=Float.parseFloat(args[1]);\n      w=Math.min(512,(int)(w_filter * AndroidUtilities.density));\n      h=Math.min(512,(int)(h_filter * AndroidUtilities.density));\n      if (w_filter <= 90 && h_filter <= 90) {\n        w=Math.min(w,160);\n        h=Math.min(h,160);\n        limitFps=true;\n      }\n      precache=SharedConfig.getDevicePerformanceClass() != SharedConfig.PERFORMANCE_CLASS_HIGH;\n    }\n    if (args.length >= 3) {\n      if (\"nr\".equals(args[2])) {\n        autoRepeat=2;\n      }\n else       if (\"nrs\".equals(args[2])) {\n        autoRepeat=3;\n      }\n else       if (\"dice\".equals(args[2])) {\n        diceEmoji=args[3];\n        autoRepeat=2;\n      }\n    }\n    if (args.length >= 5) {\n      if (\"c1\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0xca907a,0xffb139,0xedc5a5,0xffd140,0xf7e3c3,0xffdf79,0xfbefd6};\n      }\n else       if (\"c2\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0xaa7c60,0xffb139,0xc8a987,0xffd140,0xddc89f,0xffdf79,0xe6d6b2};\n      }\n else       if (\"c3\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0x8c6148,0xffb139,0xad8562,0xffd140,0xc49e76,0xffdf79,0xd4b188};\n      }\n else       if (\"c4\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0x6e3c2c,0xffb139,0x925a34,0xffd140,0xa16e46,0xffdf79,0xac7a52};\n      }\n else       if (\"c5\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0x291c12,0xffb139,0x472a22,0xffd140,0x573b30,0xffdf79,0x68493c};\n      }\n    }\n  }\n  RLottieDrawable lottieDrawable;\n  if (diceEmoji != null) {\n    if (\"\\uD83C\\uDFB0\".equals(diceEmoji)) {\n      lottieDrawable=new SlotsDrawable(diceEmoji,w,h);\n    }\n else {\n      lottieDrawable=new RLottieDrawable(diceEmoji,w,h);\n    }\n  }\n else {\n    lottieDrawable=new RLottieDrawable(cacheImage.finalFilePath,w,h,precache,limitFps,colors);\n  }\n  lottieDrawable.setAutoRepeat(autoRepeat);\n  onPostExecute(lottieDrawable);\n}\n else if (cacheImage.imageType == FileLoader.IMAGE_TYPE_ANIMATION) {\n  AnimatedFileDrawable fileDrawable;\n  long seekTo;\n  if (cacheImage.imageLocation != null) {\n    seekTo=cacheImage.imageLocation.videoSeekTo;\n  }\n else {\n    seekTo=0;\n  }\n  if (AUTOPLAY_FILTER.equals(cacheImage.filter) && !(cacheImage.imageLocation.document instanceof TLRPC.TL_documentEncrypted)) {\n    TLRPC.Document document=cacheImage.imageLocation.document instanceof TLRPC.Document ? cacheImage.imageLocation.document : null;\n    int size=document != null ? cacheImage.size : cacheImage.imageLocation.currentSize;\n    fileDrawable=new AnimatedFileDrawable(cacheImage.finalFilePath,false,size,document,document == null ? cacheImage.imageLocation : null,cacheImage.parentObject,seekTo,cacheImage.currentAccount,false);\n  }\n else {\n    fileDrawable=new AnimatedFileDrawable(cacheImage.finalFilePath,\"d\".equals(cacheImage.filter),0,null,null,null,seekTo,cacheImage.currentAccount,false);\n  }\n  Thread.interrupted();\n  onPostExecute(fileDrawable);\n}\n else {\n  Long mediaId=null;\n  boolean mediaIsVideo=false;\n  Bitmap image=null;\n  boolean needInvert=false;\n  int orientation=0;\n  File cacheFileFinal=cacheImage.finalFilePath;\n  boolean inEncryptedFile=cacheImage.secureDocument != null || cacheImage.encryptionKeyPath != null && cacheFileFinal != null && cacheFileFinal.getAbsolutePath().endsWith(\".enc\");\n  SecureDocumentKey secureDocumentKey;\n  byte[] secureDocumentHash;\n  if (cacheImage.secureDocument != null) {\n    secureDocumentKey=cacheImage.secureDocument.secureDocumentKey;\n    if (cacheImage.secureDocument.secureFile != null && cacheImage.secureDocument.secureFile.file_hash != null) {\n      secureDocumentHash=cacheImage.secureDocument.secureFile.file_hash;\n    }\n else {\n      secureDocumentHash=cacheImage.secureDocument.fileHash;\n    }\n  }\n else {\n    secureDocumentKey=null;\n    secureDocumentHash=null;\n  }\n  boolean canDeleteFile=true;\n  boolean useNativeWebpLoader=false;\n  if (Build.VERSION.SDK_INT < 19) {\n    RandomAccessFile randomAccessFile=null;\n    try {\n      randomAccessFile=new RandomAccessFile(cacheFileFinal,\"r\");\n      byte[] bytes;\n      if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n        bytes=headerThumb;\n      }\n else {\n        bytes=header;\n      }\n      randomAccessFile.readFully(bytes,0,bytes.length);\n      String str=new String(bytes).toLowerCase();\n      str=str.toLowerCase();\n      if (str.startsWith(\"riff\") && str.endsWith(\"webp\")) {\n        useNativeWebpLoader=true;\n      }\n      randomAccessFile.close();\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n finally {\n      if (randomAccessFile != null) {\n        try {\n          randomAccessFile.close();\n        }\n catch (        Exception e) {\n          FileLog.e(e);\n        }\n      }\n    }\n  }\n  String mediaThumbPath=null;\n  if (cacheImage.imageLocation.path != null) {\n    String location=cacheImage.imageLocation.path;\n    if (location.startsWith(\"thumb://\")) {\n      int idx=location.indexOf(\":\",8);\n      if (idx >= 0) {\n        mediaId=Long.parseLong(location.substring(8,idx));\n        mediaIsVideo=false;\n        mediaThumbPath=location.substring(idx + 1);\n      }\n      canDeleteFile=false;\n    }\n else     if (location.startsWith(\"vthumb://\")) {\n      int idx=location.indexOf(\":\",9);\n      if (idx >= 0) {\n        mediaId=Long.parseLong(location.substring(9,idx));\n        mediaIsVideo=true;\n      }\n      canDeleteFile=false;\n    }\n else     if (!location.startsWith(\"http\")) {\n      canDeleteFile=false;\n    }\n  }\n  BitmapFactory.Options opts=new BitmapFactory.Options();\n  opts.inSampleSize=1;\n  if (Build.VERSION.SDK_INT < 21) {\n    opts.inPurgeable=true;\n  }\n  float w_filter=0;\n  float h_filter=0;\n  int blurType=0;\n  boolean checkInversion=false;\n  boolean force8888=canForce8888;\n  try {\n    if (cacheImage.filter != null) {\n      String[] args=cacheImage.filter.split(\"_\");\n      if (args.length >= 2) {\n        w_filter=Float.parseFloat(args[0]) * AndroidUtilities.density;\n        h_filter=Float.parseFloat(args[1]) * AndroidUtilities.density;\n      }\n      if (cacheImage.filter.contains(\"b2\")) {\n        blurType=3;\n      }\n else       if (cacheImage.filter.contains(\"b1\")) {\n        blurType=2;\n      }\n else       if (cacheImage.filter.contains(\"b\")) {\n        blurType=1;\n      }\n      if (cacheImage.filter.contains(\"i\")) {\n        checkInversion=true;\n      }\n      if (cacheImage.filter.contains(\"f\")) {\n        force8888=true;\n      }\n      if (!useNativeWebpLoader && w_filter != 0 && h_filter != 0) {\n        opts.inJustDecodeBounds=true;\n        if (mediaId != null && mediaThumbPath == null) {\n          if (mediaIsVideo) {\n            MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n          }\n else {\n            MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n          }\n        }\n else {\n          if (secureDocumentKey != null) {\n            RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n            int len=(int)f.length();\n            byte[] bytes=bytesLocal.get();\n            byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n            if (data == null) {\n              bytes=data=new byte[len];\n              bytesLocal.set(bytes);\n            }\n            f.readFully(data,0,len);\n            f.close();\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n            byte[] hash=Utilities.computeSHA256(data,0,len);\n            boolean error=false;\n            if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n              error=true;\n            }\n            int offset=(data[0] & 0xff);\n            len-=offset;\n            if (!error) {\n              BitmapFactory.decodeByteArray(data,offset,len,opts);\n            }\n          }\n else {\n            FileInputStream is;\n            if (inEncryptedFile) {\n              is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n            }\n else {\n              is=new FileInputStream(cacheFileFinal);\n            }\n            BitmapFactory.decodeStream(is,null,opts);\n            is.close();\n          }\n        }\n        float photoW=opts.outWidth;\n        float photoH=opts.outHeight;\n        float scaleFactor;\n        if (w_filter >= h_filter && photoW > photoH) {\n          scaleFactor=Math.max(photoW / w_filter,photoH / h_filter);\n        }\n else {\n          scaleFactor=Math.min(photoW / w_filter,photoH / h_filter);\n        }\n        if (scaleFactor < 1.2f) {\n          scaleFactor=1;\n        }\n        opts.inJustDecodeBounds=false;\n        if (scaleFactor > 1.0f && (photoW > w_filter || photoH > h_filter)) {\n          int sample=1;\n          do {\n            sample*=2;\n          }\n while (sample * 2 < scaleFactor);\n          opts.inSampleSize=sample;\n        }\n else {\n          opts.inSampleSize=(int)scaleFactor;\n        }\n      }\n    }\n else     if (mediaThumbPath != null) {\n      opts.inJustDecodeBounds=true;\n      opts.inPreferredConfig=force8888 ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;\n      FileInputStream is=new FileInputStream(cacheFileFinal);\n      image=BitmapFactory.decodeStream(is,null,opts);\n      is.close();\n      int photoW2=opts.outWidth;\n      int photoH2=opts.outHeight;\n      opts.inJustDecodeBounds=false;\n      int screenSize=Math.max(66,Math.min(AndroidUtilities.getRealScreenSize().x,AndroidUtilities.getRealScreenSize().y));\n      float scaleFactor=(Math.min(photoH2,photoW2) / (float)screenSize) * 6f;\n      if (scaleFactor < 1) {\n        scaleFactor=1;\n      }\n      if (scaleFactor > 1.0f) {\n        int sample=1;\n        do {\n          sample*=2;\n        }\n while (sample * 2 <= scaleFactor);\n        opts.inSampleSize=sample;\n      }\n else {\n        opts.inSampleSize=(int)scaleFactor;\n      }\n    }\n  }\n catch (  Throwable e) {\n    FileLog.e(e);\n  }\n  if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n    try {\n      lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n        if (isCancelled) {\n          return;\n        }\n      }\n      if (useNativeWebpLoader) {\n        RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n        ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n        BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n        bmOptions.inJustDecodeBounds=true;\n        Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n        image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n        Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n        file.close();\n      }\n else {\n        if (opts.inPurgeable || secureDocumentKey != null) {\n          RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n          int len=(int)f.length();\n          int offset=0;\n          byte[] bytesThumb=bytesThumbLocal.get();\n          byte[] data=bytesThumb != null && bytesThumb.length >= len ? bytesThumb : null;\n          if (data == null) {\n            bytesThumb=data=new byte[len];\n            bytesThumbLocal.set(bytesThumb);\n          }\n          f.readFully(data,0,len);\n          f.close();\n          boolean error=false;\n          if (secureDocumentKey != null) {\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n            byte[] hash=Utilities.computeSHA256(data,0,len);\n            if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n              error=true;\n            }\n            offset=(data[0] & 0xff);\n            len-=offset;\n          }\n else           if (inEncryptedFile) {\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n          }\n          if (!error) {\n            image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n          }\n        }\n else {\n          FileInputStream is;\n          if (inEncryptedFile) {\n            is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n          }\n else {\n            is=new FileInputStream(cacheFileFinal);\n          }\n          image=BitmapFactory.decodeStream(is,null,opts);\n          is.close();\n        }\n      }\n      if (image == null) {\n        if (cacheFileFinal.length() == 0 || cacheImage.filter == null) {\n          cacheFileFinal.delete();\n        }\n      }\n else {\n        if (cacheImage.filter != null) {\n          float bitmapW=image.getWidth();\n          float bitmapH=image.getHeight();\n          if (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\n            float scaleFactor=bitmapW / w_filter;\n            Bitmap scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n            if (image != scaledBitmap) {\n              image.recycle();\n              image=scaledBitmap;\n            }\n          }\n        }\n        if (checkInversion) {\n          needInvert=Utilities.needInvert(image,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes()) != 0;\n        }\n        if (blurType == 1) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 2) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,1,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 3) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 0 && opts.inPurgeable) {\n          Utilities.pinBitmap(image);\n        }\n      }\n    }\n catch (    Throwable e) {\n      FileLog.e(e);\n    }\n  }\n else {\n    try {\n      int delay=20;\n      if (mediaId != null) {\n        delay=0;\n      }\n      if (delay != 0 && lastCacheOutTime != 0 && lastCacheOutTime > System.currentTimeMillis() - delay && Build.VERSION.SDK_INT < 21) {\n        Thread.sleep(delay);\n      }\n      lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n        if (isCancelled) {\n          return;\n        }\n      }\n      if (force8888 || cacheImage.filter == null || blurType != 0 || cacheImage.imageLocation.path != null) {\n        opts.inPreferredConfig=Bitmap.Config.ARGB_8888;\n      }\n else {\n        opts.inPreferredConfig=Bitmap.Config.RGB_565;\n      }\n      opts.inDither=false;\n      if (mediaId != null && mediaThumbPath == null) {\n        if (mediaIsVideo) {\n          image=MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n        }\n else {\n          image=MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n        }\n      }\n      if (image == null) {\n        if (useNativeWebpLoader) {\n          RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n          ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n          BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n          bmOptions.inJustDecodeBounds=true;\n          Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n          image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n          Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n          file.close();\n        }\n else {\n          if (opts.inPurgeable || secureDocumentKey != null) {\n            RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n            int len=(int)f.length();\n            int offset=0;\n            byte[] bytes=bytesLocal.get();\n            byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n            if (data == null) {\n              bytes=data=new byte[len];\n              bytesLocal.set(bytes);\n            }\n            f.readFully(data,0,len);\n            f.close();\n            boolean error=false;\n            if (secureDocumentKey != null) {\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n              byte[] hash=Utilities.computeSHA256(data,0,len);\n              if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n                error=true;\n              }\n              offset=(data[0] & 0xff);\n              len-=offset;\n            }\n else             if (inEncryptedFile) {\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n            }\n            if (!error) {\n              image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n            }\n          }\n else {\n            FileInputStream is;\n            if (inEncryptedFile) {\n              is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n            }\n else {\n              is=new FileInputStream(cacheFileFinal);\n            }\n            if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n              try {\n                ExifInterface exif=new ExifInterface(is);\n                int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:                  orientation=90;\n                break;\ncase ExifInterface.ORIENTATION_ROTATE_180:              orientation=180;\n            break;\ncase ExifInterface.ORIENTATION_ROTATE_270:          orientation=270;\n        break;\n    }\n  }\n catch (  Throwable ignore) {\n  }\n  is.getChannel().position(0);\n}\nimage=BitmapFactory.decodeStream(is,null,opts);\nis.close();\n}\n}\n}\nif (image == null) {\nif (canDeleteFile && (cacheFileFinal.length() == 0 || cacheImage.filter == null)) {\ncacheFileFinal.delete();\n}\n}\n else {\nboolean blured=false;\nif (cacheImage.filter != null) {\nfloat bitmapW=image.getWidth();\nfloat bitmapH=image.getHeight();\nif (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\nBitmap scaledBitmap;\nif (bitmapW > bitmapH && w_filter > h_filter) {\n  float scaleFactor=bitmapW / w_filter;\n  if (scaleFactor > 1) {\n    scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n  }\n else {\n    scaledBitmap=image;\n  }\n}\n else {\n  float scaleFactor=bitmapH / h_filter;\n  if (scaleFactor > 1) {\n    scaledBitmap=Bitmaps.createScaledBitmap(image,(int)(bitmapW / scaleFactor),(int)h_filter,true);\n  }\n else {\n    scaledBitmap=image;\n  }\n}\nif (image != scaledBitmap) {\n  image.recycle();\n  image=scaledBitmap;\n}\n}\nif (image != null) {\nif (checkInversion) {\n  Bitmap b=image;\n  int w=image.getWidth();\n  int h=image.getHeight();\n  if (w * h > 150 * 150) {\n    b=Bitmaps.createScaledBitmap(image,100,100,false);\n  }\n  needInvert=Utilities.needInvert(b,opts.inPurgeable ? 0 : 1,b.getWidth(),b.getHeight(),b.getRowBytes()) != 0;\n  if (b != image) {\n    b.recycle();\n  }\n}\nif (blurType != 0 && bitmapH < 100 && bitmapW < 100) {\n  if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n    Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n  }\n  blured=true;\n}\n}\n}\nif (!blured && opts.inPurgeable) {\nUtilities.pinBitmap(image);\n}\n}\n}\n catch (Throwable ignore) {\n}\n}\nThread.interrupted();\nif (needInvert || orientation != 0) {\nonPostExecute(image != null ? new ExtendedBitmapDrawable(image,needInvert,orientation) : null);\n}\n else {\nonPostExecute(image != null ? new BitmapDrawable(image) : null);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 3243,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 33752,
        "startLineNumber" : 764,
        "startColumnNumber" : 19,
        "endLineNumber" : 1331,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (cacheImage.imageType == FileLoader.IMAGE_TYPE_SVG || cacheImage.imageType == FileLoader.IMAGE_TYPE_SVG_WHITE) {\n  int w=AndroidUtilities.dp(360);\n  int h=AndroidUtilities.dp(640);\n  if (cacheImage.filter != null) {\n    String[] args=cacheImage.filter.split(\"_\");\n    if (args.length >= 2) {\n      float w_filter=Float.parseFloat(args[0]);\n      float h_filter=Float.parseFloat(args[1]);\n      w=(int)(w_filter * AndroidUtilities.density);\n      h=(int)(h_filter * AndroidUtilities.density);\n    }\n  }\n  Bitmap bitmap=null;\n  try {\n    bitmap=SvgHelper.getBitmap(cacheImage.finalFilePath,w,h,cacheImage.imageType == FileLoader.IMAGE_TYPE_SVG_WHITE);\n  }\n catch (  Throwable e) {\n    FileLog.e(e);\n  }\n  onPostExecute(bitmap != null ? new BitmapDrawable(bitmap) : null);\n}\n else if (cacheImage.imageType == FileLoader.IMAGE_TYPE_LOTTIE) {\n  int w=Math.min(512,AndroidUtilities.dp(170.6f));\n  int h=Math.min(512,AndroidUtilities.dp(170.6f));\n  boolean precache=false;\n  boolean limitFps=false;\n  int autoRepeat=1;\n  int[] colors=null;\n  String diceEmoji=null;\n  if (cacheImage.filter != null) {\n    String[] args=cacheImage.filter.split(\"_\");\n    if (args.length >= 2) {\n      float w_filter=Float.parseFloat(args[0]);\n      float h_filter=Float.parseFloat(args[1]);\n      w=Math.min(512,(int)(w_filter * AndroidUtilities.density));\n      h=Math.min(512,(int)(h_filter * AndroidUtilities.density));\n      if (w_filter <= 90 && h_filter <= 90) {\n        w=Math.min(w,160);\n        h=Math.min(h,160);\n        limitFps=true;\n      }\n      precache=SharedConfig.getDevicePerformanceClass() != SharedConfig.PERFORMANCE_CLASS_HIGH;\n    }\n    if (args.length >= 3) {\n      if (\"nr\".equals(args[2])) {\n        autoRepeat=2;\n      }\n else       if (\"nrs\".equals(args[2])) {\n        autoRepeat=3;\n      }\n else       if (\"dice\".equals(args[2])) {\n        diceEmoji=args[3];\n        autoRepeat=2;\n      }\n    }\n    if (args.length >= 5) {\n      if (\"c1\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0xca907a,0xffb139,0xedc5a5,0xffd140,0xf7e3c3,0xffdf79,0xfbefd6};\n      }\n else       if (\"c2\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0xaa7c60,0xffb139,0xc8a987,0xffd140,0xddc89f,0xffdf79,0xe6d6b2};\n      }\n else       if (\"c3\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0x8c6148,0xffb139,0xad8562,0xffd140,0xc49e76,0xffdf79,0xd4b188};\n      }\n else       if (\"c4\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0x6e3c2c,0xffb139,0x925a34,0xffd140,0xa16e46,0xffdf79,0xac7a52};\n      }\n else       if (\"c5\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0x291c12,0xffb139,0x472a22,0xffd140,0x573b30,0xffdf79,0x68493c};\n      }\n    }\n  }\n  RLottieDrawable lottieDrawable;\n  if (diceEmoji != null) {\n    if (\"\\uD83C\\uDFB0\".equals(diceEmoji)) {\n      lottieDrawable=new SlotsDrawable(diceEmoji,w,h);\n    }\n else {\n      lottieDrawable=new RLottieDrawable(diceEmoji,w,h);\n    }\n  }\n else {\n    lottieDrawable=new RLottieDrawable(cacheImage.finalFilePath,w,h,precache,limitFps,colors);\n  }\n  lottieDrawable.setAutoRepeat(autoRepeat);\n  onPostExecute(lottieDrawable);\n}\n else if (cacheImage.imageType == FileLoader.IMAGE_TYPE_ANIMATION) {\n  AnimatedFileDrawable fileDrawable;\n  long seekTo;\n  if (cacheImage.imageLocation != null) {\n    seekTo=cacheImage.imageLocation.videoSeekTo;\n  }\n else {\n    seekTo=0;\n  }\n  if (AUTOPLAY_FILTER.equals(cacheImage.filter) && !(cacheImage.imageLocation.document instanceof TLRPC.TL_documentEncrypted)) {\n    TLRPC.Document document=cacheImage.imageLocation.document instanceof TLRPC.Document ? cacheImage.imageLocation.document : null;\n    int size=document != null ? cacheImage.size : cacheImage.imageLocation.currentSize;\n    fileDrawable=new AnimatedFileDrawable(cacheImage.finalFilePath,false,size,document,document == null ? cacheImage.imageLocation : null,cacheImage.parentObject,seekTo,cacheImage.currentAccount,false);\n  }\n else {\n    fileDrawable=new AnimatedFileDrawable(cacheImage.finalFilePath,\"d\".equals(cacheImage.filter),0,null,null,null,seekTo,cacheImage.currentAccount,false);\n  }\n  Thread.interrupted();\n  onPostExecute(fileDrawable);\n}\n else {\n  Long mediaId=null;\n  boolean mediaIsVideo=false;\n  Bitmap image=null;\n  boolean needInvert=false;\n  int orientation=0;\n  File cacheFileFinal=cacheImage.finalFilePath;\n  boolean inEncryptedFile=cacheImage.secureDocument != null || cacheImage.encryptionKeyPath != null && cacheFileFinal != null && cacheFileFinal.getAbsolutePath().endsWith(\".enc\");\n  SecureDocumentKey secureDocumentKey;\n  byte[] secureDocumentHash;\n  if (cacheImage.secureDocument != null) {\n    secureDocumentKey=cacheImage.secureDocument.secureDocumentKey;\n    if (cacheImage.secureDocument.secureFile != null && cacheImage.secureDocument.secureFile.file_hash != null) {\n      secureDocumentHash=cacheImage.secureDocument.secureFile.file_hash;\n    }\n else {\n      secureDocumentHash=cacheImage.secureDocument.fileHash;\n    }\n  }\n else {\n    secureDocumentKey=null;\n    secureDocumentHash=null;\n  }\n  boolean canDeleteFile=true;\n  boolean useNativeWebpLoader=false;\n  if (Build.VERSION.SDK_INT < 19) {\n    RandomAccessFile randomAccessFile=null;\n    try {\n      randomAccessFile=new RandomAccessFile(cacheFileFinal,\"r\");\n      byte[] bytes;\n      if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n        bytes=headerThumb;\n      }\n else {\n        bytes=header;\n      }\n      randomAccessFile.readFully(bytes,0,bytes.length);\n      String str=new String(bytes).toLowerCase();\n      str=str.toLowerCase();\n      if (str.startsWith(\"riff\") && str.endsWith(\"webp\")) {\n        useNativeWebpLoader=true;\n      }\n      randomAccessFile.close();\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n finally {\n      if (randomAccessFile != null) {\n        try {\n          randomAccessFile.close();\n        }\n catch (        Exception e) {\n          FileLog.e(e);\n        }\n      }\n    }\n  }\n  String mediaThumbPath=null;\n  if (cacheImage.imageLocation.path != null) {\n    String location=cacheImage.imageLocation.path;\n    if (location.startsWith(\"thumb://\")) {\n      int idx=location.indexOf(\":\",8);\n      if (idx >= 0) {\n        mediaId=Long.parseLong(location.substring(8,idx));\n        mediaIsVideo=false;\n        mediaThumbPath=location.substring(idx + 1);\n      }\n      canDeleteFile=false;\n    }\n else     if (location.startsWith(\"vthumb://\")) {\n      int idx=location.indexOf(\":\",9);\n      if (idx >= 0) {\n        mediaId=Long.parseLong(location.substring(9,idx));\n        mediaIsVideo=true;\n      }\n      canDeleteFile=false;\n    }\n else     if (!location.startsWith(\"http\")) {\n      canDeleteFile=false;\n    }\n  }\n  BitmapFactory.Options opts=new BitmapFactory.Options();\n  opts.inSampleSize=1;\n  if (Build.VERSION.SDK_INT < 21) {\n    opts.inPurgeable=true;\n  }\n  float w_filter=0;\n  float h_filter=0;\n  int blurType=0;\n  boolean checkInversion=false;\n  boolean force8888=canForce8888;\n  try {\n    if (cacheImage.filter != null) {\n      String[] args=cacheImage.filter.split(\"_\");\n      if (args.length >= 2) {\n        w_filter=Float.parseFloat(args[0]) * AndroidUtilities.density;\n        h_filter=Float.parseFloat(args[1]) * AndroidUtilities.density;\n      }\n      if (cacheImage.filter.contains(\"b2\")) {\n        blurType=3;\n      }\n else       if (cacheImage.filter.contains(\"b1\")) {\n        blurType=2;\n      }\n else       if (cacheImage.filter.contains(\"b\")) {\n        blurType=1;\n      }\n      if (cacheImage.filter.contains(\"i\")) {\n        checkInversion=true;\n      }\n      if (cacheImage.filter.contains(\"f\")) {\n        force8888=true;\n      }\n      if (!useNativeWebpLoader && w_filter != 0 && h_filter != 0) {\n        opts.inJustDecodeBounds=true;\n        if (mediaId != null && mediaThumbPath == null) {\n          if (mediaIsVideo) {\n            MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n          }\n else {\n            MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n          }\n        }\n else {\n          if (secureDocumentKey != null) {\n            RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n            int len=(int)f.length();\n            byte[] bytes=bytesLocal.get();\n            byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n            if (data == null) {\n              bytes=data=new byte[len];\n              bytesLocal.set(bytes);\n            }\n            f.readFully(data,0,len);\n            f.close();\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n            byte[] hash=Utilities.computeSHA256(data,0,len);\n            boolean error=false;\n            if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n              error=true;\n            }\n            int offset=(data[0] & 0xff);\n            len-=offset;\n            if (!error) {\n              BitmapFactory.decodeByteArray(data,offset,len,opts);\n            }\n          }\n else {\n            FileInputStream is;\n            if (inEncryptedFile) {\n              is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n            }\n else {\n              is=new FileInputStream(cacheFileFinal);\n            }\n            BitmapFactory.decodeStream(is,null,opts);\n            is.close();\n          }\n        }\n        float photoW=opts.outWidth;\n        float photoH=opts.outHeight;\n        float scaleFactor;\n        if (w_filter >= h_filter && photoW > photoH) {\n          scaleFactor=Math.max(photoW / w_filter,photoH / h_filter);\n        }\n else {\n          scaleFactor=Math.min(photoW / w_filter,photoH / h_filter);\n        }\n        if (scaleFactor < 1.2f) {\n          scaleFactor=1;\n        }\n        opts.inJustDecodeBounds=false;\n        if (scaleFactor > 1.0f && (photoW > w_filter || photoH > h_filter)) {\n          int sample=1;\n          do {\n            sample*=2;\n          }\n while (sample * 2 < scaleFactor);\n          opts.inSampleSize=sample;\n        }\n else {\n          opts.inSampleSize=(int)scaleFactor;\n        }\n      }\n    }\n else     if (mediaThumbPath != null) {\n      opts.inJustDecodeBounds=true;\n      opts.inPreferredConfig=force8888 ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;\n      FileInputStream is=new FileInputStream(cacheFileFinal);\n      image=BitmapFactory.decodeStream(is,null,opts);\n      is.close();\n      int photoW2=opts.outWidth;\n      int photoH2=opts.outHeight;\n      opts.inJustDecodeBounds=false;\n      int screenSize=Math.max(66,Math.min(AndroidUtilities.getRealScreenSize().x,AndroidUtilities.getRealScreenSize().y));\n      float scaleFactor=(Math.min(photoH2,photoW2) / (float)screenSize) * 6f;\n      if (scaleFactor < 1) {\n        scaleFactor=1;\n      }\n      if (scaleFactor > 1.0f) {\n        int sample=1;\n        do {\n          sample*=2;\n        }\n while (sample * 2 <= scaleFactor);\n        opts.inSampleSize=sample;\n      }\n else {\n        opts.inSampleSize=(int)scaleFactor;\n      }\n    }\n  }\n catch (  Throwable e) {\n    FileLog.e(e);\n  }\n  if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n    try {\n      lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n        if (isCancelled) {\n          return;\n        }\n      }\n      if (useNativeWebpLoader) {\n        RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n        ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n        BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n        bmOptions.inJustDecodeBounds=true;\n        Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n        image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n        Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n        file.close();\n      }\n else {\n        if (opts.inPurgeable || secureDocumentKey != null) {\n          RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n          int len=(int)f.length();\n          int offset=0;\n          byte[] bytesThumb=bytesThumbLocal.get();\n          byte[] data=bytesThumb != null && bytesThumb.length >= len ? bytesThumb : null;\n          if (data == null) {\n            bytesThumb=data=new byte[len];\n            bytesThumbLocal.set(bytesThumb);\n          }\n          f.readFully(data,0,len);\n          f.close();\n          boolean error=false;\n          if (secureDocumentKey != null) {\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n            byte[] hash=Utilities.computeSHA256(data,0,len);\n            if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n              error=true;\n            }\n            offset=(data[0] & 0xff);\n            len-=offset;\n          }\n else           if (inEncryptedFile) {\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n          }\n          if (!error) {\n            image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n          }\n        }\n else {\n          FileInputStream is;\n          if (inEncryptedFile) {\n            is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n          }\n else {\n            is=new FileInputStream(cacheFileFinal);\n          }\n          image=BitmapFactory.decodeStream(is,null,opts);\n          is.close();\n        }\n      }\n      if (image == null) {\n        if (cacheFileFinal.length() == 0 || cacheImage.filter == null) {\n          cacheFileFinal.delete();\n        }\n      }\n else {\n        if (cacheImage.filter != null) {\n          float bitmapW=image.getWidth();\n          float bitmapH=image.getHeight();\n          if (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\n            float scaleFactor=bitmapW / w_filter;\n            Bitmap scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n            if (image != scaledBitmap) {\n              image.recycle();\n              image=scaledBitmap;\n            }\n          }\n        }\n        if (checkInversion) {\n          needInvert=Utilities.needInvert(image,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes()) != 0;\n        }\n        if (blurType == 1) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 2) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,1,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 3) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 0 && opts.inPurgeable) {\n          Utilities.pinBitmap(image);\n        }\n      }\n    }\n catch (    Throwable e) {\n      FileLog.e(e);\n    }\n  }\n else {\n    try {\n      int delay=20;\n      if (mediaId != null) {\n        delay=0;\n      }\n      if (delay != 0 && lastCacheOutTime != 0 && lastCacheOutTime > System.currentTimeMillis() - delay && Build.VERSION.SDK_INT < 21) {\n        Thread.sleep(delay);\n      }\n      lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n        if (isCancelled) {\n          return;\n        }\n      }\n      if (force8888 || cacheImage.filter == null || blurType != 0 || cacheImage.imageLocation.path != null) {\n        opts.inPreferredConfig=Bitmap.Config.ARGB_8888;\n      }\n else {\n        opts.inPreferredConfig=Bitmap.Config.RGB_565;\n      }\n      opts.inDither=false;\n      if (mediaId != null && mediaThumbPath == null) {\n        if (mediaIsVideo) {\n          image=MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n        }\n else {\n          image=MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n        }\n      }\n      if (image == null) {\n        if (useNativeWebpLoader) {\n          RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n          ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n          BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n          bmOptions.inJustDecodeBounds=true;\n          Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n          image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n          Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n          file.close();\n        }\n else {\n          if (opts.inPurgeable || secureDocumentKey != null) {\n            RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n            int len=(int)f.length();\n            int offset=0;\n            byte[] bytes=bytesLocal.get();\n            byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n            if (data == null) {\n              bytes=data=new byte[len];\n              bytesLocal.set(bytes);\n            }\n            f.readFully(data,0,len);\n            f.close();\n            boolean error=false;\n            if (secureDocumentKey != null) {\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n              byte[] hash=Utilities.computeSHA256(data,0,len);\n              if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n                error=true;\n              }\n              offset=(data[0] & 0xff);\n              len-=offset;\n            }\n else             if (inEncryptedFile) {\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n            }\n            if (!error) {\n              image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n            }\n          }\n else {\n            FileInputStream is;\n            if (inEncryptedFile) {\n              is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n            }\n else {\n              is=new FileInputStream(cacheFileFinal);\n            }\n            if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n              try {\n                ExifInterface exif=new ExifInterface(is);\n                int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:                  orientation=90;\n                break;\ncase ExifInterface.ORIENTATION_ROTATE_180:              orientation=180;\n            break;\ncase ExifInterface.ORIENTATION_ROTATE_270:          orientation=270;\n        break;\n    }\n  }\n catch (  Throwable ignore) {\n  }\n  is.getChannel().position(0);\n}\nimage=BitmapFactory.decodeStream(is,null,opts);\nis.close();\n}\n}\n}\nif (image == null) {\nif (canDeleteFile && (cacheFileFinal.length() == 0 || cacheImage.filter == null)) {\ncacheFileFinal.delete();\n}\n}\n else {\nboolean blured=false;\nif (cacheImage.filter != null) {\nfloat bitmapW=image.getWidth();\nfloat bitmapH=image.getHeight();\nif (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\nBitmap scaledBitmap;\nif (bitmapW > bitmapH && w_filter > h_filter) {\n  float scaleFactor=bitmapW / w_filter;\n  if (scaleFactor > 1) {\n    scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n  }\n else {\n    scaledBitmap=image;\n  }\n}\n else {\n  float scaleFactor=bitmapH / h_filter;\n  if (scaleFactor > 1) {\n    scaledBitmap=Bitmaps.createScaledBitmap(image,(int)(bitmapW / scaleFactor),(int)h_filter,true);\n  }\n else {\n    scaledBitmap=image;\n  }\n}\nif (image != scaledBitmap) {\n  image.recycle();\n  image=scaledBitmap;\n}\n}\nif (image != null) {\nif (checkInversion) {\n  Bitmap b=image;\n  int w=image.getWidth();\n  int h=image.getHeight();\n  if (w * h > 150 * 150) {\n    b=Bitmaps.createScaledBitmap(image,100,100,false);\n  }\n  needInvert=Utilities.needInvert(b,opts.inPurgeable ? 0 : 1,b.getWidth(),b.getHeight(),b.getRowBytes()) != 0;\n  if (b != image) {\n    b.recycle();\n  }\n}\nif (blurType != 0 && bitmapH < 100 && bitmapW < 100) {\n  if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n    Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n  }\n  blured=true;\n}\n}\n}\nif (!blured && opts.inPurgeable) {\nUtilities.pinBitmap(image);\n}\n}\n}\n catch (Throwable ignore) {\n}\n}\nThread.interrupted();\nif (needInvert || orientation != 0) {\nonPostExecute(image != null ? new ExtendedBitmapDrawable(image,needInvert,orientation) : null);\n}\n else {\nonPostExecute(image != null ? new BitmapDrawable(image) : null);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 3394,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 34208,
        "startLineNumber" : 756,
        "startColumnNumber" : 19,
        "endLineNumber" : 1331,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (cacheImage.imageType == FileLoader.IMAGE_TYPE_THEME_PREVIEW) {\n  BitmapDrawable bitmapDrawable=null;\n  try {\n    bitmapDrawable=new ThemePreviewDrawable(cacheImage.finalFilePath,(DocumentObject.ThemeDocument)cacheImage.imageLocation.document);\n  }\n catch (  Throwable e) {\n    FileLog.e(e);\n  }\n  onPostExecute(bitmapDrawable);\n}\n else if (cacheImage.imageType == FileLoader.IMAGE_TYPE_SVG || cacheImage.imageType == FileLoader.IMAGE_TYPE_SVG_WHITE) {\n  int w=AndroidUtilities.dp(360);\n  int h=AndroidUtilities.dp(640);\n  if (cacheImage.filter != null) {\n    String[] args=cacheImage.filter.split(\"_\");\n    if (args.length >= 2) {\n      float w_filter=Float.parseFloat(args[0]);\n      float h_filter=Float.parseFloat(args[1]);\n      w=(int)(w_filter * AndroidUtilities.density);\n      h=(int)(h_filter * AndroidUtilities.density);\n    }\n  }\n  Bitmap bitmap=null;\n  try {\n    bitmap=SvgHelper.getBitmap(cacheImage.finalFilePath,w,h,cacheImage.imageType == FileLoader.IMAGE_TYPE_SVG_WHITE);\n  }\n catch (  Throwable e) {\n    FileLog.e(e);\n  }\n  onPostExecute(bitmap != null ? new BitmapDrawable(bitmap) : null);\n}\n else if (cacheImage.imageType == FileLoader.IMAGE_TYPE_LOTTIE) {\n  int w=Math.min(512,AndroidUtilities.dp(170.6f));\n  int h=Math.min(512,AndroidUtilities.dp(170.6f));\n  boolean precache=false;\n  boolean limitFps=false;\n  int autoRepeat=1;\n  int[] colors=null;\n  String diceEmoji=null;\n  if (cacheImage.filter != null) {\n    String[] args=cacheImage.filter.split(\"_\");\n    if (args.length >= 2) {\n      float w_filter=Float.parseFloat(args[0]);\n      float h_filter=Float.parseFloat(args[1]);\n      w=Math.min(512,(int)(w_filter * AndroidUtilities.density));\n      h=Math.min(512,(int)(h_filter * AndroidUtilities.density));\n      if (w_filter <= 90 && h_filter <= 90) {\n        w=Math.min(w,160);\n        h=Math.min(h,160);\n        limitFps=true;\n      }\n      precache=SharedConfig.getDevicePerformanceClass() != SharedConfig.PERFORMANCE_CLASS_HIGH;\n    }\n    if (args.length >= 3) {\n      if (\"nr\".equals(args[2])) {\n        autoRepeat=2;\n      }\n else       if (\"nrs\".equals(args[2])) {\n        autoRepeat=3;\n      }\n else       if (\"dice\".equals(args[2])) {\n        diceEmoji=args[3];\n        autoRepeat=2;\n      }\n    }\n    if (args.length >= 5) {\n      if (\"c1\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0xca907a,0xffb139,0xedc5a5,0xffd140,0xf7e3c3,0xffdf79,0xfbefd6};\n      }\n else       if (\"c2\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0xaa7c60,0xffb139,0xc8a987,0xffd140,0xddc89f,0xffdf79,0xe6d6b2};\n      }\n else       if (\"c3\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0x8c6148,0xffb139,0xad8562,0xffd140,0xc49e76,0xffdf79,0xd4b188};\n      }\n else       if (\"c4\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0x6e3c2c,0xffb139,0x925a34,0xffd140,0xa16e46,0xffdf79,0xac7a52};\n      }\n else       if (\"c5\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0x291c12,0xffb139,0x472a22,0xffd140,0x573b30,0xffdf79,0x68493c};\n      }\n    }\n  }\n  RLottieDrawable lottieDrawable;\n  if (diceEmoji != null) {\n    if (\"\\uD83C\\uDFB0\".equals(diceEmoji)) {\n      lottieDrawable=new SlotsDrawable(diceEmoji,w,h);\n    }\n else {\n      lottieDrawable=new RLottieDrawable(diceEmoji,w,h);\n    }\n  }\n else {\n    lottieDrawable=new RLottieDrawable(cacheImage.finalFilePath,w,h,precache,limitFps,colors);\n  }\n  lottieDrawable.setAutoRepeat(autoRepeat);\n  onPostExecute(lottieDrawable);\n}\n else if (cacheImage.imageType == FileLoader.IMAGE_TYPE_ANIMATION) {\n  AnimatedFileDrawable fileDrawable;\n  long seekTo;\n  if (cacheImage.imageLocation != null) {\n    seekTo=cacheImage.imageLocation.videoSeekTo;\n  }\n else {\n    seekTo=0;\n  }\n  if (AUTOPLAY_FILTER.equals(cacheImage.filter) && !(cacheImage.imageLocation.document instanceof TLRPC.TL_documentEncrypted)) {\n    TLRPC.Document document=cacheImage.imageLocation.document instanceof TLRPC.Document ? cacheImage.imageLocation.document : null;\n    int size=document != null ? cacheImage.size : cacheImage.imageLocation.currentSize;\n    fileDrawable=new AnimatedFileDrawable(cacheImage.finalFilePath,false,size,document,document == null ? cacheImage.imageLocation : null,cacheImage.parentObject,seekTo,cacheImage.currentAccount,false);\n  }\n else {\n    fileDrawable=new AnimatedFileDrawable(cacheImage.finalFilePath,\"d\".equals(cacheImage.filter),0,null,null,null,seekTo,cacheImage.currentAccount,false);\n  }\n  Thread.interrupted();\n  onPostExecute(fileDrawable);\n}\n else {\n  Long mediaId=null;\n  boolean mediaIsVideo=false;\n  Bitmap image=null;\n  boolean needInvert=false;\n  int orientation=0;\n  File cacheFileFinal=cacheImage.finalFilePath;\n  boolean inEncryptedFile=cacheImage.secureDocument != null || cacheImage.encryptionKeyPath != null && cacheFileFinal != null && cacheFileFinal.getAbsolutePath().endsWith(\".enc\");\n  SecureDocumentKey secureDocumentKey;\n  byte[] secureDocumentHash;\n  if (cacheImage.secureDocument != null) {\n    secureDocumentKey=cacheImage.secureDocument.secureDocumentKey;\n    if (cacheImage.secureDocument.secureFile != null && cacheImage.secureDocument.secureFile.file_hash != null) {\n      secureDocumentHash=cacheImage.secureDocument.secureFile.file_hash;\n    }\n else {\n      secureDocumentHash=cacheImage.secureDocument.fileHash;\n    }\n  }\n else {\n    secureDocumentKey=null;\n    secureDocumentHash=null;\n  }\n  boolean canDeleteFile=true;\n  boolean useNativeWebpLoader=false;\n  if (Build.VERSION.SDK_INT < 19) {\n    RandomAccessFile randomAccessFile=null;\n    try {\n      randomAccessFile=new RandomAccessFile(cacheFileFinal,\"r\");\n      byte[] bytes;\n      if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n        bytes=headerThumb;\n      }\n else {\n        bytes=header;\n      }\n      randomAccessFile.readFully(bytes,0,bytes.length);\n      String str=new String(bytes).toLowerCase();\n      str=str.toLowerCase();\n      if (str.startsWith(\"riff\") && str.endsWith(\"webp\")) {\n        useNativeWebpLoader=true;\n      }\n      randomAccessFile.close();\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n finally {\n      if (randomAccessFile != null) {\n        try {\n          randomAccessFile.close();\n        }\n catch (        Exception e) {\n          FileLog.e(e);\n        }\n      }\n    }\n  }\n  String mediaThumbPath=null;\n  if (cacheImage.imageLocation.path != null) {\n    String location=cacheImage.imageLocation.path;\n    if (location.startsWith(\"thumb://\")) {\n      int idx=location.indexOf(\":\",8);\n      if (idx >= 0) {\n        mediaId=Long.parseLong(location.substring(8,idx));\n        mediaIsVideo=false;\n        mediaThumbPath=location.substring(idx + 1);\n      }\n      canDeleteFile=false;\n    }\n else     if (location.startsWith(\"vthumb://\")) {\n      int idx=location.indexOf(\":\",9);\n      if (idx >= 0) {\n        mediaId=Long.parseLong(location.substring(9,idx));\n        mediaIsVideo=true;\n      }\n      canDeleteFile=false;\n    }\n else     if (!location.startsWith(\"http\")) {\n      canDeleteFile=false;\n    }\n  }\n  BitmapFactory.Options opts=new BitmapFactory.Options();\n  opts.inSampleSize=1;\n  if (Build.VERSION.SDK_INT < 21) {\n    opts.inPurgeable=true;\n  }\n  float w_filter=0;\n  float h_filter=0;\n  int blurType=0;\n  boolean checkInversion=false;\n  boolean force8888=canForce8888;\n  try {\n    if (cacheImage.filter != null) {\n      String[] args=cacheImage.filter.split(\"_\");\n      if (args.length >= 2) {\n        w_filter=Float.parseFloat(args[0]) * AndroidUtilities.density;\n        h_filter=Float.parseFloat(args[1]) * AndroidUtilities.density;\n      }\n      if (cacheImage.filter.contains(\"b2\")) {\n        blurType=3;\n      }\n else       if (cacheImage.filter.contains(\"b1\")) {\n        blurType=2;\n      }\n else       if (cacheImage.filter.contains(\"b\")) {\n        blurType=1;\n      }\n      if (cacheImage.filter.contains(\"i\")) {\n        checkInversion=true;\n      }\n      if (cacheImage.filter.contains(\"f\")) {\n        force8888=true;\n      }\n      if (!useNativeWebpLoader && w_filter != 0 && h_filter != 0) {\n        opts.inJustDecodeBounds=true;\n        if (mediaId != null && mediaThumbPath == null) {\n          if (mediaIsVideo) {\n            MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n          }\n else {\n            MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n          }\n        }\n else {\n          if (secureDocumentKey != null) {\n            RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n            int len=(int)f.length();\n            byte[] bytes=bytesLocal.get();\n            byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n            if (data == null) {\n              bytes=data=new byte[len];\n              bytesLocal.set(bytes);\n            }\n            f.readFully(data,0,len);\n            f.close();\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n            byte[] hash=Utilities.computeSHA256(data,0,len);\n            boolean error=false;\n            if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n              error=true;\n            }\n            int offset=(data[0] & 0xff);\n            len-=offset;\n            if (!error) {\n              BitmapFactory.decodeByteArray(data,offset,len,opts);\n            }\n          }\n else {\n            FileInputStream is;\n            if (inEncryptedFile) {\n              is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n            }\n else {\n              is=new FileInputStream(cacheFileFinal);\n            }\n            BitmapFactory.decodeStream(is,null,opts);\n            is.close();\n          }\n        }\n        float photoW=opts.outWidth;\n        float photoH=opts.outHeight;\n        float scaleFactor;\n        if (w_filter >= h_filter && photoW > photoH) {\n          scaleFactor=Math.max(photoW / w_filter,photoH / h_filter);\n        }\n else {\n          scaleFactor=Math.min(photoW / w_filter,photoH / h_filter);\n        }\n        if (scaleFactor < 1.2f) {\n          scaleFactor=1;\n        }\n        opts.inJustDecodeBounds=false;\n        if (scaleFactor > 1.0f && (photoW > w_filter || photoH > h_filter)) {\n          int sample=1;\n          do {\n            sample*=2;\n          }\n while (sample * 2 < scaleFactor);\n          opts.inSampleSize=sample;\n        }\n else {\n          opts.inSampleSize=(int)scaleFactor;\n        }\n      }\n    }\n else     if (mediaThumbPath != null) {\n      opts.inJustDecodeBounds=true;\n      opts.inPreferredConfig=force8888 ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;\n      FileInputStream is=new FileInputStream(cacheFileFinal);\n      image=BitmapFactory.decodeStream(is,null,opts);\n      is.close();\n      int photoW2=opts.outWidth;\n      int photoH2=opts.outHeight;\n      opts.inJustDecodeBounds=false;\n      int screenSize=Math.max(66,Math.min(AndroidUtilities.getRealScreenSize().x,AndroidUtilities.getRealScreenSize().y));\n      float scaleFactor=(Math.min(photoH2,photoW2) / (float)screenSize) * 6f;\n      if (scaleFactor < 1) {\n        scaleFactor=1;\n      }\n      if (scaleFactor > 1.0f) {\n        int sample=1;\n        do {\n          sample*=2;\n        }\n while (sample * 2 <= scaleFactor);\n        opts.inSampleSize=sample;\n      }\n else {\n        opts.inSampleSize=(int)scaleFactor;\n      }\n    }\n  }\n catch (  Throwable e) {\n    FileLog.e(e);\n  }\n  if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n    try {\n      lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n        if (isCancelled) {\n          return;\n        }\n      }\n      if (useNativeWebpLoader) {\n        RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n        ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n        BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n        bmOptions.inJustDecodeBounds=true;\n        Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n        image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n        Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n        file.close();\n      }\n else {\n        if (opts.inPurgeable || secureDocumentKey != null) {\n          RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n          int len=(int)f.length();\n          int offset=0;\n          byte[] bytesThumb=bytesThumbLocal.get();\n          byte[] data=bytesThumb != null && bytesThumb.length >= len ? bytesThumb : null;\n          if (data == null) {\n            bytesThumb=data=new byte[len];\n            bytesThumbLocal.set(bytesThumb);\n          }\n          f.readFully(data,0,len);\n          f.close();\n          boolean error=false;\n          if (secureDocumentKey != null) {\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n            byte[] hash=Utilities.computeSHA256(data,0,len);\n            if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n              error=true;\n            }\n            offset=(data[0] & 0xff);\n            len-=offset;\n          }\n else           if (inEncryptedFile) {\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n          }\n          if (!error) {\n            image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n          }\n        }\n else {\n          FileInputStream is;\n          if (inEncryptedFile) {\n            is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n          }\n else {\n            is=new FileInputStream(cacheFileFinal);\n          }\n          image=BitmapFactory.decodeStream(is,null,opts);\n          is.close();\n        }\n      }\n      if (image == null) {\n        if (cacheFileFinal.length() == 0 || cacheImage.filter == null) {\n          cacheFileFinal.delete();\n        }\n      }\n else {\n        if (cacheImage.filter != null) {\n          float bitmapW=image.getWidth();\n          float bitmapH=image.getHeight();\n          if (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\n            float scaleFactor=bitmapW / w_filter;\n            Bitmap scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n            if (image != scaledBitmap) {\n              image.recycle();\n              image=scaledBitmap;\n            }\n          }\n        }\n        if (checkInversion) {\n          needInvert=Utilities.needInvert(image,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes()) != 0;\n        }\n        if (blurType == 1) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 2) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,1,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 3) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 0 && opts.inPurgeable) {\n          Utilities.pinBitmap(image);\n        }\n      }\n    }\n catch (    Throwable e) {\n      FileLog.e(e);\n    }\n  }\n else {\n    try {\n      int delay=20;\n      if (mediaId != null) {\n        delay=0;\n      }\n      if (delay != 0 && lastCacheOutTime != 0 && lastCacheOutTime > System.currentTimeMillis() - delay && Build.VERSION.SDK_INT < 21) {\n        Thread.sleep(delay);\n      }\n      lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n        if (isCancelled) {\n          return;\n        }\n      }\n      if (force8888 || cacheImage.filter == null || blurType != 0 || cacheImage.imageLocation.path != null) {\n        opts.inPreferredConfig=Bitmap.Config.ARGB_8888;\n      }\n else {\n        opts.inPreferredConfig=Bitmap.Config.RGB_565;\n      }\n      opts.inDither=false;\n      if (mediaId != null && mediaThumbPath == null) {\n        if (mediaIsVideo) {\n          image=MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n        }\n else {\n          image=MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n        }\n      }\n      if (image == null) {\n        if (useNativeWebpLoader) {\n          RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n          ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n          BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n          bmOptions.inJustDecodeBounds=true;\n          Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n          image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n          Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n          file.close();\n        }\n else {\n          if (opts.inPurgeable || secureDocumentKey != null) {\n            RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n            int len=(int)f.length();\n            int offset=0;\n            byte[] bytes=bytesLocal.get();\n            byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n            if (data == null) {\n              bytes=data=new byte[len];\n              bytesLocal.set(bytes);\n            }\n            f.readFully(data,0,len);\n            f.close();\n            boolean error=false;\n            if (secureDocumentKey != null) {\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n              byte[] hash=Utilities.computeSHA256(data,0,len);\n              if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n                error=true;\n              }\n              offset=(data[0] & 0xff);\n              len-=offset;\n            }\n else             if (inEncryptedFile) {\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n            }\n            if (!error) {\n              image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n            }\n          }\n else {\n            FileInputStream is;\n            if (inEncryptedFile) {\n              is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n            }\n else {\n              is=new FileInputStream(cacheFileFinal);\n            }\n            if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n              try {\n                ExifInterface exif=new ExifInterface(is);\n                int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:                  orientation=90;\n                break;\ncase ExifInterface.ORIENTATION_ROTATE_180:              orientation=180;\n            break;\ncase ExifInterface.ORIENTATION_ROTATE_270:          orientation=270;\n        break;\n    }\n  }\n catch (  Throwable ignore) {\n  }\n  is.getChannel().position(0);\n}\nimage=BitmapFactory.decodeStream(is,null,opts);\nis.close();\n}\n}\n}\nif (image == null) {\nif (canDeleteFile && (cacheFileFinal.length() == 0 || cacheImage.filter == null)) {\ncacheFileFinal.delete();\n}\n}\n else {\nboolean blured=false;\nif (cacheImage.filter != null) {\nfloat bitmapW=image.getWidth();\nfloat bitmapH=image.getHeight();\nif (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\nBitmap scaledBitmap;\nif (bitmapW > bitmapH && w_filter > h_filter) {\n  float scaleFactor=bitmapW / w_filter;\n  if (scaleFactor > 1) {\n    scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n  }\n else {\n    scaledBitmap=image;\n  }\n}\n else {\n  float scaleFactor=bitmapH / h_filter;\n  if (scaleFactor > 1) {\n    scaledBitmap=Bitmaps.createScaledBitmap(image,(int)(bitmapW / scaleFactor),(int)h_filter,true);\n  }\n else {\n    scaledBitmap=image;\n  }\n}\nif (image != scaledBitmap) {\n  image.recycle();\n  image=scaledBitmap;\n}\n}\nif (image != null) {\nif (checkInversion) {\n  Bitmap b=image;\n  int w=image.getWidth();\n  int h=image.getHeight();\n  if (w * h > 150 * 150) {\n    b=Bitmaps.createScaledBitmap(image,100,100,false);\n  }\n  needInvert=Utilities.needInvert(b,opts.inPurgeable ? 0 : 1,b.getWidth(),b.getHeight(),b.getRowBytes()) != 0;\n  if (b != image) {\n    b.recycle();\n  }\n}\nif (blurType != 0 && bitmapH < 100 && bitmapW < 100) {\n  if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n    Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n  }\n  blured=true;\n}\n}\n}\nif (!blured && opts.inPurgeable) {\nUtilities.pinBitmap(image);\n}\n}\n}\n catch (Throwable ignore) {\n}\n}\nThread.interrupted();\nif (needInvert || orientation != 0) {\nonPostExecute(image != null ? new ExtendedBitmapDrawable(image,needInvert,orientation) : null);\n}\n else {\nonPostExecute(image != null ? new BitmapDrawable(image) : null);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 3445,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34602,
        "startLineNumber" : 752,
        "startColumnNumber" : 12,
        "endLineNumber" : 1331,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (cacheImage.imageLocation.photoSize instanceof TLRPC.TL_photoStrippedSize) {\n  TLRPC.TL_photoStrippedSize photoSize=(TLRPC.TL_photoStrippedSize)cacheImage.imageLocation.photoSize;\n  Bitmap bitmap=getStrippedPhotoBitmap(photoSize.bytes,cacheImage.filter);\n  onPostExecute(bitmap != null ? new BitmapDrawable(bitmap) : null);\n}\n else if (cacheImage.imageType == FileLoader.IMAGE_TYPE_THEME_PREVIEW) {\n  BitmapDrawable bitmapDrawable=null;\n  try {\n    bitmapDrawable=new ThemePreviewDrawable(cacheImage.finalFilePath,(DocumentObject.ThemeDocument)cacheImage.imageLocation.document);\n  }\n catch (  Throwable e) {\n    FileLog.e(e);\n  }\n  onPostExecute(bitmapDrawable);\n}\n else if (cacheImage.imageType == FileLoader.IMAGE_TYPE_SVG || cacheImage.imageType == FileLoader.IMAGE_TYPE_SVG_WHITE) {\n  int w=AndroidUtilities.dp(360);\n  int h=AndroidUtilities.dp(640);\n  if (cacheImage.filter != null) {\n    String[] args=cacheImage.filter.split(\"_\");\n    if (args.length >= 2) {\n      float w_filter=Float.parseFloat(args[0]);\n      float h_filter=Float.parseFloat(args[1]);\n      w=(int)(w_filter * AndroidUtilities.density);\n      h=(int)(h_filter * AndroidUtilities.density);\n    }\n  }\n  Bitmap bitmap=null;\n  try {\n    bitmap=SvgHelper.getBitmap(cacheImage.finalFilePath,w,h,cacheImage.imageType == FileLoader.IMAGE_TYPE_SVG_WHITE);\n  }\n catch (  Throwable e) {\n    FileLog.e(e);\n  }\n  onPostExecute(bitmap != null ? new BitmapDrawable(bitmap) : null);\n}\n else if (cacheImage.imageType == FileLoader.IMAGE_TYPE_LOTTIE) {\n  int w=Math.min(512,AndroidUtilities.dp(170.6f));\n  int h=Math.min(512,AndroidUtilities.dp(170.6f));\n  boolean precache=false;\n  boolean limitFps=false;\n  int autoRepeat=1;\n  int[] colors=null;\n  String diceEmoji=null;\n  if (cacheImage.filter != null) {\n    String[] args=cacheImage.filter.split(\"_\");\n    if (args.length >= 2) {\n      float w_filter=Float.parseFloat(args[0]);\n      float h_filter=Float.parseFloat(args[1]);\n      w=Math.min(512,(int)(w_filter * AndroidUtilities.density));\n      h=Math.min(512,(int)(h_filter * AndroidUtilities.density));\n      if (w_filter <= 90 && h_filter <= 90) {\n        w=Math.min(w,160);\n        h=Math.min(h,160);\n        limitFps=true;\n      }\n      precache=SharedConfig.getDevicePerformanceClass() != SharedConfig.PERFORMANCE_CLASS_HIGH;\n    }\n    if (args.length >= 3) {\n      if (\"nr\".equals(args[2])) {\n        autoRepeat=2;\n      }\n else       if (\"nrs\".equals(args[2])) {\n        autoRepeat=3;\n      }\n else       if (\"dice\".equals(args[2])) {\n        diceEmoji=args[3];\n        autoRepeat=2;\n      }\n    }\n    if (args.length >= 5) {\n      if (\"c1\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0xca907a,0xffb139,0xedc5a5,0xffd140,0xf7e3c3,0xffdf79,0xfbefd6};\n      }\n else       if (\"c2\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0xaa7c60,0xffb139,0xc8a987,0xffd140,0xddc89f,0xffdf79,0xe6d6b2};\n      }\n else       if (\"c3\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0x8c6148,0xffb139,0xad8562,0xffd140,0xc49e76,0xffdf79,0xd4b188};\n      }\n else       if (\"c4\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0x6e3c2c,0xffb139,0x925a34,0xffd140,0xa16e46,0xffdf79,0xac7a52};\n      }\n else       if (\"c5\".equals(args[4])) {\n        colors=new int[]{0xf77e41,0x291c12,0xffb139,0x472a22,0xffd140,0x573b30,0xffdf79,0x68493c};\n      }\n    }\n  }\n  RLottieDrawable lottieDrawable;\n  if (diceEmoji != null) {\n    if (\"\\uD83C\\uDFB0\".equals(diceEmoji)) {\n      lottieDrawable=new SlotsDrawable(diceEmoji,w,h);\n    }\n else {\n      lottieDrawable=new RLottieDrawable(diceEmoji,w,h);\n    }\n  }\n else {\n    lottieDrawable=new RLottieDrawable(cacheImage.finalFilePath,w,h,precache,limitFps,colors);\n  }\n  lottieDrawable.setAutoRepeat(autoRepeat);\n  onPostExecute(lottieDrawable);\n}\n else if (cacheImage.imageType == FileLoader.IMAGE_TYPE_ANIMATION) {\n  AnimatedFileDrawable fileDrawable;\n  long seekTo;\n  if (cacheImage.imageLocation != null) {\n    seekTo=cacheImage.imageLocation.videoSeekTo;\n  }\n else {\n    seekTo=0;\n  }\n  if (AUTOPLAY_FILTER.equals(cacheImage.filter) && !(cacheImage.imageLocation.document instanceof TLRPC.TL_documentEncrypted)) {\n    TLRPC.Document document=cacheImage.imageLocation.document instanceof TLRPC.Document ? cacheImage.imageLocation.document : null;\n    int size=document != null ? cacheImage.size : cacheImage.imageLocation.currentSize;\n    fileDrawable=new AnimatedFileDrawable(cacheImage.finalFilePath,false,size,document,document == null ? cacheImage.imageLocation : null,cacheImage.parentObject,seekTo,cacheImage.currentAccount,false);\n  }\n else {\n    fileDrawable=new AnimatedFileDrawable(cacheImage.finalFilePath,\"d\".equals(cacheImage.filter),0,null,null,null,seekTo,cacheImage.currentAccount,false);\n  }\n  Thread.interrupted();\n  onPostExecute(fileDrawable);\n}\n else {\n  Long mediaId=null;\n  boolean mediaIsVideo=false;\n  Bitmap image=null;\n  boolean needInvert=false;\n  int orientation=0;\n  File cacheFileFinal=cacheImage.finalFilePath;\n  boolean inEncryptedFile=cacheImage.secureDocument != null || cacheImage.encryptionKeyPath != null && cacheFileFinal != null && cacheFileFinal.getAbsolutePath().endsWith(\".enc\");\n  SecureDocumentKey secureDocumentKey;\n  byte[] secureDocumentHash;\n  if (cacheImage.secureDocument != null) {\n    secureDocumentKey=cacheImage.secureDocument.secureDocumentKey;\n    if (cacheImage.secureDocument.secureFile != null && cacheImage.secureDocument.secureFile.file_hash != null) {\n      secureDocumentHash=cacheImage.secureDocument.secureFile.file_hash;\n    }\n else {\n      secureDocumentHash=cacheImage.secureDocument.fileHash;\n    }\n  }\n else {\n    secureDocumentKey=null;\n    secureDocumentHash=null;\n  }\n  boolean canDeleteFile=true;\n  boolean useNativeWebpLoader=false;\n  if (Build.VERSION.SDK_INT < 19) {\n    RandomAccessFile randomAccessFile=null;\n    try {\n      randomAccessFile=new RandomAccessFile(cacheFileFinal,\"r\");\n      byte[] bytes;\n      if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n        bytes=headerThumb;\n      }\n else {\n        bytes=header;\n      }\n      randomAccessFile.readFully(bytes,0,bytes.length);\n      String str=new String(bytes).toLowerCase();\n      str=str.toLowerCase();\n      if (str.startsWith(\"riff\") && str.endsWith(\"webp\")) {\n        useNativeWebpLoader=true;\n      }\n      randomAccessFile.close();\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n finally {\n      if (randomAccessFile != null) {\n        try {\n          randomAccessFile.close();\n        }\n catch (        Exception e) {\n          FileLog.e(e);\n        }\n      }\n    }\n  }\n  String mediaThumbPath=null;\n  if (cacheImage.imageLocation.path != null) {\n    String location=cacheImage.imageLocation.path;\n    if (location.startsWith(\"thumb://\")) {\n      int idx=location.indexOf(\":\",8);\n      if (idx >= 0) {\n        mediaId=Long.parseLong(location.substring(8,idx));\n        mediaIsVideo=false;\n        mediaThumbPath=location.substring(idx + 1);\n      }\n      canDeleteFile=false;\n    }\n else     if (location.startsWith(\"vthumb://\")) {\n      int idx=location.indexOf(\":\",9);\n      if (idx >= 0) {\n        mediaId=Long.parseLong(location.substring(9,idx));\n        mediaIsVideo=true;\n      }\n      canDeleteFile=false;\n    }\n else     if (!location.startsWith(\"http\")) {\n      canDeleteFile=false;\n    }\n  }\n  BitmapFactory.Options opts=new BitmapFactory.Options();\n  opts.inSampleSize=1;\n  if (Build.VERSION.SDK_INT < 21) {\n    opts.inPurgeable=true;\n  }\n  float w_filter=0;\n  float h_filter=0;\n  int blurType=0;\n  boolean checkInversion=false;\n  boolean force8888=canForce8888;\n  try {\n    if (cacheImage.filter != null) {\n      String[] args=cacheImage.filter.split(\"_\");\n      if (args.length >= 2) {\n        w_filter=Float.parseFloat(args[0]) * AndroidUtilities.density;\n        h_filter=Float.parseFloat(args[1]) * AndroidUtilities.density;\n      }\n      if (cacheImage.filter.contains(\"b2\")) {\n        blurType=3;\n      }\n else       if (cacheImage.filter.contains(\"b1\")) {\n        blurType=2;\n      }\n else       if (cacheImage.filter.contains(\"b\")) {\n        blurType=1;\n      }\n      if (cacheImage.filter.contains(\"i\")) {\n        checkInversion=true;\n      }\n      if (cacheImage.filter.contains(\"f\")) {\n        force8888=true;\n      }\n      if (!useNativeWebpLoader && w_filter != 0 && h_filter != 0) {\n        opts.inJustDecodeBounds=true;\n        if (mediaId != null && mediaThumbPath == null) {\n          if (mediaIsVideo) {\n            MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n          }\n else {\n            MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n          }\n        }\n else {\n          if (secureDocumentKey != null) {\n            RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n            int len=(int)f.length();\n            byte[] bytes=bytesLocal.get();\n            byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n            if (data == null) {\n              bytes=data=new byte[len];\n              bytesLocal.set(bytes);\n            }\n            f.readFully(data,0,len);\n            f.close();\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n            byte[] hash=Utilities.computeSHA256(data,0,len);\n            boolean error=false;\n            if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n              error=true;\n            }\n            int offset=(data[0] & 0xff);\n            len-=offset;\n            if (!error) {\n              BitmapFactory.decodeByteArray(data,offset,len,opts);\n            }\n          }\n else {\n            FileInputStream is;\n            if (inEncryptedFile) {\n              is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n            }\n else {\n              is=new FileInputStream(cacheFileFinal);\n            }\n            BitmapFactory.decodeStream(is,null,opts);\n            is.close();\n          }\n        }\n        float photoW=opts.outWidth;\n        float photoH=opts.outHeight;\n        float scaleFactor;\n        if (w_filter >= h_filter && photoW > photoH) {\n          scaleFactor=Math.max(photoW / w_filter,photoH / h_filter);\n        }\n else {\n          scaleFactor=Math.min(photoW / w_filter,photoH / h_filter);\n        }\n        if (scaleFactor < 1.2f) {\n          scaleFactor=1;\n        }\n        opts.inJustDecodeBounds=false;\n        if (scaleFactor > 1.0f && (photoW > w_filter || photoH > h_filter)) {\n          int sample=1;\n          do {\n            sample*=2;\n          }\n while (sample * 2 < scaleFactor);\n          opts.inSampleSize=sample;\n        }\n else {\n          opts.inSampleSize=(int)scaleFactor;\n        }\n      }\n    }\n else     if (mediaThumbPath != null) {\n      opts.inJustDecodeBounds=true;\n      opts.inPreferredConfig=force8888 ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;\n      FileInputStream is=new FileInputStream(cacheFileFinal);\n      image=BitmapFactory.decodeStream(is,null,opts);\n      is.close();\n      int photoW2=opts.outWidth;\n      int photoH2=opts.outHeight;\n      opts.inJustDecodeBounds=false;\n      int screenSize=Math.max(66,Math.min(AndroidUtilities.getRealScreenSize().x,AndroidUtilities.getRealScreenSize().y));\n      float scaleFactor=(Math.min(photoH2,photoW2) / (float)screenSize) * 6f;\n      if (scaleFactor < 1) {\n        scaleFactor=1;\n      }\n      if (scaleFactor > 1.0f) {\n        int sample=1;\n        do {\n          sample*=2;\n        }\n while (sample * 2 <= scaleFactor);\n        opts.inSampleSize=sample;\n      }\n else {\n        opts.inSampleSize=(int)scaleFactor;\n      }\n    }\n  }\n catch (  Throwable e) {\n    FileLog.e(e);\n  }\n  if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n    try {\n      lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n        if (isCancelled) {\n          return;\n        }\n      }\n      if (useNativeWebpLoader) {\n        RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n        ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n        BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n        bmOptions.inJustDecodeBounds=true;\n        Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n        image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n        Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n        file.close();\n      }\n else {\n        if (opts.inPurgeable || secureDocumentKey != null) {\n          RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n          int len=(int)f.length();\n          int offset=0;\n          byte[] bytesThumb=bytesThumbLocal.get();\n          byte[] data=bytesThumb != null && bytesThumb.length >= len ? bytesThumb : null;\n          if (data == null) {\n            bytesThumb=data=new byte[len];\n            bytesThumbLocal.set(bytesThumb);\n          }\n          f.readFully(data,0,len);\n          f.close();\n          boolean error=false;\n          if (secureDocumentKey != null) {\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n            byte[] hash=Utilities.computeSHA256(data,0,len);\n            if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n              error=true;\n            }\n            offset=(data[0] & 0xff);\n            len-=offset;\n          }\n else           if (inEncryptedFile) {\n            EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n          }\n          if (!error) {\n            image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n          }\n        }\n else {\n          FileInputStream is;\n          if (inEncryptedFile) {\n            is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n          }\n else {\n            is=new FileInputStream(cacheFileFinal);\n          }\n          image=BitmapFactory.decodeStream(is,null,opts);\n          is.close();\n        }\n      }\n      if (image == null) {\n        if (cacheFileFinal.length() == 0 || cacheImage.filter == null) {\n          cacheFileFinal.delete();\n        }\n      }\n else {\n        if (cacheImage.filter != null) {\n          float bitmapW=image.getWidth();\n          float bitmapH=image.getHeight();\n          if (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\n            float scaleFactor=bitmapW / w_filter;\n            Bitmap scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n            if (image != scaledBitmap) {\n              image.recycle();\n              image=scaledBitmap;\n            }\n          }\n        }\n        if (checkInversion) {\n          needInvert=Utilities.needInvert(image,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes()) != 0;\n        }\n        if (blurType == 1) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 2) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,1,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 3) {\n          if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n          }\n        }\n else         if (blurType == 0 && opts.inPurgeable) {\n          Utilities.pinBitmap(image);\n        }\n      }\n    }\n catch (    Throwable e) {\n      FileLog.e(e);\n    }\n  }\n else {\n    try {\n      int delay=20;\n      if (mediaId != null) {\n        delay=0;\n      }\n      if (delay != 0 && lastCacheOutTime != 0 && lastCacheOutTime > System.currentTimeMillis() - delay && Build.VERSION.SDK_INT < 21) {\n        Thread.sleep(delay);\n      }\n      lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n        if (isCancelled) {\n          return;\n        }\n      }\n      if (force8888 || cacheImage.filter == null || blurType != 0 || cacheImage.imageLocation.path != null) {\n        opts.inPreferredConfig=Bitmap.Config.ARGB_8888;\n      }\n else {\n        opts.inPreferredConfig=Bitmap.Config.RGB_565;\n      }\n      opts.inDither=false;\n      if (mediaId != null && mediaThumbPath == null) {\n        if (mediaIsVideo) {\n          image=MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n        }\n else {\n          image=MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n        }\n      }\n      if (image == null) {\n        if (useNativeWebpLoader) {\n          RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n          ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n          BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n          bmOptions.inJustDecodeBounds=true;\n          Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n          image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n          Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n          file.close();\n        }\n else {\n          if (opts.inPurgeable || secureDocumentKey != null) {\n            RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n            int len=(int)f.length();\n            int offset=0;\n            byte[] bytes=bytesLocal.get();\n            byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n            if (data == null) {\n              bytes=data=new byte[len];\n              bytesLocal.set(bytes);\n            }\n            f.readFully(data,0,len);\n            f.close();\n            boolean error=false;\n            if (secureDocumentKey != null) {\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n              byte[] hash=Utilities.computeSHA256(data,0,len);\n              if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n                error=true;\n              }\n              offset=(data[0] & 0xff);\n              len-=offset;\n            }\n else             if (inEncryptedFile) {\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n            }\n            if (!error) {\n              image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n            }\n          }\n else {\n            FileInputStream is;\n            if (inEncryptedFile) {\n              is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n            }\n else {\n              is=new FileInputStream(cacheFileFinal);\n            }\n            if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n              try {\n                ExifInterface exif=new ExifInterface(is);\n                int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:                  orientation=90;\n                break;\ncase ExifInterface.ORIENTATION_ROTATE_180:              orientation=180;\n            break;\ncase ExifInterface.ORIENTATION_ROTATE_270:          orientation=270;\n        break;\n    }\n  }\n catch (  Throwable ignore) {\n  }\n  is.getChannel().position(0);\n}\nimage=BitmapFactory.decodeStream(is,null,opts);\nis.close();\n}\n}\n}\nif (image == null) {\nif (canDeleteFile && (cacheFileFinal.length() == 0 || cacheImage.filter == null)) {\ncacheFileFinal.delete();\n}\n}\n else {\nboolean blured=false;\nif (cacheImage.filter != null) {\nfloat bitmapW=image.getWidth();\nfloat bitmapH=image.getHeight();\nif (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\nBitmap scaledBitmap;\nif (bitmapW > bitmapH && w_filter > h_filter) {\n  float scaleFactor=bitmapW / w_filter;\n  if (scaleFactor > 1) {\n    scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n  }\n else {\n    scaledBitmap=image;\n  }\n}\n else {\n  float scaleFactor=bitmapH / h_filter;\n  if (scaleFactor > 1) {\n    scaledBitmap=Bitmaps.createScaledBitmap(image,(int)(bitmapW / scaleFactor),(int)h_filter,true);\n  }\n else {\n    scaledBitmap=image;\n  }\n}\nif (image != scaledBitmap) {\n  image.recycle();\n  image=scaledBitmap;\n}\n}\nif (image != null) {\nif (checkInversion) {\n  Bitmap b=image;\n  int w=image.getWidth();\n  int h=image.getHeight();\n  if (w * h > 150 * 150) {\n    b=Bitmaps.createScaledBitmap(image,100,100,false);\n  }\n  needInvert=Utilities.needInvert(b,opts.inPurgeable ? 0 : 1,b.getWidth(),b.getHeight(),b.getRowBytes()) != 0;\n  if (b != image) {\n    b.recycle();\n  }\n}\nif (blurType != 0 && bitmapH < 100 && bitmapW < 100) {\n  if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n    Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n  }\n  blured=true;\n}\n}\n}\nif (!blured && opts.inPurgeable) {\nUtilities.pinBitmap(image);\n}\n}\n}\n catch (Throwable ignore) {\n}\n}\nThread.interrupted();\nif (needInvert || orientation != 0) {\nonPostExecute(image != null ? new ExtendedBitmapDrawable(image,needInvert,orientation) : null);\n}\n else {\nonPostExecute(image != null ? new BitmapDrawable(image) : null);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 3499,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 34850,
        "startLineNumber" : 743,
        "startColumnNumber" : 26,
        "endLineNumber" : 1332,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nsynchronized (sync) {\n    runningThread=Thread.currentThread();\n    Thread.interrupted();\n    if (isCancelled) {\n      return;\n    }\n  }\n  if (cacheImage.imageLocation.photoSize instanceof TLRPC.TL_photoStrippedSize) {\n    TLRPC.TL_photoStrippedSize photoSize=(TLRPC.TL_photoStrippedSize)cacheImage.imageLocation.photoSize;\n    Bitmap bitmap=getStrippedPhotoBitmap(photoSize.bytes,cacheImage.filter);\n    onPostExecute(bitmap != null ? new BitmapDrawable(bitmap) : null);\n  }\n else   if (cacheImage.imageType == FileLoader.IMAGE_TYPE_THEME_PREVIEW) {\n    BitmapDrawable bitmapDrawable=null;\n    try {\n      bitmapDrawable=new ThemePreviewDrawable(cacheImage.finalFilePath,(DocumentObject.ThemeDocument)cacheImage.imageLocation.document);\n    }\n catch (    Throwable e) {\n      FileLog.e(e);\n    }\n    onPostExecute(bitmapDrawable);\n  }\n else   if (cacheImage.imageType == FileLoader.IMAGE_TYPE_SVG || cacheImage.imageType == FileLoader.IMAGE_TYPE_SVG_WHITE) {\n    int w=AndroidUtilities.dp(360);\n    int h=AndroidUtilities.dp(640);\n    if (cacheImage.filter != null) {\n      String[] args=cacheImage.filter.split(\"_\");\n      if (args.length >= 2) {\n        float w_filter=Float.parseFloat(args[0]);\n        float h_filter=Float.parseFloat(args[1]);\n        w=(int)(w_filter * AndroidUtilities.density);\n        h=(int)(h_filter * AndroidUtilities.density);\n      }\n    }\n    Bitmap bitmap=null;\n    try {\n      bitmap=SvgHelper.getBitmap(cacheImage.finalFilePath,w,h,cacheImage.imageType == FileLoader.IMAGE_TYPE_SVG_WHITE);\n    }\n catch (    Throwable e) {\n      FileLog.e(e);\n    }\n    onPostExecute(bitmap != null ? new BitmapDrawable(bitmap) : null);\n  }\n else   if (cacheImage.imageType == FileLoader.IMAGE_TYPE_LOTTIE) {\n    int w=Math.min(512,AndroidUtilities.dp(170.6f));\n    int h=Math.min(512,AndroidUtilities.dp(170.6f));\n    boolean precache=false;\n    boolean limitFps=false;\n    int autoRepeat=1;\n    int[] colors=null;\n    String diceEmoji=null;\n    if (cacheImage.filter != null) {\n      String[] args=cacheImage.filter.split(\"_\");\n      if (args.length >= 2) {\n        float w_filter=Float.parseFloat(args[0]);\n        float h_filter=Float.parseFloat(args[1]);\n        w=Math.min(512,(int)(w_filter * AndroidUtilities.density));\n        h=Math.min(512,(int)(h_filter * AndroidUtilities.density));\n        if (w_filter <= 90 && h_filter <= 90) {\n          w=Math.min(w,160);\n          h=Math.min(h,160);\n          limitFps=true;\n        }\n        precache=SharedConfig.getDevicePerformanceClass() != SharedConfig.PERFORMANCE_CLASS_HIGH;\n      }\n      if (args.length >= 3) {\n        if (\"nr\".equals(args[2])) {\n          autoRepeat=2;\n        }\n else         if (\"nrs\".equals(args[2])) {\n          autoRepeat=3;\n        }\n else         if (\"dice\".equals(args[2])) {\n          diceEmoji=args[3];\n          autoRepeat=2;\n        }\n      }\n      if (args.length >= 5) {\n        if (\"c1\".equals(args[4])) {\n          colors=new int[]{0xf77e41,0xca907a,0xffb139,0xedc5a5,0xffd140,0xf7e3c3,0xffdf79,0xfbefd6};\n        }\n else         if (\"c2\".equals(args[4])) {\n          colors=new int[]{0xf77e41,0xaa7c60,0xffb139,0xc8a987,0xffd140,0xddc89f,0xffdf79,0xe6d6b2};\n        }\n else         if (\"c3\".equals(args[4])) {\n          colors=new int[]{0xf77e41,0x8c6148,0xffb139,0xad8562,0xffd140,0xc49e76,0xffdf79,0xd4b188};\n        }\n else         if (\"c4\".equals(args[4])) {\n          colors=new int[]{0xf77e41,0x6e3c2c,0xffb139,0x925a34,0xffd140,0xa16e46,0xffdf79,0xac7a52};\n        }\n else         if (\"c5\".equals(args[4])) {\n          colors=new int[]{0xf77e41,0x291c12,0xffb139,0x472a22,0xffd140,0x573b30,0xffdf79,0x68493c};\n        }\n      }\n    }\n    RLottieDrawable lottieDrawable;\n    if (diceEmoji != null) {\n      if (\"\\uD83C\\uDFB0\".equals(diceEmoji)) {\n        lottieDrawable=new SlotsDrawable(diceEmoji,w,h);\n      }\n else {\n        lottieDrawable=new RLottieDrawable(diceEmoji,w,h);\n      }\n    }\n else {\n      lottieDrawable=new RLottieDrawable(cacheImage.finalFilePath,w,h,precache,limitFps,colors);\n    }\n    lottieDrawable.setAutoRepeat(autoRepeat);\n    onPostExecute(lottieDrawable);\n  }\n else   if (cacheImage.imageType == FileLoader.IMAGE_TYPE_ANIMATION) {\n    AnimatedFileDrawable fileDrawable;\n    long seekTo;\n    if (cacheImage.imageLocation != null) {\n      seekTo=cacheImage.imageLocation.videoSeekTo;\n    }\n else {\n      seekTo=0;\n    }\n    if (AUTOPLAY_FILTER.equals(cacheImage.filter) && !(cacheImage.imageLocation.document instanceof TLRPC.TL_documentEncrypted)) {\n      TLRPC.Document document=cacheImage.imageLocation.document instanceof TLRPC.Document ? cacheImage.imageLocation.document : null;\n      int size=document != null ? cacheImage.size : cacheImage.imageLocation.currentSize;\n      fileDrawable=new AnimatedFileDrawable(cacheImage.finalFilePath,false,size,document,document == null ? cacheImage.imageLocation : null,cacheImage.parentObject,seekTo,cacheImage.currentAccount,false);\n    }\n else {\n      fileDrawable=new AnimatedFileDrawable(cacheImage.finalFilePath,\"d\".equals(cacheImage.filter),0,null,null,null,seekTo,cacheImage.currentAccount,false);\n    }\n    Thread.interrupted();\n    onPostExecute(fileDrawable);\n  }\n else {\n    Long mediaId=null;\n    boolean mediaIsVideo=false;\n    Bitmap image=null;\n    boolean needInvert=false;\n    int orientation=0;\n    File cacheFileFinal=cacheImage.finalFilePath;\n    boolean inEncryptedFile=cacheImage.secureDocument != null || cacheImage.encryptionKeyPath != null && cacheFileFinal != null && cacheFileFinal.getAbsolutePath().endsWith(\".enc\");\n    SecureDocumentKey secureDocumentKey;\n    byte[] secureDocumentHash;\n    if (cacheImage.secureDocument != null) {\n      secureDocumentKey=cacheImage.secureDocument.secureDocumentKey;\n      if (cacheImage.secureDocument.secureFile != null && cacheImage.secureDocument.secureFile.file_hash != null) {\n        secureDocumentHash=cacheImage.secureDocument.secureFile.file_hash;\n      }\n else {\n        secureDocumentHash=cacheImage.secureDocument.fileHash;\n      }\n    }\n else {\n      secureDocumentKey=null;\n      secureDocumentHash=null;\n    }\n    boolean canDeleteFile=true;\n    boolean useNativeWebpLoader=false;\n    if (Build.VERSION.SDK_INT < 19) {\n      RandomAccessFile randomAccessFile=null;\n      try {\n        randomAccessFile=new RandomAccessFile(cacheFileFinal,\"r\");\n        byte[] bytes;\n        if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n          bytes=headerThumb;\n        }\n else {\n          bytes=header;\n        }\n        randomAccessFile.readFully(bytes,0,bytes.length);\n        String str=new String(bytes).toLowerCase();\n        str=str.toLowerCase();\n        if (str.startsWith(\"riff\") && str.endsWith(\"webp\")) {\n          useNativeWebpLoader=true;\n        }\n        randomAccessFile.close();\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n finally {\n        if (randomAccessFile != null) {\n          try {\n            randomAccessFile.close();\n          }\n catch (          Exception e) {\n            FileLog.e(e);\n          }\n        }\n      }\n    }\n    String mediaThumbPath=null;\n    if (cacheImage.imageLocation.path != null) {\n      String location=cacheImage.imageLocation.path;\n      if (location.startsWith(\"thumb://\")) {\n        int idx=location.indexOf(\":\",8);\n        if (idx >= 0) {\n          mediaId=Long.parseLong(location.substring(8,idx));\n          mediaIsVideo=false;\n          mediaThumbPath=location.substring(idx + 1);\n        }\n        canDeleteFile=false;\n      }\n else       if (location.startsWith(\"vthumb://\")) {\n        int idx=location.indexOf(\":\",9);\n        if (idx >= 0) {\n          mediaId=Long.parseLong(location.substring(9,idx));\n          mediaIsVideo=true;\n        }\n        canDeleteFile=false;\n      }\n else       if (!location.startsWith(\"http\")) {\n        canDeleteFile=false;\n      }\n    }\n    BitmapFactory.Options opts=new BitmapFactory.Options();\n    opts.inSampleSize=1;\n    if (Build.VERSION.SDK_INT < 21) {\n      opts.inPurgeable=true;\n    }\n    float w_filter=0;\n    float h_filter=0;\n    int blurType=0;\n    boolean checkInversion=false;\n    boolean force8888=canForce8888;\n    try {\n      if (cacheImage.filter != null) {\n        String[] args=cacheImage.filter.split(\"_\");\n        if (args.length >= 2) {\n          w_filter=Float.parseFloat(args[0]) * AndroidUtilities.density;\n          h_filter=Float.parseFloat(args[1]) * AndroidUtilities.density;\n        }\n        if (cacheImage.filter.contains(\"b2\")) {\n          blurType=3;\n        }\n else         if (cacheImage.filter.contains(\"b1\")) {\n          blurType=2;\n        }\n else         if (cacheImage.filter.contains(\"b\")) {\n          blurType=1;\n        }\n        if (cacheImage.filter.contains(\"i\")) {\n          checkInversion=true;\n        }\n        if (cacheImage.filter.contains(\"f\")) {\n          force8888=true;\n        }\n        if (!useNativeWebpLoader && w_filter != 0 && h_filter != 0) {\n          opts.inJustDecodeBounds=true;\n          if (mediaId != null && mediaThumbPath == null) {\n            if (mediaIsVideo) {\n              MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n            }\n else {\n              MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n            }\n          }\n else {\n            if (secureDocumentKey != null) {\n              RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n              int len=(int)f.length();\n              byte[] bytes=bytesLocal.get();\n              byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n              if (data == null) {\n                bytes=data=new byte[len];\n                bytesLocal.set(bytes);\n              }\n              f.readFully(data,0,len);\n              f.close();\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n              byte[] hash=Utilities.computeSHA256(data,0,len);\n              boolean error=false;\n              if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n                error=true;\n              }\n              int offset=(data[0] & 0xff);\n              len-=offset;\n              if (!error) {\n                BitmapFactory.decodeByteArray(data,offset,len,opts);\n              }\n            }\n else {\n              FileInputStream is;\n              if (inEncryptedFile) {\n                is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n              }\n else {\n                is=new FileInputStream(cacheFileFinal);\n              }\n              BitmapFactory.decodeStream(is,null,opts);\n              is.close();\n            }\n          }\n          float photoW=opts.outWidth;\n          float photoH=opts.outHeight;\n          float scaleFactor;\n          if (w_filter >= h_filter && photoW > photoH) {\n            scaleFactor=Math.max(photoW / w_filter,photoH / h_filter);\n          }\n else {\n            scaleFactor=Math.min(photoW / w_filter,photoH / h_filter);\n          }\n          if (scaleFactor < 1.2f) {\n            scaleFactor=1;\n          }\n          opts.inJustDecodeBounds=false;\n          if (scaleFactor > 1.0f && (photoW > w_filter || photoH > h_filter)) {\n            int sample=1;\n            do {\n              sample*=2;\n            }\n while (sample * 2 < scaleFactor);\n            opts.inSampleSize=sample;\n          }\n else {\n            opts.inSampleSize=(int)scaleFactor;\n          }\n        }\n      }\n else       if (mediaThumbPath != null) {\n        opts.inJustDecodeBounds=true;\n        opts.inPreferredConfig=force8888 ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;\n        FileInputStream is=new FileInputStream(cacheFileFinal);\n        image=BitmapFactory.decodeStream(is,null,opts);\n        is.close();\n        int photoW2=opts.outWidth;\n        int photoH2=opts.outHeight;\n        opts.inJustDecodeBounds=false;\n        int screenSize=Math.max(66,Math.min(AndroidUtilities.getRealScreenSize().x,AndroidUtilities.getRealScreenSize().y));\n        float scaleFactor=(Math.min(photoH2,photoW2) / (float)screenSize) * 6f;\n        if (scaleFactor < 1) {\n          scaleFactor=1;\n        }\n        if (scaleFactor > 1.0f) {\n          int sample=1;\n          do {\n            sample*=2;\n          }\n while (sample * 2 <= scaleFactor);\n          opts.inSampleSize=sample;\n        }\n else {\n          opts.inSampleSize=(int)scaleFactor;\n        }\n      }\n    }\n catch (    Throwable e) {\n      FileLog.e(e);\n    }\n    if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n      try {\n        lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n          if (isCancelled) {\n            return;\n          }\n        }\n        if (useNativeWebpLoader) {\n          RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n          ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n          BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n          bmOptions.inJustDecodeBounds=true;\n          Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n          image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n          Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n          file.close();\n        }\n else {\n          if (opts.inPurgeable || secureDocumentKey != null) {\n            RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n            int len=(int)f.length();\n            int offset=0;\n            byte[] bytesThumb=bytesThumbLocal.get();\n            byte[] data=bytesThumb != null && bytesThumb.length >= len ? bytesThumb : null;\n            if (data == null) {\n              bytesThumb=data=new byte[len];\n              bytesThumbLocal.set(bytesThumb);\n            }\n            f.readFully(data,0,len);\n            f.close();\n            boolean error=false;\n            if (secureDocumentKey != null) {\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n              byte[] hash=Utilities.computeSHA256(data,0,len);\n              if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n                error=true;\n              }\n              offset=(data[0] & 0xff);\n              len-=offset;\n            }\n else             if (inEncryptedFile) {\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n            }\n            if (!error) {\n              image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n            }\n          }\n else {\n            FileInputStream is;\n            if (inEncryptedFile) {\n              is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n            }\n else {\n              is=new FileInputStream(cacheFileFinal);\n            }\n            image=BitmapFactory.decodeStream(is,null,opts);\n            is.close();\n          }\n        }\n        if (image == null) {\n          if (cacheFileFinal.length() == 0 || cacheImage.filter == null) {\n            cacheFileFinal.delete();\n          }\n        }\n else {\n          if (cacheImage.filter != null) {\n            float bitmapW=image.getWidth();\n            float bitmapH=image.getHeight();\n            if (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\n              float scaleFactor=bitmapW / w_filter;\n              Bitmap scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n              if (image != scaledBitmap) {\n                image.recycle();\n                image=scaledBitmap;\n              }\n            }\n          }\n          if (checkInversion) {\n            needInvert=Utilities.needInvert(image,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes()) != 0;\n          }\n          if (blurType == 1) {\n            if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n              Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            }\n          }\n else           if (blurType == 2) {\n            if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n              Utilities.blurBitmap(image,1,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            }\n          }\n else           if (blurType == 3) {\n            if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n              Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n              Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n              Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            }\n          }\n else           if (blurType == 0 && opts.inPurgeable) {\n            Utilities.pinBitmap(image);\n          }\n        }\n      }\n catch (      Throwable e) {\n        FileLog.e(e);\n      }\n    }\n else {\n      try {\n        int delay=20;\n        if (mediaId != null) {\n          delay=0;\n        }\n        if (delay != 0 && lastCacheOutTime != 0 && lastCacheOutTime > System.currentTimeMillis() - delay && Build.VERSION.SDK_INT < 21) {\n          Thread.sleep(delay);\n        }\n        lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n          if (isCancelled) {\n            return;\n          }\n        }\n        if (force8888 || cacheImage.filter == null || blurType != 0 || cacheImage.imageLocation.path != null) {\n          opts.inPreferredConfig=Bitmap.Config.ARGB_8888;\n        }\n else {\n          opts.inPreferredConfig=Bitmap.Config.RGB_565;\n        }\n        opts.inDither=false;\n        if (mediaId != null && mediaThumbPath == null) {\n          if (mediaIsVideo) {\n            image=MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n          }\n else {\n            image=MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n          }\n        }\n        if (image == null) {\n          if (useNativeWebpLoader) {\n            RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n            ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n            BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n            bmOptions.inJustDecodeBounds=true;\n            Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n            image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n            Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n            file.close();\n          }\n else {\n            if (opts.inPurgeable || secureDocumentKey != null) {\n              RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n              int len=(int)f.length();\n              int offset=0;\n              byte[] bytes=bytesLocal.get();\n              byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n              if (data == null) {\n                bytes=data=new byte[len];\n                bytesLocal.set(bytes);\n              }\n              f.readFully(data,0,len);\n              f.close();\n              boolean error=false;\n              if (secureDocumentKey != null) {\n                EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n                byte[] hash=Utilities.computeSHA256(data,0,len);\n                if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n                  error=true;\n                }\n                offset=(data[0] & 0xff);\n                len-=offset;\n              }\n else               if (inEncryptedFile) {\n                EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n              }\n              if (!error) {\n                image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n              }\n            }\n else {\n              FileInputStream is;\n              if (inEncryptedFile) {\n                is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n              }\n else {\n                is=new FileInputStream(cacheFileFinal);\n              }\n              if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n                try {\n                  ExifInterface exif=new ExifInterface(is);\n                  int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:                    orientation=90;\n                  break;\ncase ExifInterface.ORIENTATION_ROTATE_180:                orientation=180;\n              break;\ncase ExifInterface.ORIENTATION_ROTATE_270:            orientation=270;\n          break;\n      }\n    }\n catch (    Throwable ignore) {\n    }\n    is.getChannel().position(0);\n  }\n  image=BitmapFactory.decodeStream(is,null,opts);\n  is.close();\n}\n}\n}\nif (image == null) {\nif (canDeleteFile && (cacheFileFinal.length() == 0 || cacheImage.filter == null)) {\ncacheFileFinal.delete();\n}\n}\n else {\nboolean blured=false;\nif (cacheImage.filter != null) {\nfloat bitmapW=image.getWidth();\nfloat bitmapH=image.getHeight();\nif (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\n  Bitmap scaledBitmap;\n  if (bitmapW > bitmapH && w_filter > h_filter) {\n    float scaleFactor=bitmapW / w_filter;\n    if (scaleFactor > 1) {\n      scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n    }\n else {\n      scaledBitmap=image;\n    }\n  }\n else {\n    float scaleFactor=bitmapH / h_filter;\n    if (scaleFactor > 1) {\n      scaledBitmap=Bitmaps.createScaledBitmap(image,(int)(bitmapW / scaleFactor),(int)h_filter,true);\n    }\n else {\n      scaledBitmap=image;\n    }\n  }\n  if (image != scaledBitmap) {\n    image.recycle();\n    image=scaledBitmap;\n  }\n}\nif (image != null) {\n  if (checkInversion) {\n    Bitmap b=image;\n    int w=image.getWidth();\n    int h=image.getHeight();\n    if (w * h > 150 * 150) {\n      b=Bitmaps.createScaledBitmap(image,100,100,false);\n    }\n    needInvert=Utilities.needInvert(b,opts.inPurgeable ? 0 : 1,b.getWidth(),b.getHeight(),b.getRowBytes()) != 0;\n    if (b != image) {\n      b.recycle();\n    }\n  }\n  if (blurType != 0 && bitmapH < 100 && bitmapW < 100) {\n    if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n      Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n    }\n    blured=true;\n  }\n}\n}\nif (!blured && opts.inPurgeable) {\nUtilities.pinBitmap(image);\n}\n}\n}\n catch (Throwable ignore) {\n}\n}\nThread.interrupted();\nif (needInvert || orientation != 0) {\nonPostExecute(image != null ? new ExtendedBitmapDrawable(image,needInvert,orientation) : null);\n}\n else {\nonPostExecute(image != null ? new BitmapDrawable(image) : null);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 3517,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 34886,
        "startLineNumber" : 742,
        "startColumnNumber" : 8,
        "endLineNumber" : 1332,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\nsynchronized (sync) {\n    runningThread=Thread.currentThread();\n    Thread.interrupted();\n    if (isCancelled) {\n      return;\n    }\n  }\n  if (cacheImage.imageLocation.photoSize instanceof TLRPC.TL_photoStrippedSize) {\n    TLRPC.TL_photoStrippedSize photoSize=(TLRPC.TL_photoStrippedSize)cacheImage.imageLocation.photoSize;\n    Bitmap bitmap=getStrippedPhotoBitmap(photoSize.bytes,cacheImage.filter);\n    onPostExecute(bitmap != null ? new BitmapDrawable(bitmap) : null);\n  }\n else   if (cacheImage.imageType == FileLoader.IMAGE_TYPE_THEME_PREVIEW) {\n    BitmapDrawable bitmapDrawable=null;\n    try {\n      bitmapDrawable=new ThemePreviewDrawable(cacheImage.finalFilePath,(DocumentObject.ThemeDocument)cacheImage.imageLocation.document);\n    }\n catch (    Throwable e) {\n      FileLog.e(e);\n    }\n    onPostExecute(bitmapDrawable);\n  }\n else   if (cacheImage.imageType == FileLoader.IMAGE_TYPE_SVG || cacheImage.imageType == FileLoader.IMAGE_TYPE_SVG_WHITE) {\n    int w=AndroidUtilities.dp(360);\n    int h=AndroidUtilities.dp(640);\n    if (cacheImage.filter != null) {\n      String[] args=cacheImage.filter.split(\"_\");\n      if (args.length >= 2) {\n        float w_filter=Float.parseFloat(args[0]);\n        float h_filter=Float.parseFloat(args[1]);\n        w=(int)(w_filter * AndroidUtilities.density);\n        h=(int)(h_filter * AndroidUtilities.density);\n      }\n    }\n    Bitmap bitmap=null;\n    try {\n      bitmap=SvgHelper.getBitmap(cacheImage.finalFilePath,w,h,cacheImage.imageType == FileLoader.IMAGE_TYPE_SVG_WHITE);\n    }\n catch (    Throwable e) {\n      FileLog.e(e);\n    }\n    onPostExecute(bitmap != null ? new BitmapDrawable(bitmap) : null);\n  }\n else   if (cacheImage.imageType == FileLoader.IMAGE_TYPE_LOTTIE) {\n    int w=Math.min(512,AndroidUtilities.dp(170.6f));\n    int h=Math.min(512,AndroidUtilities.dp(170.6f));\n    boolean precache=false;\n    boolean limitFps=false;\n    int autoRepeat=1;\n    int[] colors=null;\n    String diceEmoji=null;\n    if (cacheImage.filter != null) {\n      String[] args=cacheImage.filter.split(\"_\");\n      if (args.length >= 2) {\n        float w_filter=Float.parseFloat(args[0]);\n        float h_filter=Float.parseFloat(args[1]);\n        w=Math.min(512,(int)(w_filter * AndroidUtilities.density));\n        h=Math.min(512,(int)(h_filter * AndroidUtilities.density));\n        if (w_filter <= 90 && h_filter <= 90) {\n          w=Math.min(w,160);\n          h=Math.min(h,160);\n          limitFps=true;\n        }\n        precache=SharedConfig.getDevicePerformanceClass() != SharedConfig.PERFORMANCE_CLASS_HIGH;\n      }\n      if (args.length >= 3) {\n        if (\"nr\".equals(args[2])) {\n          autoRepeat=2;\n        }\n else         if (\"nrs\".equals(args[2])) {\n          autoRepeat=3;\n        }\n else         if (\"dice\".equals(args[2])) {\n          diceEmoji=args[3];\n          autoRepeat=2;\n        }\n      }\n      if (args.length >= 5) {\n        if (\"c1\".equals(args[4])) {\n          colors=new int[]{0xf77e41,0xca907a,0xffb139,0xedc5a5,0xffd140,0xf7e3c3,0xffdf79,0xfbefd6};\n        }\n else         if (\"c2\".equals(args[4])) {\n          colors=new int[]{0xf77e41,0xaa7c60,0xffb139,0xc8a987,0xffd140,0xddc89f,0xffdf79,0xe6d6b2};\n        }\n else         if (\"c3\".equals(args[4])) {\n          colors=new int[]{0xf77e41,0x8c6148,0xffb139,0xad8562,0xffd140,0xc49e76,0xffdf79,0xd4b188};\n        }\n else         if (\"c4\".equals(args[4])) {\n          colors=new int[]{0xf77e41,0x6e3c2c,0xffb139,0x925a34,0xffd140,0xa16e46,0xffdf79,0xac7a52};\n        }\n else         if (\"c5\".equals(args[4])) {\n          colors=new int[]{0xf77e41,0x291c12,0xffb139,0x472a22,0xffd140,0x573b30,0xffdf79,0x68493c};\n        }\n      }\n    }\n    RLottieDrawable lottieDrawable;\n    if (diceEmoji != null) {\n      if (\"\\uD83C\\uDFB0\".equals(diceEmoji)) {\n        lottieDrawable=new SlotsDrawable(diceEmoji,w,h);\n      }\n else {\n        lottieDrawable=new RLottieDrawable(diceEmoji,w,h);\n      }\n    }\n else {\n      lottieDrawable=new RLottieDrawable(cacheImage.finalFilePath,w,h,precache,limitFps,colors);\n    }\n    lottieDrawable.setAutoRepeat(autoRepeat);\n    onPostExecute(lottieDrawable);\n  }\n else   if (cacheImage.imageType == FileLoader.IMAGE_TYPE_ANIMATION) {\n    AnimatedFileDrawable fileDrawable;\n    long seekTo;\n    if (cacheImage.imageLocation != null) {\n      seekTo=cacheImage.imageLocation.videoSeekTo;\n    }\n else {\n      seekTo=0;\n    }\n    if (AUTOPLAY_FILTER.equals(cacheImage.filter) && !(cacheImage.imageLocation.document instanceof TLRPC.TL_documentEncrypted)) {\n      TLRPC.Document document=cacheImage.imageLocation.document instanceof TLRPC.Document ? cacheImage.imageLocation.document : null;\n      int size=document != null ? cacheImage.size : cacheImage.imageLocation.currentSize;\n      fileDrawable=new AnimatedFileDrawable(cacheImage.finalFilePath,false,size,document,document == null ? cacheImage.imageLocation : null,cacheImage.parentObject,seekTo,cacheImage.currentAccount,false);\n    }\n else {\n      fileDrawable=new AnimatedFileDrawable(cacheImage.finalFilePath,\"d\".equals(cacheImage.filter),0,null,null,null,seekTo,cacheImage.currentAccount,false);\n    }\n    Thread.interrupted();\n    onPostExecute(fileDrawable);\n  }\n else {\n    Long mediaId=null;\n    boolean mediaIsVideo=false;\n    Bitmap image=null;\n    boolean needInvert=false;\n    int orientation=0;\n    File cacheFileFinal=cacheImage.finalFilePath;\n    boolean inEncryptedFile=cacheImage.secureDocument != null || cacheImage.encryptionKeyPath != null && cacheFileFinal != null && cacheFileFinal.getAbsolutePath().endsWith(\".enc\");\n    SecureDocumentKey secureDocumentKey;\n    byte[] secureDocumentHash;\n    if (cacheImage.secureDocument != null) {\n      secureDocumentKey=cacheImage.secureDocument.secureDocumentKey;\n      if (cacheImage.secureDocument.secureFile != null && cacheImage.secureDocument.secureFile.file_hash != null) {\n        secureDocumentHash=cacheImage.secureDocument.secureFile.file_hash;\n      }\n else {\n        secureDocumentHash=cacheImage.secureDocument.fileHash;\n      }\n    }\n else {\n      secureDocumentKey=null;\n      secureDocumentHash=null;\n    }\n    boolean canDeleteFile=true;\n    boolean useNativeWebpLoader=false;\n    if (Build.VERSION.SDK_INT < 19) {\n      RandomAccessFile randomAccessFile=null;\n      try {\n        randomAccessFile=new RandomAccessFile(cacheFileFinal,\"r\");\n        byte[] bytes;\n        if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n          bytes=headerThumb;\n        }\n else {\n          bytes=header;\n        }\n        randomAccessFile.readFully(bytes,0,bytes.length);\n        String str=new String(bytes).toLowerCase();\n        str=str.toLowerCase();\n        if (str.startsWith(\"riff\") && str.endsWith(\"webp\")) {\n          useNativeWebpLoader=true;\n        }\n        randomAccessFile.close();\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n finally {\n        if (randomAccessFile != null) {\n          try {\n            randomAccessFile.close();\n          }\n catch (          Exception e) {\n            FileLog.e(e);\n          }\n        }\n      }\n    }\n    String mediaThumbPath=null;\n    if (cacheImage.imageLocation.path != null) {\n      String location=cacheImage.imageLocation.path;\n      if (location.startsWith(\"thumb://\")) {\n        int idx=location.indexOf(\":\",8);\n        if (idx >= 0) {\n          mediaId=Long.parseLong(location.substring(8,idx));\n          mediaIsVideo=false;\n          mediaThumbPath=location.substring(idx + 1);\n        }\n        canDeleteFile=false;\n      }\n else       if (location.startsWith(\"vthumb://\")) {\n        int idx=location.indexOf(\":\",9);\n        if (idx >= 0) {\n          mediaId=Long.parseLong(location.substring(9,idx));\n          mediaIsVideo=true;\n        }\n        canDeleteFile=false;\n      }\n else       if (!location.startsWith(\"http\")) {\n        canDeleteFile=false;\n      }\n    }\n    BitmapFactory.Options opts=new BitmapFactory.Options();\n    opts.inSampleSize=1;\n    if (Build.VERSION.SDK_INT < 21) {\n      opts.inPurgeable=true;\n    }\n    float w_filter=0;\n    float h_filter=0;\n    int blurType=0;\n    boolean checkInversion=false;\n    boolean force8888=canForce8888;\n    try {\n      if (cacheImage.filter != null) {\n        String[] args=cacheImage.filter.split(\"_\");\n        if (args.length >= 2) {\n          w_filter=Float.parseFloat(args[0]) * AndroidUtilities.density;\n          h_filter=Float.parseFloat(args[1]) * AndroidUtilities.density;\n        }\n        if (cacheImage.filter.contains(\"b2\")) {\n          blurType=3;\n        }\n else         if (cacheImage.filter.contains(\"b1\")) {\n          blurType=2;\n        }\n else         if (cacheImage.filter.contains(\"b\")) {\n          blurType=1;\n        }\n        if (cacheImage.filter.contains(\"i\")) {\n          checkInversion=true;\n        }\n        if (cacheImage.filter.contains(\"f\")) {\n          force8888=true;\n        }\n        if (!useNativeWebpLoader && w_filter != 0 && h_filter != 0) {\n          opts.inJustDecodeBounds=true;\n          if (mediaId != null && mediaThumbPath == null) {\n            if (mediaIsVideo) {\n              MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n            }\n else {\n              MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n            }\n          }\n else {\n            if (secureDocumentKey != null) {\n              RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n              int len=(int)f.length();\n              byte[] bytes=bytesLocal.get();\n              byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n              if (data == null) {\n                bytes=data=new byte[len];\n                bytesLocal.set(bytes);\n              }\n              f.readFully(data,0,len);\n              f.close();\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n              byte[] hash=Utilities.computeSHA256(data,0,len);\n              boolean error=false;\n              if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n                error=true;\n              }\n              int offset=(data[0] & 0xff);\n              len-=offset;\n              if (!error) {\n                BitmapFactory.decodeByteArray(data,offset,len,opts);\n              }\n            }\n else {\n              FileInputStream is;\n              if (inEncryptedFile) {\n                is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n              }\n else {\n                is=new FileInputStream(cacheFileFinal);\n              }\n              BitmapFactory.decodeStream(is,null,opts);\n              is.close();\n            }\n          }\n          float photoW=opts.outWidth;\n          float photoH=opts.outHeight;\n          float scaleFactor;\n          if (w_filter >= h_filter && photoW > photoH) {\n            scaleFactor=Math.max(photoW / w_filter,photoH / h_filter);\n          }\n else {\n            scaleFactor=Math.min(photoW / w_filter,photoH / h_filter);\n          }\n          if (scaleFactor < 1.2f) {\n            scaleFactor=1;\n          }\n          opts.inJustDecodeBounds=false;\n          if (scaleFactor > 1.0f && (photoW > w_filter || photoH > h_filter)) {\n            int sample=1;\n            do {\n              sample*=2;\n            }\n while (sample * 2 < scaleFactor);\n            opts.inSampleSize=sample;\n          }\n else {\n            opts.inSampleSize=(int)scaleFactor;\n          }\n        }\n      }\n else       if (mediaThumbPath != null) {\n        opts.inJustDecodeBounds=true;\n        opts.inPreferredConfig=force8888 ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;\n        FileInputStream is=new FileInputStream(cacheFileFinal);\n        image=BitmapFactory.decodeStream(is,null,opts);\n        is.close();\n        int photoW2=opts.outWidth;\n        int photoH2=opts.outHeight;\n        opts.inJustDecodeBounds=false;\n        int screenSize=Math.max(66,Math.min(AndroidUtilities.getRealScreenSize().x,AndroidUtilities.getRealScreenSize().y));\n        float scaleFactor=(Math.min(photoH2,photoW2) / (float)screenSize) * 6f;\n        if (scaleFactor < 1) {\n          scaleFactor=1;\n        }\n        if (scaleFactor > 1.0f) {\n          int sample=1;\n          do {\n            sample*=2;\n          }\n while (sample * 2 <= scaleFactor);\n          opts.inSampleSize=sample;\n        }\n else {\n          opts.inSampleSize=(int)scaleFactor;\n        }\n      }\n    }\n catch (    Throwable e) {\n      FileLog.e(e);\n    }\n    if (cacheImage.type == ImageReceiver.TYPE_THUMB) {\n      try {\n        lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n          if (isCancelled) {\n            return;\n          }\n        }\n        if (useNativeWebpLoader) {\n          RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n          ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n          BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n          bmOptions.inJustDecodeBounds=true;\n          Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n          image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n          Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n          file.close();\n        }\n else {\n          if (opts.inPurgeable || secureDocumentKey != null) {\n            RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n            int len=(int)f.length();\n            int offset=0;\n            byte[] bytesThumb=bytesThumbLocal.get();\n            byte[] data=bytesThumb != null && bytesThumb.length >= len ? bytesThumb : null;\n            if (data == null) {\n              bytesThumb=data=new byte[len];\n              bytesThumbLocal.set(bytesThumb);\n            }\n            f.readFully(data,0,len);\n            f.close();\n            boolean error=false;\n            if (secureDocumentKey != null) {\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n              byte[] hash=Utilities.computeSHA256(data,0,len);\n              if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n                error=true;\n              }\n              offset=(data[0] & 0xff);\n              len-=offset;\n            }\n else             if (inEncryptedFile) {\n              EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n            }\n            if (!error) {\n              image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n            }\n          }\n else {\n            FileInputStream is;\n            if (inEncryptedFile) {\n              is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n            }\n else {\n              is=new FileInputStream(cacheFileFinal);\n            }\n            image=BitmapFactory.decodeStream(is,null,opts);\n            is.close();\n          }\n        }\n        if (image == null) {\n          if (cacheFileFinal.length() == 0 || cacheImage.filter == null) {\n            cacheFileFinal.delete();\n          }\n        }\n else {\n          if (cacheImage.filter != null) {\n            float bitmapW=image.getWidth();\n            float bitmapH=image.getHeight();\n            if (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\n              float scaleFactor=bitmapW / w_filter;\n              Bitmap scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n              if (image != scaledBitmap) {\n                image.recycle();\n                image=scaledBitmap;\n              }\n            }\n          }\n          if (checkInversion) {\n            needInvert=Utilities.needInvert(image,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes()) != 0;\n          }\n          if (blurType == 1) {\n            if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n              Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            }\n          }\n else           if (blurType == 2) {\n            if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n              Utilities.blurBitmap(image,1,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            }\n          }\n else           if (blurType == 3) {\n            if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n              Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n              Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n              Utilities.blurBitmap(image,7,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n            }\n          }\n else           if (blurType == 0 && opts.inPurgeable) {\n            Utilities.pinBitmap(image);\n          }\n        }\n      }\n catch (      Throwable e) {\n        FileLog.e(e);\n      }\n    }\n else {\n      try {\n        int delay=20;\n        if (mediaId != null) {\n          delay=0;\n        }\n        if (delay != 0 && lastCacheOutTime != 0 && lastCacheOutTime > System.currentTimeMillis() - delay && Build.VERSION.SDK_INT < 21) {\n          Thread.sleep(delay);\n        }\n        lastCacheOutTime=System.currentTimeMillis();\nsynchronized (sync) {\n          if (isCancelled) {\n            return;\n          }\n        }\n        if (force8888 || cacheImage.filter == null || blurType != 0 || cacheImage.imageLocation.path != null) {\n          opts.inPreferredConfig=Bitmap.Config.ARGB_8888;\n        }\n else {\n          opts.inPreferredConfig=Bitmap.Config.RGB_565;\n        }\n        opts.inDither=false;\n        if (mediaId != null && mediaThumbPath == null) {\n          if (mediaIsVideo) {\n            image=MediaStore.Video.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Video.Thumbnails.MINI_KIND,opts);\n          }\n else {\n            image=MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(),mediaId,MediaStore.Images.Thumbnails.MINI_KIND,opts);\n          }\n        }\n        if (image == null) {\n          if (useNativeWebpLoader) {\n            RandomAccessFile file=new RandomAccessFile(cacheFileFinal,\"r\");\n            ByteBuffer buffer=file.getChannel().map(FileChannel.MapMode.READ_ONLY,0,cacheFileFinal.length());\n            BitmapFactory.Options bmOptions=new BitmapFactory.Options();\n            bmOptions.inJustDecodeBounds=true;\n            Utilities.loadWebpImage(null,buffer,buffer.limit(),bmOptions,true);\n            image=Bitmaps.createBitmap(bmOptions.outWidth,bmOptions.outHeight,Bitmap.Config.ARGB_8888);\n            Utilities.loadWebpImage(image,buffer,buffer.limit(),null,!opts.inPurgeable);\n            file.close();\n          }\n else {\n            if (opts.inPurgeable || secureDocumentKey != null) {\n              RandomAccessFile f=new RandomAccessFile(cacheFileFinal,\"r\");\n              int len=(int)f.length();\n              int offset=0;\n              byte[] bytes=bytesLocal.get();\n              byte[] data=bytes != null && bytes.length >= len ? bytes : null;\n              if (data == null) {\n                bytes=data=new byte[len];\n                bytesLocal.set(bytes);\n              }\n              f.readFully(data,0,len);\n              f.close();\n              boolean error=false;\n              if (secureDocumentKey != null) {\n                EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,secureDocumentKey);\n                byte[] hash=Utilities.computeSHA256(data,0,len);\n                if (secureDocumentHash == null || !Arrays.equals(hash,secureDocumentHash)) {\n                  error=true;\n                }\n                offset=(data[0] & 0xff);\n                len-=offset;\n              }\n else               if (inEncryptedFile) {\n                EncryptedFileInputStream.decryptBytesWithKeyFile(data,0,len,cacheImage.encryptionKeyPath);\n              }\n              if (!error) {\n                image=BitmapFactory.decodeByteArray(data,offset,len,opts);\n              }\n            }\n else {\n              FileInputStream is;\n              if (inEncryptedFile) {\n                is=new EncryptedFileInputStream(cacheFileFinal,cacheImage.encryptionKeyPath);\n              }\n else {\n                is=new FileInputStream(cacheFileFinal);\n              }\n              if (cacheImage.imageLocation.document instanceof TLRPC.TL_document) {\n                try {\n                  ExifInterface exif=new ExifInterface(is);\n                  int attribute=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);\nswitch (attribute) {\ncase ExifInterface.ORIENTATION_ROTATE_90:                    orientation=90;\n                  break;\ncase ExifInterface.ORIENTATION_ROTATE_180:                orientation=180;\n              break;\ncase ExifInterface.ORIENTATION_ROTATE_270:            orientation=270;\n          break;\n      }\n    }\n catch (    Throwable ignore) {\n    }\n    is.getChannel().position(0);\n  }\n  image=BitmapFactory.decodeStream(is,null,opts);\n  is.close();\n}\n}\n}\nif (image == null) {\nif (canDeleteFile && (cacheFileFinal.length() == 0 || cacheImage.filter == null)) {\ncacheFileFinal.delete();\n}\n}\n else {\nboolean blured=false;\nif (cacheImage.filter != null) {\nfloat bitmapW=image.getWidth();\nfloat bitmapH=image.getHeight();\nif (!opts.inPurgeable && w_filter != 0 && bitmapW != w_filter && bitmapW > w_filter + 20) {\n  Bitmap scaledBitmap;\n  if (bitmapW > bitmapH && w_filter > h_filter) {\n    float scaleFactor=bitmapW / w_filter;\n    if (scaleFactor > 1) {\n      scaledBitmap=Bitmaps.createScaledBitmap(image,(int)w_filter,(int)(bitmapH / scaleFactor),true);\n    }\n else {\n      scaledBitmap=image;\n    }\n  }\n else {\n    float scaleFactor=bitmapH / h_filter;\n    if (scaleFactor > 1) {\n      scaledBitmap=Bitmaps.createScaledBitmap(image,(int)(bitmapW / scaleFactor),(int)h_filter,true);\n    }\n else {\n      scaledBitmap=image;\n    }\n  }\n  if (image != scaledBitmap) {\n    image.recycle();\n    image=scaledBitmap;\n  }\n}\nif (image != null) {\n  if (checkInversion) {\n    Bitmap b=image;\n    int w=image.getWidth();\n    int h=image.getHeight();\n    if (w * h > 150 * 150) {\n      b=Bitmaps.createScaledBitmap(image,100,100,false);\n    }\n    needInvert=Utilities.needInvert(b,opts.inPurgeable ? 0 : 1,b.getWidth(),b.getHeight(),b.getRowBytes()) != 0;\n    if (b != image) {\n      b.recycle();\n    }\n  }\n  if (blurType != 0 && bitmapH < 100 && bitmapW < 100) {\n    if (image.getConfig() == Bitmap.Config.ARGB_8888) {\n      Utilities.blurBitmap(image,3,opts.inPurgeable ? 0 : 1,image.getWidth(),image.getHeight(),image.getRowBytes());\n    }\n    blured=true;\n  }\n}\n}\nif (!blured && opts.inPurgeable) {\nUtilities.pinBitmap(image);\n}\n}\n}\n catch (Throwable ignore) {\n}\n}\nThread.interrupted();\nif (needInvert || orientation != 0) {\nonPostExecute(image != null ? new ExtendedBitmapDrawable(image,needInvert,orientation) : null);\n}\n else {\nonPostExecute(image != null ? new BitmapDrawable(image) : null);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 3523,
      "astHeight" : 29
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 1242,
        "startColumnNumber" : 44,
        "endLineNumber" : 1242,
        "endColumnNumber" : 87
      },
      "nodeContext" : "ExifInterface exif=new ExifInterface(is);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.telegram.messenger.ExifInterface"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 1242,
    "startColumnNumber" : 65,
    "endLineNumber" : 1242,
    "endColumnNumber" : 86
  } ],
  "layoutRelationDataList" : [ ]
}