{
  "id" : 409,
  "expression" : "5000000000l",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/test/java/io/vertx/test/core/VertxOptionsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "5000000000l",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 309,
      "startColumnNumber" : 17,
      "endLineNumber" : 309,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 309,
        "startColumnNumber" : 4,
        "endLineNumber" : 309,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertEquals(5000000000l,options.getWarningExceptionTime())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 309,
        "startColumnNumber" : 4,
        "endLineNumber" : 309,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(5000000000l,options.getWarningExceptionTime());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4755,
        "startLineNumber" : 289,
        "startColumnNumber" : 32,
        "endLineNumber" : 373,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  VertxOptions options=new VertxOptions(new JsonObject());\n  assertEquals(0,options.getClusterPort());\n  assertEquals(-1,options.getClusterPublicPort());\n  assertEquals(20000,options.getClusterPingInterval());\n  assertEquals(20000,options.getClusterPingReplyInterval());\n  assertEquals(2 * Runtime.getRuntime().availableProcessors(),options.getEventLoopPoolSize());\n  assertEquals(20,options.getInternalBlockingPoolSize());\n  assertEquals(20,options.getWorkerPoolSize());\n  assertEquals(1000,options.getBlockedThreadCheckInterval());\n  assertEquals(\"localhost\",options.getClusterHost());\n  assertNull(options.getClusterPublicHost());\n  assertEquals(null,options.getClusterManager());\n  assertEquals(2000l * 1000000,options.getMaxEventLoopExecuteTime());\n  assertEquals(1l * 60 * 1000* 1000000,options.getMaxWorkerExecuteTime());\n  assertFalse(options.isHAEnabled());\n  assertEquals(1,options.getQuorumSize());\n  assertEquals(VertxOptions.DEFAULT_HA_GROUP,options.getHAGroup());\n  assertNotNull(options.getMetricsOptions());\n  assertEquals(5000000000l,options.getWarningExceptionTime());\n  int clusterPort=TestUtils.randomPortInt();\n  int clusterPublicPort=TestUtils.randomPortInt();\n  int eventLoopPoolSize=TestUtils.randomPositiveInt();\n  int internalBlockingPoolSize=TestUtils.randomPositiveInt();\n  int workerPoolSize=TestUtils.randomPositiveInt();\n  int blockedThreadCheckInterval=TestUtils.randomPositiveInt();\n  String clusterHost=TestUtils.randomAlphaString(100);\n  String clusterPublicHost=TestUtils.randomAlphaString(100);\n  long clusterPingInterval=TestUtils.randomPositiveLong();\n  long clusterPingReplyInterval=TestUtils.randomPositiveLong();\n  int maxEventLoopExecuteTime=TestUtils.randomPositiveInt();\n  int maxWorkerExecuteTime=TestUtils.randomPositiveInt();\n  int proxyOperationTimeout=TestUtils.randomPositiveInt();\n  long warningExceptionTime=TestUtils.randomPositiveLong();\n  Random rand=new Random();\n  boolean haEnabled=rand.nextBoolean();\n  int quorumSize=TestUtils.randomShort() + 1;\n  String haGroup=TestUtils.randomAlphaString(100);\n  boolean metricsEnabled=rand.nextBoolean();\n  boolean jmxEnabled=rand.nextBoolean();\n  String jmxDomain=TestUtils.randomAlphaString(100);\n  options=new VertxOptions(new JsonObject().put(\"clusterPort\",clusterPort).put(\"clusterPublicPort\",clusterPublicPort).put(\"eventLoopPoolSize\",eventLoopPoolSize).put(\"internalBlockingPoolSize\",internalBlockingPoolSize).put(\"workerPoolSize\",workerPoolSize).put(\"blockedThreadCheckInterval\",blockedThreadCheckInterval).put(\"clusterHost\",clusterHost).put(\"clusterPublicHost\",clusterPublicHost).put(\"clusterPingInterval\",clusterPingInterval).put(\"clusterPingReplyInterval\",clusterPingReplyInterval).put(\"maxEventLoopExecuteTime\",maxEventLoopExecuteTime).put(\"maxWorkerExecuteTime\",maxWorkerExecuteTime).put(\"proxyOperationTimeout\",proxyOperationTimeout).put(\"haEnabled\",haEnabled).put(\"quorumSize\",quorumSize).put(\"haGroup\",haGroup).put(\"warningExceptionTime\",warningExceptionTime).put(\"metricsOptions\",new JsonObject().put(\"enabled\",metricsEnabled).put(\"jmxEnabled\",jmxEnabled).put(\"jmxDomain\",jmxDomain)));\n  assertEquals(clusterPort,options.getClusterPort());\n  assertEquals(clusterPublicPort,options.getClusterPublicPort());\n  assertEquals(clusterPublicHost,options.getClusterPublicHost());\n  assertEquals(clusterPingInterval,options.getClusterPingInterval());\n  assertEquals(clusterPingReplyInterval,options.getClusterPingReplyInterval());\n  assertEquals(eventLoopPoolSize,options.getEventLoopPoolSize());\n  assertEquals(internalBlockingPoolSize,options.getInternalBlockingPoolSize());\n  assertEquals(workerPoolSize,options.getWorkerPoolSize());\n  assertEquals(blockedThreadCheckInterval,options.getBlockedThreadCheckInterval());\n  assertEquals(clusterHost,options.getClusterHost());\n  assertEquals(null,options.getClusterManager());\n  assertEquals(maxEventLoopExecuteTime,options.getMaxEventLoopExecuteTime());\n  assertEquals(maxWorkerExecuteTime,options.getMaxWorkerExecuteTime());\n  assertEquals(haEnabled,options.isHAEnabled());\n  assertEquals(quorumSize,options.getQuorumSize());\n  assertEquals(haGroup,options.getHAGroup());\n  MetricsOptions metricsOptions=options.getMetricsOptions();\n  assertEquals(metricsEnabled,metricsOptions.isEnabled());\n  assertEquals(warningExceptionTime,options.getWarningExceptionTime());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 537,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4793,
        "startLineNumber" : 288,
        "startColumnNumber" : 2,
        "endLineNumber" : 373,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testJsonOptions(){\n  VertxOptions options=new VertxOptions(new JsonObject());\n  assertEquals(0,options.getClusterPort());\n  assertEquals(-1,options.getClusterPublicPort());\n  assertEquals(20000,options.getClusterPingInterval());\n  assertEquals(20000,options.getClusterPingReplyInterval());\n  assertEquals(2 * Runtime.getRuntime().availableProcessors(),options.getEventLoopPoolSize());\n  assertEquals(20,options.getInternalBlockingPoolSize());\n  assertEquals(20,options.getWorkerPoolSize());\n  assertEquals(1000,options.getBlockedThreadCheckInterval());\n  assertEquals(\"localhost\",options.getClusterHost());\n  assertNull(options.getClusterPublicHost());\n  assertEquals(null,options.getClusterManager());\n  assertEquals(2000l * 1000000,options.getMaxEventLoopExecuteTime());\n  assertEquals(1l * 60 * 1000* 1000000,options.getMaxWorkerExecuteTime());\n  assertFalse(options.isHAEnabled());\n  assertEquals(1,options.getQuorumSize());\n  assertEquals(VertxOptions.DEFAULT_HA_GROUP,options.getHAGroup());\n  assertNotNull(options.getMetricsOptions());\n  assertEquals(5000000000l,options.getWarningExceptionTime());\n  int clusterPort=TestUtils.randomPortInt();\n  int clusterPublicPort=TestUtils.randomPortInt();\n  int eventLoopPoolSize=TestUtils.randomPositiveInt();\n  int internalBlockingPoolSize=TestUtils.randomPositiveInt();\n  int workerPoolSize=TestUtils.randomPositiveInt();\n  int blockedThreadCheckInterval=TestUtils.randomPositiveInt();\n  String clusterHost=TestUtils.randomAlphaString(100);\n  String clusterPublicHost=TestUtils.randomAlphaString(100);\n  long clusterPingInterval=TestUtils.randomPositiveLong();\n  long clusterPingReplyInterval=TestUtils.randomPositiveLong();\n  int maxEventLoopExecuteTime=TestUtils.randomPositiveInt();\n  int maxWorkerExecuteTime=TestUtils.randomPositiveInt();\n  int proxyOperationTimeout=TestUtils.randomPositiveInt();\n  long warningExceptionTime=TestUtils.randomPositiveLong();\n  Random rand=new Random();\n  boolean haEnabled=rand.nextBoolean();\n  int quorumSize=TestUtils.randomShort() + 1;\n  String haGroup=TestUtils.randomAlphaString(100);\n  boolean metricsEnabled=rand.nextBoolean();\n  boolean jmxEnabled=rand.nextBoolean();\n  String jmxDomain=TestUtils.randomAlphaString(100);\n  options=new VertxOptions(new JsonObject().put(\"clusterPort\",clusterPort).put(\"clusterPublicPort\",clusterPublicPort).put(\"eventLoopPoolSize\",eventLoopPoolSize).put(\"internalBlockingPoolSize\",internalBlockingPoolSize).put(\"workerPoolSize\",workerPoolSize).put(\"blockedThreadCheckInterval\",blockedThreadCheckInterval).put(\"clusterHost\",clusterHost).put(\"clusterPublicHost\",clusterPublicHost).put(\"clusterPingInterval\",clusterPingInterval).put(\"clusterPingReplyInterval\",clusterPingReplyInterval).put(\"maxEventLoopExecuteTime\",maxEventLoopExecuteTime).put(\"maxWorkerExecuteTime\",maxWorkerExecuteTime).put(\"proxyOperationTimeout\",proxyOperationTimeout).put(\"haEnabled\",haEnabled).put(\"quorumSize\",quorumSize).put(\"haGroup\",haGroup).put(\"warningExceptionTime\",warningExceptionTime).put(\"metricsOptions\",new JsonObject().put(\"enabled\",metricsEnabled).put(\"jmxEnabled\",jmxEnabled).put(\"jmxDomain\",jmxDomain)));\n  assertEquals(clusterPort,options.getClusterPort());\n  assertEquals(clusterPublicPort,options.getClusterPublicPort());\n  assertEquals(clusterPublicHost,options.getClusterPublicHost());\n  assertEquals(clusterPingInterval,options.getClusterPingInterval());\n  assertEquals(clusterPingReplyInterval,options.getClusterPingReplyInterval());\n  assertEquals(eventLoopPoolSize,options.getEventLoopPoolSize());\n  assertEquals(internalBlockingPoolSize,options.getInternalBlockingPoolSize());\n  assertEquals(workerPoolSize,options.getWorkerPoolSize());\n  assertEquals(blockedThreadCheckInterval,options.getBlockedThreadCheckInterval());\n  assertEquals(clusterHost,options.getClusterHost());\n  assertEquals(null,options.getClusterManager());\n  assertEquals(maxEventLoopExecuteTime,options.getMaxEventLoopExecuteTime());\n  assertEquals(maxWorkerExecuteTime,options.getMaxWorkerExecuteTime());\n  assertEquals(haEnabled,options.isHAEnabled());\n  assertEquals(quorumSize,options.getQuorumSize());\n  assertEquals(haGroup,options.getHAGroup());\n  MetricsOptions metricsOptions=options.getMetricsOptions();\n  assertEquals(metricsEnabled,metricsOptions.isEnabled());\n  assertEquals(warningExceptionTime,options.getWarningExceptionTime());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 543,
      "astHeight" : 26
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 309,
        "startColumnNumber" : 4,
        "endLineNumber" : 309,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(5000000000l,options.getWarningExceptionTime());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 309,
    "startColumnNumber" : 17,
    "endLineNumber" : 309,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}