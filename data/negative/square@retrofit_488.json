{
  "id" : 488,
  "expression" : "bodyParams",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit-appengine/src/test/java/retrofit/appengine/UrlFetchClientTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bodyParams",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 59,
      "startColumnNumber" : 4,
      "endLineNumber" : 59,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 49
      },
      "nodeContext" : "bodyParams.put(\"foo\",new TypedString(\"bar\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 50
      },
      "nodeContext" : "bodyParams.put(\"foo\",new TypedString(\"bar\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 794,
        "startLineNumber" : 57,
        "startColumnNumber" : 51,
        "endLineNumber" : 71,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<String,TypedOutput> bodyParams=new LinkedHashMap<String,TypedOutput>();\n  bodyParams.put(\"foo\",new TypedString(\"bar\"));\n  bodyParams.put(\"ping\",new TypedString(\"pong\"));\n  TypedOutput body=TestingUtils.createMultipart(bodyParams);\n  Request request=new Request(\"POST\",HOST + \"/that/\",null,body);\n  HTTPRequest fetchRequest=UrlFetchClient.createRequest(request);\n  assertThat(fetchRequest.getMethod()).isEqualTo(POST);\n  assertThat(fetchRequest.getURL().toString()).isEqualTo(HOST + \"/that/\");\n  List<HTTPHeader> fetchHeaders=fetchRequest.getHeaders();\n  assertThat(fetchHeaders).hasSize(1);\n  assertHeader(fetchHeaders.get(0),\"Content-Type\",\"multipart/form-data; boundary=foobarbaz\");\n  assertThat(fetchRequest.getPayload()).isNotEmpty();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 843,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 71,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void multipart() throws IOException {\n  Map<String,TypedOutput> bodyParams=new LinkedHashMap<String,TypedOutput>();\n  bodyParams.put(\"foo\",new TypedString(\"bar\"));\n  bodyParams.put(\"ping\",new TypedString(\"pong\"));\n  TypedOutput body=TestingUtils.createMultipart(bodyParams);\n  Request request=new Request(\"POST\",HOST + \"/that/\",null,body);\n  HTTPRequest fetchRequest=UrlFetchClient.createRequest(request);\n  assertThat(fetchRequest.getMethod()).isEqualTo(POST);\n  assertThat(fetchRequest.getURL().toString()).isEqualTo(HOST + \"/that/\");\n  List<HTTPHeader> fetchHeaders=fetchRequest.getHeaders();\n  assertThat(fetchHeaders).hasSize(1);\n  assertHeader(fetchHeaders.get(0),\"Content-Type\",\"multipart/form-data; boundary=foobarbaz\");\n  assertThat(fetchRequest.getPayload()).isNotEmpty();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 50
      },
      "nodeContext" : "bodyParams.put(\"foo\",new TypedString(\"bar\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,retrofit.mime.TypedOutput>"
  }, {
    "nodeContext" : "bodyParams",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 60,
      "startColumnNumber" : 4,
      "endLineNumber" : 60,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 51
      },
      "nodeContext" : "bodyParams.put(\"ping\",new TypedString(\"pong\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 52
      },
      "nodeContext" : "bodyParams.put(\"ping\",new TypedString(\"pong\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 794,
        "startLineNumber" : 57,
        "startColumnNumber" : 51,
        "endLineNumber" : 71,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<String,TypedOutput> bodyParams=new LinkedHashMap<String,TypedOutput>();\n  bodyParams.put(\"foo\",new TypedString(\"bar\"));\n  bodyParams.put(\"ping\",new TypedString(\"pong\"));\n  TypedOutput body=TestingUtils.createMultipart(bodyParams);\n  Request request=new Request(\"POST\",HOST + \"/that/\",null,body);\n  HTTPRequest fetchRequest=UrlFetchClient.createRequest(request);\n  assertThat(fetchRequest.getMethod()).isEqualTo(POST);\n  assertThat(fetchRequest.getURL().toString()).isEqualTo(HOST + \"/that/\");\n  List<HTTPHeader> fetchHeaders=fetchRequest.getHeaders();\n  assertThat(fetchHeaders).hasSize(1);\n  assertHeader(fetchHeaders.get(0),\"Content-Type\",\"multipart/form-data; boundary=foobarbaz\");\n  assertThat(fetchRequest.getPayload()).isNotEmpty();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 843,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 71,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void multipart() throws IOException {\n  Map<String,TypedOutput> bodyParams=new LinkedHashMap<String,TypedOutput>();\n  bodyParams.put(\"foo\",new TypedString(\"bar\"));\n  bodyParams.put(\"ping\",new TypedString(\"pong\"));\n  TypedOutput body=TestingUtils.createMultipart(bodyParams);\n  Request request=new Request(\"POST\",HOST + \"/that/\",null,body);\n  HTTPRequest fetchRequest=UrlFetchClient.createRequest(request);\n  assertThat(fetchRequest.getMethod()).isEqualTo(POST);\n  assertThat(fetchRequest.getURL().toString()).isEqualTo(HOST + \"/that/\");\n  List<HTTPHeader> fetchHeaders=fetchRequest.getHeaders();\n  assertThat(fetchHeaders).hasSize(1);\n  assertHeader(fetchHeaders.get(0),\"Content-Type\",\"multipart/form-data; boundary=foobarbaz\");\n  assertThat(fetchRequest.getPayload()).isNotEmpty();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 52
      },
      "nodeContext" : "bodyParams.put(\"ping\",new TypedString(\"pong\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,retrofit.mime.TypedOutput>"
  }, {
    "nodeContext" : "bodyParams",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 61,
      "startColumnNumber" : 52,
      "endLineNumber" : 61,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 61,
        "startColumnNumber" : 23,
        "endLineNumber" : 61,
        "endColumnNumber" : 63
      },
      "nodeContext" : "TestingUtils.createMultipart(bodyParams)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 61,
        "startColumnNumber" : 16,
        "endLineNumber" : 61,
        "endColumnNumber" : 63
      },
      "nodeContext" : "body=TestingUtils.createMultipart(bodyParams)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 64
      },
      "nodeContext" : "TypedOutput body=TestingUtils.createMultipart(bodyParams);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 794,
        "startLineNumber" : 57,
        "startColumnNumber" : 51,
        "endLineNumber" : 71,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<String,TypedOutput> bodyParams=new LinkedHashMap<String,TypedOutput>();\n  bodyParams.put(\"foo\",new TypedString(\"bar\"));\n  bodyParams.put(\"ping\",new TypedString(\"pong\"));\n  TypedOutput body=TestingUtils.createMultipart(bodyParams);\n  Request request=new Request(\"POST\",HOST + \"/that/\",null,body);\n  HTTPRequest fetchRequest=UrlFetchClient.createRequest(request);\n  assertThat(fetchRequest.getMethod()).isEqualTo(POST);\n  assertThat(fetchRequest.getURL().toString()).isEqualTo(HOST + \"/that/\");\n  List<HTTPHeader> fetchHeaders=fetchRequest.getHeaders();\n  assertThat(fetchHeaders).hasSize(1);\n  assertHeader(fetchHeaders.get(0),\"Content-Type\",\"multipart/form-data; boundary=foobarbaz\");\n  assertThat(fetchRequest.getPayload()).isNotEmpty();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 843,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 71,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void multipart() throws IOException {\n  Map<String,TypedOutput> bodyParams=new LinkedHashMap<String,TypedOutput>();\n  bodyParams.put(\"foo\",new TypedString(\"bar\"));\n  bodyParams.put(\"ping\",new TypedString(\"pong\"));\n  TypedOutput body=TestingUtils.createMultipart(bodyParams);\n  Request request=new Request(\"POST\",HOST + \"/that/\",null,body);\n  HTTPRequest fetchRequest=UrlFetchClient.createRequest(request);\n  assertThat(fetchRequest.getMethod()).isEqualTo(POST);\n  assertThat(fetchRequest.getURL().toString()).isEqualTo(HOST + \"/that/\");\n  List<HTTPHeader> fetchHeaders=fetchRequest.getHeaders();\n  assertThat(fetchHeaders).hasSize(1);\n  assertHeader(fetchHeaders.get(0),\"Content-Type\",\"multipart/form-data; boundary=foobarbaz\");\n  assertThat(fetchRequest.getPayload()).isNotEmpty();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 64
      },
      "nodeContext" : "TypedOutput body=TestingUtils.createMultipart(bodyParams);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,retrofit.mime.TypedOutput>"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 59,
    "startColumnNumber" : 4,
    "endLineNumber" : 59,
    "endColumnNumber" : 14
  }, {
    "charLength" : 10,
    "startLineNumber" : 60,
    "startColumnNumber" : 4,
    "endLineNumber" : 60,
    "endColumnNumber" : 14
  }, {
    "charLength" : 10,
    "startLineNumber" : 61,
    "startColumnNumber" : 52,
    "endLineNumber" : 61,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}