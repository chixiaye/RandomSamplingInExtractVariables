{
  "id" : 172,
  "expression" : "injection",
  "projectName" : "JakeWharton@butterknife",
  "commitID" : "f10e46a49ab1de2effacbc97e4b33e45678cbb5a",
  "filePath" : "butterknife/src/main/java/butterknife/Views.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "injection",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 219,
      "startColumnNumber" : 27,
      "endLineNumber" : 219,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 219,
        "startColumnNumber" : 27,
        "endLineNumber" : 219,
        "endColumnNumber" : 45
      },
      "nodeContext" : "injection.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 219,
        "startColumnNumber" : 20,
        "endLineNumber" : 219,
        "endColumnNumber" : 45
      },
      "nodeContext" : "type=injection.getKey()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 219,
        "startColumnNumber" : 8,
        "endLineNumber" : 219,
        "endColumnNumber" : 46
      },
      "nodeContext" : "TypeElement type=injection.getKey();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1301,
        "startLineNumber" : 218,
        "startColumnNumber" : 97,
        "endLineNumber" : 246,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement type=injection.getKey();\n  Set<InjectionPoint> injectionPoints=injection.getValue();\n  String targetType=type.getQualifiedName().toString();\n  String classPackage=getPackageName(type);\n  String className=getClassName(type,classPackage) + SUFFIX;\n  String classFqcn=classPackage + \".\" + className;\n  String parentClassFqcn=findParentFqcn(type,injectionTargets);\n  StringBuilder injectionBuilder=new StringBuilder();\n  if (parentClassFqcn != null) {\n    injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n  }\n  for (  InjectionPoint injectionPoint : injectionPoints) {\n    injectionBuilder.append(injectionPoint).append('\\n');\n  }\n  String injections=injectionBuilder.toString();\n  try {\n    JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n    Writer writer=jfo.openWriter();\n    writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n    writer.flush();\n    writer.close();\n  }\n catch (  IOException e) {\n    error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1392,
        "startLineNumber" : 218,
        "startColumnNumber" : 6,
        "endLineNumber" : 246,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Map.Entry<TypeElement,Set<InjectionPoint>> injection : injectionsByClass.entrySet()) {\n  TypeElement type=injection.getKey();\n  Set<InjectionPoint> injectionPoints=injection.getValue();\n  String targetType=type.getQualifiedName().toString();\n  String classPackage=getPackageName(type);\n  String className=getClassName(type,classPackage) + SUFFIX;\n  String classFqcn=classPackage + \".\" + className;\n  String parentClassFqcn=findParentFqcn(type,injectionTargets);\n  StringBuilder injectionBuilder=new StringBuilder();\n  if (parentClassFqcn != null) {\n    injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n  }\n  for (  InjectionPoint injectionPoint : injectionPoints) {\n    injectionBuilder.append(injectionPoint).append('\\n');\n  }\n  String injections=injectionBuilder.toString();\n  try {\n    JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n    Writer writer=jfo.openWriter();\n    writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n    writer.flush();\n    writer.close();\n  }\n catch (  IOException e) {\n    error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 189,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3895,
        "startLineNumber" : 159,
        "startColumnNumber" : 96,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Set<InjectionPoint>> injectionsByClass=new LinkedHashMap<TypeElement,Set<InjectionPoint>>();\n  Set<TypeMirror> injectionTargets=new HashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Set<InjectionPoint> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new HashSet<InjectionPoint>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    injections.add(new InjectionPoint(variableName,value));\n    injectionTargets.add(enclosingElement.asType());\n  }\n  for (  Map.Entry<TypeElement,Set<InjectionPoint>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    Set<InjectionPoint> injectionPoints=injection.getValue();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    InjectionPoint injectionPoint : injectionPoints) {\n      injectionBuilder.append(injectionPoint).append('\\n');\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 439,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3987,
        "startLineNumber" : 159,
        "startColumnNumber" : 4,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Set<InjectionPoint>> injectionsByClass=new LinkedHashMap<TypeElement,Set<InjectionPoint>>();\n  Set<TypeMirror> injectionTargets=new HashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Set<InjectionPoint> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new HashSet<InjectionPoint>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    injections.add(new InjectionPoint(variableName,value));\n    injectionTargets.add(enclosingElement.asType());\n  }\n  for (  Map.Entry<TypeElement,Set<InjectionPoint>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    Set<InjectionPoint> injectionPoints=injection.getValue();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    InjectionPoint injectionPoint : injectionPoints) {\n      injectionBuilder.append(injectionPoint).append('\\n');\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 457,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 219,
        "startColumnNumber" : 8,
        "endLineNumber" : 219,
        "endColumnNumber" : 46
      },
      "nodeContext" : "TypeElement type=injection.getKey();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Map.Entry<javax.lang.model.element.TypeElement,java.util.Set<butterknife.Views.InjectViewProcessor.InjectionPoint>>"
  }, {
    "nodeContext" : "injection",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 220,
      "startColumnNumber" : 46,
      "endLineNumber" : 220,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 220,
        "startColumnNumber" : 46,
        "endLineNumber" : 220,
        "endColumnNumber" : 66
      },
      "nodeContext" : "injection.getValue()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 220,
        "startColumnNumber" : 28,
        "endLineNumber" : 220,
        "endColumnNumber" : 66
      },
      "nodeContext" : "injectionPoints=injection.getValue()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 220,
        "startColumnNumber" : 8,
        "endLineNumber" : 220,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Set<InjectionPoint> injectionPoints=injection.getValue();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1301,
        "startLineNumber" : 218,
        "startColumnNumber" : 97,
        "endLineNumber" : 246,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement type=injection.getKey();\n  Set<InjectionPoint> injectionPoints=injection.getValue();\n  String targetType=type.getQualifiedName().toString();\n  String classPackage=getPackageName(type);\n  String className=getClassName(type,classPackage) + SUFFIX;\n  String classFqcn=classPackage + \".\" + className;\n  String parentClassFqcn=findParentFqcn(type,injectionTargets);\n  StringBuilder injectionBuilder=new StringBuilder();\n  if (parentClassFqcn != null) {\n    injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n  }\n  for (  InjectionPoint injectionPoint : injectionPoints) {\n    injectionBuilder.append(injectionPoint).append('\\n');\n  }\n  String injections=injectionBuilder.toString();\n  try {\n    JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n    Writer writer=jfo.openWriter();\n    writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n    writer.flush();\n    writer.close();\n  }\n catch (  IOException e) {\n    error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1392,
        "startLineNumber" : 218,
        "startColumnNumber" : 6,
        "endLineNumber" : 246,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Map.Entry<TypeElement,Set<InjectionPoint>> injection : injectionsByClass.entrySet()) {\n  TypeElement type=injection.getKey();\n  Set<InjectionPoint> injectionPoints=injection.getValue();\n  String targetType=type.getQualifiedName().toString();\n  String classPackage=getPackageName(type);\n  String className=getClassName(type,classPackage) + SUFFIX;\n  String classFqcn=classPackage + \".\" + className;\n  String parentClassFqcn=findParentFqcn(type,injectionTargets);\n  StringBuilder injectionBuilder=new StringBuilder();\n  if (parentClassFqcn != null) {\n    injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n  }\n  for (  InjectionPoint injectionPoint : injectionPoints) {\n    injectionBuilder.append(injectionPoint).append('\\n');\n  }\n  String injections=injectionBuilder.toString();\n  try {\n    JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n    Writer writer=jfo.openWriter();\n    writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n    writer.flush();\n    writer.close();\n  }\n catch (  IOException e) {\n    error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 189,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3895,
        "startLineNumber" : 159,
        "startColumnNumber" : 96,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Set<InjectionPoint>> injectionsByClass=new LinkedHashMap<TypeElement,Set<InjectionPoint>>();\n  Set<TypeMirror> injectionTargets=new HashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Set<InjectionPoint> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new HashSet<InjectionPoint>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    injections.add(new InjectionPoint(variableName,value));\n    injectionTargets.add(enclosingElement.asType());\n  }\n  for (  Map.Entry<TypeElement,Set<InjectionPoint>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    Set<InjectionPoint> injectionPoints=injection.getValue();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    InjectionPoint injectionPoint : injectionPoints) {\n      injectionBuilder.append(injectionPoint).append('\\n');\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 439,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3987,
        "startLineNumber" : 159,
        "startColumnNumber" : 4,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Set<InjectionPoint>> injectionsByClass=new LinkedHashMap<TypeElement,Set<InjectionPoint>>();\n  Set<TypeMirror> injectionTargets=new HashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Set<InjectionPoint> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new HashSet<InjectionPoint>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    injections.add(new InjectionPoint(variableName,value));\n    injectionTargets.add(enclosingElement.asType());\n  }\n  for (  Map.Entry<TypeElement,Set<InjectionPoint>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    Set<InjectionPoint> injectionPoints=injection.getValue();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    InjectionPoint injectionPoint : injectionPoints) {\n      injectionBuilder.append(injectionPoint).append('\\n');\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 457,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 220,
        "startColumnNumber" : 8,
        "endLineNumber" : 220,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Set<InjectionPoint> injectionPoints=injection.getValue();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Map.Entry<javax.lang.model.element.TypeElement,java.util.Set<butterknife.Views.InjectViewProcessor.InjectionPoint>>"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 219,
    "startColumnNumber" : 27,
    "endLineNumber" : 219,
    "endColumnNumber" : 36
  }, {
    "charLength" : 9,
    "startLineNumber" : 220,
    "startColumnNumber" : 46,
    "endLineNumber" : 220,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}