{
  "id" : 14,
  "expression" : "\"\\n\"",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/tools/src/mindustry/tools/ScriptMainGenerator.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"\\n\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 60,
      "startColumnNumber" : 22,
      "endLineNumber" : 60,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 27
      },
      "nodeContext" : "result.append(\"\\n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 86
      },
      "nodeContext" : "result.append(\"\\n\").append(new Fi(\"core/assets/scripts/base.js\").readString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 99
      },
      "nodeContext" : "result.append(\"\\n\").append(new Fi(\"core/assets/scripts/base.js\").readString()).append(\"\\n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 100
      },
      "nodeContext" : "result.append(\"\\n\").append(new Fi(\"core/assets/scripts/base.js\").readString()).append(\"\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4129,
        "startLineNumber" : 27,
        "startColumnNumber" : 59,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String base=\"mindustry\";\n  Seq<String> blacklist=Seq.with(\"plugin\",\"mod\",\"net\",\"io\",\"tools\");\n  Seq<String> nameBlacklist=Seq.with(\"ClassAccess\");\n  Seq<Class<?>> whitelist=Seq.with(Draw.class,Fill.class,Lines.class,Core.class,TextureAtlas.class,TextureRegion.class,Time.class,System.class,PrintStream.class,AtlasRegion.class,String.class,Mathf.class,Angles.class,Color.class,Runnable.class,Object.class,Icon.class,Tex.class,Shader.class,Sounds.class,Musics.class,Call.class,Texture.class,TextureData.class,Pixmap.class,I18NBundle.class,Interval.class,DataInput.class,DataOutput.class,DataInputStream.class,DataOutputStream.class,Integer.class,Float.class,Double.class,Long.class,Boolean.class,Short.class,Byte.class,Character.class);\n  Seq<String> nopackage=Seq.with(\"java.lang\",\"java\");\n  Seq<Class<?>> classes=Seq.withArrays(getClasses(\"mindustry\"),getClasses(\"arc.func\"),getClasses(\"arc.struct\"),getClasses(\"arc.scene\"),getClasses(\"arc.math\"),getClasses(\"arc.audio\"),getClasses(\"arc.input\"),getClasses(\"arc.util\"),getClasses(\"arc.struct\"));\n  classes.addAll(whitelist);\n  classes.sort(Structs.comparing(Class::getName));\n  classes.removeAll(type -> type.isSynthetic() || type.isAnonymousClass() || type.getCanonicalName() == null || Modifier.isPrivate(type.getModifiers()) || blacklist.contains(s -> type.getName().startsWith(base + \".\" + s+ \".\")) || nameBlacklist.contains(type.getSimpleName()));\n  classes.add(NetConnection.class,SaveIO.class,SystemCursor.class);\n  classes.distinct();\n  classes.sortComparing(Class::getName);\n  ObjectSet<String> used=ObjectSet.with();\n  StringBuilder result=new StringBuilder(\"//Generated class. Do not modify.\\n\");\n  result.append(\"\\n\").append(new Fi(\"core/assets/scripts/base.js\").readString()).append(\"\\n\");\n  for (  Class type : classes) {\n    if (used.contains(type.getPackage().getName()) || nopackage.contains(s -> type.getName().startsWith(s)))     continue;\n    result.append(\"importPackage(Packages.\").append(type.getPackage().getName()).append(\")\\n\");\n    used.add(type.getPackage().getName());\n  }\n  Log.info(\"Imported @ packages.\",used.size);\n  for (  Class type : EventType.class.getClasses()) {\n    result.append(\"const \").append(type.getSimpleName()).append(\" = \").append(\"Packages.\").append(type.getName().replace('$','.')).append(\"\\n\");\n  }\n  new Fi(\"core/assets/scripts/global.js\").writeString(result.toString());\n  Seq<String> packages=Seq.with(\"mindustry.entities.effect\",\"mindustry.entities.bullet\",\"mindustry.ai.types\",\"mindustry.type.weather\",\"mindustry.game.Objectives\",\"mindustry.world.blocks\",\"mindustry.world.draw\");\n  String classTemplate=\"package mindustry.mod;\\n\" + \"\\n\" + \"import arc.struct.*;\\n\"+ \"/** Generated class. Maps simple class names to concrete classes. For use in JSON mods. */\\n\"+ \"public class ClassMap{\\n\"+ \"    public static final ObjectMap<String, Class<?>> classes = new ObjectMap<>();\\n\"+ \"    \\n\"+ \"    static{\\n$CLASSES$\"+ \"    }\\n\"+ \"}\\n\";\n  StringBuilder cdef=new StringBuilder();\n  Seq<Class<?>> mapped=classes.select(c -> Modifier.isPublic(c.getModifiers()) && packages.contains(c.getCanonicalName()::startsWith)).and(Block.class);\n  for (  Class<?> c : mapped) {\n    cdef.append(\"        classes.put(\\\"\").append(c.getSimpleName()).append(\"\\\", \").append(c.getCanonicalName()).append(\".class);\\n\");\n  }\n  new Fi(\"core/src/mindustry/mod/ClassMap.java\").writeString(classTemplate.replace(\"$CLASSES$\",cdef.toString()));\n  Log.info(\"Generated @ class mappings.\",mapped.size);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 584,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4184,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  String base=\"mindustry\";\n  Seq<String> blacklist=Seq.with(\"plugin\",\"mod\",\"net\",\"io\",\"tools\");\n  Seq<String> nameBlacklist=Seq.with(\"ClassAccess\");\n  Seq<Class<?>> whitelist=Seq.with(Draw.class,Fill.class,Lines.class,Core.class,TextureAtlas.class,TextureRegion.class,Time.class,System.class,PrintStream.class,AtlasRegion.class,String.class,Mathf.class,Angles.class,Color.class,Runnable.class,Object.class,Icon.class,Tex.class,Shader.class,Sounds.class,Musics.class,Call.class,Texture.class,TextureData.class,Pixmap.class,I18NBundle.class,Interval.class,DataInput.class,DataOutput.class,DataInputStream.class,DataOutputStream.class,Integer.class,Float.class,Double.class,Long.class,Boolean.class,Short.class,Byte.class,Character.class);\n  Seq<String> nopackage=Seq.with(\"java.lang\",\"java\");\n  Seq<Class<?>> classes=Seq.withArrays(getClasses(\"mindustry\"),getClasses(\"arc.func\"),getClasses(\"arc.struct\"),getClasses(\"arc.scene\"),getClasses(\"arc.math\"),getClasses(\"arc.audio\"),getClasses(\"arc.input\"),getClasses(\"arc.util\"),getClasses(\"arc.struct\"));\n  classes.addAll(whitelist);\n  classes.sort(Structs.comparing(Class::getName));\n  classes.removeAll(type -> type.isSynthetic() || type.isAnonymousClass() || type.getCanonicalName() == null || Modifier.isPrivate(type.getModifiers()) || blacklist.contains(s -> type.getName().startsWith(base + \".\" + s+ \".\")) || nameBlacklist.contains(type.getSimpleName()));\n  classes.add(NetConnection.class,SaveIO.class,SystemCursor.class);\n  classes.distinct();\n  classes.sortComparing(Class::getName);\n  ObjectSet<String> used=ObjectSet.with();\n  StringBuilder result=new StringBuilder(\"//Generated class. Do not modify.\\n\");\n  result.append(\"\\n\").append(new Fi(\"core/assets/scripts/base.js\").readString()).append(\"\\n\");\n  for (  Class type : classes) {\n    if (used.contains(type.getPackage().getName()) || nopackage.contains(s -> type.getName().startsWith(s)))     continue;\n    result.append(\"importPackage(Packages.\").append(type.getPackage().getName()).append(\")\\n\");\n    used.add(type.getPackage().getName());\n  }\n  Log.info(\"Imported @ packages.\",used.size);\n  for (  Class type : EventType.class.getClasses()) {\n    result.append(\"const \").append(type.getSimpleName()).append(\" = \").append(\"Packages.\").append(type.getName().replace('$','.')).append(\"\\n\");\n  }\n  new Fi(\"core/assets/scripts/global.js\").writeString(result.toString());\n  Seq<String> packages=Seq.with(\"mindustry.entities.effect\",\"mindustry.entities.bullet\",\"mindustry.ai.types\",\"mindustry.type.weather\",\"mindustry.game.Objectives\",\"mindustry.world.blocks\",\"mindustry.world.draw\");\n  String classTemplate=\"package mindustry.mod;\\n\" + \"\\n\" + \"import arc.struct.*;\\n\"+ \"/** Generated class. Maps simple class names to concrete classes. For use in JSON mods. */\\n\"+ \"public class ClassMap{\\n\"+ \"    public static final ObjectMap<String, Class<?>> classes = new ObjectMap<>();\\n\"+ \"    \\n\"+ \"    static{\\n$CLASSES$\"+ \"    }\\n\"+ \"}\\n\";\n  StringBuilder cdef=new StringBuilder();\n  Seq<Class<?>> mapped=classes.select(c -> Modifier.isPublic(c.getModifiers()) && packages.contains(c.getCanonicalName()::startsWith)).and(Block.class);\n  for (  Class<?> c : mapped) {\n    cdef.append(\"        classes.put(\\\"\").append(c.getSimpleName()).append(\"\\\", \").append(c.getCanonicalName()).append(\".class);\\n\");\n  }\n  new Fi(\"core/src/mindustry/mod/ClassMap.java\").writeString(classTemplate.replace(\"$CLASSES$\",cdef.toString()));\n  Log.info(\"Generated @ class mappings.\",mapped.size);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 597,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 100
      },
      "nodeContext" : "result.append(\"\\n\").append(new Fi(\"core/assets/scripts/base.js\").readString()).append(\"\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"\\n\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 60,
      "startColumnNumber" : 94,
      "endLineNumber" : 60,
      "endColumnNumber" : 98
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 99
      },
      "nodeContext" : "result.append(\"\\n\").append(new Fi(\"core/assets/scripts/base.js\").readString()).append(\"\\n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 100
      },
      "nodeContext" : "result.append(\"\\n\").append(new Fi(\"core/assets/scripts/base.js\").readString()).append(\"\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4129,
        "startLineNumber" : 27,
        "startColumnNumber" : 59,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String base=\"mindustry\";\n  Seq<String> blacklist=Seq.with(\"plugin\",\"mod\",\"net\",\"io\",\"tools\");\n  Seq<String> nameBlacklist=Seq.with(\"ClassAccess\");\n  Seq<Class<?>> whitelist=Seq.with(Draw.class,Fill.class,Lines.class,Core.class,TextureAtlas.class,TextureRegion.class,Time.class,System.class,PrintStream.class,AtlasRegion.class,String.class,Mathf.class,Angles.class,Color.class,Runnable.class,Object.class,Icon.class,Tex.class,Shader.class,Sounds.class,Musics.class,Call.class,Texture.class,TextureData.class,Pixmap.class,I18NBundle.class,Interval.class,DataInput.class,DataOutput.class,DataInputStream.class,DataOutputStream.class,Integer.class,Float.class,Double.class,Long.class,Boolean.class,Short.class,Byte.class,Character.class);\n  Seq<String> nopackage=Seq.with(\"java.lang\",\"java\");\n  Seq<Class<?>> classes=Seq.withArrays(getClasses(\"mindustry\"),getClasses(\"arc.func\"),getClasses(\"arc.struct\"),getClasses(\"arc.scene\"),getClasses(\"arc.math\"),getClasses(\"arc.audio\"),getClasses(\"arc.input\"),getClasses(\"arc.util\"),getClasses(\"arc.struct\"));\n  classes.addAll(whitelist);\n  classes.sort(Structs.comparing(Class::getName));\n  classes.removeAll(type -> type.isSynthetic() || type.isAnonymousClass() || type.getCanonicalName() == null || Modifier.isPrivate(type.getModifiers()) || blacklist.contains(s -> type.getName().startsWith(base + \".\" + s+ \".\")) || nameBlacklist.contains(type.getSimpleName()));\n  classes.add(NetConnection.class,SaveIO.class,SystemCursor.class);\n  classes.distinct();\n  classes.sortComparing(Class::getName);\n  ObjectSet<String> used=ObjectSet.with();\n  StringBuilder result=new StringBuilder(\"//Generated class. Do not modify.\\n\");\n  result.append(\"\\n\").append(new Fi(\"core/assets/scripts/base.js\").readString()).append(\"\\n\");\n  for (  Class type : classes) {\n    if (used.contains(type.getPackage().getName()) || nopackage.contains(s -> type.getName().startsWith(s)))     continue;\n    result.append(\"importPackage(Packages.\").append(type.getPackage().getName()).append(\")\\n\");\n    used.add(type.getPackage().getName());\n  }\n  Log.info(\"Imported @ packages.\",used.size);\n  for (  Class type : EventType.class.getClasses()) {\n    result.append(\"const \").append(type.getSimpleName()).append(\" = \").append(\"Packages.\").append(type.getName().replace('$','.')).append(\"\\n\");\n  }\n  new Fi(\"core/assets/scripts/global.js\").writeString(result.toString());\n  Seq<String> packages=Seq.with(\"mindustry.entities.effect\",\"mindustry.entities.bullet\",\"mindustry.ai.types\",\"mindustry.type.weather\",\"mindustry.game.Objectives\",\"mindustry.world.blocks\",\"mindustry.world.draw\");\n  String classTemplate=\"package mindustry.mod;\\n\" + \"\\n\" + \"import arc.struct.*;\\n\"+ \"/** Generated class. Maps simple class names to concrete classes. For use in JSON mods. */\\n\"+ \"public class ClassMap{\\n\"+ \"    public static final ObjectMap<String, Class<?>> classes = new ObjectMap<>();\\n\"+ \"    \\n\"+ \"    static{\\n$CLASSES$\"+ \"    }\\n\"+ \"}\\n\";\n  StringBuilder cdef=new StringBuilder();\n  Seq<Class<?>> mapped=classes.select(c -> Modifier.isPublic(c.getModifiers()) && packages.contains(c.getCanonicalName()::startsWith)).and(Block.class);\n  for (  Class<?> c : mapped) {\n    cdef.append(\"        classes.put(\\\"\").append(c.getSimpleName()).append(\"\\\", \").append(c.getCanonicalName()).append(\".class);\\n\");\n  }\n  new Fi(\"core/src/mindustry/mod/ClassMap.java\").writeString(classTemplate.replace(\"$CLASSES$\",cdef.toString()));\n  Log.info(\"Generated @ class mappings.\",mapped.size);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 584,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4184,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  String base=\"mindustry\";\n  Seq<String> blacklist=Seq.with(\"plugin\",\"mod\",\"net\",\"io\",\"tools\");\n  Seq<String> nameBlacklist=Seq.with(\"ClassAccess\");\n  Seq<Class<?>> whitelist=Seq.with(Draw.class,Fill.class,Lines.class,Core.class,TextureAtlas.class,TextureRegion.class,Time.class,System.class,PrintStream.class,AtlasRegion.class,String.class,Mathf.class,Angles.class,Color.class,Runnable.class,Object.class,Icon.class,Tex.class,Shader.class,Sounds.class,Musics.class,Call.class,Texture.class,TextureData.class,Pixmap.class,I18NBundle.class,Interval.class,DataInput.class,DataOutput.class,DataInputStream.class,DataOutputStream.class,Integer.class,Float.class,Double.class,Long.class,Boolean.class,Short.class,Byte.class,Character.class);\n  Seq<String> nopackage=Seq.with(\"java.lang\",\"java\");\n  Seq<Class<?>> classes=Seq.withArrays(getClasses(\"mindustry\"),getClasses(\"arc.func\"),getClasses(\"arc.struct\"),getClasses(\"arc.scene\"),getClasses(\"arc.math\"),getClasses(\"arc.audio\"),getClasses(\"arc.input\"),getClasses(\"arc.util\"),getClasses(\"arc.struct\"));\n  classes.addAll(whitelist);\n  classes.sort(Structs.comparing(Class::getName));\n  classes.removeAll(type -> type.isSynthetic() || type.isAnonymousClass() || type.getCanonicalName() == null || Modifier.isPrivate(type.getModifiers()) || blacklist.contains(s -> type.getName().startsWith(base + \".\" + s+ \".\")) || nameBlacklist.contains(type.getSimpleName()));\n  classes.add(NetConnection.class,SaveIO.class,SystemCursor.class);\n  classes.distinct();\n  classes.sortComparing(Class::getName);\n  ObjectSet<String> used=ObjectSet.with();\n  StringBuilder result=new StringBuilder(\"//Generated class. Do not modify.\\n\");\n  result.append(\"\\n\").append(new Fi(\"core/assets/scripts/base.js\").readString()).append(\"\\n\");\n  for (  Class type : classes) {\n    if (used.contains(type.getPackage().getName()) || nopackage.contains(s -> type.getName().startsWith(s)))     continue;\n    result.append(\"importPackage(Packages.\").append(type.getPackage().getName()).append(\")\\n\");\n    used.add(type.getPackage().getName());\n  }\n  Log.info(\"Imported @ packages.\",used.size);\n  for (  Class type : EventType.class.getClasses()) {\n    result.append(\"const \").append(type.getSimpleName()).append(\" = \").append(\"Packages.\").append(type.getName().replace('$','.')).append(\"\\n\");\n  }\n  new Fi(\"core/assets/scripts/global.js\").writeString(result.toString());\n  Seq<String> packages=Seq.with(\"mindustry.entities.effect\",\"mindustry.entities.bullet\",\"mindustry.ai.types\",\"mindustry.type.weather\",\"mindustry.game.Objectives\",\"mindustry.world.blocks\",\"mindustry.world.draw\");\n  String classTemplate=\"package mindustry.mod;\\n\" + \"\\n\" + \"import arc.struct.*;\\n\"+ \"/** Generated class. Maps simple class names to concrete classes. For use in JSON mods. */\\n\"+ \"public class ClassMap{\\n\"+ \"    public static final ObjectMap<String, Class<?>> classes = new ObjectMap<>();\\n\"+ \"    \\n\"+ \"    static{\\n$CLASSES$\"+ \"    }\\n\"+ \"}\\n\";\n  StringBuilder cdef=new StringBuilder();\n  Seq<Class<?>> mapped=classes.select(c -> Modifier.isPublic(c.getModifiers()) && packages.contains(c.getCanonicalName()::startsWith)).and(Block.class);\n  for (  Class<?> c : mapped) {\n    cdef.append(\"        classes.put(\\\"\").append(c.getSimpleName()).append(\"\\\", \").append(c.getCanonicalName()).append(\".class);\\n\");\n  }\n  new Fi(\"core/src/mindustry/mod/ClassMap.java\").writeString(classTemplate.replace(\"$CLASSES$\",cdef.toString()));\n  Log.info(\"Generated @ class mappings.\",mapped.size);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 597,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 100
      },
      "nodeContext" : "result.append(\"\\n\").append(new Fi(\"core/assets/scripts/base.js\").readString()).append(\"\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"\\n\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 70,
      "startColumnNumber" : 147,
      "endLineNumber" : 70,
      "endColumnNumber" : 151
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 70,
        "endColumnNumber" : 152
      },
      "nodeContext" : "result.append(\"const \").append(type.getSimpleName()).append(\" = \").append(\"Packages.\").append(type.getName().replace('$','.')).append(\"\\n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 70,
        "endColumnNumber" : 153
      },
      "nodeContext" : "result.append(\"const \").append(type.getSimpleName()).append(\" = \").append(\"Packages.\").append(type.getName().replace('$','.')).append(\"\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 69,
        "startColumnNumber" : 54,
        "endLineNumber" : 71,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  result.append(\"const \").append(type.getSimpleName()).append(\" = \").append(\"Packages.\").append(type.getName().replace('$','.')).append(\"\\n\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 211,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Class type : EventType.class.getClasses()) {\n  result.append(\"const \").append(type.getSimpleName()).append(\" = \").append(\"Packages.\").append(type.getName().replace('$','.')).append(\"\\n\");\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4129,
        "startLineNumber" : 27,
        "startColumnNumber" : 59,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String base=\"mindustry\";\n  Seq<String> blacklist=Seq.with(\"plugin\",\"mod\",\"net\",\"io\",\"tools\");\n  Seq<String> nameBlacklist=Seq.with(\"ClassAccess\");\n  Seq<Class<?>> whitelist=Seq.with(Draw.class,Fill.class,Lines.class,Core.class,TextureAtlas.class,TextureRegion.class,Time.class,System.class,PrintStream.class,AtlasRegion.class,String.class,Mathf.class,Angles.class,Color.class,Runnable.class,Object.class,Icon.class,Tex.class,Shader.class,Sounds.class,Musics.class,Call.class,Texture.class,TextureData.class,Pixmap.class,I18NBundle.class,Interval.class,DataInput.class,DataOutput.class,DataInputStream.class,DataOutputStream.class,Integer.class,Float.class,Double.class,Long.class,Boolean.class,Short.class,Byte.class,Character.class);\n  Seq<String> nopackage=Seq.with(\"java.lang\",\"java\");\n  Seq<Class<?>> classes=Seq.withArrays(getClasses(\"mindustry\"),getClasses(\"arc.func\"),getClasses(\"arc.struct\"),getClasses(\"arc.scene\"),getClasses(\"arc.math\"),getClasses(\"arc.audio\"),getClasses(\"arc.input\"),getClasses(\"arc.util\"),getClasses(\"arc.struct\"));\n  classes.addAll(whitelist);\n  classes.sort(Structs.comparing(Class::getName));\n  classes.removeAll(type -> type.isSynthetic() || type.isAnonymousClass() || type.getCanonicalName() == null || Modifier.isPrivate(type.getModifiers()) || blacklist.contains(s -> type.getName().startsWith(base + \".\" + s+ \".\")) || nameBlacklist.contains(type.getSimpleName()));\n  classes.add(NetConnection.class,SaveIO.class,SystemCursor.class);\n  classes.distinct();\n  classes.sortComparing(Class::getName);\n  ObjectSet<String> used=ObjectSet.with();\n  StringBuilder result=new StringBuilder(\"//Generated class. Do not modify.\\n\");\n  result.append(\"\\n\").append(new Fi(\"core/assets/scripts/base.js\").readString()).append(\"\\n\");\n  for (  Class type : classes) {\n    if (used.contains(type.getPackage().getName()) || nopackage.contains(s -> type.getName().startsWith(s)))     continue;\n    result.append(\"importPackage(Packages.\").append(type.getPackage().getName()).append(\")\\n\");\n    used.add(type.getPackage().getName());\n  }\n  Log.info(\"Imported @ packages.\",used.size);\n  for (  Class type : EventType.class.getClasses()) {\n    result.append(\"const \").append(type.getSimpleName()).append(\" = \").append(\"Packages.\").append(type.getName().replace('$','.')).append(\"\\n\");\n  }\n  new Fi(\"core/assets/scripts/global.js\").writeString(result.toString());\n  Seq<String> packages=Seq.with(\"mindustry.entities.effect\",\"mindustry.entities.bullet\",\"mindustry.ai.types\",\"mindustry.type.weather\",\"mindustry.game.Objectives\",\"mindustry.world.blocks\",\"mindustry.world.draw\");\n  String classTemplate=\"package mindustry.mod;\\n\" + \"\\n\" + \"import arc.struct.*;\\n\"+ \"/** Generated class. Maps simple class names to concrete classes. For use in JSON mods. */\\n\"+ \"public class ClassMap{\\n\"+ \"    public static final ObjectMap<String, Class<?>> classes = new ObjectMap<>();\\n\"+ \"    \\n\"+ \"    static{\\n$CLASSES$\"+ \"    }\\n\"+ \"}\\n\";\n  StringBuilder cdef=new StringBuilder();\n  Seq<Class<?>> mapped=classes.select(c -> Modifier.isPublic(c.getModifiers()) && packages.contains(c.getCanonicalName()::startsWith)).and(Block.class);\n  for (  Class<?> c : mapped) {\n    cdef.append(\"        classes.put(\\\"\").append(c.getSimpleName()).append(\"\\\", \").append(c.getCanonicalName()).append(\".class);\\n\");\n  }\n  new Fi(\"core/src/mindustry/mod/ClassMap.java\").writeString(classTemplate.replace(\"$CLASSES$\",cdef.toString()));\n  Log.info(\"Generated @ class mappings.\",mapped.size);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 584,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4184,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  String base=\"mindustry\";\n  Seq<String> blacklist=Seq.with(\"plugin\",\"mod\",\"net\",\"io\",\"tools\");\n  Seq<String> nameBlacklist=Seq.with(\"ClassAccess\");\n  Seq<Class<?>> whitelist=Seq.with(Draw.class,Fill.class,Lines.class,Core.class,TextureAtlas.class,TextureRegion.class,Time.class,System.class,PrintStream.class,AtlasRegion.class,String.class,Mathf.class,Angles.class,Color.class,Runnable.class,Object.class,Icon.class,Tex.class,Shader.class,Sounds.class,Musics.class,Call.class,Texture.class,TextureData.class,Pixmap.class,I18NBundle.class,Interval.class,DataInput.class,DataOutput.class,DataInputStream.class,DataOutputStream.class,Integer.class,Float.class,Double.class,Long.class,Boolean.class,Short.class,Byte.class,Character.class);\n  Seq<String> nopackage=Seq.with(\"java.lang\",\"java\");\n  Seq<Class<?>> classes=Seq.withArrays(getClasses(\"mindustry\"),getClasses(\"arc.func\"),getClasses(\"arc.struct\"),getClasses(\"arc.scene\"),getClasses(\"arc.math\"),getClasses(\"arc.audio\"),getClasses(\"arc.input\"),getClasses(\"arc.util\"),getClasses(\"arc.struct\"));\n  classes.addAll(whitelist);\n  classes.sort(Structs.comparing(Class::getName));\n  classes.removeAll(type -> type.isSynthetic() || type.isAnonymousClass() || type.getCanonicalName() == null || Modifier.isPrivate(type.getModifiers()) || blacklist.contains(s -> type.getName().startsWith(base + \".\" + s+ \".\")) || nameBlacklist.contains(type.getSimpleName()));\n  classes.add(NetConnection.class,SaveIO.class,SystemCursor.class);\n  classes.distinct();\n  classes.sortComparing(Class::getName);\n  ObjectSet<String> used=ObjectSet.with();\n  StringBuilder result=new StringBuilder(\"//Generated class. Do not modify.\\n\");\n  result.append(\"\\n\").append(new Fi(\"core/assets/scripts/base.js\").readString()).append(\"\\n\");\n  for (  Class type : classes) {\n    if (used.contains(type.getPackage().getName()) || nopackage.contains(s -> type.getName().startsWith(s)))     continue;\n    result.append(\"importPackage(Packages.\").append(type.getPackage().getName()).append(\")\\n\");\n    used.add(type.getPackage().getName());\n  }\n  Log.info(\"Imported @ packages.\",used.size);\n  for (  Class type : EventType.class.getClasses()) {\n    result.append(\"const \").append(type.getSimpleName()).append(\" = \").append(\"Packages.\").append(type.getName().replace('$','.')).append(\"\\n\");\n  }\n  new Fi(\"core/assets/scripts/global.js\").writeString(result.toString());\n  Seq<String> packages=Seq.with(\"mindustry.entities.effect\",\"mindustry.entities.bullet\",\"mindustry.ai.types\",\"mindustry.type.weather\",\"mindustry.game.Objectives\",\"mindustry.world.blocks\",\"mindustry.world.draw\");\n  String classTemplate=\"package mindustry.mod;\\n\" + \"\\n\" + \"import arc.struct.*;\\n\"+ \"/** Generated class. Maps simple class names to concrete classes. For use in JSON mods. */\\n\"+ \"public class ClassMap{\\n\"+ \"    public static final ObjectMap<String, Class<?>> classes = new ObjectMap<>();\\n\"+ \"    \\n\"+ \"    static{\\n$CLASSES$\"+ \"    }\\n\"+ \"}\\n\";\n  StringBuilder cdef=new StringBuilder();\n  Seq<Class<?>> mapped=classes.select(c -> Modifier.isPublic(c.getModifiers()) && packages.contains(c.getCanonicalName()::startsWith)).and(Block.class);\n  for (  Class<?> c : mapped) {\n    cdef.append(\"        classes.put(\\\"\").append(c.getSimpleName()).append(\"\\\", \").append(c.getCanonicalName()).append(\".class);\\n\");\n  }\n  new Fi(\"core/src/mindustry/mod/ClassMap.java\").writeString(classTemplate.replace(\"$CLASSES$\",cdef.toString()));\n  Log.info(\"Generated @ class mappings.\",mapped.size);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 597,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 70,
        "endColumnNumber" : 153
      },
      "nodeContext" : "result.append(\"const \").append(type.getSimpleName()).append(\" = \").append(\"Packages.\").append(type.getName().replace('$','.')).append(\"\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"\\n\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 87,
      "startColumnNumber" : 8,
      "endLineNumber" : 87,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 403,
        "startLineNumber" : 86,
        "startColumnNumber" : 31,
        "endLineNumber" : 95,
        "endColumnNumber" : 13
      },
      "nodeContext" : "\"package mindustry.mod;\\n\" + \"\\n\" + \"import arc.struct.*;\\n\"+ \"/** Generated class. Maps simple class names to concrete classes. For use in JSON mods. */\\n\"+ \"public class ClassMap{\\n\"+ \"    public static final ObjectMap<String, Class<?>> classes = new ObjectMap<>();\\n\"+ \"    \\n\"+ \"    static{\\n$CLASSES$\"+ \"    }\\n\"+ \"}\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 419,
        "startLineNumber" : 86,
        "startColumnNumber" : 15,
        "endLineNumber" : 95,
        "endColumnNumber" : 13
      },
      "nodeContext" : "classTemplate=\"package mindustry.mod;\\n\" + \"\\n\" + \"import arc.struct.*;\\n\"+ \"/** Generated class. Maps simple class names to concrete classes. For use in JSON mods. */\\n\"+ \"public class ClassMap{\\n\"+ \"    public static final ObjectMap<String, Class<?>> classes = new ObjectMap<>();\\n\"+ \"    \\n\"+ \"    static{\\n$CLASSES$\"+ \"    }\\n\"+ \"}\\n\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 427,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 14
      },
      "nodeContext" : "String classTemplate=\"package mindustry.mod;\\n\" + \"\\n\" + \"import arc.struct.*;\\n\"+ \"/** Generated class. Maps simple class names to concrete classes. For use in JSON mods. */\\n\"+ \"public class ClassMap{\\n\"+ \"    public static final ObjectMap<String, Class<?>> classes = new ObjectMap<>();\\n\"+ \"    \\n\"+ \"    static{\\n$CLASSES$\"+ \"    }\\n\"+ \"}\\n\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4129,
        "startLineNumber" : 27,
        "startColumnNumber" : 59,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String base=\"mindustry\";\n  Seq<String> blacklist=Seq.with(\"plugin\",\"mod\",\"net\",\"io\",\"tools\");\n  Seq<String> nameBlacklist=Seq.with(\"ClassAccess\");\n  Seq<Class<?>> whitelist=Seq.with(Draw.class,Fill.class,Lines.class,Core.class,TextureAtlas.class,TextureRegion.class,Time.class,System.class,PrintStream.class,AtlasRegion.class,String.class,Mathf.class,Angles.class,Color.class,Runnable.class,Object.class,Icon.class,Tex.class,Shader.class,Sounds.class,Musics.class,Call.class,Texture.class,TextureData.class,Pixmap.class,I18NBundle.class,Interval.class,DataInput.class,DataOutput.class,DataInputStream.class,DataOutputStream.class,Integer.class,Float.class,Double.class,Long.class,Boolean.class,Short.class,Byte.class,Character.class);\n  Seq<String> nopackage=Seq.with(\"java.lang\",\"java\");\n  Seq<Class<?>> classes=Seq.withArrays(getClasses(\"mindustry\"),getClasses(\"arc.func\"),getClasses(\"arc.struct\"),getClasses(\"arc.scene\"),getClasses(\"arc.math\"),getClasses(\"arc.audio\"),getClasses(\"arc.input\"),getClasses(\"arc.util\"),getClasses(\"arc.struct\"));\n  classes.addAll(whitelist);\n  classes.sort(Structs.comparing(Class::getName));\n  classes.removeAll(type -> type.isSynthetic() || type.isAnonymousClass() || type.getCanonicalName() == null || Modifier.isPrivate(type.getModifiers()) || blacklist.contains(s -> type.getName().startsWith(base + \".\" + s+ \".\")) || nameBlacklist.contains(type.getSimpleName()));\n  classes.add(NetConnection.class,SaveIO.class,SystemCursor.class);\n  classes.distinct();\n  classes.sortComparing(Class::getName);\n  ObjectSet<String> used=ObjectSet.with();\n  StringBuilder result=new StringBuilder(\"//Generated class. Do not modify.\\n\");\n  result.append(\"\\n\").append(new Fi(\"core/assets/scripts/base.js\").readString()).append(\"\\n\");\n  for (  Class type : classes) {\n    if (used.contains(type.getPackage().getName()) || nopackage.contains(s -> type.getName().startsWith(s)))     continue;\n    result.append(\"importPackage(Packages.\").append(type.getPackage().getName()).append(\")\\n\");\n    used.add(type.getPackage().getName());\n  }\n  Log.info(\"Imported @ packages.\",used.size);\n  for (  Class type : EventType.class.getClasses()) {\n    result.append(\"const \").append(type.getSimpleName()).append(\" = \").append(\"Packages.\").append(type.getName().replace('$','.')).append(\"\\n\");\n  }\n  new Fi(\"core/assets/scripts/global.js\").writeString(result.toString());\n  Seq<String> packages=Seq.with(\"mindustry.entities.effect\",\"mindustry.entities.bullet\",\"mindustry.ai.types\",\"mindustry.type.weather\",\"mindustry.game.Objectives\",\"mindustry.world.blocks\",\"mindustry.world.draw\");\n  String classTemplate=\"package mindustry.mod;\\n\" + \"\\n\" + \"import arc.struct.*;\\n\"+ \"/** Generated class. Maps simple class names to concrete classes. For use in JSON mods. */\\n\"+ \"public class ClassMap{\\n\"+ \"    public static final ObjectMap<String, Class<?>> classes = new ObjectMap<>();\\n\"+ \"    \\n\"+ \"    static{\\n$CLASSES$\"+ \"    }\\n\"+ \"}\\n\";\n  StringBuilder cdef=new StringBuilder();\n  Seq<Class<?>> mapped=classes.select(c -> Modifier.isPublic(c.getModifiers()) && packages.contains(c.getCanonicalName()::startsWith)).and(Block.class);\n  for (  Class<?> c : mapped) {\n    cdef.append(\"        classes.put(\\\"\").append(c.getSimpleName()).append(\"\\\", \").append(c.getCanonicalName()).append(\".class);\\n\");\n  }\n  new Fi(\"core/src/mindustry/mod/ClassMap.java\").writeString(classTemplate.replace(\"$CLASSES$\",cdef.toString()));\n  Log.info(\"Generated @ class mappings.\",mapped.size);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 584,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4184,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  String base=\"mindustry\";\n  Seq<String> blacklist=Seq.with(\"plugin\",\"mod\",\"net\",\"io\",\"tools\");\n  Seq<String> nameBlacklist=Seq.with(\"ClassAccess\");\n  Seq<Class<?>> whitelist=Seq.with(Draw.class,Fill.class,Lines.class,Core.class,TextureAtlas.class,TextureRegion.class,Time.class,System.class,PrintStream.class,AtlasRegion.class,String.class,Mathf.class,Angles.class,Color.class,Runnable.class,Object.class,Icon.class,Tex.class,Shader.class,Sounds.class,Musics.class,Call.class,Texture.class,TextureData.class,Pixmap.class,I18NBundle.class,Interval.class,DataInput.class,DataOutput.class,DataInputStream.class,DataOutputStream.class,Integer.class,Float.class,Double.class,Long.class,Boolean.class,Short.class,Byte.class,Character.class);\n  Seq<String> nopackage=Seq.with(\"java.lang\",\"java\");\n  Seq<Class<?>> classes=Seq.withArrays(getClasses(\"mindustry\"),getClasses(\"arc.func\"),getClasses(\"arc.struct\"),getClasses(\"arc.scene\"),getClasses(\"arc.math\"),getClasses(\"arc.audio\"),getClasses(\"arc.input\"),getClasses(\"arc.util\"),getClasses(\"arc.struct\"));\n  classes.addAll(whitelist);\n  classes.sort(Structs.comparing(Class::getName));\n  classes.removeAll(type -> type.isSynthetic() || type.isAnonymousClass() || type.getCanonicalName() == null || Modifier.isPrivate(type.getModifiers()) || blacklist.contains(s -> type.getName().startsWith(base + \".\" + s+ \".\")) || nameBlacklist.contains(type.getSimpleName()));\n  classes.add(NetConnection.class,SaveIO.class,SystemCursor.class);\n  classes.distinct();\n  classes.sortComparing(Class::getName);\n  ObjectSet<String> used=ObjectSet.with();\n  StringBuilder result=new StringBuilder(\"//Generated class. Do not modify.\\n\");\n  result.append(\"\\n\").append(new Fi(\"core/assets/scripts/base.js\").readString()).append(\"\\n\");\n  for (  Class type : classes) {\n    if (used.contains(type.getPackage().getName()) || nopackage.contains(s -> type.getName().startsWith(s)))     continue;\n    result.append(\"importPackage(Packages.\").append(type.getPackage().getName()).append(\")\\n\");\n    used.add(type.getPackage().getName());\n  }\n  Log.info(\"Imported @ packages.\",used.size);\n  for (  Class type : EventType.class.getClasses()) {\n    result.append(\"const \").append(type.getSimpleName()).append(\" = \").append(\"Packages.\").append(type.getName().replace('$','.')).append(\"\\n\");\n  }\n  new Fi(\"core/assets/scripts/global.js\").writeString(result.toString());\n  Seq<String> packages=Seq.with(\"mindustry.entities.effect\",\"mindustry.entities.bullet\",\"mindustry.ai.types\",\"mindustry.type.weather\",\"mindustry.game.Objectives\",\"mindustry.world.blocks\",\"mindustry.world.draw\");\n  String classTemplate=\"package mindustry.mod;\\n\" + \"\\n\" + \"import arc.struct.*;\\n\"+ \"/** Generated class. Maps simple class names to concrete classes. For use in JSON mods. */\\n\"+ \"public class ClassMap{\\n\"+ \"    public static final ObjectMap<String, Class<?>> classes = new ObjectMap<>();\\n\"+ \"    \\n\"+ \"    static{\\n$CLASSES$\"+ \"    }\\n\"+ \"}\\n\";\n  StringBuilder cdef=new StringBuilder();\n  Seq<Class<?>> mapped=classes.select(c -> Modifier.isPublic(c.getModifiers()) && packages.contains(c.getCanonicalName()::startsWith)).and(Block.class);\n  for (  Class<?> c : mapped) {\n    cdef.append(\"        classes.put(\\\"\").append(c.getSimpleName()).append(\"\\\", \").append(c.getCanonicalName()).append(\".class);\\n\");\n  }\n  new Fi(\"core/src/mindustry/mod/ClassMap.java\").writeString(classTemplate.replace(\"$CLASSES$\",cdef.toString()));\n  Log.info(\"Generated @ class mappings.\",mapped.size);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 597,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 403,
        "startLineNumber" : 86,
        "startColumnNumber" : 31,
        "endLineNumber" : 95,
        "endColumnNumber" : 13
      },
      "nodeContext" : "\"package mindustry.mod;\\n\" + \"\\n\" + \"import arc.struct.*;\\n\"+ \"/** Generated class. Maps simple class names to concrete classes. For use in JSON mods. */\\n\"+ \"public class ClassMap{\\n\"+ \"    public static final ObjectMap<String, Class<?>> classes = new ObjectMap<>();\\n\"+ \"    \\n\"+ \"    static{\\n$CLASSES$\"+ \"    }\\n\"+ \"}\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 60,
    "startColumnNumber" : 22,
    "endLineNumber" : 60,
    "endColumnNumber" : 26
  }, {
    "charLength" : 4,
    "startLineNumber" : 60,
    "startColumnNumber" : 94,
    "endLineNumber" : 60,
    "endColumnNumber" : 98
  }, {
    "charLength" : 4,
    "startLineNumber" : 70,
    "startColumnNumber" : 147,
    "endLineNumber" : 70,
    "endColumnNumber" : 151
  }, {
    "charLength" : 4,
    "startLineNumber" : 87,
    "startColumnNumber" : 8,
    "endLineNumber" : 87,
    "endColumnNumber" : 12
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}