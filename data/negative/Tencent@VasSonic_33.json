{
  "id" : 33,
  "expression" : "hostname",
  "projectName" : "Tencent@VasSonic",
  "commitID" : "a3e09c156adb93b4ebe6139def465c519069aa9e",
  "filePath" : "/sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicSniSSLSocketFactory.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "hostname",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 190,
      "startColumnNumber" : 68,
      "endLineNumber" : 190,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 190,
        "startColumnNumber" : 13,
        "endLineNumber" : 190,
        "endColumnNumber" : 86
      },
      "nodeContext" : "HttpsURLConnection.getDefaultHostnameVerifier().verify(hostname,session)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 190,
        "startColumnNumber" : 12,
        "endLineNumber" : 190,
        "endColumnNumber" : 86
      },
      "nodeContext" : "!HttpsURLConnection.getDefaultHostnameVerifier().verify(hostname,session)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 284,
        "startLineNumber" : 190,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!HttpsURLConnection.getDefaultHostnameVerifier().verify(hostname,session)) {\n  SonicUtils.log(TAG,Log.ERROR,\"sonic SSL error:Cannot verify hostname\" + hostname + \")!\");\n  throw new SSLPeerUnverifiedException(\"Cannot verify hostname: \" + hostname);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 175,
        "startColumnNumber" : 89,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!(socket instanceof SSLSocket)) {\n    throw new IllegalArgumentException(\"Attempt to verify non-SSL socket\");\n  }\n  SSLSocket ssl=(SSLSocket)socket;\n  ssl.startHandshake();\n  SSLSession session=ssl.getSession();\n  if (session == null) {\n    throw new SSLException(\"Cannot verify SSL socket without session\");\n  }\n  if (!HttpsURLConnection.getDefaultHostnameVerifier().verify(hostname,session)) {\n    SonicUtils.log(TAG,Log.ERROR,\"sonic SSL error:Cannot verify hostname\" + hostname + \")!\");\n    throw new SSLPeerUnverifiedException(\"Cannot verify hostname: \" + hostname);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1714,
        "startLineNumber" : 159,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify the hostname of the certificate used by the other end of a connected socket.  You MUST call this if you did not supply a hostname to  {@link #createSocket()}.  It is harmless to call this method redundantly if the hostname has already been verified. <p>Wildcard certificates are allowed to verify any matching hostname, so \"foo.bar.example.com\" is verified if the peer has a certificate for \"*.example.com\".\n * @param socket An SSL socket which has been connected to a server\n * @param hostname The expected hostname of the remote server\n * @throws IOException if something goes wrong handshaking with the server\n * @throws SSLPeerUnverifiedException if the server cannot prove its identity\n */\npublic static void verifyHostname(Socket socket,String hostname) throws IOException {\n  if (!(socket instanceof SSLSocket)) {\n    throw new IllegalArgumentException(\"Attempt to verify non-SSL socket\");\n  }\n  SSLSocket ssl=(SSLSocket)socket;\n  ssl.startHandshake();\n  SSLSession session=ssl.getSession();\n  if (session == null) {\n    throw new SSLException(\"Cannot verify SSL socket without session\");\n  }\n  if (!HttpsURLConnection.getDefaultHostnameVerifier().verify(hostname,session)) {\n    SonicUtils.log(TAG,Log.ERROR,\"sonic SSL error:Cannot verify hostname\" + hostname + \")!\");\n    throw new SSLPeerUnverifiedException(\"Cannot verify hostname: \" + hostname);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 90,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 190,
        "startColumnNumber" : 12,
        "endLineNumber" : 190,
        "endColumnNumber" : 86
      },
      "nodeContext" : "!HttpsURLConnection.getDefaultHostnameVerifier().verify(hostname,session)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "hostname",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 191,
      "startColumnNumber" : 86,
      "endLineNumber" : 191,
      "endColumnNumber" : 94
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 191,
        "startColumnNumber" : 43,
        "endLineNumber" : 191,
        "endColumnNumber" : 101
      },
      "nodeContext" : "\"sonic SSL error:Cannot verify hostname\" + hostname + \")!\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 191,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 102
      },
      "nodeContext" : "SonicUtils.log(TAG,Log.ERROR,\"sonic SSL error:Cannot verify hostname\" + hostname + \")!\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 191,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 103
      },
      "nodeContext" : "SonicUtils.log(TAG,Log.ERROR,\"sonic SSL error:Cannot verify hostname\" + hostname + \")!\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 204,
        "startLineNumber" : 190,
        "startColumnNumber" : 88,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SonicUtils.log(TAG,Log.ERROR,\"sonic SSL error:Cannot verify hostname\" + hostname + \")!\");\n  throw new SSLPeerUnverifiedException(\"Cannot verify hostname: \" + hostname);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 284,
        "startLineNumber" : 190,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!HttpsURLConnection.getDefaultHostnameVerifier().verify(hostname,session)) {\n  SonicUtils.log(TAG,Log.ERROR,\"sonic SSL error:Cannot verify hostname\" + hostname + \")!\");\n  throw new SSLPeerUnverifiedException(\"Cannot verify hostname: \" + hostname);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 175,
        "startColumnNumber" : 89,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!(socket instanceof SSLSocket)) {\n    throw new IllegalArgumentException(\"Attempt to verify non-SSL socket\");\n  }\n  SSLSocket ssl=(SSLSocket)socket;\n  ssl.startHandshake();\n  SSLSession session=ssl.getSession();\n  if (session == null) {\n    throw new SSLException(\"Cannot verify SSL socket without session\");\n  }\n  if (!HttpsURLConnection.getDefaultHostnameVerifier().verify(hostname,session)) {\n    SonicUtils.log(TAG,Log.ERROR,\"sonic SSL error:Cannot verify hostname\" + hostname + \")!\");\n    throw new SSLPeerUnverifiedException(\"Cannot verify hostname: \" + hostname);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1714,
        "startLineNumber" : 159,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify the hostname of the certificate used by the other end of a connected socket.  You MUST call this if you did not supply a hostname to  {@link #createSocket()}.  It is harmless to call this method redundantly if the hostname has already been verified. <p>Wildcard certificates are allowed to verify any matching hostname, so \"foo.bar.example.com\" is verified if the peer has a certificate for \"*.example.com\".\n * @param socket An SSL socket which has been connected to a server\n * @param hostname The expected hostname of the remote server\n * @throws IOException if something goes wrong handshaking with the server\n * @throws SSLPeerUnverifiedException if the server cannot prove its identity\n */\npublic static void verifyHostname(Socket socket,String hostname) throws IOException {\n  if (!(socket instanceof SSLSocket)) {\n    throw new IllegalArgumentException(\"Attempt to verify non-SSL socket\");\n  }\n  SSLSocket ssl=(SSLSocket)socket;\n  ssl.startHandshake();\n  SSLSession session=ssl.getSession();\n  if (session == null) {\n    throw new SSLException(\"Cannot verify SSL socket without session\");\n  }\n  if (!HttpsURLConnection.getDefaultHostnameVerifier().verify(hostname,session)) {\n    SonicUtils.log(TAG,Log.ERROR,\"sonic SSL error:Cannot verify hostname\" + hostname + \")!\");\n    throw new SSLPeerUnverifiedException(\"Cannot verify hostname: \" + hostname);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 90,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 191,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 103
      },
      "nodeContext" : "SonicUtils.log(TAG,Log.ERROR,\"sonic SSL error:Cannot verify hostname\" + hostname + \")!\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "hostname",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 192,
      "startColumnNumber" : 78,
      "endLineNumber" : 192,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 192,
        "startColumnNumber" : 49,
        "endLineNumber" : 192,
        "endColumnNumber" : 86
      },
      "nodeContext" : "\"Cannot verify hostname: \" + hostname",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 192,
        "startColumnNumber" : 18,
        "endLineNumber" : 192,
        "endColumnNumber" : 87
      },
      "nodeContext" : "new SSLPeerUnverifiedException(\"Cannot verify hostname: \" + hostname)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 192,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 88
      },
      "nodeContext" : "throw new SSLPeerUnverifiedException(\"Cannot verify hostname: \" + hostname);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 204,
        "startLineNumber" : 190,
        "startColumnNumber" : 88,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SonicUtils.log(TAG,Log.ERROR,\"sonic SSL error:Cannot verify hostname\" + hostname + \")!\");\n  throw new SSLPeerUnverifiedException(\"Cannot verify hostname: \" + hostname);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 284,
        "startLineNumber" : 190,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!HttpsURLConnection.getDefaultHostnameVerifier().verify(hostname,session)) {\n  SonicUtils.log(TAG,Log.ERROR,\"sonic SSL error:Cannot verify hostname\" + hostname + \")!\");\n  throw new SSLPeerUnverifiedException(\"Cannot verify hostname: \" + hostname);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 175,
        "startColumnNumber" : 89,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!(socket instanceof SSLSocket)) {\n    throw new IllegalArgumentException(\"Attempt to verify non-SSL socket\");\n  }\n  SSLSocket ssl=(SSLSocket)socket;\n  ssl.startHandshake();\n  SSLSession session=ssl.getSession();\n  if (session == null) {\n    throw new SSLException(\"Cannot verify SSL socket without session\");\n  }\n  if (!HttpsURLConnection.getDefaultHostnameVerifier().verify(hostname,session)) {\n    SonicUtils.log(TAG,Log.ERROR,\"sonic SSL error:Cannot verify hostname\" + hostname + \")!\");\n    throw new SSLPeerUnverifiedException(\"Cannot verify hostname: \" + hostname);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1714,
        "startLineNumber" : 159,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify the hostname of the certificate used by the other end of a connected socket.  You MUST call this if you did not supply a hostname to  {@link #createSocket()}.  It is harmless to call this method redundantly if the hostname has already been verified. <p>Wildcard certificates are allowed to verify any matching hostname, so \"foo.bar.example.com\" is verified if the peer has a certificate for \"*.example.com\".\n * @param socket An SSL socket which has been connected to a server\n * @param hostname The expected hostname of the remote server\n * @throws IOException if something goes wrong handshaking with the server\n * @throws SSLPeerUnverifiedException if the server cannot prove its identity\n */\npublic static void verifyHostname(Socket socket,String hostname) throws IOException {\n  if (!(socket instanceof SSLSocket)) {\n    throw new IllegalArgumentException(\"Attempt to verify non-SSL socket\");\n  }\n  SSLSocket ssl=(SSLSocket)socket;\n  ssl.startHandshake();\n  SSLSession session=ssl.getSession();\n  if (session == null) {\n    throw new SSLException(\"Cannot verify SSL socket without session\");\n  }\n  if (!HttpsURLConnection.getDefaultHostnameVerifier().verify(hostname,session)) {\n    SonicUtils.log(TAG,Log.ERROR,\"sonic SSL error:Cannot verify hostname\" + hostname + \")!\");\n    throw new SSLPeerUnverifiedException(\"Cannot verify hostname: \" + hostname);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 90,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 192,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 88
      },
      "nodeContext" : "throw new SSLPeerUnverifiedException(\"Cannot verify hostname: \" + hostname);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 190,
    "startColumnNumber" : 68,
    "endLineNumber" : 190,
    "endColumnNumber" : 76
  }, {
    "charLength" : 8,
    "startLineNumber" : 191,
    "startColumnNumber" : 86,
    "endLineNumber" : 191,
    "endColumnNumber" : 94
  }, {
    "charLength" : 8,
    "startLineNumber" : 192,
    "startColumnNumber" : 78,
    "endLineNumber" : 192,
    "endColumnNumber" : 86
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}