{
  "id" : 459,
  "expression" : "contentValues",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/database/helpers/SessionStoreMigrationHelper.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "contentValues",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 76,
      "startColumnNumber" : 12,
      "endLineNumber" : 76,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 63
      },
      "nodeContext" : "contentValues.put(SessionDatabase.ADDRESS,address)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 64
      },
      "nodeContext" : "contentValues.put(SessionDatabase.ADDRESS,address);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1852,
        "startLineNumber" : 39,
        "startColumnNumber" : 14,
        "endLineNumber" : 81,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  String[] parts=sessionFile.getName().split(\"[.]\");\n  String address=parts[0];\n  int deviceId;\n  if (parts.length > 1)   deviceId=Integer.parseInt(parts[1]);\n else   deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n  FileInputStream in=new FileInputStream(sessionFile);\n  int versionMarker=readInteger(in);\n  if (versionMarker > CURRENT_VERSION) {\n    throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  byte[] serialized=readBlob(in);\n  in.close();\n  if (versionMarker < PLAINTEXT_VERSION) {\n    throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  SessionRecord sessionRecord;\n  if (versionMarker == SINGLE_STATE_VERSION) {\n    Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n    sessionRecord=new SessionRecord(serialized);\n  }\n else   if (versionMarker >= ARCHIVE_STATES_VERSION) {\n    Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n    sessionRecord=new SessionRecord(serialized);\n  }\n else {\n    throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  ContentValues contentValues=new ContentValues();\n  contentValues.put(SessionDatabase.ADDRESS,address);\n  contentValues.put(SessionDatabase.DEVICE,deviceId);\n  contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n  database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1943,
        "startLineNumber" : 39,
        "startColumnNumber" : 10,
        "endLineNumber" : 83,
        "endColumnNumber" : 11
      },
      "nodeContext" : "try {\n  String[] parts=sessionFile.getName().split(\"[.]\");\n  String address=parts[0];\n  int deviceId;\n  if (parts.length > 1)   deviceId=Integer.parseInt(parts[1]);\n else   deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n  FileInputStream in=new FileInputStream(sessionFile);\n  int versionMarker=readInteger(in);\n  if (versionMarker > CURRENT_VERSION) {\n    throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  byte[] serialized=readBlob(in);\n  in.close();\n  if (versionMarker < PLAINTEXT_VERSION) {\n    throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  SessionRecord sessionRecord;\n  if (versionMarker == SINGLE_STATE_VERSION) {\n    Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n    sessionRecord=new SessionRecord(serialized);\n  }\n else   if (versionMarker >= ARCHIVE_STATES_VERSION) {\n    Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n    sessionRecord=new SessionRecord(serialized);\n  }\n else {\n    throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  ContentValues contentValues=new ContentValues();\n  contentValues.put(SessionDatabase.ADDRESS,address);\n  contentValues.put(SessionDatabase.DEVICE,deviceId);\n  contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n  database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n}\n catch (NumberFormatException|IOException e) {\n  Log.w(TAG,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 228,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1965,
        "startLineNumber" : 38,
        "startColumnNumber" : 46,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    String[] parts=sessionFile.getName().split(\"[.]\");\n    String address=parts[0];\n    int deviceId;\n    if (parts.length > 1)     deviceId=Integer.parseInt(parts[1]);\n else     deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n    FileInputStream in=new FileInputStream(sessionFile);\n    int versionMarker=readInteger(in);\n    if (versionMarker > CURRENT_VERSION) {\n      throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    byte[] serialized=readBlob(in);\n    in.close();\n    if (versionMarker < PLAINTEXT_VERSION) {\n      throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    SessionRecord sessionRecord;\n    if (versionMarker == SINGLE_STATE_VERSION) {\n      Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n      sessionRecord=new SessionRecord(serialized);\n    }\n else     if (versionMarker >= ARCHIVE_STATES_VERSION) {\n      Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n      sessionRecord=new SessionRecord(serialized);\n    }\n else {\n      throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    ContentValues contentValues=new ContentValues();\n    contentValues.put(SessionDatabase.ADDRESS,address);\n    contentValues.put(SessionDatabase.DEVICE,deviceId);\n    contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n    database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n  }\n catch (  NumberFormatException|IOException e) {\n    Log.w(TAG,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2003,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (File sessionFile : sessionFiles) {\n  try {\n    String[] parts=sessionFile.getName().split(\"[.]\");\n    String address=parts[0];\n    int deviceId;\n    if (parts.length > 1)     deviceId=Integer.parseInt(parts[1]);\n else     deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n    FileInputStream in=new FileInputStream(sessionFile);\n    int versionMarker=readInteger(in);\n    if (versionMarker > CURRENT_VERSION) {\n      throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    byte[] serialized=readBlob(in);\n    in.close();\n    if (versionMarker < PLAINTEXT_VERSION) {\n      throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    SessionRecord sessionRecord;\n    if (versionMarker == SINGLE_STATE_VERSION) {\n      Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n      sessionRecord=new SessionRecord(serialized);\n    }\n else     if (versionMarker >= ARCHIVE_STATES_VERSION) {\n      Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n      sessionRecord=new SessionRecord(serialized);\n    }\n else {\n      throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    ContentValues contentValues=new ContentValues();\n    contentValues.put(SessionDatabase.ADDRESS,address);\n    contentValues.put(SessionDatabase.DEVICE,deviceId);\n    contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n    database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n  }\n catch (  NumberFormatException|IOException e) {\n    Log.w(TAG,e);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2021,
        "startLineNumber" : 37,
        "startColumnNumber" : 32,
        "endLineNumber" : 85,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (  File sessionFile : sessionFiles) {\n    try {\n      String[] parts=sessionFile.getName().split(\"[.]\");\n      String address=parts[0];\n      int deviceId;\n      if (parts.length > 1)       deviceId=Integer.parseInt(parts[1]);\n else       deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n      FileInputStream in=new FileInputStream(sessionFile);\n      int versionMarker=readInteger(in);\n      if (versionMarker > CURRENT_VERSION) {\n        throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      byte[] serialized=readBlob(in);\n      in.close();\n      if (versionMarker < PLAINTEXT_VERSION) {\n        throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      SessionRecord sessionRecord;\n      if (versionMarker == SINGLE_STATE_VERSION) {\n        Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n        sessionRecord=new SessionRecord(serialized);\n      }\n else       if (versionMarker >= ARCHIVE_STATES_VERSION) {\n        Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n        sessionRecord=new SessionRecord(serialized);\n      }\n else {\n        throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      ContentValues contentValues=new ContentValues();\n      contentValues.put(SessionDatabase.ADDRESS,address);\n      contentValues.put(SessionDatabase.DEVICE,deviceId);\n      contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n      database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n    }\n catch (    NumberFormatException|IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 236,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2047,
        "startLineNumber" : 37,
        "startColumnNumber" : 6,
        "endLineNumber" : 85,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (sessionFiles != null) {\n  for (  File sessionFile : sessionFiles) {\n    try {\n      String[] parts=sessionFile.getName().split(\"[.]\");\n      String address=parts[0];\n      int deviceId;\n      if (parts.length > 1)       deviceId=Integer.parseInt(parts[1]);\n else       deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n      FileInputStream in=new FileInputStream(sessionFile);\n      int versionMarker=readInteger(in);\n      if (versionMarker > CURRENT_VERSION) {\n        throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      byte[] serialized=readBlob(in);\n      in.close();\n      if (versionMarker < PLAINTEXT_VERSION) {\n        throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      SessionRecord sessionRecord;\n      if (versionMarker == SINGLE_STATE_VERSION) {\n        Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n        sessionRecord=new SessionRecord(serialized);\n      }\n else       if (versionMarker >= ARCHIVE_STATES_VERSION) {\n        Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n        sessionRecord=new SessionRecord(serialized);\n      }\n else {\n        throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      ContentValues contentValues=new ContentValues();\n      contentValues.put(SessionDatabase.ADDRESS,address);\n      contentValues.put(SessionDatabase.DEVICE,deviceId);\n      contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n      database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n    }\n catch (    NumberFormatException|IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 240,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2113,
        "startLineNumber" : 34,
        "startColumnNumber" : 28,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File[] sessionFiles=directory.listFiles();\n  if (sessionFiles != null) {\n    for (    File sessionFile : sessionFiles) {\n      try {\n        String[] parts=sessionFile.getName().split(\"[.]\");\n        String address=parts[0];\n        int deviceId;\n        if (parts.length > 1)         deviceId=Integer.parseInt(parts[1]);\n else         deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n        FileInputStream in=new FileInputStream(sessionFile);\n        int versionMarker=readInteger(in);\n        if (versionMarker > CURRENT_VERSION) {\n          throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        byte[] serialized=readBlob(in);\n        in.close();\n        if (versionMarker < PLAINTEXT_VERSION) {\n          throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        SessionRecord sessionRecord;\n        if (versionMarker == SINGLE_STATE_VERSION) {\n          Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n          sessionRecord=new SessionRecord(serialized);\n        }\n else         if (versionMarker >= ARCHIVE_STATES_VERSION) {\n          Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n          sessionRecord=new SessionRecord(serialized);\n        }\n else {\n          throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        ContentValues contentValues=new ContentValues();\n        contentValues.put(SessionDatabase.ADDRESS,address);\n        contentValues.put(SessionDatabase.DEVICE,deviceId);\n        contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n        database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n      }\n catch (      NumberFormatException|IOException e) {\n        Log.w(TAG,e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2137,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (directory.exists()) {\n  File[] sessionFiles=directory.listFiles();\n  if (sessionFiles != null) {\n    for (    File sessionFile : sessionFiles) {\n      try {\n        String[] parts=sessionFile.getName().split(\"[.]\");\n        String address=parts[0];\n        int deviceId;\n        if (parts.length > 1)         deviceId=Integer.parseInt(parts[1]);\n else         deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n        FileInputStream in=new FileInputStream(sessionFile);\n        int versionMarker=readInteger(in);\n        if (versionMarker > CURRENT_VERSION) {\n          throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        byte[] serialized=readBlob(in);\n        in.close();\n        if (versionMarker < PLAINTEXT_VERSION) {\n          throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        SessionRecord sessionRecord;\n        if (versionMarker == SINGLE_STATE_VERSION) {\n          Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n          sessionRecord=new SessionRecord(serialized);\n        }\n else         if (versionMarker >= ARCHIVE_STATES_VERSION) {\n          Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n          sessionRecord=new SessionRecord(serialized);\n        }\n else {\n          throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        ContentValues contentValues=new ContentValues();\n        contentValues.put(SessionDatabase.ADDRESS,address);\n        contentValues.put(SessionDatabase.DEVICE,deviceId);\n        contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n        database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n      }\n catch (      NumberFormatException|IOException e) {\n        Log.w(TAG,e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 255,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2225,
        "startLineNumber" : 31,
        "startColumnNumber" : 72,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  File directory=new File(context.getFilesDir(),SESSIONS_DIRECTORY_V2);\n  if (directory.exists()) {\n    File[] sessionFiles=directory.listFiles();\n    if (sessionFiles != null) {\n      for (      File sessionFile : sessionFiles) {\n        try {\n          String[] parts=sessionFile.getName().split(\"[.]\");\n          String address=parts[0];\n          int deviceId;\n          if (parts.length > 1)           deviceId=Integer.parseInt(parts[1]);\n else           deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n          FileInputStream in=new FileInputStream(sessionFile);\n          int versionMarker=readInteger(in);\n          if (versionMarker > CURRENT_VERSION) {\n            throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          byte[] serialized=readBlob(in);\n          in.close();\n          if (versionMarker < PLAINTEXT_VERSION) {\n            throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          SessionRecord sessionRecord;\n          if (versionMarker == SINGLE_STATE_VERSION) {\n            Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n            sessionRecord=new SessionRecord(serialized);\n          }\n else           if (versionMarker >= ARCHIVE_STATES_VERSION) {\n            Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n            sessionRecord=new SessionRecord(serialized);\n          }\n else {\n            throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(SessionDatabase.ADDRESS,address);\n          contentValues.put(SessionDatabase.DEVICE,deviceId);\n          contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n          database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n        }\n catch (        NumberFormatException|IOException e) {\n          Log.w(TAG,e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2295,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static void migrateSessions(Context context,SQLiteDatabase database){\n  File directory=new File(context.getFilesDir(),SESSIONS_DIRECTORY_V2);\n  if (directory.exists()) {\n    File[] sessionFiles=directory.listFiles();\n    if (sessionFiles != null) {\n      for (      File sessionFile : sessionFiles) {\n        try {\n          String[] parts=sessionFile.getName().split(\"[.]\");\n          String address=parts[0];\n          int deviceId;\n          if (parts.length > 1)           deviceId=Integer.parseInt(parts[1]);\n else           deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n          FileInputStream in=new FileInputStream(sessionFile);\n          int versionMarker=readInteger(in);\n          if (versionMarker > CURRENT_VERSION) {\n            throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          byte[] serialized=readBlob(in);\n          in.close();\n          if (versionMarker < PLAINTEXT_VERSION) {\n            throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          SessionRecord sessionRecord;\n          if (versionMarker == SINGLE_STATE_VERSION) {\n            Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n            sessionRecord=new SessionRecord(serialized);\n          }\n else           if (versionMarker >= ARCHIVE_STATES_VERSION) {\n            Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n            sessionRecord=new SessionRecord(serialized);\n          }\n else {\n            throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(SessionDatabase.ADDRESS,address);\n          contentValues.put(SessionDatabase.DEVICE,deviceId);\n          contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n          database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n        }\n catch (        NumberFormatException|IOException e) {\n          Log.w(TAG,e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 280,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 64
      },
      "nodeContext" : "contentValues.put(SessionDatabase.ADDRESS,address);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.thoughtcrime.securesms.database.helpers.ContentValues"
  }, {
    "nodeContext" : "contentValues",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 77,
      "startColumnNumber" : 12,
      "endLineNumber" : 77,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 63
      },
      "nodeContext" : "contentValues.put(SessionDatabase.DEVICE,deviceId)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 64
      },
      "nodeContext" : "contentValues.put(SessionDatabase.DEVICE,deviceId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1852,
        "startLineNumber" : 39,
        "startColumnNumber" : 14,
        "endLineNumber" : 81,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  String[] parts=sessionFile.getName().split(\"[.]\");\n  String address=parts[0];\n  int deviceId;\n  if (parts.length > 1)   deviceId=Integer.parseInt(parts[1]);\n else   deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n  FileInputStream in=new FileInputStream(sessionFile);\n  int versionMarker=readInteger(in);\n  if (versionMarker > CURRENT_VERSION) {\n    throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  byte[] serialized=readBlob(in);\n  in.close();\n  if (versionMarker < PLAINTEXT_VERSION) {\n    throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  SessionRecord sessionRecord;\n  if (versionMarker == SINGLE_STATE_VERSION) {\n    Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n    sessionRecord=new SessionRecord(serialized);\n  }\n else   if (versionMarker >= ARCHIVE_STATES_VERSION) {\n    Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n    sessionRecord=new SessionRecord(serialized);\n  }\n else {\n    throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  ContentValues contentValues=new ContentValues();\n  contentValues.put(SessionDatabase.ADDRESS,address);\n  contentValues.put(SessionDatabase.DEVICE,deviceId);\n  contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n  database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1943,
        "startLineNumber" : 39,
        "startColumnNumber" : 10,
        "endLineNumber" : 83,
        "endColumnNumber" : 11
      },
      "nodeContext" : "try {\n  String[] parts=sessionFile.getName().split(\"[.]\");\n  String address=parts[0];\n  int deviceId;\n  if (parts.length > 1)   deviceId=Integer.parseInt(parts[1]);\n else   deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n  FileInputStream in=new FileInputStream(sessionFile);\n  int versionMarker=readInteger(in);\n  if (versionMarker > CURRENT_VERSION) {\n    throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  byte[] serialized=readBlob(in);\n  in.close();\n  if (versionMarker < PLAINTEXT_VERSION) {\n    throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  SessionRecord sessionRecord;\n  if (versionMarker == SINGLE_STATE_VERSION) {\n    Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n    sessionRecord=new SessionRecord(serialized);\n  }\n else   if (versionMarker >= ARCHIVE_STATES_VERSION) {\n    Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n    sessionRecord=new SessionRecord(serialized);\n  }\n else {\n    throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  ContentValues contentValues=new ContentValues();\n  contentValues.put(SessionDatabase.ADDRESS,address);\n  contentValues.put(SessionDatabase.DEVICE,deviceId);\n  contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n  database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n}\n catch (NumberFormatException|IOException e) {\n  Log.w(TAG,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 228,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1965,
        "startLineNumber" : 38,
        "startColumnNumber" : 46,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    String[] parts=sessionFile.getName().split(\"[.]\");\n    String address=parts[0];\n    int deviceId;\n    if (parts.length > 1)     deviceId=Integer.parseInt(parts[1]);\n else     deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n    FileInputStream in=new FileInputStream(sessionFile);\n    int versionMarker=readInteger(in);\n    if (versionMarker > CURRENT_VERSION) {\n      throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    byte[] serialized=readBlob(in);\n    in.close();\n    if (versionMarker < PLAINTEXT_VERSION) {\n      throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    SessionRecord sessionRecord;\n    if (versionMarker == SINGLE_STATE_VERSION) {\n      Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n      sessionRecord=new SessionRecord(serialized);\n    }\n else     if (versionMarker >= ARCHIVE_STATES_VERSION) {\n      Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n      sessionRecord=new SessionRecord(serialized);\n    }\n else {\n      throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    ContentValues contentValues=new ContentValues();\n    contentValues.put(SessionDatabase.ADDRESS,address);\n    contentValues.put(SessionDatabase.DEVICE,deviceId);\n    contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n    database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n  }\n catch (  NumberFormatException|IOException e) {\n    Log.w(TAG,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2003,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (File sessionFile : sessionFiles) {\n  try {\n    String[] parts=sessionFile.getName().split(\"[.]\");\n    String address=parts[0];\n    int deviceId;\n    if (parts.length > 1)     deviceId=Integer.parseInt(parts[1]);\n else     deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n    FileInputStream in=new FileInputStream(sessionFile);\n    int versionMarker=readInteger(in);\n    if (versionMarker > CURRENT_VERSION) {\n      throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    byte[] serialized=readBlob(in);\n    in.close();\n    if (versionMarker < PLAINTEXT_VERSION) {\n      throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    SessionRecord sessionRecord;\n    if (versionMarker == SINGLE_STATE_VERSION) {\n      Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n      sessionRecord=new SessionRecord(serialized);\n    }\n else     if (versionMarker >= ARCHIVE_STATES_VERSION) {\n      Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n      sessionRecord=new SessionRecord(serialized);\n    }\n else {\n      throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    ContentValues contentValues=new ContentValues();\n    contentValues.put(SessionDatabase.ADDRESS,address);\n    contentValues.put(SessionDatabase.DEVICE,deviceId);\n    contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n    database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n  }\n catch (  NumberFormatException|IOException e) {\n    Log.w(TAG,e);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2021,
        "startLineNumber" : 37,
        "startColumnNumber" : 32,
        "endLineNumber" : 85,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (  File sessionFile : sessionFiles) {\n    try {\n      String[] parts=sessionFile.getName().split(\"[.]\");\n      String address=parts[0];\n      int deviceId;\n      if (parts.length > 1)       deviceId=Integer.parseInt(parts[1]);\n else       deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n      FileInputStream in=new FileInputStream(sessionFile);\n      int versionMarker=readInteger(in);\n      if (versionMarker > CURRENT_VERSION) {\n        throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      byte[] serialized=readBlob(in);\n      in.close();\n      if (versionMarker < PLAINTEXT_VERSION) {\n        throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      SessionRecord sessionRecord;\n      if (versionMarker == SINGLE_STATE_VERSION) {\n        Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n        sessionRecord=new SessionRecord(serialized);\n      }\n else       if (versionMarker >= ARCHIVE_STATES_VERSION) {\n        Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n        sessionRecord=new SessionRecord(serialized);\n      }\n else {\n        throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      ContentValues contentValues=new ContentValues();\n      contentValues.put(SessionDatabase.ADDRESS,address);\n      contentValues.put(SessionDatabase.DEVICE,deviceId);\n      contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n      database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n    }\n catch (    NumberFormatException|IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 236,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2047,
        "startLineNumber" : 37,
        "startColumnNumber" : 6,
        "endLineNumber" : 85,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (sessionFiles != null) {\n  for (  File sessionFile : sessionFiles) {\n    try {\n      String[] parts=sessionFile.getName().split(\"[.]\");\n      String address=parts[0];\n      int deviceId;\n      if (parts.length > 1)       deviceId=Integer.parseInt(parts[1]);\n else       deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n      FileInputStream in=new FileInputStream(sessionFile);\n      int versionMarker=readInteger(in);\n      if (versionMarker > CURRENT_VERSION) {\n        throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      byte[] serialized=readBlob(in);\n      in.close();\n      if (versionMarker < PLAINTEXT_VERSION) {\n        throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      SessionRecord sessionRecord;\n      if (versionMarker == SINGLE_STATE_VERSION) {\n        Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n        sessionRecord=new SessionRecord(serialized);\n      }\n else       if (versionMarker >= ARCHIVE_STATES_VERSION) {\n        Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n        sessionRecord=new SessionRecord(serialized);\n      }\n else {\n        throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      ContentValues contentValues=new ContentValues();\n      contentValues.put(SessionDatabase.ADDRESS,address);\n      contentValues.put(SessionDatabase.DEVICE,deviceId);\n      contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n      database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n    }\n catch (    NumberFormatException|IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 240,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2113,
        "startLineNumber" : 34,
        "startColumnNumber" : 28,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File[] sessionFiles=directory.listFiles();\n  if (sessionFiles != null) {\n    for (    File sessionFile : sessionFiles) {\n      try {\n        String[] parts=sessionFile.getName().split(\"[.]\");\n        String address=parts[0];\n        int deviceId;\n        if (parts.length > 1)         deviceId=Integer.parseInt(parts[1]);\n else         deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n        FileInputStream in=new FileInputStream(sessionFile);\n        int versionMarker=readInteger(in);\n        if (versionMarker > CURRENT_VERSION) {\n          throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        byte[] serialized=readBlob(in);\n        in.close();\n        if (versionMarker < PLAINTEXT_VERSION) {\n          throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        SessionRecord sessionRecord;\n        if (versionMarker == SINGLE_STATE_VERSION) {\n          Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n          sessionRecord=new SessionRecord(serialized);\n        }\n else         if (versionMarker >= ARCHIVE_STATES_VERSION) {\n          Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n          sessionRecord=new SessionRecord(serialized);\n        }\n else {\n          throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        ContentValues contentValues=new ContentValues();\n        contentValues.put(SessionDatabase.ADDRESS,address);\n        contentValues.put(SessionDatabase.DEVICE,deviceId);\n        contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n        database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n      }\n catch (      NumberFormatException|IOException e) {\n        Log.w(TAG,e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2137,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (directory.exists()) {\n  File[] sessionFiles=directory.listFiles();\n  if (sessionFiles != null) {\n    for (    File sessionFile : sessionFiles) {\n      try {\n        String[] parts=sessionFile.getName().split(\"[.]\");\n        String address=parts[0];\n        int deviceId;\n        if (parts.length > 1)         deviceId=Integer.parseInt(parts[1]);\n else         deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n        FileInputStream in=new FileInputStream(sessionFile);\n        int versionMarker=readInteger(in);\n        if (versionMarker > CURRENT_VERSION) {\n          throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        byte[] serialized=readBlob(in);\n        in.close();\n        if (versionMarker < PLAINTEXT_VERSION) {\n          throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        SessionRecord sessionRecord;\n        if (versionMarker == SINGLE_STATE_VERSION) {\n          Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n          sessionRecord=new SessionRecord(serialized);\n        }\n else         if (versionMarker >= ARCHIVE_STATES_VERSION) {\n          Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n          sessionRecord=new SessionRecord(serialized);\n        }\n else {\n          throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        ContentValues contentValues=new ContentValues();\n        contentValues.put(SessionDatabase.ADDRESS,address);\n        contentValues.put(SessionDatabase.DEVICE,deviceId);\n        contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n        database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n      }\n catch (      NumberFormatException|IOException e) {\n        Log.w(TAG,e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 255,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2225,
        "startLineNumber" : 31,
        "startColumnNumber" : 72,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  File directory=new File(context.getFilesDir(),SESSIONS_DIRECTORY_V2);\n  if (directory.exists()) {\n    File[] sessionFiles=directory.listFiles();\n    if (sessionFiles != null) {\n      for (      File sessionFile : sessionFiles) {\n        try {\n          String[] parts=sessionFile.getName().split(\"[.]\");\n          String address=parts[0];\n          int deviceId;\n          if (parts.length > 1)           deviceId=Integer.parseInt(parts[1]);\n else           deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n          FileInputStream in=new FileInputStream(sessionFile);\n          int versionMarker=readInteger(in);\n          if (versionMarker > CURRENT_VERSION) {\n            throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          byte[] serialized=readBlob(in);\n          in.close();\n          if (versionMarker < PLAINTEXT_VERSION) {\n            throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          SessionRecord sessionRecord;\n          if (versionMarker == SINGLE_STATE_VERSION) {\n            Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n            sessionRecord=new SessionRecord(serialized);\n          }\n else           if (versionMarker >= ARCHIVE_STATES_VERSION) {\n            Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n            sessionRecord=new SessionRecord(serialized);\n          }\n else {\n            throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(SessionDatabase.ADDRESS,address);\n          contentValues.put(SessionDatabase.DEVICE,deviceId);\n          contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n          database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n        }\n catch (        NumberFormatException|IOException e) {\n          Log.w(TAG,e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2295,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static void migrateSessions(Context context,SQLiteDatabase database){\n  File directory=new File(context.getFilesDir(),SESSIONS_DIRECTORY_V2);\n  if (directory.exists()) {\n    File[] sessionFiles=directory.listFiles();\n    if (sessionFiles != null) {\n      for (      File sessionFile : sessionFiles) {\n        try {\n          String[] parts=sessionFile.getName().split(\"[.]\");\n          String address=parts[0];\n          int deviceId;\n          if (parts.length > 1)           deviceId=Integer.parseInt(parts[1]);\n else           deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n          FileInputStream in=new FileInputStream(sessionFile);\n          int versionMarker=readInteger(in);\n          if (versionMarker > CURRENT_VERSION) {\n            throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          byte[] serialized=readBlob(in);\n          in.close();\n          if (versionMarker < PLAINTEXT_VERSION) {\n            throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          SessionRecord sessionRecord;\n          if (versionMarker == SINGLE_STATE_VERSION) {\n            Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n            sessionRecord=new SessionRecord(serialized);\n          }\n else           if (versionMarker >= ARCHIVE_STATES_VERSION) {\n            Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n            sessionRecord=new SessionRecord(serialized);\n          }\n else {\n            throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(SessionDatabase.ADDRESS,address);\n          contentValues.put(SessionDatabase.DEVICE,deviceId);\n          contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n          database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n        }\n catch (        NumberFormatException|IOException e) {\n          Log.w(TAG,e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 280,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 64
      },
      "nodeContext" : "contentValues.put(SessionDatabase.DEVICE,deviceId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.thoughtcrime.securesms.database.helpers.ContentValues"
  }, {
    "nodeContext" : "contentValues",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 78,
      "startColumnNumber" : 12,
      "endLineNumber" : 78,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 80
      },
      "nodeContext" : "contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 81
      },
      "nodeContext" : "contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1852,
        "startLineNumber" : 39,
        "startColumnNumber" : 14,
        "endLineNumber" : 81,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  String[] parts=sessionFile.getName().split(\"[.]\");\n  String address=parts[0];\n  int deviceId;\n  if (parts.length > 1)   deviceId=Integer.parseInt(parts[1]);\n else   deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n  FileInputStream in=new FileInputStream(sessionFile);\n  int versionMarker=readInteger(in);\n  if (versionMarker > CURRENT_VERSION) {\n    throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  byte[] serialized=readBlob(in);\n  in.close();\n  if (versionMarker < PLAINTEXT_VERSION) {\n    throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  SessionRecord sessionRecord;\n  if (versionMarker == SINGLE_STATE_VERSION) {\n    Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n    sessionRecord=new SessionRecord(serialized);\n  }\n else   if (versionMarker >= ARCHIVE_STATES_VERSION) {\n    Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n    sessionRecord=new SessionRecord(serialized);\n  }\n else {\n    throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  ContentValues contentValues=new ContentValues();\n  contentValues.put(SessionDatabase.ADDRESS,address);\n  contentValues.put(SessionDatabase.DEVICE,deviceId);\n  contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n  database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1943,
        "startLineNumber" : 39,
        "startColumnNumber" : 10,
        "endLineNumber" : 83,
        "endColumnNumber" : 11
      },
      "nodeContext" : "try {\n  String[] parts=sessionFile.getName().split(\"[.]\");\n  String address=parts[0];\n  int deviceId;\n  if (parts.length > 1)   deviceId=Integer.parseInt(parts[1]);\n else   deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n  FileInputStream in=new FileInputStream(sessionFile);\n  int versionMarker=readInteger(in);\n  if (versionMarker > CURRENT_VERSION) {\n    throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  byte[] serialized=readBlob(in);\n  in.close();\n  if (versionMarker < PLAINTEXT_VERSION) {\n    throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  SessionRecord sessionRecord;\n  if (versionMarker == SINGLE_STATE_VERSION) {\n    Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n    sessionRecord=new SessionRecord(serialized);\n  }\n else   if (versionMarker >= ARCHIVE_STATES_VERSION) {\n    Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n    sessionRecord=new SessionRecord(serialized);\n  }\n else {\n    throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  ContentValues contentValues=new ContentValues();\n  contentValues.put(SessionDatabase.ADDRESS,address);\n  contentValues.put(SessionDatabase.DEVICE,deviceId);\n  contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n  database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n}\n catch (NumberFormatException|IOException e) {\n  Log.w(TAG,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 228,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1965,
        "startLineNumber" : 38,
        "startColumnNumber" : 46,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    String[] parts=sessionFile.getName().split(\"[.]\");\n    String address=parts[0];\n    int deviceId;\n    if (parts.length > 1)     deviceId=Integer.parseInt(parts[1]);\n else     deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n    FileInputStream in=new FileInputStream(sessionFile);\n    int versionMarker=readInteger(in);\n    if (versionMarker > CURRENT_VERSION) {\n      throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    byte[] serialized=readBlob(in);\n    in.close();\n    if (versionMarker < PLAINTEXT_VERSION) {\n      throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    SessionRecord sessionRecord;\n    if (versionMarker == SINGLE_STATE_VERSION) {\n      Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n      sessionRecord=new SessionRecord(serialized);\n    }\n else     if (versionMarker >= ARCHIVE_STATES_VERSION) {\n      Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n      sessionRecord=new SessionRecord(serialized);\n    }\n else {\n      throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    ContentValues contentValues=new ContentValues();\n    contentValues.put(SessionDatabase.ADDRESS,address);\n    contentValues.put(SessionDatabase.DEVICE,deviceId);\n    contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n    database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n  }\n catch (  NumberFormatException|IOException e) {\n    Log.w(TAG,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2003,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (File sessionFile : sessionFiles) {\n  try {\n    String[] parts=sessionFile.getName().split(\"[.]\");\n    String address=parts[0];\n    int deviceId;\n    if (parts.length > 1)     deviceId=Integer.parseInt(parts[1]);\n else     deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n    FileInputStream in=new FileInputStream(sessionFile);\n    int versionMarker=readInteger(in);\n    if (versionMarker > CURRENT_VERSION) {\n      throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    byte[] serialized=readBlob(in);\n    in.close();\n    if (versionMarker < PLAINTEXT_VERSION) {\n      throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    SessionRecord sessionRecord;\n    if (versionMarker == SINGLE_STATE_VERSION) {\n      Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n      sessionRecord=new SessionRecord(serialized);\n    }\n else     if (versionMarker >= ARCHIVE_STATES_VERSION) {\n      Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n      sessionRecord=new SessionRecord(serialized);\n    }\n else {\n      throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    ContentValues contentValues=new ContentValues();\n    contentValues.put(SessionDatabase.ADDRESS,address);\n    contentValues.put(SessionDatabase.DEVICE,deviceId);\n    contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n    database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n  }\n catch (  NumberFormatException|IOException e) {\n    Log.w(TAG,e);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2021,
        "startLineNumber" : 37,
        "startColumnNumber" : 32,
        "endLineNumber" : 85,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (  File sessionFile : sessionFiles) {\n    try {\n      String[] parts=sessionFile.getName().split(\"[.]\");\n      String address=parts[0];\n      int deviceId;\n      if (parts.length > 1)       deviceId=Integer.parseInt(parts[1]);\n else       deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n      FileInputStream in=new FileInputStream(sessionFile);\n      int versionMarker=readInteger(in);\n      if (versionMarker > CURRENT_VERSION) {\n        throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      byte[] serialized=readBlob(in);\n      in.close();\n      if (versionMarker < PLAINTEXT_VERSION) {\n        throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      SessionRecord sessionRecord;\n      if (versionMarker == SINGLE_STATE_VERSION) {\n        Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n        sessionRecord=new SessionRecord(serialized);\n      }\n else       if (versionMarker >= ARCHIVE_STATES_VERSION) {\n        Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n        sessionRecord=new SessionRecord(serialized);\n      }\n else {\n        throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      ContentValues contentValues=new ContentValues();\n      contentValues.put(SessionDatabase.ADDRESS,address);\n      contentValues.put(SessionDatabase.DEVICE,deviceId);\n      contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n      database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n    }\n catch (    NumberFormatException|IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 236,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2047,
        "startLineNumber" : 37,
        "startColumnNumber" : 6,
        "endLineNumber" : 85,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (sessionFiles != null) {\n  for (  File sessionFile : sessionFiles) {\n    try {\n      String[] parts=sessionFile.getName().split(\"[.]\");\n      String address=parts[0];\n      int deviceId;\n      if (parts.length > 1)       deviceId=Integer.parseInt(parts[1]);\n else       deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n      FileInputStream in=new FileInputStream(sessionFile);\n      int versionMarker=readInteger(in);\n      if (versionMarker > CURRENT_VERSION) {\n        throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      byte[] serialized=readBlob(in);\n      in.close();\n      if (versionMarker < PLAINTEXT_VERSION) {\n        throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      SessionRecord sessionRecord;\n      if (versionMarker == SINGLE_STATE_VERSION) {\n        Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n        sessionRecord=new SessionRecord(serialized);\n      }\n else       if (versionMarker >= ARCHIVE_STATES_VERSION) {\n        Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n        sessionRecord=new SessionRecord(serialized);\n      }\n else {\n        throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      ContentValues contentValues=new ContentValues();\n      contentValues.put(SessionDatabase.ADDRESS,address);\n      contentValues.put(SessionDatabase.DEVICE,deviceId);\n      contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n      database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n    }\n catch (    NumberFormatException|IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 240,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2113,
        "startLineNumber" : 34,
        "startColumnNumber" : 28,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File[] sessionFiles=directory.listFiles();\n  if (sessionFiles != null) {\n    for (    File sessionFile : sessionFiles) {\n      try {\n        String[] parts=sessionFile.getName().split(\"[.]\");\n        String address=parts[0];\n        int deviceId;\n        if (parts.length > 1)         deviceId=Integer.parseInt(parts[1]);\n else         deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n        FileInputStream in=new FileInputStream(sessionFile);\n        int versionMarker=readInteger(in);\n        if (versionMarker > CURRENT_VERSION) {\n          throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        byte[] serialized=readBlob(in);\n        in.close();\n        if (versionMarker < PLAINTEXT_VERSION) {\n          throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        SessionRecord sessionRecord;\n        if (versionMarker == SINGLE_STATE_VERSION) {\n          Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n          sessionRecord=new SessionRecord(serialized);\n        }\n else         if (versionMarker >= ARCHIVE_STATES_VERSION) {\n          Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n          sessionRecord=new SessionRecord(serialized);\n        }\n else {\n          throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        ContentValues contentValues=new ContentValues();\n        contentValues.put(SessionDatabase.ADDRESS,address);\n        contentValues.put(SessionDatabase.DEVICE,deviceId);\n        contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n        database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n      }\n catch (      NumberFormatException|IOException e) {\n        Log.w(TAG,e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2137,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (directory.exists()) {\n  File[] sessionFiles=directory.listFiles();\n  if (sessionFiles != null) {\n    for (    File sessionFile : sessionFiles) {\n      try {\n        String[] parts=sessionFile.getName().split(\"[.]\");\n        String address=parts[0];\n        int deviceId;\n        if (parts.length > 1)         deviceId=Integer.parseInt(parts[1]);\n else         deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n        FileInputStream in=new FileInputStream(sessionFile);\n        int versionMarker=readInteger(in);\n        if (versionMarker > CURRENT_VERSION) {\n          throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        byte[] serialized=readBlob(in);\n        in.close();\n        if (versionMarker < PLAINTEXT_VERSION) {\n          throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        SessionRecord sessionRecord;\n        if (versionMarker == SINGLE_STATE_VERSION) {\n          Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n          sessionRecord=new SessionRecord(serialized);\n        }\n else         if (versionMarker >= ARCHIVE_STATES_VERSION) {\n          Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n          sessionRecord=new SessionRecord(serialized);\n        }\n else {\n          throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        ContentValues contentValues=new ContentValues();\n        contentValues.put(SessionDatabase.ADDRESS,address);\n        contentValues.put(SessionDatabase.DEVICE,deviceId);\n        contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n        database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n      }\n catch (      NumberFormatException|IOException e) {\n        Log.w(TAG,e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 255,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2225,
        "startLineNumber" : 31,
        "startColumnNumber" : 72,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  File directory=new File(context.getFilesDir(),SESSIONS_DIRECTORY_V2);\n  if (directory.exists()) {\n    File[] sessionFiles=directory.listFiles();\n    if (sessionFiles != null) {\n      for (      File sessionFile : sessionFiles) {\n        try {\n          String[] parts=sessionFile.getName().split(\"[.]\");\n          String address=parts[0];\n          int deviceId;\n          if (parts.length > 1)           deviceId=Integer.parseInt(parts[1]);\n else           deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n          FileInputStream in=new FileInputStream(sessionFile);\n          int versionMarker=readInteger(in);\n          if (versionMarker > CURRENT_VERSION) {\n            throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          byte[] serialized=readBlob(in);\n          in.close();\n          if (versionMarker < PLAINTEXT_VERSION) {\n            throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          SessionRecord sessionRecord;\n          if (versionMarker == SINGLE_STATE_VERSION) {\n            Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n            sessionRecord=new SessionRecord(serialized);\n          }\n else           if (versionMarker >= ARCHIVE_STATES_VERSION) {\n            Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n            sessionRecord=new SessionRecord(serialized);\n          }\n else {\n            throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(SessionDatabase.ADDRESS,address);\n          contentValues.put(SessionDatabase.DEVICE,deviceId);\n          contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n          database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n        }\n catch (        NumberFormatException|IOException e) {\n          Log.w(TAG,e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2295,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static void migrateSessions(Context context,SQLiteDatabase database){\n  File directory=new File(context.getFilesDir(),SESSIONS_DIRECTORY_V2);\n  if (directory.exists()) {\n    File[] sessionFiles=directory.listFiles();\n    if (sessionFiles != null) {\n      for (      File sessionFile : sessionFiles) {\n        try {\n          String[] parts=sessionFile.getName().split(\"[.]\");\n          String address=parts[0];\n          int deviceId;\n          if (parts.length > 1)           deviceId=Integer.parseInt(parts[1]);\n else           deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n          FileInputStream in=new FileInputStream(sessionFile);\n          int versionMarker=readInteger(in);\n          if (versionMarker > CURRENT_VERSION) {\n            throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          byte[] serialized=readBlob(in);\n          in.close();\n          if (versionMarker < PLAINTEXT_VERSION) {\n            throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          SessionRecord sessionRecord;\n          if (versionMarker == SINGLE_STATE_VERSION) {\n            Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n            sessionRecord=new SessionRecord(serialized);\n          }\n else           if (versionMarker >= ARCHIVE_STATES_VERSION) {\n            Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n            sessionRecord=new SessionRecord(serialized);\n          }\n else {\n            throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(SessionDatabase.ADDRESS,address);\n          contentValues.put(SessionDatabase.DEVICE,deviceId);\n          contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n          database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n        }\n catch (        NumberFormatException|IOException e) {\n          Log.w(TAG,e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 280,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 81
      },
      "nodeContext" : "contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.thoughtcrime.securesms.database.helpers.ContentValues"
  }, {
    "nodeContext" : "contentValues",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 80,
      "startColumnNumber" : 62,
      "endLineNumber" : 80,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 76
      },
      "nodeContext" : "database.insert(SessionDatabase.TABLE_NAME,null,contentValues)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 77
      },
      "nodeContext" : "database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1852,
        "startLineNumber" : 39,
        "startColumnNumber" : 14,
        "endLineNumber" : 81,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  String[] parts=sessionFile.getName().split(\"[.]\");\n  String address=parts[0];\n  int deviceId;\n  if (parts.length > 1)   deviceId=Integer.parseInt(parts[1]);\n else   deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n  FileInputStream in=new FileInputStream(sessionFile);\n  int versionMarker=readInteger(in);\n  if (versionMarker > CURRENT_VERSION) {\n    throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  byte[] serialized=readBlob(in);\n  in.close();\n  if (versionMarker < PLAINTEXT_VERSION) {\n    throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  SessionRecord sessionRecord;\n  if (versionMarker == SINGLE_STATE_VERSION) {\n    Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n    sessionRecord=new SessionRecord(serialized);\n  }\n else   if (versionMarker >= ARCHIVE_STATES_VERSION) {\n    Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n    sessionRecord=new SessionRecord(serialized);\n  }\n else {\n    throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  ContentValues contentValues=new ContentValues();\n  contentValues.put(SessionDatabase.ADDRESS,address);\n  contentValues.put(SessionDatabase.DEVICE,deviceId);\n  contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n  database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1943,
        "startLineNumber" : 39,
        "startColumnNumber" : 10,
        "endLineNumber" : 83,
        "endColumnNumber" : 11
      },
      "nodeContext" : "try {\n  String[] parts=sessionFile.getName().split(\"[.]\");\n  String address=parts[0];\n  int deviceId;\n  if (parts.length > 1)   deviceId=Integer.parseInt(parts[1]);\n else   deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n  FileInputStream in=new FileInputStream(sessionFile);\n  int versionMarker=readInteger(in);\n  if (versionMarker > CURRENT_VERSION) {\n    throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  byte[] serialized=readBlob(in);\n  in.close();\n  if (versionMarker < PLAINTEXT_VERSION) {\n    throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  SessionRecord sessionRecord;\n  if (versionMarker == SINGLE_STATE_VERSION) {\n    Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n    sessionRecord=new SessionRecord(serialized);\n  }\n else   if (versionMarker >= ARCHIVE_STATES_VERSION) {\n    Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n    sessionRecord=new SessionRecord(serialized);\n  }\n else {\n    throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n  }\n  ContentValues contentValues=new ContentValues();\n  contentValues.put(SessionDatabase.ADDRESS,address);\n  contentValues.put(SessionDatabase.DEVICE,deviceId);\n  contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n  database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n}\n catch (NumberFormatException|IOException e) {\n  Log.w(TAG,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 228,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1965,
        "startLineNumber" : 38,
        "startColumnNumber" : 46,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    String[] parts=sessionFile.getName().split(\"[.]\");\n    String address=parts[0];\n    int deviceId;\n    if (parts.length > 1)     deviceId=Integer.parseInt(parts[1]);\n else     deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n    FileInputStream in=new FileInputStream(sessionFile);\n    int versionMarker=readInteger(in);\n    if (versionMarker > CURRENT_VERSION) {\n      throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    byte[] serialized=readBlob(in);\n    in.close();\n    if (versionMarker < PLAINTEXT_VERSION) {\n      throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    SessionRecord sessionRecord;\n    if (versionMarker == SINGLE_STATE_VERSION) {\n      Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n      sessionRecord=new SessionRecord(serialized);\n    }\n else     if (versionMarker >= ARCHIVE_STATES_VERSION) {\n      Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n      sessionRecord=new SessionRecord(serialized);\n    }\n else {\n      throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    ContentValues contentValues=new ContentValues();\n    contentValues.put(SessionDatabase.ADDRESS,address);\n    contentValues.put(SessionDatabase.DEVICE,deviceId);\n    contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n    database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n  }\n catch (  NumberFormatException|IOException e) {\n    Log.w(TAG,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2003,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (File sessionFile : sessionFiles) {\n  try {\n    String[] parts=sessionFile.getName().split(\"[.]\");\n    String address=parts[0];\n    int deviceId;\n    if (parts.length > 1)     deviceId=Integer.parseInt(parts[1]);\n else     deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n    FileInputStream in=new FileInputStream(sessionFile);\n    int versionMarker=readInteger(in);\n    if (versionMarker > CURRENT_VERSION) {\n      throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    byte[] serialized=readBlob(in);\n    in.close();\n    if (versionMarker < PLAINTEXT_VERSION) {\n      throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    SessionRecord sessionRecord;\n    if (versionMarker == SINGLE_STATE_VERSION) {\n      Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n      sessionRecord=new SessionRecord(serialized);\n    }\n else     if (versionMarker >= ARCHIVE_STATES_VERSION) {\n      Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n      sessionRecord=new SessionRecord(serialized);\n    }\n else {\n      throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n    }\n    ContentValues contentValues=new ContentValues();\n    contentValues.put(SessionDatabase.ADDRESS,address);\n    contentValues.put(SessionDatabase.DEVICE,deviceId);\n    contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n    database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n  }\n catch (  NumberFormatException|IOException e) {\n    Log.w(TAG,e);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2021,
        "startLineNumber" : 37,
        "startColumnNumber" : 32,
        "endLineNumber" : 85,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (  File sessionFile : sessionFiles) {\n    try {\n      String[] parts=sessionFile.getName().split(\"[.]\");\n      String address=parts[0];\n      int deviceId;\n      if (parts.length > 1)       deviceId=Integer.parseInt(parts[1]);\n else       deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n      FileInputStream in=new FileInputStream(sessionFile);\n      int versionMarker=readInteger(in);\n      if (versionMarker > CURRENT_VERSION) {\n        throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      byte[] serialized=readBlob(in);\n      in.close();\n      if (versionMarker < PLAINTEXT_VERSION) {\n        throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      SessionRecord sessionRecord;\n      if (versionMarker == SINGLE_STATE_VERSION) {\n        Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n        sessionRecord=new SessionRecord(serialized);\n      }\n else       if (versionMarker >= ARCHIVE_STATES_VERSION) {\n        Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n        sessionRecord=new SessionRecord(serialized);\n      }\n else {\n        throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      ContentValues contentValues=new ContentValues();\n      contentValues.put(SessionDatabase.ADDRESS,address);\n      contentValues.put(SessionDatabase.DEVICE,deviceId);\n      contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n      database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n    }\n catch (    NumberFormatException|IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 236,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2047,
        "startLineNumber" : 37,
        "startColumnNumber" : 6,
        "endLineNumber" : 85,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (sessionFiles != null) {\n  for (  File sessionFile : sessionFiles) {\n    try {\n      String[] parts=sessionFile.getName().split(\"[.]\");\n      String address=parts[0];\n      int deviceId;\n      if (parts.length > 1)       deviceId=Integer.parseInt(parts[1]);\n else       deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n      FileInputStream in=new FileInputStream(sessionFile);\n      int versionMarker=readInteger(in);\n      if (versionMarker > CURRENT_VERSION) {\n        throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      byte[] serialized=readBlob(in);\n      in.close();\n      if (versionMarker < PLAINTEXT_VERSION) {\n        throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      SessionRecord sessionRecord;\n      if (versionMarker == SINGLE_STATE_VERSION) {\n        Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n        sessionRecord=new SessionRecord(serialized);\n      }\n else       if (versionMarker >= ARCHIVE_STATES_VERSION) {\n        Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n        sessionRecord=new SessionRecord(serialized);\n      }\n else {\n        throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n      }\n      ContentValues contentValues=new ContentValues();\n      contentValues.put(SessionDatabase.ADDRESS,address);\n      contentValues.put(SessionDatabase.DEVICE,deviceId);\n      contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n      database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n    }\n catch (    NumberFormatException|IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 240,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2113,
        "startLineNumber" : 34,
        "startColumnNumber" : 28,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File[] sessionFiles=directory.listFiles();\n  if (sessionFiles != null) {\n    for (    File sessionFile : sessionFiles) {\n      try {\n        String[] parts=sessionFile.getName().split(\"[.]\");\n        String address=parts[0];\n        int deviceId;\n        if (parts.length > 1)         deviceId=Integer.parseInt(parts[1]);\n else         deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n        FileInputStream in=new FileInputStream(sessionFile);\n        int versionMarker=readInteger(in);\n        if (versionMarker > CURRENT_VERSION) {\n          throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        byte[] serialized=readBlob(in);\n        in.close();\n        if (versionMarker < PLAINTEXT_VERSION) {\n          throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        SessionRecord sessionRecord;\n        if (versionMarker == SINGLE_STATE_VERSION) {\n          Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n          sessionRecord=new SessionRecord(serialized);\n        }\n else         if (versionMarker >= ARCHIVE_STATES_VERSION) {\n          Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n          sessionRecord=new SessionRecord(serialized);\n        }\n else {\n          throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        ContentValues contentValues=new ContentValues();\n        contentValues.put(SessionDatabase.ADDRESS,address);\n        contentValues.put(SessionDatabase.DEVICE,deviceId);\n        contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n        database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n      }\n catch (      NumberFormatException|IOException e) {\n        Log.w(TAG,e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2137,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (directory.exists()) {\n  File[] sessionFiles=directory.listFiles();\n  if (sessionFiles != null) {\n    for (    File sessionFile : sessionFiles) {\n      try {\n        String[] parts=sessionFile.getName().split(\"[.]\");\n        String address=parts[0];\n        int deviceId;\n        if (parts.length > 1)         deviceId=Integer.parseInt(parts[1]);\n else         deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n        FileInputStream in=new FileInputStream(sessionFile);\n        int versionMarker=readInteger(in);\n        if (versionMarker > CURRENT_VERSION) {\n          throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        byte[] serialized=readBlob(in);\n        in.close();\n        if (versionMarker < PLAINTEXT_VERSION) {\n          throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        SessionRecord sessionRecord;\n        if (versionMarker == SINGLE_STATE_VERSION) {\n          Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n          sessionRecord=new SessionRecord(serialized);\n        }\n else         if (versionMarker >= ARCHIVE_STATES_VERSION) {\n          Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n          sessionRecord=new SessionRecord(serialized);\n        }\n else {\n          throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n        }\n        ContentValues contentValues=new ContentValues();\n        contentValues.put(SessionDatabase.ADDRESS,address);\n        contentValues.put(SessionDatabase.DEVICE,deviceId);\n        contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n        database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n      }\n catch (      NumberFormatException|IOException e) {\n        Log.w(TAG,e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 255,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2225,
        "startLineNumber" : 31,
        "startColumnNumber" : 72,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  File directory=new File(context.getFilesDir(),SESSIONS_DIRECTORY_V2);\n  if (directory.exists()) {\n    File[] sessionFiles=directory.listFiles();\n    if (sessionFiles != null) {\n      for (      File sessionFile : sessionFiles) {\n        try {\n          String[] parts=sessionFile.getName().split(\"[.]\");\n          String address=parts[0];\n          int deviceId;\n          if (parts.length > 1)           deviceId=Integer.parseInt(parts[1]);\n else           deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n          FileInputStream in=new FileInputStream(sessionFile);\n          int versionMarker=readInteger(in);\n          if (versionMarker > CURRENT_VERSION) {\n            throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          byte[] serialized=readBlob(in);\n          in.close();\n          if (versionMarker < PLAINTEXT_VERSION) {\n            throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          SessionRecord sessionRecord;\n          if (versionMarker == SINGLE_STATE_VERSION) {\n            Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n            sessionRecord=new SessionRecord(serialized);\n          }\n else           if (versionMarker >= ARCHIVE_STATES_VERSION) {\n            Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n            sessionRecord=new SessionRecord(serialized);\n          }\n else {\n            throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(SessionDatabase.ADDRESS,address);\n          contentValues.put(SessionDatabase.DEVICE,deviceId);\n          contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n          database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n        }\n catch (        NumberFormatException|IOException e) {\n          Log.w(TAG,e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2295,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static void migrateSessions(Context context,SQLiteDatabase database){\n  File directory=new File(context.getFilesDir(),SESSIONS_DIRECTORY_V2);\n  if (directory.exists()) {\n    File[] sessionFiles=directory.listFiles();\n    if (sessionFiles != null) {\n      for (      File sessionFile : sessionFiles) {\n        try {\n          String[] parts=sessionFile.getName().split(\"[.]\");\n          String address=parts[0];\n          int deviceId;\n          if (parts.length > 1)           deviceId=Integer.parseInt(parts[1]);\n else           deviceId=SignalServiceAddress.DEFAULT_DEVICE_ID;\n          FileInputStream in=new FileInputStream(sessionFile);\n          int versionMarker=readInteger(in);\n          if (versionMarker > CURRENT_VERSION) {\n            throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          byte[] serialized=readBlob(in);\n          in.close();\n          if (versionMarker < PLAINTEXT_VERSION) {\n            throw new AssertionError(\"Not plaintext: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          SessionRecord sessionRecord;\n          if (versionMarker == SINGLE_STATE_VERSION) {\n            Log.i(TAG,\"Migrating single state version: \" + sessionFile.getAbsolutePath());\n            sessionRecord=new SessionRecord(serialized);\n          }\n else           if (versionMarker >= ARCHIVE_STATES_VERSION) {\n            Log.i(TAG,\"Migrating session: \" + sessionFile.getAbsolutePath());\n            sessionRecord=new SessionRecord(serialized);\n          }\n else {\n            throw new AssertionError(\"Unknown version: \" + versionMarker + \", \"+ sessionFile.getAbsolutePath());\n          }\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(SessionDatabase.ADDRESS,address);\n          contentValues.put(SessionDatabase.DEVICE,deviceId);\n          contentValues.put(SessionDatabase.RECORD,sessionRecord.serialize());\n          database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n        }\n catch (        NumberFormatException|IOException e) {\n          Log.w(TAG,e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 280,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 77
      },
      "nodeContext" : "database.insert(SessionDatabase.TABLE_NAME,null,contentValues);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.thoughtcrime.securesms.database.helpers.ContentValues"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 76,
    "startColumnNumber" : 12,
    "endLineNumber" : 76,
    "endColumnNumber" : 25
  }, {
    "charLength" : 13,
    "startLineNumber" : 77,
    "startColumnNumber" : 12,
    "endLineNumber" : 77,
    "endColumnNumber" : 25
  }, {
    "charLength" : 13,
    "startLineNumber" : 78,
    "startColumnNumber" : 12,
    "endLineNumber" : 78,
    "endColumnNumber" : 25
  }, {
    "charLength" : 13,
    "startLineNumber" : 80,
    "startColumnNumber" : 62,
    "endLineNumber" : 80,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}