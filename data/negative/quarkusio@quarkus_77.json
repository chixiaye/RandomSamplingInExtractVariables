{
  "id" : 77,
  "expression" : "new Component(ComponentType.SUBSCRIBER,asMethod(mediator.methodAsString()))",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/extensions/smallrye-reactive-messaging/runtime/src/main/java/io/quarkus/smallrye/reactivemessaging/runtime/devconsole/DevReactiveMessagingInfos.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Component(ComponentType.SUBSCRIBER,asMethod(mediator.methodAsString()))",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 120,
      "startLineNumber" : 81,
      "startColumnNumber" : 41,
      "endLineNumber" : 82,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 11,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 80,
        "startColumnNumber" : 28,
        "endLineNumber" : 82,
        "endColumnNumber" : 81
      },
      "nodeContext" : "consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.SUBSCRIBER,asMethod(mediator.methodAsString())))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 204,
        "startLineNumber" : 80,
        "startColumnNumber" : 28,
        "endLineNumber" : 82,
        "endColumnNumber" : 82
      },
      "nodeContext" : "consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.SUBSCRIBER,asMethod(mediator.methodAsString())));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 260,
        "startLineNumber" : 79,
        "startColumnNumber" : 71,
        "endLineNumber" : 83,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.SUBSCRIBER,asMethod(mediator.methodAsString())));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 307,
        "startLineNumber" : 79,
        "startColumnNumber" : 24,
        "endLineNumber" : 83,
        "endColumnNumber" : 25
      },
      "nodeContext" : "for (String incoming : mediator.getIncoming()) {\n  consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.SUBSCRIBER,asMethod(mediator.methodAsString())));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 355,
        "startLineNumber" : 78,
        "startColumnNumber" : 66,
        "endLineNumber" : 84,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  for (  String incoming : mediator.getIncoming()) {\n    consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.SUBSCRIBER,asMethod(mediator.methodAsString())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 394,
        "startLineNumber" : 78,
        "startColumnNumber" : 27,
        "endLineNumber" : 84,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!mediator.getIncoming().isEmpty()) {\n  for (  String incoming : mediator.getIncoming()) {\n    consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.SUBSCRIBER,asMethod(mediator.methodAsString())));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 70,
        "startColumnNumber" : 27,
        "endLineNumber" : 84,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (mediator.getOutgoing() != null) {\n  StringBuilder builder=new StringBuilder();\n  builder.append(asMethod(mediator.methodAsString()));\n  if (mediator.getBroadcast()) {\n    builder.append(\"[broadcast: true]\");\n  }\n  publishers.put(mediator.getOutgoing(),new Component(ComponentType.PUBLISHER,builder.toString()));\n}\n else if (!mediator.getIncoming().isEmpty()) {\n  for (  String incoming : mediator.getIncoming()) {\n    consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.SUBSCRIBER,asMethod(mediator.methodAsString())));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1457,
        "startLineNumber" : 62,
        "startColumnNumber" : 20,
        "endLineNumber" : 84,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isProcessor) {\n  publishers.put(mediator.getOutgoing(),new Component(ComponentType.PROCESSOR,asMethod(mediator.methodAsString())));\n  for (  String incoming : mediator.getIncoming()) {\n    consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.PROCESSOR,asMethod(mediator.methodAsString())));\n  }\n}\n else if (mediator.getOutgoing() != null) {\n  StringBuilder builder=new StringBuilder();\n  builder.append(asMethod(mediator.methodAsString()));\n  if (mediator.getBroadcast()) {\n    builder.append(\"[broadcast: true]\");\n  }\n  publishers.put(mediator.getOutgoing(),new Component(ComponentType.PUBLISHER,builder.toString()));\n}\n else if (!mediator.getIncoming().isEmpty()) {\n  for (  String incoming : mediator.getIncoming()) {\n    consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.SUBSCRIBER,asMethod(mediator.methodAsString())));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 135,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1608,
        "startLineNumber" : 60,
        "startColumnNumber" : 91,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  boolean isProcessor=!mediator.getIncoming().isEmpty() && mediator.getOutgoing() != null;\n  if (isProcessor) {\n    publishers.put(mediator.getOutgoing(),new Component(ComponentType.PROCESSOR,asMethod(mediator.methodAsString())));\n    for (    String incoming : mediator.getIncoming()) {\n      consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.PROCESSOR,asMethod(mediator.methodAsString())));\n    }\n  }\n else   if (mediator.getOutgoing() != null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(asMethod(mediator.methodAsString()));\n    if (mediator.getBroadcast()) {\n      builder.append(\"[broadcast: true]\");\n    }\n    publishers.put(mediator.getOutgoing(),new Component(ComponentType.PUBLISHER,builder.toString()));\n  }\n else   if (!mediator.getIncoming().isEmpty()) {\n    for (    String incoming : mediator.getIncoming()) {\n      consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.SUBSCRIBER,asMethod(mediator.methodAsString())));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (MediatorConfiguration mediator : context.getMediatorConfigurations()) {\n  boolean isProcessor=!mediator.getIncoming().isEmpty() && mediator.getOutgoing() != null;\n  if (isProcessor) {\n    publishers.put(mediator.getOutgoing(),new Component(ComponentType.PROCESSOR,asMethod(mediator.methodAsString())));\n    for (    String incoming : mediator.getIncoming()) {\n      consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.PROCESSOR,asMethod(mediator.methodAsString())));\n    }\n  }\n else   if (mediator.getOutgoing() != null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(asMethod(mediator.methodAsString()));\n    if (mediator.getBroadcast()) {\n      builder.append(\"[broadcast: true]\");\n    }\n    publishers.put(mediator.getOutgoing(),new Component(ComponentType.PUBLISHER,builder.toString()));\n  }\n else   if (!mediator.getIncoming().isEmpty()) {\n    for (    String incoming : mediator.getIncoming()) {\n      consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.SUBSCRIBER,asMethod(mediator.methodAsString())));\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 160,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3928,
        "startLineNumber" : 31,
        "startColumnNumber" : 46,
        "endLineNumber" : 97,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ArcContainer container=Arc.container();\n  SmallRyeReactiveMessagingContext context=container.instance(SmallRyeReactiveMessagingContext.class).get();\n  Map<String,Component> publishers=new HashMap<>();\n  Map<String,List<Component>> consumers=new HashMap<>();\n  Function<String,List<Component>> fun=e -> new ArrayList<>();\n  Connectors connectors=container.instance(Connectors.class).get();\n  publishers.putAll(connectors.outgoingConnectors);\n  for (  Entry<String,Component> entry : connectors.incomingConnectors.entrySet()) {\n    consumers.computeIfAbsent(entry.getKey(),fun).add(entry.getValue());\n  }\n  for (  EmitterConfiguration emitter : context.getEmitterConfigurations()) {\n    publishers.put(emitter.name,new Component(ComponentType.EMITTER,emitter.broadcast ? \"<span class=\\\"annotation\\\">&#64;Broadcast</span> \" : \"\" + asCode(DevConsoleRecorder.EMITTERS.get(emitter.name))));\n  }\n  for (  ChannelConfiguration channel : context.getChannelConfigurations()) {\n    consumers.computeIfAbsent(channel.channelName,fun).add(new Component(ComponentType.CHANNEL,asCode(DevConsoleRecorder.CHANNELS.get(channel.channelName))));\n  }\n  for (  MediatorConfiguration mediator : context.getMediatorConfigurations()) {\n    boolean isProcessor=!mediator.getIncoming().isEmpty() && mediator.getOutgoing() != null;\n    if (isProcessor) {\n      publishers.put(mediator.getOutgoing(),new Component(ComponentType.PROCESSOR,asMethod(mediator.methodAsString())));\n      for (      String incoming : mediator.getIncoming()) {\n        consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.PROCESSOR,asMethod(mediator.methodAsString())));\n      }\n    }\n else     if (mediator.getOutgoing() != null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(asMethod(mediator.methodAsString()));\n      if (mediator.getBroadcast()) {\n        builder.append(\"[broadcast: true]\");\n      }\n      publishers.put(mediator.getOutgoing(),new Component(ComponentType.PUBLISHER,builder.toString()));\n    }\n else     if (!mediator.getIncoming().isEmpty()) {\n      for (      String incoming : mediator.getIncoming()) {\n        consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.SUBSCRIBER,asMethod(mediator.methodAsString())));\n      }\n    }\n  }\n  Set<String> channels=new HashSet<>();\n  channels.addAll(publishers.keySet());\n  channels.addAll(consumers.keySet());\n  List<DevChannelInfo> infos=new ArrayList<>();\n  for (  String channel : channels) {\n    infos.add(new DevChannelInfo(channel,publishers.get(channel),consumers.get(channel)));\n  }\n  Collections.sort(infos);\n  return infos;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 424,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3984,
        "startLineNumber" : 30,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 13
      },
      "nodeContext" : "@Override public List<DevChannelInfo> get(){\n  ArcContainer container=Arc.container();\n  SmallRyeReactiveMessagingContext context=container.instance(SmallRyeReactiveMessagingContext.class).get();\n  Map<String,Component> publishers=new HashMap<>();\n  Map<String,List<Component>> consumers=new HashMap<>();\n  Function<String,List<Component>> fun=e -> new ArrayList<>();\n  Connectors connectors=container.instance(Connectors.class).get();\n  publishers.putAll(connectors.outgoingConnectors);\n  for (  Entry<String,Component> entry : connectors.incomingConnectors.entrySet()) {\n    consumers.computeIfAbsent(entry.getKey(),fun).add(entry.getValue());\n  }\n  for (  EmitterConfiguration emitter : context.getEmitterConfigurations()) {\n    publishers.put(emitter.name,new Component(ComponentType.EMITTER,emitter.broadcast ? \"<span class=\\\"annotation\\\">&#64;Broadcast</span> \" : \"\" + asCode(DevConsoleRecorder.EMITTERS.get(emitter.name))));\n  }\n  for (  ChannelConfiguration channel : context.getChannelConfigurations()) {\n    consumers.computeIfAbsent(channel.channelName,fun).add(new Component(ComponentType.CHANNEL,asCode(DevConsoleRecorder.CHANNELS.get(channel.channelName))));\n  }\n  for (  MediatorConfiguration mediator : context.getMediatorConfigurations()) {\n    boolean isProcessor=!mediator.getIncoming().isEmpty() && mediator.getOutgoing() != null;\n    if (isProcessor) {\n      publishers.put(mediator.getOutgoing(),new Component(ComponentType.PROCESSOR,asMethod(mediator.methodAsString())));\n      for (      String incoming : mediator.getIncoming()) {\n        consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.PROCESSOR,asMethod(mediator.methodAsString())));\n      }\n    }\n else     if (mediator.getOutgoing() != null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(asMethod(mediator.methodAsString()));\n      if (mediator.getBroadcast()) {\n        builder.append(\"[broadcast: true]\");\n      }\n      publishers.put(mediator.getOutgoing(),new Component(ComponentType.PUBLISHER,builder.toString()));\n    }\n else     if (!mediator.getIncoming().isEmpty()) {\n      for (      String incoming : mediator.getIncoming()) {\n        consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.SUBSCRIBER,asMethod(mediator.methodAsString())));\n      }\n    }\n  }\n  Set<String> channels=new HashSet<>();\n  channels.addAll(publishers.keySet());\n  channels.addAll(consumers.keySet());\n  List<DevChannelInfo> infos=new ArrayList<>();\n  for (  String channel : channels) {\n    infos.add(new DevChannelInfo(channel,publishers.get(channel),consumers.get(channel)));\n  }\n  Collections.sort(infos);\n  return infos;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 434,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 80,
        "startColumnNumber" : 28,
        "endLineNumber" : 82,
        "endColumnNumber" : 81
      },
      "nodeContext" : "consumers.computeIfAbsent(incoming,fun).add(new Component(ComponentType.SUBSCRIBER,asMethod(mediator.methodAsString())))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "io.quarkus.smallrye.reactivemessaging.runtime.devconsole.DevReactiveMessagingInfos.Component"
  } ],
  "positionList" : [ {
    "charLength" : 120,
    "startLineNumber" : 81,
    "startColumnNumber" : 41,
    "endLineNumber" : 82,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}