{
  "id" : 452,
  "expression" : "456",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "44299bb9808d0dc21a9bfc1c0c47e1539e00856d",
  "filePath" : "/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/JavaBeanBinderTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "456",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 123,
      "startColumnNumber" : 38,
      "endLineNumber" : 123,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 123,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 42
      },
      "nodeContext" : "assertThat(bean.getBar()).isEqualTo(456)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 123,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertThat(bean.getBar()).isEqualTo(456);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 115,
        "startColumnNumber" : 82,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  MockConfigurationPropertySource source=new MockConfigurationPropertySource();\n  this.sources.add(source);\n  ExampleDefaultsBean bean=new ExampleDefaultsBean();\n  BindResult<ExampleDefaultsBean> boundBean=this.binder.bind(\"foo\",Bindable.of(ExampleDefaultsBean.class).withExistingValue(bean));\n  assertThat(boundBean.isBound()).isFalse();\n  assertThat(bean.getFoo()).isEqualTo(123);\n  assertThat(bean.getBar()).isEqualTo(456);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 530,
        "startLineNumber" : 114,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void bindToInstanceWithNoPropertiesShouldReturnUnbound() throws Exception {\n  MockConfigurationPropertySource source=new MockConfigurationPropertySource();\n  this.sources.add(source);\n  ExampleDefaultsBean bean=new ExampleDefaultsBean();\n  BindResult<ExampleDefaultsBean> boundBean=this.binder.bind(\"foo\",Bindable.of(ExampleDefaultsBean.class).withExistingValue(bean));\n  assertThat(boundBean.isBound()).isFalse();\n  assertThat(bean.getFoo()).isEqualTo(123);\n  assertThat(bean.getBar()).isEqualTo(456);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 123,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertThat(bean.getBar()).isEqualTo(456);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 123,
    "startColumnNumber" : 38,
    "endLineNumber" : 123,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}