{
  "id" : 202,
  "expression" : "rawText",
  "projectName" : "zxing@zxing",
  "commitID" : "faf72f02eb2f0093493f0d6aec8cd62545830a89",
  "filePath" : "core/src/com/google/zxing/client/result/VCardResultParser.java",
  "occurrences" : 16,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "rawText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 89,
      "startColumnNumber" : 14,
      "endLineNumber" : 89,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 89,
        "startColumnNumber" : 14,
        "endLineNumber" : 89,
        "endColumnNumber" : 30
      },
      "nodeContext" : "rawText.length()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 30
      },
      "nodeContext" : "max=rawText.length()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 31
      },
      "nodeContext" : "int max=rawText.length();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 31
      },
      "nodeContext" : "int max=rawText.length();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "rawText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 93,
      "startColumnNumber" : 10,
      "endLineNumber" : 93,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 93,
        "startColumnNumber" : 10,
        "endLineNumber" : 93,
        "endColumnNumber" : 36
      },
      "nodeContext" : "rawText.indexOf(prefix,i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 93,
        "startColumnNumber" : 6,
        "endLineNumber" : 93,
        "endColumnNumber" : 36
      },
      "nodeContext" : "i=rawText.indexOf(prefix,i)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 93,
        "startColumnNumber" : 6,
        "endLineNumber" : 93,
        "endColumnNumber" : 37
      },
      "nodeContext" : "i=rawText.indexOf(prefix,i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 93,
        "startColumnNumber" : 6,
        "endLineNumber" : 93,
        "endColumnNumber" : 37
      },
      "nodeContext" : "i=rawText.indexOf(prefix,i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "rawText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 98,
      "startColumnNumber" : 19,
      "endLineNumber" : 98,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 98,
        "startColumnNumber" : 19,
        "endLineNumber" : 98,
        "endColumnNumber" : 40
      },
      "nodeContext" : "rawText.charAt(i - 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 98,
        "startColumnNumber" : 19,
        "endLineNumber" : 98,
        "endColumnNumber" : 48
      },
      "nodeContext" : "rawText.charAt(i - 1) != '\\n'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 98,
        "startColumnNumber" : 10,
        "endLineNumber" : 98,
        "endColumnNumber" : 48
      },
      "nodeContext" : "i > 0 && rawText.charAt(i - 1) != '\\n'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 98,
        "startColumnNumber" : 6,
        "endLineNumber" : 102,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n  i++;\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 98,
        "startColumnNumber" : 10,
        "endLineNumber" : 98,
        "endColumnNumber" : 48
      },
      "nodeContext" : "i > 0 && rawText.charAt(i - 1) != '\\n'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "rawText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 104,
      "startColumnNumber" : 10,
      "endLineNumber" : 104,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 104,
        "startColumnNumber" : 10,
        "endLineNumber" : 104,
        "endColumnNumber" : 27
      },
      "nodeContext" : "rawText.charAt(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 104,
        "startColumnNumber" : 10,
        "endLineNumber" : 104,
        "endColumnNumber" : 34
      },
      "nodeContext" : "rawText.charAt(i) != ':'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 104,
        "startColumnNumber" : 10,
        "endLineNumber" : 104,
        "endColumnNumber" : 62
      },
      "nodeContext" : "rawText.charAt(i) != ':' && rawText.charAt(i) != ';'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 106,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 104,
        "startColumnNumber" : 10,
        "endLineNumber" : 104,
        "endColumnNumber" : 62
      },
      "nodeContext" : "rawText.charAt(i) != ':' && rawText.charAt(i) != ';'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "rawText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 104,
      "startColumnNumber" : 38,
      "endLineNumber" : 104,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 104,
        "startColumnNumber" : 38,
        "endLineNumber" : 104,
        "endColumnNumber" : 55
      },
      "nodeContext" : "rawText.charAt(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 104,
        "startColumnNumber" : 38,
        "endLineNumber" : 104,
        "endColumnNumber" : 62
      },
      "nodeContext" : "rawText.charAt(i) != ';'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 104,
        "startColumnNumber" : 10,
        "endLineNumber" : 104,
        "endColumnNumber" : 62
      },
      "nodeContext" : "rawText.charAt(i) != ':' && rawText.charAt(i) != ';'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 106,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 104,
        "startColumnNumber" : 10,
        "endLineNumber" : 104,
        "endColumnNumber" : 62
      },
      "nodeContext" : "rawText.charAt(i) != ':' && rawText.charAt(i) != ';'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "rawText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 109,
      "startColumnNumber" : 13,
      "endLineNumber" : 109,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 109,
        "startColumnNumber" : 13,
        "endLineNumber" : 109,
        "endColumnNumber" : 30
      },
      "nodeContext" : "rawText.charAt(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 109,
        "startColumnNumber" : 13,
        "endLineNumber" : 109,
        "endColumnNumber" : 37
      },
      "nodeContext" : "rawText.charAt(i) != ':'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 109,
        "startColumnNumber" : 6,
        "endLineNumber" : 111,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (rawText.charAt(i) != ':') {\n  i++;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 109,
        "startColumnNumber" : 13,
        "endLineNumber" : 109,
        "endColumnNumber" : 37
      },
      "nodeContext" : "rawText.charAt(i) != ':'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "rawText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 119,
      "startColumnNumber" : 19,
      "endLineNumber" : 119,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 119,
        "startColumnNumber" : 19,
        "endLineNumber" : 119,
        "endColumnNumber" : 36
      },
      "nodeContext" : "rawText.charAt(j)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 119,
        "startColumnNumber" : 15,
        "endLineNumber" : 119,
        "endColumnNumber" : 36
      },
      "nodeContext" : "c=rawText.charAt(j)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 119,
        "startColumnNumber" : 10,
        "endLineNumber" : 119,
        "endColumnNumber" : 37
      },
      "nodeContext" : "char c=rawText.charAt(j);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 851,
        "startLineNumber" : 118,
        "startColumnNumber" : 53,
        "endLineNumber" : 140,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  char c=rawText.charAt(j);\n  if (c == ';' || c == ':') {\n    String metadatum=rawText.substring(metadataStart + 1,j);\n    if (metadata == null) {\n      metadata=new Vector(1);\n    }\n    metadata.addElement(metadatum);\n    int equals=metadatum.indexOf('=');\n    if (equals >= 0) {\n      String key=metadatum.substring(0,equals);\n      String value=metadatum.substring(equals + 1);\n      if (\"ENCODING\".equalsIgnoreCase(key)) {\n        if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n          quotedPrintable=true;\n        }\n      }\n else       if (\"CHARSET\".equalsIgnoreCase(key)) {\n        quotedPrintableCharset=value;\n      }\n    }\n    metadataStart=j;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 896,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=metadataStart + 1; j <= i; j++) {\n  char c=rawText.charAt(j);\n  if (c == ';' || c == ':') {\n    String metadatum=rawText.substring(metadataStart + 1,j);\n    if (metadata == null) {\n      metadata=new Vector(1);\n    }\n    metadata.addElement(metadatum);\n    int equals=metadatum.indexOf('=');\n    if (equals >= 0) {\n      String key=metadatum.substring(0,equals);\n      String value=metadatum.substring(equals + 1);\n      if (\"ENCODING\".equalsIgnoreCase(key)) {\n        if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n          quotedPrintable=true;\n        }\n      }\n else       if (\"CHARSET\".equalsIgnoreCase(key)) {\n        quotedPrintableCharset=value;\n      }\n    }\n    metadataStart=j;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 124,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 973,
        "startLineNumber" : 116,
        "startColumnNumber" : 29,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (int j=metadataStart + 1; j <= i; j++) {\n    char c=rawText.charAt(j);\n    if (c == ';' || c == ':') {\n      String metadatum=rawText.substring(metadataStart + 1,j);\n      if (metadata == null) {\n        metadata=new Vector(1);\n      }\n      metadata.addElement(metadatum);\n      int equals=metadatum.indexOf('=');\n      if (equals >= 0) {\n        String key=metadatum.substring(0,equals);\n        String value=metadatum.substring(equals + 1);\n        if (\"ENCODING\".equalsIgnoreCase(key)) {\n          if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n            quotedPrintable=true;\n          }\n        }\n else         if (\"CHARSET\".equalsIgnoreCase(key)) {\n          quotedPrintableCharset=value;\n        }\n      }\n      metadataStart=j;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 996,
        "startLineNumber" : 116,
        "startColumnNumber" : 6,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i > metadataStart) {\n  for (int j=metadataStart + 1; j <= i; j++) {\n    char c=rawText.charAt(j);\n    if (c == ';' || c == ':') {\n      String metadatum=rawText.substring(metadataStart + 1,j);\n      if (metadata == null) {\n        metadata=new Vector(1);\n      }\n      metadata.addElement(metadatum);\n      int equals=metadatum.indexOf('=');\n      if (equals >= 0) {\n        String key=metadatum.substring(0,equals);\n        String value=metadatum.substring(equals + 1);\n        if (\"ENCODING\".equalsIgnoreCase(key)) {\n          if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n            quotedPrintable=true;\n          }\n        }\n else         if (\"CHARSET\".equalsIgnoreCase(key)) {\n          quotedPrintableCharset=value;\n        }\n      }\n      metadataStart=j;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 129,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 119,
        "startColumnNumber" : 10,
        "endLineNumber" : 119,
        "endColumnNumber" : 37
      },
      "nodeContext" : "char c=rawText.charAt(j);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "rawText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 121,
      "startColumnNumber" : 31,
      "endLineNumber" : 121,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 121,
        "startColumnNumber" : 31,
        "endLineNumber" : 121,
        "endColumnNumber" : 68
      },
      "nodeContext" : "rawText.substring(metadataStart + 1,j)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 121,
        "startColumnNumber" : 19,
        "endLineNumber" : 121,
        "endColumnNumber" : 68
      },
      "nodeContext" : "metadatum=rawText.substring(metadataStart + 1,j)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 69
      },
      "nodeContext" : "String metadatum=rawText.substring(metadataStart + 1,j);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 765,
        "startLineNumber" : 120,
        "startColumnNumber" : 36,
        "endLineNumber" : 139,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  String metadatum=rawText.substring(metadataStart + 1,j);\n  if (metadata == null) {\n    metadata=new Vector(1);\n  }\n  metadata.addElement(metadatum);\n  int equals=metadatum.indexOf('=');\n  if (equals >= 0) {\n    String key=metadatum.substring(0,equals);\n    String value=metadatum.substring(equals + 1);\n    if (\"ENCODING\".equalsIgnoreCase(key)) {\n      if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n        quotedPrintable=true;\n      }\n    }\n else     if (\"CHARSET\".equalsIgnoreCase(key)) {\n      quotedPrintableCharset=value;\n    }\n  }\n  metadataStart=j;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 791,
        "startLineNumber" : 120,
        "startColumnNumber" : 10,
        "endLineNumber" : 139,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (c == ';' || c == ':') {\n  String metadatum=rawText.substring(metadataStart + 1,j);\n  if (metadata == null) {\n    metadata=new Vector(1);\n  }\n  metadata.addElement(metadatum);\n  int equals=metadatum.indexOf('=');\n  if (equals >= 0) {\n    String key=metadatum.substring(0,equals);\n    String value=metadatum.substring(equals + 1);\n    if (\"ENCODING\".equalsIgnoreCase(key)) {\n      if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n        quotedPrintable=true;\n      }\n    }\n else     if (\"CHARSET\".equalsIgnoreCase(key)) {\n      quotedPrintableCharset=value;\n    }\n  }\n  metadataStart=j;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 102,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 851,
        "startLineNumber" : 118,
        "startColumnNumber" : 53,
        "endLineNumber" : 140,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  char c=rawText.charAt(j);\n  if (c == ';' || c == ':') {\n    String metadatum=rawText.substring(metadataStart + 1,j);\n    if (metadata == null) {\n      metadata=new Vector(1);\n    }\n    metadata.addElement(metadatum);\n    int equals=metadatum.indexOf('=');\n    if (equals >= 0) {\n      String key=metadatum.substring(0,equals);\n      String value=metadatum.substring(equals + 1);\n      if (\"ENCODING\".equalsIgnoreCase(key)) {\n        if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n          quotedPrintable=true;\n        }\n      }\n else       if (\"CHARSET\".equalsIgnoreCase(key)) {\n        quotedPrintableCharset=value;\n      }\n    }\n    metadataStart=j;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 896,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=metadataStart + 1; j <= i; j++) {\n  char c=rawText.charAt(j);\n  if (c == ';' || c == ':') {\n    String metadatum=rawText.substring(metadataStart + 1,j);\n    if (metadata == null) {\n      metadata=new Vector(1);\n    }\n    metadata.addElement(metadatum);\n    int equals=metadatum.indexOf('=');\n    if (equals >= 0) {\n      String key=metadatum.substring(0,equals);\n      String value=metadatum.substring(equals + 1);\n      if (\"ENCODING\".equalsIgnoreCase(key)) {\n        if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n          quotedPrintable=true;\n        }\n      }\n else       if (\"CHARSET\".equalsIgnoreCase(key)) {\n        quotedPrintableCharset=value;\n      }\n    }\n    metadataStart=j;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 124,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 973,
        "startLineNumber" : 116,
        "startColumnNumber" : 29,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (int j=metadataStart + 1; j <= i; j++) {\n    char c=rawText.charAt(j);\n    if (c == ';' || c == ':') {\n      String metadatum=rawText.substring(metadataStart + 1,j);\n      if (metadata == null) {\n        metadata=new Vector(1);\n      }\n      metadata.addElement(metadatum);\n      int equals=metadatum.indexOf('=');\n      if (equals >= 0) {\n        String key=metadatum.substring(0,equals);\n        String value=metadatum.substring(equals + 1);\n        if (\"ENCODING\".equalsIgnoreCase(key)) {\n          if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n            quotedPrintable=true;\n          }\n        }\n else         if (\"CHARSET\".equalsIgnoreCase(key)) {\n          quotedPrintableCharset=value;\n        }\n      }\n      metadataStart=j;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 996,
        "startLineNumber" : 116,
        "startColumnNumber" : 6,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i > metadataStart) {\n  for (int j=metadataStart + 1; j <= i; j++) {\n    char c=rawText.charAt(j);\n    if (c == ';' || c == ':') {\n      String metadatum=rawText.substring(metadataStart + 1,j);\n      if (metadata == null) {\n        metadata=new Vector(1);\n      }\n      metadata.addElement(metadatum);\n      int equals=metadatum.indexOf('=');\n      if (equals >= 0) {\n        String key=metadatum.substring(0,equals);\n        String value=metadatum.substring(equals + 1);\n        if (\"ENCODING\".equalsIgnoreCase(key)) {\n          if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n            quotedPrintable=true;\n          }\n        }\n else         if (\"CHARSET\".equalsIgnoreCase(key)) {\n          quotedPrintableCharset=value;\n        }\n      }\n      metadataStart=j;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 129,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 69
      },
      "nodeContext" : "String metadatum=rawText.substring(metadataStart + 1,j);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "rawText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 147,
      "startColumnNumber" : 18,
      "endLineNumber" : 147,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 147,
        "startColumnNumber" : 18,
        "endLineNumber" : 147,
        "endColumnNumber" : 48
      },
      "nodeContext" : "rawText.indexOf((int)'\\n',i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 147,
        "startColumnNumber" : 14,
        "endLineNumber" : 147,
        "endColumnNumber" : 48
      },
      "nodeContext" : "i=rawText.indexOf((int)'\\n',i)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 147,
        "endColumnNumber" : 49
      },
      "nodeContext" : "(i=rawText.indexOf((int)'\\n',i))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 147,
        "endColumnNumber" : 54
      },
      "nodeContext" : "(i=rawText.indexOf((int)'\\n',i)) >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 639,
        "startLineNumber" : 147,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n  if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n    i+=2;\n  }\n else   if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n    i++;\n  }\n else {\n    break;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 73,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 147,
        "endColumnNumber" : 54
      },
      "nodeContext" : "(i=rawText.indexOf((int)'\\n',i)) >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "rawText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 148,
      "startColumnNumber" : 16,
      "endLineNumber" : 148,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 148,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 32
      },
      "nodeContext" : "rawText.length()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 148,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 36
      },
      "nodeContext" : "rawText.length() - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 148,
        "endColumnNumber" : 36
      },
      "nodeContext" : "i < rawText.length() - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 41
      },
      "nodeContext" : "i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 548,
        "startLineNumber" : 148,
        "startColumnNumber" : 8,
        "endLineNumber" : 158,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n  i+=2;\n}\n else if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n  i++;\n}\n else {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 589,
        "startLineNumber" : 147,
        "startColumnNumber" : 56,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n    i+=2;\n  }\n else   if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n    i++;\n  }\n else {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 639,
        "startLineNumber" : 147,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n  if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n    i+=2;\n  }\n else   if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n    i++;\n  }\n else {\n    break;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 73,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 148,
        "endColumnNumber" : 36
      },
      "nodeContext" : "i < rawText.length() - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "rawText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 149,
      "startColumnNumber" : 13,
      "endLineNumber" : 149,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 149,
        "startColumnNumber" : 13,
        "endLineNumber" : 149,
        "endColumnNumber" : 32
      },
      "nodeContext" : "rawText.charAt(i + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 149,
        "startColumnNumber" : 13,
        "endLineNumber" : 149,
        "endColumnNumber" : 39
      },
      "nodeContext" : "rawText.charAt(i + 1) == ' '",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 149,
        "startColumnNumber" : 13,
        "endLineNumber" : 150,
        "endColumnNumber" : 40
      },
      "nodeContext" : "rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 149,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 41
      },
      "nodeContext" : "(rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 41
      },
      "nodeContext" : "i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 548,
        "startLineNumber" : 148,
        "startColumnNumber" : 8,
        "endLineNumber" : 158,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n  i+=2;\n}\n else if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n  i++;\n}\n else {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 589,
        "startLineNumber" : 147,
        "startColumnNumber" : 56,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n    i+=2;\n  }\n else   if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n    i++;\n  }\n else {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 639,
        "startLineNumber" : 147,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n  if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n    i+=2;\n  }\n else   if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n    i++;\n  }\n else {\n    break;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 73,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 149,
        "startColumnNumber" : 13,
        "endLineNumber" : 149,
        "endColumnNumber" : 39
      },
      "nodeContext" : "rawText.charAt(i + 1) == ' '",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "rawText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 150,
      "startColumnNumber" : 13,
      "endLineNumber" : 150,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 150,
        "startColumnNumber" : 13,
        "endLineNumber" : 150,
        "endColumnNumber" : 32
      },
      "nodeContext" : "rawText.charAt(i + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 150,
        "startColumnNumber" : 13,
        "endLineNumber" : 150,
        "endColumnNumber" : 40
      },
      "nodeContext" : "rawText.charAt(i + 1) == '\\t'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 149,
        "startColumnNumber" : 13,
        "endLineNumber" : 150,
        "endColumnNumber" : 40
      },
      "nodeContext" : "rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 149,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 41
      },
      "nodeContext" : "(rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 41
      },
      "nodeContext" : "i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 548,
        "startLineNumber" : 148,
        "startColumnNumber" : 8,
        "endLineNumber" : 158,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n  i+=2;\n}\n else if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n  i++;\n}\n else {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 589,
        "startLineNumber" : 147,
        "startColumnNumber" : 56,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n    i+=2;\n  }\n else   if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n    i++;\n  }\n else {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 639,
        "startLineNumber" : 147,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n  if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n    i+=2;\n  }\n else   if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n    i++;\n  }\n else {\n    break;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 73,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 150,
        "startColumnNumber" : 13,
        "endLineNumber" : 150,
        "endColumnNumber" : 40
      },
      "nodeContext" : "rawText.charAt(i + 1) == '\\t'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "rawText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 153,
      "startColumnNumber" : 20,
      "endLineNumber" : 153,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 153,
        "startColumnNumber" : 20,
        "endLineNumber" : 153,
        "endColumnNumber" : 39
      },
      "nodeContext" : "rawText.charAt(i - 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 153,
        "startColumnNumber" : 20,
        "endLineNumber" : 153,
        "endColumnNumber" : 46
      },
      "nodeContext" : "rawText.charAt(i - 1) == '='",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 153,
        "startColumnNumber" : 20,
        "endLineNumber" : 154,
        "endColumnNumber" : 46
      },
      "nodeContext" : "rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '='",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 153,
        "startColumnNumber" : 19,
        "endLineNumber" : 154,
        "endColumnNumber" : 47
      },
      "nodeContext" : "(rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 194,
        "startLineNumber" : 152,
        "startColumnNumber" : 19,
        "endLineNumber" : 154,
        "endColumnNumber" : 47
      },
      "nodeContext" : "quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 271,
        "startLineNumber" : 152,
        "startColumnNumber" : 15,
        "endLineNumber" : 158,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n  i++;\n}\n else {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 548,
        "startLineNumber" : 148,
        "startColumnNumber" : 8,
        "endLineNumber" : 158,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n  i+=2;\n}\n else if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n  i++;\n}\n else {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 589,
        "startLineNumber" : 147,
        "startColumnNumber" : 56,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n    i+=2;\n  }\n else   if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n    i++;\n  }\n else {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 639,
        "startLineNumber" : 147,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n  if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n    i+=2;\n  }\n else   if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n    i++;\n  }\n else {\n    break;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 73,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 153,
        "startColumnNumber" : 20,
        "endLineNumber" : 153,
        "endColumnNumber" : 46
      },
      "nodeContext" : "rawText.charAt(i - 1) == '='",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "rawText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 154,
      "startColumnNumber" : 20,
      "endLineNumber" : 154,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 154,
        "startColumnNumber" : 20,
        "endLineNumber" : 154,
        "endColumnNumber" : 39
      },
      "nodeContext" : "rawText.charAt(i - 2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 154,
        "startColumnNumber" : 20,
        "endLineNumber" : 154,
        "endColumnNumber" : 46
      },
      "nodeContext" : "rawText.charAt(i - 2) == '='",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 153,
        "startColumnNumber" : 20,
        "endLineNumber" : 154,
        "endColumnNumber" : 46
      },
      "nodeContext" : "rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '='",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 153,
        "startColumnNumber" : 19,
        "endLineNumber" : 154,
        "endColumnNumber" : 47
      },
      "nodeContext" : "(rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 194,
        "startLineNumber" : 152,
        "startColumnNumber" : 19,
        "endLineNumber" : 154,
        "endColumnNumber" : 47
      },
      "nodeContext" : "quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 271,
        "startLineNumber" : 152,
        "startColumnNumber" : 15,
        "endLineNumber" : 158,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n  i++;\n}\n else {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 548,
        "startLineNumber" : 148,
        "startColumnNumber" : 8,
        "endLineNumber" : 158,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n  i+=2;\n}\n else if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n  i++;\n}\n else {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 589,
        "startLineNumber" : 147,
        "startColumnNumber" : 56,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n    i+=2;\n  }\n else   if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n    i++;\n  }\n else {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 639,
        "startLineNumber" : 147,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n  if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n    i+=2;\n  }\n else   if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n    i++;\n  }\n else {\n    break;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 73,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 154,
        "startColumnNumber" : 20,
        "endLineNumber" : 154,
        "endColumnNumber" : 46
      },
      "nodeContext" : "rawText.charAt(i - 2) == '='",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "rawText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 169,
      "startColumnNumber" : 12,
      "endLineNumber" : 169,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 169,
        "startColumnNumber" : 12,
        "endLineNumber" : 169,
        "endColumnNumber" : 31
      },
      "nodeContext" : "rawText.charAt(i - 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 169,
        "startColumnNumber" : 12,
        "endLineNumber" : 169,
        "endColumnNumber" : 39
      },
      "nodeContext" : "rawText.charAt(i - 1) == '\\r'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 169,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (rawText.charAt(i - 1) == '\\r') {\n  i--;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 164,
        "startColumnNumber" : 33,
        "endLineNumber" : 190,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (matches == null) {\n    matches=new Vector(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n  }\n else {\n    element=stripContinuationCRLF(element);\n  }\n  if (metadata == null) {\n    Vector match=new Vector(1);\n    match.addElement(element);\n    matches.addElement(match);\n  }\n else {\n    metadata.insertElementAt(element,0);\n    matches.addElement(metadata);\n  }\n  i++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 873,
        "startLineNumber" : 164,
        "startColumnNumber" : 13,
        "endLineNumber" : 192,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i > matchStart) {\n  if (matches == null) {\n    matches=new Vector(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n  }\n else {\n    element=stripContinuationCRLF(element);\n  }\n  if (metadata == null) {\n    Vector match=new Vector(1);\n    match.addElement(element);\n    matches.addElement(match);\n  }\n else {\n    metadata.insertElementAt(element,0);\n    matches.addElement(metadata);\n  }\n  i++;\n}\n else {\n  i++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1009,
        "startLineNumber" : 161,
        "startColumnNumber" : 6,
        "endLineNumber" : 192,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i < 0) {\n  i=max;\n}\n else if (i > matchStart) {\n  if (matches == null) {\n    matches=new Vector(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n  }\n else {\n    element=stripContinuationCRLF(element);\n  }\n  if (metadata == null) {\n    Vector match=new Vector(1);\n    match.addElement(element);\n    matches.addElement(match);\n  }\n else {\n    metadata.insertElementAt(element,0);\n    matches.addElement(metadata);\n  }\n  i++;\n}\n else {\n  i++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 118,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 169,
        "startColumnNumber" : 12,
        "endLineNumber" : 169,
        "endColumnNumber" : 39
      },
      "nodeContext" : "rawText.charAt(i - 1) == '\\r'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "rawText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 172,
      "startColumnNumber" : 25,
      "endLineNumber" : 172,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 172,
        "startColumnNumber" : 25,
        "endLineNumber" : 172,
        "endColumnNumber" : 57
      },
      "nodeContext" : "rawText.substring(matchStart,i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 172,
        "startColumnNumber" : 15,
        "endLineNumber" : 172,
        "endColumnNumber" : 57
      },
      "nodeContext" : "element=rawText.substring(matchStart,i)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 172,
        "endColumnNumber" : 58
      },
      "nodeContext" : "String element=rawText.substring(matchStart,i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 164,
        "startColumnNumber" : 33,
        "endLineNumber" : 190,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (matches == null) {\n    matches=new Vector(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n  }\n else {\n    element=stripContinuationCRLF(element);\n  }\n  if (metadata == null) {\n    Vector match=new Vector(1);\n    match.addElement(element);\n    matches.addElement(match);\n  }\n else {\n    metadata.insertElementAt(element,0);\n    matches.addElement(metadata);\n  }\n  i++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 873,
        "startLineNumber" : 164,
        "startColumnNumber" : 13,
        "endLineNumber" : 192,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i > matchStart) {\n  if (matches == null) {\n    matches=new Vector(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n  }\n else {\n    element=stripContinuationCRLF(element);\n  }\n  if (metadata == null) {\n    Vector match=new Vector(1);\n    match.addElement(element);\n    matches.addElement(match);\n  }\n else {\n    metadata.insertElementAt(element,0);\n    matches.addElement(metadata);\n  }\n  i++;\n}\n else {\n  i++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1009,
        "startLineNumber" : 161,
        "startColumnNumber" : 6,
        "endLineNumber" : 192,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i < 0) {\n  i=max;\n}\n else if (i > matchStart) {\n  if (matches == null) {\n    matches=new Vector(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n  }\n else {\n    element=stripContinuationCRLF(element);\n  }\n  if (metadata == null) {\n    Vector match=new Vector(1);\n    match.addElement(element);\n    matches.addElement(match);\n  }\n else {\n    metadata.insertElementAt(element,0);\n    matches.addElement(metadata);\n  }\n  i++;\n}\n else {\n  i++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 118,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 172,
        "endColumnNumber" : 58
      },
      "nodeContext" : "String element=rawText.substring(matchStart,i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 89,
    "startColumnNumber" : 14,
    "endLineNumber" : 89,
    "endColumnNumber" : 21
  }, {
    "charLength" : 7,
    "startLineNumber" : 93,
    "startColumnNumber" : 10,
    "endLineNumber" : 93,
    "endColumnNumber" : 17
  }, {
    "charLength" : 7,
    "startLineNumber" : 98,
    "startColumnNumber" : 19,
    "endLineNumber" : 98,
    "endColumnNumber" : 26
  }, {
    "charLength" : 7,
    "startLineNumber" : 104,
    "startColumnNumber" : 10,
    "endLineNumber" : 104,
    "endColumnNumber" : 17
  }, {
    "charLength" : 7,
    "startLineNumber" : 104,
    "startColumnNumber" : 38,
    "endLineNumber" : 104,
    "endColumnNumber" : 45
  }, {
    "charLength" : 7,
    "startLineNumber" : 109,
    "startColumnNumber" : 13,
    "endLineNumber" : 109,
    "endColumnNumber" : 20
  }, {
    "charLength" : 7,
    "startLineNumber" : 119,
    "startColumnNumber" : 19,
    "endLineNumber" : 119,
    "endColumnNumber" : 26
  }, {
    "charLength" : 7,
    "startLineNumber" : 121,
    "startColumnNumber" : 31,
    "endLineNumber" : 121,
    "endColumnNumber" : 38
  }, {
    "charLength" : 7,
    "startLineNumber" : 147,
    "startColumnNumber" : 18,
    "endLineNumber" : 147,
    "endColumnNumber" : 25
  }, {
    "charLength" : 7,
    "startLineNumber" : 148,
    "startColumnNumber" : 16,
    "endLineNumber" : 148,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 149,
    "startColumnNumber" : 13,
    "endLineNumber" : 149,
    "endColumnNumber" : 20
  }, {
    "charLength" : 7,
    "startLineNumber" : 150,
    "startColumnNumber" : 13,
    "endLineNumber" : 150,
    "endColumnNumber" : 20
  }, {
    "charLength" : 7,
    "startLineNumber" : 153,
    "startColumnNumber" : 20,
    "endLineNumber" : 153,
    "endColumnNumber" : 27
  }, {
    "charLength" : 7,
    "startLineNumber" : 154,
    "startColumnNumber" : 20,
    "endLineNumber" : 154,
    "endColumnNumber" : 27
  }, {
    "charLength" : 7,
    "startLineNumber" : 169,
    "startColumnNumber" : 12,
    "endLineNumber" : 169,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 172,
    "startColumnNumber" : 25,
    "endLineNumber" : 172,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 3
  } ]
}