{
  "id" : 361,
  "expression" : "(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize()) / Math.min(p2.getEstimatedModuleSize(),p3.getEstimatedModuleSize())",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/multi/qrcode/detector/MultiFinderPatternFinder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize()) / Math.min(p2.getEstimatedModuleSize(),p3.getEstimatedModuleSize())",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 143,
      "startLineNumber" : 177,
      "startColumnNumber" : 29,
      "endLineNumber" : 178,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 18,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 177,
        "startColumnNumber" : 16,
        "endLineNumber" : 178,
        "endColumnNumber" : 80
      },
      "nodeContext" : "vModSize23=(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize()) / Math.min(p2.getEstimatedModuleSize(),p3.getEstimatedModuleSize())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 177,
        "startColumnNumber" : 10,
        "endLineNumber" : 178,
        "endColumnNumber" : 81
      },
      "nodeContext" : "float vModSize23=(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize()) / Math.min(p2.getEstimatedModuleSize(),p3.getEstimatedModuleSize());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2180,
        "startLineNumber" : 170,
        "startColumnNumber" : 47,
        "endLineNumber" : 219,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  FinderPattern p3=possibleCenters.get(i3);\n  if (p3 == null) {\n    continue;\n  }\n  float vModSize23=(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize()) / Math.min(p2.getEstimatedModuleSize(),p3.getEstimatedModuleSize());\n  float vModSize23A=Math.abs(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize());\n  if (vModSize23A > DIFF_MODSIZE_CUTOFF && vModSize23 >= DIFF_MODSIZE_CUTOFF_PERCENT) {\n    break;\n  }\n  FinderPattern[] test={p1,p2,p3};\n  ResultPoint.orderBestPatterns(test);\n  FinderPatternInfo info=new FinderPatternInfo(test);\n  float dA=ResultPoint.distance(info.getTopLeft(),info.getBottomLeft());\n  float dC=ResultPoint.distance(info.getTopRight(),info.getBottomLeft());\n  float dB=ResultPoint.distance(info.getTopLeft(),info.getTopRight());\n  float estimatedModuleCount=(dA + dB) / (p1.getEstimatedModuleSize() * 2.0f);\n  if (estimatedModuleCount > MAX_MODULE_COUNT_PER_EDGE || estimatedModuleCount < MIN_MODULE_COUNT_PER_EDGE) {\n    continue;\n  }\n  float vABBC=Math.abs((dA - dB) / Math.min(dA,dB));\n  if (vABBC >= 0.1f) {\n    continue;\n  }\n  float dCpy=(float)Math.sqrt(dA * dA + dB * dB);\n  float vPyC=Math.abs((dC - dCpy) / Math.min(dC,dCpy));\n  if (vPyC >= 0.1f) {\n    continue;\n  }\n  results.add(test);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2219,
        "startLineNumber" : 170,
        "startColumnNumber" : 8,
        "endLineNumber" : 219,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i3=i2 + 1; i3 < size; i3++) {\n  FinderPattern p3=possibleCenters.get(i3);\n  if (p3 == null) {\n    continue;\n  }\n  float vModSize23=(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize()) / Math.min(p2.getEstimatedModuleSize(),p3.getEstimatedModuleSize());\n  float vModSize23A=Math.abs(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize());\n  if (vModSize23A > DIFF_MODSIZE_CUTOFF && vModSize23 >= DIFF_MODSIZE_CUTOFF_PERCENT) {\n    break;\n  }\n  FinderPattern[] test={p1,p2,p3};\n  ResultPoint.orderBestPatterns(test);\n  FinderPatternInfo info=new FinderPatternInfo(test);\n  float dA=ResultPoint.distance(info.getTopLeft(),info.getBottomLeft());\n  float dC=ResultPoint.distance(info.getTopRight(),info.getBottomLeft());\n  float dB=ResultPoint.distance(info.getTopLeft(),info.getTopRight());\n  float estimatedModuleCount=(dA + dB) / (p1.getEstimatedModuleSize() * 2.0f);\n  if (estimatedModuleCount > MAX_MODULE_COUNT_PER_EDGE || estimatedModuleCount < MIN_MODULE_COUNT_PER_EDGE) {\n    continue;\n  }\n  float vABBC=Math.abs((dA - dB) / Math.min(dA,dB));\n  if (vABBC >= 0.1f) {\n    continue;\n  }\n  float dCpy=(float)Math.sqrt(dA * dA + dB * dB);\n  float vPyC=Math.abs((dC - dCpy) / Math.min(dC,dCpy));\n  if (vPyC >= 0.1f) {\n    continue;\n  }\n  results.add(test);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 231,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2997,
        "startLineNumber" : 154,
        "startColumnNumber" : 51,
        "endLineNumber" : 220,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  FinderPattern p2=possibleCenters.get(i2);\n  if (p2 == null) {\n    continue;\n  }\n  float vModSize12=(p1.getEstimatedModuleSize() - p2.getEstimatedModuleSize()) / Math.min(p1.getEstimatedModuleSize(),p2.getEstimatedModuleSize());\n  float vModSize12A=Math.abs(p1.getEstimatedModuleSize() - p2.getEstimatedModuleSize());\n  if (vModSize12A > DIFF_MODSIZE_CUTOFF && vModSize12 >= DIFF_MODSIZE_CUTOFF_PERCENT) {\n    break;\n  }\n  for (int i3=i2 + 1; i3 < size; i3++) {\n    FinderPattern p3=possibleCenters.get(i3);\n    if (p3 == null) {\n      continue;\n    }\n    float vModSize23=(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize()) / Math.min(p2.getEstimatedModuleSize(),p3.getEstimatedModuleSize());\n    float vModSize23A=Math.abs(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize());\n    if (vModSize23A > DIFF_MODSIZE_CUTOFF && vModSize23 >= DIFF_MODSIZE_CUTOFF_PERCENT) {\n      break;\n    }\n    FinderPattern[] test={p1,p2,p3};\n    ResultPoint.orderBestPatterns(test);\n    FinderPatternInfo info=new FinderPatternInfo(test);\n    float dA=ResultPoint.distance(info.getTopLeft(),info.getBottomLeft());\n    float dC=ResultPoint.distance(info.getTopRight(),info.getBottomLeft());\n    float dB=ResultPoint.distance(info.getTopLeft(),info.getTopRight());\n    float estimatedModuleCount=(dA + dB) / (p1.getEstimatedModuleSize() * 2.0f);\n    if (estimatedModuleCount > MAX_MODULE_COUNT_PER_EDGE || estimatedModuleCount < MIN_MODULE_COUNT_PER_EDGE) {\n      continue;\n    }\n    float vABBC=Math.abs((dA - dB) / Math.min(dA,dB));\n    if (vABBC >= 0.1f) {\n      continue;\n    }\n    float dCpy=(float)Math.sqrt(dA * dA + dB * dB);\n    float vPyC=Math.abs((dC - dCpy) / Math.min(dC,dCpy));\n    if (vPyC >= 0.1f) {\n      continue;\n    }\n    results.add(test);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 293,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3042,
        "startLineNumber" : 154,
        "startColumnNumber" : 6,
        "endLineNumber" : 220,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i2=i1 + 1; i2 < (size - 1); i2++) {\n  FinderPattern p2=possibleCenters.get(i2);\n  if (p2 == null) {\n    continue;\n  }\n  float vModSize12=(p1.getEstimatedModuleSize() - p2.getEstimatedModuleSize()) / Math.min(p1.getEstimatedModuleSize(),p2.getEstimatedModuleSize());\n  float vModSize12A=Math.abs(p1.getEstimatedModuleSize() - p2.getEstimatedModuleSize());\n  if (vModSize12A > DIFF_MODSIZE_CUTOFF && vModSize12 >= DIFF_MODSIZE_CUTOFF_PERCENT) {\n    break;\n  }\n  for (int i3=i2 + 1; i3 < size; i3++) {\n    FinderPattern p3=possibleCenters.get(i3);\n    if (p3 == null) {\n      continue;\n    }\n    float vModSize23=(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize()) / Math.min(p2.getEstimatedModuleSize(),p3.getEstimatedModuleSize());\n    float vModSize23A=Math.abs(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize());\n    if (vModSize23A > DIFF_MODSIZE_CUTOFF && vModSize23 >= DIFF_MODSIZE_CUTOFF_PERCENT) {\n      break;\n    }\n    FinderPattern[] test={p1,p2,p3};\n    ResultPoint.orderBestPatterns(test);\n    FinderPatternInfo info=new FinderPatternInfo(test);\n    float dA=ResultPoint.distance(info.getTopLeft(),info.getBottomLeft());\n    float dC=ResultPoint.distance(info.getTopRight(),info.getBottomLeft());\n    float dB=ResultPoint.distance(info.getTopLeft(),info.getTopRight());\n    float estimatedModuleCount=(dA + dB) / (p1.getEstimatedModuleSize() * 2.0f);\n    if (estimatedModuleCount > MAX_MODULE_COUNT_PER_EDGE || estimatedModuleCount < MIN_MODULE_COUNT_PER_EDGE) {\n      continue;\n    }\n    float vABBC=Math.abs((dA - dB) / Math.min(dA,dB));\n    if (vABBC >= 0.1f) {\n      continue;\n    }\n    float dCpy=(float)Math.sqrt(dA * dA + dB * dB);\n    float vPyC=Math.abs((dC - dCpy) / Math.min(dC,dCpy));\n    if (vPyC >= 0.1f) {\n      continue;\n    }\n    results.add(test);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 309,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3182,
        "startLineNumber" : 148,
        "startColumnNumber" : 44,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FinderPattern p1=possibleCenters.get(i1);\n  if (p1 == null) {\n    continue;\n  }\n  for (int i2=i1 + 1; i2 < (size - 1); i2++) {\n    FinderPattern p2=possibleCenters.get(i2);\n    if (p2 == null) {\n      continue;\n    }\n    float vModSize12=(p1.getEstimatedModuleSize() - p2.getEstimatedModuleSize()) / Math.min(p1.getEstimatedModuleSize(),p2.getEstimatedModuleSize());\n    float vModSize12A=Math.abs(p1.getEstimatedModuleSize() - p2.getEstimatedModuleSize());\n    if (vModSize12A > DIFF_MODSIZE_CUTOFF && vModSize12 >= DIFF_MODSIZE_CUTOFF_PERCENT) {\n      break;\n    }\n    for (int i3=i2 + 1; i3 < size; i3++) {\n      FinderPattern p3=possibleCenters.get(i3);\n      if (p3 == null) {\n        continue;\n      }\n      float vModSize23=(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize()) / Math.min(p2.getEstimatedModuleSize(),p3.getEstimatedModuleSize());\n      float vModSize23A=Math.abs(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize());\n      if (vModSize23A > DIFF_MODSIZE_CUTOFF && vModSize23 >= DIFF_MODSIZE_CUTOFF_PERCENT) {\n        break;\n      }\n      FinderPattern[] test={p1,p2,p3};\n      ResultPoint.orderBestPatterns(test);\n      FinderPatternInfo info=new FinderPatternInfo(test);\n      float dA=ResultPoint.distance(info.getTopLeft(),info.getBottomLeft());\n      float dC=ResultPoint.distance(info.getTopRight(),info.getBottomLeft());\n      float dB=ResultPoint.distance(info.getTopLeft(),info.getTopRight());\n      float estimatedModuleCount=(dA + dB) / (p1.getEstimatedModuleSize() * 2.0f);\n      if (estimatedModuleCount > MAX_MODULE_COUNT_PER_EDGE || estimatedModuleCount < MIN_MODULE_COUNT_PER_EDGE) {\n        continue;\n      }\n      float vABBC=Math.abs((dA - dB) / Math.min(dA,dB));\n      if (vABBC >= 0.1f) {\n        continue;\n      }\n      float dCpy=(float)Math.sqrt(dA * dA + dB * dB);\n      float vPyC=Math.abs((dC - dCpy) / Math.min(dC,dCpy));\n      if (vPyC >= 0.1f) {\n        continue;\n      }\n      results.add(test);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3222,
        "startLineNumber" : 148,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i1=0; i1 < (size - 2); i1++) {\n  FinderPattern p1=possibleCenters.get(i1);\n  if (p1 == null) {\n    continue;\n  }\n  for (int i2=i1 + 1; i2 < (size - 1); i2++) {\n    FinderPattern p2=possibleCenters.get(i2);\n    if (p2 == null) {\n      continue;\n    }\n    float vModSize12=(p1.getEstimatedModuleSize() - p2.getEstimatedModuleSize()) / Math.min(p1.getEstimatedModuleSize(),p2.getEstimatedModuleSize());\n    float vModSize12A=Math.abs(p1.getEstimatedModuleSize() - p2.getEstimatedModuleSize());\n    if (vModSize12A > DIFF_MODSIZE_CUTOFF && vModSize12 >= DIFF_MODSIZE_CUTOFF_PERCENT) {\n      break;\n    }\n    for (int i3=i2 + 1; i3 < size; i3++) {\n      FinderPattern p3=possibleCenters.get(i3);\n      if (p3 == null) {\n        continue;\n      }\n      float vModSize23=(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize()) / Math.min(p2.getEstimatedModuleSize(),p3.getEstimatedModuleSize());\n      float vModSize23A=Math.abs(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize());\n      if (vModSize23A > DIFF_MODSIZE_CUTOFF && vModSize23 >= DIFF_MODSIZE_CUTOFF_PERCENT) {\n        break;\n      }\n      FinderPattern[] test={p1,p2,p3};\n      ResultPoint.orderBestPatterns(test);\n      FinderPatternInfo info=new FinderPatternInfo(test);\n      float dA=ResultPoint.distance(info.getTopLeft(),info.getBottomLeft());\n      float dC=ResultPoint.distance(info.getTopRight(),info.getBottomLeft());\n      float dB=ResultPoint.distance(info.getTopLeft(),info.getTopRight());\n      float estimatedModuleCount=(dA + dB) / (p1.getEstimatedModuleSize() * 2.0f);\n      if (estimatedModuleCount > MAX_MODULE_COUNT_PER_EDGE || estimatedModuleCount < MIN_MODULE_COUNT_PER_EDGE) {\n        continue;\n      }\n      float vABBC=Math.abs((dA - dB) / Math.min(dA,dB));\n      if (vABBC >= 0.1f) {\n        continue;\n      }\n      float dCpy=(float)Math.sqrt(dA * dA + dB * dB);\n      float vPyC=Math.abs((dC - dCpy) / Math.min(dC,dCpy));\n      if (vPyC >= 0.1f) {\n        continue;\n      }\n      results.add(test);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 339,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5166,
        "startLineNumber" : 106,
        "startColumnNumber" : 81,
        "endLineNumber" : 229,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<FinderPattern> possibleCenters=getPossibleCenters();\n  int size=possibleCenters.size();\n  if (size < 3) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (size == 3) {\n    return new FinderPattern[][]{new FinderPattern[]{possibleCenters.get(0),possibleCenters.get(1),possibleCenters.get(2)}};\n  }\n  Collections.sort(possibleCenters,new ModuleSizeComparator());\n  List<FinderPattern[]> results=new ArrayList<FinderPattern[]>();\n  for (int i1=0; i1 < (size - 2); i1++) {\n    FinderPattern p1=possibleCenters.get(i1);\n    if (p1 == null) {\n      continue;\n    }\n    for (int i2=i1 + 1; i2 < (size - 1); i2++) {\n      FinderPattern p2=possibleCenters.get(i2);\n      if (p2 == null) {\n        continue;\n      }\n      float vModSize12=(p1.getEstimatedModuleSize() - p2.getEstimatedModuleSize()) / Math.min(p1.getEstimatedModuleSize(),p2.getEstimatedModuleSize());\n      float vModSize12A=Math.abs(p1.getEstimatedModuleSize() - p2.getEstimatedModuleSize());\n      if (vModSize12A > DIFF_MODSIZE_CUTOFF && vModSize12 >= DIFF_MODSIZE_CUTOFF_PERCENT) {\n        break;\n      }\n      for (int i3=i2 + 1; i3 < size; i3++) {\n        FinderPattern p3=possibleCenters.get(i3);\n        if (p3 == null) {\n          continue;\n        }\n        float vModSize23=(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize()) / Math.min(p2.getEstimatedModuleSize(),p3.getEstimatedModuleSize());\n        float vModSize23A=Math.abs(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize());\n        if (vModSize23A > DIFF_MODSIZE_CUTOFF && vModSize23 >= DIFF_MODSIZE_CUTOFF_PERCENT) {\n          break;\n        }\n        FinderPattern[] test={p1,p2,p3};\n        ResultPoint.orderBestPatterns(test);\n        FinderPatternInfo info=new FinderPatternInfo(test);\n        float dA=ResultPoint.distance(info.getTopLeft(),info.getBottomLeft());\n        float dC=ResultPoint.distance(info.getTopRight(),info.getBottomLeft());\n        float dB=ResultPoint.distance(info.getTopLeft(),info.getTopRight());\n        float estimatedModuleCount=(dA + dB) / (p1.getEstimatedModuleSize() * 2.0f);\n        if (estimatedModuleCount > MAX_MODULE_COUNT_PER_EDGE || estimatedModuleCount < MIN_MODULE_COUNT_PER_EDGE) {\n          continue;\n        }\n        float vABBC=Math.abs((dA - dB) / Math.min(dA,dB));\n        if (vABBC >= 0.1f) {\n          continue;\n        }\n        float dCpy=(float)Math.sqrt(dA * dA + dB * dB);\n        float vPyC=Math.abs((dC - dCpy) / Math.min(dC,dCpy));\n        if (vPyC >= 0.1f) {\n          continue;\n        }\n        results.add(test);\n      }\n    }\n  }\n  if (!results.isEmpty()) {\n    return results.toArray(new FinderPattern[results.size()][]);\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 446,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5597,
        "startLineNumber" : 100,
        "startColumnNumber" : 2,
        "endLineNumber" : 229,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @return the 3 best {@link FinderPattern}s from our list of candidates. The \"best\" are those that have been detected at least  {@link #CENTER_QUORUM} times, and whose modulesize differs from the average among those patterns the least\n * @throws NotFoundException if 3 such finder patterns do not exist\n */\nprivate FinderPattern[][] selectMutipleBestPatterns() throws NotFoundException {\n  List<FinderPattern> possibleCenters=getPossibleCenters();\n  int size=possibleCenters.size();\n  if (size < 3) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (size == 3) {\n    return new FinderPattern[][]{new FinderPattern[]{possibleCenters.get(0),possibleCenters.get(1),possibleCenters.get(2)}};\n  }\n  Collections.sort(possibleCenters,new ModuleSizeComparator());\n  List<FinderPattern[]> results=new ArrayList<FinderPattern[]>();\n  for (int i1=0; i1 < (size - 2); i1++) {\n    FinderPattern p1=possibleCenters.get(i1);\n    if (p1 == null) {\n      continue;\n    }\n    for (int i2=i1 + 1; i2 < (size - 1); i2++) {\n      FinderPattern p2=possibleCenters.get(i2);\n      if (p2 == null) {\n        continue;\n      }\n      float vModSize12=(p1.getEstimatedModuleSize() - p2.getEstimatedModuleSize()) / Math.min(p1.getEstimatedModuleSize(),p2.getEstimatedModuleSize());\n      float vModSize12A=Math.abs(p1.getEstimatedModuleSize() - p2.getEstimatedModuleSize());\n      if (vModSize12A > DIFF_MODSIZE_CUTOFF && vModSize12 >= DIFF_MODSIZE_CUTOFF_PERCENT) {\n        break;\n      }\n      for (int i3=i2 + 1; i3 < size; i3++) {\n        FinderPattern p3=possibleCenters.get(i3);\n        if (p3 == null) {\n          continue;\n        }\n        float vModSize23=(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize()) / Math.min(p2.getEstimatedModuleSize(),p3.getEstimatedModuleSize());\n        float vModSize23A=Math.abs(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize());\n        if (vModSize23A > DIFF_MODSIZE_CUTOFF && vModSize23 >= DIFF_MODSIZE_CUTOFF_PERCENT) {\n          break;\n        }\n        FinderPattern[] test={p1,p2,p3};\n        ResultPoint.orderBestPatterns(test);\n        FinderPatternInfo info=new FinderPatternInfo(test);\n        float dA=ResultPoint.distance(info.getTopLeft(),info.getBottomLeft());\n        float dC=ResultPoint.distance(info.getTopRight(),info.getBottomLeft());\n        float dB=ResultPoint.distance(info.getTopLeft(),info.getTopRight());\n        float estimatedModuleCount=(dA + dB) / (p1.getEstimatedModuleSize() * 2.0f);\n        if (estimatedModuleCount > MAX_MODULE_COUNT_PER_EDGE || estimatedModuleCount < MIN_MODULE_COUNT_PER_EDGE) {\n          continue;\n        }\n        float vABBC=Math.abs((dA - dB) / Math.min(dA,dB));\n        if (vABBC >= 0.1f) {\n          continue;\n        }\n        float dCpy=(float)Math.sqrt(dA * dA + dB * dB);\n        float vPyC=Math.abs((dC - dCpy) / Math.min(dC,dCpy));\n        if (vPyC >= 0.1f) {\n          continue;\n        }\n        results.add(test);\n      }\n    }\n  }\n  if (!results.isEmpty()) {\n    return results.toArray(new FinderPattern[results.size()][]);\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 457,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 177,
        "startColumnNumber" : 10,
        "endLineNumber" : 178,
        "endColumnNumber" : 81
      },
      "nodeContext" : "float vModSize23=(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize()) / Math.min(p2.getEstimatedModuleSize(),p3.getEstimatedModuleSize());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    },
    "tokenLength" : 12,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 143,
    "startLineNumber" : 177,
    "startColumnNumber" : 29,
    "endLineNumber" : 178,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}