{
  "id" : 474,
  "expression" : "l",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/test/java/org/redisson/RedissonTransferQueueTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "l",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 100,
      "startColumnNumber" : 31,
      "endLineNumber" : 100,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 33
      },
      "nodeContext" : "Assert.assertEquals(3,l)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 34
      },
      "nodeContext" : "Assert.assertEquals(3,l);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 84,
        "startColumnNumber" : 82,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RTransferQueue<Integer> queue1=redisson.getTransferQueue(\"queue\");\n  AtomicBoolean takeExecuted=new AtomicBoolean();\n  ScheduledFuture<?> f=Executors.newSingleThreadScheduledExecutor().schedule(() -> {\n    RTransferQueue<Integer> queue=redisson.getTransferQueue(\"queue\");\n    boolean res=queue.tryTransfer(3);\n    assertThat(takeExecuted.get()).isTrue();\n    assertThat(res).isTrue();\n    boolean res2=queue.tryTransfer(4);\n    assertThat(res2).isFalse();\n  }\n,4,TimeUnit.SECONDS);\n  long s=System.currentTimeMillis();\n  int l=queue1.take();\n  takeExecuted.set(true);\n  Assert.assertEquals(3,l);\n  Assert.assertTrue(System.currentTimeMillis() - s > 3900);\n  f.get();\n  assertThat(queue1.size()).isZero();\n  assertThat(queue1.peek()).isNull();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 143,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 980,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTryTransfer() throws InterruptedException, ExecutionException {\n  RTransferQueue<Integer> queue1=redisson.getTransferQueue(\"queue\");\n  AtomicBoolean takeExecuted=new AtomicBoolean();\n  ScheduledFuture<?> f=Executors.newSingleThreadScheduledExecutor().schedule(() -> {\n    RTransferQueue<Integer> queue=redisson.getTransferQueue(\"queue\");\n    boolean res=queue.tryTransfer(3);\n    assertThat(takeExecuted.get()).isTrue();\n    assertThat(res).isTrue();\n    boolean res2=queue.tryTransfer(4);\n    assertThat(res2).isFalse();\n  }\n,4,TimeUnit.SECONDS);\n  long s=System.currentTimeMillis();\n  int l=queue1.take();\n  takeExecuted.set(true);\n  Assert.assertEquals(3,l);\n  Assert.assertTrue(System.currentTimeMillis() - s > 3900);\n  f.get();\n  assertThat(queue1.size()).isZero();\n  assertThat(queue1.peek()).isNull();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 153,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 34
      },
      "nodeContext" : "Assert.assertEquals(3,l);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 100,
    "startColumnNumber" : 31,
    "endLineNumber" : 100,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}