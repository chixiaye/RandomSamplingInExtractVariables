{
  "id" : 415,
  "expression" : "span",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "738dd0ee18a142d3fe69fc5f16889ac770188c93",
  "filePath" : "java/server/src/org/openqa/selenium/grid/sessionmap/jdbc/JdbcBackedSessionMap.java",
  "occurrences" : 14,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "span",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 168,
      "startColumnNumber" : 24,
      "endLineNumber" : 168,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 168,
        "startColumnNumber" : 6,
        "endLineNumber" : 168,
        "endColumnNumber" : 33
      },
      "nodeContext" : "SESSION_ID.accept(span,id)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 168,
        "startColumnNumber" : 6,
        "endLineNumber" : 168,
        "endColumnNumber" : 34
      },
      "nodeContext" : "SESSION_ID.accept(span,id);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 168,
        "startColumnNumber" : 6,
        "endLineNumber" : 168,
        "endColumnNumber" : 34
      },
      "nodeContext" : "SESSION_ID.accept(span,id);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.Span"
  }, {
    "nodeContext" : "span",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 170,
      "startColumnNumber" : 30,
      "endLineNumber" : 170,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 170,
        "startColumnNumber" : 6,
        "endLineNumber" : 170,
        "endColumnNumber" : 35
      },
      "nodeContext" : "setCommonSpanAttributes(span)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 170,
        "startColumnNumber" : 6,
        "endLineNumber" : 170,
        "endColumnNumber" : 36
      },
      "nodeContext" : "setCommonSpanAttributes(span);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 170,
        "startColumnNumber" : 6,
        "endLineNumber" : 170,
        "endColumnNumber" : 36
      },
      "nodeContext" : "setCommonSpanAttributes(span);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.Span"
  }, {
    "nodeContext" : "span",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 175,
      "startColumnNumber" : 8,
      "endLineNumber" : 175,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 175,
        "endColumnNumber" : 59
      },
      "nodeContext" : "span.setAttribute(DATABASE_STATEMENT,statementStr)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 175,
        "endColumnNumber" : 60
      },
      "nodeContext" : "span.setAttribute(DATABASE_STATEMENT,statementStr);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 175,
        "endColumnNumber" : 60
      },
      "nodeContext" : "span.setAttribute(DATABASE_STATEMENT,statementStr);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.Span"
  }, {
    "nodeContext" : "span",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 176,
      "startColumnNumber" : 8,
      "endLineNumber" : 176,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 55
      },
      "nodeContext" : "span.setAttribute(DATABASE_OPERATION,\"select\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 56
      },
      "nodeContext" : "span.setAttribute(DATABASE_OPERATION,\"select\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 56
      },
      "nodeContext" : "span.setAttribute(DATABASE_OPERATION,\"select\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.Span"
  }, {
    "nodeContext" : "span",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 185,
      "startColumnNumber" : 12,
      "endLineNumber" : 185,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 185,
        "startColumnNumber" : 12,
        "endLineNumber" : 185,
        "endColumnNumber" : 44
      },
      "nodeContext" : "span.setAttribute(\"error\",true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 185,
        "startColumnNumber" : 12,
        "endLineNumber" : 185,
        "endColumnNumber" : 45
      },
      "nodeContext" : "span.setAttribute(\"error\",true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 673,
        "startLineNumber" : 181,
        "startColumnNumber" : 32,
        "endLineNumber" : 195,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.NOT_FOUND);\n  EXCEPTION.accept(attributeMap,exception);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 695,
        "startLineNumber" : 181,
        "startColumnNumber" : 10,
        "endLineNumber" : 195,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (!sessions.next()) {\n  NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.NOT_FOUND);\n  EXCEPTION.accept(attributeMap,exception);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 180,
        "startColumnNumber" : 60,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!sessions.next()) {\n    NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  rawUri=sessions.getString(SESSION_URI_COL);\n  String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n  caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1058,
        "startLineNumber" : 180,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (ResultSet sessions=statement.executeQuery()){\n  if (!sessions.next()) {\n    NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  rawUri=sessions.getString(SESSION_URI_COL);\n  String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n  caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 185,
        "startColumnNumber" : 12,
        "endLineNumber" : 185,
        "endColumnNumber" : 45
      },
      "nodeContext" : "span.setAttribute(\"error\",true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.Span"
  }, {
    "nodeContext" : "span",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 186,
      "startColumnNumber" : 12,
      "endLineNumber" : 186,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 186,
        "startColumnNumber" : 12,
        "endLineNumber" : 186,
        "endColumnNumber" : 44
      },
      "nodeContext" : "span.setStatus(Status.NOT_FOUND)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 186,
        "startColumnNumber" : 12,
        "endLineNumber" : 186,
        "endColumnNumber" : 45
      },
      "nodeContext" : "span.setStatus(Status.NOT_FOUND);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 673,
        "startLineNumber" : 181,
        "startColumnNumber" : 32,
        "endLineNumber" : 195,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.NOT_FOUND);\n  EXCEPTION.accept(attributeMap,exception);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 695,
        "startLineNumber" : 181,
        "startColumnNumber" : 10,
        "endLineNumber" : 195,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (!sessions.next()) {\n  NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.NOT_FOUND);\n  EXCEPTION.accept(attributeMap,exception);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 180,
        "startColumnNumber" : 60,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!sessions.next()) {\n    NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  rawUri=sessions.getString(SESSION_URI_COL);\n  String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n  caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1058,
        "startLineNumber" : 180,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (ResultSet sessions=statement.executeQuery()){\n  if (!sessions.next()) {\n    NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  rawUri=sessions.getString(SESSION_URI_COL);\n  String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n  caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 186,
        "startColumnNumber" : 12,
        "endLineNumber" : 186,
        "endColumnNumber" : 45
      },
      "nodeContext" : "span.setStatus(Status.NOT_FOUND);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.Span"
  }, {
    "nodeContext" : "span",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 192,
      "startColumnNumber" : 12,
      "endLineNumber" : 192,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 192,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 78
      },
      "nodeContext" : "span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 192,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 79
      },
      "nodeContext" : "span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 673,
        "startLineNumber" : 181,
        "startColumnNumber" : 32,
        "endLineNumber" : 195,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.NOT_FOUND);\n  EXCEPTION.accept(attributeMap,exception);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 695,
        "startLineNumber" : 181,
        "startColumnNumber" : 10,
        "endLineNumber" : 195,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (!sessions.next()) {\n  NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.NOT_FOUND);\n  EXCEPTION.accept(attributeMap,exception);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 180,
        "startColumnNumber" : 60,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!sessions.next()) {\n    NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  rawUri=sessions.getString(SESSION_URI_COL);\n  String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n  caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1058,
        "startLineNumber" : 180,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (ResultSet sessions=statement.executeQuery()){\n  if (!sessions.next()) {\n    NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  rawUri=sessions.getString(SESSION_URI_COL);\n  String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n  caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 192,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 79
      },
      "nodeContext" : "span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.Span"
  }, {
    "nodeContext" : "span",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 211,
      "startColumnNumber" : 10,
      "endLineNumber" : 211,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 211,
        "startColumnNumber" : 10,
        "endLineNumber" : 211,
        "endColumnNumber" : 42
      },
      "nodeContext" : "span.setAttribute(\"error\",true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 211,
        "startColumnNumber" : 10,
        "endLineNumber" : 211,
        "endColumnNumber" : 43
      },
      "nodeContext" : "span.setAttribute(\"error\",true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 634,
        "startLineNumber" : 210,
        "startColumnNumber" : 39,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.INTERNAL);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 663,
        "startLineNumber" : 210,
        "startColumnNumber" : 10,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (URISyntaxException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.INTERNAL);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 76,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 207,
        "startColumnNumber" : 8,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  uri=new URI(rawUri);\n}\n catch (URISyntaxException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.INTERNAL);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 98,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 211,
        "startColumnNumber" : 10,
        "endLineNumber" : 211,
        "endColumnNumber" : 43
      },
      "nodeContext" : "span.setAttribute(\"error\",true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.Span"
  }, {
    "nodeContext" : "span",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 212,
      "startColumnNumber" : 10,
      "endLineNumber" : 212,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 212,
        "startColumnNumber" : 10,
        "endLineNumber" : 212,
        "endColumnNumber" : 41
      },
      "nodeContext" : "span.setStatus(Status.INTERNAL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 212,
        "startColumnNumber" : 10,
        "endLineNumber" : 212,
        "endColumnNumber" : 42
      },
      "nodeContext" : "span.setStatus(Status.INTERNAL);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 634,
        "startLineNumber" : 210,
        "startColumnNumber" : 39,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.INTERNAL);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 663,
        "startLineNumber" : 210,
        "startColumnNumber" : 10,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (URISyntaxException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.INTERNAL);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 76,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 207,
        "startColumnNumber" : 8,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  uri=new URI(rawUri);\n}\n catch (URISyntaxException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.INTERNAL);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 98,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 212,
        "startColumnNumber" : 10,
        "endLineNumber" : 212,
        "endColumnNumber" : 42
      },
      "nodeContext" : "span.setStatus(Status.INTERNAL);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.Span"
  }, {
    "nodeContext" : "span",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 217,
      "startColumnNumber" : 10,
      "endLineNumber" : 217,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 217,
        "startColumnNumber" : 10,
        "endLineNumber" : 217,
        "endColumnNumber" : 76
      },
      "nodeContext" : "span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 217,
        "startColumnNumber" : 10,
        "endLineNumber" : 217,
        "endColumnNumber" : 77
      },
      "nodeContext" : "span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 634,
        "startLineNumber" : 210,
        "startColumnNumber" : 39,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.INTERNAL);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 663,
        "startLineNumber" : 210,
        "startColumnNumber" : 10,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (URISyntaxException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.INTERNAL);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 76,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 207,
        "startColumnNumber" : 8,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  uri=new URI(rawUri);\n}\n catch (URISyntaxException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.INTERNAL);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 98,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 217,
        "startColumnNumber" : 10,
        "endLineNumber" : 217,
        "endColumnNumber" : 77
      },
      "nodeContext" : "span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.Span"
  }, {
    "nodeContext" : "span",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 223,
      "startColumnNumber" : 8,
      "endLineNumber" : 223,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 223,
        "startColumnNumber" : 8,
        "endLineNumber" : 223,
        "endColumnNumber" : 74
      },
      "nodeContext" : "span.addEvent(\"Retrieved session from the database\",attributeMap)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 223,
        "startColumnNumber" : 8,
        "endLineNumber" : 223,
        "endColumnNumber" : 75
      },
      "nodeContext" : "span.addEvent(\"Retrieved session from the database\",attributeMap);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 223,
        "startColumnNumber" : 8,
        "endLineNumber" : 223,
        "endColumnNumber" : 75
      },
      "nodeContext" : "span.addEvent(\"Retrieved session from the database\",attributeMap);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.Span"
  }, {
    "nodeContext" : "span",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 226,
      "startColumnNumber" : 8,
      "endLineNumber" : 226,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 226,
        "startColumnNumber" : 8,
        "endLineNumber" : 226,
        "endColumnNumber" : 40
      },
      "nodeContext" : "span.setAttribute(\"error\",true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 226,
        "startColumnNumber" : 8,
        "endLineNumber" : 226,
        "endColumnNumber" : 41
      },
      "nodeContext" : "span.setAttribute(\"error\",true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 439,
        "startLineNumber" : 225,
        "startColumnNumber" : 31,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 462,
        "startLineNumber" : 225,
        "startColumnNumber" : 8,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 57,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 226,
        "startColumnNumber" : 8,
        "endLineNumber" : 226,
        "endColumnNumber" : 41
      },
      "nodeContext" : "span.setAttribute(\"error\",true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.Span"
  }, {
    "nodeContext" : "span",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 227,
      "startColumnNumber" : 8,
      "endLineNumber" : 227,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 227,
        "startColumnNumber" : 8,
        "endLineNumber" : 227,
        "endColumnNumber" : 40
      },
      "nodeContext" : "span.setStatus(Status.CANCELLED)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 227,
        "startColumnNumber" : 8,
        "endLineNumber" : 227,
        "endColumnNumber" : 41
      },
      "nodeContext" : "span.setStatus(Status.CANCELLED);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 439,
        "startLineNumber" : 225,
        "startColumnNumber" : 31,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 462,
        "startLineNumber" : 225,
        "startColumnNumber" : 8,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 57,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 227,
        "startColumnNumber" : 8,
        "endLineNumber" : 227,
        "endColumnNumber" : 41
      },
      "nodeContext" : "span.setStatus(Status.CANCELLED);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.Span"
  }, {
    "nodeContext" : "span",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 231,
      "startColumnNumber" : 8,
      "endLineNumber" : 231,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 231,
        "startColumnNumber" : 8,
        "endLineNumber" : 231,
        "endColumnNumber" : 74
      },
      "nodeContext" : "span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 231,
        "startColumnNumber" : 8,
        "endLineNumber" : 231,
        "endColumnNumber" : 75
      },
      "nodeContext" : "span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 439,
        "startLineNumber" : 225,
        "startColumnNumber" : 31,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 462,
        "startLineNumber" : 225,
        "startColumnNumber" : 8,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 57,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 231,
        "startColumnNumber" : 8,
        "endLineNumber" : 231,
        "endColumnNumber" : 75
      },
      "nodeContext" : "span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.Span"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 168,
    "startColumnNumber" : 24,
    "endLineNumber" : 168,
    "endColumnNumber" : 28
  }, {
    "charLength" : 4,
    "startLineNumber" : 170,
    "startColumnNumber" : 30,
    "endLineNumber" : 170,
    "endColumnNumber" : 34
  }, {
    "charLength" : 4,
    "startLineNumber" : 175,
    "startColumnNumber" : 8,
    "endLineNumber" : 175,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 176,
    "startColumnNumber" : 8,
    "endLineNumber" : 176,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 185,
    "startColumnNumber" : 12,
    "endLineNumber" : 185,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 186,
    "startColumnNumber" : 12,
    "endLineNumber" : 186,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 192,
    "startColumnNumber" : 12,
    "endLineNumber" : 192,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 211,
    "startColumnNumber" : 10,
    "endLineNumber" : 211,
    "endColumnNumber" : 14
  }, {
    "charLength" : 4,
    "startLineNumber" : 212,
    "startColumnNumber" : 10,
    "endLineNumber" : 212,
    "endColumnNumber" : 14
  }, {
    "charLength" : 4,
    "startLineNumber" : 217,
    "startColumnNumber" : 10,
    "endLineNumber" : 217,
    "endColumnNumber" : 14
  }, {
    "charLength" : 4,
    "startLineNumber" : 223,
    "startColumnNumber" : 8,
    "endLineNumber" : 223,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 226,
    "startColumnNumber" : 8,
    "endLineNumber" : 226,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 227,
    "startColumnNumber" : 8,
    "endLineNumber" : 227,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 231,
    "startColumnNumber" : 8,
    "endLineNumber" : 231,
    "endColumnNumber" : 12
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 2
  } ]
}