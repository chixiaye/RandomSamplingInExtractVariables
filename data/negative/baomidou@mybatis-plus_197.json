{
  "id" : 197,
  "expression" : "results",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "7815611a659da4cc8d5443f5ef4c10ca0d937582",
  "filePath" : "/mybatis-plus-core/src/test/java/com/baomidou/mybatisplus/test/IdWorkerTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "results",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 73,
      "startColumnNumber" : 12,
      "endLineNumber" : 73,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 37
      },
      "nodeContext" : "results.add(future.get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 38
      },
      "nodeContext" : "results.add(future.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 289,
        "startLineNumber" : 66,
        "startColumnNumber" : 40,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Future<Long> future=executorService.submit(new Callable<Long>(){\n    @Override public Long call() throws Exception {\n      return IdWorker.getId();\n    }\n  }\n);\n  results.add(future.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 321,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < count; i++) {\n  Future<Long> future=executorService.submit(new Callable<Long>(){\n    @Override public Long call() throws Exception {\n      return IdWorker.getId();\n    }\n  }\n);\n  results.add(future.get());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 51,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1366,
        "startLineNumber" : 51,
        "startColumnNumber" : 40,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int count=1000;\n  System.err.println(\"共有\" + count + \"个数参与测试\");\n  ExecutorService executorService=Executors.newFixedThreadPool(20);\n  final List<Long> results=new ArrayList<>();\n  CompletionService<Long> cs=new ExecutorCompletionService<>(executorService);\n  for (int i=1; i < count; i++) {\n    cs.submit(new Callable<Long>(){\n      public Long call() throws Exception {\n        Thread.sleep(RandomUtils.nextInt(1,2000));\n        return IdWorker.getId();\n      }\n    }\n);\n  }\n  for (int i=0; i < count; i++) {\n    Future<Long> future=executorService.submit(new Callable<Long>(){\n      @Override public Long call() throws Exception {\n        return IdWorker.getId();\n      }\n    }\n);\n    results.add(future.get());\n  }\n  executorService.shutdown();\n  HashSet<Long> set=new HashSet<>(results);\n  Assert.assertEquals(count,set.size());\n  int odd=0;\n  int even=0;\n  for (  Long id : results) {\n    if (id % 2 != 0) {\n      odd++;\n    }\n else {\n      even++;\n    }\n  }\n  System.err.println(\"奇数:\" + odd);\n  System.err.println(\"偶数:\" + even);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1402,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test() throws Exception {\n  int count=1000;\n  System.err.println(\"共有\" + count + \"个数参与测试\");\n  ExecutorService executorService=Executors.newFixedThreadPool(20);\n  final List<Long> results=new ArrayList<>();\n  CompletionService<Long> cs=new ExecutorCompletionService<>(executorService);\n  for (int i=1; i < count; i++) {\n    cs.submit(new Callable<Long>(){\n      public Long call() throws Exception {\n        Thread.sleep(RandomUtils.nextInt(1,2000));\n        return IdWorker.getId();\n      }\n    }\n);\n  }\n  for (int i=0; i < count; i++) {\n    Future<Long> future=executorService.submit(new Callable<Long>(){\n      @Override public Long call() throws Exception {\n        return IdWorker.getId();\n      }\n    }\n);\n    results.add(future.get());\n  }\n  executorService.shutdown();\n  HashSet<Long> set=new HashSet<>(results);\n  Assert.assertEquals(count,set.size());\n  int odd=0;\n  int even=0;\n  for (  Long id : results) {\n    if (id % 2 != 0) {\n      odd++;\n    }\n else {\n      even++;\n    }\n  }\n  System.err.println(\"奇数:\" + odd);\n  System.err.println(\"偶数:\" + even);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 226,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 38
      },
      "nodeContext" : "results.add(future.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.Long>"
  }, {
    "nodeContext" : "results",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 76,
      "startColumnNumber" : 42,
      "endLineNumber" : 76,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 76,
        "startColumnNumber" : 28,
        "endLineNumber" : 76,
        "endColumnNumber" : 50
      },
      "nodeContext" : "new HashSet<>(results)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 76,
        "startColumnNumber" : 22,
        "endLineNumber" : 76,
        "endColumnNumber" : 50
      },
      "nodeContext" : "set=new HashSet<>(results)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 51
      },
      "nodeContext" : "HashSet<Long> set=new HashSet<>(results);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1366,
        "startLineNumber" : 51,
        "startColumnNumber" : 40,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int count=1000;\n  System.err.println(\"共有\" + count + \"个数参与测试\");\n  ExecutorService executorService=Executors.newFixedThreadPool(20);\n  final List<Long> results=new ArrayList<>();\n  CompletionService<Long> cs=new ExecutorCompletionService<>(executorService);\n  for (int i=1; i < count; i++) {\n    cs.submit(new Callable<Long>(){\n      public Long call() throws Exception {\n        Thread.sleep(RandomUtils.nextInt(1,2000));\n        return IdWorker.getId();\n      }\n    }\n);\n  }\n  for (int i=0; i < count; i++) {\n    Future<Long> future=executorService.submit(new Callable<Long>(){\n      @Override public Long call() throws Exception {\n        return IdWorker.getId();\n      }\n    }\n);\n    results.add(future.get());\n  }\n  executorService.shutdown();\n  HashSet<Long> set=new HashSet<>(results);\n  Assert.assertEquals(count,set.size());\n  int odd=0;\n  int even=0;\n  for (  Long id : results) {\n    if (id % 2 != 0) {\n      odd++;\n    }\n else {\n      even++;\n    }\n  }\n  System.err.println(\"奇数:\" + odd);\n  System.err.println(\"偶数:\" + even);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1402,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test() throws Exception {\n  int count=1000;\n  System.err.println(\"共有\" + count + \"个数参与测试\");\n  ExecutorService executorService=Executors.newFixedThreadPool(20);\n  final List<Long> results=new ArrayList<>();\n  CompletionService<Long> cs=new ExecutorCompletionService<>(executorService);\n  for (int i=1; i < count; i++) {\n    cs.submit(new Callable<Long>(){\n      public Long call() throws Exception {\n        Thread.sleep(RandomUtils.nextInt(1,2000));\n        return IdWorker.getId();\n      }\n    }\n);\n  }\n  for (int i=0; i < count; i++) {\n    Future<Long> future=executorService.submit(new Callable<Long>(){\n      @Override public Long call() throws Exception {\n        return IdWorker.getId();\n      }\n    }\n);\n    results.add(future.get());\n  }\n  executorService.shutdown();\n  HashSet<Long> set=new HashSet<>(results);\n  Assert.assertEquals(count,set.size());\n  int odd=0;\n  int even=0;\n  for (  Long id : results) {\n    if (id % 2 != 0) {\n      odd++;\n    }\n else {\n      even++;\n    }\n  }\n  System.err.println(\"奇数:\" + odd);\n  System.err.println(\"偶数:\" + even);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 226,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 51
      },
      "nodeContext" : "HashSet<Long> set=new HashSet<>(results);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.Long>"
  }, {
    "nodeContext" : "results",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 81,
      "startColumnNumber" : 23,
      "endLineNumber" : 81,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Long id : results) {\n  if (id % 2 != 0) {\n    odd++;\n  }\n else {\n    even++;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1366,
        "startLineNumber" : 51,
        "startColumnNumber" : 40,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int count=1000;\n  System.err.println(\"共有\" + count + \"个数参与测试\");\n  ExecutorService executorService=Executors.newFixedThreadPool(20);\n  final List<Long> results=new ArrayList<>();\n  CompletionService<Long> cs=new ExecutorCompletionService<>(executorService);\n  for (int i=1; i < count; i++) {\n    cs.submit(new Callable<Long>(){\n      public Long call() throws Exception {\n        Thread.sleep(RandomUtils.nextInt(1,2000));\n        return IdWorker.getId();\n      }\n    }\n);\n  }\n  for (int i=0; i < count; i++) {\n    Future<Long> future=executorService.submit(new Callable<Long>(){\n      @Override public Long call() throws Exception {\n        return IdWorker.getId();\n      }\n    }\n);\n    results.add(future.get());\n  }\n  executorService.shutdown();\n  HashSet<Long> set=new HashSet<>(results);\n  Assert.assertEquals(count,set.size());\n  int odd=0;\n  int even=0;\n  for (  Long id : results) {\n    if (id % 2 != 0) {\n      odd++;\n    }\n else {\n      even++;\n    }\n  }\n  System.err.println(\"奇数:\" + odd);\n  System.err.println(\"偶数:\" + even);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1402,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test() throws Exception {\n  int count=1000;\n  System.err.println(\"共有\" + count + \"个数参与测试\");\n  ExecutorService executorService=Executors.newFixedThreadPool(20);\n  final List<Long> results=new ArrayList<>();\n  CompletionService<Long> cs=new ExecutorCompletionService<>(executorService);\n  for (int i=1; i < count; i++) {\n    cs.submit(new Callable<Long>(){\n      public Long call() throws Exception {\n        Thread.sleep(RandomUtils.nextInt(1,2000));\n        return IdWorker.getId();\n      }\n    }\n);\n  }\n  for (int i=0; i < count; i++) {\n    Future<Long> future=executorService.submit(new Callable<Long>(){\n      @Override public Long call() throws Exception {\n        return IdWorker.getId();\n      }\n    }\n);\n    results.add(future.get());\n  }\n  executorService.shutdown();\n  HashSet<Long> set=new HashSet<>(results);\n  Assert.assertEquals(count,set.size());\n  int odd=0;\n  int even=0;\n  for (  Long id : results) {\n    if (id % 2 != 0) {\n      odd++;\n    }\n else {\n      even++;\n    }\n  }\n  System.err.println(\"奇数:\" + odd);\n  System.err.println(\"偶数:\" + even);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 226,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Long id : results) {\n  if (id % 2 != 0) {\n    odd++;\n  }\n else {\n    even++;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.Long>"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 73,
    "startColumnNumber" : 12,
    "endLineNumber" : 73,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 76,
    "startColumnNumber" : 42,
    "endLineNumber" : 76,
    "endColumnNumber" : 49
  }, {
    "charLength" : 7,
    "startLineNumber" : 81,
    "startColumnNumber" : 23,
    "endLineNumber" : 81,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  } ]
}