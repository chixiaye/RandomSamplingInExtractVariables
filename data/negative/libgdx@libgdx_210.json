{
  "id" : 210,
  "expression" : "written",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/OpenALAudioDevice.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "written",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 102,
      "startColumnNumber" : 33,
      "endLineNumber" : 102,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 41
      },
      "nodeContext" : "tempBuffer.put(data,offset,written)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 48
      },
      "nodeContext" : "tempBuffer.put(data,offset,written).flip()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 49
      },
      "nodeContext" : "tempBuffer.put(data,offset,written).flip();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 346,
        "startLineNumber" : 98,
        "startColumnNumber" : 41,
        "endLineNumber" : 108,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  int bufferID=buffers.get(i);\n  int written=Math.min(bufferSize,length);\n  tempBuffer.clear();\n  tempBuffer.put(data,offset,written).flip();\n  alBufferData(bufferID,format,tempBuffer,sampleRate);\n  alSourceQueueBuffers(sourceID,bufferID);\n  length-=written;\n  offset+=written;\n  queuedBuffers++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 384,
        "startLineNumber" : 98,
        "startColumnNumber" : 3,
        "endLineNumber" : 108,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < bufferCount; i++) {\n  int bufferID=buffers.get(i);\n  int written=Math.min(bufferSize,length);\n  tempBuffer.clear();\n  tempBuffer.put(data,offset,written).flip();\n  alBufferData(bufferID,format,tempBuffer,sampleRate);\n  alSourceQueueBuffers(sourceID,bufferID);\n  length-=written;\n  offset+=written;\n  queuedBuffers++;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 65,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1160,
        "startLineNumber" : 86,
        "startColumnNumber" : 22,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  sourceID=audio.obtainSource(true);\n  if (sourceID == -1)   return;\n  if (buffers == null) {\n    buffers=BufferUtils.createIntBuffer(bufferCount);\n    alGenBuffers(buffers);\n    if (alGetError() != AL_NO_ERROR)     throw new GdxRuntimeException(\"Unabe to allocate audio buffers.\");\n  }\n  alSourcei(sourceID,AL_LOOPING,AL_FALSE);\n  alSourcef(sourceID,AL_GAIN,volume);\n  int queuedBuffers=0;\n  for (int i=0; i < bufferCount; i++) {\n    int bufferID=buffers.get(i);\n    int written=Math.min(bufferSize,length);\n    tempBuffer.clear();\n    tempBuffer.put(data,offset,written).flip();\n    alBufferData(bufferID,format,tempBuffer,sampleRate);\n    alSourceQueueBuffers(sourceID,bufferID);\n    length-=written;\n    offset+=written;\n    queuedBuffers++;\n  }\n  tempBuffer.clear().flip();\n  for (int i=queuedBuffers; i < bufferCount; i++) {\n    int bufferID=buffers.get(i);\n    alBufferData(bufferID,format,tempBuffer,sampleRate);\n    alSourceQueueBuffers(sourceID,bufferID);\n  }\n  alSourcePlay(sourceID);\n  isPlaying=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1180,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (sourceID == -1) {\n  sourceID=audio.obtainSource(true);\n  if (sourceID == -1)   return;\n  if (buffers == null) {\n    buffers=BufferUtils.createIntBuffer(bufferCount);\n    alGenBuffers(buffers);\n    if (alGetError() != AL_NO_ERROR)     throw new GdxRuntimeException(\"Unabe to allocate audio buffers.\");\n  }\n  alSourcei(sourceID,AL_LOOPING,AL_FALSE);\n  alSourcef(sourceID,AL_GAIN,volume);\n  int queuedBuffers=0;\n  for (int i=0; i < bufferCount; i++) {\n    int bufferID=buffers.get(i);\n    int written=Math.min(bufferSize,length);\n    tempBuffer.clear();\n    tempBuffer.put(data,offset,written).flip();\n    alBufferData(bufferID,format,tempBuffer,sampleRate);\n    alSourceQueueBuffers(sourceID,bufferID);\n    length-=written;\n    offset+=written;\n    queuedBuffers++;\n  }\n  tempBuffer.clear().flip();\n  for (int i=queuedBuffers; i < bufferCount; i++) {\n    int bufferID=buffers.get(i);\n    alBufferData(bufferID,format,tempBuffer,sampleRate);\n    alSourceQueueBuffers(sourceID,bufferID);\n  }\n  alSourcePlay(sourceID);\n  isPlaying=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 173,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1400,
        "startLineNumber" : 83,
        "startColumnNumber" : 64,
        "endLineNumber" : 125,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (length < 0)   throw new IllegalArgumentException(\"length cannot be < 0.\");\n  if (sourceID == -1) {\n    sourceID=audio.obtainSource(true);\n    if (sourceID == -1)     return;\n    if (buffers == null) {\n      buffers=BufferUtils.createIntBuffer(bufferCount);\n      alGenBuffers(buffers);\n      if (alGetError() != AL_NO_ERROR)       throw new GdxRuntimeException(\"Unabe to allocate audio buffers.\");\n    }\n    alSourcei(sourceID,AL_LOOPING,AL_FALSE);\n    alSourcef(sourceID,AL_GAIN,volume);\n    int queuedBuffers=0;\n    for (int i=0; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      int written=Math.min(bufferSize,length);\n      tempBuffer.clear();\n      tempBuffer.put(data,offset,written).flip();\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n      length-=written;\n      offset+=written;\n      queuedBuffers++;\n    }\n    tempBuffer.clear().flip();\n    for (int i=queuedBuffers; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n    }\n    alSourcePlay(sourceID);\n    isPlaying=true;\n  }\n  while (length > 0) {\n    int written=fillBuffer(data,offset,length);\n    length-=written;\n    offset+=written;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1463,
        "startLineNumber" : 83,
        "startColumnNumber" : 1,
        "endLineNumber" : 125,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void writeSamples(byte[] data,int offset,int length){\n  if (length < 0)   throw new IllegalArgumentException(\"length cannot be < 0.\");\n  if (sourceID == -1) {\n    sourceID=audio.obtainSource(true);\n    if (sourceID == -1)     return;\n    if (buffers == null) {\n      buffers=BufferUtils.createIntBuffer(bufferCount);\n      alGenBuffers(buffers);\n      if (alGetError() != AL_NO_ERROR)       throw new GdxRuntimeException(\"Unabe to allocate audio buffers.\");\n    }\n    alSourcei(sourceID,AL_LOOPING,AL_FALSE);\n    alSourcef(sourceID,AL_GAIN,volume);\n    int queuedBuffers=0;\n    for (int i=0; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      int written=Math.min(bufferSize,length);\n      tempBuffer.clear();\n      tempBuffer.put(data,offset,written).flip();\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n      length-=written;\n      offset+=written;\n      queuedBuffers++;\n    }\n    tempBuffer.clear().flip();\n    for (int i=queuedBuffers; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n    }\n    alSourcePlay(sourceID);\n    isPlaying=true;\n  }\n  while (length > 0) {\n    int written=fillBuffer(data,offset,length);\n    length-=written;\n    offset+=written;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 49
      },
      "nodeContext" : "tempBuffer.put(data,offset,written).flip();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "written",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 105,
      "startColumnNumber" : 14,
      "endLineNumber" : 105,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 21
      },
      "nodeContext" : "length-=written",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 22
      },
      "nodeContext" : "length-=written;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 346,
        "startLineNumber" : 98,
        "startColumnNumber" : 41,
        "endLineNumber" : 108,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  int bufferID=buffers.get(i);\n  int written=Math.min(bufferSize,length);\n  tempBuffer.clear();\n  tempBuffer.put(data,offset,written).flip();\n  alBufferData(bufferID,format,tempBuffer,sampleRate);\n  alSourceQueueBuffers(sourceID,bufferID);\n  length-=written;\n  offset+=written;\n  queuedBuffers++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 384,
        "startLineNumber" : 98,
        "startColumnNumber" : 3,
        "endLineNumber" : 108,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < bufferCount; i++) {\n  int bufferID=buffers.get(i);\n  int written=Math.min(bufferSize,length);\n  tempBuffer.clear();\n  tempBuffer.put(data,offset,written).flip();\n  alBufferData(bufferID,format,tempBuffer,sampleRate);\n  alSourceQueueBuffers(sourceID,bufferID);\n  length-=written;\n  offset+=written;\n  queuedBuffers++;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 65,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1160,
        "startLineNumber" : 86,
        "startColumnNumber" : 22,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  sourceID=audio.obtainSource(true);\n  if (sourceID == -1)   return;\n  if (buffers == null) {\n    buffers=BufferUtils.createIntBuffer(bufferCount);\n    alGenBuffers(buffers);\n    if (alGetError() != AL_NO_ERROR)     throw new GdxRuntimeException(\"Unabe to allocate audio buffers.\");\n  }\n  alSourcei(sourceID,AL_LOOPING,AL_FALSE);\n  alSourcef(sourceID,AL_GAIN,volume);\n  int queuedBuffers=0;\n  for (int i=0; i < bufferCount; i++) {\n    int bufferID=buffers.get(i);\n    int written=Math.min(bufferSize,length);\n    tempBuffer.clear();\n    tempBuffer.put(data,offset,written).flip();\n    alBufferData(bufferID,format,tempBuffer,sampleRate);\n    alSourceQueueBuffers(sourceID,bufferID);\n    length-=written;\n    offset+=written;\n    queuedBuffers++;\n  }\n  tempBuffer.clear().flip();\n  for (int i=queuedBuffers; i < bufferCount; i++) {\n    int bufferID=buffers.get(i);\n    alBufferData(bufferID,format,tempBuffer,sampleRate);\n    alSourceQueueBuffers(sourceID,bufferID);\n  }\n  alSourcePlay(sourceID);\n  isPlaying=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1180,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (sourceID == -1) {\n  sourceID=audio.obtainSource(true);\n  if (sourceID == -1)   return;\n  if (buffers == null) {\n    buffers=BufferUtils.createIntBuffer(bufferCount);\n    alGenBuffers(buffers);\n    if (alGetError() != AL_NO_ERROR)     throw new GdxRuntimeException(\"Unabe to allocate audio buffers.\");\n  }\n  alSourcei(sourceID,AL_LOOPING,AL_FALSE);\n  alSourcef(sourceID,AL_GAIN,volume);\n  int queuedBuffers=0;\n  for (int i=0; i < bufferCount; i++) {\n    int bufferID=buffers.get(i);\n    int written=Math.min(bufferSize,length);\n    tempBuffer.clear();\n    tempBuffer.put(data,offset,written).flip();\n    alBufferData(bufferID,format,tempBuffer,sampleRate);\n    alSourceQueueBuffers(sourceID,bufferID);\n    length-=written;\n    offset+=written;\n    queuedBuffers++;\n  }\n  tempBuffer.clear().flip();\n  for (int i=queuedBuffers; i < bufferCount; i++) {\n    int bufferID=buffers.get(i);\n    alBufferData(bufferID,format,tempBuffer,sampleRate);\n    alSourceQueueBuffers(sourceID,bufferID);\n  }\n  alSourcePlay(sourceID);\n  isPlaying=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 173,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1400,
        "startLineNumber" : 83,
        "startColumnNumber" : 64,
        "endLineNumber" : 125,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (length < 0)   throw new IllegalArgumentException(\"length cannot be < 0.\");\n  if (sourceID == -1) {\n    sourceID=audio.obtainSource(true);\n    if (sourceID == -1)     return;\n    if (buffers == null) {\n      buffers=BufferUtils.createIntBuffer(bufferCount);\n      alGenBuffers(buffers);\n      if (alGetError() != AL_NO_ERROR)       throw new GdxRuntimeException(\"Unabe to allocate audio buffers.\");\n    }\n    alSourcei(sourceID,AL_LOOPING,AL_FALSE);\n    alSourcef(sourceID,AL_GAIN,volume);\n    int queuedBuffers=0;\n    for (int i=0; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      int written=Math.min(bufferSize,length);\n      tempBuffer.clear();\n      tempBuffer.put(data,offset,written).flip();\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n      length-=written;\n      offset+=written;\n      queuedBuffers++;\n    }\n    tempBuffer.clear().flip();\n    for (int i=queuedBuffers; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n    }\n    alSourcePlay(sourceID);\n    isPlaying=true;\n  }\n  while (length > 0) {\n    int written=fillBuffer(data,offset,length);\n    length-=written;\n    offset+=written;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1463,
        "startLineNumber" : 83,
        "startColumnNumber" : 1,
        "endLineNumber" : 125,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void writeSamples(byte[] data,int offset,int length){\n  if (length < 0)   throw new IllegalArgumentException(\"length cannot be < 0.\");\n  if (sourceID == -1) {\n    sourceID=audio.obtainSource(true);\n    if (sourceID == -1)     return;\n    if (buffers == null) {\n      buffers=BufferUtils.createIntBuffer(bufferCount);\n      alGenBuffers(buffers);\n      if (alGetError() != AL_NO_ERROR)       throw new GdxRuntimeException(\"Unabe to allocate audio buffers.\");\n    }\n    alSourcei(sourceID,AL_LOOPING,AL_FALSE);\n    alSourcef(sourceID,AL_GAIN,volume);\n    int queuedBuffers=0;\n    for (int i=0; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      int written=Math.min(bufferSize,length);\n      tempBuffer.clear();\n      tempBuffer.put(data,offset,written).flip();\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n      length-=written;\n      offset+=written;\n      queuedBuffers++;\n    }\n    tempBuffer.clear().flip();\n    for (int i=queuedBuffers; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n    }\n    alSourcePlay(sourceID);\n    isPlaying=true;\n  }\n  while (length > 0) {\n    int written=fillBuffer(data,offset,length);\n    length-=written;\n    offset+=written;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 22
      },
      "nodeContext" : "length-=written;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "written",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 106,
      "startColumnNumber" : 14,
      "endLineNumber" : 106,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 21
      },
      "nodeContext" : "offset+=written",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 22
      },
      "nodeContext" : "offset+=written;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 346,
        "startLineNumber" : 98,
        "startColumnNumber" : 41,
        "endLineNumber" : 108,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  int bufferID=buffers.get(i);\n  int written=Math.min(bufferSize,length);\n  tempBuffer.clear();\n  tempBuffer.put(data,offset,written).flip();\n  alBufferData(bufferID,format,tempBuffer,sampleRate);\n  alSourceQueueBuffers(sourceID,bufferID);\n  length-=written;\n  offset+=written;\n  queuedBuffers++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 384,
        "startLineNumber" : 98,
        "startColumnNumber" : 3,
        "endLineNumber" : 108,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < bufferCount; i++) {\n  int bufferID=buffers.get(i);\n  int written=Math.min(bufferSize,length);\n  tempBuffer.clear();\n  tempBuffer.put(data,offset,written).flip();\n  alBufferData(bufferID,format,tempBuffer,sampleRate);\n  alSourceQueueBuffers(sourceID,bufferID);\n  length-=written;\n  offset+=written;\n  queuedBuffers++;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 65,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1160,
        "startLineNumber" : 86,
        "startColumnNumber" : 22,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  sourceID=audio.obtainSource(true);\n  if (sourceID == -1)   return;\n  if (buffers == null) {\n    buffers=BufferUtils.createIntBuffer(bufferCount);\n    alGenBuffers(buffers);\n    if (alGetError() != AL_NO_ERROR)     throw new GdxRuntimeException(\"Unabe to allocate audio buffers.\");\n  }\n  alSourcei(sourceID,AL_LOOPING,AL_FALSE);\n  alSourcef(sourceID,AL_GAIN,volume);\n  int queuedBuffers=0;\n  for (int i=0; i < bufferCount; i++) {\n    int bufferID=buffers.get(i);\n    int written=Math.min(bufferSize,length);\n    tempBuffer.clear();\n    tempBuffer.put(data,offset,written).flip();\n    alBufferData(bufferID,format,tempBuffer,sampleRate);\n    alSourceQueueBuffers(sourceID,bufferID);\n    length-=written;\n    offset+=written;\n    queuedBuffers++;\n  }\n  tempBuffer.clear().flip();\n  for (int i=queuedBuffers; i < bufferCount; i++) {\n    int bufferID=buffers.get(i);\n    alBufferData(bufferID,format,tempBuffer,sampleRate);\n    alSourceQueueBuffers(sourceID,bufferID);\n  }\n  alSourcePlay(sourceID);\n  isPlaying=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1180,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (sourceID == -1) {\n  sourceID=audio.obtainSource(true);\n  if (sourceID == -1)   return;\n  if (buffers == null) {\n    buffers=BufferUtils.createIntBuffer(bufferCount);\n    alGenBuffers(buffers);\n    if (alGetError() != AL_NO_ERROR)     throw new GdxRuntimeException(\"Unabe to allocate audio buffers.\");\n  }\n  alSourcei(sourceID,AL_LOOPING,AL_FALSE);\n  alSourcef(sourceID,AL_GAIN,volume);\n  int queuedBuffers=0;\n  for (int i=0; i < bufferCount; i++) {\n    int bufferID=buffers.get(i);\n    int written=Math.min(bufferSize,length);\n    tempBuffer.clear();\n    tempBuffer.put(data,offset,written).flip();\n    alBufferData(bufferID,format,tempBuffer,sampleRate);\n    alSourceQueueBuffers(sourceID,bufferID);\n    length-=written;\n    offset+=written;\n    queuedBuffers++;\n  }\n  tempBuffer.clear().flip();\n  for (int i=queuedBuffers; i < bufferCount; i++) {\n    int bufferID=buffers.get(i);\n    alBufferData(bufferID,format,tempBuffer,sampleRate);\n    alSourceQueueBuffers(sourceID,bufferID);\n  }\n  alSourcePlay(sourceID);\n  isPlaying=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 173,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1400,
        "startLineNumber" : 83,
        "startColumnNumber" : 64,
        "endLineNumber" : 125,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (length < 0)   throw new IllegalArgumentException(\"length cannot be < 0.\");\n  if (sourceID == -1) {\n    sourceID=audio.obtainSource(true);\n    if (sourceID == -1)     return;\n    if (buffers == null) {\n      buffers=BufferUtils.createIntBuffer(bufferCount);\n      alGenBuffers(buffers);\n      if (alGetError() != AL_NO_ERROR)       throw new GdxRuntimeException(\"Unabe to allocate audio buffers.\");\n    }\n    alSourcei(sourceID,AL_LOOPING,AL_FALSE);\n    alSourcef(sourceID,AL_GAIN,volume);\n    int queuedBuffers=0;\n    for (int i=0; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      int written=Math.min(bufferSize,length);\n      tempBuffer.clear();\n      tempBuffer.put(data,offset,written).flip();\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n      length-=written;\n      offset+=written;\n      queuedBuffers++;\n    }\n    tempBuffer.clear().flip();\n    for (int i=queuedBuffers; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n    }\n    alSourcePlay(sourceID);\n    isPlaying=true;\n  }\n  while (length > 0) {\n    int written=fillBuffer(data,offset,length);\n    length-=written;\n    offset+=written;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1463,
        "startLineNumber" : 83,
        "startColumnNumber" : 1,
        "endLineNumber" : 125,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void writeSamples(byte[] data,int offset,int length){\n  if (length < 0)   throw new IllegalArgumentException(\"length cannot be < 0.\");\n  if (sourceID == -1) {\n    sourceID=audio.obtainSource(true);\n    if (sourceID == -1)     return;\n    if (buffers == null) {\n      buffers=BufferUtils.createIntBuffer(bufferCount);\n      alGenBuffers(buffers);\n      if (alGetError() != AL_NO_ERROR)       throw new GdxRuntimeException(\"Unabe to allocate audio buffers.\");\n    }\n    alSourcei(sourceID,AL_LOOPING,AL_FALSE);\n    alSourcef(sourceID,AL_GAIN,volume);\n    int queuedBuffers=0;\n    for (int i=0; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      int written=Math.min(bufferSize,length);\n      tempBuffer.clear();\n      tempBuffer.put(data,offset,written).flip();\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n      length-=written;\n      offset+=written;\n      queuedBuffers++;\n    }\n    tempBuffer.clear().flip();\n    for (int i=queuedBuffers; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n    }\n    alSourcePlay(sourceID);\n    isPlaying=true;\n  }\n  while (length > 0) {\n    int written=fillBuffer(data,offset,length);\n    length-=written;\n    offset+=written;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 22
      },
      "nodeContext" : "offset+=written;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "written",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 122,
      "startColumnNumber" : 13,
      "endLineNumber" : 122,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 122,
        "startColumnNumber" : 3,
        "endLineNumber" : 122,
        "endColumnNumber" : 20
      },
      "nodeContext" : "length-=written",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 122,
        "startColumnNumber" : 3,
        "endLineNumber" : 122,
        "endColumnNumber" : 21
      },
      "nodeContext" : "length-=written;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 120,
        "startColumnNumber" : 21,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int written=fillBuffer(data,offset,length);\n  length-=written;\n  offset+=written;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 120,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (length > 0) {\n  int written=fillBuffer(data,offset,length);\n  length-=written;\n  offset+=written;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1400,
        "startLineNumber" : 83,
        "startColumnNumber" : 64,
        "endLineNumber" : 125,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (length < 0)   throw new IllegalArgumentException(\"length cannot be < 0.\");\n  if (sourceID == -1) {\n    sourceID=audio.obtainSource(true);\n    if (sourceID == -1)     return;\n    if (buffers == null) {\n      buffers=BufferUtils.createIntBuffer(bufferCount);\n      alGenBuffers(buffers);\n      if (alGetError() != AL_NO_ERROR)       throw new GdxRuntimeException(\"Unabe to allocate audio buffers.\");\n    }\n    alSourcei(sourceID,AL_LOOPING,AL_FALSE);\n    alSourcef(sourceID,AL_GAIN,volume);\n    int queuedBuffers=0;\n    for (int i=0; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      int written=Math.min(bufferSize,length);\n      tempBuffer.clear();\n      tempBuffer.put(data,offset,written).flip();\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n      length-=written;\n      offset+=written;\n      queuedBuffers++;\n    }\n    tempBuffer.clear().flip();\n    for (int i=queuedBuffers; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n    }\n    alSourcePlay(sourceID);\n    isPlaying=true;\n  }\n  while (length > 0) {\n    int written=fillBuffer(data,offset,length);\n    length-=written;\n    offset+=written;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1463,
        "startLineNumber" : 83,
        "startColumnNumber" : 1,
        "endLineNumber" : 125,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void writeSamples(byte[] data,int offset,int length){\n  if (length < 0)   throw new IllegalArgumentException(\"length cannot be < 0.\");\n  if (sourceID == -1) {\n    sourceID=audio.obtainSource(true);\n    if (sourceID == -1)     return;\n    if (buffers == null) {\n      buffers=BufferUtils.createIntBuffer(bufferCount);\n      alGenBuffers(buffers);\n      if (alGetError() != AL_NO_ERROR)       throw new GdxRuntimeException(\"Unabe to allocate audio buffers.\");\n    }\n    alSourcei(sourceID,AL_LOOPING,AL_FALSE);\n    alSourcef(sourceID,AL_GAIN,volume);\n    int queuedBuffers=0;\n    for (int i=0; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      int written=Math.min(bufferSize,length);\n      tempBuffer.clear();\n      tempBuffer.put(data,offset,written).flip();\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n      length-=written;\n      offset+=written;\n      queuedBuffers++;\n    }\n    tempBuffer.clear().flip();\n    for (int i=queuedBuffers; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n    }\n    alSourcePlay(sourceID);\n    isPlaying=true;\n  }\n  while (length > 0) {\n    int written=fillBuffer(data,offset,length);\n    length-=written;\n    offset+=written;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 122,
        "startColumnNumber" : 3,
        "endLineNumber" : 122,
        "endColumnNumber" : 21
      },
      "nodeContext" : "length-=written;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "written",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 123,
      "startColumnNumber" : 13,
      "endLineNumber" : 123,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 123,
        "startColumnNumber" : 3,
        "endLineNumber" : 123,
        "endColumnNumber" : 20
      },
      "nodeContext" : "offset+=written",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 123,
        "startColumnNumber" : 3,
        "endLineNumber" : 123,
        "endColumnNumber" : 21
      },
      "nodeContext" : "offset+=written;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 120,
        "startColumnNumber" : 21,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int written=fillBuffer(data,offset,length);\n  length-=written;\n  offset+=written;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 120,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (length > 0) {\n  int written=fillBuffer(data,offset,length);\n  length-=written;\n  offset+=written;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1400,
        "startLineNumber" : 83,
        "startColumnNumber" : 64,
        "endLineNumber" : 125,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (length < 0)   throw new IllegalArgumentException(\"length cannot be < 0.\");\n  if (sourceID == -1) {\n    sourceID=audio.obtainSource(true);\n    if (sourceID == -1)     return;\n    if (buffers == null) {\n      buffers=BufferUtils.createIntBuffer(bufferCount);\n      alGenBuffers(buffers);\n      if (alGetError() != AL_NO_ERROR)       throw new GdxRuntimeException(\"Unabe to allocate audio buffers.\");\n    }\n    alSourcei(sourceID,AL_LOOPING,AL_FALSE);\n    alSourcef(sourceID,AL_GAIN,volume);\n    int queuedBuffers=0;\n    for (int i=0; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      int written=Math.min(bufferSize,length);\n      tempBuffer.clear();\n      tempBuffer.put(data,offset,written).flip();\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n      length-=written;\n      offset+=written;\n      queuedBuffers++;\n    }\n    tempBuffer.clear().flip();\n    for (int i=queuedBuffers; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n    }\n    alSourcePlay(sourceID);\n    isPlaying=true;\n  }\n  while (length > 0) {\n    int written=fillBuffer(data,offset,length);\n    length-=written;\n    offset+=written;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1463,
        "startLineNumber" : 83,
        "startColumnNumber" : 1,
        "endLineNumber" : 125,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void writeSamples(byte[] data,int offset,int length){\n  if (length < 0)   throw new IllegalArgumentException(\"length cannot be < 0.\");\n  if (sourceID == -1) {\n    sourceID=audio.obtainSource(true);\n    if (sourceID == -1)     return;\n    if (buffers == null) {\n      buffers=BufferUtils.createIntBuffer(bufferCount);\n      alGenBuffers(buffers);\n      if (alGetError() != AL_NO_ERROR)       throw new GdxRuntimeException(\"Unabe to allocate audio buffers.\");\n    }\n    alSourcei(sourceID,AL_LOOPING,AL_FALSE);\n    alSourcef(sourceID,AL_GAIN,volume);\n    int queuedBuffers=0;\n    for (int i=0; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      int written=Math.min(bufferSize,length);\n      tempBuffer.clear();\n      tempBuffer.put(data,offset,written).flip();\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n      length-=written;\n      offset+=written;\n      queuedBuffers++;\n    }\n    tempBuffer.clear().flip();\n    for (int i=queuedBuffers; i < bufferCount; i++) {\n      int bufferID=buffers.get(i);\n      alBufferData(bufferID,format,tempBuffer,sampleRate);\n      alSourceQueueBuffers(sourceID,bufferID);\n    }\n    alSourcePlay(sourceID);\n    isPlaying=true;\n  }\n  while (length > 0) {\n    int written=fillBuffer(data,offset,length);\n    length-=written;\n    offset+=written;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 123,
        "startColumnNumber" : 3,
        "endLineNumber" : 123,
        "endColumnNumber" : 21
      },
      "nodeContext" : "offset+=written;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 102,
    "startColumnNumber" : 33,
    "endLineNumber" : 102,
    "endColumnNumber" : 40
  }, {
    "charLength" : 7,
    "startLineNumber" : 105,
    "startColumnNumber" : 14,
    "endLineNumber" : 105,
    "endColumnNumber" : 21
  }, {
    "charLength" : 7,
    "startLineNumber" : 106,
    "startColumnNumber" : 14,
    "endLineNumber" : 106,
    "endColumnNumber" : 21
  }, {
    "charLength" : 7,
    "startLineNumber" : 122,
    "startColumnNumber" : 13,
    "endLineNumber" : 122,
    "endColumnNumber" : 20
  }, {
    "charLength" : 7,
    "startLineNumber" : 123,
    "startColumnNumber" : 13,
    "endLineNumber" : 123,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}