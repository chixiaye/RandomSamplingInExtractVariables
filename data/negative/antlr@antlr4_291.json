{
  "id" : 291,
  "expression" : "currentNode != null",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime/Java/src/org/antlr/v4/runtime/tree/IterativeParseTreeWalker.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "currentNode != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 30,
      "startColumnNumber" : 9,
      "endLineNumber" : 30,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1239,
        "startLineNumber" : 30,
        "startColumnNumber" : 2,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (currentNode != null) {\n  if (currentNode instanceof ErrorNode) {\n    listener.visitErrorNode((ErrorNode)currentNode);\n  }\n else   if (currentNode instanceof TerminalNode) {\n    listener.visitTerminal((TerminalNode)currentNode);\n  }\n else {\n    final RuleNode r=(RuleNode)currentNode;\n    enterRule(listener,r);\n  }\n  if (currentNode.getChildCount() > 0) {\n    nodeStack.push(currentNode);\n    indexStack.push(currentIndex);\n    currentIndex=0;\n    currentNode=currentNode.getChild(0);\n    continue;\n  }\n  do {\n    if (currentNode instanceof RuleNode) {\n      exitRule(listener,(RuleNode)currentNode);\n    }\n    if (nodeStack.isEmpty()) {\n      currentNode=null;\n      currentIndex=0;\n      break;\n    }\n    currentNode=nodeStack.peek().getChild(++currentIndex);\n    if (currentNode != null) {\n      break;\n    }\n    currentNode=nodeStack.pop();\n    currentIndex=indexStack.pop();\n  }\n while (currentNode != null);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 139,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1431,
        "startLineNumber" : 22,
        "startColumnNumber" : 59,
        "endLineNumber" : 80,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final Deque<ParseTree> nodeStack=new ArrayDeque<ParseTree>();\n  final IntegerStack indexStack=new IntegerStack();\n  ParseTree currentNode=t;\n  int currentIndex=0;\n  while (currentNode != null) {\n    if (currentNode instanceof ErrorNode) {\n      listener.visitErrorNode((ErrorNode)currentNode);\n    }\n else     if (currentNode instanceof TerminalNode) {\n      listener.visitTerminal((TerminalNode)currentNode);\n    }\n else {\n      final RuleNode r=(RuleNode)currentNode;\n      enterRule(listener,r);\n    }\n    if (currentNode.getChildCount() > 0) {\n      nodeStack.push(currentNode);\n      indexStack.push(currentIndex);\n      currentIndex=0;\n      currentNode=currentNode.getChild(0);\n      continue;\n    }\n    do {\n      if (currentNode instanceof RuleNode) {\n        exitRule(listener,(RuleNode)currentNode);\n      }\n      if (nodeStack.isEmpty()) {\n        currentNode=null;\n        currentIndex=0;\n        break;\n      }\n      currentNode=nodeStack.peek().getChild(++currentIndex);\n      if (currentNode != null) {\n        break;\n      }\n      currentNode=nodeStack.pop();\n      currentIndex=indexStack.pop();\n    }\n while (currentNode != null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 175,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1501,
        "startLineNumber" : 21,
        "startColumnNumber" : 1,
        "endLineNumber" : 80,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void walk(ParseTreeListener listener,ParseTree t){\n  final Deque<ParseTree> nodeStack=new ArrayDeque<ParseTree>();\n  final IntegerStack indexStack=new IntegerStack();\n  ParseTree currentNode=t;\n  int currentIndex=0;\n  while (currentNode != null) {\n    if (currentNode instanceof ErrorNode) {\n      listener.visitErrorNode((ErrorNode)currentNode);\n    }\n else     if (currentNode instanceof TerminalNode) {\n      listener.visitTerminal((TerminalNode)currentNode);\n    }\n else {\n      final RuleNode r=(RuleNode)currentNode;\n      enterRule(listener,r);\n    }\n    if (currentNode.getChildCount() > 0) {\n      nodeStack.push(currentNode);\n      indexStack.push(currentIndex);\n      currentIndex=0;\n      currentNode=currentNode.getChild(0);\n      continue;\n    }\n    do {\n      if (currentNode instanceof RuleNode) {\n        exitRule(listener,(RuleNode)currentNode);\n      }\n      if (nodeStack.isEmpty()) {\n        currentNode=null;\n        currentIndex=0;\n        break;\n      }\n      currentNode=nodeStack.peek().getChild(++currentIndex);\n      if (currentNode != null) {\n        break;\n      }\n      currentNode=nodeStack.pop();\n      currentIndex=indexStack.pop();\n    }\n while (currentNode != null);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 189,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1239,
        "startLineNumber" : 30,
        "startColumnNumber" : 2,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (currentNode != null) {\n  if (currentNode instanceof ErrorNode) {\n    listener.visitErrorNode((ErrorNode)currentNode);\n  }\n else   if (currentNode instanceof TerminalNode) {\n    listener.visitTerminal((TerminalNode)currentNode);\n  }\n else {\n    final RuleNode r=(RuleNode)currentNode;\n    enterRule(listener,r);\n  }\n  if (currentNode.getChildCount() > 0) {\n    nodeStack.push(currentNode);\n    indexStack.push(currentIndex);\n    currentIndex=0;\n    currentNode=currentNode.getChild(0);\n    continue;\n  }\n  do {\n    if (currentNode instanceof RuleNode) {\n      exitRule(listener,(RuleNode)currentNode);\n    }\n    if (nodeStack.isEmpty()) {\n      currentNode=null;\n      currentIndex=0;\n      break;\n    }\n    currentNode=nodeStack.peek().getChild(++currentIndex);\n    if (currentNode != null) {\n      break;\n    }\n    currentNode=nodeStack.pop();\n    currentIndex=indexStack.pop();\n  }\n while (currentNode != null);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 139,
      "astHeight" : 11
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "currentNode != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 70,
      "startColumnNumber" : 8,
      "endLineNumber" : 70,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (currentNode != null) {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 545,
        "startLineNumber" : 54,
        "startColumnNumber" : 6,
        "endLineNumber" : 78,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (currentNode instanceof RuleNode) {\n    exitRule(listener,(RuleNode)currentNode);\n  }\n  if (nodeStack.isEmpty()) {\n    currentNode=null;\n    currentIndex=0;\n    break;\n  }\n  currentNode=nodeStack.peek().getChild(++currentIndex);\n  if (currentNode != null) {\n    break;\n  }\n  currentNode=nodeStack.pop();\n  currentIndex=indexStack.pop();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 577,
        "startLineNumber" : 54,
        "startColumnNumber" : 3,
        "endLineNumber" : 78,
        "endColumnNumber" : 33
      },
      "nodeContext" : "do {\n  if (currentNode instanceof RuleNode) {\n    exitRule(listener,(RuleNode)currentNode);\n  }\n  if (nodeStack.isEmpty()) {\n    currentNode=null;\n    currentIndex=0;\n    break;\n  }\n  currentNode=nodeStack.peek().getChild(++currentIndex);\n  if (currentNode != null) {\n    break;\n  }\n  currentNode=nodeStack.pop();\n  currentIndex=indexStack.pop();\n}\n while (currentNode != null);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 30,
        "startColumnNumber" : 30,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (currentNode instanceof ErrorNode) {\n    listener.visitErrorNode((ErrorNode)currentNode);\n  }\n else   if (currentNode instanceof TerminalNode) {\n    listener.visitTerminal((TerminalNode)currentNode);\n  }\n else {\n    final RuleNode r=(RuleNode)currentNode;\n    enterRule(listener,r);\n  }\n  if (currentNode.getChildCount() > 0) {\n    nodeStack.push(currentNode);\n    indexStack.push(currentIndex);\n    currentIndex=0;\n    currentNode=currentNode.getChild(0);\n    continue;\n  }\n  do {\n    if (currentNode instanceof RuleNode) {\n      exitRule(listener,(RuleNode)currentNode);\n    }\n    if (nodeStack.isEmpty()) {\n      currentNode=null;\n      currentIndex=0;\n      break;\n    }\n    currentNode=nodeStack.peek().getChild(++currentIndex);\n    if (currentNode != null) {\n      break;\n    }\n    currentNode=nodeStack.pop();\n    currentIndex=indexStack.pop();\n  }\n while (currentNode != null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1239,
        "startLineNumber" : 30,
        "startColumnNumber" : 2,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (currentNode != null) {\n  if (currentNode instanceof ErrorNode) {\n    listener.visitErrorNode((ErrorNode)currentNode);\n  }\n else   if (currentNode instanceof TerminalNode) {\n    listener.visitTerminal((TerminalNode)currentNode);\n  }\n else {\n    final RuleNode r=(RuleNode)currentNode;\n    enterRule(listener,r);\n  }\n  if (currentNode.getChildCount() > 0) {\n    nodeStack.push(currentNode);\n    indexStack.push(currentIndex);\n    currentIndex=0;\n    currentNode=currentNode.getChild(0);\n    continue;\n  }\n  do {\n    if (currentNode instanceof RuleNode) {\n      exitRule(listener,(RuleNode)currentNode);\n    }\n    if (nodeStack.isEmpty()) {\n      currentNode=null;\n      currentIndex=0;\n      break;\n    }\n    currentNode=nodeStack.peek().getChild(++currentIndex);\n    if (currentNode != null) {\n      break;\n    }\n    currentNode=nodeStack.pop();\n    currentIndex=indexStack.pop();\n  }\n while (currentNode != null);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 139,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1431,
        "startLineNumber" : 22,
        "startColumnNumber" : 59,
        "endLineNumber" : 80,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final Deque<ParseTree> nodeStack=new ArrayDeque<ParseTree>();\n  final IntegerStack indexStack=new IntegerStack();\n  ParseTree currentNode=t;\n  int currentIndex=0;\n  while (currentNode != null) {\n    if (currentNode instanceof ErrorNode) {\n      listener.visitErrorNode((ErrorNode)currentNode);\n    }\n else     if (currentNode instanceof TerminalNode) {\n      listener.visitTerminal((TerminalNode)currentNode);\n    }\n else {\n      final RuleNode r=(RuleNode)currentNode;\n      enterRule(listener,r);\n    }\n    if (currentNode.getChildCount() > 0) {\n      nodeStack.push(currentNode);\n      indexStack.push(currentIndex);\n      currentIndex=0;\n      currentNode=currentNode.getChild(0);\n      continue;\n    }\n    do {\n      if (currentNode instanceof RuleNode) {\n        exitRule(listener,(RuleNode)currentNode);\n      }\n      if (nodeStack.isEmpty()) {\n        currentNode=null;\n        currentIndex=0;\n        break;\n      }\n      currentNode=nodeStack.peek().getChild(++currentIndex);\n      if (currentNode != null) {\n        break;\n      }\n      currentNode=nodeStack.pop();\n      currentIndex=indexStack.pop();\n    }\n while (currentNode != null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 175,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1501,
        "startLineNumber" : 21,
        "startColumnNumber" : 1,
        "endLineNumber" : 80,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void walk(ParseTreeListener listener,ParseTree t){\n  final Deque<ParseTree> nodeStack=new ArrayDeque<ParseTree>();\n  final IntegerStack indexStack=new IntegerStack();\n  ParseTree currentNode=t;\n  int currentIndex=0;\n  while (currentNode != null) {\n    if (currentNode instanceof ErrorNode) {\n      listener.visitErrorNode((ErrorNode)currentNode);\n    }\n else     if (currentNode instanceof TerminalNode) {\n      listener.visitTerminal((TerminalNode)currentNode);\n    }\n else {\n      final RuleNode r=(RuleNode)currentNode;\n      enterRule(listener,r);\n    }\n    if (currentNode.getChildCount() > 0) {\n      nodeStack.push(currentNode);\n      indexStack.push(currentIndex);\n      currentIndex=0;\n      currentNode=currentNode.getChild(0);\n      continue;\n    }\n    do {\n      if (currentNode instanceof RuleNode) {\n        exitRule(listener,(RuleNode)currentNode);\n      }\n      if (nodeStack.isEmpty()) {\n        currentNode=null;\n        currentIndex=0;\n        break;\n      }\n      currentNode=nodeStack.peek().getChild(++currentIndex);\n      if (currentNode != null) {\n        break;\n      }\n      currentNode=nodeStack.pop();\n      currentIndex=indexStack.pop();\n    }\n while (currentNode != null);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 189,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (currentNode != null) {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "currentNode != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 78,
      "startColumnNumber" : 12,
      "endLineNumber" : 78,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 577,
        "startLineNumber" : 54,
        "startColumnNumber" : 3,
        "endLineNumber" : 78,
        "endColumnNumber" : 33
      },
      "nodeContext" : "do {\n  if (currentNode instanceof RuleNode) {\n    exitRule(listener,(RuleNode)currentNode);\n  }\n  if (nodeStack.isEmpty()) {\n    currentNode=null;\n    currentIndex=0;\n    break;\n  }\n  currentNode=nodeStack.peek().getChild(++currentIndex);\n  if (currentNode != null) {\n    break;\n  }\n  currentNode=nodeStack.pop();\n  currentIndex=indexStack.pop();\n}\n while (currentNode != null);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 30,
        "startColumnNumber" : 30,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (currentNode instanceof ErrorNode) {\n    listener.visitErrorNode((ErrorNode)currentNode);\n  }\n else   if (currentNode instanceof TerminalNode) {\n    listener.visitTerminal((TerminalNode)currentNode);\n  }\n else {\n    final RuleNode r=(RuleNode)currentNode;\n    enterRule(listener,r);\n  }\n  if (currentNode.getChildCount() > 0) {\n    nodeStack.push(currentNode);\n    indexStack.push(currentIndex);\n    currentIndex=0;\n    currentNode=currentNode.getChild(0);\n    continue;\n  }\n  do {\n    if (currentNode instanceof RuleNode) {\n      exitRule(listener,(RuleNode)currentNode);\n    }\n    if (nodeStack.isEmpty()) {\n      currentNode=null;\n      currentIndex=0;\n      break;\n    }\n    currentNode=nodeStack.peek().getChild(++currentIndex);\n    if (currentNode != null) {\n      break;\n    }\n    currentNode=nodeStack.pop();\n    currentIndex=indexStack.pop();\n  }\n while (currentNode != null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1239,
        "startLineNumber" : 30,
        "startColumnNumber" : 2,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (currentNode != null) {\n  if (currentNode instanceof ErrorNode) {\n    listener.visitErrorNode((ErrorNode)currentNode);\n  }\n else   if (currentNode instanceof TerminalNode) {\n    listener.visitTerminal((TerminalNode)currentNode);\n  }\n else {\n    final RuleNode r=(RuleNode)currentNode;\n    enterRule(listener,r);\n  }\n  if (currentNode.getChildCount() > 0) {\n    nodeStack.push(currentNode);\n    indexStack.push(currentIndex);\n    currentIndex=0;\n    currentNode=currentNode.getChild(0);\n    continue;\n  }\n  do {\n    if (currentNode instanceof RuleNode) {\n      exitRule(listener,(RuleNode)currentNode);\n    }\n    if (nodeStack.isEmpty()) {\n      currentNode=null;\n      currentIndex=0;\n      break;\n    }\n    currentNode=nodeStack.peek().getChild(++currentIndex);\n    if (currentNode != null) {\n      break;\n    }\n    currentNode=nodeStack.pop();\n    currentIndex=indexStack.pop();\n  }\n while (currentNode != null);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 139,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1431,
        "startLineNumber" : 22,
        "startColumnNumber" : 59,
        "endLineNumber" : 80,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final Deque<ParseTree> nodeStack=new ArrayDeque<ParseTree>();\n  final IntegerStack indexStack=new IntegerStack();\n  ParseTree currentNode=t;\n  int currentIndex=0;\n  while (currentNode != null) {\n    if (currentNode instanceof ErrorNode) {\n      listener.visitErrorNode((ErrorNode)currentNode);\n    }\n else     if (currentNode instanceof TerminalNode) {\n      listener.visitTerminal((TerminalNode)currentNode);\n    }\n else {\n      final RuleNode r=(RuleNode)currentNode;\n      enterRule(listener,r);\n    }\n    if (currentNode.getChildCount() > 0) {\n      nodeStack.push(currentNode);\n      indexStack.push(currentIndex);\n      currentIndex=0;\n      currentNode=currentNode.getChild(0);\n      continue;\n    }\n    do {\n      if (currentNode instanceof RuleNode) {\n        exitRule(listener,(RuleNode)currentNode);\n      }\n      if (nodeStack.isEmpty()) {\n        currentNode=null;\n        currentIndex=0;\n        break;\n      }\n      currentNode=nodeStack.peek().getChild(++currentIndex);\n      if (currentNode != null) {\n        break;\n      }\n      currentNode=nodeStack.pop();\n      currentIndex=indexStack.pop();\n    }\n while (currentNode != null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 175,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1501,
        "startLineNumber" : 21,
        "startColumnNumber" : 1,
        "endLineNumber" : 80,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void walk(ParseTreeListener listener,ParseTree t){\n  final Deque<ParseTree> nodeStack=new ArrayDeque<ParseTree>();\n  final IntegerStack indexStack=new IntegerStack();\n  ParseTree currentNode=t;\n  int currentIndex=0;\n  while (currentNode != null) {\n    if (currentNode instanceof ErrorNode) {\n      listener.visitErrorNode((ErrorNode)currentNode);\n    }\n else     if (currentNode instanceof TerminalNode) {\n      listener.visitTerminal((TerminalNode)currentNode);\n    }\n else {\n      final RuleNode r=(RuleNode)currentNode;\n      enterRule(listener,r);\n    }\n    if (currentNode.getChildCount() > 0) {\n      nodeStack.push(currentNode);\n      indexStack.push(currentIndex);\n      currentIndex=0;\n      currentNode=currentNode.getChild(0);\n      continue;\n    }\n    do {\n      if (currentNode instanceof RuleNode) {\n        exitRule(listener,(RuleNode)currentNode);\n      }\n      if (nodeStack.isEmpty()) {\n        currentNode=null;\n        currentIndex=0;\n        break;\n      }\n      currentNode=nodeStack.peek().getChild(++currentIndex);\n      if (currentNode != null) {\n        break;\n      }\n      currentNode=nodeStack.pop();\n      currentIndex=indexStack.pop();\n    }\n while (currentNode != null);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 189,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 577,
        "startLineNumber" : 54,
        "startColumnNumber" : 3,
        "endLineNumber" : 78,
        "endColumnNumber" : 33
      },
      "nodeContext" : "do {\n  if (currentNode instanceof RuleNode) {\n    exitRule(listener,(RuleNode)currentNode);\n  }\n  if (nodeStack.isEmpty()) {\n    currentNode=null;\n    currentIndex=0;\n    break;\n  }\n  currentNode=nodeStack.peek().getChild(++currentIndex);\n  if (currentNode != null) {\n    break;\n  }\n  currentNode=nodeStack.pop();\n  currentIndex=indexStack.pop();\n}\n while (currentNode != null);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 61,
      "astHeight" : 9
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 30,
    "startColumnNumber" : 9,
    "endLineNumber" : 30,
    "endColumnNumber" : 28
  }, {
    "charLength" : 19,
    "startLineNumber" : 70,
    "startColumnNumber" : 8,
    "endLineNumber" : 70,
    "endColumnNumber" : 27
  }, {
    "charLength" : 19,
    "startLineNumber" : 78,
    "startColumnNumber" : 12,
    "endLineNumber" : 78,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 0
  } ]
}