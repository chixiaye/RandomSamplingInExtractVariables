{
  "id" : 323,
  "expression" : "!code.startsWith(\"compiler.warn.annotation.method.not.found\") && !\"compiler.warn.proc.processor.incompatible.source.version\".equals(code)",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/impl/verticle/CompilingClassLoader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!code.startsWith(\"compiler.warn.annotation.method.not.found\") && !\"compiler.warn.proc.processor.incompatible.source.version\".equals(code)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 151,
      "startLineNumber" : 108,
      "startColumnNumber" : 31,
      "endLineNumber" : 109,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 11,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 108,
        "startColumnNumber" : 30,
        "endLineNumber" : 109,
        "endColumnNumber" : 87
      },
      "nodeContext" : "(!code.startsWith(\"compiler.warn.annotation.method.not.found\") && !\"compiler.warn.proc.processor.incompatible.source.version\".equals(code))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 108,
        "startColumnNumber" : 14,
        "endLineNumber" : 109,
        "endColumnNumber" : 87
      },
      "nodeContext" : "code == null || (!code.startsWith(\"compiler.warn.annotation.method.not.found\") && !\"compiler.warn.proc.processor.incompatible.source.version\".equals(code))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 108,
        "startColumnNumber" : 10,
        "endLineNumber" : 111,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (code == null || (!code.startsWith(\"compiler.warn.annotation.method.not.found\") && !\"compiler.warn.proc.processor.incompatible.source.version\".equals(code))) {\n  log.info(d);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 272,
        "startLineNumber" : 106,
        "startColumnNumber" : 61,
        "endLineNumber" : 112,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String code=d.getCode();\n  if (code == null || (!code.startsWith(\"compiler.warn.annotation.method.not.found\") && !\"compiler.warn.proc.processor.incompatible.source.version\".equals(code))) {\n    log.info(d);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 325,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Diagnostic<?> d : diagnostics.getDiagnostics()) {\n  String code=d.getCode();\n  if (code == null || (!code.startsWith(\"compiler.warn.annotation.method.not.found\") && !\"compiler.warn.proc.processor.incompatible.source.version\".equals(code))) {\n    log.info(d);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 42,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 343,
        "startLineNumber" : 105,
        "startColumnNumber" : 17,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (  Diagnostic<?> d : diagnostics.getDiagnostics()) {\n    String code=d.getCode();\n    if (code == null || (!code.startsWith(\"compiler.warn.annotation.method.not.found\") && !\"compiler.warn.proc.processor.incompatible.source.version\".equals(code))) {\n      log.info(d);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 524,
        "startLineNumber" : 105,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (valid) {\n  for (  Diagnostic<?> d : diagnostics.getDiagnostics()) {\n    String code=d.getCode();\n    if (code == null || (!code.startsWith(\"compiler.warn.annotation.method.not.found\") && !\"compiler.warn.proc.processor.incompatible.source.version\".equals(code))) {\n      log.info(d);\n    }\n  }\n}\n else {\n  for (  Diagnostic<?> d : diagnostics.getDiagnostics()) {\n    log.warn(d);\n  }\n  throw new RuntimeException(\"Compilation failed!\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1643,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<>();\n  JavaCompiler javaCompiler=ToolProvider.getSystemJavaCompiler();\n  if (javaCompiler == null) {\n    throw new RuntimeException(\"Unable to detect java compiler, make sure you're using a JDK not a JRE!\");\n  }\n  StandardJavaFileManager standardFileManager=javaCompiler.getStandardFileManager(null,null,null);\n  standardFileManager.setLocation(StandardLocation.SOURCE_PATH,Collections.singleton(javaSourceContext.getSourceRoot()));\n  fileManager=new MemoryFileManager(loader,standardFileManager);\n  JavaFileObject javaFile=standardFileManager.getJavaFileForInput(StandardLocation.SOURCE_PATH,resolveMainClassName(),Kind.SOURCE);\n  JavaCompiler.CompilationTask task=javaCompiler.getTask(null,fileManager,diagnostics,COMPILER_OPTIONS,null,Collections.singleton(javaFile));\n  boolean valid=task.call();\n  if (valid) {\n    for (    Diagnostic<?> d : diagnostics.getDiagnostics()) {\n      String code=d.getCode();\n      if (code == null || (!code.startsWith(\"compiler.warn.annotation.method.not.found\") && !\"compiler.warn.proc.processor.incompatible.source.version\".equals(code))) {\n        log.info(d);\n      }\n    }\n  }\n else {\n    for (    Diagnostic<?> d : diagnostics.getDiagnostics()) {\n      log.warn(d);\n    }\n    throw new RuntimeException(\"Compilation failed!\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1734,
        "startLineNumber" : 88,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<>();\n  JavaCompiler javaCompiler=ToolProvider.getSystemJavaCompiler();\n  if (javaCompiler == null) {\n    throw new RuntimeException(\"Unable to detect java compiler, make sure you're using a JDK not a JRE!\");\n  }\n  StandardJavaFileManager standardFileManager=javaCompiler.getStandardFileManager(null,null,null);\n  standardFileManager.setLocation(StandardLocation.SOURCE_PATH,Collections.singleton(javaSourceContext.getSourceRoot()));\n  fileManager=new MemoryFileManager(loader,standardFileManager);\n  JavaFileObject javaFile=standardFileManager.getJavaFileForInput(StandardLocation.SOURCE_PATH,resolveMainClassName(),Kind.SOURCE);\n  JavaCompiler.CompilationTask task=javaCompiler.getTask(null,fileManager,diagnostics,COMPILER_OPTIONS,null,Collections.singleton(javaFile));\n  boolean valid=task.call();\n  if (valid) {\n    for (    Diagnostic<?> d : diagnostics.getDiagnostics()) {\n      String code=d.getCode();\n      if (code == null || (!code.startsWith(\"compiler.warn.annotation.method.not.found\") && !\"compiler.warn.proc.processor.incompatible.source.version\".equals(code))) {\n        log.info(d);\n      }\n    }\n  }\n else {\n    for (    Diagnostic<?> d : diagnostics.getDiagnostics()) {\n      log.warn(d);\n    }\n    throw new RuntimeException(\"Compilation failed!\");\n  }\n}\n catch (Exception e) {\n  throw new RuntimeException(\"Compilation failed\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 185,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2526,
        "startLineNumber" : 69,
        "startColumnNumber" : 69,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  super(loader);\n  URL resource=getResource(sourceName);\n  if (resource == null) {\n    throw new RuntimeException(\"Resource not found: \" + sourceName);\n  }\n  File sourceFile;\n  try {\n    sourceFile=new File(URLDecoder.decode(resource.getFile(),\"UTF-8\"));\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new IllegalStateException(\"Failed to decode \" + e.getMessage());\n  }\n  if (!sourceFile.canRead()) {\n    throw new RuntimeException(\"File not found: \" + sourceFile.getAbsolutePath() + \" current dir is: \"+ new File(\".\").getAbsolutePath());\n  }\n  this.javaSourceContext=new JavaSourceContext(sourceFile);\n  try {\n    DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<>();\n    JavaCompiler javaCompiler=ToolProvider.getSystemJavaCompiler();\n    if (javaCompiler == null) {\n      throw new RuntimeException(\"Unable to detect java compiler, make sure you're using a JDK not a JRE!\");\n    }\n    StandardJavaFileManager standardFileManager=javaCompiler.getStandardFileManager(null,null,null);\n    standardFileManager.setLocation(StandardLocation.SOURCE_PATH,Collections.singleton(javaSourceContext.getSourceRoot()));\n    fileManager=new MemoryFileManager(loader,standardFileManager);\n    JavaFileObject javaFile=standardFileManager.getJavaFileForInput(StandardLocation.SOURCE_PATH,resolveMainClassName(),Kind.SOURCE);\n    JavaCompiler.CompilationTask task=javaCompiler.getTask(null,fileManager,diagnostics,COMPILER_OPTIONS,null,Collections.singleton(javaFile));\n    boolean valid=task.call();\n    if (valid) {\n      for (      Diagnostic<?> d : diagnostics.getDiagnostics()) {\n        String code=d.getCode();\n        if (code == null || (!code.startsWith(\"compiler.warn.annotation.method.not.found\") && !\"compiler.warn.proc.processor.incompatible.source.version\".equals(code))) {\n          log.info(d);\n        }\n      }\n    }\n else {\n      for (      Diagnostic<?> d : diagnostics.getDiagnostics()) {\n        log.warn(d);\n      }\n      throw new RuntimeException(\"Compilation failed!\");\n    }\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Compilation failed\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2593,
        "startLineNumber" : 69,
        "startColumnNumber" : 2,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public CompilingClassLoader(ClassLoader loader,String sourceName){\n  super(loader);\n  URL resource=getResource(sourceName);\n  if (resource == null) {\n    throw new RuntimeException(\"Resource not found: \" + sourceName);\n  }\n  File sourceFile;\n  try {\n    sourceFile=new File(URLDecoder.decode(resource.getFile(),\"UTF-8\"));\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new IllegalStateException(\"Failed to decode \" + e.getMessage());\n  }\n  if (!sourceFile.canRead()) {\n    throw new RuntimeException(\"File not found: \" + sourceFile.getAbsolutePath() + \" current dir is: \"+ new File(\".\").getAbsolutePath());\n  }\n  this.javaSourceContext=new JavaSourceContext(sourceFile);\n  try {\n    DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<>();\n    JavaCompiler javaCompiler=ToolProvider.getSystemJavaCompiler();\n    if (javaCompiler == null) {\n      throw new RuntimeException(\"Unable to detect java compiler, make sure you're using a JDK not a JRE!\");\n    }\n    StandardJavaFileManager standardFileManager=javaCompiler.getStandardFileManager(null,null,null);\n    standardFileManager.setLocation(StandardLocation.SOURCE_PATH,Collections.singleton(javaSourceContext.getSourceRoot()));\n    fileManager=new MemoryFileManager(loader,standardFileManager);\n    JavaFileObject javaFile=standardFileManager.getJavaFileForInput(StandardLocation.SOURCE_PATH,resolveMainClassName(),Kind.SOURCE);\n    JavaCompiler.CompilationTask task=javaCompiler.getTask(null,fileManager,diagnostics,COMPILER_OPTIONS,null,Collections.singleton(javaFile));\n    boolean valid=task.call();\n    if (valid) {\n      for (      Diagnostic<?> d : diagnostics.getDiagnostics()) {\n        String code=d.getCode();\n        if (code == null || (!code.startsWith(\"compiler.warn.annotation.method.not.found\") && !\"compiler.warn.proc.processor.incompatible.source.version\".equals(code))) {\n          log.info(d);\n        }\n      }\n    }\n else {\n      for (      Diagnostic<?> d : diagnostics.getDiagnostics()) {\n        log.warn(d);\n      }\n      throw new RuntimeException(\"Compilation failed!\");\n    }\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Compilation failed\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 285,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 108,
        "startColumnNumber" : 14,
        "endLineNumber" : 109,
        "endColumnNumber" : 87
      },
      "nodeContext" : "code == null || (!code.startsWith(\"compiler.warn.annotation.method.not.found\") && !\"compiler.warn.proc.processor.incompatible.source.version\".equals(code))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 19,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 151,
    "startLineNumber" : 108,
    "startColumnNumber" : 31,
    "endLineNumber" : 109,
    "endColumnNumber" : 86
  } ],
  "layoutRelationDataList" : [ ]
}