{
  "id" : 410,
  "expression" : "listener",
  "projectName" : "JakeWharton@butterknife",
  "commitID" : "45b1eb9534d51405b993ae17dabc774a9d4a3892",
  "filePath" : "butterknife/src/main/java/butterknife/internal/InjectViewProcessor.java",
  "occurrences" : 10,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "listener",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 254,
      "startColumnNumber" : 8,
      "endLineNumber" : 254,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 254,
        "startColumnNumber" : 8,
        "endLineNumber" : 254,
        "endColumnNumber" : 24
      },
      "nodeContext" : "listener == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 458,
        "startLineNumber" : 254,
        "startColumnNumber" : 4,
        "endLineNumber" : 263,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (listener == null) {\n  try {\n    listener=Listener.from(listenerClassClass);\n    LISTENER_MAP.put(listenerClassClass,listener);\n  }\n catch (  IllegalArgumentException e) {\n    error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n    return;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 254,
        "startColumnNumber" : 8,
        "endLineNumber" : 254,
        "endColumnNumber" : 24
      },
      "nodeContext" : "listener == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.Listener"
  }, {
    "nodeContext" : "listener",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 257,
      "startColumnNumber" : 45,
      "endLineNumber" : 257,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 257,
        "startColumnNumber" : 8,
        "endLineNumber" : 257,
        "endColumnNumber" : 54
      },
      "nodeContext" : "LISTENER_MAP.put(listenerClassClass,listener)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 257,
        "startColumnNumber" : 8,
        "endLineNumber" : 257,
        "endColumnNumber" : 55
      },
      "nodeContext" : "LISTENER_MAP.put(listenerClassClass,listener);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 255,
        "startColumnNumber" : 10,
        "endLineNumber" : 258,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  listener=Listener.from(listenerClassClass);\n  LISTENER_MAP.put(listenerClassClass,listener);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 422,
        "startLineNumber" : 255,
        "startColumnNumber" : 6,
        "endLineNumber" : 262,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  listener=Listener.from(listenerClassClass);\n  LISTENER_MAP.put(listenerClassClass,listener);\n}\n catch (IllegalArgumentException e) {\n  error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n  return;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 436,
        "startLineNumber" : 254,
        "startColumnNumber" : 26,
        "endLineNumber" : 263,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    listener=Listener.from(listenerClassClass);\n    LISTENER_MAP.put(listenerClassClass,listener);\n  }\n catch (  IllegalArgumentException e) {\n    error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 458,
        "startLineNumber" : 254,
        "startColumnNumber" : 4,
        "endLineNumber" : 263,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (listener == null) {\n  try {\n    listener=Listener.from(listenerClassClass);\n    LISTENER_MAP.put(listenerClassClass,listener);\n  }\n catch (  IllegalArgumentException e) {\n    error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n    return;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 257,
        "startColumnNumber" : 8,
        "endLineNumber" : 257,
        "endColumnNumber" : 55
      },
      "nodeContext" : "LISTENER_MAP.put(listenerClassClass,listener);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.Listener"
  }, {
    "nodeContext" : "listener",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 267,
      "startColumnNumber" : 34,
      "endLineNumber" : 267,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 267,
        "startColumnNumber" : 34,
        "endLineNumber" : 267,
        "endColumnNumber" : 62
      },
      "nodeContext" : "listener.getParameterTypes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 267,
        "startColumnNumber" : 34,
        "endLineNumber" : 267,
        "endColumnNumber" : 69
      },
      "nodeContext" : "listener.getParameterTypes().size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 267,
        "startColumnNumber" : 8,
        "endLineNumber" : 267,
        "endColumnNumber" : 69
      },
      "nodeContext" : "methodParameters.size() > listener.getParameterTypes().size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 328,
        "startLineNumber" : 267,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (methodParameters.size() > listener.getParameterTypes().size()) {\n  error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 267,
        "startColumnNumber" : 8,
        "endLineNumber" : 267,
        "endColumnNumber" : 69
      },
      "nodeContext" : "methodParameters.size() > listener.getParameterTypes().size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.Listener"
  }, {
    "nodeContext" : "listener",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 269,
      "startColumnNumber" : 43,
      "endLineNumber" : 269,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 269,
        "startColumnNumber" : 43,
        "endLineNumber" : 269,
        "endColumnNumber" : 71
      },
      "nodeContext" : "listener.getParameterTypes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 269,
        "startColumnNumber" : 43,
        "endLineNumber" : 269,
        "endColumnNumber" : 78
      },
      "nodeContext" : "listener.getParameterTypes().size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 268,
        "startColumnNumber" : 6,
        "endLineNumber" : 270,
        "endColumnNumber" : 71
      },
      "nodeContext" : "error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 268,
        "startColumnNumber" : 6,
        "endLineNumber" : 270,
        "endColumnNumber" : 72
      },
      "nodeContext" : "error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 267,
        "startColumnNumber" : 71,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 328,
        "startLineNumber" : 267,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (methodParameters.size() > listener.getParameterTypes().size()) {\n  error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 269,
        "startColumnNumber" : 43,
        "endLineNumber" : 269,
        "endColumnNumber" : 78
      },
      "nodeContext" : "listener.getParameterTypes().size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.Listener"
  }, {
    "nodeContext" : "listener",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 275,
      "startColumnNumber" : 61,
      "endLineNumber" : 275,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 275,
        "startColumnNumber" : 61,
        "endLineNumber" : 275,
        "endColumnNumber" : 85
      },
      "nodeContext" : "listener.getReturnType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 275,
        "startColumnNumber" : 9,
        "endLineNumber" : 275,
        "endColumnNumber" : 86
      },
      "nodeContext" : "executableElement.getReturnType().toString().equals(listener.getReturnType())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 275,
        "startColumnNumber" : 8,
        "endLineNumber" : 275,
        "endColumnNumber" : 86
      },
      "nodeContext" : "!executableElement.getReturnType().toString().equals(listener.getReturnType())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 330,
        "startLineNumber" : 275,
        "startColumnNumber" : 4,
        "endLineNumber" : 280,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n  error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 275,
        "startColumnNumber" : 8,
        "endLineNumber" : 275,
        "endColumnNumber" : 86
      },
      "nodeContext" : "!executableElement.getReturnType().toString().equals(listener.getReturnType())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.Listener"
  }, {
    "nodeContext" : "listener",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 277,
      "startColumnNumber" : 43,
      "endLineNumber" : 277,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 277,
        "startColumnNumber" : 43,
        "endLineNumber" : 277,
        "endColumnNumber" : 67
      },
      "nodeContext" : "listener.getReturnType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 208,
        "startLineNumber" : 276,
        "startColumnNumber" : 6,
        "endLineNumber" : 278,
        "endColumnNumber" : 71
      },
      "nodeContext" : "error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 209,
        "startLineNumber" : 276,
        "startColumnNumber" : 6,
        "endLineNumber" : 278,
        "endColumnNumber" : 72
      },
      "nodeContext" : "error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 246,
        "startLineNumber" : 275,
        "startColumnNumber" : 88,
        "endLineNumber" : 280,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 330,
        "startLineNumber" : 275,
        "startColumnNumber" : 4,
        "endLineNumber" : 280,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n  error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 277,
        "startColumnNumber" : 43,
        "endLineNumber" : 277,
        "endColumnNumber" : 67
      },
      "nodeContext" : "listener.getReturnType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.Listener"
  }, {
    "nodeContext" : "listener",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 290,
      "startColumnNumber" : 36,
      "endLineNumber" : 290,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 290,
        "startColumnNumber" : 36,
        "endLineNumber" : 290,
        "endColumnNumber" : 64
      },
      "nodeContext" : "listener.getParameterTypes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 290,
        "startColumnNumber" : 19,
        "endLineNumber" : 290,
        "endColumnNumber" : 64
      },
      "nodeContext" : "parameterTypes=listener.getParameterTypes()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 290,
        "startColumnNumber" : 6,
        "endLineNumber" : 290,
        "endColumnNumber" : 65
      },
      "nodeContext" : "List<String> parameterTypes=listener.getParameterTypes();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2362,
        "startLineNumber" : 287,
        "startColumnNumber" : 37,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2395,
        "startLineNumber" : 287,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!methodParameters.isEmpty()) {\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 286,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 290,
        "startColumnNumber" : 6,
        "endLineNumber" : 290,
        "endColumnNumber" : 65
      },
      "nodeContext" : "List<String> parameterTypes=listener.getParameterTypes();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.Listener"
  }, {
    "nodeContext" : "listener",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 331,
      "startColumnNumber" : 22,
      "endLineNumber" : 331,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 331,
        "startColumnNumber" : 22,
        "endLineNumber" : 331,
        "endColumnNumber" : 50
      },
      "nodeContext" : "listener.getParameterTypes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 331,
        "startColumnNumber" : 22,
        "endLineNumber" : 331,
        "endColumnNumber" : 57
      },
      "nodeContext" : "listener.getParameterTypes().size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 330,
        "startColumnNumber" : 10,
        "endLineNumber" : 331,
        "endColumnNumber" : 58
      },
      "nodeContext" : "builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 330,
        "startColumnNumber" : 10,
        "endLineNumber" : 332,
        "endColumnNumber" : 41
      },
      "nodeContext" : "builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 330,
        "startColumnNumber" : 10,
        "endLineNumber" : 332,
        "endColumnNumber" : 42
      },
      "nodeContext" : "builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1549,
        "startLineNumber" : 305,
        "startColumnNumber" : 35,
        "endLineNumber" : 340,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n  for (int j=0; j < parameters.length; j++) {\n    Parameter parameter=parameters[j];\n    builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n    if (parameter == null) {\n      builder.append(\"did not match any listener parameters\");\n    }\n else {\n      builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n    }\n  }\n  builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n  for (  String parameterType : listener.getParameterTypes()) {\n    builder.append(\"\\n  \").append(parameterType);\n  }\n  builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n  error(executableElement,builder.toString());\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 305,
        "startColumnNumber" : 8,
        "endLineNumber" : 340,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (parameters[i] == null) {\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n  for (int j=0; j < parameters.length; j++) {\n    Parameter parameter=parameters[j];\n    builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n    if (parameter == null) {\n      builder.append(\"did not match any listener parameters\");\n    }\n else {\n      builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n    }\n  }\n  builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n  for (  String parameterType : listener.getParameterTypes()) {\n    builder.append(\"\\n  \").append(parameterType);\n  }\n  builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n  error(executableElement,builder.toString());\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 168,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2101,
        "startLineNumber" : 291,
        "startColumnNumber" : 56,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2151,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < methodParameters.size(); i++) {\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 247,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2362,
        "startLineNumber" : 287,
        "startColumnNumber" : 37,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2395,
        "startLineNumber" : 287,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!methodParameters.isEmpty()) {\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 286,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 331,
        "startColumnNumber" : 22,
        "endLineNumber" : 331,
        "endColumnNumber" : 57
      },
      "nodeContext" : "listener.getParameterTypes().size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.Listener"
  }, {
    "nodeContext" : "listener",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 333,
      "startColumnNumber" : 38,
      "endLineNumber" : 333,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 333,
        "startColumnNumber" : 38,
        "endLineNumber" : 333,
        "endColumnNumber" : 66
      },
      "nodeContext" : "listener.getParameterTypes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 333,
        "startColumnNumber" : 10,
        "endLineNumber" : 335,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (String parameterType : listener.getParameterTypes()) {\n  builder.append(\"\\n  \").append(parameterType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1549,
        "startLineNumber" : 305,
        "startColumnNumber" : 35,
        "endLineNumber" : 340,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n  for (int j=0; j < parameters.length; j++) {\n    Parameter parameter=parameters[j];\n    builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n    if (parameter == null) {\n      builder.append(\"did not match any listener parameters\");\n    }\n else {\n      builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n    }\n  }\n  builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n  for (  String parameterType : listener.getParameterTypes()) {\n    builder.append(\"\\n  \").append(parameterType);\n  }\n  builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n  error(executableElement,builder.toString());\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 305,
        "startColumnNumber" : 8,
        "endLineNumber" : 340,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (parameters[i] == null) {\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n  for (int j=0; j < parameters.length; j++) {\n    Parameter parameter=parameters[j];\n    builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n    if (parameter == null) {\n      builder.append(\"did not match any listener parameters\");\n    }\n else {\n      builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n    }\n  }\n  builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n  for (  String parameterType : listener.getParameterTypes()) {\n    builder.append(\"\\n  \").append(parameterType);\n  }\n  builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n  error(executableElement,builder.toString());\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 168,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2101,
        "startLineNumber" : 291,
        "startColumnNumber" : 56,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2151,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < methodParameters.size(); i++) {\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 247,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2362,
        "startLineNumber" : 287,
        "startColumnNumber" : 37,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2395,
        "startLineNumber" : 287,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!methodParameters.isEmpty()) {\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 286,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 333,
        "startColumnNumber" : 38,
        "endLineNumber" : 333,
        "endColumnNumber" : 66
      },
      "nodeContext" : "listener.getParameterTypes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.Listener"
  }, {
    "nodeContext" : "listener",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 346,
      "startColumnNumber" : 38,
      "endLineNumber" : 346,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 346,
        "startColumnNumber" : 11,
        "endLineNumber" : 346,
        "endColumnNumber" : 90
      },
      "nodeContext" : "viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 346,
        "startColumnNumber" : 10,
        "endLineNumber" : 346,
        "endColumnNumber" : 90
      },
      "nodeContext" : "!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 271,
        "startLineNumber" : 346,
        "startColumnNumber" : 6,
        "endLineNumber" : 350,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n  error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 345,
        "startColumnNumber" : 23,
        "endLineNumber" : 351,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n    error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 304,
        "startLineNumber" : 345,
        "startColumnNumber" : 4,
        "endLineNumber" : 351,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int id : ids) {\n  if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n    error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n    return;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 346,
        "startColumnNumber" : 10,
        "endLineNumber" : 346,
        "endColumnNumber" : 90
      },
      "nodeContext" : "!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.Listener"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 254,
    "startColumnNumber" : 8,
    "endLineNumber" : 254,
    "endColumnNumber" : 16
  }, {
    "charLength" : 8,
    "startLineNumber" : 257,
    "startColumnNumber" : 45,
    "endLineNumber" : 257,
    "endColumnNumber" : 53
  }, {
    "charLength" : 8,
    "startLineNumber" : 267,
    "startColumnNumber" : 34,
    "endLineNumber" : 267,
    "endColumnNumber" : 42
  }, {
    "charLength" : 8,
    "startLineNumber" : 269,
    "startColumnNumber" : 43,
    "endLineNumber" : 269,
    "endColumnNumber" : 51
  }, {
    "charLength" : 8,
    "startLineNumber" : 275,
    "startColumnNumber" : 61,
    "endLineNumber" : 275,
    "endColumnNumber" : 69
  }, {
    "charLength" : 8,
    "startLineNumber" : 277,
    "startColumnNumber" : 43,
    "endLineNumber" : 277,
    "endColumnNumber" : 51
  }, {
    "charLength" : 8,
    "startLineNumber" : 290,
    "startColumnNumber" : 36,
    "endLineNumber" : 290,
    "endColumnNumber" : 44
  }, {
    "charLength" : 8,
    "startLineNumber" : 331,
    "startColumnNumber" : 22,
    "endLineNumber" : 331,
    "endColumnNumber" : 30
  }, {
    "charLength" : 8,
    "startLineNumber" : 333,
    "startColumnNumber" : 38,
    "endLineNumber" : 333,
    "endColumnNumber" : 46
  }, {
    "charLength" : 8,
    "startLineNumber" : 346,
    "startColumnNumber" : 38,
    "endLineNumber" : 346,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 5
  } ]
}