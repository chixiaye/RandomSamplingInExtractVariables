{
  "id" : 318,
  "expression" : "(float)Math.sin(upAngle)",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/PhotoFace.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(float)Math.sin(upAngle)",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 78,
      "startColumnNumber" : 57,
      "endLineNumber" : 78,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 78,
        "startColumnNumber" : 40,
        "endLineNumber" : 78,
        "endColumnNumber" : 81
      },
      "nodeContext" : "foreheadHeight * (float)Math.sin(upAngle)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 78,
        "startColumnNumber" : 20,
        "endLineNumber" : 78,
        "endColumnNumber" : 81
      },
      "nodeContext" : "eyesCenterPoint.y + foreheadHeight * (float)Math.sin(upAngle)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 77,
        "startColumnNumber" : 28,
        "endLineNumber" : 78,
        "endColumnNumber" : 82
      },
      "nodeContext" : "new Point(eyesCenterPoint.x + foreheadHeight * (float)Math.cos(upAngle),eyesCenterPoint.y + foreheadHeight * (float)Math.sin(upAngle))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 82
      },
      "nodeContext" : "foreheadPoint=new Point(eyesCenterPoint.x + foreheadHeight * (float)Math.cos(upAngle),eyesCenterPoint.y + foreheadHeight * (float)Math.sin(upAngle))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 83
      },
      "nodeContext" : "foreheadPoint=new Point(eyesCenterPoint.x + foreheadHeight * (float)Math.cos(upAngle),eyesCenterPoint.y + foreheadHeight * (float)Math.sin(upAngle));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 956,
        "startLineNumber" : 62,
        "startColumnNumber" : 59,
        "endLineNumber" : 79,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (leftEyePoint.x < rightEyePoint.x) {\n    Point temp=leftEyePoint;\n    leftEyePoint=rightEyePoint;\n    rightEyePoint=temp;\n  }\n  eyesCenterPoint=new Point(0.5f * leftEyePoint.x + 0.5f * rightEyePoint.x,0.5f * leftEyePoint.y + 0.5f * rightEyePoint.y);\n  eyesDistance=(float)Math.hypot(rightEyePoint.x - leftEyePoint.x,rightEyePoint.y - leftEyePoint.y);\n  angle=(float)Math.toDegrees(Math.PI + Math.atan2(rightEyePoint.y - leftEyePoint.y,rightEyePoint.x - leftEyePoint.x));\n  width=eyesDistance * 2.35f;\n  float foreheadHeight=0.8f * eyesDistance;\n  float upAngle=(float)Math.toRadians(angle - 90);\n  foreheadPoint=new Point(eyesCenterPoint.x + foreheadHeight * (float)Math.cos(upAngle),eyesCenterPoint.y + foreheadHeight * (float)Math.sin(upAngle));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1007,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (leftEyePoint != null && rightEyePoint != null) {\n  if (leftEyePoint.x < rightEyePoint.x) {\n    Point temp=leftEyePoint;\n    leftEyePoint=rightEyePoint;\n    rightEyePoint=temp;\n  }\n  eyesCenterPoint=new Point(0.5f * leftEyePoint.x + 0.5f * rightEyePoint.x,0.5f * leftEyePoint.y + 0.5f * rightEyePoint.y);\n  eyesDistance=(float)Math.hypot(rightEyePoint.x - leftEyePoint.x,rightEyePoint.y - leftEyePoint.y);\n  angle=(float)Math.toDegrees(Math.PI + Math.atan2(rightEyePoint.y - leftEyePoint.y,rightEyePoint.x - leftEyePoint.x));\n  width=eyesDistance * 2.35f;\n  float foreheadHeight=0.8f * eyesDistance;\n  float upAngle=(float)Math.toRadians(angle - 90);\n  foreheadPoint=new Point(eyesCenterPoint.x + foreheadHeight * (float)Math.cos(upAngle),eyesCenterPoint.y + foreheadHeight * (float)Math.sin(upAngle));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 166,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2839,
        "startLineNumber" : 27,
        "startColumnNumber" : 88,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Landmark> landmarks=face.getLandmarks();\n  Point leftEyePoint=null;\n  Point rightEyePoint=null;\n  Point leftMouthPoint=null;\n  Point rightMouthPoint=null;\n  for (  Landmark landmark : landmarks) {\n    PointF point=landmark.getPosition();\nswitch (landmark.getType()) {\ncase Landmark.LEFT_EYE:{\n        leftEyePoint=transposePoint(point,sourceBitmap,targetSize,sideward);\n      }\n    break;\ncase Landmark.RIGHT_EYE:{\n    rightEyePoint=transposePoint(point,sourceBitmap,targetSize,sideward);\n  }\nbreak;\ncase Landmark.LEFT_MOUTH:{\nleftMouthPoint=transposePoint(point,sourceBitmap,targetSize,sideward);\n}\nbreak;\ncase Landmark.RIGHT_MOUTH:{\nrightMouthPoint=transposePoint(point,sourceBitmap,targetSize,sideward);\n}\nbreak;\n}\n}\nif (leftEyePoint != null && rightEyePoint != null) {\nif (leftEyePoint.x < rightEyePoint.x) {\nPoint temp=leftEyePoint;\nleftEyePoint=rightEyePoint;\nrightEyePoint=temp;\n}\neyesCenterPoint=new Point(0.5f * leftEyePoint.x + 0.5f * rightEyePoint.x,0.5f * leftEyePoint.y + 0.5f * rightEyePoint.y);\neyesDistance=(float)Math.hypot(rightEyePoint.x - leftEyePoint.x,rightEyePoint.y - leftEyePoint.y);\nangle=(float)Math.toDegrees(Math.PI + Math.atan2(rightEyePoint.y - leftEyePoint.y,rightEyePoint.x - leftEyePoint.x));\nwidth=eyesDistance * 2.35f;\nfloat foreheadHeight=0.8f * eyesDistance;\nfloat upAngle=(float)Math.toRadians(angle - 90);\nforeheadPoint=new Point(eyesCenterPoint.x + foreheadHeight * (float)Math.cos(upAngle),eyesCenterPoint.y + foreheadHeight * (float)Math.sin(upAngle));\n}\nif (leftMouthPoint != null && rightMouthPoint != null) {\nif (leftMouthPoint.x < rightMouthPoint.x) {\nPoint temp=leftMouthPoint;\nleftMouthPoint=rightMouthPoint;\nrightMouthPoint=temp;\n}\nmouthPoint=new Point(0.5f * leftMouthPoint.x + 0.5f * rightMouthPoint.x,0.5f * leftMouthPoint.y + 0.5f * rightMouthPoint.y);\nfloat chinDepth=0.7f * eyesDistance;\nfloat downAngle=(float)Math.toRadians(angle + 90);\nchinPoint=new Point(mouthPoint.x + chinDepth * (float)Math.cos(downAngle),mouthPoint.y + chinDepth * (float)Math.sin(downAngle));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 390,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2923,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PhotoFace(Face face,Bitmap sourceBitmap,Size targetSize,boolean sideward){\n  List<Landmark> landmarks=face.getLandmarks();\n  Point leftEyePoint=null;\n  Point rightEyePoint=null;\n  Point leftMouthPoint=null;\n  Point rightMouthPoint=null;\n  for (  Landmark landmark : landmarks) {\n    PointF point=landmark.getPosition();\nswitch (landmark.getType()) {\ncase Landmark.LEFT_EYE:{\n        leftEyePoint=transposePoint(point,sourceBitmap,targetSize,sideward);\n      }\n    break;\ncase Landmark.RIGHT_EYE:{\n    rightEyePoint=transposePoint(point,sourceBitmap,targetSize,sideward);\n  }\nbreak;\ncase Landmark.LEFT_MOUTH:{\nleftMouthPoint=transposePoint(point,sourceBitmap,targetSize,sideward);\n}\nbreak;\ncase Landmark.RIGHT_MOUTH:{\nrightMouthPoint=transposePoint(point,sourceBitmap,targetSize,sideward);\n}\nbreak;\n}\n}\nif (leftEyePoint != null && rightEyePoint != null) {\nif (leftEyePoint.x < rightEyePoint.x) {\nPoint temp=leftEyePoint;\nleftEyePoint=rightEyePoint;\nrightEyePoint=temp;\n}\neyesCenterPoint=new Point(0.5f * leftEyePoint.x + 0.5f * rightEyePoint.x,0.5f * leftEyePoint.y + 0.5f * rightEyePoint.y);\neyesDistance=(float)Math.hypot(rightEyePoint.x - leftEyePoint.x,rightEyePoint.y - leftEyePoint.y);\nangle=(float)Math.toDegrees(Math.PI + Math.atan2(rightEyePoint.y - leftEyePoint.y,rightEyePoint.x - leftEyePoint.x));\nwidth=eyesDistance * 2.35f;\nfloat foreheadHeight=0.8f * eyesDistance;\nfloat upAngle=(float)Math.toRadians(angle - 90);\nforeheadPoint=new Point(eyesCenterPoint.x + foreheadHeight * (float)Math.cos(upAngle),eyesCenterPoint.y + foreheadHeight * (float)Math.sin(upAngle));\n}\nif (leftMouthPoint != null && rightMouthPoint != null) {\nif (leftMouthPoint.x < rightMouthPoint.x) {\nPoint temp=leftMouthPoint;\nleftMouthPoint=rightMouthPoint;\nrightMouthPoint=temp;\n}\nmouthPoint=new Point(0.5f * leftMouthPoint.x + 0.5f * rightMouthPoint.x,0.5f * leftMouthPoint.y + 0.5f * rightMouthPoint.y);\nfloat chinDepth=0.7f * eyesDistance;\nfloat downAngle=(float)Math.toRadians(angle + 90);\nchinPoint=new Point(mouthPoint.x + chinDepth * (float)Math.cos(downAngle),mouthPoint.y + chinDepth * (float)Math.sin(downAngle));\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 408,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 78,
        "startColumnNumber" : 20,
        "endLineNumber" : 78,
        "endColumnNumber" : 81
      },
      "nodeContext" : "eyesCenterPoint.y + foreheadHeight * (float)Math.sin(upAngle)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 78,
    "startColumnNumber" : 57,
    "endLineNumber" : 78,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}