{
  "id" : 340,
  "expression" : "tester().assertStatsFor(pb -> {\n  VariableReferenceExpression a=pb.variable(\"a\",BIGINT);\n  VariableReferenceExpression b=pb.variable(\"b\",BIGINT);\n  VariableReferenceExpression c=pb.variable(\"c\",BIGINT);\n  VariableReferenceExpression semiJoinOutput=pb.variable(\"sjo\",BOOLEAN);\n  return pb.semiJoin(pb.values(a,b),pb.values(c),a,c,semiJoinOutput,Optional.empty(),Optional.empty(),Optional.empty());\n}\n).withSourceStats(0,PlanNodeStatsEstimate.builder().setOutputRowCount(10).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"a\",BIGINT),stats).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"b\",BIGINT),stats).build()).withSourceStats(1,PlanNodeStatsEstimate.builder().setOutputRowCount(20).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"c\",BIGINT),stats).build())",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/test/java/com/facebook/presto/cost/TestSemiJoinStatsRule.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tester().assertStatsFor(pb -> {\n  VariableReferenceExpression a=pb.variable(\"a\",BIGINT);\n  VariableReferenceExpression b=pb.variable(\"b\",BIGINT);\n  VariableReferenceExpression c=pb.variable(\"c\",BIGINT);\n  VariableReferenceExpression semiJoinOutput=pb.variable(\"sjo\",BOOLEAN);\n  return pb.semiJoin(pb.values(a,b),pb.values(c),a,c,semiJoinOutput,Optional.empty(),Optional.empty(),Optional.empty());\n}\n).withSourceStats(0,PlanNodeStatsEstimate.builder().setOutputRowCount(10).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"a\",BIGINT),stats).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"b\",BIGINT),stats).build()).withSourceStats(1,PlanNodeStatsEstimate.builder().setOutputRowCount(20).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"c\",BIGINT),stats).build())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 1346,
      "startLineNumber" : 37,
      "startColumnNumber" : 8,
      "endLineNumber" : 60,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 128,
    "astHeight" : 9,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1822,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 53
      },
      "nodeContext" : "tester().assertStatsFor(pb -> {\n  VariableReferenceExpression a=pb.variable(\"a\",BIGINT);\n  VariableReferenceExpression b=pb.variable(\"b\",BIGINT);\n  VariableReferenceExpression c=pb.variable(\"c\",BIGINT);\n  VariableReferenceExpression semiJoinOutput=pb.variable(\"sjo\",BOOLEAN);\n  return pb.semiJoin(pb.values(a,b),pb.values(c),a,c,semiJoinOutput,Optional.empty(),Optional.empty(),Optional.empty());\n}\n).withSourceStats(0,PlanNodeStatsEstimate.builder().setOutputRowCount(10).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"a\",BIGINT),stats).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"b\",BIGINT),stats).build()).withSourceStats(1,PlanNodeStatsEstimate.builder().setOutputRowCount(20).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"c\",BIGINT),stats).build()).check(check -> check.outputRowsCount(10).variableStats(new VariableReferenceExpression(Optional.empty(),\"a\",BIGINT),assertion -> assertion.isEqualTo(stats)).variableStats(new VariableReferenceExpression(Optional.empty(),\"b\",BIGINT),assertion -> assertion.isEqualTo(stats)).variableStatsUnknown(\"c\").variableStatsUnknown(\"sjo\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 177,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1823,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 54
      },
      "nodeContext" : "tester().assertStatsFor(pb -> {\n  VariableReferenceExpression a=pb.variable(\"a\",BIGINT);\n  VariableReferenceExpression b=pb.variable(\"b\",BIGINT);\n  VariableReferenceExpression c=pb.variable(\"c\",BIGINT);\n  VariableReferenceExpression semiJoinOutput=pb.variable(\"sjo\",BOOLEAN);\n  return pb.semiJoin(pb.values(a,b),pb.values(c),a,c,semiJoinOutput,Optional.empty(),Optional.empty(),Optional.empty());\n}\n).withSourceStats(0,PlanNodeStatsEstimate.builder().setOutputRowCount(10).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"a\",BIGINT),stats).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"b\",BIGINT),stats).build()).withSourceStats(1,PlanNodeStatsEstimate.builder().setOutputRowCount(20).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"c\",BIGINT),stats).build()).check(check -> check.outputRowsCount(10).variableStats(new VariableReferenceExpression(Optional.empty(),\"a\",BIGINT),assertion -> assertion.isEqualTo(stats)).variableStats(new VariableReferenceExpression(Optional.empty(),\"b\",BIGINT),assertion -> assertion.isEqualTo(stats)).variableStatsUnknown(\"c\").variableStatsUnknown(\"sjo\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 178,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2084,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  VariableStatsEstimate stats=VariableStatsEstimate.builder().setLowValue(1).setHighValue(10).setDistinctValuesCount(5).setNullsFraction(0.3).build();\n  tester().assertStatsFor(pb -> {\n    VariableReferenceExpression a=pb.variable(\"a\",BIGINT);\n    VariableReferenceExpression b=pb.variable(\"b\",BIGINT);\n    VariableReferenceExpression c=pb.variable(\"c\",BIGINT);\n    VariableReferenceExpression semiJoinOutput=pb.variable(\"sjo\",BOOLEAN);\n    return pb.semiJoin(pb.values(a,b),pb.values(c),a,c,semiJoinOutput,Optional.empty(),Optional.empty(),Optional.empty());\n  }\n).withSourceStats(0,PlanNodeStatsEstimate.builder().setOutputRowCount(10).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"a\",BIGINT),stats).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"b\",BIGINT),stats).build()).withSourceStats(1,PlanNodeStatsEstimate.builder().setOutputRowCount(20).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"c\",BIGINT),stats).build()).check(check -> check.outputRowsCount(10).variableStats(new VariableReferenceExpression(Optional.empty(),\"a\",BIGINT),assertion -> assertion.isEqualTo(stats)).variableStats(new VariableReferenceExpression(Optional.empty(),\"b\",BIGINT),assertion -> assertion.isEqualTo(stats)).variableStatsUnknown(\"c\").variableStatsUnknown(\"sjo\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 201,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2146,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSemiJoinPropagatesSourceStats(){\n  VariableStatsEstimate stats=VariableStatsEstimate.builder().setLowValue(1).setHighValue(10).setDistinctValuesCount(5).setNullsFraction(0.3).build();\n  tester().assertStatsFor(pb -> {\n    VariableReferenceExpression a=pb.variable(\"a\",BIGINT);\n    VariableReferenceExpression b=pb.variable(\"b\",BIGINT);\n    VariableReferenceExpression c=pb.variable(\"c\",BIGINT);\n    VariableReferenceExpression semiJoinOutput=pb.variable(\"sjo\",BOOLEAN);\n    return pb.semiJoin(pb.values(a,b),pb.values(c),a,c,semiJoinOutput,Optional.empty(),Optional.empty(),Optional.empty());\n  }\n).withSourceStats(0,PlanNodeStatsEstimate.builder().setOutputRowCount(10).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"a\",BIGINT),stats).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"b\",BIGINT),stats).build()).withSourceStats(1,PlanNodeStatsEstimate.builder().setOutputRowCount(20).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"c\",BIGINT),stats).build()).check(check -> check.outputRowsCount(10).variableStats(new VariableReferenceExpression(Optional.empty(),\"a\",BIGINT),assertion -> assertion.isEqualTo(stats)).variableStats(new VariableReferenceExpression(Optional.empty(),\"b\",BIGINT),assertion -> assertion.isEqualTo(stats)).variableStatsUnknown(\"c\").variableStatsUnknown(\"sjo\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 207,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1822,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 53
      },
      "nodeContext" : "tester().assertStatsFor(pb -> {\n  VariableReferenceExpression a=pb.variable(\"a\",BIGINT);\n  VariableReferenceExpression b=pb.variable(\"b\",BIGINT);\n  VariableReferenceExpression c=pb.variable(\"c\",BIGINT);\n  VariableReferenceExpression semiJoinOutput=pb.variable(\"sjo\",BOOLEAN);\n  return pb.semiJoin(pb.values(a,b),pb.values(c),a,c,semiJoinOutput,Optional.empty(),Optional.empty(),Optional.empty());\n}\n).withSourceStats(0,PlanNodeStatsEstimate.builder().setOutputRowCount(10).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"a\",BIGINT),stats).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"b\",BIGINT),stats).build()).withSourceStats(1,PlanNodeStatsEstimate.builder().setOutputRowCount(20).addVariableStatistics(new VariableReferenceExpression(Optional.empty(),\"c\",BIGINT),stats).build()).check(check -> check.outputRowsCount(10).variableStats(new VariableReferenceExpression(Optional.empty(),\"a\",BIGINT),assertion -> assertion.isEqualTo(stats)).variableStats(new VariableReferenceExpression(Optional.empty(),\"b\",BIGINT),assertion -> assertion.isEqualTo(stats)).variableStatsUnknown(\"c\").variableStatsUnknown(\"sjo\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 177,
      "astHeight" : 10
    },
    "tokenLength" : 77,
    "type" : "com.facebook.presto.cost.StatsCalculatorAssertion"
  } ],
  "positionList" : [ {
    "charLength" : 1346,
    "startLineNumber" : 37,
    "startColumnNumber" : 8,
    "endLineNumber" : 60,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}