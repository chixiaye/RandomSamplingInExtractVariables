{
  "id" : 127,
  "expression" : "\"else \" + readSt",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/annotations/src/main/java/mindustry/annotations/misc/LogicStatementProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"else \" + readSt",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 60,
      "startColumnNumber" : 39,
      "endLineNumber" : 60,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 60,
        "endColumnNumber" : 62
      },
      "nodeContext" : "reader.nextControlFlow(\"else \" + readSt,name)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 60,
        "endColumnNumber" : 63
      },
      "nodeContext" : "reader.nextControlFlow(\"else \" + readSt,name);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 59,
        "startColumnNumber" : 25,
        "endLineNumber" : 61,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  reader.nextControlFlow(\"else \" + readSt,name);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (beganRead) {\n  reader.nextControlFlow(\"else \" + readSt,name);\n}\n else {\n  reader.beginControlFlow(readSt,name);\n  beganRead=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2066,
        "startLineNumber" : 42,
        "startColumnNumber" : 28,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=c.annotation(RegisterStatement.class).value();\n  if (beganWrite) {\n    writer.nextControlFlow(\"else if(obj.getClass() == $T.class)\",c.mirror());\n  }\n else {\n    writer.beginControlFlow(\"if(obj.getClass() == $T.class)\",c.mirror());\n    beganWrite=true;\n  }\n  writer.addStatement(\"out.append($S)\",name);\n  Seq<Svar> fields=c.fields();\n  fields.addAll(c.superclass().fields());\n  String readSt=\"if(tokens[0].equals($S))\";\n  if (beganRead) {\n    reader.nextControlFlow(\"else \" + readSt,name);\n  }\n else {\n    reader.beginControlFlow(readSt,name);\n    beganRead=true;\n  }\n  reader.addStatement(\"$T result = new $T()\",c.mirror(),c.mirror());\n  int index=0;\n  for (  Svar field : fields) {\n    if (field.isAny(Modifier.TRANSIENT,Modifier.STATIC))     continue;\n    writer.addStatement(\"out.append(\\\" \\\")\");\n    writer.addStatement(\"out.append((($T)obj).$L$L)\",c.mirror(),field.name(),Seq.with(typeu.directSupertypes(field.mirror())).contains(t -> t.toString().contains(\"java.lang.Enum\")) ? \".name()\" : \"\");\n    reader.addStatement(\"if(tokens.length > $L) result.$L = $L(tokens[$L])\",index + 1,field.name(),field.mirror().toString().equals(\"java.lang.String\") ? \"\" : (field.tname().isPrimitive() ? field.tname().box().toString() : field.mirror().toString()) + \".valueOf\",index + 1);\n    index++;\n  }\n  reader.addStatement(\"result.afterRead()\");\n  reader.addStatement(\"return result\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Stype c : types) {\n  String name=c.annotation(RegisterStatement.class).value();\n  if (beganWrite) {\n    writer.nextControlFlow(\"else if(obj.getClass() == $T.class)\",c.mirror());\n  }\n else {\n    writer.beginControlFlow(\"if(obj.getClass() == $T.class)\",c.mirror());\n    beganWrite=true;\n  }\n  writer.addStatement(\"out.append($S)\",name);\n  Seq<Svar> fields=c.fields();\n  fields.addAll(c.superclass().fields());\n  String readSt=\"if(tokens[0].equals($S))\";\n  if (beganRead) {\n    reader.nextControlFlow(\"else \" + readSt,name);\n  }\n else {\n    reader.beginControlFlow(readSt,name);\n    beganRead=true;\n  }\n  reader.addStatement(\"$T result = new $T()\",c.mirror(),c.mirror());\n  int index=0;\n  for (  Svar field : fields) {\n    if (field.isAny(Modifier.TRANSIENT,Modifier.STATIC))     continue;\n    writer.addStatement(\"out.append(\\\" \\\")\");\n    writer.addStatement(\"out.append((($T)obj).$L$L)\",c.mirror(),field.name(),Seq.with(typeu.directSupertypes(field.mirror())).contains(t -> t.toString().contains(\"java.lang.Enum\")) ? \".name()\" : \"\");\n    reader.addStatement(\"if(tokens.length > $L) result.$L = $L(tokens[$L])\",index + 1,field.name(),field.mirror().toString().equals(\"java.lang.String\") ? \"\" : (field.tname().isPrimitive() ? field.tname().box().toString() : field.mirror().toString()) + \".valueOf\",index + 1);\n    index++;\n  }\n  reader.addStatement(\"result.afterRead()\");\n  reader.addStatement(\"return result\");\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 229,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3418,
        "startLineNumber" : 17,
        "startColumnNumber" : 62,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TypeSpec.Builder type=TypeSpec.classBuilder(\"LogicIO\").addModifiers(Modifier.PUBLIC);\n  MethodSpec.Builder writer=MethodSpec.methodBuilder(\"write\").addModifiers(Modifier.PUBLIC,Modifier.STATIC).addParameter(Object.class,\"obj\").addParameter(StringBuilder.class,\"out\");\n  MethodSpec.Builder reader=MethodSpec.methodBuilder(\"read\").addModifiers(Modifier.PUBLIC,Modifier.STATIC).returns(tname(\"mindustry.logic.LStatement\")).addParameter(String[].class,\"tokens\");\n  Seq<Stype> types=types(RegisterStatement.class);\n  type.addField(FieldSpec.builder(ParameterizedTypeName.get(ClassName.get(Seq.class),ParameterizedTypeName.get(ClassName.get(Prov.class),tname(\"mindustry.logic.LStatement\"))),\"allStatements\",Modifier.PUBLIC,Modifier.STATIC).initializer(\"Seq.with(\" + types.toString(\", \",t -> \"\" + t.toString() + \"::new\") + \")\").build());\n  boolean beganWrite=false, beganRead=false;\n  for (  Stype c : types) {\n    String name=c.annotation(RegisterStatement.class).value();\n    if (beganWrite) {\n      writer.nextControlFlow(\"else if(obj.getClass() == $T.class)\",c.mirror());\n    }\n else {\n      writer.beginControlFlow(\"if(obj.getClass() == $T.class)\",c.mirror());\n      beganWrite=true;\n    }\n    writer.addStatement(\"out.append($S)\",name);\n    Seq<Svar> fields=c.fields();\n    fields.addAll(c.superclass().fields());\n    String readSt=\"if(tokens[0].equals($S))\";\n    if (beganRead) {\n      reader.nextControlFlow(\"else \" + readSt,name);\n    }\n else {\n      reader.beginControlFlow(readSt,name);\n      beganRead=true;\n    }\n    reader.addStatement(\"$T result = new $T()\",c.mirror(),c.mirror());\n    int index=0;\n    for (    Svar field : fields) {\n      if (field.isAny(Modifier.TRANSIENT,Modifier.STATIC))       continue;\n      writer.addStatement(\"out.append(\\\" \\\")\");\n      writer.addStatement(\"out.append((($T)obj).$L$L)\",c.mirror(),field.name(),Seq.with(typeu.directSupertypes(field.mirror())).contains(t -> t.toString().contains(\"java.lang.Enum\")) ? \".name()\" : \"\");\n      reader.addStatement(\"if(tokens.length > $L) result.$L = $L(tokens[$L])\",index + 1,field.name(),field.mirror().toString().equals(\"java.lang.String\") ? \"\" : (field.tname().isPrimitive() ? field.tname().box().toString() : field.mirror().toString()) + \".valueOf\",index + 1);\n      index++;\n    }\n    reader.addStatement(\"result.afterRead()\");\n    reader.addStatement(\"return result\");\n  }\n  reader.endControlFlow();\n  writer.endControlFlow();\n  reader.addStatement(\"return null\");\n  type.addMethod(writer.build());\n  type.addMethod(reader.build());\n  write(type);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3490,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void process(RoundEnvironment env) throws Exception {\n  TypeSpec.Builder type=TypeSpec.classBuilder(\"LogicIO\").addModifiers(Modifier.PUBLIC);\n  MethodSpec.Builder writer=MethodSpec.methodBuilder(\"write\").addModifiers(Modifier.PUBLIC,Modifier.STATIC).addParameter(Object.class,\"obj\").addParameter(StringBuilder.class,\"out\");\n  MethodSpec.Builder reader=MethodSpec.methodBuilder(\"read\").addModifiers(Modifier.PUBLIC,Modifier.STATIC).returns(tname(\"mindustry.logic.LStatement\")).addParameter(String[].class,\"tokens\");\n  Seq<Stype> types=types(RegisterStatement.class);\n  type.addField(FieldSpec.builder(ParameterizedTypeName.get(ClassName.get(Seq.class),ParameterizedTypeName.get(ClassName.get(Prov.class),tname(\"mindustry.logic.LStatement\"))),\"allStatements\",Modifier.PUBLIC,Modifier.STATIC).initializer(\"Seq.with(\" + types.toString(\", \",t -> \"\" + t.toString() + \"::new\") + \")\").build());\n  boolean beganWrite=false, beganRead=false;\n  for (  Stype c : types) {\n    String name=c.annotation(RegisterStatement.class).value();\n    if (beganWrite) {\n      writer.nextControlFlow(\"else if(obj.getClass() == $T.class)\",c.mirror());\n    }\n else {\n      writer.beginControlFlow(\"if(obj.getClass() == $T.class)\",c.mirror());\n      beganWrite=true;\n    }\n    writer.addStatement(\"out.append($S)\",name);\n    Seq<Svar> fields=c.fields();\n    fields.addAll(c.superclass().fields());\n    String readSt=\"if(tokens[0].equals($S))\";\n    if (beganRead) {\n      reader.nextControlFlow(\"else \" + readSt,name);\n    }\n else {\n      reader.beginControlFlow(readSt,name);\n      beganRead=true;\n    }\n    reader.addStatement(\"$T result = new $T()\",c.mirror(),c.mirror());\n    int index=0;\n    for (    Svar field : fields) {\n      if (field.isAny(Modifier.TRANSIENT,Modifier.STATIC))       continue;\n      writer.addStatement(\"out.append(\\\" \\\")\");\n      writer.addStatement(\"out.append((($T)obj).$L$L)\",c.mirror(),field.name(),Seq.with(typeu.directSupertypes(field.mirror())).contains(t -> t.toString().contains(\"java.lang.Enum\")) ? \".name()\" : \"\");\n      reader.addStatement(\"if(tokens.length > $L) result.$L = $L(tokens[$L])\",index + 1,field.name(),field.mirror().toString().equals(\"java.lang.String\") ? \"\" : (field.tname().isPrimitive() ? field.tname().box().toString() : field.mirror().toString()) + \".valueOf\",index + 1);\n      index++;\n    }\n    reader.addStatement(\"result.afterRead()\");\n    reader.addStatement(\"return result\");\n  }\n  reader.endControlFlow();\n  writer.endControlFlow();\n  reader.addStatement(\"return null\");\n  type.addMethod(writer.build());\n  type.addMethod(reader.build());\n  write(type);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 60,
        "endColumnNumber" : 63
      },
      "nodeContext" : "reader.nextControlFlow(\"else \" + readSt,name);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 60,
    "startColumnNumber" : 39,
    "endLineNumber" : 60,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}