{
  "id" : 413,
  "expression" : "null",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-core/src/main/java/cn/hutool/core/convert/AbstractConverter.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 42,
      "startColumnNumber" : 6,
      "endLineNumber" : 42,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 42,
        "startColumnNumber" : 6,
        "endLineNumber" : 42,
        "endColumnNumber" : 24
      },
      "nodeContext" : "null == targetType",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 42,
        "startColumnNumber" : 6,
        "endLineNumber" : 42,
        "endColumnNumber" : 48
      },
      "nodeContext" : "null == targetType && null == defaultValue",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 44,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (null == targetType && null == defaultValue) {\n  throw new NullPointerException(StrUtil.format(\"[type] and [defaultValue] are both null for Converter [{}], we can not know what type to convert !\",this.getClass().getName()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 983,
        "startLineNumber" : 40,
        "startColumnNumber" : 48,
        "endLineNumber" : 64,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Class<T> targetType=getTargetType();\n  if (null == targetType && null == defaultValue) {\n    throw new NullPointerException(StrUtil.format(\"[type] and [defaultValue] are both null for Converter [{}], we can not know what type to convert !\",this.getClass().getName()));\n  }\n  if (null == targetType) {\n    targetType=(Class<T>)defaultValue.getClass();\n  }\n  if (null == value) {\n    return defaultValue;\n  }\n  if (null == defaultValue || targetType.isInstance(defaultValue)) {\n    if (targetType.isInstance(value) && false == Map.class.isAssignableFrom(targetType)) {\n      return targetType.cast(value);\n    }\n    T result=convertInternal(value);\n    return ((null == result) ? defaultValue : result);\n  }\n else {\n    throw new IllegalArgumentException(StrUtil.format(\"Default value [{}]({}) is not the instance of [{}]\",defaultValue,defaultValue.getClass(),targetType));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1075,
        "startLineNumber" : 38,
        "startColumnNumber" : 1,
        "endLineNumber" : 64,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") public T convert(Object value,T defaultValue){\n  Class<T> targetType=getTargetType();\n  if (null == targetType && null == defaultValue) {\n    throw new NullPointerException(StrUtil.format(\"[type] and [defaultValue] are both null for Converter [{}], we can not know what type to convert !\",this.getClass().getName()));\n  }\n  if (null == targetType) {\n    targetType=(Class<T>)defaultValue.getClass();\n  }\n  if (null == value) {\n    return defaultValue;\n  }\n  if (null == defaultValue || targetType.isInstance(defaultValue)) {\n    if (targetType.isInstance(value) && false == Map.class.isAssignableFrom(targetType)) {\n      return targetType.cast(value);\n    }\n    T result=convertInternal(value);\n    return ((null == result) ? defaultValue : result);\n  }\n else {\n    throw new IllegalArgumentException(StrUtil.format(\"Default value [{}]({}) is not the instance of [{}]\",defaultValue,defaultValue.getClass(),targetType));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 42,
        "startColumnNumber" : 6,
        "endLineNumber" : 42,
        "endColumnNumber" : 48
      },
      "nodeContext" : "null == targetType && null == defaultValue",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 42,
      "startColumnNumber" : 28,
      "endLineNumber" : 42,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 42,
        "startColumnNumber" : 28,
        "endLineNumber" : 42,
        "endColumnNumber" : 48
      },
      "nodeContext" : "null == defaultValue",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 42,
        "startColumnNumber" : 6,
        "endLineNumber" : 42,
        "endColumnNumber" : 48
      },
      "nodeContext" : "null == targetType && null == defaultValue",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 44,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (null == targetType && null == defaultValue) {\n  throw new NullPointerException(StrUtil.format(\"[type] and [defaultValue] are both null for Converter [{}], we can not know what type to convert !\",this.getClass().getName()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 983,
        "startLineNumber" : 40,
        "startColumnNumber" : 48,
        "endLineNumber" : 64,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Class<T> targetType=getTargetType();\n  if (null == targetType && null == defaultValue) {\n    throw new NullPointerException(StrUtil.format(\"[type] and [defaultValue] are both null for Converter [{}], we can not know what type to convert !\",this.getClass().getName()));\n  }\n  if (null == targetType) {\n    targetType=(Class<T>)defaultValue.getClass();\n  }\n  if (null == value) {\n    return defaultValue;\n  }\n  if (null == defaultValue || targetType.isInstance(defaultValue)) {\n    if (targetType.isInstance(value) && false == Map.class.isAssignableFrom(targetType)) {\n      return targetType.cast(value);\n    }\n    T result=convertInternal(value);\n    return ((null == result) ? defaultValue : result);\n  }\n else {\n    throw new IllegalArgumentException(StrUtil.format(\"Default value [{}]({}) is not the instance of [{}]\",defaultValue,defaultValue.getClass(),targetType));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1075,
        "startLineNumber" : 38,
        "startColumnNumber" : 1,
        "endLineNumber" : 64,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") public T convert(Object value,T defaultValue){\n  Class<T> targetType=getTargetType();\n  if (null == targetType && null == defaultValue) {\n    throw new NullPointerException(StrUtil.format(\"[type] and [defaultValue] are both null for Converter [{}], we can not know what type to convert !\",this.getClass().getName()));\n  }\n  if (null == targetType) {\n    targetType=(Class<T>)defaultValue.getClass();\n  }\n  if (null == value) {\n    return defaultValue;\n  }\n  if (null == defaultValue || targetType.isInstance(defaultValue)) {\n    if (targetType.isInstance(value) && false == Map.class.isAssignableFrom(targetType)) {\n      return targetType.cast(value);\n    }\n    T result=convertInternal(value);\n    return ((null == result) ? defaultValue : result);\n  }\n else {\n    throw new IllegalArgumentException(StrUtil.format(\"Default value [{}]({}) is not the instance of [{}]\",defaultValue,defaultValue.getClass(),targetType));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 42,
        "startColumnNumber" : 6,
        "endLineNumber" : 42,
        "endColumnNumber" : 48
      },
      "nodeContext" : "null == targetType && null == defaultValue",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 45,
      "startColumnNumber" : 6,
      "endLineNumber" : 45,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 45,
        "startColumnNumber" : 6,
        "endLineNumber" : 45,
        "endColumnNumber" : 24
      },
      "nodeContext" : "null == targetType",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 45,
        "startColumnNumber" : 2,
        "endLineNumber" : 48,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (null == targetType) {\n  targetType=(Class<T>)defaultValue.getClass();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 983,
        "startLineNumber" : 40,
        "startColumnNumber" : 48,
        "endLineNumber" : 64,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Class<T> targetType=getTargetType();\n  if (null == targetType && null == defaultValue) {\n    throw new NullPointerException(StrUtil.format(\"[type] and [defaultValue] are both null for Converter [{}], we can not know what type to convert !\",this.getClass().getName()));\n  }\n  if (null == targetType) {\n    targetType=(Class<T>)defaultValue.getClass();\n  }\n  if (null == value) {\n    return defaultValue;\n  }\n  if (null == defaultValue || targetType.isInstance(defaultValue)) {\n    if (targetType.isInstance(value) && false == Map.class.isAssignableFrom(targetType)) {\n      return targetType.cast(value);\n    }\n    T result=convertInternal(value);\n    return ((null == result) ? defaultValue : result);\n  }\n else {\n    throw new IllegalArgumentException(StrUtil.format(\"Default value [{}]({}) is not the instance of [{}]\",defaultValue,defaultValue.getClass(),targetType));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1075,
        "startLineNumber" : 38,
        "startColumnNumber" : 1,
        "endLineNumber" : 64,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") public T convert(Object value,T defaultValue){\n  Class<T> targetType=getTargetType();\n  if (null == targetType && null == defaultValue) {\n    throw new NullPointerException(StrUtil.format(\"[type] and [defaultValue] are both null for Converter [{}], we can not know what type to convert !\",this.getClass().getName()));\n  }\n  if (null == targetType) {\n    targetType=(Class<T>)defaultValue.getClass();\n  }\n  if (null == value) {\n    return defaultValue;\n  }\n  if (null == defaultValue || targetType.isInstance(defaultValue)) {\n    if (targetType.isInstance(value) && false == Map.class.isAssignableFrom(targetType)) {\n      return targetType.cast(value);\n    }\n    T result=convertInternal(value);\n    return ((null == result) ? defaultValue : result);\n  }\n else {\n    throw new IllegalArgumentException(StrUtil.format(\"Default value [{}]({}) is not the instance of [{}]\",defaultValue,defaultValue.getClass(),targetType));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 45,
        "startColumnNumber" : 6,
        "endLineNumber" : 45,
        "endColumnNumber" : 24
      },
      "nodeContext" : "null == targetType",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 49,
      "startColumnNumber" : 6,
      "endLineNumber" : 49,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 49,
        "startColumnNumber" : 6,
        "endLineNumber" : 49,
        "endColumnNumber" : 19
      },
      "nodeContext" : "null == value",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 49,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (null == value) {\n  return defaultValue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 983,
        "startLineNumber" : 40,
        "startColumnNumber" : 48,
        "endLineNumber" : 64,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Class<T> targetType=getTargetType();\n  if (null == targetType && null == defaultValue) {\n    throw new NullPointerException(StrUtil.format(\"[type] and [defaultValue] are both null for Converter [{}], we can not know what type to convert !\",this.getClass().getName()));\n  }\n  if (null == targetType) {\n    targetType=(Class<T>)defaultValue.getClass();\n  }\n  if (null == value) {\n    return defaultValue;\n  }\n  if (null == defaultValue || targetType.isInstance(defaultValue)) {\n    if (targetType.isInstance(value) && false == Map.class.isAssignableFrom(targetType)) {\n      return targetType.cast(value);\n    }\n    T result=convertInternal(value);\n    return ((null == result) ? defaultValue : result);\n  }\n else {\n    throw new IllegalArgumentException(StrUtil.format(\"Default value [{}]({}) is not the instance of [{}]\",defaultValue,defaultValue.getClass(),targetType));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1075,
        "startLineNumber" : 38,
        "startColumnNumber" : 1,
        "endLineNumber" : 64,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") public T convert(Object value,T defaultValue){\n  Class<T> targetType=getTargetType();\n  if (null == targetType && null == defaultValue) {\n    throw new NullPointerException(StrUtil.format(\"[type] and [defaultValue] are both null for Converter [{}], we can not know what type to convert !\",this.getClass().getName()));\n  }\n  if (null == targetType) {\n    targetType=(Class<T>)defaultValue.getClass();\n  }\n  if (null == value) {\n    return defaultValue;\n  }\n  if (null == defaultValue || targetType.isInstance(defaultValue)) {\n    if (targetType.isInstance(value) && false == Map.class.isAssignableFrom(targetType)) {\n      return targetType.cast(value);\n    }\n    T result=convertInternal(value);\n    return ((null == result) ? defaultValue : result);\n  }\n else {\n    throw new IllegalArgumentException(StrUtil.format(\"Default value [{}]({}) is not the instance of [{}]\",defaultValue,defaultValue.getClass(),targetType));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 49,
        "startColumnNumber" : 6,
        "endLineNumber" : 49,
        "endColumnNumber" : 19
      },
      "nodeContext" : "null == value",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 53,
      "startColumnNumber" : 6,
      "endLineNumber" : 53,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 53,
        "startColumnNumber" : 6,
        "endLineNumber" : 53,
        "endColumnNumber" : 26
      },
      "nodeContext" : "null == defaultValue",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 53,
        "startColumnNumber" : 6,
        "endLineNumber" : 53,
        "endColumnNumber" : 65
      },
      "nodeContext" : "null == defaultValue || targetType.isInstance(defaultValue)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (null == defaultValue || targetType.isInstance(defaultValue)) {\n  if (targetType.isInstance(value) && false == Map.class.isAssignableFrom(targetType)) {\n    return targetType.cast(value);\n  }\n  T result=convertInternal(value);\n  return ((null == result) ? defaultValue : result);\n}\n else {\n  throw new IllegalArgumentException(StrUtil.format(\"Default value [{}]({}) is not the instance of [{}]\",defaultValue,defaultValue.getClass(),targetType));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 983,
        "startLineNumber" : 40,
        "startColumnNumber" : 48,
        "endLineNumber" : 64,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Class<T> targetType=getTargetType();\n  if (null == targetType && null == defaultValue) {\n    throw new NullPointerException(StrUtil.format(\"[type] and [defaultValue] are both null for Converter [{}], we can not know what type to convert !\",this.getClass().getName()));\n  }\n  if (null == targetType) {\n    targetType=(Class<T>)defaultValue.getClass();\n  }\n  if (null == value) {\n    return defaultValue;\n  }\n  if (null == defaultValue || targetType.isInstance(defaultValue)) {\n    if (targetType.isInstance(value) && false == Map.class.isAssignableFrom(targetType)) {\n      return targetType.cast(value);\n    }\n    T result=convertInternal(value);\n    return ((null == result) ? defaultValue : result);\n  }\n else {\n    throw new IllegalArgumentException(StrUtil.format(\"Default value [{}]({}) is not the instance of [{}]\",defaultValue,defaultValue.getClass(),targetType));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1075,
        "startLineNumber" : 38,
        "startColumnNumber" : 1,
        "endLineNumber" : 64,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") public T convert(Object value,T defaultValue){\n  Class<T> targetType=getTargetType();\n  if (null == targetType && null == defaultValue) {\n    throw new NullPointerException(StrUtil.format(\"[type] and [defaultValue] are both null for Converter [{}], we can not know what type to convert !\",this.getClass().getName()));\n  }\n  if (null == targetType) {\n    targetType=(Class<T>)defaultValue.getClass();\n  }\n  if (null == value) {\n    return defaultValue;\n  }\n  if (null == defaultValue || targetType.isInstance(defaultValue)) {\n    if (targetType.isInstance(value) && false == Map.class.isAssignableFrom(targetType)) {\n      return targetType.cast(value);\n    }\n    T result=convertInternal(value);\n    return ((null == result) ? defaultValue : result);\n  }\n else {\n    throw new IllegalArgumentException(StrUtil.format(\"Default value [{}]({}) is not the instance of [{}]\",defaultValue,defaultValue.getClass(),targetType));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 53,
        "startColumnNumber" : 6,
        "endLineNumber" : 53,
        "endColumnNumber" : 65
      },
      "nodeContext" : "null == defaultValue || targetType.isInstance(defaultValue)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 59,
      "startColumnNumber" : 12,
      "endLineNumber" : 59,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 59,
        "endColumnNumber" : 26
      },
      "nodeContext" : "null == result",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 59,
        "startColumnNumber" : 11,
        "endLineNumber" : 59,
        "endColumnNumber" : 27
      },
      "nodeContext" : "(null == result)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 59,
        "startColumnNumber" : 11,
        "endLineNumber" : 59,
        "endColumnNumber" : 51
      },
      "nodeContext" : "(null == result) ? defaultValue : result",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 59,
        "startColumnNumber" : 10,
        "endLineNumber" : 59,
        "endColumnNumber" : 52
      },
      "nodeContext" : "((null == result) ? defaultValue : result)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 59,
        "startColumnNumber" : 3,
        "endLineNumber" : 59,
        "endColumnNumber" : 53
      },
      "nodeContext" : "return ((null == result) ? defaultValue : result);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 53,
        "startColumnNumber" : 67,
        "endLineNumber" : 60,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (targetType.isInstance(value) && false == Map.class.isAssignableFrom(targetType)) {\n    return targetType.cast(value);\n  }\n  T result=convertInternal(value);\n  return ((null == result) ? defaultValue : result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (null == defaultValue || targetType.isInstance(defaultValue)) {\n  if (targetType.isInstance(value) && false == Map.class.isAssignableFrom(targetType)) {\n    return targetType.cast(value);\n  }\n  T result=convertInternal(value);\n  return ((null == result) ? defaultValue : result);\n}\n else {\n  throw new IllegalArgumentException(StrUtil.format(\"Default value [{}]({}) is not the instance of [{}]\",defaultValue,defaultValue.getClass(),targetType));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 983,
        "startLineNumber" : 40,
        "startColumnNumber" : 48,
        "endLineNumber" : 64,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Class<T> targetType=getTargetType();\n  if (null == targetType && null == defaultValue) {\n    throw new NullPointerException(StrUtil.format(\"[type] and [defaultValue] are both null for Converter [{}], we can not know what type to convert !\",this.getClass().getName()));\n  }\n  if (null == targetType) {\n    targetType=(Class<T>)defaultValue.getClass();\n  }\n  if (null == value) {\n    return defaultValue;\n  }\n  if (null == defaultValue || targetType.isInstance(defaultValue)) {\n    if (targetType.isInstance(value) && false == Map.class.isAssignableFrom(targetType)) {\n      return targetType.cast(value);\n    }\n    T result=convertInternal(value);\n    return ((null == result) ? defaultValue : result);\n  }\n else {\n    throw new IllegalArgumentException(StrUtil.format(\"Default value [{}]({}) is not the instance of [{}]\",defaultValue,defaultValue.getClass(),targetType));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1075,
        "startLineNumber" : 38,
        "startColumnNumber" : 1,
        "endLineNumber" : 64,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") public T convert(Object value,T defaultValue){\n  Class<T> targetType=getTargetType();\n  if (null == targetType && null == defaultValue) {\n    throw new NullPointerException(StrUtil.format(\"[type] and [defaultValue] are both null for Converter [{}], we can not know what type to convert !\",this.getClass().getName()));\n  }\n  if (null == targetType) {\n    targetType=(Class<T>)defaultValue.getClass();\n  }\n  if (null == value) {\n    return defaultValue;\n  }\n  if (null == defaultValue || targetType.isInstance(defaultValue)) {\n    if (targetType.isInstance(value) && false == Map.class.isAssignableFrom(targetType)) {\n      return targetType.cast(value);\n    }\n    T result=convertInternal(value);\n    return ((null == result) ? defaultValue : result);\n  }\n else {\n    throw new IllegalArgumentException(StrUtil.format(\"Default value [{}]({}) is not the instance of [{}]\",defaultValue,defaultValue.getClass(),targetType));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 59,
        "startColumnNumber" : 3,
        "endLineNumber" : 59,
        "endColumnNumber" : 53
      },
      "nodeContext" : "return ((null == result) ? defaultValue : result);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 42,
    "startColumnNumber" : 6,
    "endLineNumber" : 42,
    "endColumnNumber" : 10
  }, {
    "charLength" : 4,
    "startLineNumber" : 42,
    "startColumnNumber" : 28,
    "endLineNumber" : 42,
    "endColumnNumber" : 32
  }, {
    "charLength" : 4,
    "startLineNumber" : 45,
    "startColumnNumber" : 6,
    "endLineNumber" : 45,
    "endColumnNumber" : 10
  }, {
    "charLength" : 4,
    "startLineNumber" : 49,
    "startColumnNumber" : 6,
    "endLineNumber" : 49,
    "endColumnNumber" : 10
  }, {
    "charLength" : 4,
    "startLineNumber" : 53,
    "startColumnNumber" : 6,
    "endLineNumber" : 53,
    "endColumnNumber" : 10
  }, {
    "charLength" : 4,
    "startLineNumber" : 59,
    "startColumnNumber" : 12,
    "endLineNumber" : 59,
    "endColumnNumber" : 16
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 6
  } ]
}