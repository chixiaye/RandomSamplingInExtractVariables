{
  "id" : 412,
  "expression" : "host",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/server/src/org/openqa/selenium/grid/sessionmap/config/SessionMapOptions.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "host",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 54,
      "startColumnNumber" : 8,
      "endLineNumber" : 54,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 24
      },
      "nodeContext" : "host.isPresent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (host.isPresent()) {\n  return host.get();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1110,
        "startLineNumber" : 42,
        "startColumnNumber" : 32,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String scheme=config.get(SESSIONS_SECTION,\"scheme\").orElse(DEFAULT_SESSION_MAP_SCHEME);\n  Optional<URI> host=config.get(SESSIONS_SECTION,\"host\").map(str -> {\n    try {\n      return new URI(str);\n    }\n catch (    URISyntaxException e) {\n      throw new ConfigException(\"Session map server URI is not a valid URI: \" + str);\n    }\n  }\n);\n  if (host.isPresent()) {\n    return host.get();\n  }\n  Optional<Integer> port=config.getInt(SESSIONS_SECTION,\"port\");\n  Optional<String> hostname=config.get(SESSIONS_SECTION,\"hostname\");\n  if (!(port.isPresent() && hostname.isPresent())) {\n    throw new ConfigException(\"Unable to determine host and port for the session map server\");\n  }\n  try {\n    return new URI(scheme,null,hostname.get(),port.get(),\"\",null,null);\n  }\n catch (  URISyntaxException e) {\n    throw new ConfigException(\"Session map server uri configured through host (%s) and port (%d) is not a valid URI\",hostname.get(),port.get());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1140,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public URI getSessionMapUri(){\n  String scheme=config.get(SESSIONS_SECTION,\"scheme\").orElse(DEFAULT_SESSION_MAP_SCHEME);\n  Optional<URI> host=config.get(SESSIONS_SECTION,\"host\").map(str -> {\n    try {\n      return new URI(str);\n    }\n catch (    URISyntaxException e) {\n      throw new ConfigException(\"Session map server URI is not a valid URI: \" + str);\n    }\n  }\n);\n  if (host.isPresent()) {\n    return host.get();\n  }\n  Optional<Integer> port=config.getInt(SESSIONS_SECTION,\"port\");\n  Optional<String> hostname=config.get(SESSIONS_SECTION,\"hostname\");\n  if (!(port.isPresent() && hostname.isPresent())) {\n    throw new ConfigException(\"Unable to determine host and port for the session map server\");\n  }\n  try {\n    return new URI(scheme,null,hostname.get(),port.get(),\"\",null,null);\n  }\n catch (  URISyntaxException e) {\n    throw new ConfigException(\"Session map server uri configured through host (%s) and port (%d) is not a valid URI\",hostname.get(),port.get());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 143,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 24
      },
      "nodeContext" : "host.isPresent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Optional<java.net.URI>"
  }, {
    "nodeContext" : "host",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 55,
      "startColumnNumber" : 13,
      "endLineNumber" : 55,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 55,
        "startColumnNumber" : 13,
        "endLineNumber" : 55,
        "endColumnNumber" : 23
      },
      "nodeContext" : "host.get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 55,
        "endColumnNumber" : 24
      },
      "nodeContext" : "return host.get();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 54,
        "startColumnNumber" : 26,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return host.get();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (host.isPresent()) {\n  return host.get();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1110,
        "startLineNumber" : 42,
        "startColumnNumber" : 32,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String scheme=config.get(SESSIONS_SECTION,\"scheme\").orElse(DEFAULT_SESSION_MAP_SCHEME);\n  Optional<URI> host=config.get(SESSIONS_SECTION,\"host\").map(str -> {\n    try {\n      return new URI(str);\n    }\n catch (    URISyntaxException e) {\n      throw new ConfigException(\"Session map server URI is not a valid URI: \" + str);\n    }\n  }\n);\n  if (host.isPresent()) {\n    return host.get();\n  }\n  Optional<Integer> port=config.getInt(SESSIONS_SECTION,\"port\");\n  Optional<String> hostname=config.get(SESSIONS_SECTION,\"hostname\");\n  if (!(port.isPresent() && hostname.isPresent())) {\n    throw new ConfigException(\"Unable to determine host and port for the session map server\");\n  }\n  try {\n    return new URI(scheme,null,hostname.get(),port.get(),\"\",null,null);\n  }\n catch (  URISyntaxException e) {\n    throw new ConfigException(\"Session map server uri configured through host (%s) and port (%d) is not a valid URI\",hostname.get(),port.get());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1140,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public URI getSessionMapUri(){\n  String scheme=config.get(SESSIONS_SECTION,\"scheme\").orElse(DEFAULT_SESSION_MAP_SCHEME);\n  Optional<URI> host=config.get(SESSIONS_SECTION,\"host\").map(str -> {\n    try {\n      return new URI(str);\n    }\n catch (    URISyntaxException e) {\n      throw new ConfigException(\"Session map server URI is not a valid URI: \" + str);\n    }\n  }\n);\n  if (host.isPresent()) {\n    return host.get();\n  }\n  Optional<Integer> port=config.getInt(SESSIONS_SECTION,\"port\");\n  Optional<String> hostname=config.get(SESSIONS_SECTION,\"hostname\");\n  if (!(port.isPresent() && hostname.isPresent())) {\n    throw new ConfigException(\"Unable to determine host and port for the session map server\");\n  }\n  try {\n    return new URI(scheme,null,hostname.get(),port.get(),\"\",null,null);\n  }\n catch (  URISyntaxException e) {\n    throw new ConfigException(\"Session map server uri configured through host (%s) and port (%d) is not a valid URI\",hostname.get(),port.get());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 143,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 55,
        "endColumnNumber" : 24
      },
      "nodeContext" : "return host.get();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Optional<java.net.URI>"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 54,
    "startColumnNumber" : 8,
    "endLineNumber" : 54,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 55,
    "startColumnNumber" : 13,
    "endLineNumber" : 55,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}