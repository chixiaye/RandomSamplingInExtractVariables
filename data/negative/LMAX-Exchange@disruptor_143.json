{
  "id" : 143,
  "expression" : "0 == numToRemove",
  "projectName" : "LMAX-Exchange@disruptor",
  "commitID" : "6d8500d39ac15cc2fdbc3dbf2e3a97fbe425b8fa",
  "filePath" : "/src/main/java/com/lmax/disruptor/SequenceGroups.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0 == numToRemove",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 72,
      "startColumnNumber" : 16,
      "endLineNumber" : 72,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (0 == numToRemove) {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 662,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  oldSequences=sequenceUpdater.get(holder);\n  numToRemove=countMatching(oldSequences,sequence);\n  if (0 == numToRemove) {\n    break;\n  }\n  final int oldSize=oldSequences.length;\n  newSequences=new Sequence[oldSize - numToRemove];\n  for (int i=0, pos=0; i < oldSize; i++) {\n    final Sequence testSequence=oldSequences[i];\n    if (sequence != testSequence) {\n      newSequences[pos++]=testSequence;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 757,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 83
      },
      "nodeContext" : "do {\n  oldSequences=sequenceUpdater.get(holder);\n  numToRemove=countMatching(oldSequences,sequence);\n  if (0 == numToRemove) {\n    break;\n  }\n  final int oldSize=oldSequences.length;\n  newSequences=new Sequence[oldSize - numToRemove];\n  for (int i=0, pos=0; i < oldSize; i++) {\n    final Sequence testSequence=oldSequences[i];\n    if (sequence != testSequence) {\n      newSequences[pos++]=testSequence;\n    }\n  }\n}\n while (!sequenceUpdater.compareAndSet(holder,oldSequences,newSequences));\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 84,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 911,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int numToRemove;\n  Sequence[] oldSequences;\n  Sequence[] newSequences;\n  do {\n    oldSequences=sequenceUpdater.get(holder);\n    numToRemove=countMatching(oldSequences,sequence);\n    if (0 == numToRemove) {\n      break;\n    }\n    final int oldSize=oldSequences.length;\n    newSequences=new Sequence[oldSize - numToRemove];\n    for (int i=0, pos=0; i < oldSize; i++) {\n      final Sequence testSequence=oldSequences[i];\n      if (sequence != testSequence) {\n        newSequences[pos++]=testSequence;\n      }\n    }\n  }\n while (!sequenceUpdater.compareAndSet(holder,oldSequences,newSequences));\n  return numToRemove != 0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1133,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static <T>boolean removeSequence(final T holder,final AtomicReferenceFieldUpdater<T,Sequence[]> sequenceUpdater,final Sequence sequence){\n  int numToRemove;\n  Sequence[] oldSequences;\n  Sequence[] newSequences;\n  do {\n    oldSequences=sequenceUpdater.get(holder);\n    numToRemove=countMatching(oldSequences,sequence);\n    if (0 == numToRemove) {\n      break;\n    }\n    final int oldSize=oldSequences.length;\n    newSequences=new Sequence[oldSize - numToRemove];\n    for (int i=0, pos=0; i < oldSize; i++) {\n      final Sequence testSequence=oldSequences[i];\n      if (sequence != testSequence) {\n        newSequences[pos++]=testSequence;\n      }\n    }\n  }\n while (!sequenceUpdater.compareAndSet(holder,oldSequences,newSequences));\n  return numToRemove != 0;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (0 == numToRemove) {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 72,
    "startColumnNumber" : 16,
    "endLineNumber" : 72,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}