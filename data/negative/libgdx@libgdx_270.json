{
  "id" : 270,
  "expression" : "viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricStaggeredTiledMapRenderer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 65,
      "startLineNumber" : 71,
      "startColumnNumber" : 10,
      "endLineNumber" : 71,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 10,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 71,
        "startColumnNumber" : 9,
        "endLineNumber" : 71,
        "endColumnNumber" : 76
      },
      "nodeContext" : "(viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 71,
        "startColumnNumber" : 9,
        "endLineNumber" : 71,
        "endColumnNumber" : 96
      },
      "nodeContext" : "(viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 97
      },
      "nodeContext" : "((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 71,
        "startColumnNumber" : 3,
        "endLineNumber" : 71,
        "endColumnNumber" : 97
      },
      "nodeContext" : "(int)((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 70,
        "startColumnNumber" : 19,
        "endLineNumber" : 71,
        "endColumnNumber" : 98
      },
      "nodeContext" : "Math.min(layerHeight,(int)((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 98
      },
      "nodeContext" : "maxY=Math.min(layerHeight,(int)((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 22,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 71,
        "endColumnNumber" : 99
      },
      "nodeContext" : "final int maxY=Math.min(layerHeight,(int)((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 25,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4440,
        "startLineNumber" : 48,
        "startColumnNumber" : 55,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final Color batchColor=batch.getColor();\n  final float color=Color.toFloatBits(batchColor.r,batchColor.g,batchColor.b,batchColor.a * layer.getOpacity());\n  final int layerWidth=layer.getWidth();\n  final int layerHeight=layer.getHeight();\n  final float layerOffsetX=layer.getRenderOffsetX() * unitScale;\n  final float layerOffsetY=-layer.getRenderOffsetY() * unitScale;\n  final float layerTileWidth=layer.getTileWidth() * unitScale;\n  final float layerTileHeight=layer.getTileHeight() * unitScale;\n  final float layerTileWidth50=layerTileWidth * 0.50f;\n  final float layerTileHeight50=layerTileHeight * 0.50f;\n  final int minX=Math.max(0,(int)(((viewBounds.x - layerTileWidth50 - layerOffsetX) / layerTileWidth)));\n  final int maxX=Math.min(layerWidth,(int)((viewBounds.x + viewBounds.width + layerTileWidth+ layerTileWidth50 - layerOffsetX) / layerTileWidth));\n  final int minY=Math.max(0,(int)(((viewBounds.y - layerTileHeight - layerOffsetY) / layerTileHeight)));\n  final int maxY=Math.min(layerHeight,(int)((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50));\n  for (int y=maxY - 1; y >= minY; y--) {\n    float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n    for (int x=maxX - 1; x >= minX; x--) {\n      final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n      if (cell == null)       continue;\n      final TiledMapTile tile=cell.getTile();\n      if (tile != null) {\n        final boolean flipX=cell.getFlipHorizontally();\n        final boolean flipY=cell.getFlipVertically();\n        final int rotations=cell.getRotation();\n        TextureRegion region=tile.getTextureRegion();\n        float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n        float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n        float x2=x1 + region.getRegionWidth() * unitScale;\n        float y2=y1 + region.getRegionHeight() * unitScale;\n        float u1=region.getU();\n        float v1=region.getV2();\n        float u2=region.getU2();\n        float v2=region.getV();\n        vertices[X1]=x1;\n        vertices[Y1]=y1;\n        vertices[C1]=color;\n        vertices[U1]=u1;\n        vertices[V1]=v1;\n        vertices[X2]=x1;\n        vertices[Y2]=y2;\n        vertices[C2]=color;\n        vertices[U2]=u1;\n        vertices[V2]=v2;\n        vertices[X3]=x2;\n        vertices[Y3]=y2;\n        vertices[C3]=color;\n        vertices[U3]=u2;\n        vertices[V3]=v2;\n        vertices[X4]=x2;\n        vertices[Y4]=y1;\n        vertices[C4]=color;\n        vertices[U4]=u2;\n        vertices[V4]=v1;\n        if (flipX) {\n          float temp=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=temp;\n          temp=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=temp;\n        }\n        if (flipY) {\n          float temp=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=temp;\n          temp=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=temp;\n        }\n        if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n              float tempV=vertices[V1];\n              vertices[V1]=vertices[V2];\n              vertices[V2]=vertices[V3];\n              vertices[V3]=vertices[V4];\n              vertices[V4]=tempV;\n              float tempU=vertices[U1];\n              vertices[U1]=vertices[U2];\n              vertices[U2]=vertices[U3];\n              vertices[U3]=vertices[U4];\n              vertices[U4]=tempU;\n              break;\n            }\ncase Cell.ROTATE_180:{\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U3];\n            vertices[U3]=tempU;\n            tempU=vertices[U2];\n            vertices[U2]=vertices[U4];\n            vertices[U4]=tempU;\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V3];\n            vertices[V3]=tempV;\n            tempV=vertices[V2];\n            vertices[V2]=vertices[V4];\n            vertices[V4]=tempV;\n            break;\n          }\ncase Cell.ROTATE_270:{\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V4];\n          vertices[V4]=vertices[V3];\n          vertices[V3]=vertices[V2];\n          vertices[V2]=tempV;\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U4];\n          vertices[U4]=vertices[U3];\n          vertices[U3]=vertices[U2];\n          vertices[U2]=tempU;\n          break;\n        }\n    }\n  }\n  batch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 862,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4505,
        "startLineNumber" : 47,
        "startColumnNumber" : 1,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void renderTileLayer(TiledMapTileLayer layer){\n  final Color batchColor=batch.getColor();\n  final float color=Color.toFloatBits(batchColor.r,batchColor.g,batchColor.b,batchColor.a * layer.getOpacity());\n  final int layerWidth=layer.getWidth();\n  final int layerHeight=layer.getHeight();\n  final float layerOffsetX=layer.getRenderOffsetX() * unitScale;\n  final float layerOffsetY=-layer.getRenderOffsetY() * unitScale;\n  final float layerTileWidth=layer.getTileWidth() * unitScale;\n  final float layerTileHeight=layer.getTileHeight() * unitScale;\n  final float layerTileWidth50=layerTileWidth * 0.50f;\n  final float layerTileHeight50=layerTileHeight * 0.50f;\n  final int minX=Math.max(0,(int)(((viewBounds.x - layerTileWidth50 - layerOffsetX) / layerTileWidth)));\n  final int maxX=Math.min(layerWidth,(int)((viewBounds.x + viewBounds.width + layerTileWidth+ layerTileWidth50 - layerOffsetX) / layerTileWidth));\n  final int minY=Math.max(0,(int)(((viewBounds.y - layerTileHeight - layerOffsetY) / layerTileHeight)));\n  final int maxY=Math.min(layerHeight,(int)((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50));\n  for (int y=maxY - 1; y >= minY; y--) {\n    float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n    for (int x=maxX - 1; x >= minX; x--) {\n      final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n      if (cell == null)       continue;\n      final TiledMapTile tile=cell.getTile();\n      if (tile != null) {\n        final boolean flipX=cell.getFlipHorizontally();\n        final boolean flipY=cell.getFlipVertically();\n        final int rotations=cell.getRotation();\n        TextureRegion region=tile.getTextureRegion();\n        float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n        float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n        float x2=x1 + region.getRegionWidth() * unitScale;\n        float y2=y1 + region.getRegionHeight() * unitScale;\n        float u1=region.getU();\n        float v1=region.getV2();\n        float u2=region.getU2();\n        float v2=region.getV();\n        vertices[X1]=x1;\n        vertices[Y1]=y1;\n        vertices[C1]=color;\n        vertices[U1]=u1;\n        vertices[V1]=v1;\n        vertices[X2]=x1;\n        vertices[Y2]=y2;\n        vertices[C2]=color;\n        vertices[U2]=u1;\n        vertices[V2]=v2;\n        vertices[X3]=x2;\n        vertices[Y3]=y2;\n        vertices[C3]=color;\n        vertices[U3]=u2;\n        vertices[V3]=v2;\n        vertices[X4]=x2;\n        vertices[Y4]=y1;\n        vertices[C4]=color;\n        vertices[U4]=u2;\n        vertices[V4]=v1;\n        if (flipX) {\n          float temp=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=temp;\n          temp=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=temp;\n        }\n        if (flipY) {\n          float temp=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=temp;\n          temp=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=temp;\n        }\n        if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n              float tempV=vertices[V1];\n              vertices[V1]=vertices[V2];\n              vertices[V2]=vertices[V3];\n              vertices[V3]=vertices[V4];\n              vertices[V4]=tempV;\n              float tempU=vertices[U1];\n              vertices[U1]=vertices[U2];\n              vertices[U2]=vertices[U3];\n              vertices[U3]=vertices[U4];\n              vertices[U4]=tempU;\n              break;\n            }\ncase Cell.ROTATE_180:{\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U3];\n            vertices[U3]=tempU;\n            tempU=vertices[U2];\n            vertices[U2]=vertices[U4];\n            vertices[U4]=tempU;\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V3];\n            vertices[V3]=tempV;\n            tempV=vertices[V2];\n            vertices[V2]=vertices[V4];\n            vertices[V4]=tempV;\n            break;\n          }\ncase Cell.ROTATE_270:{\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V4];\n          vertices[V4]=vertices[V3];\n          vertices[V3]=vertices[V2];\n          vertices[V2]=tempV;\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U4];\n          vertices[U4]=vertices[U3];\n          vertices[U3]=vertices[U2];\n          vertices[U2]=tempU;\n          break;\n        }\n    }\n  }\n  batch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 872,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 71,
        "startColumnNumber" : 3,
        "endLineNumber" : 71,
        "endColumnNumber" : 97
      },
      "nodeContext" : "(int)((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 16,
      "astHeight" : 8
    },
    "tokenLength" : 9,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 65,
    "startLineNumber" : 71,
    "startColumnNumber" : 10,
    "endLineNumber" : 71,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}