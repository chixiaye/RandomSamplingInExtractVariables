{
  "id" : 30,
  "expression" : "\"h2\"",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/indexing-service/src/test/java/org/apache/druid/indexing/overlord/autoscaling/PendingTaskBasedProvisioningStrategyTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"h2\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 289,
      "startColumnNumber" : 47,
      "endLineNumber" : 289,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 289,
        "endColumnNumber" : 75
      },
      "nodeContext" : "new TestZkWorker(testTask,\"http\",\"h2\",\"n1\",INVALID_VERSION)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 289,
        "endColumnNumber" : 89
      },
      "nodeContext" : "new TestZkWorker(testTask,\"http\",\"h2\",\"n1\",INVALID_VERSION).toImmutable()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 343,
        "startLineNumber" : 286,
        "startColumnNumber" : 8,
        "endLineNumber" : 290,
        "endColumnNumber" : 9
      },
      "nodeContext" : "Arrays.asList(new TestZkWorker(testTask,\"http\",\"hi\",\"lo\",MIN_VERSION,1).toImmutable(),new TestZkWorker(testTask,\"http\",\"h1\",\"n1\",INVALID_VERSION).toImmutable(),new TestZkWorker(testTask,\"http\",\"h2\",\"n1\",INVALID_VERSION).toImmutable())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 405,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 291,
        "endColumnNumber" : 5
      },
      "nodeContext" : "EasyMock.expect(runner.getWorkers()).andReturn(Arrays.asList(new TestZkWorker(testTask,\"http\",\"hi\",\"lo\",MIN_VERSION,1).toImmutable(),new TestZkWorker(testTask,\"http\",\"h1\",\"n1\",INVALID_VERSION).toImmutable(),new TestZkWorker(testTask,\"http\",\"h2\",\"n1\",INVALID_VERSION).toImmutable()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 42,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 414,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 291,
        "endColumnNumber" : 14
      },
      "nodeContext" : "EasyMock.expect(runner.getWorkers()).andReturn(Arrays.asList(new TestZkWorker(testTask,\"http\",\"hi\",\"lo\",MIN_VERSION,1).toImmutable(),new TestZkWorker(testTask,\"http\",\"h1\",\"n1\",INVALID_VERSION).toImmutable(),new TestZkWorker(testTask,\"http\",\"h2\",\"n1\",INVALID_VERSION).toImmutable())).times(2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 415,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 291,
        "endColumnNumber" : 15
      },
      "nodeContext" : "EasyMock.expect(runner.getWorkers()).andReturn(Arrays.asList(new TestZkWorker(testTask,\"http\",\"hi\",\"lo\",MIN_VERSION,1).toImmutable(),new TestZkWorker(testTask,\"http\",\"h1\",\"n1\",INVALID_VERSION).toImmutable(),new TestZkWorker(testTask,\"http\",\"h2\",\"n1\",INVALID_VERSION).toImmutable())).times(2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2486,
        "startLineNumber" : 262,
        "startColumnNumber" : 2,
        "endLineNumber" : 321,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ServiceEmitter emitter=EasyMock.createMock(ServiceEmitter.class);\n  EmittingLogger.registerEmitter(emitter);\n  emitter.emit(EasyMock.<ServiceEventBuilder>anyObject());\n  EasyMock.expectLastCall();\n  EasyMock.replay(emitter);\n  EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0).times(1);\n  EasyMock.expect(autoScaler.getMaxNumWorkers()).andReturn(2).times(1);\n  EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.anyObject())).andReturn(new ArrayList<String>()).times(2);\n  EasyMock.expect(autoScaler.terminateWithIds(EasyMock.anyObject())).andReturn(null);\n  EasyMock.expect(autoScaler.provision()).andReturn(new AutoScalingData(Collections.singletonList(\"fake\")));\n  EasyMock.replay(autoScaler);\n  RemoteTaskRunner runner=EasyMock.createMock(RemoteTaskRunner.class);\n  EasyMock.expect(runner.getPendingTaskPayloads()).andReturn(Collections.singletonList(NoopTask.create())).times(2);\n  EasyMock.expect(runner.getWorkers()).andReturn(Arrays.asList(new TestZkWorker(testTask,\"http\",\"hi\",\"lo\",MIN_VERSION,1).toImmutable(),new TestZkWorker(testTask,\"http\",\"h1\",\"n1\",INVALID_VERSION).toImmutable(),new TestZkWorker(testTask,\"http\",\"h2\",\"n1\",INVALID_VERSION).toImmutable())).times(2);\n  EasyMock.expect(runner.getConfig()).andReturn(new RemoteTaskRunnerConfig());\n  EasyMock.replay(runner);\n  Provisioner provisioner=strategy.makeProvisioner(runner);\n  boolean provisionedSomething=provisioner.doProvision();\n  Assert.assertTrue(provisionedSomething);\n  Assert.assertTrue(provisioner.getStats().toList().size() == 1);\n  DateTime createdTime=provisioner.getStats().toList().get(0).getTimestamp();\n  Assert.assertTrue(provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.PROVISION);\n  Thread.sleep(2000);\n  provisionedSomething=provisioner.doProvision();\n  Assert.assertFalse(provisionedSomething);\n  Assert.assertTrue(provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.PROVISION);\n  DateTime anotherCreatedTime=provisioner.getStats().toList().get(0).getTimestamp();\n  Assert.assertTrue(createdTime.equals(anotherCreatedTime));\n  EasyMock.verify(autoScaler);\n  EasyMock.verify(emitter);\n  EasyMock.verify(runner);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 351,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2546,
        "startLineNumber" : 260,
        "startColumnNumber" : 2,
        "endLineNumber" : 321,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testProvisionAlert() throws Exception {\n  ServiceEmitter emitter=EasyMock.createMock(ServiceEmitter.class);\n  EmittingLogger.registerEmitter(emitter);\n  emitter.emit(EasyMock.<ServiceEventBuilder>anyObject());\n  EasyMock.expectLastCall();\n  EasyMock.replay(emitter);\n  EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0).times(1);\n  EasyMock.expect(autoScaler.getMaxNumWorkers()).andReturn(2).times(1);\n  EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.anyObject())).andReturn(new ArrayList<String>()).times(2);\n  EasyMock.expect(autoScaler.terminateWithIds(EasyMock.anyObject())).andReturn(null);\n  EasyMock.expect(autoScaler.provision()).andReturn(new AutoScalingData(Collections.singletonList(\"fake\")));\n  EasyMock.replay(autoScaler);\n  RemoteTaskRunner runner=EasyMock.createMock(RemoteTaskRunner.class);\n  EasyMock.expect(runner.getPendingTaskPayloads()).andReturn(Collections.singletonList(NoopTask.create())).times(2);\n  EasyMock.expect(runner.getWorkers()).andReturn(Arrays.asList(new TestZkWorker(testTask,\"http\",\"hi\",\"lo\",MIN_VERSION,1).toImmutable(),new TestZkWorker(testTask,\"http\",\"h1\",\"n1\",INVALID_VERSION).toImmutable(),new TestZkWorker(testTask,\"http\",\"h2\",\"n1\",INVALID_VERSION).toImmutable())).times(2);\n  EasyMock.expect(runner.getConfig()).andReturn(new RemoteTaskRunnerConfig());\n  EasyMock.replay(runner);\n  Provisioner provisioner=strategy.makeProvisioner(runner);\n  boolean provisionedSomething=provisioner.doProvision();\n  Assert.assertTrue(provisionedSomething);\n  Assert.assertTrue(provisioner.getStats().toList().size() == 1);\n  DateTime createdTime=provisioner.getStats().toList().get(0).getTimestamp();\n  Assert.assertTrue(provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.PROVISION);\n  Thread.sleep(2000);\n  provisionedSomething=provisioner.doProvision();\n  Assert.assertFalse(provisionedSomething);\n  Assert.assertTrue(provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.PROVISION);\n  DateTime anotherCreatedTime=provisioner.getStats().toList().get(0).getTimestamp();\n  Assert.assertTrue(createdTime.equals(anotherCreatedTime));\n  EasyMock.verify(autoScaler);\n  EasyMock.verify(emitter);\n  EasyMock.verify(runner);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 359,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 289,
        "endColumnNumber" : 89
      },
      "nodeContext" : "new TestZkWorker(testTask,\"http\",\"h2\",\"n1\",INVALID_VERSION).toImmutable()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 289,
    "startColumnNumber" : 47,
    "endLineNumber" : 289,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}