{
  "id" : 118,
  "expression" : "APPLICATION_ID",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStoreTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "APPLICATION_ID",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 118,
      "startColumnNumber" : 54,
      "endLineNumber" : 118,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 69
      },
      "nodeContext" : "expect(context.applicationId()).andStubReturn(APPLICATION_ID)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 70
      },
      "nodeContext" : "expect(context.applicationId()).andStubReturn(APPLICATION_ID);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 108,
        "startColumnNumber" : 25,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Time mockTime=new MockTime();\n  metered=new MeteredKeyValueStore<>(inner,STORE_TYPE,mockTime,Serdes.String(),Serdes.String());\n  metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n  expect(context.applicationId()).andStubReturn(APPLICATION_ID);\n  expect(context.metrics()).andStubReturn(new StreamsMetricsImpl(metrics,\"test\",StreamsConfig.METRICS_LATEST,mockTime));\n  expect(context.taskId()).andStubReturn(taskId);\n  expect(context.changelogFor(STORE_NAME)).andStubReturn(CHANGELOG_TOPIC);\n  expect(inner.name()).andStubReturn(STORE_NAME);\n  tags=mkMap(mkEntry(THREAD_ID_TAG_KEY,threadId),mkEntry(\"task-id\",taskId.toString()),mkEntry(STORE_TYPE + \"-state-id\",STORE_NAME));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 940,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Before public void before(){\n  final Time mockTime=new MockTime();\n  metered=new MeteredKeyValueStore<>(inner,STORE_TYPE,mockTime,Serdes.String(),Serdes.String());\n  metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n  expect(context.applicationId()).andStubReturn(APPLICATION_ID);\n  expect(context.metrics()).andStubReturn(new StreamsMetricsImpl(metrics,\"test\",StreamsConfig.METRICS_LATEST,mockTime));\n  expect(context.taskId()).andStubReturn(taskId);\n  expect(context.changelogFor(STORE_NAME)).andStubReturn(CHANGELOG_TOPIC);\n  expect(inner.name()).andStubReturn(STORE_NAME);\n  tags=mkMap(mkEntry(THREAD_ID_TAG_KEY,threadId),mkEntry(\"task-id\",taskId.toString()),mkEntry(STORE_TYPE + \"-state-id\",STORE_NAME));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 118,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 70
      },
      "nodeContext" : "expect(context.applicationId()).andStubReturn(APPLICATION_ID);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 118,
    "startColumnNumber" : 54,
    "endLineNumber" : 118,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}