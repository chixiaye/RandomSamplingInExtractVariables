{
  "id" : 269,
  "expression" : "is",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/test/GenerateLoad.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "is",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 114,
      "startColumnNumber" : 33,
      "endLineNumber" : 114,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 114,
        "startColumnNumber" : 33,
        "endLineNumber" : 114,
        "endColumnNumber" : 46
      },
      "nodeContext" : "is.readLine()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 114,
        "startColumnNumber" : 24,
        "endLineNumber" : 114,
        "endColumnNumber" : 46
      },
      "nodeContext" : "result=is.readLine()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 114,
        "startColumnNumber" : 23,
        "endLineNumber" : 114,
        "endColumnNumber" : 47
      },
      "nodeContext" : "(result=is.readLine())",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 114,
        "startColumnNumber" : 23,
        "endLineNumber" : 114,
        "endColumnNumber" : 55
      },
      "nodeContext" : "(result=is.readLine()) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 114,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 17
      },
      "nodeContext" : "while ((result=is.readLine()) != null) {\n  String timePercentCount[]=result.split(\" \");\n  if (timePercentCount.length != 5) {\n    System.err.println(\"Got \" + result + \" from \"+ s+ \" exitng.\");\n    throw new IOException(result);\n  }\n  long time=Long.parseLong(timePercentCount[0]);\n  int count=Integer.parseInt(timePercentCount[2]);\n  int errs=Integer.parseInt(timePercentCount[3]);\n  if (errs > 0) {\n    System.out.println(s + \" Got an error! \" + errs);\n  }\n  add(time,count,s);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 95,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1024,
        "startLineNumber" : 110,
        "startColumnNumber" : 16,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  System.out.println(\"Connected to \" + s);\n  BufferedReader is=new BufferedReader(new InputStreamReader(s.getInputStream()));\n  String result;\n  while ((result=is.readLine()) != null) {\n    String timePercentCount[]=result.split(\" \");\n    if (timePercentCount.length != 5) {\n      System.err.println(\"Got \" + result + \" from \"+ s+ \" exitng.\");\n      throw new IOException(result);\n    }\n    long time=Long.parseLong(timePercentCount[0]);\n    int count=Integer.parseInt(timePercentCount[2]);\n    int errs=Integer.parseInt(timePercentCount[3]);\n    if (errs > 0) {\n      System.out.println(s + \" Got an error! \" + errs);\n    }\n    add(time,count,s);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1150,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 133,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  System.out.println(\"Connected to \" + s);\n  BufferedReader is=new BufferedReader(new InputStreamReader(s.getInputStream()));\n  String result;\n  while ((result=is.readLine()) != null) {\n    String timePercentCount[]=result.split(\" \");\n    if (timePercentCount.length != 5) {\n      System.err.println(\"Got \" + result + \" from \"+ s+ \" exitng.\");\n      throw new IOException(result);\n    }\n    long time=Long.parseLong(timePercentCount[0]);\n    int count=Integer.parseInt(timePercentCount[2]);\n    int errs=Integer.parseInt(timePercentCount[3]);\n    if (errs > 0) {\n      System.out.println(s + \" Got an error! \" + errs);\n    }\n    add(time,count,s);\n  }\n}\n catch (Exception e) {\n  e.printStackTrace();\n}\n finally {\n  close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 139,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1174,
        "startLineNumber" : 109,
        "startColumnNumber" : 26,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    System.out.println(\"Connected to \" + s);\n    BufferedReader is=new BufferedReader(new InputStreamReader(s.getInputStream()));\n    String result;\n    while ((result=is.readLine()) != null) {\n      String timePercentCount[]=result.split(\" \");\n      if (timePercentCount.length != 5) {\n        System.err.println(\"Got \" + result + \" from \"+ s+ \" exitng.\");\n        throw new IOException(result);\n      }\n      long time=Long.parseLong(timePercentCount[0]);\n      int count=Integer.parseInt(timePercentCount[2]);\n      int errs=Integer.parseInt(timePercentCount[3]);\n      if (errs > 0) {\n        System.out.println(s + \" Got an error! \" + errs);\n      }\n      add(time,count,s);\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n finally {\n    close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1192,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "public void run(){\n  try {\n    System.out.println(\"Connected to \" + s);\n    BufferedReader is=new BufferedReader(new InputStreamReader(s.getInputStream()));\n    String result;\n    while ((result=is.readLine()) != null) {\n      String timePercentCount[]=result.split(\" \");\n      if (timePercentCount.length != 5) {\n        System.err.println(\"Got \" + result + \" from \"+ s+ \" exitng.\");\n        throw new IOException(result);\n      }\n      long time=Long.parseLong(timePercentCount[0]);\n      int count=Integer.parseInt(timePercentCount[2]);\n      int errs=Integer.parseInt(timePercentCount[3]);\n      if (errs > 0) {\n        System.out.println(s + \" Got an error! \" + errs);\n      }\n      add(time,count,s);\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n finally {\n    close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 144,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 114,
        "startColumnNumber" : 23,
        "endLineNumber" : 114,
        "endColumnNumber" : 55
      },
      "nodeContext" : "(result=is.readLine()) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.io.BufferedReader"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 114,
    "startColumnNumber" : 33,
    "endLineNumber" : 114,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ ]
}