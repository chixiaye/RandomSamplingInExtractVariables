{
  "id" : 101,
  "expression" : "(right - left + 1) / moduleSize",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/pdf417/PDF417Reader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(right - left + 1) / moduleSize",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 106,
      "startColumnNumber" : 22,
      "endLineNumber" : 106,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 8,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 53
      },
      "nodeContext" : "matrixWidth=(right - left + 1) / moduleSize",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 54
      },
      "nodeContext" : "int matrixWidth=(right - left + 1) / moduleSize;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1352,
        "startLineNumber" : 91,
        "startColumnNumber" : 85,
        "endLineNumber" : 130,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int[] leftTopBlack=image.getTopLeftOnBit();\n  int[] rightBottomBlack=image.getBottomRightOnBit();\n  if (leftTopBlack == null || rightBottomBlack == null) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  int moduleSize=moduleSize(leftTopBlack,image);\n  int top=leftTopBlack[1];\n  int bottom=rightBottomBlack[1];\n  int left=findPatternStart(leftTopBlack[0],top,image);\n  int right=findPatternEnd(leftTopBlack[0],top,image);\n  int matrixWidth=(right - left + 1) / moduleSize;\n  int matrixHeight=(bottom - top + 1) / moduleSize;\n  if (matrixWidth <= 0 || matrixHeight <= 0) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  int nudge=moduleSize >> 1;\n  top+=nudge;\n  left+=nudge;\n  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);\n  for (int y=0; y < matrixHeight; y++) {\n    int iOffset=top + y * moduleSize;\n    for (int x=0; x < matrixWidth; x++) {\n      if (image.get(left + x * moduleSize,iOffset)) {\n        bits.set(x,y);\n      }\n    }\n  }\n  return bits;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 190,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1892,
        "startLineNumber" : 82,
        "startColumnNumber" : 2,
        "endLineNumber" : 130,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This method detects a code in a \"pure\" image -- that is, pure monochrome image which contains only an unrotated, unskewed, image of a code, with some white border around it. This is a specialized method that works exceptionally fast in this special case.\n * @see com.google.zxing.qrcode.QRCodeReader#extractPureBits(BitMatrix)\n * @see com.google.zxing.datamatrix.DataMatrixReader#extractPureBits(BitMatrix)\n */\nprivate static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {\n  int[] leftTopBlack=image.getTopLeftOnBit();\n  int[] rightBottomBlack=image.getBottomRightOnBit();\n  if (leftTopBlack == null || rightBottomBlack == null) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  int moduleSize=moduleSize(leftTopBlack,image);\n  int top=leftTopBlack[1];\n  int bottom=rightBottomBlack[1];\n  int left=findPatternStart(leftTopBlack[0],top,image);\n  int right=findPatternEnd(leftTopBlack[0],top,image);\n  int matrixWidth=(right - left + 1) / moduleSize;\n  int matrixHeight=(bottom - top + 1) / moduleSize;\n  if (matrixWidth <= 0 || matrixHeight <= 0) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  int nudge=moduleSize >> 1;\n  top+=nudge;\n  left+=nudge;\n  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);\n  for (int y=0; y < matrixHeight; y++) {\n    int iOffset=top + y * moduleSize;\n    for (int x=0; x < matrixWidth; x++) {\n      if (image.get(left + x * moduleSize,iOffset)) {\n        bits.set(x,y);\n      }\n    }\n  }\n  return bits;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 203,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 54
      },
      "nodeContext" : "int matrixWidth=(right - left + 1) / moduleSize;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 7,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 106,
    "startColumnNumber" : 22,
    "endLineNumber" : 106,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}