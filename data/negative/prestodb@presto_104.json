{
  "id" : 104,
  "expression" : "java.util.Iterator",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkRemoteSourceFactory.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "java.util.Iterator",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 85,
      "startColumnNumber" : 13,
      "endLineNumber" : 85,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 85,
        "startColumnNumber" : 13,
        "endLineNumber" : 85,
        "endColumnNumber" : 31
      },
      "nodeContext" : "java.util.Iterator",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ParameterizedType,typeArguments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 85,
        "startColumnNumber" : 13,
        "endLineNumber" : 85,
        "endColumnNumber" : 58
      },
      "nodeContext" : "java.util.Iterator<PrestoSparkSerializedPage>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 59
      },
      "nodeContext" : "List<java.util.Iterator<PrestoSparkSerializedPage>>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 103
      },
      "nodeContext" : "List<java.util.Iterator<PrestoSparkSerializedPage>> pageInputs=pageInputsMap.get(planNodeId);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2669,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<PrestoSparkShuffleInput> shuffleInputs=shuffleInputsMap.get(planNodeId);\n  List<java.util.Iterator<PrestoSparkSerializedPage>> pageInputs=pageInputsMap.get(planNodeId);\n  List<?> broadcastInputs=broadcastInputsMap.get(planNodeId);\n  checkArgument(shuffleInputs != null || pageInputs != null || broadcastInputs != null,\"input not found for plan node with id %s\",planNodeId);\n  checkArgument(shuffleInputs == null || pageInputs == null,\"single remote source cannot accept both, shuffle and page inputs\");\n  if (broadcastInputs != null) {\n    if (isStorageBasedBroadcastJoinEnabled(session)) {\n      List<List<PrestoSparkStorageHandle>> diskPageInputs=broadcastInputs.stream().map(input -> ((List<?>)input).stream().map(PrestoSparkStorageHandle.class::cast).collect(toImmutableList())).collect(toImmutableList());\n      return new SparkRemoteSourceOperatorFactory(operatorId,planNodeId,new PrestoSparkDiskPageInput(createPagesSerde(blockEncodingManager),tempStorage,tempDataOperationContext,prestoSparkBroadcastTableCacheManager,stageId,planNodeId,diskPageInputs));\n    }\n else {\n      List<Iterator<PrestoSparkSerializedPage>> serializedPageInputs=broadcastInputs.stream().map(input -> ((List<?>)input).stream().map(PrestoSparkSerializedPage.class::cast).iterator()).collect(toImmutableList());\n      return new SparkRemoteSourceOperatorFactory(operatorId,planNodeId,new PrestoSparkSerializedPageInput(createPagesSerde(blockEncodingManager),serializedPageInputs));\n    }\n  }\n  if (pageInputs != null) {\n    return new SparkRemoteSourceOperatorFactory(operatorId,planNodeId,new PrestoSparkSerializedPageInput(createPagesSerde(blockEncodingManager),pageInputs));\n  }\n  return new SparkRemoteSourceOperatorFactory(operatorId,planNodeId,new PrestoSparkShufflePageInput(types,shuffleInputs,taskId,shuffleStatsCollector));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2809,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public SourceOperatorFactory createRemoteSource(Session session,int operatorId,PlanNodeId planNodeId,List<Type> types){\n  List<PrestoSparkShuffleInput> shuffleInputs=shuffleInputsMap.get(planNodeId);\n  List<java.util.Iterator<PrestoSparkSerializedPage>> pageInputs=pageInputsMap.get(planNodeId);\n  List<?> broadcastInputs=broadcastInputsMap.get(planNodeId);\n  checkArgument(shuffleInputs != null || pageInputs != null || broadcastInputs != null,\"input not found for plan node with id %s\",planNodeId);\n  checkArgument(shuffleInputs == null || pageInputs == null,\"single remote source cannot accept both, shuffle and page inputs\");\n  if (broadcastInputs != null) {\n    if (isStorageBasedBroadcastJoinEnabled(session)) {\n      List<List<PrestoSparkStorageHandle>> diskPageInputs=broadcastInputs.stream().map(input -> ((List<?>)input).stream().map(PrestoSparkStorageHandle.class::cast).collect(toImmutableList())).collect(toImmutableList());\n      return new SparkRemoteSourceOperatorFactory(operatorId,planNodeId,new PrestoSparkDiskPageInput(createPagesSerde(blockEncodingManager),tempStorage,tempDataOperationContext,prestoSparkBroadcastTableCacheManager,stageId,planNodeId,diskPageInputs));\n    }\n else {\n      List<Iterator<PrestoSparkSerializedPage>> serializedPageInputs=broadcastInputs.stream().map(input -> ((List<?>)input).stream().map(PrestoSparkSerializedPage.class::cast).iterator()).collect(toImmutableList());\n      return new SparkRemoteSourceOperatorFactory(operatorId,planNodeId,new PrestoSparkSerializedPageInput(createPagesSerde(blockEncodingManager),serializedPageInputs));\n    }\n  }\n  if (pageInputs != null) {\n    return new SparkRemoteSourceOperatorFactory(operatorId,planNodeId,new PrestoSparkSerializedPageInput(createPagesSerde(blockEncodingManager),pageInputs));\n  }\n  return new SparkRemoteSourceOperatorFactory(operatorId,planNodeId,new PrestoSparkShufflePageInput(types,shuffleInputs,taskId,shuffleStatsCollector));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 252,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 103
      },
      "nodeContext" : "List<java.util.Iterator<PrestoSparkSerializedPage>> pageInputs=pageInputsMap.get(planNodeId);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "java.util.Iterator<com.facebook.presto.spark.classloader_interface.PrestoSparkSerializedPage>"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 85,
    "startColumnNumber" : 13,
    "endLineNumber" : 85,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}