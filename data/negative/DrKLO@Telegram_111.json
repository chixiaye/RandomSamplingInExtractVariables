{
  "id" : 111,
  "expression" : "CHAR_LESS_THAN",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttCueParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "CHAR_LESS_THAN",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 166,
      "startColumnNumber" : 13,
      "endLineNumber" : 166,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 166,
        "startColumnNumber" : 8,
        "endLineNumber" : 166,
        "endColumnNumber" : 28
      },
      "nodeContext" : "case CHAR_LESS_THAN:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2078,
        "startLineNumber" : 165,
        "startColumnNumber" : 6,
        "endLineNumber" : 218,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (curr) {\ncase CHAR_LESS_THAN:  if (pos + 1 >= markup.length()) {\n    pos++;\n    break;\n  }\nint ltPos=pos;\nboolean isClosingTag=markup.charAt(ltPos + 1) == CHAR_SLASH;\npos=findEndOfTag(markup,ltPos + 1);\nboolean isVoidTag=markup.charAt(pos - 2) == CHAR_SLASH;\nString fullTagExpression=markup.substring(ltPos + (isClosingTag ? 2 : 1),isVoidTag ? pos - 2 : pos - 1);\nif (fullTagExpression.trim().isEmpty()) {\ncontinue;\n}\nString tagName=getTagName(fullTagExpression);\nif (!isSupportedTag(tagName)) {\ncontinue;\n}\nif (isClosingTag) {\nStartTag startTag;\ndo {\nif (startTagStack.isEmpty()) {\nbreak;\n}\nstartTag=startTagStack.pop();\napplySpansForTag(id,startTag,spannedText,styles,scratchStyleMatches);\n}\n while (!startTag.name.equals(tagName));\n}\n else if (!isVoidTag) {\nstartTagStack.push(StartTag.buildStartTag(fullTagExpression,spannedText.length()));\n}\nbreak;\ncase CHAR_AMPERSAND:int semiColonEndIndex=markup.indexOf(CHAR_SEMI_COLON,pos + 1);\nint spaceEndIndex=markup.indexOf(CHAR_SPACE,pos + 1);\nint entityEndIndex=semiColonEndIndex == -1 ? spaceEndIndex : (spaceEndIndex == -1 ? semiColonEndIndex : Math.min(semiColonEndIndex,spaceEndIndex));\nif (entityEndIndex != -1) {\napplyEntity(markup.substring(pos + 1,entityEndIndex),spannedText);\nif (entityEndIndex == spaceEndIndex) {\nspannedText.append(\" \");\n}\npos=entityEndIndex + 1;\n}\n else {\nspannedText.append(curr);\npos++;\n}\nbreak;\ndefault:spannedText.append(curr);\npos++;\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 253,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2130,
        "startLineNumber" : 163,
        "startColumnNumber" : 34,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  char curr=markup.charAt(pos);\nswitch (curr) {\ncase CHAR_LESS_THAN:    if (pos + 1 >= markup.length()) {\n      pos++;\n      break;\n    }\n  int ltPos=pos;\nboolean isClosingTag=markup.charAt(ltPos + 1) == CHAR_SLASH;\npos=findEndOfTag(markup,ltPos + 1);\nboolean isVoidTag=markup.charAt(pos - 2) == CHAR_SLASH;\nString fullTagExpression=markup.substring(ltPos + (isClosingTag ? 2 : 1),isVoidTag ? pos - 2 : pos - 1);\nif (fullTagExpression.trim().isEmpty()) {\ncontinue;\n}\nString tagName=getTagName(fullTagExpression);\nif (!isSupportedTag(tagName)) {\ncontinue;\n}\nif (isClosingTag) {\nStartTag startTag;\ndo {\nif (startTagStack.isEmpty()) {\nbreak;\n}\nstartTag=startTagStack.pop();\napplySpansForTag(id,startTag,spannedText,styles,scratchStyleMatches);\n}\n while (!startTag.name.equals(tagName));\n}\n else if (!isVoidTag) {\nstartTagStack.push(StartTag.buildStartTag(fullTagExpression,spannedText.length()));\n}\nbreak;\ncase CHAR_AMPERSAND:int semiColonEndIndex=markup.indexOf(CHAR_SEMI_COLON,pos + 1);\nint spaceEndIndex=markup.indexOf(CHAR_SPACE,pos + 1);\nint entityEndIndex=semiColonEndIndex == -1 ? spaceEndIndex : (spaceEndIndex == -1 ? semiColonEndIndex : Math.min(semiColonEndIndex,spaceEndIndex));\nif (entityEndIndex != -1) {\napplyEntity(markup.substring(pos + 1,entityEndIndex),spannedText);\nif (entityEndIndex == spaceEndIndex) {\nspannedText.append(\" \");\n}\npos=entityEndIndex + 1;\n}\n else {\nspannedText.append(curr);\npos++;\n}\nbreak;\ndefault:spannedText.append(curr);\npos++;\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2160,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (pos < markup.length()) {\n  char curr=markup.charAt(pos);\nswitch (curr) {\ncase CHAR_LESS_THAN:    if (pos + 1 >= markup.length()) {\n      pos++;\n      break;\n    }\n  int ltPos=pos;\nboolean isClosingTag=markup.charAt(ltPos + 1) == CHAR_SLASH;\npos=findEndOfTag(markup,ltPos + 1);\nboolean isVoidTag=markup.charAt(pos - 2) == CHAR_SLASH;\nString fullTagExpression=markup.substring(ltPos + (isClosingTag ? 2 : 1),isVoidTag ? pos - 2 : pos - 1);\nif (fullTagExpression.trim().isEmpty()) {\ncontinue;\n}\nString tagName=getTagName(fullTagExpression);\nif (!isSupportedTag(tagName)) {\ncontinue;\n}\nif (isClosingTag) {\nStartTag startTag;\ndo {\nif (startTagStack.isEmpty()) {\nbreak;\n}\nstartTag=startTagStack.pop();\napplySpansForTag(id,startTag,spannedText,styles,scratchStyleMatches);\n}\n while (!startTag.name.equals(tagName));\n}\n else if (!isVoidTag) {\nstartTagStack.push(StartTag.buildStartTag(fullTagExpression,spannedText.length()));\n}\nbreak;\ncase CHAR_AMPERSAND:int semiColonEndIndex=markup.indexOf(CHAR_SEMI_COLON,pos + 1);\nint spaceEndIndex=markup.indexOf(CHAR_SPACE,pos + 1);\nint entityEndIndex=semiColonEndIndex == -1 ? spaceEndIndex : (spaceEndIndex == -1 ? semiColonEndIndex : Math.min(semiColonEndIndex,spaceEndIndex));\nif (entityEndIndex != -1) {\napplyEntity(markup.substring(pos + 1,entityEndIndex),spannedText);\nif (entityEndIndex == spaceEndIndex) {\nspannedText.append(\" \");\n}\npos=entityEndIndex + 1;\n}\n else {\nspannedText.append(curr);\npos++;\n}\nbreak;\ndefault:spannedText.append(curr);\npos++;\nbreak;\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 268,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2690,
        "startLineNumber" : 158,
        "startColumnNumber" : 98,
        "endLineNumber" : 227,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  SpannableStringBuilder spannedText=new SpannableStringBuilder();\n  ArrayDeque<StartTag> startTagStack=new ArrayDeque<>();\n  List<StyleMatch> scratchStyleMatches=new ArrayList<>();\n  int pos=0;\n  while (pos < markup.length()) {\n    char curr=markup.charAt(pos);\nswitch (curr) {\ncase CHAR_LESS_THAN:      if (pos + 1 >= markup.length()) {\n        pos++;\n        break;\n      }\n    int ltPos=pos;\n  boolean isClosingTag=markup.charAt(ltPos + 1) == CHAR_SLASH;\npos=findEndOfTag(markup,ltPos + 1);\nboolean isVoidTag=markup.charAt(pos - 2) == CHAR_SLASH;\nString fullTagExpression=markup.substring(ltPos + (isClosingTag ? 2 : 1),isVoidTag ? pos - 2 : pos - 1);\nif (fullTagExpression.trim().isEmpty()) {\ncontinue;\n}\nString tagName=getTagName(fullTagExpression);\nif (!isSupportedTag(tagName)) {\ncontinue;\n}\nif (isClosingTag) {\nStartTag startTag;\ndo {\nif (startTagStack.isEmpty()) {\nbreak;\n}\nstartTag=startTagStack.pop();\napplySpansForTag(id,startTag,spannedText,styles,scratchStyleMatches);\n}\n while (!startTag.name.equals(tagName));\n}\n else if (!isVoidTag) {\nstartTagStack.push(StartTag.buildStartTag(fullTagExpression,spannedText.length()));\n}\nbreak;\ncase CHAR_AMPERSAND:int semiColonEndIndex=markup.indexOf(CHAR_SEMI_COLON,pos + 1);\nint spaceEndIndex=markup.indexOf(CHAR_SPACE,pos + 1);\nint entityEndIndex=semiColonEndIndex == -1 ? spaceEndIndex : (spaceEndIndex == -1 ? semiColonEndIndex : Math.min(semiColonEndIndex,spaceEndIndex));\nif (entityEndIndex != -1) {\napplyEntity(markup.substring(pos + 1,entityEndIndex),spannedText);\nif (entityEndIndex == spaceEndIndex) {\nspannedText.append(\" \");\n}\npos=entityEndIndex + 1;\n}\n else {\nspannedText.append(curr);\npos++;\n}\nbreak;\ndefault:spannedText.append(curr);\npos++;\nbreak;\n}\n}\nwhile (!startTagStack.isEmpty()) {\napplySpansForTag(id,startTagStack.pop(),spannedText,styles,scratchStyleMatches);\n}\napplySpansForTag(id,StartTag.buildWholeCueVirtualTag(),spannedText,styles,scratchStyleMatches);\nbuilder.setText(spannedText);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 337,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3182,
        "startLineNumber" : 149,
        "startColumnNumber" : 2,
        "endLineNumber" : 227,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses the text payload of a WebVTT Cue and applies modifications on  {@link WebvttCue.Builder}.\n * @param id Id of the cue, {@code null} if it is not present.\n * @param markup The markup text to be parsed.\n * @param styles List of styles defined by the CSS style blocks preceding the cues.\n * @param builder Output builder.\n */\nstatic void parseCueText(@Nullable String id,String markup,WebvttCue.Builder builder,List<WebvttCssStyle> styles){\n  SpannableStringBuilder spannedText=new SpannableStringBuilder();\n  ArrayDeque<StartTag> startTagStack=new ArrayDeque<>();\n  List<StyleMatch> scratchStyleMatches=new ArrayList<>();\n  int pos=0;\n  while (pos < markup.length()) {\n    char curr=markup.charAt(pos);\nswitch (curr) {\ncase CHAR_LESS_THAN:      if (pos + 1 >= markup.length()) {\n        pos++;\n        break;\n      }\n    int ltPos=pos;\n  boolean isClosingTag=markup.charAt(ltPos + 1) == CHAR_SLASH;\npos=findEndOfTag(markup,ltPos + 1);\nboolean isVoidTag=markup.charAt(pos - 2) == CHAR_SLASH;\nString fullTagExpression=markup.substring(ltPos + (isClosingTag ? 2 : 1),isVoidTag ? pos - 2 : pos - 1);\nif (fullTagExpression.trim().isEmpty()) {\ncontinue;\n}\nString tagName=getTagName(fullTagExpression);\nif (!isSupportedTag(tagName)) {\ncontinue;\n}\nif (isClosingTag) {\nStartTag startTag;\ndo {\nif (startTagStack.isEmpty()) {\nbreak;\n}\nstartTag=startTagStack.pop();\napplySpansForTag(id,startTag,spannedText,styles,scratchStyleMatches);\n}\n while (!startTag.name.equals(tagName));\n}\n else if (!isVoidTag) {\nstartTagStack.push(StartTag.buildStartTag(fullTagExpression,spannedText.length()));\n}\nbreak;\ncase CHAR_AMPERSAND:int semiColonEndIndex=markup.indexOf(CHAR_SEMI_COLON,pos + 1);\nint spaceEndIndex=markup.indexOf(CHAR_SPACE,pos + 1);\nint entityEndIndex=semiColonEndIndex == -1 ? spaceEndIndex : (spaceEndIndex == -1 ? semiColonEndIndex : Math.min(semiColonEndIndex,spaceEndIndex));\nif (entityEndIndex != -1) {\napplyEntity(markup.substring(pos + 1,entityEndIndex),spannedText);\nif (entityEndIndex == spaceEndIndex) {\nspannedText.append(\" \");\n}\npos=entityEndIndex + 1;\n}\n else {\nspannedText.append(curr);\npos++;\n}\nbreak;\ndefault:spannedText.append(curr);\npos++;\nbreak;\n}\n}\nwhile (!startTagStack.isEmpty()) {\napplySpansForTag(id,startTagStack.pop(),spannedText,styles,scratchStyleMatches);\n}\napplySpansForTag(id,StartTag.buildWholeCueVirtualTag(),spannedText,styles,scratchStyleMatches);\nbuilder.setText(spannedText);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 365,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 166,
        "startColumnNumber" : 8,
        "endLineNumber" : 166,
        "endColumnNumber" : 28
      },
      "nodeContext" : "case CHAR_LESS_THAN:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 166,
    "startColumnNumber" : 13,
    "endLineNumber" : 166,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}