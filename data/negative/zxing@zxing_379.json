{
  "id" : 379,
  "expression" : "ITFReader.PATTERNS[one]",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/oned/ITFWriter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ITFReader.PATTERNS[one]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 64,
      "startColumnNumber" : 29,
      "endLineNumber" : 64,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 64,
        "startColumnNumber" : 29,
        "endLineNumber" : 64,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ITFReader.PATTERNS[one][j]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 55
      },
      "nodeContext" : "encoding[(j << 1)]=ITFReader.PATTERNS[one][j]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 56
      },
      "nodeContext" : "encoding[(j << 1)]=ITFReader.PATTERNS[one][j];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 63,
        "startColumnNumber" : 34,
        "endLineNumber" : 66,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  encoding[(j << 1)]=ITFReader.PATTERNS[one][j];\n  encoding[(j << 1) + 1]=ITFReader.PATTERNS[two][j];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 63,
        "startColumnNumber" : 6,
        "endLineNumber" : 66,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int j=0; j < 5; j++) {\n  encoding[(j << 1)]=ITFReader.PATTERNS[one][j];\n  encoding[(j << 1) + 1]=ITFReader.PATTERNS[two][j];\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 44,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 384,
        "startLineNumber" : 59,
        "startColumnNumber" : 40,
        "endLineNumber" : 68,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int one=Character.digit(contents.charAt(i),10);\n  int two=Character.digit(contents.charAt(i + 1),10);\n  int[] encoding=new int[18];\n  for (int j=0; j < 5; j++) {\n    encoding[(j << 1)]=ITFReader.PATTERNS[one][j];\n    encoding[(j << 1) + 1]=ITFReader.PATTERNS[two][j];\n  }\n  pos+=appendPattern(result,pos,encoding,1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 420,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 68,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < length; i+=2) {\n  int one=Character.digit(contents.charAt(i),10);\n  int two=Character.digit(contents.charAt(i + 1),10);\n  int[] encoding=new int[18];\n  for (int j=0; j < 5; j++) {\n    encoding[(j << 1)]=ITFReader.PATTERNS[one][j];\n    encoding[(j << 1) + 1]=ITFReader.PATTERNS[two][j];\n  }\n  pos+=appendPattern(result,pos,encoding,1);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 103,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 980,
        "startLineNumber" : 47,
        "startColumnNumber" : 40,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int length=contents.length();\n  if (length % 2 != 0) {\n    throw new IllegalArgumentException(\"The lenght of the input should be even\");\n  }\n  if (length > 80) {\n    throw new IllegalArgumentException(\"Requested contents should be less than 80 digits long, but got \" + length);\n  }\n  byte[] result=new byte[9 + 9 * length];\n  int[] start={1,1,1,1};\n  int pos=appendPattern(result,0,start,1);\n  for (int i=0; i < length; i+=2) {\n    int one=Character.digit(contents.charAt(i),10);\n    int two=Character.digit(contents.charAt(i + 1),10);\n    int[] encoding=new int[18];\n    for (int j=0; j < 5; j++) {\n      encoding[(j << 1)]=ITFReader.PATTERNS[one][j];\n      encoding[(j << 1) + 1]=ITFReader.PATTERNS[two][j];\n    }\n    pos+=appendPattern(result,pos,encoding,1);\n  }\n  int[] end={3,1,1};\n  pos+=appendPattern(result,pos,end,1);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1031,
        "startLineNumber" : 46,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public byte[] encode(String contents){\n  int length=contents.length();\n  if (length % 2 != 0) {\n    throw new IllegalArgumentException(\"The lenght of the input should be even\");\n  }\n  if (length > 80) {\n    throw new IllegalArgumentException(\"Requested contents should be less than 80 digits long, but got \" + length);\n  }\n  byte[] result=new byte[9 + 9 * length];\n  int[] start={1,1,1,1};\n  int pos=appendPattern(result,0,start,1);\n  for (int i=0; i < length; i+=2) {\n    int one=Character.digit(contents.charAt(i),10);\n    int two=Character.digit(contents.charAt(i + 1),10);\n    int[] encoding=new int[18];\n    for (int j=0; j < 5; j++) {\n      encoding[(j << 1)]=ITFReader.PATTERNS[one][j];\n      encoding[(j << 1) + 1]=ITFReader.PATTERNS[two][j];\n    }\n    pos+=appendPattern(result,pos,encoding,1);\n  }\n  int[] end={3,1,1};\n  pos+=appendPattern(result,pos,end,1);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 204,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 56
      },
      "nodeContext" : "encoding[(j << 1)]=ITFReader.PATTERNS[one][j];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "int[]"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 64,
    "startColumnNumber" : 29,
    "endLineNumber" : 64,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}