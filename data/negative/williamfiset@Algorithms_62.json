{
  "id" : 62,
  "expression" : "\"BRIDGE between nodes: %d and %d\\n\"",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/BridgesAdjacencyListIterative.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"BRIDGE between nodes: %d and %d\\n\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 120,
      "startColumnNumber" : 24,
      "endLineNumber" : 120,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 120,
        "startColumnNumber" : 6,
        "endLineNumber" : 120,
        "endColumnNumber" : 74
      },
      "nodeContext" : "System.out.printf(\"BRIDGE between nodes: %d and %d\\n\",node1,node2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 120,
        "startColumnNumber" : 6,
        "endLineNumber" : 120,
        "endColumnNumber" : 75
      },
      "nodeContext" : "System.out.printf(\"BRIDGE between nodes: %d and %d\\n\",node1,node2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 117,
        "startColumnNumber" : 49,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int node1=bridges.get(2 * i);\n  int node2=bridges.get(2 * i + 1);\n  System.out.printf(\"BRIDGE between nodes: %d and %d\\n\",node1,node2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 208,
        "startLineNumber" : 117,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < bridges.size() / 2; i++) {\n  int node1=bridges.get(2 * i);\n  int node2=bridges.get(2 * i + 1);\n  System.out.printf(\"BRIDGE between nodes: %d and %d\\n\",node1,node2);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 735,
        "startLineNumber" : 97,
        "startColumnNumber" : 41,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=10;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,0,1);\n  addEdge(graph,0,2);\n  addEdge(graph,1,2);\n  addEdge(graph,1,3);\n  addEdge(graph,2,3);\n  addEdge(graph,1,4);\n  addEdge(graph,2,7);\n  addEdge(graph,4,6);\n  addEdge(graph,4,5);\n  addEdge(graph,5,6);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  BridgesAdjacencyListIterative solver=new BridgesAdjacencyListIterative(graph,n);\n  List<Integer> bridges=solver.findBridges();\n  for (int i=0; i < bridges.size() / 2; i++) {\n    int node1=bridges.get(2 * i);\n    int node2=bridges.get(2 * i + 1);\n    System.out.printf(\"BRIDGE between nodes: %d and %d\\n\",node1,node2);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 774,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void main(String[] args){\n  int n=10;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,0,1);\n  addEdge(graph,0,2);\n  addEdge(graph,1,2);\n  addEdge(graph,1,3);\n  addEdge(graph,2,3);\n  addEdge(graph,1,4);\n  addEdge(graph,2,7);\n  addEdge(graph,4,6);\n  addEdge(graph,4,5);\n  addEdge(graph,5,6);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  BridgesAdjacencyListIterative solver=new BridgesAdjacencyListIterative(graph,n);\n  List<Integer> bridges=solver.findBridges();\n  for (int i=0; i < bridges.size() / 2; i++) {\n    int node1=bridges.get(2 * i);\n    int node2=bridges.get(2 * i + 1);\n    System.out.printf(\"BRIDGE between nodes: %d and %d\\n\",node1,node2);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 120,
        "startColumnNumber" : 6,
        "endLineNumber" : 120,
        "endColumnNumber" : 75
      },
      "nodeContext" : "System.out.printf(\"BRIDGE between nodes: %d and %d\\n\",node1,node2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 120,
    "startColumnNumber" : 24,
    "endLineNumber" : 120,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}