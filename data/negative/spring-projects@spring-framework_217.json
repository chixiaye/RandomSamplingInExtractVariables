{
  "id" : 217,
  "expression" : "filter",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-websocket/src/test/java/org/springframework/web/socket/UndertowTestServer.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "filter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 89,
      "startColumnNumber" : 23,
      "endLineNumber" : 89,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 89,
        "startColumnNumber" : 23,
        "endLineNumber" : 89,
        "endColumnNumber" : 40
      },
      "nodeContext" : "filter.getClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 89,
        "startColumnNumber" : 23,
        "endLineNumber" : 89,
        "endColumnNumber" : 50
      },
      "nodeContext" : "filter.getClass().getName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 89,
        "startColumnNumber" : 10,
        "endLineNumber" : 89,
        "endColumnNumber" : 50
      },
      "nodeContext" : "filterName=filter.getClass().getName()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 89,
        "startColumnNumber" : 3,
        "endLineNumber" : 89,
        "endColumnNumber" : 51
      },
      "nodeContext" : "String filterName=filter.getClass().getName();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 413,
        "startLineNumber" : 88,
        "startColumnNumber" : 38,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filterName=filter.getClass().getName();\n  FilterInstanceFactory filterFactory=new FilterInstanceFactory(filter);\n  FilterInfo filterInfo=new FilterInfo(filterName,filter.getClass(),filterFactory);\n  servletBuilder.addFilter(filterInfo.setAsyncSupported(true));\n  for (  DispatcherType type : DispatcherType.values()) {\n    servletBuilder.addFilterUrlMapping(filterName,\"/*\",type);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 449,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (final Filter filter : filters) {\n  String filterName=filter.getClass().getName();\n  FilterInstanceFactory filterFactory=new FilterInstanceFactory(filter);\n  FilterInfo filterInfo=new FilterInfo(filterName,filter.getClass(),filterFactory);\n  servletBuilder.addFilter(filterInfo.setAsyncSupported(true));\n  for (  DispatcherType type : DispatcherType.values()) {\n    servletBuilder.addFilterUrlMapping(filterName,\"/*\",type);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 64,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1752,
        "startLineNumber" : 67,
        "startColumnNumber" : 72,
        "endLineNumber" : 106,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  DispatcherServletInstanceFactory servletFactory=new DispatcherServletInstanceFactory(wac);\n  WebSocketDeploymentInfo info=new WebSocketDeploymentInfo();\n  try {\n    info.setWorker(Xnio.getInstance().createWorker(OptionMap.EMPTY));\n    info.setBuffers(new org.xnio.ByteBufferSlicePool(1024,1024));\n  }\n catch (  IOException ex) {\n    throw new IllegalStateException(ex);\n  }\n  ServletInfo servletInfo=servlet(\"DispatcherServlet\",DispatcherServlet.class,servletFactory).addMapping(\"/\").setAsyncSupported(true);\n  DeploymentInfo servletBuilder=deployment().setClassLoader(UndertowTestServer.class.getClassLoader()).setDeploymentName(\"undertow-websocket-test\").setContextPath(\"/\").addServlet(servletInfo).addServletContextAttribute(WebSocketDeploymentInfo.ATTRIBUTE_NAME,info);\n  for (  final Filter filter : filters) {\n    String filterName=filter.getClass().getName();\n    FilterInstanceFactory filterFactory=new FilterInstanceFactory(filter);\n    FilterInfo filterInfo=new FilterInfo(filterName,filter.getClass(),filterFactory);\n    servletBuilder.addFilter(filterInfo.setAsyncSupported(true));\n    for (    DispatcherType type : DispatcherType.values()) {\n      servletBuilder.addFilterUrlMapping(filterName,\"/*\",type);\n    }\n  }\n  try {\n    this.manager=defaultContainer().addDeployment(servletBuilder);\n    this.manager.deploy();\n    HttpHandler httpHandler=this.manager.start();\n    this.server=Undertow.builder().addHttpListener(0,\"localhost\").setHandler(httpHandler).build();\n  }\n catch (  ServletException ex) {\n    throw new IllegalStateException(ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1868,
        "startLineNumber" : 65,
        "startColumnNumber" : 1,
        "endLineNumber" : 106,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override @SuppressWarnings(\"deprecation\") public void deployConfig(WebApplicationContext wac,Filter... filters){\n  DispatcherServletInstanceFactory servletFactory=new DispatcherServletInstanceFactory(wac);\n  WebSocketDeploymentInfo info=new WebSocketDeploymentInfo();\n  try {\n    info.setWorker(Xnio.getInstance().createWorker(OptionMap.EMPTY));\n    info.setBuffers(new org.xnio.ByteBufferSlicePool(1024,1024));\n  }\n catch (  IOException ex) {\n    throw new IllegalStateException(ex);\n  }\n  ServletInfo servletInfo=servlet(\"DispatcherServlet\",DispatcherServlet.class,servletFactory).addMapping(\"/\").setAsyncSupported(true);\n  DeploymentInfo servletBuilder=deployment().setClassLoader(UndertowTestServer.class.getClassLoader()).setDeploymentName(\"undertow-websocket-test\").setContextPath(\"/\").addServlet(servletInfo).addServletContextAttribute(WebSocketDeploymentInfo.ATTRIBUTE_NAME,info);\n  for (  final Filter filter : filters) {\n    String filterName=filter.getClass().getName();\n    FilterInstanceFactory filterFactory=new FilterInstanceFactory(filter);\n    FilterInfo filterInfo=new FilterInfo(filterName,filter.getClass(),filterFactory);\n    servletBuilder.addFilter(filterInfo.setAsyncSupported(true));\n    for (    DispatcherType type : DispatcherType.values()) {\n      servletBuilder.addFilterUrlMapping(filterName,\"/*\",type);\n    }\n  }\n  try {\n    this.manager=defaultContainer().addDeployment(servletBuilder);\n    this.manager.deploy();\n    HttpHandler httpHandler=this.manager.start();\n    this.server=Undertow.builder().addHttpListener(0,\"localhost\").setHandler(httpHandler).build();\n  }\n catch (  ServletException ex) {\n    throw new IllegalStateException(ex);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 89,
        "startColumnNumber" : 3,
        "endLineNumber" : 89,
        "endColumnNumber" : 51
      },
      "nodeContext" : "String filterName=filter.getClass().getName();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.springframework.web.socket.Filter"
  }, {
    "nodeContext" : "filter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 90,
      "startColumnNumber" : 67,
      "endLineNumber" : 90,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 90,
        "startColumnNumber" : 41,
        "endLineNumber" : 90,
        "endColumnNumber" : 74
      },
      "nodeContext" : "new FilterInstanceFactory(filter)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 90,
        "startColumnNumber" : 25,
        "endLineNumber" : 90,
        "endColumnNumber" : 74
      },
      "nodeContext" : "filterFactory=new FilterInstanceFactory(filter)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 90,
        "startColumnNumber" : 3,
        "endLineNumber" : 90,
        "endColumnNumber" : 75
      },
      "nodeContext" : "FilterInstanceFactory filterFactory=new FilterInstanceFactory(filter);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 413,
        "startLineNumber" : 88,
        "startColumnNumber" : 38,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filterName=filter.getClass().getName();\n  FilterInstanceFactory filterFactory=new FilterInstanceFactory(filter);\n  FilterInfo filterInfo=new FilterInfo(filterName,filter.getClass(),filterFactory);\n  servletBuilder.addFilter(filterInfo.setAsyncSupported(true));\n  for (  DispatcherType type : DispatcherType.values()) {\n    servletBuilder.addFilterUrlMapping(filterName,\"/*\",type);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 449,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (final Filter filter : filters) {\n  String filterName=filter.getClass().getName();\n  FilterInstanceFactory filterFactory=new FilterInstanceFactory(filter);\n  FilterInfo filterInfo=new FilterInfo(filterName,filter.getClass(),filterFactory);\n  servletBuilder.addFilter(filterInfo.setAsyncSupported(true));\n  for (  DispatcherType type : DispatcherType.values()) {\n    servletBuilder.addFilterUrlMapping(filterName,\"/*\",type);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 64,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1752,
        "startLineNumber" : 67,
        "startColumnNumber" : 72,
        "endLineNumber" : 106,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  DispatcherServletInstanceFactory servletFactory=new DispatcherServletInstanceFactory(wac);\n  WebSocketDeploymentInfo info=new WebSocketDeploymentInfo();\n  try {\n    info.setWorker(Xnio.getInstance().createWorker(OptionMap.EMPTY));\n    info.setBuffers(new org.xnio.ByteBufferSlicePool(1024,1024));\n  }\n catch (  IOException ex) {\n    throw new IllegalStateException(ex);\n  }\n  ServletInfo servletInfo=servlet(\"DispatcherServlet\",DispatcherServlet.class,servletFactory).addMapping(\"/\").setAsyncSupported(true);\n  DeploymentInfo servletBuilder=deployment().setClassLoader(UndertowTestServer.class.getClassLoader()).setDeploymentName(\"undertow-websocket-test\").setContextPath(\"/\").addServlet(servletInfo).addServletContextAttribute(WebSocketDeploymentInfo.ATTRIBUTE_NAME,info);\n  for (  final Filter filter : filters) {\n    String filterName=filter.getClass().getName();\n    FilterInstanceFactory filterFactory=new FilterInstanceFactory(filter);\n    FilterInfo filterInfo=new FilterInfo(filterName,filter.getClass(),filterFactory);\n    servletBuilder.addFilter(filterInfo.setAsyncSupported(true));\n    for (    DispatcherType type : DispatcherType.values()) {\n      servletBuilder.addFilterUrlMapping(filterName,\"/*\",type);\n    }\n  }\n  try {\n    this.manager=defaultContainer().addDeployment(servletBuilder);\n    this.manager.deploy();\n    HttpHandler httpHandler=this.manager.start();\n    this.server=Undertow.builder().addHttpListener(0,\"localhost\").setHandler(httpHandler).build();\n  }\n catch (  ServletException ex) {\n    throw new IllegalStateException(ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1868,
        "startLineNumber" : 65,
        "startColumnNumber" : 1,
        "endLineNumber" : 106,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override @SuppressWarnings(\"deprecation\") public void deployConfig(WebApplicationContext wac,Filter... filters){\n  DispatcherServletInstanceFactory servletFactory=new DispatcherServletInstanceFactory(wac);\n  WebSocketDeploymentInfo info=new WebSocketDeploymentInfo();\n  try {\n    info.setWorker(Xnio.getInstance().createWorker(OptionMap.EMPTY));\n    info.setBuffers(new org.xnio.ByteBufferSlicePool(1024,1024));\n  }\n catch (  IOException ex) {\n    throw new IllegalStateException(ex);\n  }\n  ServletInfo servletInfo=servlet(\"DispatcherServlet\",DispatcherServlet.class,servletFactory).addMapping(\"/\").setAsyncSupported(true);\n  DeploymentInfo servletBuilder=deployment().setClassLoader(UndertowTestServer.class.getClassLoader()).setDeploymentName(\"undertow-websocket-test\").setContextPath(\"/\").addServlet(servletInfo).addServletContextAttribute(WebSocketDeploymentInfo.ATTRIBUTE_NAME,info);\n  for (  final Filter filter : filters) {\n    String filterName=filter.getClass().getName();\n    FilterInstanceFactory filterFactory=new FilterInstanceFactory(filter);\n    FilterInfo filterInfo=new FilterInfo(filterName,filter.getClass(),filterFactory);\n    servletBuilder.addFilter(filterInfo.setAsyncSupported(true));\n    for (    DispatcherType type : DispatcherType.values()) {\n      servletBuilder.addFilterUrlMapping(filterName,\"/*\",type);\n    }\n  }\n  try {\n    this.manager=defaultContainer().addDeployment(servletBuilder);\n    this.manager.deploy();\n    HttpHandler httpHandler=this.manager.start();\n    this.server=Undertow.builder().addHttpListener(0,\"localhost\").setHandler(httpHandler).build();\n  }\n catch (  ServletException ex) {\n    throw new IllegalStateException(ex);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 90,
        "startColumnNumber" : 3,
        "endLineNumber" : 90,
        "endColumnNumber" : 75
      },
      "nodeContext" : "FilterInstanceFactory filterFactory=new FilterInstanceFactory(filter);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.springframework.web.socket.Filter"
  }, {
    "nodeContext" : "filter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 91,
      "startColumnNumber" : 54,
      "endLineNumber" : 91,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 91,
        "startColumnNumber" : 54,
        "endLineNumber" : 91,
        "endColumnNumber" : 71
      },
      "nodeContext" : "filter.getClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 91,
        "startColumnNumber" : 27,
        "endLineNumber" : 91,
        "endColumnNumber" : 87
      },
      "nodeContext" : "new FilterInfo(filterName,filter.getClass(),filterFactory)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 91,
        "startColumnNumber" : 14,
        "endLineNumber" : 91,
        "endColumnNumber" : 87
      },
      "nodeContext" : "filterInfo=new FilterInfo(filterName,filter.getClass(),filterFactory)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 91,
        "startColumnNumber" : 3,
        "endLineNumber" : 91,
        "endColumnNumber" : 88
      },
      "nodeContext" : "FilterInfo filterInfo=new FilterInfo(filterName,filter.getClass(),filterFactory);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 413,
        "startLineNumber" : 88,
        "startColumnNumber" : 38,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filterName=filter.getClass().getName();\n  FilterInstanceFactory filterFactory=new FilterInstanceFactory(filter);\n  FilterInfo filterInfo=new FilterInfo(filterName,filter.getClass(),filterFactory);\n  servletBuilder.addFilter(filterInfo.setAsyncSupported(true));\n  for (  DispatcherType type : DispatcherType.values()) {\n    servletBuilder.addFilterUrlMapping(filterName,\"/*\",type);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 449,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (final Filter filter : filters) {\n  String filterName=filter.getClass().getName();\n  FilterInstanceFactory filterFactory=new FilterInstanceFactory(filter);\n  FilterInfo filterInfo=new FilterInfo(filterName,filter.getClass(),filterFactory);\n  servletBuilder.addFilter(filterInfo.setAsyncSupported(true));\n  for (  DispatcherType type : DispatcherType.values()) {\n    servletBuilder.addFilterUrlMapping(filterName,\"/*\",type);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 64,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1752,
        "startLineNumber" : 67,
        "startColumnNumber" : 72,
        "endLineNumber" : 106,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  DispatcherServletInstanceFactory servletFactory=new DispatcherServletInstanceFactory(wac);\n  WebSocketDeploymentInfo info=new WebSocketDeploymentInfo();\n  try {\n    info.setWorker(Xnio.getInstance().createWorker(OptionMap.EMPTY));\n    info.setBuffers(new org.xnio.ByteBufferSlicePool(1024,1024));\n  }\n catch (  IOException ex) {\n    throw new IllegalStateException(ex);\n  }\n  ServletInfo servletInfo=servlet(\"DispatcherServlet\",DispatcherServlet.class,servletFactory).addMapping(\"/\").setAsyncSupported(true);\n  DeploymentInfo servletBuilder=deployment().setClassLoader(UndertowTestServer.class.getClassLoader()).setDeploymentName(\"undertow-websocket-test\").setContextPath(\"/\").addServlet(servletInfo).addServletContextAttribute(WebSocketDeploymentInfo.ATTRIBUTE_NAME,info);\n  for (  final Filter filter : filters) {\n    String filterName=filter.getClass().getName();\n    FilterInstanceFactory filterFactory=new FilterInstanceFactory(filter);\n    FilterInfo filterInfo=new FilterInfo(filterName,filter.getClass(),filterFactory);\n    servletBuilder.addFilter(filterInfo.setAsyncSupported(true));\n    for (    DispatcherType type : DispatcherType.values()) {\n      servletBuilder.addFilterUrlMapping(filterName,\"/*\",type);\n    }\n  }\n  try {\n    this.manager=defaultContainer().addDeployment(servletBuilder);\n    this.manager.deploy();\n    HttpHandler httpHandler=this.manager.start();\n    this.server=Undertow.builder().addHttpListener(0,\"localhost\").setHandler(httpHandler).build();\n  }\n catch (  ServletException ex) {\n    throw new IllegalStateException(ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1868,
        "startLineNumber" : 65,
        "startColumnNumber" : 1,
        "endLineNumber" : 106,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override @SuppressWarnings(\"deprecation\") public void deployConfig(WebApplicationContext wac,Filter... filters){\n  DispatcherServletInstanceFactory servletFactory=new DispatcherServletInstanceFactory(wac);\n  WebSocketDeploymentInfo info=new WebSocketDeploymentInfo();\n  try {\n    info.setWorker(Xnio.getInstance().createWorker(OptionMap.EMPTY));\n    info.setBuffers(new org.xnio.ByteBufferSlicePool(1024,1024));\n  }\n catch (  IOException ex) {\n    throw new IllegalStateException(ex);\n  }\n  ServletInfo servletInfo=servlet(\"DispatcherServlet\",DispatcherServlet.class,servletFactory).addMapping(\"/\").setAsyncSupported(true);\n  DeploymentInfo servletBuilder=deployment().setClassLoader(UndertowTestServer.class.getClassLoader()).setDeploymentName(\"undertow-websocket-test\").setContextPath(\"/\").addServlet(servletInfo).addServletContextAttribute(WebSocketDeploymentInfo.ATTRIBUTE_NAME,info);\n  for (  final Filter filter : filters) {\n    String filterName=filter.getClass().getName();\n    FilterInstanceFactory filterFactory=new FilterInstanceFactory(filter);\n    FilterInfo filterInfo=new FilterInfo(filterName,filter.getClass(),filterFactory);\n    servletBuilder.addFilter(filterInfo.setAsyncSupported(true));\n    for (    DispatcherType type : DispatcherType.values()) {\n      servletBuilder.addFilterUrlMapping(filterName,\"/*\",type);\n    }\n  }\n  try {\n    this.manager=defaultContainer().addDeployment(servletBuilder);\n    this.manager.deploy();\n    HttpHandler httpHandler=this.manager.start();\n    this.server=Undertow.builder().addHttpListener(0,\"localhost\").setHandler(httpHandler).build();\n  }\n catch (  ServletException ex) {\n    throw new IllegalStateException(ex);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 91,
        "startColumnNumber" : 3,
        "endLineNumber" : 91,
        "endColumnNumber" : 88
      },
      "nodeContext" : "FilterInfo filterInfo=new FilterInfo(filterName,filter.getClass(),filterFactory);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.springframework.web.socket.Filter"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 89,
    "startColumnNumber" : 23,
    "endLineNumber" : 89,
    "endColumnNumber" : 29
  }, {
    "charLength" : 6,
    "startLineNumber" : 90,
    "startColumnNumber" : 67,
    "endLineNumber" : 90,
    "endColumnNumber" : 73
  }, {
    "charLength" : 6,
    "startLineNumber" : 91,
    "startColumnNumber" : 54,
    "endLineNumber" : 91,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}