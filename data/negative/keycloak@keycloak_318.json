{
  "id" : 318,
  "expression" : "\"Test user should have the LDAP_ID attribute set\"",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/LDAPAccountTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Test user should have the LDAP_ID attribute set\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 49,
      "startLineNumber" : 137,
      "startColumnNumber" : 19,
      "endLineNumber" : 137,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 137,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 123
      },
      "nodeContext" : "assertTrue(\"Test user should have the LDAP_ID attribute set\",userRepBefore.getAttributes().containsKey(\"LDAP_ID\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 137,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 124
      },
      "nodeContext" : "assertTrue(\"Test user should have the LDAP_ID attribute set\",userRepBefore.getAttributes().containsKey(\"LDAP_ID\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2925,
        "startLineNumber" : 108,
        "startColumnNumber" : 52,
        "endLineNumber" : 163,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RealmResource testRealm=adminClient.realm(\"test\");\n  assertEquals(getAccountThemeName(),testRealm.toRepresentation().getAccountTheme());\n  UserRepresentation userRepBefore=ApiUtil.findUserByUsername(testRealm,\"keycloak-15634\");\n  assertNull(\"User should not exist\",userRepBefore);\n  testingClient.server().run(session -> {\n    LDAPTestContext ctx=LDAPTestContext.init(session);\n    RealmModel appRealm=ctx.getRealm();\n    LDAPStorageProvider ldapFedProvider=LDAPTestUtils.getLdapProvider(session,ctx.getLdapModel());\n    ldapFedProvider.getModel().put(LDAPConstants.EDIT_MODE,UserStorageProvider.EditMode.UNSYNCED.toString());\n    appRealm.updateComponent(ldapFedProvider.getModel());\n    LDAPObject testUser=LDAPTestUtils.addLDAPUser(ctx.getLdapProvider(),appRealm,\"keycloak-15634\",\"firstName\",\"lastName\",\"keycloak-15634@test.local\",null,\"1234\");\n    LDAPTestUtils.updateLDAPPassword(ctx.getLdapProvider(),testUser,PASSWORD);\n  }\n);\n  userRepBefore=ApiUtil.findUserByUsername(testRealm,\"keycloak-15634\");\n  assertEquals(\"Test user should have an email address set\",\"keycloak-15634@test.local\",userRepBefore.getEmail());\n  assertTrue(\"Test user should have the LDAP_ID attribute set\",userRepBefore.getAttributes().containsKey(\"LDAP_ID\"));\n  assertFalse(\"Test user should not have locale attribute set\",userRepBefore.getAttributes().containsKey(\"locale\"));\n  personalInfoPage.navigateTo();\n  loginPage.assertCurrent();\n  loginPage.form().login(\"keycloak-15634\",\"password\");\n  personalInfoPage.assertCurrent();\n  assertEquals(\"keycloak-15634@test.local\",personalInfoPage.getEmail());\n  personalInfoPage.setEmail(\"keycloak-15634@domain.local\");\n  personalInfoPage.clickSave();\n  UserRepresentation userRepAfter=ApiUtil.findUserByUsername(testRealm,\"keycloak-15634\");\n  assertNotNull(\"Test user should still be there\",userRepAfter);\n  assertEquals(\"Email should have been updated\",\"keycloak-15634@domain.local\",userRepAfter.getEmail());\n  assertTrue(\"LDAP_ID attribute should still be there\",userRepAfter.getAttributes().containsKey(\"LDAP_ID\"));\n  ApiUtil.removeUserByUsername(testRealm,\"keycloak-15634\");\n  testingClient.server().run(session -> {\n    LDAPTestContext ctx=LDAPTestContext.init(session);\n    RealmModel appRealm=ctx.getRealm();\n    LDAPTestUtils.removeAllLDAPUsers(ctx.getLdapProvider(),appRealm);\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 270,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2983,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 163,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void updateProfileWithAttributePresent(){\n  RealmResource testRealm=adminClient.realm(\"test\");\n  assertEquals(getAccountThemeName(),testRealm.toRepresentation().getAccountTheme());\n  UserRepresentation userRepBefore=ApiUtil.findUserByUsername(testRealm,\"keycloak-15634\");\n  assertNull(\"User should not exist\",userRepBefore);\n  testingClient.server().run(session -> {\n    LDAPTestContext ctx=LDAPTestContext.init(session);\n    RealmModel appRealm=ctx.getRealm();\n    LDAPStorageProvider ldapFedProvider=LDAPTestUtils.getLdapProvider(session,ctx.getLdapModel());\n    ldapFedProvider.getModel().put(LDAPConstants.EDIT_MODE,UserStorageProvider.EditMode.UNSYNCED.toString());\n    appRealm.updateComponent(ldapFedProvider.getModel());\n    LDAPObject testUser=LDAPTestUtils.addLDAPUser(ctx.getLdapProvider(),appRealm,\"keycloak-15634\",\"firstName\",\"lastName\",\"keycloak-15634@test.local\",null,\"1234\");\n    LDAPTestUtils.updateLDAPPassword(ctx.getLdapProvider(),testUser,PASSWORD);\n  }\n);\n  userRepBefore=ApiUtil.findUserByUsername(testRealm,\"keycloak-15634\");\n  assertEquals(\"Test user should have an email address set\",\"keycloak-15634@test.local\",userRepBefore.getEmail());\n  assertTrue(\"Test user should have the LDAP_ID attribute set\",userRepBefore.getAttributes().containsKey(\"LDAP_ID\"));\n  assertFalse(\"Test user should not have locale attribute set\",userRepBefore.getAttributes().containsKey(\"locale\"));\n  personalInfoPage.navigateTo();\n  loginPage.assertCurrent();\n  loginPage.form().login(\"keycloak-15634\",\"password\");\n  personalInfoPage.assertCurrent();\n  assertEquals(\"keycloak-15634@test.local\",personalInfoPage.getEmail());\n  personalInfoPage.setEmail(\"keycloak-15634@domain.local\");\n  personalInfoPage.clickSave();\n  UserRepresentation userRepAfter=ApiUtil.findUserByUsername(testRealm,\"keycloak-15634\");\n  assertNotNull(\"Test user should still be there\",userRepAfter);\n  assertEquals(\"Email should have been updated\",\"keycloak-15634@domain.local\",userRepAfter.getEmail());\n  assertTrue(\"LDAP_ID attribute should still be there\",userRepAfter.getAttributes().containsKey(\"LDAP_ID\"));\n  ApiUtil.removeUserByUsername(testRealm,\"keycloak-15634\");\n  testingClient.server().run(session -> {\n    LDAPTestContext ctx=LDAPTestContext.init(session);\n    RealmModel appRealm=ctx.getRealm();\n    LDAPTestUtils.removeAllLDAPUsers(ctx.getLdapProvider(),appRealm);\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 276,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 137,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 124
      },
      "nodeContext" : "assertTrue(\"Test user should have the LDAP_ID attribute set\",userRepBefore.getAttributes().containsKey(\"LDAP_ID\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 9,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 49,
    "startLineNumber" : 137,
    "startColumnNumber" : 19,
    "endLineNumber" : 137,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}