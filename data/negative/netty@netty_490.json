{
  "id" : 490,
  "expression" : "Math",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec/src/main/java/io/netty/handler/codec/compression/SnappyDecompressor.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 120,
      "startColumnNumber" : 36,
      "endLineNumber" : 120,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 120,
        "startColumnNumber" : 36,
        "endLineNumber" : 120,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Math.min(numBytesToSkip,in.readableBytes())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 120,
        "endColumnNumber" : 80
      },
      "nodeContext" : "skipBytes=Math.min(numBytesToSkip,in.readableBytes())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 120,
        "startColumnNumber" : 20,
        "endLineNumber" : 120,
        "endColumnNumber" : 81
      },
      "nodeContext" : "int skipBytes=Math.min(numBytesToSkip,in.readableBytes());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 403,
        "startLineNumber" : 118,
        "startColumnNumber" : 41,
        "endLineNumber" : 126,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int skipBytes=Math.min(numBytesToSkip,in.readableBytes());\n  in.skipBytes(skipBytes);\n  numBytesToSkip-=skipBytes;\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 428,
        "startLineNumber" : 118,
        "startColumnNumber" : 16,
        "endLineNumber" : 126,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (numBytesToSkip != 0) {\n  int skipBytes=Math.min(numBytesToSkip,in.readableBytes());\n  in.skipBytes(skipBytes);\n  numBytesToSkip-=skipBytes;\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7733,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 267,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (state) {\ncase FINISHED:case CORRUPTED:  return Unpooled.EMPTY_BUFFER;\ncase CLOSED:throw new DecompressionException(\"Decompressor closed\");\ncase DECODING:if (numBytesToSkip != 0) {\nint skipBytes=Math.min(numBytesToSkip,in.readableBytes());\nin.skipBytes(skipBytes);\nnumBytesToSkip-=skipBytes;\nreturn null;\n}\nint idx=in.readerIndex();\nfinal int inSize=in.readableBytes();\nif (inSize < 4) {\nreturn null;\n}\nfinal int chunkTypeVal=in.getUnsignedByte(idx);\nfinal ChunkType chunkType=mapChunkType((byte)chunkTypeVal);\nfinal int chunkLength=in.getUnsignedMediumLE(idx + 1);\nswitch (chunkType) {\ncase STREAM_IDENTIFIER:if (chunkLength != SNAPPY_IDENTIFIER_LEN) {\nstreamCorrupted(\"Unexpected length of stream identifier: \" + chunkLength);\n}\nif (inSize < 4 + SNAPPY_IDENTIFIER_LEN) {\nreturn null;\n}\nin.skipBytes(4);\nint offset=in.readerIndex();\nin.skipBytes(SNAPPY_IDENTIFIER_LEN);\ncheckByte(in.getByte(offset++),(byte)'s');\ncheckByte(in.getByte(offset++),(byte)'N');\ncheckByte(in.getByte(offset++),(byte)'a');\ncheckByte(in.getByte(offset++),(byte)'P');\ncheckByte(in.getByte(offset++),(byte)'p');\ncheckByte(in.getByte(offset),(byte)'Y');\nstarted=true;\nreturn null;\ncase RESERVED_SKIPPABLE:if (!started) {\nstreamCorrupted(\"Received RESERVED_SKIPPABLE tag before STREAM_IDENTIFIER\");\n}\nin.skipBytes(4);\nint skipBytes=Math.min(chunkLength,in.readableBytes());\nin.skipBytes(skipBytes);\nif (skipBytes != chunkLength) {\nnumBytesToSkip=chunkLength - skipBytes;\n}\nreturn null;\ncase RESERVED_UNSKIPPABLE:streamCorrupted(\"Found reserved unskippable chunk type: 0x\" + Integer.toHexString(chunkTypeVal));\ncase UNCOMPRESSED_DATA:if (!started) {\nstreamCorrupted(\"Received UNCOMPRESSED_DATA tag before STREAM_IDENTIFIER\");\n}\nif (chunkLength > MAX_UNCOMPRESSED_DATA_SIZE) {\nstreamCorrupted(\"Received UNCOMPRESSED_DATA larger than \" + MAX_UNCOMPRESSED_DATA_SIZE + \" bytes\");\n}\nif (inSize < 4 + chunkLength) {\nreturn null;\n}\nin.skipBytes(4);\nif (validateChecksums) {\nint checksum=in.readIntLE();\ntry {\nvalidateChecksum(checksum,in,in.readerIndex(),chunkLength - 4);\n}\n catch (DecompressionException e) {\nstate=State.CORRUPTED;\nthrow e;\n}\n}\n else {\nin.skipBytes(4);\n}\nreturn in.readRetainedSlice(chunkLength - 4);\ncase COMPRESSED_DATA:if (!started) {\nstreamCorrupted(\"Received COMPRESSED_DATA tag before STREAM_IDENTIFIER\");\n}\nif (chunkLength > MAX_COMPRESSED_CHUNK_SIZE) {\nstreamCorrupted(\"Received COMPRESSED_DATA that contains\" + \" chunk that exceeds \" + MAX_COMPRESSED_CHUNK_SIZE + \" bytes\");\n}\nif (inSize < 4 + chunkLength) {\nreturn null;\n}\nin.skipBytes(4);\nint checksum=in.readIntLE();\nint uncompressedSize=snappy.getPreamble(in);\nif (uncompressedSize > MAX_DECOMPRESSED_DATA_SIZE) {\nstreamCorrupted(\"Received COMPRESSED_DATA that contains\" + \" uncompressed data that exceeds \" + MAX_DECOMPRESSED_DATA_SIZE + \" bytes\");\n}\nByteBuf uncompressed=allocator.buffer(uncompressedSize,MAX_DECOMPRESSED_DATA_SIZE);\ntry {\nif (validateChecksums) {\nint oldWriterIndex=in.writerIndex();\ntry {\nin.writerIndex(in.readerIndex() + chunkLength - 4);\nsnappy.decode(in,uncompressed);\n}\n  finally {\nin.writerIndex(oldWriterIndex);\n}\ntry {\nvalidateChecksum(checksum,uncompressed,0,uncompressed.writerIndex());\n}\n catch (DecompressionException e) {\nstate=State.CORRUPTED;\nthrow e;\n}\n}\n else {\nsnappy.decode(in.readSlice(chunkLength - 4),uncompressed);\n}\nsnappy.reset();\nByteBuf buffer=uncompressed;\nuncompressed=null;\nreturn buffer;\n}\n  finally {\nif (uncompressed != null) {\nuncompressed.release();\n}\n}\ndefault:streamCorrupted(\"Unexpected state\");\nreturn null;\n}\ndefault:throw new IllegalStateException();\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 541,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7751,
        "startLineNumber" : 110,
        "startColumnNumber" : 42,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (state) {\ncase FINISHED:case CORRUPTED:    return Unpooled.EMPTY_BUFFER;\ncase CLOSED:  throw new DecompressionException(\"Decompressor closed\");\ncase DECODING:if (numBytesToSkip != 0) {\n  int skipBytes=Math.min(numBytesToSkip,in.readableBytes());\n  in.skipBytes(skipBytes);\n  numBytesToSkip-=skipBytes;\n  return null;\n}\nint idx=in.readerIndex();\nfinal int inSize=in.readableBytes();\nif (inSize < 4) {\nreturn null;\n}\nfinal int chunkTypeVal=in.getUnsignedByte(idx);\nfinal ChunkType chunkType=mapChunkType((byte)chunkTypeVal);\nfinal int chunkLength=in.getUnsignedMediumLE(idx + 1);\nswitch (chunkType) {\ncase STREAM_IDENTIFIER:if (chunkLength != SNAPPY_IDENTIFIER_LEN) {\nstreamCorrupted(\"Unexpected length of stream identifier: \" + chunkLength);\n}\nif (inSize < 4 + SNAPPY_IDENTIFIER_LEN) {\nreturn null;\n}\nin.skipBytes(4);\nint offset=in.readerIndex();\nin.skipBytes(SNAPPY_IDENTIFIER_LEN);\ncheckByte(in.getByte(offset++),(byte)'s');\ncheckByte(in.getByte(offset++),(byte)'N');\ncheckByte(in.getByte(offset++),(byte)'a');\ncheckByte(in.getByte(offset++),(byte)'P');\ncheckByte(in.getByte(offset++),(byte)'p');\ncheckByte(in.getByte(offset),(byte)'Y');\nstarted=true;\nreturn null;\ncase RESERVED_SKIPPABLE:if (!started) {\nstreamCorrupted(\"Received RESERVED_SKIPPABLE tag before STREAM_IDENTIFIER\");\n}\nin.skipBytes(4);\nint skipBytes=Math.min(chunkLength,in.readableBytes());\nin.skipBytes(skipBytes);\nif (skipBytes != chunkLength) {\nnumBytesToSkip=chunkLength - skipBytes;\n}\nreturn null;\ncase RESERVED_UNSKIPPABLE:streamCorrupted(\"Found reserved unskippable chunk type: 0x\" + Integer.toHexString(chunkTypeVal));\ncase UNCOMPRESSED_DATA:if (!started) {\nstreamCorrupted(\"Received UNCOMPRESSED_DATA tag before STREAM_IDENTIFIER\");\n}\nif (chunkLength > MAX_UNCOMPRESSED_DATA_SIZE) {\nstreamCorrupted(\"Received UNCOMPRESSED_DATA larger than \" + MAX_UNCOMPRESSED_DATA_SIZE + \" bytes\");\n}\nif (inSize < 4 + chunkLength) {\nreturn null;\n}\nin.skipBytes(4);\nif (validateChecksums) {\nint checksum=in.readIntLE();\ntry {\nvalidateChecksum(checksum,in,in.readerIndex(),chunkLength - 4);\n}\n catch (DecompressionException e) {\nstate=State.CORRUPTED;\nthrow e;\n}\n}\n else {\nin.skipBytes(4);\n}\nreturn in.readRetainedSlice(chunkLength - 4);\ncase COMPRESSED_DATA:if (!started) {\nstreamCorrupted(\"Received COMPRESSED_DATA tag before STREAM_IDENTIFIER\");\n}\nif (chunkLength > MAX_COMPRESSED_CHUNK_SIZE) {\nstreamCorrupted(\"Received COMPRESSED_DATA that contains\" + \" chunk that exceeds \" + MAX_COMPRESSED_CHUNK_SIZE + \" bytes\");\n}\nif (inSize < 4 + chunkLength) {\nreturn null;\n}\nin.skipBytes(4);\nint checksum=in.readIntLE();\nint uncompressedSize=snappy.getPreamble(in);\nif (uncompressedSize > MAX_DECOMPRESSED_DATA_SIZE) {\nstreamCorrupted(\"Received COMPRESSED_DATA that contains\" + \" uncompressed data that exceeds \" + MAX_DECOMPRESSED_DATA_SIZE + \" bytes\");\n}\nByteBuf uncompressed=allocator.buffer(uncompressedSize,MAX_DECOMPRESSED_DATA_SIZE);\ntry {\nif (validateChecksums) {\nint oldWriterIndex=in.writerIndex();\ntry {\nin.writerIndex(in.readerIndex() + chunkLength - 4);\nsnappy.decode(in,uncompressed);\n}\n  finally {\nin.writerIndex(oldWriterIndex);\n}\ntry {\nvalidateChecksum(checksum,uncompressed,0,uncompressed.writerIndex());\n}\n catch (DecompressionException e) {\nstate=State.CORRUPTED;\nthrow e;\n}\n}\n else {\nsnappy.decode(in.readSlice(chunkLength - 4),uncompressed);\n}\nsnappy.reset();\nByteBuf buffer=uncompressed;\nuncompressed=null;\nreturn buffer;\n}\n  finally {\nif (uncompressed != null) {\nuncompressed.release();\n}\n}\ndefault:streamCorrupted(\"Unexpected state\");\nreturn null;\n}\ndefault:throw new IllegalStateException();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 542,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7875,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public ByteBuf decompress(ByteBuf in,ByteBufAllocator allocator) throws DecompressionException {\nswitch (state) {\ncase FINISHED:case CORRUPTED:    return Unpooled.EMPTY_BUFFER;\ncase CLOSED:  throw new DecompressionException(\"Decompressor closed\");\ncase DECODING:if (numBytesToSkip != 0) {\n  int skipBytes=Math.min(numBytesToSkip,in.readableBytes());\n  in.skipBytes(skipBytes);\n  numBytesToSkip-=skipBytes;\n  return null;\n}\nint idx=in.readerIndex();\nfinal int inSize=in.readableBytes();\nif (inSize < 4) {\nreturn null;\n}\nfinal int chunkTypeVal=in.getUnsignedByte(idx);\nfinal ChunkType chunkType=mapChunkType((byte)chunkTypeVal);\nfinal int chunkLength=in.getUnsignedMediumLE(idx + 1);\nswitch (chunkType) {\ncase STREAM_IDENTIFIER:if (chunkLength != SNAPPY_IDENTIFIER_LEN) {\nstreamCorrupted(\"Unexpected length of stream identifier: \" + chunkLength);\n}\nif (inSize < 4 + SNAPPY_IDENTIFIER_LEN) {\nreturn null;\n}\nin.skipBytes(4);\nint offset=in.readerIndex();\nin.skipBytes(SNAPPY_IDENTIFIER_LEN);\ncheckByte(in.getByte(offset++),(byte)'s');\ncheckByte(in.getByte(offset++),(byte)'N');\ncheckByte(in.getByte(offset++),(byte)'a');\ncheckByte(in.getByte(offset++),(byte)'P');\ncheckByte(in.getByte(offset++),(byte)'p');\ncheckByte(in.getByte(offset),(byte)'Y');\nstarted=true;\nreturn null;\ncase RESERVED_SKIPPABLE:if (!started) {\nstreamCorrupted(\"Received RESERVED_SKIPPABLE tag before STREAM_IDENTIFIER\");\n}\nin.skipBytes(4);\nint skipBytes=Math.min(chunkLength,in.readableBytes());\nin.skipBytes(skipBytes);\nif (skipBytes != chunkLength) {\nnumBytesToSkip=chunkLength - skipBytes;\n}\nreturn null;\ncase RESERVED_UNSKIPPABLE:streamCorrupted(\"Found reserved unskippable chunk type: 0x\" + Integer.toHexString(chunkTypeVal));\ncase UNCOMPRESSED_DATA:if (!started) {\nstreamCorrupted(\"Received UNCOMPRESSED_DATA tag before STREAM_IDENTIFIER\");\n}\nif (chunkLength > MAX_UNCOMPRESSED_DATA_SIZE) {\nstreamCorrupted(\"Received UNCOMPRESSED_DATA larger than \" + MAX_UNCOMPRESSED_DATA_SIZE + \" bytes\");\n}\nif (inSize < 4 + chunkLength) {\nreturn null;\n}\nin.skipBytes(4);\nif (validateChecksums) {\nint checksum=in.readIntLE();\ntry {\nvalidateChecksum(checksum,in,in.readerIndex(),chunkLength - 4);\n}\n catch (DecompressionException e) {\nstate=State.CORRUPTED;\nthrow e;\n}\n}\n else {\nin.skipBytes(4);\n}\nreturn in.readRetainedSlice(chunkLength - 4);\ncase COMPRESSED_DATA:if (!started) {\nstreamCorrupted(\"Received COMPRESSED_DATA tag before STREAM_IDENTIFIER\");\n}\nif (chunkLength > MAX_COMPRESSED_CHUNK_SIZE) {\nstreamCorrupted(\"Received COMPRESSED_DATA that contains\" + \" chunk that exceeds \" + MAX_COMPRESSED_CHUNK_SIZE + \" bytes\");\n}\nif (inSize < 4 + chunkLength) {\nreturn null;\n}\nin.skipBytes(4);\nint checksum=in.readIntLE();\nint uncompressedSize=snappy.getPreamble(in);\nif (uncompressedSize > MAX_DECOMPRESSED_DATA_SIZE) {\nstreamCorrupted(\"Received COMPRESSED_DATA that contains\" + \" uncompressed data that exceeds \" + MAX_DECOMPRESSED_DATA_SIZE + \" bytes\");\n}\nByteBuf uncompressed=allocator.buffer(uncompressedSize,MAX_DECOMPRESSED_DATA_SIZE);\ntry {\nif (validateChecksums) {\nint oldWriterIndex=in.writerIndex();\ntry {\nin.writerIndex(in.readerIndex() + chunkLength - 4);\nsnappy.decode(in,uncompressed);\n}\n  finally {\nin.writerIndex(oldWriterIndex);\n}\ntry {\nvalidateChecksum(checksum,uncompressed,0,uncompressed.writerIndex());\n}\n catch (DecompressionException e) {\nstate=State.CORRUPTED;\nthrow e;\n}\n}\n else {\nsnappy.decode(in.readSlice(chunkLength - 4),uncompressed);\n}\nsnappy.reset();\nByteBuf buffer=uncompressed;\nuncompressed=null;\nreturn buffer;\n}\n  finally {\nif (uncompressed != null) {\nuncompressed.release();\n}\n}\ndefault:streamCorrupted(\"Unexpected state\");\nreturn null;\n}\ndefault:throw new IllegalStateException();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 120,
        "startColumnNumber" : 20,
        "endLineNumber" : 120,
        "endColumnNumber" : 81
      },
      "nodeContext" : "int skipBytes=Math.min(numBytesToSkip,in.readableBytes());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  }, {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 170,
      "startColumnNumber" : 40,
      "endLineNumber" : 170,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 170,
        "startColumnNumber" : 40,
        "endLineNumber" : 170,
        "endColumnNumber" : 81
      },
      "nodeContext" : "Math.min(chunkLength,in.readableBytes())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 170,
        "startColumnNumber" : 28,
        "endLineNumber" : 170,
        "endColumnNumber" : 81
      },
      "nodeContext" : "skipBytes=Math.min(chunkLength,in.readableBytes())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 170,
        "startColumnNumber" : 24,
        "endLineNumber" : 170,
        "endColumnNumber" : 82
      },
      "nodeContext" : "int skipBytes=Math.min(chunkLength,in.readableBytes());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 6340,
        "startLineNumber" : 140,
        "startColumnNumber" : 16,
        "endLineNumber" : 264,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (chunkType) {\ncase STREAM_IDENTIFIER:  if (chunkLength != SNAPPY_IDENTIFIER_LEN) {\n    streamCorrupted(\"Unexpected length of stream identifier: \" + chunkLength);\n  }\nif (inSize < 4 + SNAPPY_IDENTIFIER_LEN) {\n  return null;\n}\nin.skipBytes(4);\nint offset=in.readerIndex();\nin.skipBytes(SNAPPY_IDENTIFIER_LEN);\ncheckByte(in.getByte(offset++),(byte)'s');\ncheckByte(in.getByte(offset++),(byte)'N');\ncheckByte(in.getByte(offset++),(byte)'a');\ncheckByte(in.getByte(offset++),(byte)'P');\ncheckByte(in.getByte(offset++),(byte)'p');\ncheckByte(in.getByte(offset),(byte)'Y');\nstarted=true;\nreturn null;\ncase RESERVED_SKIPPABLE:if (!started) {\nstreamCorrupted(\"Received RESERVED_SKIPPABLE tag before STREAM_IDENTIFIER\");\n}\nin.skipBytes(4);\nint skipBytes=Math.min(chunkLength,in.readableBytes());\nin.skipBytes(skipBytes);\nif (skipBytes != chunkLength) {\nnumBytesToSkip=chunkLength - skipBytes;\n}\nreturn null;\ncase RESERVED_UNSKIPPABLE:streamCorrupted(\"Found reserved unskippable chunk type: 0x\" + Integer.toHexString(chunkTypeVal));\ncase UNCOMPRESSED_DATA:if (!started) {\nstreamCorrupted(\"Received UNCOMPRESSED_DATA tag before STREAM_IDENTIFIER\");\n}\nif (chunkLength > MAX_UNCOMPRESSED_DATA_SIZE) {\nstreamCorrupted(\"Received UNCOMPRESSED_DATA larger than \" + MAX_UNCOMPRESSED_DATA_SIZE + \" bytes\");\n}\nif (inSize < 4 + chunkLength) {\nreturn null;\n}\nin.skipBytes(4);\nif (validateChecksums) {\nint checksum=in.readIntLE();\ntry {\nvalidateChecksum(checksum,in,in.readerIndex(),chunkLength - 4);\n}\n catch (DecompressionException e) {\nstate=State.CORRUPTED;\nthrow e;\n}\n}\n else {\nin.skipBytes(4);\n}\nreturn in.readRetainedSlice(chunkLength - 4);\ncase COMPRESSED_DATA:if (!started) {\nstreamCorrupted(\"Received COMPRESSED_DATA tag before STREAM_IDENTIFIER\");\n}\nif (chunkLength > MAX_COMPRESSED_CHUNK_SIZE) {\nstreamCorrupted(\"Received COMPRESSED_DATA that contains\" + \" chunk that exceeds \" + MAX_COMPRESSED_CHUNK_SIZE + \" bytes\");\n}\nif (inSize < 4 + chunkLength) {\nreturn null;\n}\nin.skipBytes(4);\nint checksum=in.readIntLE();\nint uncompressedSize=snappy.getPreamble(in);\nif (uncompressedSize > MAX_DECOMPRESSED_DATA_SIZE) {\nstreamCorrupted(\"Received COMPRESSED_DATA that contains\" + \" uncompressed data that exceeds \" + MAX_DECOMPRESSED_DATA_SIZE + \" bytes\");\n}\nByteBuf uncompressed=allocator.buffer(uncompressedSize,MAX_DECOMPRESSED_DATA_SIZE);\ntry {\nif (validateChecksums) {\nint oldWriterIndex=in.writerIndex();\ntry {\nin.writerIndex(in.readerIndex() + chunkLength - 4);\nsnappy.decode(in,uncompressed);\n}\n  finally {\nin.writerIndex(oldWriterIndex);\n}\ntry {\nvalidateChecksum(checksum,uncompressed,0,uncompressed.writerIndex());\n}\n catch (DecompressionException e) {\nstate=State.CORRUPTED;\nthrow e;\n}\n}\n else {\nsnappy.decode(in.readSlice(chunkLength - 4),uncompressed);\n}\nsnappy.reset();\nByteBuf buffer=uncompressed;\nuncompressed=null;\nreturn buffer;\n}\n  finally {\nif (uncompressed != null) {\nuncompressed.release();\n}\n}\ndefault:streamCorrupted(\"Unexpected state\");\nreturn null;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 437,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7733,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 267,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (state) {\ncase FINISHED:case CORRUPTED:  return Unpooled.EMPTY_BUFFER;\ncase CLOSED:throw new DecompressionException(\"Decompressor closed\");\ncase DECODING:if (numBytesToSkip != 0) {\nint skipBytes=Math.min(numBytesToSkip,in.readableBytes());\nin.skipBytes(skipBytes);\nnumBytesToSkip-=skipBytes;\nreturn null;\n}\nint idx=in.readerIndex();\nfinal int inSize=in.readableBytes();\nif (inSize < 4) {\nreturn null;\n}\nfinal int chunkTypeVal=in.getUnsignedByte(idx);\nfinal ChunkType chunkType=mapChunkType((byte)chunkTypeVal);\nfinal int chunkLength=in.getUnsignedMediumLE(idx + 1);\nswitch (chunkType) {\ncase STREAM_IDENTIFIER:if (chunkLength != SNAPPY_IDENTIFIER_LEN) {\nstreamCorrupted(\"Unexpected length of stream identifier: \" + chunkLength);\n}\nif (inSize < 4 + SNAPPY_IDENTIFIER_LEN) {\nreturn null;\n}\nin.skipBytes(4);\nint offset=in.readerIndex();\nin.skipBytes(SNAPPY_IDENTIFIER_LEN);\ncheckByte(in.getByte(offset++),(byte)'s');\ncheckByte(in.getByte(offset++),(byte)'N');\ncheckByte(in.getByte(offset++),(byte)'a');\ncheckByte(in.getByte(offset++),(byte)'P');\ncheckByte(in.getByte(offset++),(byte)'p');\ncheckByte(in.getByte(offset),(byte)'Y');\nstarted=true;\nreturn null;\ncase RESERVED_SKIPPABLE:if (!started) {\nstreamCorrupted(\"Received RESERVED_SKIPPABLE tag before STREAM_IDENTIFIER\");\n}\nin.skipBytes(4);\nint skipBytes=Math.min(chunkLength,in.readableBytes());\nin.skipBytes(skipBytes);\nif (skipBytes != chunkLength) {\nnumBytesToSkip=chunkLength - skipBytes;\n}\nreturn null;\ncase RESERVED_UNSKIPPABLE:streamCorrupted(\"Found reserved unskippable chunk type: 0x\" + Integer.toHexString(chunkTypeVal));\ncase UNCOMPRESSED_DATA:if (!started) {\nstreamCorrupted(\"Received UNCOMPRESSED_DATA tag before STREAM_IDENTIFIER\");\n}\nif (chunkLength > MAX_UNCOMPRESSED_DATA_SIZE) {\nstreamCorrupted(\"Received UNCOMPRESSED_DATA larger than \" + MAX_UNCOMPRESSED_DATA_SIZE + \" bytes\");\n}\nif (inSize < 4 + chunkLength) {\nreturn null;\n}\nin.skipBytes(4);\nif (validateChecksums) {\nint checksum=in.readIntLE();\ntry {\nvalidateChecksum(checksum,in,in.readerIndex(),chunkLength - 4);\n}\n catch (DecompressionException e) {\nstate=State.CORRUPTED;\nthrow e;\n}\n}\n else {\nin.skipBytes(4);\n}\nreturn in.readRetainedSlice(chunkLength - 4);\ncase COMPRESSED_DATA:if (!started) {\nstreamCorrupted(\"Received COMPRESSED_DATA tag before STREAM_IDENTIFIER\");\n}\nif (chunkLength > MAX_COMPRESSED_CHUNK_SIZE) {\nstreamCorrupted(\"Received COMPRESSED_DATA that contains\" + \" chunk that exceeds \" + MAX_COMPRESSED_CHUNK_SIZE + \" bytes\");\n}\nif (inSize < 4 + chunkLength) {\nreturn null;\n}\nin.skipBytes(4);\nint checksum=in.readIntLE();\nint uncompressedSize=snappy.getPreamble(in);\nif (uncompressedSize > MAX_DECOMPRESSED_DATA_SIZE) {\nstreamCorrupted(\"Received COMPRESSED_DATA that contains\" + \" uncompressed data that exceeds \" + MAX_DECOMPRESSED_DATA_SIZE + \" bytes\");\n}\nByteBuf uncompressed=allocator.buffer(uncompressedSize,MAX_DECOMPRESSED_DATA_SIZE);\ntry {\nif (validateChecksums) {\nint oldWriterIndex=in.writerIndex();\ntry {\nin.writerIndex(in.readerIndex() + chunkLength - 4);\nsnappy.decode(in,uncompressed);\n}\n  finally {\nin.writerIndex(oldWriterIndex);\n}\ntry {\nvalidateChecksum(checksum,uncompressed,0,uncompressed.writerIndex());\n}\n catch (DecompressionException e) {\nstate=State.CORRUPTED;\nthrow e;\n}\n}\n else {\nsnappy.decode(in.readSlice(chunkLength - 4),uncompressed);\n}\nsnappy.reset();\nByteBuf buffer=uncompressed;\nuncompressed=null;\nreturn buffer;\n}\n  finally {\nif (uncompressed != null) {\nuncompressed.release();\n}\n}\ndefault:streamCorrupted(\"Unexpected state\");\nreturn null;\n}\ndefault:throw new IllegalStateException();\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 541,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7751,
        "startLineNumber" : 110,
        "startColumnNumber" : 42,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (state) {\ncase FINISHED:case CORRUPTED:    return Unpooled.EMPTY_BUFFER;\ncase CLOSED:  throw new DecompressionException(\"Decompressor closed\");\ncase DECODING:if (numBytesToSkip != 0) {\n  int skipBytes=Math.min(numBytesToSkip,in.readableBytes());\n  in.skipBytes(skipBytes);\n  numBytesToSkip-=skipBytes;\n  return null;\n}\nint idx=in.readerIndex();\nfinal int inSize=in.readableBytes();\nif (inSize < 4) {\nreturn null;\n}\nfinal int chunkTypeVal=in.getUnsignedByte(idx);\nfinal ChunkType chunkType=mapChunkType((byte)chunkTypeVal);\nfinal int chunkLength=in.getUnsignedMediumLE(idx + 1);\nswitch (chunkType) {\ncase STREAM_IDENTIFIER:if (chunkLength != SNAPPY_IDENTIFIER_LEN) {\nstreamCorrupted(\"Unexpected length of stream identifier: \" + chunkLength);\n}\nif (inSize < 4 + SNAPPY_IDENTIFIER_LEN) {\nreturn null;\n}\nin.skipBytes(4);\nint offset=in.readerIndex();\nin.skipBytes(SNAPPY_IDENTIFIER_LEN);\ncheckByte(in.getByte(offset++),(byte)'s');\ncheckByte(in.getByte(offset++),(byte)'N');\ncheckByte(in.getByte(offset++),(byte)'a');\ncheckByte(in.getByte(offset++),(byte)'P');\ncheckByte(in.getByte(offset++),(byte)'p');\ncheckByte(in.getByte(offset),(byte)'Y');\nstarted=true;\nreturn null;\ncase RESERVED_SKIPPABLE:if (!started) {\nstreamCorrupted(\"Received RESERVED_SKIPPABLE tag before STREAM_IDENTIFIER\");\n}\nin.skipBytes(4);\nint skipBytes=Math.min(chunkLength,in.readableBytes());\nin.skipBytes(skipBytes);\nif (skipBytes != chunkLength) {\nnumBytesToSkip=chunkLength - skipBytes;\n}\nreturn null;\ncase RESERVED_UNSKIPPABLE:streamCorrupted(\"Found reserved unskippable chunk type: 0x\" + Integer.toHexString(chunkTypeVal));\ncase UNCOMPRESSED_DATA:if (!started) {\nstreamCorrupted(\"Received UNCOMPRESSED_DATA tag before STREAM_IDENTIFIER\");\n}\nif (chunkLength > MAX_UNCOMPRESSED_DATA_SIZE) {\nstreamCorrupted(\"Received UNCOMPRESSED_DATA larger than \" + MAX_UNCOMPRESSED_DATA_SIZE + \" bytes\");\n}\nif (inSize < 4 + chunkLength) {\nreturn null;\n}\nin.skipBytes(4);\nif (validateChecksums) {\nint checksum=in.readIntLE();\ntry {\nvalidateChecksum(checksum,in,in.readerIndex(),chunkLength - 4);\n}\n catch (DecompressionException e) {\nstate=State.CORRUPTED;\nthrow e;\n}\n}\n else {\nin.skipBytes(4);\n}\nreturn in.readRetainedSlice(chunkLength - 4);\ncase COMPRESSED_DATA:if (!started) {\nstreamCorrupted(\"Received COMPRESSED_DATA tag before STREAM_IDENTIFIER\");\n}\nif (chunkLength > MAX_COMPRESSED_CHUNK_SIZE) {\nstreamCorrupted(\"Received COMPRESSED_DATA that contains\" + \" chunk that exceeds \" + MAX_COMPRESSED_CHUNK_SIZE + \" bytes\");\n}\nif (inSize < 4 + chunkLength) {\nreturn null;\n}\nin.skipBytes(4);\nint checksum=in.readIntLE();\nint uncompressedSize=snappy.getPreamble(in);\nif (uncompressedSize > MAX_DECOMPRESSED_DATA_SIZE) {\nstreamCorrupted(\"Received COMPRESSED_DATA that contains\" + \" uncompressed data that exceeds \" + MAX_DECOMPRESSED_DATA_SIZE + \" bytes\");\n}\nByteBuf uncompressed=allocator.buffer(uncompressedSize,MAX_DECOMPRESSED_DATA_SIZE);\ntry {\nif (validateChecksums) {\nint oldWriterIndex=in.writerIndex();\ntry {\nin.writerIndex(in.readerIndex() + chunkLength - 4);\nsnappy.decode(in,uncompressed);\n}\n  finally {\nin.writerIndex(oldWriterIndex);\n}\ntry {\nvalidateChecksum(checksum,uncompressed,0,uncompressed.writerIndex());\n}\n catch (DecompressionException e) {\nstate=State.CORRUPTED;\nthrow e;\n}\n}\n else {\nsnappy.decode(in.readSlice(chunkLength - 4),uncompressed);\n}\nsnappy.reset();\nByteBuf buffer=uncompressed;\nuncompressed=null;\nreturn buffer;\n}\n  finally {\nif (uncompressed != null) {\nuncompressed.release();\n}\n}\ndefault:streamCorrupted(\"Unexpected state\");\nreturn null;\n}\ndefault:throw new IllegalStateException();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 542,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7875,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public ByteBuf decompress(ByteBuf in,ByteBufAllocator allocator) throws DecompressionException {\nswitch (state) {\ncase FINISHED:case CORRUPTED:    return Unpooled.EMPTY_BUFFER;\ncase CLOSED:  throw new DecompressionException(\"Decompressor closed\");\ncase DECODING:if (numBytesToSkip != 0) {\n  int skipBytes=Math.min(numBytesToSkip,in.readableBytes());\n  in.skipBytes(skipBytes);\n  numBytesToSkip-=skipBytes;\n  return null;\n}\nint idx=in.readerIndex();\nfinal int inSize=in.readableBytes();\nif (inSize < 4) {\nreturn null;\n}\nfinal int chunkTypeVal=in.getUnsignedByte(idx);\nfinal ChunkType chunkType=mapChunkType((byte)chunkTypeVal);\nfinal int chunkLength=in.getUnsignedMediumLE(idx + 1);\nswitch (chunkType) {\ncase STREAM_IDENTIFIER:if (chunkLength != SNAPPY_IDENTIFIER_LEN) {\nstreamCorrupted(\"Unexpected length of stream identifier: \" + chunkLength);\n}\nif (inSize < 4 + SNAPPY_IDENTIFIER_LEN) {\nreturn null;\n}\nin.skipBytes(4);\nint offset=in.readerIndex();\nin.skipBytes(SNAPPY_IDENTIFIER_LEN);\ncheckByte(in.getByte(offset++),(byte)'s');\ncheckByte(in.getByte(offset++),(byte)'N');\ncheckByte(in.getByte(offset++),(byte)'a');\ncheckByte(in.getByte(offset++),(byte)'P');\ncheckByte(in.getByte(offset++),(byte)'p');\ncheckByte(in.getByte(offset),(byte)'Y');\nstarted=true;\nreturn null;\ncase RESERVED_SKIPPABLE:if (!started) {\nstreamCorrupted(\"Received RESERVED_SKIPPABLE tag before STREAM_IDENTIFIER\");\n}\nin.skipBytes(4);\nint skipBytes=Math.min(chunkLength,in.readableBytes());\nin.skipBytes(skipBytes);\nif (skipBytes != chunkLength) {\nnumBytesToSkip=chunkLength - skipBytes;\n}\nreturn null;\ncase RESERVED_UNSKIPPABLE:streamCorrupted(\"Found reserved unskippable chunk type: 0x\" + Integer.toHexString(chunkTypeVal));\ncase UNCOMPRESSED_DATA:if (!started) {\nstreamCorrupted(\"Received UNCOMPRESSED_DATA tag before STREAM_IDENTIFIER\");\n}\nif (chunkLength > MAX_UNCOMPRESSED_DATA_SIZE) {\nstreamCorrupted(\"Received UNCOMPRESSED_DATA larger than \" + MAX_UNCOMPRESSED_DATA_SIZE + \" bytes\");\n}\nif (inSize < 4 + chunkLength) {\nreturn null;\n}\nin.skipBytes(4);\nif (validateChecksums) {\nint checksum=in.readIntLE();\ntry {\nvalidateChecksum(checksum,in,in.readerIndex(),chunkLength - 4);\n}\n catch (DecompressionException e) {\nstate=State.CORRUPTED;\nthrow e;\n}\n}\n else {\nin.skipBytes(4);\n}\nreturn in.readRetainedSlice(chunkLength - 4);\ncase COMPRESSED_DATA:if (!started) {\nstreamCorrupted(\"Received COMPRESSED_DATA tag before STREAM_IDENTIFIER\");\n}\nif (chunkLength > MAX_COMPRESSED_CHUNK_SIZE) {\nstreamCorrupted(\"Received COMPRESSED_DATA that contains\" + \" chunk that exceeds \" + MAX_COMPRESSED_CHUNK_SIZE + \" bytes\");\n}\nif (inSize < 4 + chunkLength) {\nreturn null;\n}\nin.skipBytes(4);\nint checksum=in.readIntLE();\nint uncompressedSize=snappy.getPreamble(in);\nif (uncompressedSize > MAX_DECOMPRESSED_DATA_SIZE) {\nstreamCorrupted(\"Received COMPRESSED_DATA that contains\" + \" uncompressed data that exceeds \" + MAX_DECOMPRESSED_DATA_SIZE + \" bytes\");\n}\nByteBuf uncompressed=allocator.buffer(uncompressedSize,MAX_DECOMPRESSED_DATA_SIZE);\ntry {\nif (validateChecksums) {\nint oldWriterIndex=in.writerIndex();\ntry {\nin.writerIndex(in.readerIndex() + chunkLength - 4);\nsnappy.decode(in,uncompressed);\n}\n  finally {\nin.writerIndex(oldWriterIndex);\n}\ntry {\nvalidateChecksum(checksum,uncompressed,0,uncompressed.writerIndex());\n}\n catch (DecompressionException e) {\nstate=State.CORRUPTED;\nthrow e;\n}\n}\n else {\nsnappy.decode(in.readSlice(chunkLength - 4),uncompressed);\n}\nsnappy.reset();\nByteBuf buffer=uncompressed;\nuncompressed=null;\nreturn buffer;\n}\n  finally {\nif (uncompressed != null) {\nuncompressed.release();\n}\n}\ndefault:streamCorrupted(\"Unexpected state\");\nreturn null;\n}\ndefault:throw new IllegalStateException();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 170,
        "startColumnNumber" : 24,
        "endLineNumber" : 170,
        "endColumnNumber" : 82
      },
      "nodeContext" : "int skipBytes=Math.min(chunkLength,in.readableBytes());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 120,
    "startColumnNumber" : 36,
    "endLineNumber" : 120,
    "endColumnNumber" : 40
  }, {
    "charLength" : 4,
    "startLineNumber" : 170,
    "startColumnNumber" : 40,
    "endLineNumber" : 170,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}