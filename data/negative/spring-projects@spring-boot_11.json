{
  "id" : 11,
  "expression" : "zipStream.getNextEntry()",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "44299bb9808d0dc21a9bfc1c0c47e1539e00856d",
  "filePath" : "/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerator.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "zipStream.getNextEntry()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 119,
      "startColumnNumber" : 19,
      "endLineNumber" : 119,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 119,
        "startColumnNumber" : 11,
        "endLineNumber" : 119,
        "endColumnNumber" : 43
      },
      "nodeContext" : "entry=zipStream.getNextEntry()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 119,
        "startColumnNumber" : 2,
        "endLineNumber" : 119,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ZipEntry entry=zipStream.getNextEntry();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 118,
        "startColumnNumber" : 41,
        "endLineNumber" : 138,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ZipEntry entry=zipStream.getNextEntry();\n  while (entry != null) {\n    File file=new File(outputFolder,entry.getName());\n    if (file.exists() && !overwrite) {\n      throw new ReportableException((file.isDirectory() ? \"Directory\" : \"File\") + \" '\" + file.getName()+ \"' already exists. Use --force if you want to overwrite or \"+ \"specify an alternate location.\");\n    }\n    if (!entry.isDirectory()) {\n      FileCopyUtils.copy(StreamUtils.nonClosing(zipStream),new FileOutputStream(file));\n    }\n else {\n      file.mkdir();\n    }\n    zipStream.closeEntry();\n    entry=zipStream.getNextEntry();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 741,
        "startLineNumber" : 117,
        "startColumnNumber" : 1,
        "endLineNumber" : 138,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void extractFromStream(ZipInputStream zipStream,boolean overwrite,File outputFolder) throws IOException {\n  ZipEntry entry=zipStream.getNextEntry();\n  while (entry != null) {\n    File file=new File(outputFolder,entry.getName());\n    if (file.exists() && !overwrite) {\n      throw new ReportableException((file.isDirectory() ? \"Directory\" : \"File\") + \" '\" + file.getName()+ \"' already exists. Use --force if you want to overwrite or \"+ \"specify an alternate location.\");\n    }\n    if (!entry.isDirectory()) {\n      FileCopyUtils.copy(StreamUtils.nonClosing(zipStream),new FileOutputStream(file));\n    }\n else {\n      file.mkdir();\n    }\n    zipStream.closeEntry();\n    entry=zipStream.getNextEntry();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 102,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 119,
        "startColumnNumber" : 2,
        "endLineNumber" : 119,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ZipEntry entry=zipStream.getNextEntry();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.zip.ZipEntry"
  }, {
    "nodeContext" : "zipStream.getNextEntry()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 136,
      "startColumnNumber" : 11,
      "endLineNumber" : 136,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 136,
        "startColumnNumber" : 3,
        "endLineNumber" : 136,
        "endColumnNumber" : 35
      },
      "nodeContext" : "entry=zipStream.getNextEntry()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 136,
        "startColumnNumber" : 3,
        "endLineNumber" : 136,
        "endColumnNumber" : 36
      },
      "nodeContext" : "entry=zipStream.getNextEntry();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  File file=new File(outputFolder,entry.getName());\n  if (file.exists() && !overwrite) {\n    throw new ReportableException((file.isDirectory() ? \"Directory\" : \"File\") + \" '\" + file.getName()+ \"' already exists. Use --force if you want to overwrite or \"+ \"specify an alternate location.\");\n  }\n  if (!entry.isDirectory()) {\n    FileCopyUtils.copy(StreamUtils.nonClosing(zipStream),new FileOutputStream(file));\n  }\n else {\n    file.mkdir();\n  }\n  zipStream.closeEntry();\n  entry=zipStream.getNextEntry();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 120,
        "startColumnNumber" : 2,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (entry != null) {\n  File file=new File(outputFolder,entry.getName());\n  if (file.exists() && !overwrite) {\n    throw new ReportableException((file.isDirectory() ? \"Directory\" : \"File\") + \" '\" + file.getName()+ \"' already exists. Use --force if you want to overwrite or \"+ \"specify an alternate location.\");\n  }\n  if (!entry.isDirectory()) {\n    FileCopyUtils.copy(StreamUtils.nonClosing(zipStream),new FileOutputStream(file));\n  }\n else {\n    file.mkdir();\n  }\n  zipStream.closeEntry();\n  entry=zipStream.getNextEntry();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 76,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 118,
        "startColumnNumber" : 41,
        "endLineNumber" : 138,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ZipEntry entry=zipStream.getNextEntry();\n  while (entry != null) {\n    File file=new File(outputFolder,entry.getName());\n    if (file.exists() && !overwrite) {\n      throw new ReportableException((file.isDirectory() ? \"Directory\" : \"File\") + \" '\" + file.getName()+ \"' already exists. Use --force if you want to overwrite or \"+ \"specify an alternate location.\");\n    }\n    if (!entry.isDirectory()) {\n      FileCopyUtils.copy(StreamUtils.nonClosing(zipStream),new FileOutputStream(file));\n    }\n else {\n      file.mkdir();\n    }\n    zipStream.closeEntry();\n    entry=zipStream.getNextEntry();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 741,
        "startLineNumber" : 117,
        "startColumnNumber" : 1,
        "endLineNumber" : 138,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void extractFromStream(ZipInputStream zipStream,boolean overwrite,File outputFolder) throws IOException {\n  ZipEntry entry=zipStream.getNextEntry();\n  while (entry != null) {\n    File file=new File(outputFolder,entry.getName());\n    if (file.exists() && !overwrite) {\n      throw new ReportableException((file.isDirectory() ? \"Directory\" : \"File\") + \" '\" + file.getName()+ \"' already exists. Use --force if you want to overwrite or \"+ \"specify an alternate location.\");\n    }\n    if (!entry.isDirectory()) {\n      FileCopyUtils.copy(StreamUtils.nonClosing(zipStream),new FileOutputStream(file));\n    }\n else {\n      file.mkdir();\n    }\n    zipStream.closeEntry();\n    entry=zipStream.getNextEntry();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 102,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 136,
        "startColumnNumber" : 3,
        "endLineNumber" : 136,
        "endColumnNumber" : 36
      },
      "nodeContext" : "entry=zipStream.getNextEntry();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.zip.ZipEntry"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 119,
    "startColumnNumber" : 19,
    "endLineNumber" : 119,
    "endColumnNumber" : 43
  }, {
    "charLength" : 24,
    "startLineNumber" : 136,
    "startColumnNumber" : 11,
    "endLineNumber" : 136,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}