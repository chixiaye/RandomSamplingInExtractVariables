{
  "id" : 464,
  "expression" : "out.produce()",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/test/java/org/mockitousage/misuse/SpyStubbingMisuseTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "out.produce()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 23,
      "startColumnNumber" : 17,
      "endLineNumber" : 23,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 23,
        "startColumnNumber" : 12,
        "endLineNumber" : 23,
        "endColumnNumber" : 31
      },
      "nodeContext" : "when(out.produce())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 23,
        "startColumnNumber" : 12,
        "endLineNumber" : 23,
        "endColumnNumber" : 48
      },
      "nodeContext" : "when(out.produce()).thenReturn(mpoo)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 23,
        "startColumnNumber" : 12,
        "endLineNumber" : 23,
        "endColumnNumber" : 49
      },
      "nodeContext" : "when(out.produce()).thenReturn(mpoo);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 22,
        "startColumnNumber" : 12,
        "endLineNumber" : 25,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  when(out.produce()).thenReturn(mpoo);\n  fail();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 303,
        "startLineNumber" : 22,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  when(out.produce()).thenReturn(mpoo);\n  fail();\n}\n catch (WrongTypeOfReturnValue e) {\n  assertThat(e.getMessage()).contains(\"spy\").contains(\"syntax\").contains(\"doReturn|Throw\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 35,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 464,
        "startLineNumber" : 17,
        "startColumnNumber" : 33,
        "endLineNumber" : 31,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Strategy mfoo=mock(Strategy.class);\n  Sampler mpoo=mock(Sampler.class);\n  Producer out=spy(new Producer(mfoo));\n  try {\n    when(out.produce()).thenReturn(mpoo);\n    fail();\n  }\n catch (  WrongTypeOfReturnValue e) {\n    assertThat(e.getMessage()).contains(\"spy\").contains(\"syntax\").contains(\"doReturn|Throw\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 504,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 31,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void nestedWhenTest(){\n  Strategy mfoo=mock(Strategy.class);\n  Sampler mpoo=mock(Sampler.class);\n  Producer out=spy(new Producer(mfoo));\n  try {\n    when(out.produce()).thenReturn(mpoo);\n    fail();\n  }\n catch (  WrongTypeOfReturnValue e) {\n    assertThat(e.getMessage()).contains(\"spy\").contains(\"syntax\").contains(\"doReturn|Throw\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 73,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 23,
        "startColumnNumber" : 12,
        "endLineNumber" : 23,
        "endColumnNumber" : 49
      },
      "nodeContext" : "when(out.produce()).thenReturn(mpoo);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.mockitousage.misuse.SpyStubbingMisuseTest.Sampler"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 23,
    "startColumnNumber" : 17,
    "endLineNumber" : 23,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ ]
}