{
  "id" : 199,
  "expression" : "i < N",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/schema/PartitionedTopicsSchemaTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < N",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 72,
      "startColumnNumber" : 24,
      "endLineNumber" : 72,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < N; i++) {\n  producer.send(\"Hello-\" + i);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2143,
        "startLineNumber" : 46,
        "startColumnNumber" : 62,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  admin.namespaces().createNamespace(\"prop/my-test\",Collections.singleton(\"usc\"));\n  String topicName=\"prop/my-test/my-topic\";\n  admin.topics().createPartitionedTopic(topicName,16);\n  int N=10;\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getBrokerServiceUrl()).build();\n  CompletableFuture<Producer<String>> producerFuture=client.newProducer(Schema.STRING).topic(topicName).createAsync();\n  CompletableFuture<Consumer<String>> consumerFuture=client.newConsumer(Schema.STRING).topic(topicName).subscriptionName(\"sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribeAsync();\n  CompletableFuture.allOf(producerFuture,consumerFuture).get();\n  Producer<String> producer=producerFuture.get();\n  Consumer<String> consumer=consumerFuture.get();\n  for (int i=0; i < N; i++) {\n    producer.send(\"Hello-\" + i);\n  }\n  consumer.close();\n  producer.close();\n  admin.namespaces().unload(\"prop/my-test\");\n  producerFuture=client.newProducer(Schema.STRING).topic(topicName).createAsync();\n  consumerFuture=client.newConsumer(Schema.STRING).topic(topicName).subscriptionName(\"sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribeAsync();\n  CompletableFuture.allOf(producerFuture,consumerFuture).get();\n  consumer=consumerFuture.get();\n  Set<String> messages=new TreeSet<>();\n  for (int i=0; i < N; i++) {\n    Message<String> msg=consumer.receive();\n    messages.add(msg.getValue());\n    consumer.acknowledge(msg);\n  }\n  assertEquals(messages.size(),N);\n  for (int i=0; i < N; i++) {\n    assertTrue(messages.contains(\"Hello-\" + i));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2310,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test that sequence id from a producer is correct when there are send errors\n */\n@Test public void partitionedTopicWithSchema() throws Exception {\n  admin.namespaces().createNamespace(\"prop/my-test\",Collections.singleton(\"usc\"));\n  String topicName=\"prop/my-test/my-topic\";\n  admin.topics().createPartitionedTopic(topicName,16);\n  int N=10;\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getBrokerServiceUrl()).build();\n  CompletableFuture<Producer<String>> producerFuture=client.newProducer(Schema.STRING).topic(topicName).createAsync();\n  CompletableFuture<Consumer<String>> consumerFuture=client.newConsumer(Schema.STRING).topic(topicName).subscriptionName(\"sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribeAsync();\n  CompletableFuture.allOf(producerFuture,consumerFuture).get();\n  Producer<String> producer=producerFuture.get();\n  Consumer<String> consumer=consumerFuture.get();\n  for (int i=0; i < N; i++) {\n    producer.send(\"Hello-\" + i);\n  }\n  consumer.close();\n  producer.close();\n  admin.namespaces().unload(\"prop/my-test\");\n  producerFuture=client.newProducer(Schema.STRING).topic(topicName).createAsync();\n  consumerFuture=client.newConsumer(Schema.STRING).topic(topicName).subscriptionName(\"sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribeAsync();\n  CompletableFuture.allOf(producerFuture,consumerFuture).get();\n  consumer=consumerFuture.get();\n  Set<String> messages=new TreeSet<>();\n  for (int i=0; i < N; i++) {\n    Message<String> msg=consumer.receive();\n    messages.add(msg.getValue());\n    consumer.acknowledge(msg);\n  }\n  assertEquals(messages.size(),N);\n  for (int i=0; i < N; i++) {\n    assertTrue(messages.contains(\"Hello-\" + i));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < N; i++) {\n  producer.send(\"Hello-\" + i);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "i < N",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 98,
      "startColumnNumber" : 24,
      "endLineNumber" : 98,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < N; i++) {\n  Message<String> msg=consumer.receive();\n  messages.add(msg.getValue());\n  consumer.acknowledge(msg);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2143,
        "startLineNumber" : 46,
        "startColumnNumber" : 62,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  admin.namespaces().createNamespace(\"prop/my-test\",Collections.singleton(\"usc\"));\n  String topicName=\"prop/my-test/my-topic\";\n  admin.topics().createPartitionedTopic(topicName,16);\n  int N=10;\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getBrokerServiceUrl()).build();\n  CompletableFuture<Producer<String>> producerFuture=client.newProducer(Schema.STRING).topic(topicName).createAsync();\n  CompletableFuture<Consumer<String>> consumerFuture=client.newConsumer(Schema.STRING).topic(topicName).subscriptionName(\"sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribeAsync();\n  CompletableFuture.allOf(producerFuture,consumerFuture).get();\n  Producer<String> producer=producerFuture.get();\n  Consumer<String> consumer=consumerFuture.get();\n  for (int i=0; i < N; i++) {\n    producer.send(\"Hello-\" + i);\n  }\n  consumer.close();\n  producer.close();\n  admin.namespaces().unload(\"prop/my-test\");\n  producerFuture=client.newProducer(Schema.STRING).topic(topicName).createAsync();\n  consumerFuture=client.newConsumer(Schema.STRING).topic(topicName).subscriptionName(\"sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribeAsync();\n  CompletableFuture.allOf(producerFuture,consumerFuture).get();\n  consumer=consumerFuture.get();\n  Set<String> messages=new TreeSet<>();\n  for (int i=0; i < N; i++) {\n    Message<String> msg=consumer.receive();\n    messages.add(msg.getValue());\n    consumer.acknowledge(msg);\n  }\n  assertEquals(messages.size(),N);\n  for (int i=0; i < N; i++) {\n    assertTrue(messages.contains(\"Hello-\" + i));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2310,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test that sequence id from a producer is correct when there are send errors\n */\n@Test public void partitionedTopicWithSchema() throws Exception {\n  admin.namespaces().createNamespace(\"prop/my-test\",Collections.singleton(\"usc\"));\n  String topicName=\"prop/my-test/my-topic\";\n  admin.topics().createPartitionedTopic(topicName,16);\n  int N=10;\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getBrokerServiceUrl()).build();\n  CompletableFuture<Producer<String>> producerFuture=client.newProducer(Schema.STRING).topic(topicName).createAsync();\n  CompletableFuture<Consumer<String>> consumerFuture=client.newConsumer(Schema.STRING).topic(topicName).subscriptionName(\"sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribeAsync();\n  CompletableFuture.allOf(producerFuture,consumerFuture).get();\n  Producer<String> producer=producerFuture.get();\n  Consumer<String> consumer=consumerFuture.get();\n  for (int i=0; i < N; i++) {\n    producer.send(\"Hello-\" + i);\n  }\n  consumer.close();\n  producer.close();\n  admin.namespaces().unload(\"prop/my-test\");\n  producerFuture=client.newProducer(Schema.STRING).topic(topicName).createAsync();\n  consumerFuture=client.newConsumer(Schema.STRING).topic(topicName).subscriptionName(\"sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribeAsync();\n  CompletableFuture.allOf(producerFuture,consumerFuture).get();\n  consumer=consumerFuture.get();\n  Set<String> messages=new TreeSet<>();\n  for (int i=0; i < N; i++) {\n    Message<String> msg=consumer.receive();\n    messages.add(msg.getValue());\n    consumer.acknowledge(msg);\n  }\n  assertEquals(messages.size(),N);\n  for (int i=0; i < N; i++) {\n    assertTrue(messages.contains(\"Hello-\" + i));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < N; i++) {\n  Message<String> msg=consumer.receive();\n  messages.add(msg.getValue());\n  consumer.acknowledge(msg);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "i < N",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 105,
      "startColumnNumber" : 24,
      "endLineNumber" : 105,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < N; i++) {\n  assertTrue(messages.contains(\"Hello-\" + i));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2143,
        "startLineNumber" : 46,
        "startColumnNumber" : 62,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  admin.namespaces().createNamespace(\"prop/my-test\",Collections.singleton(\"usc\"));\n  String topicName=\"prop/my-test/my-topic\";\n  admin.topics().createPartitionedTopic(topicName,16);\n  int N=10;\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getBrokerServiceUrl()).build();\n  CompletableFuture<Producer<String>> producerFuture=client.newProducer(Schema.STRING).topic(topicName).createAsync();\n  CompletableFuture<Consumer<String>> consumerFuture=client.newConsumer(Schema.STRING).topic(topicName).subscriptionName(\"sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribeAsync();\n  CompletableFuture.allOf(producerFuture,consumerFuture).get();\n  Producer<String> producer=producerFuture.get();\n  Consumer<String> consumer=consumerFuture.get();\n  for (int i=0; i < N; i++) {\n    producer.send(\"Hello-\" + i);\n  }\n  consumer.close();\n  producer.close();\n  admin.namespaces().unload(\"prop/my-test\");\n  producerFuture=client.newProducer(Schema.STRING).topic(topicName).createAsync();\n  consumerFuture=client.newConsumer(Schema.STRING).topic(topicName).subscriptionName(\"sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribeAsync();\n  CompletableFuture.allOf(producerFuture,consumerFuture).get();\n  consumer=consumerFuture.get();\n  Set<String> messages=new TreeSet<>();\n  for (int i=0; i < N; i++) {\n    Message<String> msg=consumer.receive();\n    messages.add(msg.getValue());\n    consumer.acknowledge(msg);\n  }\n  assertEquals(messages.size(),N);\n  for (int i=0; i < N; i++) {\n    assertTrue(messages.contains(\"Hello-\" + i));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2310,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test that sequence id from a producer is correct when there are send errors\n */\n@Test public void partitionedTopicWithSchema() throws Exception {\n  admin.namespaces().createNamespace(\"prop/my-test\",Collections.singleton(\"usc\"));\n  String topicName=\"prop/my-test/my-topic\";\n  admin.topics().createPartitionedTopic(topicName,16);\n  int N=10;\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getBrokerServiceUrl()).build();\n  CompletableFuture<Producer<String>> producerFuture=client.newProducer(Schema.STRING).topic(topicName).createAsync();\n  CompletableFuture<Consumer<String>> consumerFuture=client.newConsumer(Schema.STRING).topic(topicName).subscriptionName(\"sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribeAsync();\n  CompletableFuture.allOf(producerFuture,consumerFuture).get();\n  Producer<String> producer=producerFuture.get();\n  Consumer<String> consumer=consumerFuture.get();\n  for (int i=0; i < N; i++) {\n    producer.send(\"Hello-\" + i);\n  }\n  consumer.close();\n  producer.close();\n  admin.namespaces().unload(\"prop/my-test\");\n  producerFuture=client.newProducer(Schema.STRING).topic(topicName).createAsync();\n  consumerFuture=client.newConsumer(Schema.STRING).topic(topicName).subscriptionName(\"sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribeAsync();\n  CompletableFuture.allOf(producerFuture,consumerFuture).get();\n  consumer=consumerFuture.get();\n  Set<String> messages=new TreeSet<>();\n  for (int i=0; i < N; i++) {\n    Message<String> msg=consumer.receive();\n    messages.add(msg.getValue());\n    consumer.acknowledge(msg);\n  }\n  assertEquals(messages.size(),N);\n  for (int i=0; i < N; i++) {\n    assertTrue(messages.contains(\"Hello-\" + i));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < N; i++) {\n  assertTrue(messages.contains(\"Hello-\" + i));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 72,
    "startColumnNumber" : 24,
    "endLineNumber" : 72,
    "endColumnNumber" : 29
  }, {
    "charLength" : 5,
    "startLineNumber" : 98,
    "startColumnNumber" : 24,
    "endLineNumber" : 98,
    "endColumnNumber" : 29
  }, {
    "charLength" : 5,
    "startLineNumber" : 105,
    "startColumnNumber" : 24,
    "endLineNumber" : 105,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  } ]
}