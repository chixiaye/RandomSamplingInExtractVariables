{
  "id" : 249,
  "expression" : "101",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/persistent/MessageRedeliveryControllerTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "101",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 97,
      "startColumnNumber" : 40,
      "endLineNumber" : 97,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 97,
        "startColumnNumber" : 19,
        "endLineNumber" : 97,
        "endColumnNumber" : 44
      },
      "nodeContext" : "controller.add(2,2,101)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertTrue(controller.add(2,2,101))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertTrue(controller.add(2,2,101));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4657,
        "startLineNumber" : 46,
        "startColumnNumber" : 83,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MessageRedeliveryController controller=new MessageRedeliveryController(allowOutOfOrderDelivery);\n  Field messagesToRedeliverField=MessageRedeliveryController.class.getDeclaredField(\"messagesToRedeliver\");\n  messagesToRedeliverField.setAccessible(true);\n  LongPairSet messagesToRedeliver=(LongPairSet)messagesToRedeliverField.get(controller);\n  Field hashesToBeBlockedField=MessageRedeliveryController.class.getDeclaredField(\"hashesToBeBlocked\");\n  hashesToBeBlockedField.setAccessible(true);\n  ConcurrentLongLongPairHashMap hashesToBeBlocked=(ConcurrentLongLongPairHashMap)hashesToBeBlockedField.get(controller);\n  if (allowOutOfOrderDelivery) {\n    assertNull(hashesToBeBlocked);\n  }\n else {\n    assertNotNull(hashesToBeBlocked);\n  }\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(1,1));\n  assertTrue(controller.add(1,2));\n  assertFalse(controller.add(1,1));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),2);\n  assertTrue(messagesToRedeliver.contains(1,1));\n  assertTrue(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertFalse(hashesToBeBlocked.containsKey(1,1));\n    assertFalse(hashesToBeBlocked.containsKey(1,2));\n  }\n  assertTrue(controller.remove(1,1));\n  assertTrue(controller.remove(1,2));\n  assertFalse(controller.remove(1,1));\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertFalse(messagesToRedeliver.contains(1,1));\n  assertFalse(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(2,1,100));\n  assertTrue(controller.add(2,2,101));\n  assertTrue(controller.add(2,3,101));\n  assertFalse(controller.add(2,1,100));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),3);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(2,3));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),3);\n    assertEquals(hashesToBeBlocked.get(2,1).first,100);\n    assertEquals(hashesToBeBlocked.get(2,2).first,101);\n    assertEquals(hashesToBeBlocked.get(2,3).first,101);\n  }\n  controller.clear();\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertTrue(messagesToRedeliver.isEmpty());\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertTrue(hashesToBeBlocked.isEmpty());\n  }\n  controller.add(2,2,201);\n  controller.add(1,3,100);\n  controller.add(3,1,300);\n  controller.add(2,1,200);\n  controller.add(3,2,301);\n  controller.add(1,2,101);\n  controller.add(1,1,100);\n  controller.removeAllUpTo(1,3);\n  assertEquals(messagesToRedeliver.size(),4);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(3,1));\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),4);\n    assertEquals(hashesToBeBlocked.get(2,1).first,200);\n    assertEquals(hashesToBeBlocked.get(2,2).first,201);\n    assertEquals(hashesToBeBlocked.get(3,1).first,300);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(3,1);\n  assertEquals(messagesToRedeliver.size(),1);\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),1);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(5,10);\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 625,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4805,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"allowOutOfOrderDelivery\",timeOut=10000) public void testAddAndRemove(boolean allowOutOfOrderDelivery) throws Exception {\n  MessageRedeliveryController controller=new MessageRedeliveryController(allowOutOfOrderDelivery);\n  Field messagesToRedeliverField=MessageRedeliveryController.class.getDeclaredField(\"messagesToRedeliver\");\n  messagesToRedeliverField.setAccessible(true);\n  LongPairSet messagesToRedeliver=(LongPairSet)messagesToRedeliverField.get(controller);\n  Field hashesToBeBlockedField=MessageRedeliveryController.class.getDeclaredField(\"hashesToBeBlocked\");\n  hashesToBeBlockedField.setAccessible(true);\n  ConcurrentLongLongPairHashMap hashesToBeBlocked=(ConcurrentLongLongPairHashMap)hashesToBeBlockedField.get(controller);\n  if (allowOutOfOrderDelivery) {\n    assertNull(hashesToBeBlocked);\n  }\n else {\n    assertNotNull(hashesToBeBlocked);\n  }\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(1,1));\n  assertTrue(controller.add(1,2));\n  assertFalse(controller.add(1,1));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),2);\n  assertTrue(messagesToRedeliver.contains(1,1));\n  assertTrue(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertFalse(hashesToBeBlocked.containsKey(1,1));\n    assertFalse(hashesToBeBlocked.containsKey(1,2));\n  }\n  assertTrue(controller.remove(1,1));\n  assertTrue(controller.remove(1,2));\n  assertFalse(controller.remove(1,1));\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertFalse(messagesToRedeliver.contains(1,1));\n  assertFalse(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(2,1,100));\n  assertTrue(controller.add(2,2,101));\n  assertTrue(controller.add(2,3,101));\n  assertFalse(controller.add(2,1,100));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),3);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(2,3));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),3);\n    assertEquals(hashesToBeBlocked.get(2,1).first,100);\n    assertEquals(hashesToBeBlocked.get(2,2).first,101);\n    assertEquals(hashesToBeBlocked.get(2,3).first,101);\n  }\n  controller.clear();\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertTrue(messagesToRedeliver.isEmpty());\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertTrue(hashesToBeBlocked.isEmpty());\n  }\n  controller.add(2,2,201);\n  controller.add(1,3,100);\n  controller.add(3,1,300);\n  controller.add(2,1,200);\n  controller.add(3,2,301);\n  controller.add(1,2,101);\n  controller.add(1,1,100);\n  controller.removeAllUpTo(1,3);\n  assertEquals(messagesToRedeliver.size(),4);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(3,1));\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),4);\n    assertEquals(hashesToBeBlocked.get(2,1).first,200);\n    assertEquals(hashesToBeBlocked.get(2,2).first,201);\n    assertEquals(hashesToBeBlocked.get(3,1).first,300);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(3,1);\n  assertEquals(messagesToRedeliver.size(),1);\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),1);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(5,10);\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 642,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertTrue(controller.add(2,2,101));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "101",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 98,
      "startColumnNumber" : 40,
      "endLineNumber" : 98,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 98,
        "startColumnNumber" : 19,
        "endLineNumber" : 98,
        "endColumnNumber" : 44
      },
      "nodeContext" : "controller.add(2,3,101)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertTrue(controller.add(2,3,101))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertTrue(controller.add(2,3,101));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4657,
        "startLineNumber" : 46,
        "startColumnNumber" : 83,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MessageRedeliveryController controller=new MessageRedeliveryController(allowOutOfOrderDelivery);\n  Field messagesToRedeliverField=MessageRedeliveryController.class.getDeclaredField(\"messagesToRedeliver\");\n  messagesToRedeliverField.setAccessible(true);\n  LongPairSet messagesToRedeliver=(LongPairSet)messagesToRedeliverField.get(controller);\n  Field hashesToBeBlockedField=MessageRedeliveryController.class.getDeclaredField(\"hashesToBeBlocked\");\n  hashesToBeBlockedField.setAccessible(true);\n  ConcurrentLongLongPairHashMap hashesToBeBlocked=(ConcurrentLongLongPairHashMap)hashesToBeBlockedField.get(controller);\n  if (allowOutOfOrderDelivery) {\n    assertNull(hashesToBeBlocked);\n  }\n else {\n    assertNotNull(hashesToBeBlocked);\n  }\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(1,1));\n  assertTrue(controller.add(1,2));\n  assertFalse(controller.add(1,1));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),2);\n  assertTrue(messagesToRedeliver.contains(1,1));\n  assertTrue(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertFalse(hashesToBeBlocked.containsKey(1,1));\n    assertFalse(hashesToBeBlocked.containsKey(1,2));\n  }\n  assertTrue(controller.remove(1,1));\n  assertTrue(controller.remove(1,2));\n  assertFalse(controller.remove(1,1));\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertFalse(messagesToRedeliver.contains(1,1));\n  assertFalse(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(2,1,100));\n  assertTrue(controller.add(2,2,101));\n  assertTrue(controller.add(2,3,101));\n  assertFalse(controller.add(2,1,100));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),3);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(2,3));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),3);\n    assertEquals(hashesToBeBlocked.get(2,1).first,100);\n    assertEquals(hashesToBeBlocked.get(2,2).first,101);\n    assertEquals(hashesToBeBlocked.get(2,3).first,101);\n  }\n  controller.clear();\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertTrue(messagesToRedeliver.isEmpty());\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertTrue(hashesToBeBlocked.isEmpty());\n  }\n  controller.add(2,2,201);\n  controller.add(1,3,100);\n  controller.add(3,1,300);\n  controller.add(2,1,200);\n  controller.add(3,2,301);\n  controller.add(1,2,101);\n  controller.add(1,1,100);\n  controller.removeAllUpTo(1,3);\n  assertEquals(messagesToRedeliver.size(),4);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(3,1));\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),4);\n    assertEquals(hashesToBeBlocked.get(2,1).first,200);\n    assertEquals(hashesToBeBlocked.get(2,2).first,201);\n    assertEquals(hashesToBeBlocked.get(3,1).first,300);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(3,1);\n  assertEquals(messagesToRedeliver.size(),1);\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),1);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(5,10);\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 625,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4805,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"allowOutOfOrderDelivery\",timeOut=10000) public void testAddAndRemove(boolean allowOutOfOrderDelivery) throws Exception {\n  MessageRedeliveryController controller=new MessageRedeliveryController(allowOutOfOrderDelivery);\n  Field messagesToRedeliverField=MessageRedeliveryController.class.getDeclaredField(\"messagesToRedeliver\");\n  messagesToRedeliverField.setAccessible(true);\n  LongPairSet messagesToRedeliver=(LongPairSet)messagesToRedeliverField.get(controller);\n  Field hashesToBeBlockedField=MessageRedeliveryController.class.getDeclaredField(\"hashesToBeBlocked\");\n  hashesToBeBlockedField.setAccessible(true);\n  ConcurrentLongLongPairHashMap hashesToBeBlocked=(ConcurrentLongLongPairHashMap)hashesToBeBlockedField.get(controller);\n  if (allowOutOfOrderDelivery) {\n    assertNull(hashesToBeBlocked);\n  }\n else {\n    assertNotNull(hashesToBeBlocked);\n  }\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(1,1));\n  assertTrue(controller.add(1,2));\n  assertFalse(controller.add(1,1));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),2);\n  assertTrue(messagesToRedeliver.contains(1,1));\n  assertTrue(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertFalse(hashesToBeBlocked.containsKey(1,1));\n    assertFalse(hashesToBeBlocked.containsKey(1,2));\n  }\n  assertTrue(controller.remove(1,1));\n  assertTrue(controller.remove(1,2));\n  assertFalse(controller.remove(1,1));\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertFalse(messagesToRedeliver.contains(1,1));\n  assertFalse(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(2,1,100));\n  assertTrue(controller.add(2,2,101));\n  assertTrue(controller.add(2,3,101));\n  assertFalse(controller.add(2,1,100));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),3);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(2,3));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),3);\n    assertEquals(hashesToBeBlocked.get(2,1).first,100);\n    assertEquals(hashesToBeBlocked.get(2,2).first,101);\n    assertEquals(hashesToBeBlocked.get(2,3).first,101);\n  }\n  controller.clear();\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertTrue(messagesToRedeliver.isEmpty());\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertTrue(hashesToBeBlocked.isEmpty());\n  }\n  controller.add(2,2,201);\n  controller.add(1,3,100);\n  controller.add(3,1,300);\n  controller.add(2,1,200);\n  controller.add(3,2,301);\n  controller.add(1,2,101);\n  controller.add(1,1,100);\n  controller.removeAllUpTo(1,3);\n  assertEquals(messagesToRedeliver.size(),4);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(3,1));\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),4);\n    assertEquals(hashesToBeBlocked.get(2,1).first,200);\n    assertEquals(hashesToBeBlocked.get(2,2).first,201);\n    assertEquals(hashesToBeBlocked.get(3,1).first,300);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(3,1);\n  assertEquals(messagesToRedeliver.size(),1);\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),1);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(5,10);\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 642,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertTrue(controller.add(2,3,101));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "101",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 109,
      "startColumnNumber" : 60,
      "endLineNumber" : 109,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 109,
        "startColumnNumber" : 12,
        "endLineNumber" : 109,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertEquals(hashesToBeBlocked.get(2,2).first,101)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 109,
        "startColumnNumber" : 12,
        "endLineNumber" : 109,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(hashesToBeBlocked.get(2,2).first,101);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 106,
        "startColumnNumber" : 38,
        "endLineNumber" : 111,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertEquals(hashesToBeBlocked.size(),3);\n  assertEquals(hashesToBeBlocked.get(2,1).first,100);\n  assertEquals(hashesToBeBlocked.get(2,2).first,101);\n  assertEquals(hashesToBeBlocked.get(2,3).first,101);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 294,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!allowOutOfOrderDelivery) {\n  assertEquals(hashesToBeBlocked.size(),3);\n  assertEquals(hashesToBeBlocked.get(2,1).first,100);\n  assertEquals(hashesToBeBlocked.get(2,2).first,101);\n  assertEquals(hashesToBeBlocked.get(2,3).first,101);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4657,
        "startLineNumber" : 46,
        "startColumnNumber" : 83,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MessageRedeliveryController controller=new MessageRedeliveryController(allowOutOfOrderDelivery);\n  Field messagesToRedeliverField=MessageRedeliveryController.class.getDeclaredField(\"messagesToRedeliver\");\n  messagesToRedeliverField.setAccessible(true);\n  LongPairSet messagesToRedeliver=(LongPairSet)messagesToRedeliverField.get(controller);\n  Field hashesToBeBlockedField=MessageRedeliveryController.class.getDeclaredField(\"hashesToBeBlocked\");\n  hashesToBeBlockedField.setAccessible(true);\n  ConcurrentLongLongPairHashMap hashesToBeBlocked=(ConcurrentLongLongPairHashMap)hashesToBeBlockedField.get(controller);\n  if (allowOutOfOrderDelivery) {\n    assertNull(hashesToBeBlocked);\n  }\n else {\n    assertNotNull(hashesToBeBlocked);\n  }\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(1,1));\n  assertTrue(controller.add(1,2));\n  assertFalse(controller.add(1,1));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),2);\n  assertTrue(messagesToRedeliver.contains(1,1));\n  assertTrue(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertFalse(hashesToBeBlocked.containsKey(1,1));\n    assertFalse(hashesToBeBlocked.containsKey(1,2));\n  }\n  assertTrue(controller.remove(1,1));\n  assertTrue(controller.remove(1,2));\n  assertFalse(controller.remove(1,1));\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertFalse(messagesToRedeliver.contains(1,1));\n  assertFalse(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(2,1,100));\n  assertTrue(controller.add(2,2,101));\n  assertTrue(controller.add(2,3,101));\n  assertFalse(controller.add(2,1,100));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),3);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(2,3));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),3);\n    assertEquals(hashesToBeBlocked.get(2,1).first,100);\n    assertEquals(hashesToBeBlocked.get(2,2).first,101);\n    assertEquals(hashesToBeBlocked.get(2,3).first,101);\n  }\n  controller.clear();\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertTrue(messagesToRedeliver.isEmpty());\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertTrue(hashesToBeBlocked.isEmpty());\n  }\n  controller.add(2,2,201);\n  controller.add(1,3,100);\n  controller.add(3,1,300);\n  controller.add(2,1,200);\n  controller.add(3,2,301);\n  controller.add(1,2,101);\n  controller.add(1,1,100);\n  controller.removeAllUpTo(1,3);\n  assertEquals(messagesToRedeliver.size(),4);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(3,1));\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),4);\n    assertEquals(hashesToBeBlocked.get(2,1).first,200);\n    assertEquals(hashesToBeBlocked.get(2,2).first,201);\n    assertEquals(hashesToBeBlocked.get(3,1).first,300);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(3,1);\n  assertEquals(messagesToRedeliver.size(),1);\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),1);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(5,10);\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 625,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4805,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"allowOutOfOrderDelivery\",timeOut=10000) public void testAddAndRemove(boolean allowOutOfOrderDelivery) throws Exception {\n  MessageRedeliveryController controller=new MessageRedeliveryController(allowOutOfOrderDelivery);\n  Field messagesToRedeliverField=MessageRedeliveryController.class.getDeclaredField(\"messagesToRedeliver\");\n  messagesToRedeliverField.setAccessible(true);\n  LongPairSet messagesToRedeliver=(LongPairSet)messagesToRedeliverField.get(controller);\n  Field hashesToBeBlockedField=MessageRedeliveryController.class.getDeclaredField(\"hashesToBeBlocked\");\n  hashesToBeBlockedField.setAccessible(true);\n  ConcurrentLongLongPairHashMap hashesToBeBlocked=(ConcurrentLongLongPairHashMap)hashesToBeBlockedField.get(controller);\n  if (allowOutOfOrderDelivery) {\n    assertNull(hashesToBeBlocked);\n  }\n else {\n    assertNotNull(hashesToBeBlocked);\n  }\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(1,1));\n  assertTrue(controller.add(1,2));\n  assertFalse(controller.add(1,1));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),2);\n  assertTrue(messagesToRedeliver.contains(1,1));\n  assertTrue(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertFalse(hashesToBeBlocked.containsKey(1,1));\n    assertFalse(hashesToBeBlocked.containsKey(1,2));\n  }\n  assertTrue(controller.remove(1,1));\n  assertTrue(controller.remove(1,2));\n  assertFalse(controller.remove(1,1));\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertFalse(messagesToRedeliver.contains(1,1));\n  assertFalse(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(2,1,100));\n  assertTrue(controller.add(2,2,101));\n  assertTrue(controller.add(2,3,101));\n  assertFalse(controller.add(2,1,100));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),3);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(2,3));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),3);\n    assertEquals(hashesToBeBlocked.get(2,1).first,100);\n    assertEquals(hashesToBeBlocked.get(2,2).first,101);\n    assertEquals(hashesToBeBlocked.get(2,3).first,101);\n  }\n  controller.clear();\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertTrue(messagesToRedeliver.isEmpty());\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertTrue(hashesToBeBlocked.isEmpty());\n  }\n  controller.add(2,2,201);\n  controller.add(1,3,100);\n  controller.add(3,1,300);\n  controller.add(2,1,200);\n  controller.add(3,2,301);\n  controller.add(1,2,101);\n  controller.add(1,1,100);\n  controller.removeAllUpTo(1,3);\n  assertEquals(messagesToRedeliver.size(),4);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(3,1));\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),4);\n    assertEquals(hashesToBeBlocked.get(2,1).first,200);\n    assertEquals(hashesToBeBlocked.get(2,2).first,201);\n    assertEquals(hashesToBeBlocked.get(3,1).first,300);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(3,1);\n  assertEquals(messagesToRedeliver.size(),1);\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),1);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(5,10);\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 642,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 109,
        "startColumnNumber" : 12,
        "endLineNumber" : 109,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(hashesToBeBlocked.get(2,2).first,101);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "101",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 110,
      "startColumnNumber" : 60,
      "endLineNumber" : 110,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertEquals(hashesToBeBlocked.get(2,3).first,101)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(hashesToBeBlocked.get(2,3).first,101);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 106,
        "startColumnNumber" : 38,
        "endLineNumber" : 111,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertEquals(hashesToBeBlocked.size(),3);\n  assertEquals(hashesToBeBlocked.get(2,1).first,100);\n  assertEquals(hashesToBeBlocked.get(2,2).first,101);\n  assertEquals(hashesToBeBlocked.get(2,3).first,101);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 294,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!allowOutOfOrderDelivery) {\n  assertEquals(hashesToBeBlocked.size(),3);\n  assertEquals(hashesToBeBlocked.get(2,1).first,100);\n  assertEquals(hashesToBeBlocked.get(2,2).first,101);\n  assertEquals(hashesToBeBlocked.get(2,3).first,101);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4657,
        "startLineNumber" : 46,
        "startColumnNumber" : 83,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MessageRedeliveryController controller=new MessageRedeliveryController(allowOutOfOrderDelivery);\n  Field messagesToRedeliverField=MessageRedeliveryController.class.getDeclaredField(\"messagesToRedeliver\");\n  messagesToRedeliverField.setAccessible(true);\n  LongPairSet messagesToRedeliver=(LongPairSet)messagesToRedeliverField.get(controller);\n  Field hashesToBeBlockedField=MessageRedeliveryController.class.getDeclaredField(\"hashesToBeBlocked\");\n  hashesToBeBlockedField.setAccessible(true);\n  ConcurrentLongLongPairHashMap hashesToBeBlocked=(ConcurrentLongLongPairHashMap)hashesToBeBlockedField.get(controller);\n  if (allowOutOfOrderDelivery) {\n    assertNull(hashesToBeBlocked);\n  }\n else {\n    assertNotNull(hashesToBeBlocked);\n  }\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(1,1));\n  assertTrue(controller.add(1,2));\n  assertFalse(controller.add(1,1));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),2);\n  assertTrue(messagesToRedeliver.contains(1,1));\n  assertTrue(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertFalse(hashesToBeBlocked.containsKey(1,1));\n    assertFalse(hashesToBeBlocked.containsKey(1,2));\n  }\n  assertTrue(controller.remove(1,1));\n  assertTrue(controller.remove(1,2));\n  assertFalse(controller.remove(1,1));\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertFalse(messagesToRedeliver.contains(1,1));\n  assertFalse(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(2,1,100));\n  assertTrue(controller.add(2,2,101));\n  assertTrue(controller.add(2,3,101));\n  assertFalse(controller.add(2,1,100));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),3);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(2,3));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),3);\n    assertEquals(hashesToBeBlocked.get(2,1).first,100);\n    assertEquals(hashesToBeBlocked.get(2,2).first,101);\n    assertEquals(hashesToBeBlocked.get(2,3).first,101);\n  }\n  controller.clear();\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertTrue(messagesToRedeliver.isEmpty());\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertTrue(hashesToBeBlocked.isEmpty());\n  }\n  controller.add(2,2,201);\n  controller.add(1,3,100);\n  controller.add(3,1,300);\n  controller.add(2,1,200);\n  controller.add(3,2,301);\n  controller.add(1,2,101);\n  controller.add(1,1,100);\n  controller.removeAllUpTo(1,3);\n  assertEquals(messagesToRedeliver.size(),4);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(3,1));\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),4);\n    assertEquals(hashesToBeBlocked.get(2,1).first,200);\n    assertEquals(hashesToBeBlocked.get(2,2).first,201);\n    assertEquals(hashesToBeBlocked.get(3,1).first,300);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(3,1);\n  assertEquals(messagesToRedeliver.size(),1);\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),1);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(5,10);\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 625,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4805,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"allowOutOfOrderDelivery\",timeOut=10000) public void testAddAndRemove(boolean allowOutOfOrderDelivery) throws Exception {\n  MessageRedeliveryController controller=new MessageRedeliveryController(allowOutOfOrderDelivery);\n  Field messagesToRedeliverField=MessageRedeliveryController.class.getDeclaredField(\"messagesToRedeliver\");\n  messagesToRedeliverField.setAccessible(true);\n  LongPairSet messagesToRedeliver=(LongPairSet)messagesToRedeliverField.get(controller);\n  Field hashesToBeBlockedField=MessageRedeliveryController.class.getDeclaredField(\"hashesToBeBlocked\");\n  hashesToBeBlockedField.setAccessible(true);\n  ConcurrentLongLongPairHashMap hashesToBeBlocked=(ConcurrentLongLongPairHashMap)hashesToBeBlockedField.get(controller);\n  if (allowOutOfOrderDelivery) {\n    assertNull(hashesToBeBlocked);\n  }\n else {\n    assertNotNull(hashesToBeBlocked);\n  }\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(1,1));\n  assertTrue(controller.add(1,2));\n  assertFalse(controller.add(1,1));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),2);\n  assertTrue(messagesToRedeliver.contains(1,1));\n  assertTrue(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertFalse(hashesToBeBlocked.containsKey(1,1));\n    assertFalse(hashesToBeBlocked.containsKey(1,2));\n  }\n  assertTrue(controller.remove(1,1));\n  assertTrue(controller.remove(1,2));\n  assertFalse(controller.remove(1,1));\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertFalse(messagesToRedeliver.contains(1,1));\n  assertFalse(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(2,1,100));\n  assertTrue(controller.add(2,2,101));\n  assertTrue(controller.add(2,3,101));\n  assertFalse(controller.add(2,1,100));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),3);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(2,3));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),3);\n    assertEquals(hashesToBeBlocked.get(2,1).first,100);\n    assertEquals(hashesToBeBlocked.get(2,2).first,101);\n    assertEquals(hashesToBeBlocked.get(2,3).first,101);\n  }\n  controller.clear();\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertTrue(messagesToRedeliver.isEmpty());\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertTrue(hashesToBeBlocked.isEmpty());\n  }\n  controller.add(2,2,201);\n  controller.add(1,3,100);\n  controller.add(3,1,300);\n  controller.add(2,1,200);\n  controller.add(3,2,301);\n  controller.add(1,2,101);\n  controller.add(1,1,100);\n  controller.removeAllUpTo(1,3);\n  assertEquals(messagesToRedeliver.size(),4);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(3,1));\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),4);\n    assertEquals(hashesToBeBlocked.get(2,1).first,200);\n    assertEquals(hashesToBeBlocked.get(2,2).first,201);\n    assertEquals(hashesToBeBlocked.get(3,1).first,300);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(3,1);\n  assertEquals(messagesToRedeliver.size(),1);\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),1);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(5,10);\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 642,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(hashesToBeBlocked.get(2,3).first,101);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "101",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 127,
      "startColumnNumber" : 29,
      "endLineNumber" : 127,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 33
      },
      "nodeContext" : "controller.add(1,2,101)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 34
      },
      "nodeContext" : "controller.add(1,2,101);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4657,
        "startLineNumber" : 46,
        "startColumnNumber" : 83,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MessageRedeliveryController controller=new MessageRedeliveryController(allowOutOfOrderDelivery);\n  Field messagesToRedeliverField=MessageRedeliveryController.class.getDeclaredField(\"messagesToRedeliver\");\n  messagesToRedeliverField.setAccessible(true);\n  LongPairSet messagesToRedeliver=(LongPairSet)messagesToRedeliverField.get(controller);\n  Field hashesToBeBlockedField=MessageRedeliveryController.class.getDeclaredField(\"hashesToBeBlocked\");\n  hashesToBeBlockedField.setAccessible(true);\n  ConcurrentLongLongPairHashMap hashesToBeBlocked=(ConcurrentLongLongPairHashMap)hashesToBeBlockedField.get(controller);\n  if (allowOutOfOrderDelivery) {\n    assertNull(hashesToBeBlocked);\n  }\n else {\n    assertNotNull(hashesToBeBlocked);\n  }\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(1,1));\n  assertTrue(controller.add(1,2));\n  assertFalse(controller.add(1,1));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),2);\n  assertTrue(messagesToRedeliver.contains(1,1));\n  assertTrue(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertFalse(hashesToBeBlocked.containsKey(1,1));\n    assertFalse(hashesToBeBlocked.containsKey(1,2));\n  }\n  assertTrue(controller.remove(1,1));\n  assertTrue(controller.remove(1,2));\n  assertFalse(controller.remove(1,1));\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertFalse(messagesToRedeliver.contains(1,1));\n  assertFalse(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(2,1,100));\n  assertTrue(controller.add(2,2,101));\n  assertTrue(controller.add(2,3,101));\n  assertFalse(controller.add(2,1,100));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),3);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(2,3));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),3);\n    assertEquals(hashesToBeBlocked.get(2,1).first,100);\n    assertEquals(hashesToBeBlocked.get(2,2).first,101);\n    assertEquals(hashesToBeBlocked.get(2,3).first,101);\n  }\n  controller.clear();\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertTrue(messagesToRedeliver.isEmpty());\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertTrue(hashesToBeBlocked.isEmpty());\n  }\n  controller.add(2,2,201);\n  controller.add(1,3,100);\n  controller.add(3,1,300);\n  controller.add(2,1,200);\n  controller.add(3,2,301);\n  controller.add(1,2,101);\n  controller.add(1,1,100);\n  controller.removeAllUpTo(1,3);\n  assertEquals(messagesToRedeliver.size(),4);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(3,1));\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),4);\n    assertEquals(hashesToBeBlocked.get(2,1).first,200);\n    assertEquals(hashesToBeBlocked.get(2,2).first,201);\n    assertEquals(hashesToBeBlocked.get(3,1).first,300);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(3,1);\n  assertEquals(messagesToRedeliver.size(),1);\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),1);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(5,10);\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 625,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4805,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"allowOutOfOrderDelivery\",timeOut=10000) public void testAddAndRemove(boolean allowOutOfOrderDelivery) throws Exception {\n  MessageRedeliveryController controller=new MessageRedeliveryController(allowOutOfOrderDelivery);\n  Field messagesToRedeliverField=MessageRedeliveryController.class.getDeclaredField(\"messagesToRedeliver\");\n  messagesToRedeliverField.setAccessible(true);\n  LongPairSet messagesToRedeliver=(LongPairSet)messagesToRedeliverField.get(controller);\n  Field hashesToBeBlockedField=MessageRedeliveryController.class.getDeclaredField(\"hashesToBeBlocked\");\n  hashesToBeBlockedField.setAccessible(true);\n  ConcurrentLongLongPairHashMap hashesToBeBlocked=(ConcurrentLongLongPairHashMap)hashesToBeBlockedField.get(controller);\n  if (allowOutOfOrderDelivery) {\n    assertNull(hashesToBeBlocked);\n  }\n else {\n    assertNotNull(hashesToBeBlocked);\n  }\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(1,1));\n  assertTrue(controller.add(1,2));\n  assertFalse(controller.add(1,1));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),2);\n  assertTrue(messagesToRedeliver.contains(1,1));\n  assertTrue(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertFalse(hashesToBeBlocked.containsKey(1,1));\n    assertFalse(hashesToBeBlocked.containsKey(1,2));\n  }\n  assertTrue(controller.remove(1,1));\n  assertTrue(controller.remove(1,2));\n  assertFalse(controller.remove(1,1));\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertFalse(messagesToRedeliver.contains(1,1));\n  assertFalse(messagesToRedeliver.contains(1,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n  assertTrue(controller.add(2,1,100));\n  assertTrue(controller.add(2,2,101));\n  assertTrue(controller.add(2,3,101));\n  assertFalse(controller.add(2,1,100));\n  assertFalse(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),3);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(2,3));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),3);\n    assertEquals(hashesToBeBlocked.get(2,1).first,100);\n    assertEquals(hashesToBeBlocked.get(2,2).first,101);\n    assertEquals(hashesToBeBlocked.get(2,3).first,101);\n  }\n  controller.clear();\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  assertTrue(messagesToRedeliver.isEmpty());\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n    assertTrue(hashesToBeBlocked.isEmpty());\n  }\n  controller.add(2,2,201);\n  controller.add(1,3,100);\n  controller.add(3,1,300);\n  controller.add(2,1,200);\n  controller.add(3,2,301);\n  controller.add(1,2,101);\n  controller.add(1,1,100);\n  controller.removeAllUpTo(1,3);\n  assertEquals(messagesToRedeliver.size(),4);\n  assertTrue(messagesToRedeliver.contains(2,1));\n  assertTrue(messagesToRedeliver.contains(2,2));\n  assertTrue(messagesToRedeliver.contains(3,1));\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),4);\n    assertEquals(hashesToBeBlocked.get(2,1).first,200);\n    assertEquals(hashesToBeBlocked.get(2,2).first,201);\n    assertEquals(hashesToBeBlocked.get(3,1).first,300);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(3,1);\n  assertEquals(messagesToRedeliver.size(),1);\n  assertTrue(messagesToRedeliver.contains(3,2));\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),1);\n    assertEquals(hashesToBeBlocked.get(3,2).first,301);\n  }\n  controller.removeAllUpTo(5,10);\n  assertTrue(controller.isEmpty());\n  assertEquals(messagesToRedeliver.size(),0);\n  if (!allowOutOfOrderDelivery) {\n    assertEquals(hashesToBeBlocked.size(),0);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 642,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 34
      },
      "nodeContext" : "controller.add(1,2,101);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 97,
    "startColumnNumber" : 40,
    "endLineNumber" : 97,
    "endColumnNumber" : 43
  }, {
    "charLength" : 3,
    "startLineNumber" : 98,
    "startColumnNumber" : 40,
    "endLineNumber" : 98,
    "endColumnNumber" : 43
  }, {
    "charLength" : 3,
    "startLineNumber" : 109,
    "startColumnNumber" : 60,
    "endLineNumber" : 109,
    "endColumnNumber" : 63
  }, {
    "charLength" : 3,
    "startLineNumber" : 110,
    "startColumnNumber" : 60,
    "endLineNumber" : 110,
    "endColumnNumber" : 63
  }, {
    "charLength" : 3,
    "startLineNumber" : 127,
    "startColumnNumber" : 29,
    "endLineNumber" : 127,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}