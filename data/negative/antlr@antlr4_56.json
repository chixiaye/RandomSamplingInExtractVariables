{
  "id" : 56,
  "expression" : "\".tokens\"",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/antlr4-maven-plugin/src/main/java/org/antlr/mojo/antlr4/Antlr4Mojo.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\".tokens\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 395,
      "startColumnNumber" : 76,
      "endLineNumber" : 395,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 395,
        "startColumnNumber" : 36,
        "endLineNumber" : 395,
        "endColumnNumber" : 85
      },
      "nodeContext" : "grammarFile.getName().split(\"\\\\.\")[0] + \".tokens\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 395,
        "startColumnNumber" : 19,
        "endLineNumber" : 395,
        "endColumnNumber" : 85
      },
      "nodeContext" : "tokensFileName=grammarFile.getName().split(\"\\\\.\")[0] + \".tokens\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 395,
        "startColumnNumber" : 12,
        "endLineNumber" : 395,
        "endColumnNumber" : 86
      },
      "nodeContext" : "String tokensFileName=grammarFile.getName().split(\"\\\\.\")[0] + \".tokens\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 435,
        "startLineNumber" : 394,
        "startColumnNumber" : 46,
        "endLineNumber" : 402,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String tokensFileName=grammarFile.getName().split(\"\\\\.\")[0] + \".tokens\";\n  File outputFile=new File(outputDirectory,tokensFileName);\n  if ((!outputFile.exists()) || outputFile.lastModified() <= grammarFile.lastModified() || dependencies.isDependencyChanged(grammarFile)) {\n    grammarFilesToProcess.add(grammarFile);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 473,
        "startLineNumber" : 394,
        "startColumnNumber" : 8,
        "endLineNumber" : 402,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (File grammarFile : grammarFiles) {\n  String tokensFileName=grammarFile.getName().split(\"\\\\.\")[0] + \".tokens\";\n  File outputFile=new File(outputDirectory,tokensFileName);\n  if ((!outputFile.exists()) || outputFile.lastModified() <= grammarFile.lastModified() || dependencies.isDependencyChanged(grammarFile)) {\n    grammarFilesToProcess.add(grammarFile);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2178,
        "startLineNumber" : 387,
        "startColumnNumber" : 73,
        "endLineNumber" : 443,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Set<File> grammarFilesToProcess=new HashSet<File>();\n  for (  File grammarFile : grammarFiles) {\n    String tokensFileName=grammarFile.getName().split(\"\\\\.\")[0] + \".tokens\";\n    File outputFile=new File(outputDirectory,tokensFileName);\n    if ((!outputFile.exists()) || outputFile.lastModified() <= grammarFile.lastModified() || dependencies.isDependencyChanged(grammarFile)) {\n      grammarFilesToProcess.add(grammarFile);\n    }\n  }\n  grammarFiles=grammarFilesToProcess;\n  if (grammarFiles.isEmpty()) {\n    getLog().info(\"No grammars to process\");\n    return Collections.emptyList();\n  }\n  MultiMap<String,File> grammarFileByFolder=new MultiMap<String,File>();\n  for (  File grammarFile : grammarFiles) {\n    buildContext.refresh(grammarFile);\n    buildContext.removeMessages(grammarFile);\n    getLog().debug(\"Grammar file '\" + grammarFile.getPath() + \"' detected.\");\n    String relPathBase=MojoUtils.findSourceSubdir(sourceDirectory,grammarFile);\n    String relPath=relPathBase + grammarFile.getName();\n    getLog().debug(\"  ... relative path is: \" + relPath);\n    grammarFileByFolder.map(relPathBase,grammarFile);\n  }\n  List<List<String>> result=new ArrayList<List<String>>();\n  for (  Map.Entry<String,List<File>> entry : grammarFileByFolder.entrySet()) {\n    List<String> folderArgs=new ArrayList<String>(args);\n    if (!folderArgs.contains(\"-package\") && !entry.getKey().isEmpty()) {\n      folderArgs.add(\"-package\");\n      folderArgs.add(getPackageName(entry.getKey()));\n    }\n    for (    File file : entry.getValue()) {\n      folderArgs.add(entry.getKey() + file.getName());\n    }\n    result.add(folderArgs);\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 280,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2503,
        "startLineNumber" : 378,
        "startColumnNumber" : 4,
        "endLineNumber" : 443,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param sourceDirectory\n * @exception InclusionScanException\n */\nprivate List<List<String>> processGrammarFiles(List<String> args,Set<File> grammarFiles,GrammarDependencies dependencies,File sourceDirectory) throws InclusionScanException, IOException {\n  Set<File> grammarFilesToProcess=new HashSet<File>();\n  for (  File grammarFile : grammarFiles) {\n    String tokensFileName=grammarFile.getName().split(\"\\\\.\")[0] + \".tokens\";\n    File outputFile=new File(outputDirectory,tokensFileName);\n    if ((!outputFile.exists()) || outputFile.lastModified() <= grammarFile.lastModified() || dependencies.isDependencyChanged(grammarFile)) {\n      grammarFilesToProcess.add(grammarFile);\n    }\n  }\n  grammarFiles=grammarFilesToProcess;\n  if (grammarFiles.isEmpty()) {\n    getLog().info(\"No grammars to process\");\n    return Collections.emptyList();\n  }\n  MultiMap<String,File> grammarFileByFolder=new MultiMap<String,File>();\n  for (  File grammarFile : grammarFiles) {\n    buildContext.refresh(grammarFile);\n    buildContext.removeMessages(grammarFile);\n    getLog().debug(\"Grammar file '\" + grammarFile.getPath() + \"' detected.\");\n    String relPathBase=MojoUtils.findSourceSubdir(sourceDirectory,grammarFile);\n    String relPath=relPathBase + grammarFile.getName();\n    getLog().debug(\"  ... relative path is: \" + relPath);\n    grammarFileByFolder.map(relPathBase,grammarFile);\n  }\n  List<List<String>> result=new ArrayList<List<String>>();\n  for (  Map.Entry<String,List<File>> entry : grammarFileByFolder.entrySet()) {\n    List<String> folderArgs=new ArrayList<String>(args);\n    if (!folderArgs.contains(\"-package\") && !entry.getKey().isEmpty()) {\n      folderArgs.add(\"-package\");\n      folderArgs.add(getPackageName(entry.getKey()));\n    }\n    for (    File file : entry.getValue()) {\n      folderArgs.add(entry.getKey() + file.getName());\n    }\n    result.add(folderArgs);\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 318,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 395,
        "startColumnNumber" : 12,
        "endLineNumber" : 395,
        "endColumnNumber" : 86
      },
      "nodeContext" : "String tokensFileName=grammarFile.getName().split(\"\\\\.\")[0] + \".tokens\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 395,
    "startColumnNumber" : 76,
    "endLineNumber" : 395,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ ]
}