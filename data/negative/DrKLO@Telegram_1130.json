{
  "id" : 1130,
  "expression" : "mediaCounts",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mediaCounts",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 9040,
      "startColumnNumber" : 28,
      "endLineNumber" : 9040,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 9040,
        "startColumnNumber" : 28,
        "endLineNumber" : 9040,
        "endColumnNumber" : 47
      },
      "nodeContext" : "mediaCounts == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 9040,
        "startColumnNumber" : 24,
        "endLineNumber" : 9042,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (mediaCounts == null) {\n  mediaCounts=new SparseArray<>();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 903,
        "startLineNumber" : 9037,
        "startColumnNumber" : 42,
        "endLineNumber" : 9057,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  long uid=cursor.longValue(0);\n  int type=cursor.intValue(1);\n  if (mediaCounts == null) {\n    mediaCounts=new SparseArray<>();\n  }\n  LongSparseArray<Integer> counts=mediaCounts.get(type);\n  Integer count;\n  if (counts == null) {\n    counts=new LongSparseArray<>();\n    count=0;\n    mediaCounts.put(type,counts);\n  }\n else {\n    count=counts.get(uid);\n  }\n  if (count == null) {\n    count=0;\n  }\n  count++;\n  counts.put(uid,count);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 9037,
        "startColumnNumber" : 20,
        "endLineNumber" : 9057,
        "endColumnNumber" : 21
      },
      "nodeContext" : "while (cursor.next()) {\n  long uid=cursor.longValue(0);\n  int type=cursor.intValue(1);\n  if (mediaCounts == null) {\n    mediaCounts=new SparseArray<>();\n  }\n  LongSparseArray<Integer> counts=mediaCounts.get(type);\n  Integer count;\n  if (counts == null) {\n    counts=new LongSparseArray<>();\n    count=0;\n    mediaCounts.put(type,counts);\n  }\n else {\n    count=counts.get(uid);\n  }\n  if (count == null) {\n    count=0;\n  }\n  count++;\n  counts.put(uid,count);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 98,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2978,
        "startLineNumber" : 9034,
        "startColumnNumber" : 36,
        "endLineNumber" : 9088,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n  SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n  while (cursor.next()) {\n    long uid=cursor.longValue(0);\n    int type=cursor.intValue(1);\n    if (mediaCounts == null) {\n      mediaCounts=new SparseArray<>();\n    }\n    LongSparseArray<Integer> counts=mediaCounts.get(type);\n    Integer count;\n    if (counts == null) {\n      counts=new LongSparseArray<>();\n      count=0;\n      mediaCounts.put(type,counts);\n    }\n else {\n      count=counts.get(uid);\n    }\n    if (count == null) {\n      count=0;\n    }\n    count++;\n    counts.put(uid,count);\n  }\n  cursor.dispose();\n  if (mediaCounts != null) {\n    SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n    for (int a=0; a < mediaCounts.size(); a++) {\n      int type=mediaCounts.keyAt(a);\n      LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n      for (int b=0; b < value.size(); b++) {\n        long uid=value.keyAt(b);\n        int lower_part=(int)uid;\n        int count=-1;\n        int old=0;\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n        if (cursor.next()) {\n          count=cursor.intValue(0);\n          old=cursor.intValue(1);\n        }\n        cursor.dispose();\n        if (count != -1) {\n          state.requery();\n          count=Math.max(0,count - value.valueAt(b));\n          state.bindLong(1,uid);\n          state.bindInteger(2,type);\n          state.bindInteger(3,count);\n          state.bindInteger(4,old);\n          state.step();\n        }\n      }\n    }\n    state.dispose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3387,
        "startLineNumber" : 9034,
        "startColumnNumber" : 16,
        "endLineNumber" : 9094,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (temp.isEmpty()) {\n  cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n  SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n  while (cursor.next()) {\n    long uid=cursor.longValue(0);\n    int type=cursor.intValue(1);\n    if (mediaCounts == null) {\n      mediaCounts=new SparseArray<>();\n    }\n    LongSparseArray<Integer> counts=mediaCounts.get(type);\n    Integer count;\n    if (counts == null) {\n      counts=new LongSparseArray<>();\n      count=0;\n      mediaCounts.put(type,counts);\n    }\n else {\n      count=counts.get(uid);\n    }\n    if (count == null) {\n      count=0;\n    }\n    count++;\n    counts.put(uid,count);\n  }\n  cursor.dispose();\n  if (mediaCounts != null) {\n    SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n    for (int a=0; a < mediaCounts.size(); a++) {\n      int type=mediaCounts.keyAt(a);\n      LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n      for (int b=0; b < value.size(); b++) {\n        long uid=value.keyAt(b);\n        int lower_part=(int)uid;\n        int count=-1;\n        int old=0;\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n        if (cursor.next()) {\n          count=cursor.intValue(0);\n          old=cursor.intValue(1);\n        }\n        cursor.dispose();\n        if (count != -1) {\n          state.requery();\n          count=Math.max(0,count - value.valueAt(b));\n          state.bindLong(1,uid);\n          state.bindInteger(2,type);\n          state.bindInteger(3,count);\n          state.bindInteger(4,old);\n          state.step();\n        }\n      }\n    }\n    state.dispose();\n  }\n}\n else {\n  if (channelId == 0) {\n    database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n  }\n else {\n    database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 347,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 11336,
        "startLineNumber" : 8903,
        "startColumnNumber" : 19,
        "endLineNumber" : 9101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String ids;\n  final ArrayList<Integer> temp=new ArrayList<>(messages);\n  LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n  LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<File> filesToDelete=new ArrayList<>();\n  ArrayList<String> namesToDelete=new ArrayList<>();\n  ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n  int currentUser=getUserConfig().getClientUserId();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      int mid=cursor.intValue(5);\n      temp.remove((Integer)mid);\n      ArrayList<Integer> mids=messagesByDialogs.get(did);\n      if (mids == null) {\n        mids=new ArrayList<>();\n        messagesByDialogs.put(did,mids);\n      }\n      mids.add(mid);\n      if (did != currentUser) {\n        int read_state=cursor.intValue(2);\n        if (cursor.intValue(3) == 0) {\n          Integer[] unread_count=dialogsToUpdate.get(did);\n          if (unread_count == null) {\n            unread_count=new Integer[]{0,0};\n            dialogsToUpdate.put(did,unread_count);\n          }\n          if (read_state < 2) {\n            unread_count[1]++;\n          }\n          if (read_state == 0 || read_state == 2) {\n            unread_count[0]++;\n          }\n        }\n      }\n      if ((int)did != 0 && !deleteFiles) {\n        continue;\n      }\n      NativeByteBuffer data=cursor.byteBufferValue(1);\n      if (data != null) {\n        TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n        message.readAttachPath(data,getUserConfig().clientUserId);\n        data.reuse();\n        addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  deleteFromDownloadQueue(idsToDelete,true);\n  AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n  getFileLoader().deleteFiles(filesToDelete,0);\n  for (int a=0; a < dialogsToUpdate.size(); a++) {\n    long did=dialogsToUpdate.keyAt(a);\n    Integer[] counts=dialogsToUpdate.valueAt(a);\n    cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n    int old_unread_count=0;\n    int old_mentions_count=0;\n    if (cursor.next()) {\n      old_unread_count=cursor.intValue(0);\n      old_mentions_count=cursor.intValue(1);\n    }\n    cursor.dispose();\n    dialogsIds.add(did);\n    SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n    state.requery();\n    state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n    state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n    state.bindLong(3,did);\n    state.step();\n    state.dispose();\n  }\n  for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n    long did=messagesByDialogs.keyAt(a);\n    ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n    int lowerId=(int)did;\n    String idsStr=TextUtils.join(\",\",mids);\n    if (lowerId != 0) {\n      if (lowerId < 0) {\n        database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n    int updatedCount=0;\n    cursor=database.queryFinalized(\"SELECT changes()\");\n    if (cursor.next()) {\n      updatedCount=cursor.intValue(0);\n    }\n    cursor.dispose();\n    if (updatedCount > 0) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n      if (cursor.next()) {\n        int count=cursor.intValue(0);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,count - updatedCount));\n        state.bindLong(2,did);\n        state.step();\n        state.dispose();\n      }\n      cursor.dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  if (temp.isEmpty()) {\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n    SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n    while (cursor.next()) {\n      long uid=cursor.longValue(0);\n      int type=cursor.intValue(1);\n      if (mediaCounts == null) {\n        mediaCounts=new SparseArray<>();\n      }\n      LongSparseArray<Integer> counts=mediaCounts.get(type);\n      Integer count;\n      if (counts == null) {\n        counts=new LongSparseArray<>();\n        count=0;\n        mediaCounts.put(type,counts);\n      }\n else {\n        count=counts.get(uid);\n      }\n      if (count == null) {\n        count=0;\n      }\n      count++;\n      counts.put(uid,count);\n    }\n    cursor.dispose();\n    if (mediaCounts != null) {\n      SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n      for (int a=0; a < mediaCounts.size(); a++) {\n        int type=mediaCounts.keyAt(a);\n        LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n        for (int b=0; b < value.size(); b++) {\n          long uid=value.keyAt(b);\n          int lower_part=(int)uid;\n          int count=-1;\n          int old=0;\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n          if (cursor.next()) {\n            count=cursor.intValue(0);\n            old=cursor.intValue(1);\n          }\n          cursor.dispose();\n          if (count != -1) {\n            state.requery();\n            count=Math.max(0,count - value.valueAt(b));\n            state.bindLong(1,uid);\n            state.bindInteger(2,type);\n            state.bindInteger(3,count);\n            state.bindInteger(4,old);\n            state.step();\n          }\n        }\n      }\n      state.dispose();\n    }\n  }\n else {\n    if (channelId == 0) {\n      database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n    }\n else {\n      database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  getMediaDataController().clearBotKeyboard(0,messages);\n  if (dialogsToUpdate.size() != 0) {\n    resetAllUnreadCounters(false);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1238,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12993,
        "startLineNumber" : 8867,
        "startColumnNumber" : 12,
        "endLineNumber" : 9101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (scheduled) {\n  String ids;\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      if (!dialogsToUpdate.contains(did)) {\n        dialogsToUpdate.add(did);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n    broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n  }\n}\n else {\n  String ids;\n  final ArrayList<Integer> temp=new ArrayList<>(messages);\n  LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n  LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<File> filesToDelete=new ArrayList<>();\n  ArrayList<String> namesToDelete=new ArrayList<>();\n  ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n  int currentUser=getUserConfig().getClientUserId();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      int mid=cursor.intValue(5);\n      temp.remove((Integer)mid);\n      ArrayList<Integer> mids=messagesByDialogs.get(did);\n      if (mids == null) {\n        mids=new ArrayList<>();\n        messagesByDialogs.put(did,mids);\n      }\n      mids.add(mid);\n      if (did != currentUser) {\n        int read_state=cursor.intValue(2);\n        if (cursor.intValue(3) == 0) {\n          Integer[] unread_count=dialogsToUpdate.get(did);\n          if (unread_count == null) {\n            unread_count=new Integer[]{0,0};\n            dialogsToUpdate.put(did,unread_count);\n          }\n          if (read_state < 2) {\n            unread_count[1]++;\n          }\n          if (read_state == 0 || read_state == 2) {\n            unread_count[0]++;\n          }\n        }\n      }\n      if ((int)did != 0 && !deleteFiles) {\n        continue;\n      }\n      NativeByteBuffer data=cursor.byteBufferValue(1);\n      if (data != null) {\n        TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n        message.readAttachPath(data,getUserConfig().clientUserId);\n        data.reuse();\n        addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  deleteFromDownloadQueue(idsToDelete,true);\n  AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n  getFileLoader().deleteFiles(filesToDelete,0);\n  for (int a=0; a < dialogsToUpdate.size(); a++) {\n    long did=dialogsToUpdate.keyAt(a);\n    Integer[] counts=dialogsToUpdate.valueAt(a);\n    cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n    int old_unread_count=0;\n    int old_mentions_count=0;\n    if (cursor.next()) {\n      old_unread_count=cursor.intValue(0);\n      old_mentions_count=cursor.intValue(1);\n    }\n    cursor.dispose();\n    dialogsIds.add(did);\n    SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n    state.requery();\n    state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n    state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n    state.bindLong(3,did);\n    state.step();\n    state.dispose();\n  }\n  for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n    long did=messagesByDialogs.keyAt(a);\n    ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n    int lowerId=(int)did;\n    String idsStr=TextUtils.join(\",\",mids);\n    if (lowerId != 0) {\n      if (lowerId < 0) {\n        database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n    int updatedCount=0;\n    cursor=database.queryFinalized(\"SELECT changes()\");\n    if (cursor.next()) {\n      updatedCount=cursor.intValue(0);\n    }\n    cursor.dispose();\n    if (updatedCount > 0) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n      if (cursor.next()) {\n        int count=cursor.intValue(0);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,count - updatedCount));\n        state.bindLong(2,did);\n        state.step();\n        state.dispose();\n      }\n      cursor.dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  if (temp.isEmpty()) {\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n    SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n    while (cursor.next()) {\n      long uid=cursor.longValue(0);\n      int type=cursor.intValue(1);\n      if (mediaCounts == null) {\n        mediaCounts=new SparseArray<>();\n      }\n      LongSparseArray<Integer> counts=mediaCounts.get(type);\n      Integer count;\n      if (counts == null) {\n        counts=new LongSparseArray<>();\n        count=0;\n        mediaCounts.put(type,counts);\n      }\n else {\n        count=counts.get(uid);\n      }\n      if (count == null) {\n        count=0;\n      }\n      count++;\n      counts.put(uid,count);\n    }\n    cursor.dispose();\n    if (mediaCounts != null) {\n      SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n      for (int a=0; a < mediaCounts.size(); a++) {\n        int type=mediaCounts.keyAt(a);\n        LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n        for (int b=0; b < value.size(); b++) {\n          long uid=value.keyAt(b);\n          int lower_part=(int)uid;\n          int count=-1;\n          int old=0;\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n          if (cursor.next()) {\n            count=cursor.intValue(0);\n            old=cursor.intValue(1);\n          }\n          cursor.dispose();\n          if (count != -1) {\n            state.requery();\n            count=Math.max(0,count - value.valueAt(b));\n            state.bindLong(1,uid);\n            state.bindInteger(2,type);\n            state.bindInteger(3,count);\n            state.bindInteger(4,old);\n            state.step();\n          }\n        }\n      }\n      state.dispose();\n    }\n  }\n else {\n    if (channelId == 0) {\n      database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n    }\n else {\n      database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  getMediaDataController().clearBotKeyboard(0,messages);\n  if (dialogsToUpdate.size() != 0) {\n    resetAllUnreadCounters(false);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1435,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 13108,
        "startLineNumber" : 8865,
        "startColumnNumber" : 12,
        "endLineNumber" : 9103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ArrayList<Long> dialogsIds=new ArrayList<>();\n  if (scheduled) {\n    String ids;\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        if (!dialogsToUpdate.contains(did)) {\n          dialogsToUpdate.add(did);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n      broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n    }\n  }\n else {\n    String ids;\n    final ArrayList<Integer> temp=new ArrayList<>(messages);\n    LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n    LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<File> filesToDelete=new ArrayList<>();\n    ArrayList<String> namesToDelete=new ArrayList<>();\n    ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n    int currentUser=getUserConfig().getClientUserId();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        int mid=cursor.intValue(5);\n        temp.remove((Integer)mid);\n        ArrayList<Integer> mids=messagesByDialogs.get(did);\n        if (mids == null) {\n          mids=new ArrayList<>();\n          messagesByDialogs.put(did,mids);\n        }\n        mids.add(mid);\n        if (did != currentUser) {\n          int read_state=cursor.intValue(2);\n          if (cursor.intValue(3) == 0) {\n            Integer[] unread_count=dialogsToUpdate.get(did);\n            if (unread_count == null) {\n              unread_count=new Integer[]{0,0};\n              dialogsToUpdate.put(did,unread_count);\n            }\n            if (read_state < 2) {\n              unread_count[1]++;\n            }\n            if (read_state == 0 || read_state == 2) {\n              unread_count[0]++;\n            }\n          }\n        }\n        if ((int)did != 0 && !deleteFiles) {\n          continue;\n        }\n        NativeByteBuffer data=cursor.byteBufferValue(1);\n        if (data != null) {\n          TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n          message.readAttachPath(data,getUserConfig().clientUserId);\n          data.reuse();\n          addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    deleteFromDownloadQueue(idsToDelete,true);\n    AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n    getFileLoader().deleteFiles(filesToDelete,0);\n    for (int a=0; a < dialogsToUpdate.size(); a++) {\n      long did=dialogsToUpdate.keyAt(a);\n      Integer[] counts=dialogsToUpdate.valueAt(a);\n      cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n      int old_unread_count=0;\n      int old_mentions_count=0;\n      if (cursor.next()) {\n        old_unread_count=cursor.intValue(0);\n        old_mentions_count=cursor.intValue(1);\n      }\n      cursor.dispose();\n      dialogsIds.add(did);\n      SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n      state.requery();\n      state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n      state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n      state.bindLong(3,did);\n      state.step();\n      state.dispose();\n    }\n    for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n      long did=messagesByDialogs.keyAt(a);\n      ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n      int lowerId=(int)did;\n      String idsStr=TextUtils.join(\",\",mids);\n      if (lowerId != 0) {\n        if (lowerId < 0) {\n          database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n      int updatedCount=0;\n      cursor=database.queryFinalized(\"SELECT changes()\");\n      if (cursor.next()) {\n        updatedCount=cursor.intValue(0);\n      }\n      cursor.dispose();\n      if (updatedCount > 0) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n        if (cursor.next()) {\n          int count=cursor.intValue(0);\n          SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n          state.requery();\n          state.bindInteger(1,Math.max(0,count - updatedCount));\n          state.bindLong(2,did);\n          state.step();\n          state.dispose();\n        }\n        cursor.dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    if (temp.isEmpty()) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n      SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n      while (cursor.next()) {\n        long uid=cursor.longValue(0);\n        int type=cursor.intValue(1);\n        if (mediaCounts == null) {\n          mediaCounts=new SparseArray<>();\n        }\n        LongSparseArray<Integer> counts=mediaCounts.get(type);\n        Integer count;\n        if (counts == null) {\n          counts=new LongSparseArray<>();\n          count=0;\n          mediaCounts.put(type,counts);\n        }\n else {\n          count=counts.get(uid);\n        }\n        if (count == null) {\n          count=0;\n        }\n        count++;\n        counts.put(uid,count);\n      }\n      cursor.dispose();\n      if (mediaCounts != null) {\n        SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n        for (int a=0; a < mediaCounts.size(); a++) {\n          int type=mediaCounts.keyAt(a);\n          LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n          for (int b=0; b < value.size(); b++) {\n            long uid=value.keyAt(b);\n            int lower_part=(int)uid;\n            int count=-1;\n            int old=0;\n            cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n            if (cursor.next()) {\n              count=cursor.intValue(0);\n              old=cursor.intValue(1);\n            }\n            cursor.dispose();\n            if (count != -1) {\n              state.requery();\n              count=Math.max(0,count - value.valueAt(b));\n              state.bindLong(1,uid);\n              state.bindInteger(2,type);\n              state.bindInteger(3,count);\n              state.bindInteger(4,old);\n              state.step();\n            }\n          }\n        }\n        state.dispose();\n      }\n    }\n else {\n      if (channelId == 0) {\n        database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    getMediaDataController().clearBotKeyboard(0,messages);\n    if (dialogsToUpdate.size() != 0) {\n      resetAllUnreadCounters(false);\n    }\n  }\n  return dialogsIds;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1450,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13170,
        "startLineNumber" : 8865,
        "startColumnNumber" : 8,
        "endLineNumber" : 9105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ArrayList<Long> dialogsIds=new ArrayList<>();\n  if (scheduled) {\n    String ids;\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        if (!dialogsToUpdate.contains(did)) {\n          dialogsToUpdate.add(did);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n      broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n    }\n  }\n else {\n    String ids;\n    final ArrayList<Integer> temp=new ArrayList<>(messages);\n    LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n    LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<File> filesToDelete=new ArrayList<>();\n    ArrayList<String> namesToDelete=new ArrayList<>();\n    ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n    int currentUser=getUserConfig().getClientUserId();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        int mid=cursor.intValue(5);\n        temp.remove((Integer)mid);\n        ArrayList<Integer> mids=messagesByDialogs.get(did);\n        if (mids == null) {\n          mids=new ArrayList<>();\n          messagesByDialogs.put(did,mids);\n        }\n        mids.add(mid);\n        if (did != currentUser) {\n          int read_state=cursor.intValue(2);\n          if (cursor.intValue(3) == 0) {\n            Integer[] unread_count=dialogsToUpdate.get(did);\n            if (unread_count == null) {\n              unread_count=new Integer[]{0,0};\n              dialogsToUpdate.put(did,unread_count);\n            }\n            if (read_state < 2) {\n              unread_count[1]++;\n            }\n            if (read_state == 0 || read_state == 2) {\n              unread_count[0]++;\n            }\n          }\n        }\n        if ((int)did != 0 && !deleteFiles) {\n          continue;\n        }\n        NativeByteBuffer data=cursor.byteBufferValue(1);\n        if (data != null) {\n          TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n          message.readAttachPath(data,getUserConfig().clientUserId);\n          data.reuse();\n          addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    deleteFromDownloadQueue(idsToDelete,true);\n    AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n    getFileLoader().deleteFiles(filesToDelete,0);\n    for (int a=0; a < dialogsToUpdate.size(); a++) {\n      long did=dialogsToUpdate.keyAt(a);\n      Integer[] counts=dialogsToUpdate.valueAt(a);\n      cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n      int old_unread_count=0;\n      int old_mentions_count=0;\n      if (cursor.next()) {\n        old_unread_count=cursor.intValue(0);\n        old_mentions_count=cursor.intValue(1);\n      }\n      cursor.dispose();\n      dialogsIds.add(did);\n      SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n      state.requery();\n      state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n      state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n      state.bindLong(3,did);\n      state.step();\n      state.dispose();\n    }\n    for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n      long did=messagesByDialogs.keyAt(a);\n      ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n      int lowerId=(int)did;\n      String idsStr=TextUtils.join(\",\",mids);\n      if (lowerId != 0) {\n        if (lowerId < 0) {\n          database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n      int updatedCount=0;\n      cursor=database.queryFinalized(\"SELECT changes()\");\n      if (cursor.next()) {\n        updatedCount=cursor.intValue(0);\n      }\n      cursor.dispose();\n      if (updatedCount > 0) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n        if (cursor.next()) {\n          int count=cursor.intValue(0);\n          SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n          state.requery();\n          state.bindInteger(1,Math.max(0,count - updatedCount));\n          state.bindLong(2,did);\n          state.step();\n          state.dispose();\n        }\n        cursor.dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    if (temp.isEmpty()) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n      SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n      while (cursor.next()) {\n        long uid=cursor.longValue(0);\n        int type=cursor.intValue(1);\n        if (mediaCounts == null) {\n          mediaCounts=new SparseArray<>();\n        }\n        LongSparseArray<Integer> counts=mediaCounts.get(type);\n        Integer count;\n        if (counts == null) {\n          counts=new LongSparseArray<>();\n          count=0;\n          mediaCounts.put(type,counts);\n        }\n else {\n          count=counts.get(uid);\n        }\n        if (count == null) {\n          count=0;\n        }\n        count++;\n        counts.put(uid,count);\n      }\n      cursor.dispose();\n      if (mediaCounts != null) {\n        SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n        for (int a=0; a < mediaCounts.size(); a++) {\n          int type=mediaCounts.keyAt(a);\n          LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n          for (int b=0; b < value.size(); b++) {\n            long uid=value.keyAt(b);\n            int lower_part=(int)uid;\n            int count=-1;\n            int old=0;\n            cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n            if (cursor.next()) {\n              count=cursor.intValue(0);\n              old=cursor.intValue(1);\n            }\n            cursor.dispose();\n            if (count != -1) {\n              state.requery();\n              count=Math.max(0,count - value.valueAt(b));\n              state.bindLong(1,uid);\n              state.bindInteger(2,type);\n              state.bindInteger(3,count);\n              state.bindInteger(4,old);\n              state.step();\n            }\n          }\n        }\n        state.dispose();\n      }\n    }\n else {\n      if (channelId == 0) {\n        database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    getMediaDataController().clearBotKeyboard(0,messages);\n    if (dialogsToUpdate.size() != 0) {\n      resetAllUnreadCounters(false);\n    }\n  }\n  return dialogsIds;\n}\n catch (Exception e) {\n  FileLog.e(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 1462,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13207,
        "startLineNumber" : 8864,
        "startColumnNumber" : 148,
        "endLineNumber" : 9107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    ArrayList<Long> dialogsIds=new ArrayList<>();\n    if (scheduled) {\n      String ids;\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          if (!dialogsToUpdate.contains(did)) {\n            dialogsToUpdate.add(did);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n        broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n      }\n    }\n else {\n      String ids;\n      final ArrayList<Integer> temp=new ArrayList<>(messages);\n      LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n      LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<File> filesToDelete=new ArrayList<>();\n      ArrayList<String> namesToDelete=new ArrayList<>();\n      ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n      int currentUser=getUserConfig().getClientUserId();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          int mid=cursor.intValue(5);\n          temp.remove((Integer)mid);\n          ArrayList<Integer> mids=messagesByDialogs.get(did);\n          if (mids == null) {\n            mids=new ArrayList<>();\n            messagesByDialogs.put(did,mids);\n          }\n          mids.add(mid);\n          if (did != currentUser) {\n            int read_state=cursor.intValue(2);\n            if (cursor.intValue(3) == 0) {\n              Integer[] unread_count=dialogsToUpdate.get(did);\n              if (unread_count == null) {\n                unread_count=new Integer[]{0,0};\n                dialogsToUpdate.put(did,unread_count);\n              }\n              if (read_state < 2) {\n                unread_count[1]++;\n              }\n              if (read_state == 0 || read_state == 2) {\n                unread_count[0]++;\n              }\n            }\n          }\n          if ((int)did != 0 && !deleteFiles) {\n            continue;\n          }\n          NativeByteBuffer data=cursor.byteBufferValue(1);\n          if (data != null) {\n            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n            message.readAttachPath(data,getUserConfig().clientUserId);\n            data.reuse();\n            addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      deleteFromDownloadQueue(idsToDelete,true);\n      AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n      getFileLoader().deleteFiles(filesToDelete,0);\n      for (int a=0; a < dialogsToUpdate.size(); a++) {\n        long did=dialogsToUpdate.keyAt(a);\n        Integer[] counts=dialogsToUpdate.valueAt(a);\n        cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n        int old_unread_count=0;\n        int old_mentions_count=0;\n        if (cursor.next()) {\n          old_unread_count=cursor.intValue(0);\n          old_mentions_count=cursor.intValue(1);\n        }\n        cursor.dispose();\n        dialogsIds.add(did);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n        state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n        state.bindLong(3,did);\n        state.step();\n        state.dispose();\n      }\n      for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n        long did=messagesByDialogs.keyAt(a);\n        ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n        int lowerId=(int)did;\n        String idsStr=TextUtils.join(\",\",mids);\n        if (lowerId != 0) {\n          if (lowerId < 0) {\n            database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n          }\n else {\n            database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n          }\n        }\n        database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n        int updatedCount=0;\n        cursor=database.queryFinalized(\"SELECT changes()\");\n        if (cursor.next()) {\n          updatedCount=cursor.intValue(0);\n        }\n        cursor.dispose();\n        if (updatedCount > 0) {\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n          if (cursor.next()) {\n            int count=cursor.intValue(0);\n            SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n            state.requery();\n            state.bindInteger(1,Math.max(0,count - updatedCount));\n            state.bindLong(2,did);\n            state.step();\n            state.dispose();\n          }\n          cursor.dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      if (temp.isEmpty()) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n        SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n        while (cursor.next()) {\n          long uid=cursor.longValue(0);\n          int type=cursor.intValue(1);\n          if (mediaCounts == null) {\n            mediaCounts=new SparseArray<>();\n          }\n          LongSparseArray<Integer> counts=mediaCounts.get(type);\n          Integer count;\n          if (counts == null) {\n            counts=new LongSparseArray<>();\n            count=0;\n            mediaCounts.put(type,counts);\n          }\n else {\n            count=counts.get(uid);\n          }\n          if (count == null) {\n            count=0;\n          }\n          count++;\n          counts.put(uid,count);\n        }\n        cursor.dispose();\n        if (mediaCounts != null) {\n          SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n          for (int a=0; a < mediaCounts.size(); a++) {\n            int type=mediaCounts.keyAt(a);\n            LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n            for (int b=0; b < value.size(); b++) {\n              long uid=value.keyAt(b);\n              int lower_part=(int)uid;\n              int count=-1;\n              int old=0;\n              cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n              if (cursor.next()) {\n                count=cursor.intValue(0);\n                old=cursor.intValue(1);\n              }\n              cursor.dispose();\n              if (count != -1) {\n                state.requery();\n                count=Math.max(0,count - value.valueAt(b));\n                state.bindLong(1,uid);\n                state.bindInteger(2,type);\n                state.bindInteger(3,count);\n                state.bindInteger(4,old);\n                state.step();\n              }\n            }\n          }\n          state.dispose();\n        }\n      }\n else {\n        if (channelId == 0) {\n          database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      getMediaDataController().clearBotKeyboard(0,messages);\n      if (dialogsToUpdate.size() != 0) {\n        resetAllUnreadCounters(false);\n      }\n    }\n    return dialogsIds;\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1465,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 13351,
        "startLineNumber" : 8864,
        "startColumnNumber" : 4,
        "endLineNumber" : 9107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private ArrayList<Long> markMessagesAsDeletedInternal(final ArrayList<Integer> messages,int channelId,boolean deleteFiles,boolean scheduled){\n  try {\n    ArrayList<Long> dialogsIds=new ArrayList<>();\n    if (scheduled) {\n      String ids;\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          if (!dialogsToUpdate.contains(did)) {\n            dialogsToUpdate.add(did);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n        broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n      }\n    }\n else {\n      String ids;\n      final ArrayList<Integer> temp=new ArrayList<>(messages);\n      LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n      LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<File> filesToDelete=new ArrayList<>();\n      ArrayList<String> namesToDelete=new ArrayList<>();\n      ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n      int currentUser=getUserConfig().getClientUserId();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          int mid=cursor.intValue(5);\n          temp.remove((Integer)mid);\n          ArrayList<Integer> mids=messagesByDialogs.get(did);\n          if (mids == null) {\n            mids=new ArrayList<>();\n            messagesByDialogs.put(did,mids);\n          }\n          mids.add(mid);\n          if (did != currentUser) {\n            int read_state=cursor.intValue(2);\n            if (cursor.intValue(3) == 0) {\n              Integer[] unread_count=dialogsToUpdate.get(did);\n              if (unread_count == null) {\n                unread_count=new Integer[]{0,0};\n                dialogsToUpdate.put(did,unread_count);\n              }\n              if (read_state < 2) {\n                unread_count[1]++;\n              }\n              if (read_state == 0 || read_state == 2) {\n                unread_count[0]++;\n              }\n            }\n          }\n          if ((int)did != 0 && !deleteFiles) {\n            continue;\n          }\n          NativeByteBuffer data=cursor.byteBufferValue(1);\n          if (data != null) {\n            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n            message.readAttachPath(data,getUserConfig().clientUserId);\n            data.reuse();\n            addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      deleteFromDownloadQueue(idsToDelete,true);\n      AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n      getFileLoader().deleteFiles(filesToDelete,0);\n      for (int a=0; a < dialogsToUpdate.size(); a++) {\n        long did=dialogsToUpdate.keyAt(a);\n        Integer[] counts=dialogsToUpdate.valueAt(a);\n        cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n        int old_unread_count=0;\n        int old_mentions_count=0;\n        if (cursor.next()) {\n          old_unread_count=cursor.intValue(0);\n          old_mentions_count=cursor.intValue(1);\n        }\n        cursor.dispose();\n        dialogsIds.add(did);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n        state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n        state.bindLong(3,did);\n        state.step();\n        state.dispose();\n      }\n      for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n        long did=messagesByDialogs.keyAt(a);\n        ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n        int lowerId=(int)did;\n        String idsStr=TextUtils.join(\",\",mids);\n        if (lowerId != 0) {\n          if (lowerId < 0) {\n            database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n          }\n else {\n            database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n          }\n        }\n        database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n        int updatedCount=0;\n        cursor=database.queryFinalized(\"SELECT changes()\");\n        if (cursor.next()) {\n          updatedCount=cursor.intValue(0);\n        }\n        cursor.dispose();\n        if (updatedCount > 0) {\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n          if (cursor.next()) {\n            int count=cursor.intValue(0);\n            SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n            state.requery();\n            state.bindInteger(1,Math.max(0,count - updatedCount));\n            state.bindLong(2,did);\n            state.step();\n            state.dispose();\n          }\n          cursor.dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      if (temp.isEmpty()) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n        SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n        while (cursor.next()) {\n          long uid=cursor.longValue(0);\n          int type=cursor.intValue(1);\n          if (mediaCounts == null) {\n            mediaCounts=new SparseArray<>();\n          }\n          LongSparseArray<Integer> counts=mediaCounts.get(type);\n          Integer count;\n          if (counts == null) {\n            counts=new LongSparseArray<>();\n            count=0;\n            mediaCounts.put(type,counts);\n          }\n else {\n            count=counts.get(uid);\n          }\n          if (count == null) {\n            count=0;\n          }\n          count++;\n          counts.put(uid,count);\n        }\n        cursor.dispose();\n        if (mediaCounts != null) {\n          SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n          for (int a=0; a < mediaCounts.size(); a++) {\n            int type=mediaCounts.keyAt(a);\n            LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n            for (int b=0; b < value.size(); b++) {\n              long uid=value.keyAt(b);\n              int lower_part=(int)uid;\n              int count=-1;\n              int old=0;\n              cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n              if (cursor.next()) {\n                count=cursor.intValue(0);\n                old=cursor.intValue(1);\n              }\n              cursor.dispose();\n              if (count != -1) {\n                state.requery();\n                count=Math.max(0,count - value.valueAt(b));\n                state.bindLong(1,uid);\n                state.bindInteger(2,type);\n                state.bindInteger(3,count);\n                state.bindInteger(4,old);\n                state.step();\n              }\n            }\n          }\n          state.dispose();\n        }\n      }\n else {\n        if (channelId == 0) {\n          database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      getMediaDataController().clearBotKeyboard(0,messages);\n      if (dialogsToUpdate.size() != 0) {\n        resetAllUnreadCounters(false);\n      }\n    }\n    return dialogsIds;\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1490,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 9040,
        "startColumnNumber" : 28,
        "endLineNumber" : 9040,
        "endColumnNumber" : 47
      },
      "nodeContext" : "mediaCounts == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.SparseArray<org.telegram.messenger.LongSparseArray<java.lang.Integer>>"
  }, {
    "nodeContext" : "mediaCounts",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 9043,
      "startColumnNumber" : 58,
      "endLineNumber" : 9043,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 9043,
        "startColumnNumber" : 58,
        "endLineNumber" : 9043,
        "endColumnNumber" : 79
      },
      "nodeContext" : "mediaCounts.get(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 9043,
        "startColumnNumber" : 49,
        "endLineNumber" : 9043,
        "endColumnNumber" : 79
      },
      "nodeContext" : "counts=mediaCounts.get(type)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 9043,
        "startColumnNumber" : 24,
        "endLineNumber" : 9043,
        "endColumnNumber" : 80
      },
      "nodeContext" : "LongSparseArray<Integer> counts=mediaCounts.get(type);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 903,
        "startLineNumber" : 9037,
        "startColumnNumber" : 42,
        "endLineNumber" : 9057,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  long uid=cursor.longValue(0);\n  int type=cursor.intValue(1);\n  if (mediaCounts == null) {\n    mediaCounts=new SparseArray<>();\n  }\n  LongSparseArray<Integer> counts=mediaCounts.get(type);\n  Integer count;\n  if (counts == null) {\n    counts=new LongSparseArray<>();\n    count=0;\n    mediaCounts.put(type,counts);\n  }\n else {\n    count=counts.get(uid);\n  }\n  if (count == null) {\n    count=0;\n  }\n  count++;\n  counts.put(uid,count);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 9037,
        "startColumnNumber" : 20,
        "endLineNumber" : 9057,
        "endColumnNumber" : 21
      },
      "nodeContext" : "while (cursor.next()) {\n  long uid=cursor.longValue(0);\n  int type=cursor.intValue(1);\n  if (mediaCounts == null) {\n    mediaCounts=new SparseArray<>();\n  }\n  LongSparseArray<Integer> counts=mediaCounts.get(type);\n  Integer count;\n  if (counts == null) {\n    counts=new LongSparseArray<>();\n    count=0;\n    mediaCounts.put(type,counts);\n  }\n else {\n    count=counts.get(uid);\n  }\n  if (count == null) {\n    count=0;\n  }\n  count++;\n  counts.put(uid,count);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 98,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2978,
        "startLineNumber" : 9034,
        "startColumnNumber" : 36,
        "endLineNumber" : 9088,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n  SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n  while (cursor.next()) {\n    long uid=cursor.longValue(0);\n    int type=cursor.intValue(1);\n    if (mediaCounts == null) {\n      mediaCounts=new SparseArray<>();\n    }\n    LongSparseArray<Integer> counts=mediaCounts.get(type);\n    Integer count;\n    if (counts == null) {\n      counts=new LongSparseArray<>();\n      count=0;\n      mediaCounts.put(type,counts);\n    }\n else {\n      count=counts.get(uid);\n    }\n    if (count == null) {\n      count=0;\n    }\n    count++;\n    counts.put(uid,count);\n  }\n  cursor.dispose();\n  if (mediaCounts != null) {\n    SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n    for (int a=0; a < mediaCounts.size(); a++) {\n      int type=mediaCounts.keyAt(a);\n      LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n      for (int b=0; b < value.size(); b++) {\n        long uid=value.keyAt(b);\n        int lower_part=(int)uid;\n        int count=-1;\n        int old=0;\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n        if (cursor.next()) {\n          count=cursor.intValue(0);\n          old=cursor.intValue(1);\n        }\n        cursor.dispose();\n        if (count != -1) {\n          state.requery();\n          count=Math.max(0,count - value.valueAt(b));\n          state.bindLong(1,uid);\n          state.bindInteger(2,type);\n          state.bindInteger(3,count);\n          state.bindInteger(4,old);\n          state.step();\n        }\n      }\n    }\n    state.dispose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3387,
        "startLineNumber" : 9034,
        "startColumnNumber" : 16,
        "endLineNumber" : 9094,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (temp.isEmpty()) {\n  cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n  SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n  while (cursor.next()) {\n    long uid=cursor.longValue(0);\n    int type=cursor.intValue(1);\n    if (mediaCounts == null) {\n      mediaCounts=new SparseArray<>();\n    }\n    LongSparseArray<Integer> counts=mediaCounts.get(type);\n    Integer count;\n    if (counts == null) {\n      counts=new LongSparseArray<>();\n      count=0;\n      mediaCounts.put(type,counts);\n    }\n else {\n      count=counts.get(uid);\n    }\n    if (count == null) {\n      count=0;\n    }\n    count++;\n    counts.put(uid,count);\n  }\n  cursor.dispose();\n  if (mediaCounts != null) {\n    SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n    for (int a=0; a < mediaCounts.size(); a++) {\n      int type=mediaCounts.keyAt(a);\n      LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n      for (int b=0; b < value.size(); b++) {\n        long uid=value.keyAt(b);\n        int lower_part=(int)uid;\n        int count=-1;\n        int old=0;\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n        if (cursor.next()) {\n          count=cursor.intValue(0);\n          old=cursor.intValue(1);\n        }\n        cursor.dispose();\n        if (count != -1) {\n          state.requery();\n          count=Math.max(0,count - value.valueAt(b));\n          state.bindLong(1,uid);\n          state.bindInteger(2,type);\n          state.bindInteger(3,count);\n          state.bindInteger(4,old);\n          state.step();\n        }\n      }\n    }\n    state.dispose();\n  }\n}\n else {\n  if (channelId == 0) {\n    database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n  }\n else {\n    database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 347,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 11336,
        "startLineNumber" : 8903,
        "startColumnNumber" : 19,
        "endLineNumber" : 9101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String ids;\n  final ArrayList<Integer> temp=new ArrayList<>(messages);\n  LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n  LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<File> filesToDelete=new ArrayList<>();\n  ArrayList<String> namesToDelete=new ArrayList<>();\n  ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n  int currentUser=getUserConfig().getClientUserId();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      int mid=cursor.intValue(5);\n      temp.remove((Integer)mid);\n      ArrayList<Integer> mids=messagesByDialogs.get(did);\n      if (mids == null) {\n        mids=new ArrayList<>();\n        messagesByDialogs.put(did,mids);\n      }\n      mids.add(mid);\n      if (did != currentUser) {\n        int read_state=cursor.intValue(2);\n        if (cursor.intValue(3) == 0) {\n          Integer[] unread_count=dialogsToUpdate.get(did);\n          if (unread_count == null) {\n            unread_count=new Integer[]{0,0};\n            dialogsToUpdate.put(did,unread_count);\n          }\n          if (read_state < 2) {\n            unread_count[1]++;\n          }\n          if (read_state == 0 || read_state == 2) {\n            unread_count[0]++;\n          }\n        }\n      }\n      if ((int)did != 0 && !deleteFiles) {\n        continue;\n      }\n      NativeByteBuffer data=cursor.byteBufferValue(1);\n      if (data != null) {\n        TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n        message.readAttachPath(data,getUserConfig().clientUserId);\n        data.reuse();\n        addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  deleteFromDownloadQueue(idsToDelete,true);\n  AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n  getFileLoader().deleteFiles(filesToDelete,0);\n  for (int a=0; a < dialogsToUpdate.size(); a++) {\n    long did=dialogsToUpdate.keyAt(a);\n    Integer[] counts=dialogsToUpdate.valueAt(a);\n    cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n    int old_unread_count=0;\n    int old_mentions_count=0;\n    if (cursor.next()) {\n      old_unread_count=cursor.intValue(0);\n      old_mentions_count=cursor.intValue(1);\n    }\n    cursor.dispose();\n    dialogsIds.add(did);\n    SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n    state.requery();\n    state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n    state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n    state.bindLong(3,did);\n    state.step();\n    state.dispose();\n  }\n  for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n    long did=messagesByDialogs.keyAt(a);\n    ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n    int lowerId=(int)did;\n    String idsStr=TextUtils.join(\",\",mids);\n    if (lowerId != 0) {\n      if (lowerId < 0) {\n        database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n    int updatedCount=0;\n    cursor=database.queryFinalized(\"SELECT changes()\");\n    if (cursor.next()) {\n      updatedCount=cursor.intValue(0);\n    }\n    cursor.dispose();\n    if (updatedCount > 0) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n      if (cursor.next()) {\n        int count=cursor.intValue(0);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,count - updatedCount));\n        state.bindLong(2,did);\n        state.step();\n        state.dispose();\n      }\n      cursor.dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  if (temp.isEmpty()) {\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n    SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n    while (cursor.next()) {\n      long uid=cursor.longValue(0);\n      int type=cursor.intValue(1);\n      if (mediaCounts == null) {\n        mediaCounts=new SparseArray<>();\n      }\n      LongSparseArray<Integer> counts=mediaCounts.get(type);\n      Integer count;\n      if (counts == null) {\n        counts=new LongSparseArray<>();\n        count=0;\n        mediaCounts.put(type,counts);\n      }\n else {\n        count=counts.get(uid);\n      }\n      if (count == null) {\n        count=0;\n      }\n      count++;\n      counts.put(uid,count);\n    }\n    cursor.dispose();\n    if (mediaCounts != null) {\n      SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n      for (int a=0; a < mediaCounts.size(); a++) {\n        int type=mediaCounts.keyAt(a);\n        LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n        for (int b=0; b < value.size(); b++) {\n          long uid=value.keyAt(b);\n          int lower_part=(int)uid;\n          int count=-1;\n          int old=0;\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n          if (cursor.next()) {\n            count=cursor.intValue(0);\n            old=cursor.intValue(1);\n          }\n          cursor.dispose();\n          if (count != -1) {\n            state.requery();\n            count=Math.max(0,count - value.valueAt(b));\n            state.bindLong(1,uid);\n            state.bindInteger(2,type);\n            state.bindInteger(3,count);\n            state.bindInteger(4,old);\n            state.step();\n          }\n        }\n      }\n      state.dispose();\n    }\n  }\n else {\n    if (channelId == 0) {\n      database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n    }\n else {\n      database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  getMediaDataController().clearBotKeyboard(0,messages);\n  if (dialogsToUpdate.size() != 0) {\n    resetAllUnreadCounters(false);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1238,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12993,
        "startLineNumber" : 8867,
        "startColumnNumber" : 12,
        "endLineNumber" : 9101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (scheduled) {\n  String ids;\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      if (!dialogsToUpdate.contains(did)) {\n        dialogsToUpdate.add(did);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n    broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n  }\n}\n else {\n  String ids;\n  final ArrayList<Integer> temp=new ArrayList<>(messages);\n  LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n  LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<File> filesToDelete=new ArrayList<>();\n  ArrayList<String> namesToDelete=new ArrayList<>();\n  ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n  int currentUser=getUserConfig().getClientUserId();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      int mid=cursor.intValue(5);\n      temp.remove((Integer)mid);\n      ArrayList<Integer> mids=messagesByDialogs.get(did);\n      if (mids == null) {\n        mids=new ArrayList<>();\n        messagesByDialogs.put(did,mids);\n      }\n      mids.add(mid);\n      if (did != currentUser) {\n        int read_state=cursor.intValue(2);\n        if (cursor.intValue(3) == 0) {\n          Integer[] unread_count=dialogsToUpdate.get(did);\n          if (unread_count == null) {\n            unread_count=new Integer[]{0,0};\n            dialogsToUpdate.put(did,unread_count);\n          }\n          if (read_state < 2) {\n            unread_count[1]++;\n          }\n          if (read_state == 0 || read_state == 2) {\n            unread_count[0]++;\n          }\n        }\n      }\n      if ((int)did != 0 && !deleteFiles) {\n        continue;\n      }\n      NativeByteBuffer data=cursor.byteBufferValue(1);\n      if (data != null) {\n        TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n        message.readAttachPath(data,getUserConfig().clientUserId);\n        data.reuse();\n        addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  deleteFromDownloadQueue(idsToDelete,true);\n  AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n  getFileLoader().deleteFiles(filesToDelete,0);\n  for (int a=0; a < dialogsToUpdate.size(); a++) {\n    long did=dialogsToUpdate.keyAt(a);\n    Integer[] counts=dialogsToUpdate.valueAt(a);\n    cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n    int old_unread_count=0;\n    int old_mentions_count=0;\n    if (cursor.next()) {\n      old_unread_count=cursor.intValue(0);\n      old_mentions_count=cursor.intValue(1);\n    }\n    cursor.dispose();\n    dialogsIds.add(did);\n    SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n    state.requery();\n    state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n    state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n    state.bindLong(3,did);\n    state.step();\n    state.dispose();\n  }\n  for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n    long did=messagesByDialogs.keyAt(a);\n    ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n    int lowerId=(int)did;\n    String idsStr=TextUtils.join(\",\",mids);\n    if (lowerId != 0) {\n      if (lowerId < 0) {\n        database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n    int updatedCount=0;\n    cursor=database.queryFinalized(\"SELECT changes()\");\n    if (cursor.next()) {\n      updatedCount=cursor.intValue(0);\n    }\n    cursor.dispose();\n    if (updatedCount > 0) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n      if (cursor.next()) {\n        int count=cursor.intValue(0);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,count - updatedCount));\n        state.bindLong(2,did);\n        state.step();\n        state.dispose();\n      }\n      cursor.dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  if (temp.isEmpty()) {\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n    SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n    while (cursor.next()) {\n      long uid=cursor.longValue(0);\n      int type=cursor.intValue(1);\n      if (mediaCounts == null) {\n        mediaCounts=new SparseArray<>();\n      }\n      LongSparseArray<Integer> counts=mediaCounts.get(type);\n      Integer count;\n      if (counts == null) {\n        counts=new LongSparseArray<>();\n        count=0;\n        mediaCounts.put(type,counts);\n      }\n else {\n        count=counts.get(uid);\n      }\n      if (count == null) {\n        count=0;\n      }\n      count++;\n      counts.put(uid,count);\n    }\n    cursor.dispose();\n    if (mediaCounts != null) {\n      SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n      for (int a=0; a < mediaCounts.size(); a++) {\n        int type=mediaCounts.keyAt(a);\n        LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n        for (int b=0; b < value.size(); b++) {\n          long uid=value.keyAt(b);\n          int lower_part=(int)uid;\n          int count=-1;\n          int old=0;\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n          if (cursor.next()) {\n            count=cursor.intValue(0);\n            old=cursor.intValue(1);\n          }\n          cursor.dispose();\n          if (count != -1) {\n            state.requery();\n            count=Math.max(0,count - value.valueAt(b));\n            state.bindLong(1,uid);\n            state.bindInteger(2,type);\n            state.bindInteger(3,count);\n            state.bindInteger(4,old);\n            state.step();\n          }\n        }\n      }\n      state.dispose();\n    }\n  }\n else {\n    if (channelId == 0) {\n      database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n    }\n else {\n      database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  getMediaDataController().clearBotKeyboard(0,messages);\n  if (dialogsToUpdate.size() != 0) {\n    resetAllUnreadCounters(false);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1435,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 13108,
        "startLineNumber" : 8865,
        "startColumnNumber" : 12,
        "endLineNumber" : 9103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ArrayList<Long> dialogsIds=new ArrayList<>();\n  if (scheduled) {\n    String ids;\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        if (!dialogsToUpdate.contains(did)) {\n          dialogsToUpdate.add(did);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n      broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n    }\n  }\n else {\n    String ids;\n    final ArrayList<Integer> temp=new ArrayList<>(messages);\n    LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n    LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<File> filesToDelete=new ArrayList<>();\n    ArrayList<String> namesToDelete=new ArrayList<>();\n    ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n    int currentUser=getUserConfig().getClientUserId();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        int mid=cursor.intValue(5);\n        temp.remove((Integer)mid);\n        ArrayList<Integer> mids=messagesByDialogs.get(did);\n        if (mids == null) {\n          mids=new ArrayList<>();\n          messagesByDialogs.put(did,mids);\n        }\n        mids.add(mid);\n        if (did != currentUser) {\n          int read_state=cursor.intValue(2);\n          if (cursor.intValue(3) == 0) {\n            Integer[] unread_count=dialogsToUpdate.get(did);\n            if (unread_count == null) {\n              unread_count=new Integer[]{0,0};\n              dialogsToUpdate.put(did,unread_count);\n            }\n            if (read_state < 2) {\n              unread_count[1]++;\n            }\n            if (read_state == 0 || read_state == 2) {\n              unread_count[0]++;\n            }\n          }\n        }\n        if ((int)did != 0 && !deleteFiles) {\n          continue;\n        }\n        NativeByteBuffer data=cursor.byteBufferValue(1);\n        if (data != null) {\n          TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n          message.readAttachPath(data,getUserConfig().clientUserId);\n          data.reuse();\n          addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    deleteFromDownloadQueue(idsToDelete,true);\n    AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n    getFileLoader().deleteFiles(filesToDelete,0);\n    for (int a=0; a < dialogsToUpdate.size(); a++) {\n      long did=dialogsToUpdate.keyAt(a);\n      Integer[] counts=dialogsToUpdate.valueAt(a);\n      cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n      int old_unread_count=0;\n      int old_mentions_count=0;\n      if (cursor.next()) {\n        old_unread_count=cursor.intValue(0);\n        old_mentions_count=cursor.intValue(1);\n      }\n      cursor.dispose();\n      dialogsIds.add(did);\n      SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n      state.requery();\n      state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n      state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n      state.bindLong(3,did);\n      state.step();\n      state.dispose();\n    }\n    for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n      long did=messagesByDialogs.keyAt(a);\n      ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n      int lowerId=(int)did;\n      String idsStr=TextUtils.join(\",\",mids);\n      if (lowerId != 0) {\n        if (lowerId < 0) {\n          database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n      int updatedCount=0;\n      cursor=database.queryFinalized(\"SELECT changes()\");\n      if (cursor.next()) {\n        updatedCount=cursor.intValue(0);\n      }\n      cursor.dispose();\n      if (updatedCount > 0) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n        if (cursor.next()) {\n          int count=cursor.intValue(0);\n          SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n          state.requery();\n          state.bindInteger(1,Math.max(0,count - updatedCount));\n          state.bindLong(2,did);\n          state.step();\n          state.dispose();\n        }\n        cursor.dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    if (temp.isEmpty()) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n      SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n      while (cursor.next()) {\n        long uid=cursor.longValue(0);\n        int type=cursor.intValue(1);\n        if (mediaCounts == null) {\n          mediaCounts=new SparseArray<>();\n        }\n        LongSparseArray<Integer> counts=mediaCounts.get(type);\n        Integer count;\n        if (counts == null) {\n          counts=new LongSparseArray<>();\n          count=0;\n          mediaCounts.put(type,counts);\n        }\n else {\n          count=counts.get(uid);\n        }\n        if (count == null) {\n          count=0;\n        }\n        count++;\n        counts.put(uid,count);\n      }\n      cursor.dispose();\n      if (mediaCounts != null) {\n        SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n        for (int a=0; a < mediaCounts.size(); a++) {\n          int type=mediaCounts.keyAt(a);\n          LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n          for (int b=0; b < value.size(); b++) {\n            long uid=value.keyAt(b);\n            int lower_part=(int)uid;\n            int count=-1;\n            int old=0;\n            cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n            if (cursor.next()) {\n              count=cursor.intValue(0);\n              old=cursor.intValue(1);\n            }\n            cursor.dispose();\n            if (count != -1) {\n              state.requery();\n              count=Math.max(0,count - value.valueAt(b));\n              state.bindLong(1,uid);\n              state.bindInteger(2,type);\n              state.bindInteger(3,count);\n              state.bindInteger(4,old);\n              state.step();\n            }\n          }\n        }\n        state.dispose();\n      }\n    }\n else {\n      if (channelId == 0) {\n        database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    getMediaDataController().clearBotKeyboard(0,messages);\n    if (dialogsToUpdate.size() != 0) {\n      resetAllUnreadCounters(false);\n    }\n  }\n  return dialogsIds;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1450,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13170,
        "startLineNumber" : 8865,
        "startColumnNumber" : 8,
        "endLineNumber" : 9105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ArrayList<Long> dialogsIds=new ArrayList<>();\n  if (scheduled) {\n    String ids;\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        if (!dialogsToUpdate.contains(did)) {\n          dialogsToUpdate.add(did);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n      broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n    }\n  }\n else {\n    String ids;\n    final ArrayList<Integer> temp=new ArrayList<>(messages);\n    LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n    LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<File> filesToDelete=new ArrayList<>();\n    ArrayList<String> namesToDelete=new ArrayList<>();\n    ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n    int currentUser=getUserConfig().getClientUserId();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        int mid=cursor.intValue(5);\n        temp.remove((Integer)mid);\n        ArrayList<Integer> mids=messagesByDialogs.get(did);\n        if (mids == null) {\n          mids=new ArrayList<>();\n          messagesByDialogs.put(did,mids);\n        }\n        mids.add(mid);\n        if (did != currentUser) {\n          int read_state=cursor.intValue(2);\n          if (cursor.intValue(3) == 0) {\n            Integer[] unread_count=dialogsToUpdate.get(did);\n            if (unread_count == null) {\n              unread_count=new Integer[]{0,0};\n              dialogsToUpdate.put(did,unread_count);\n            }\n            if (read_state < 2) {\n              unread_count[1]++;\n            }\n            if (read_state == 0 || read_state == 2) {\n              unread_count[0]++;\n            }\n          }\n        }\n        if ((int)did != 0 && !deleteFiles) {\n          continue;\n        }\n        NativeByteBuffer data=cursor.byteBufferValue(1);\n        if (data != null) {\n          TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n          message.readAttachPath(data,getUserConfig().clientUserId);\n          data.reuse();\n          addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    deleteFromDownloadQueue(idsToDelete,true);\n    AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n    getFileLoader().deleteFiles(filesToDelete,0);\n    for (int a=0; a < dialogsToUpdate.size(); a++) {\n      long did=dialogsToUpdate.keyAt(a);\n      Integer[] counts=dialogsToUpdate.valueAt(a);\n      cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n      int old_unread_count=0;\n      int old_mentions_count=0;\n      if (cursor.next()) {\n        old_unread_count=cursor.intValue(0);\n        old_mentions_count=cursor.intValue(1);\n      }\n      cursor.dispose();\n      dialogsIds.add(did);\n      SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n      state.requery();\n      state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n      state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n      state.bindLong(3,did);\n      state.step();\n      state.dispose();\n    }\n    for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n      long did=messagesByDialogs.keyAt(a);\n      ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n      int lowerId=(int)did;\n      String idsStr=TextUtils.join(\",\",mids);\n      if (lowerId != 0) {\n        if (lowerId < 0) {\n          database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n      int updatedCount=0;\n      cursor=database.queryFinalized(\"SELECT changes()\");\n      if (cursor.next()) {\n        updatedCount=cursor.intValue(0);\n      }\n      cursor.dispose();\n      if (updatedCount > 0) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n        if (cursor.next()) {\n          int count=cursor.intValue(0);\n          SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n          state.requery();\n          state.bindInteger(1,Math.max(0,count - updatedCount));\n          state.bindLong(2,did);\n          state.step();\n          state.dispose();\n        }\n        cursor.dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    if (temp.isEmpty()) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n      SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n      while (cursor.next()) {\n        long uid=cursor.longValue(0);\n        int type=cursor.intValue(1);\n        if (mediaCounts == null) {\n          mediaCounts=new SparseArray<>();\n        }\n        LongSparseArray<Integer> counts=mediaCounts.get(type);\n        Integer count;\n        if (counts == null) {\n          counts=new LongSparseArray<>();\n          count=0;\n          mediaCounts.put(type,counts);\n        }\n else {\n          count=counts.get(uid);\n        }\n        if (count == null) {\n          count=0;\n        }\n        count++;\n        counts.put(uid,count);\n      }\n      cursor.dispose();\n      if (mediaCounts != null) {\n        SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n        for (int a=0; a < mediaCounts.size(); a++) {\n          int type=mediaCounts.keyAt(a);\n          LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n          for (int b=0; b < value.size(); b++) {\n            long uid=value.keyAt(b);\n            int lower_part=(int)uid;\n            int count=-1;\n            int old=0;\n            cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n            if (cursor.next()) {\n              count=cursor.intValue(0);\n              old=cursor.intValue(1);\n            }\n            cursor.dispose();\n            if (count != -1) {\n              state.requery();\n              count=Math.max(0,count - value.valueAt(b));\n              state.bindLong(1,uid);\n              state.bindInteger(2,type);\n              state.bindInteger(3,count);\n              state.bindInteger(4,old);\n              state.step();\n            }\n          }\n        }\n        state.dispose();\n      }\n    }\n else {\n      if (channelId == 0) {\n        database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    getMediaDataController().clearBotKeyboard(0,messages);\n    if (dialogsToUpdate.size() != 0) {\n      resetAllUnreadCounters(false);\n    }\n  }\n  return dialogsIds;\n}\n catch (Exception e) {\n  FileLog.e(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 1462,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13207,
        "startLineNumber" : 8864,
        "startColumnNumber" : 148,
        "endLineNumber" : 9107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    ArrayList<Long> dialogsIds=new ArrayList<>();\n    if (scheduled) {\n      String ids;\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          if (!dialogsToUpdate.contains(did)) {\n            dialogsToUpdate.add(did);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n        broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n      }\n    }\n else {\n      String ids;\n      final ArrayList<Integer> temp=new ArrayList<>(messages);\n      LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n      LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<File> filesToDelete=new ArrayList<>();\n      ArrayList<String> namesToDelete=new ArrayList<>();\n      ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n      int currentUser=getUserConfig().getClientUserId();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          int mid=cursor.intValue(5);\n          temp.remove((Integer)mid);\n          ArrayList<Integer> mids=messagesByDialogs.get(did);\n          if (mids == null) {\n            mids=new ArrayList<>();\n            messagesByDialogs.put(did,mids);\n          }\n          mids.add(mid);\n          if (did != currentUser) {\n            int read_state=cursor.intValue(2);\n            if (cursor.intValue(3) == 0) {\n              Integer[] unread_count=dialogsToUpdate.get(did);\n              if (unread_count == null) {\n                unread_count=new Integer[]{0,0};\n                dialogsToUpdate.put(did,unread_count);\n              }\n              if (read_state < 2) {\n                unread_count[1]++;\n              }\n              if (read_state == 0 || read_state == 2) {\n                unread_count[0]++;\n              }\n            }\n          }\n          if ((int)did != 0 && !deleteFiles) {\n            continue;\n          }\n          NativeByteBuffer data=cursor.byteBufferValue(1);\n          if (data != null) {\n            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n            message.readAttachPath(data,getUserConfig().clientUserId);\n            data.reuse();\n            addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      deleteFromDownloadQueue(idsToDelete,true);\n      AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n      getFileLoader().deleteFiles(filesToDelete,0);\n      for (int a=0; a < dialogsToUpdate.size(); a++) {\n        long did=dialogsToUpdate.keyAt(a);\n        Integer[] counts=dialogsToUpdate.valueAt(a);\n        cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n        int old_unread_count=0;\n        int old_mentions_count=0;\n        if (cursor.next()) {\n          old_unread_count=cursor.intValue(0);\n          old_mentions_count=cursor.intValue(1);\n        }\n        cursor.dispose();\n        dialogsIds.add(did);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n        state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n        state.bindLong(3,did);\n        state.step();\n        state.dispose();\n      }\n      for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n        long did=messagesByDialogs.keyAt(a);\n        ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n        int lowerId=(int)did;\n        String idsStr=TextUtils.join(\",\",mids);\n        if (lowerId != 0) {\n          if (lowerId < 0) {\n            database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n          }\n else {\n            database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n          }\n        }\n        database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n        int updatedCount=0;\n        cursor=database.queryFinalized(\"SELECT changes()\");\n        if (cursor.next()) {\n          updatedCount=cursor.intValue(0);\n        }\n        cursor.dispose();\n        if (updatedCount > 0) {\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n          if (cursor.next()) {\n            int count=cursor.intValue(0);\n            SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n            state.requery();\n            state.bindInteger(1,Math.max(0,count - updatedCount));\n            state.bindLong(2,did);\n            state.step();\n            state.dispose();\n          }\n          cursor.dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      if (temp.isEmpty()) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n        SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n        while (cursor.next()) {\n          long uid=cursor.longValue(0);\n          int type=cursor.intValue(1);\n          if (mediaCounts == null) {\n            mediaCounts=new SparseArray<>();\n          }\n          LongSparseArray<Integer> counts=mediaCounts.get(type);\n          Integer count;\n          if (counts == null) {\n            counts=new LongSparseArray<>();\n            count=0;\n            mediaCounts.put(type,counts);\n          }\n else {\n            count=counts.get(uid);\n          }\n          if (count == null) {\n            count=0;\n          }\n          count++;\n          counts.put(uid,count);\n        }\n        cursor.dispose();\n        if (mediaCounts != null) {\n          SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n          for (int a=0; a < mediaCounts.size(); a++) {\n            int type=mediaCounts.keyAt(a);\n            LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n            for (int b=0; b < value.size(); b++) {\n              long uid=value.keyAt(b);\n              int lower_part=(int)uid;\n              int count=-1;\n              int old=0;\n              cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n              if (cursor.next()) {\n                count=cursor.intValue(0);\n                old=cursor.intValue(1);\n              }\n              cursor.dispose();\n              if (count != -1) {\n                state.requery();\n                count=Math.max(0,count - value.valueAt(b));\n                state.bindLong(1,uid);\n                state.bindInteger(2,type);\n                state.bindInteger(3,count);\n                state.bindInteger(4,old);\n                state.step();\n              }\n            }\n          }\n          state.dispose();\n        }\n      }\n else {\n        if (channelId == 0) {\n          database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      getMediaDataController().clearBotKeyboard(0,messages);\n      if (dialogsToUpdate.size() != 0) {\n        resetAllUnreadCounters(false);\n      }\n    }\n    return dialogsIds;\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1465,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 13351,
        "startLineNumber" : 8864,
        "startColumnNumber" : 4,
        "endLineNumber" : 9107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private ArrayList<Long> markMessagesAsDeletedInternal(final ArrayList<Integer> messages,int channelId,boolean deleteFiles,boolean scheduled){\n  try {\n    ArrayList<Long> dialogsIds=new ArrayList<>();\n    if (scheduled) {\n      String ids;\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          if (!dialogsToUpdate.contains(did)) {\n            dialogsToUpdate.add(did);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n        broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n      }\n    }\n else {\n      String ids;\n      final ArrayList<Integer> temp=new ArrayList<>(messages);\n      LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n      LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<File> filesToDelete=new ArrayList<>();\n      ArrayList<String> namesToDelete=new ArrayList<>();\n      ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n      int currentUser=getUserConfig().getClientUserId();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          int mid=cursor.intValue(5);\n          temp.remove((Integer)mid);\n          ArrayList<Integer> mids=messagesByDialogs.get(did);\n          if (mids == null) {\n            mids=new ArrayList<>();\n            messagesByDialogs.put(did,mids);\n          }\n          mids.add(mid);\n          if (did != currentUser) {\n            int read_state=cursor.intValue(2);\n            if (cursor.intValue(3) == 0) {\n              Integer[] unread_count=dialogsToUpdate.get(did);\n              if (unread_count == null) {\n                unread_count=new Integer[]{0,0};\n                dialogsToUpdate.put(did,unread_count);\n              }\n              if (read_state < 2) {\n                unread_count[1]++;\n              }\n              if (read_state == 0 || read_state == 2) {\n                unread_count[0]++;\n              }\n            }\n          }\n          if ((int)did != 0 && !deleteFiles) {\n            continue;\n          }\n          NativeByteBuffer data=cursor.byteBufferValue(1);\n          if (data != null) {\n            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n            message.readAttachPath(data,getUserConfig().clientUserId);\n            data.reuse();\n            addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      deleteFromDownloadQueue(idsToDelete,true);\n      AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n      getFileLoader().deleteFiles(filesToDelete,0);\n      for (int a=0; a < dialogsToUpdate.size(); a++) {\n        long did=dialogsToUpdate.keyAt(a);\n        Integer[] counts=dialogsToUpdate.valueAt(a);\n        cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n        int old_unread_count=0;\n        int old_mentions_count=0;\n        if (cursor.next()) {\n          old_unread_count=cursor.intValue(0);\n          old_mentions_count=cursor.intValue(1);\n        }\n        cursor.dispose();\n        dialogsIds.add(did);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n        state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n        state.bindLong(3,did);\n        state.step();\n        state.dispose();\n      }\n      for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n        long did=messagesByDialogs.keyAt(a);\n        ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n        int lowerId=(int)did;\n        String idsStr=TextUtils.join(\",\",mids);\n        if (lowerId != 0) {\n          if (lowerId < 0) {\n            database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n          }\n else {\n            database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n          }\n        }\n        database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n        int updatedCount=0;\n        cursor=database.queryFinalized(\"SELECT changes()\");\n        if (cursor.next()) {\n          updatedCount=cursor.intValue(0);\n        }\n        cursor.dispose();\n        if (updatedCount > 0) {\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n          if (cursor.next()) {\n            int count=cursor.intValue(0);\n            SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n            state.requery();\n            state.bindInteger(1,Math.max(0,count - updatedCount));\n            state.bindLong(2,did);\n            state.step();\n            state.dispose();\n          }\n          cursor.dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      if (temp.isEmpty()) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n        SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n        while (cursor.next()) {\n          long uid=cursor.longValue(0);\n          int type=cursor.intValue(1);\n          if (mediaCounts == null) {\n            mediaCounts=new SparseArray<>();\n          }\n          LongSparseArray<Integer> counts=mediaCounts.get(type);\n          Integer count;\n          if (counts == null) {\n            counts=new LongSparseArray<>();\n            count=0;\n            mediaCounts.put(type,counts);\n          }\n else {\n            count=counts.get(uid);\n          }\n          if (count == null) {\n            count=0;\n          }\n          count++;\n          counts.put(uid,count);\n        }\n        cursor.dispose();\n        if (mediaCounts != null) {\n          SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n          for (int a=0; a < mediaCounts.size(); a++) {\n            int type=mediaCounts.keyAt(a);\n            LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n            for (int b=0; b < value.size(); b++) {\n              long uid=value.keyAt(b);\n              int lower_part=(int)uid;\n              int count=-1;\n              int old=0;\n              cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n              if (cursor.next()) {\n                count=cursor.intValue(0);\n                old=cursor.intValue(1);\n              }\n              cursor.dispose();\n              if (count != -1) {\n                state.requery();\n                count=Math.max(0,count - value.valueAt(b));\n                state.bindLong(1,uid);\n                state.bindInteger(2,type);\n                state.bindInteger(3,count);\n                state.bindInteger(4,old);\n                state.step();\n              }\n            }\n          }\n          state.dispose();\n        }\n      }\n else {\n        if (channelId == 0) {\n          database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      getMediaDataController().clearBotKeyboard(0,messages);\n      if (dialogsToUpdate.size() != 0) {\n        resetAllUnreadCounters(false);\n      }\n    }\n    return dialogsIds;\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1490,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 9043,
        "startColumnNumber" : 24,
        "endLineNumber" : 9043,
        "endColumnNumber" : 80
      },
      "nodeContext" : "LongSparseArray<Integer> counts=mediaCounts.get(type);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.SparseArray<org.telegram.messenger.LongSparseArray<java.lang.Integer>>"
  }, {
    "nodeContext" : "mediaCounts",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 9048,
      "startColumnNumber" : 28,
      "endLineNumber" : 9048,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 9048,
        "startColumnNumber" : 28,
        "endLineNumber" : 9048,
        "endColumnNumber" : 57
      },
      "nodeContext" : "mediaCounts.put(type,counts)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 9048,
        "startColumnNumber" : 28,
        "endLineNumber" : 9048,
        "endColumnNumber" : 58
      },
      "nodeContext" : "mediaCounts.put(type,counts);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 9045,
        "startColumnNumber" : 44,
        "endLineNumber" : 9049,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  counts=new LongSparseArray<>();\n  count=0;\n  mediaCounts.put(type,counts);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 9045,
        "startColumnNumber" : 24,
        "endLineNumber" : 9051,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (counts == null) {\n  counts=new LongSparseArray<>();\n  count=0;\n  mediaCounts.put(type,counts);\n}\n else {\n  count=counts.get(uid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 903,
        "startLineNumber" : 9037,
        "startColumnNumber" : 42,
        "endLineNumber" : 9057,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  long uid=cursor.longValue(0);\n  int type=cursor.intValue(1);\n  if (mediaCounts == null) {\n    mediaCounts=new SparseArray<>();\n  }\n  LongSparseArray<Integer> counts=mediaCounts.get(type);\n  Integer count;\n  if (counts == null) {\n    counts=new LongSparseArray<>();\n    count=0;\n    mediaCounts.put(type,counts);\n  }\n else {\n    count=counts.get(uid);\n  }\n  if (count == null) {\n    count=0;\n  }\n  count++;\n  counts.put(uid,count);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 9037,
        "startColumnNumber" : 20,
        "endLineNumber" : 9057,
        "endColumnNumber" : 21
      },
      "nodeContext" : "while (cursor.next()) {\n  long uid=cursor.longValue(0);\n  int type=cursor.intValue(1);\n  if (mediaCounts == null) {\n    mediaCounts=new SparseArray<>();\n  }\n  LongSparseArray<Integer> counts=mediaCounts.get(type);\n  Integer count;\n  if (counts == null) {\n    counts=new LongSparseArray<>();\n    count=0;\n    mediaCounts.put(type,counts);\n  }\n else {\n    count=counts.get(uid);\n  }\n  if (count == null) {\n    count=0;\n  }\n  count++;\n  counts.put(uid,count);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 98,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2978,
        "startLineNumber" : 9034,
        "startColumnNumber" : 36,
        "endLineNumber" : 9088,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n  SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n  while (cursor.next()) {\n    long uid=cursor.longValue(0);\n    int type=cursor.intValue(1);\n    if (mediaCounts == null) {\n      mediaCounts=new SparseArray<>();\n    }\n    LongSparseArray<Integer> counts=mediaCounts.get(type);\n    Integer count;\n    if (counts == null) {\n      counts=new LongSparseArray<>();\n      count=0;\n      mediaCounts.put(type,counts);\n    }\n else {\n      count=counts.get(uid);\n    }\n    if (count == null) {\n      count=0;\n    }\n    count++;\n    counts.put(uid,count);\n  }\n  cursor.dispose();\n  if (mediaCounts != null) {\n    SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n    for (int a=0; a < mediaCounts.size(); a++) {\n      int type=mediaCounts.keyAt(a);\n      LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n      for (int b=0; b < value.size(); b++) {\n        long uid=value.keyAt(b);\n        int lower_part=(int)uid;\n        int count=-1;\n        int old=0;\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n        if (cursor.next()) {\n          count=cursor.intValue(0);\n          old=cursor.intValue(1);\n        }\n        cursor.dispose();\n        if (count != -1) {\n          state.requery();\n          count=Math.max(0,count - value.valueAt(b));\n          state.bindLong(1,uid);\n          state.bindInteger(2,type);\n          state.bindInteger(3,count);\n          state.bindInteger(4,old);\n          state.step();\n        }\n      }\n    }\n    state.dispose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3387,
        "startLineNumber" : 9034,
        "startColumnNumber" : 16,
        "endLineNumber" : 9094,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (temp.isEmpty()) {\n  cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n  SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n  while (cursor.next()) {\n    long uid=cursor.longValue(0);\n    int type=cursor.intValue(1);\n    if (mediaCounts == null) {\n      mediaCounts=new SparseArray<>();\n    }\n    LongSparseArray<Integer> counts=mediaCounts.get(type);\n    Integer count;\n    if (counts == null) {\n      counts=new LongSparseArray<>();\n      count=0;\n      mediaCounts.put(type,counts);\n    }\n else {\n      count=counts.get(uid);\n    }\n    if (count == null) {\n      count=0;\n    }\n    count++;\n    counts.put(uid,count);\n  }\n  cursor.dispose();\n  if (mediaCounts != null) {\n    SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n    for (int a=0; a < mediaCounts.size(); a++) {\n      int type=mediaCounts.keyAt(a);\n      LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n      for (int b=0; b < value.size(); b++) {\n        long uid=value.keyAt(b);\n        int lower_part=(int)uid;\n        int count=-1;\n        int old=0;\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n        if (cursor.next()) {\n          count=cursor.intValue(0);\n          old=cursor.intValue(1);\n        }\n        cursor.dispose();\n        if (count != -1) {\n          state.requery();\n          count=Math.max(0,count - value.valueAt(b));\n          state.bindLong(1,uid);\n          state.bindInteger(2,type);\n          state.bindInteger(3,count);\n          state.bindInteger(4,old);\n          state.step();\n        }\n      }\n    }\n    state.dispose();\n  }\n}\n else {\n  if (channelId == 0) {\n    database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n  }\n else {\n    database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 347,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 11336,
        "startLineNumber" : 8903,
        "startColumnNumber" : 19,
        "endLineNumber" : 9101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String ids;\n  final ArrayList<Integer> temp=new ArrayList<>(messages);\n  LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n  LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<File> filesToDelete=new ArrayList<>();\n  ArrayList<String> namesToDelete=new ArrayList<>();\n  ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n  int currentUser=getUserConfig().getClientUserId();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      int mid=cursor.intValue(5);\n      temp.remove((Integer)mid);\n      ArrayList<Integer> mids=messagesByDialogs.get(did);\n      if (mids == null) {\n        mids=new ArrayList<>();\n        messagesByDialogs.put(did,mids);\n      }\n      mids.add(mid);\n      if (did != currentUser) {\n        int read_state=cursor.intValue(2);\n        if (cursor.intValue(3) == 0) {\n          Integer[] unread_count=dialogsToUpdate.get(did);\n          if (unread_count == null) {\n            unread_count=new Integer[]{0,0};\n            dialogsToUpdate.put(did,unread_count);\n          }\n          if (read_state < 2) {\n            unread_count[1]++;\n          }\n          if (read_state == 0 || read_state == 2) {\n            unread_count[0]++;\n          }\n        }\n      }\n      if ((int)did != 0 && !deleteFiles) {\n        continue;\n      }\n      NativeByteBuffer data=cursor.byteBufferValue(1);\n      if (data != null) {\n        TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n        message.readAttachPath(data,getUserConfig().clientUserId);\n        data.reuse();\n        addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  deleteFromDownloadQueue(idsToDelete,true);\n  AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n  getFileLoader().deleteFiles(filesToDelete,0);\n  for (int a=0; a < dialogsToUpdate.size(); a++) {\n    long did=dialogsToUpdate.keyAt(a);\n    Integer[] counts=dialogsToUpdate.valueAt(a);\n    cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n    int old_unread_count=0;\n    int old_mentions_count=0;\n    if (cursor.next()) {\n      old_unread_count=cursor.intValue(0);\n      old_mentions_count=cursor.intValue(1);\n    }\n    cursor.dispose();\n    dialogsIds.add(did);\n    SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n    state.requery();\n    state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n    state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n    state.bindLong(3,did);\n    state.step();\n    state.dispose();\n  }\n  for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n    long did=messagesByDialogs.keyAt(a);\n    ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n    int lowerId=(int)did;\n    String idsStr=TextUtils.join(\",\",mids);\n    if (lowerId != 0) {\n      if (lowerId < 0) {\n        database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n    int updatedCount=0;\n    cursor=database.queryFinalized(\"SELECT changes()\");\n    if (cursor.next()) {\n      updatedCount=cursor.intValue(0);\n    }\n    cursor.dispose();\n    if (updatedCount > 0) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n      if (cursor.next()) {\n        int count=cursor.intValue(0);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,count - updatedCount));\n        state.bindLong(2,did);\n        state.step();\n        state.dispose();\n      }\n      cursor.dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  if (temp.isEmpty()) {\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n    SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n    while (cursor.next()) {\n      long uid=cursor.longValue(0);\n      int type=cursor.intValue(1);\n      if (mediaCounts == null) {\n        mediaCounts=new SparseArray<>();\n      }\n      LongSparseArray<Integer> counts=mediaCounts.get(type);\n      Integer count;\n      if (counts == null) {\n        counts=new LongSparseArray<>();\n        count=0;\n        mediaCounts.put(type,counts);\n      }\n else {\n        count=counts.get(uid);\n      }\n      if (count == null) {\n        count=0;\n      }\n      count++;\n      counts.put(uid,count);\n    }\n    cursor.dispose();\n    if (mediaCounts != null) {\n      SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n      for (int a=0; a < mediaCounts.size(); a++) {\n        int type=mediaCounts.keyAt(a);\n        LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n        for (int b=0; b < value.size(); b++) {\n          long uid=value.keyAt(b);\n          int lower_part=(int)uid;\n          int count=-1;\n          int old=0;\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n          if (cursor.next()) {\n            count=cursor.intValue(0);\n            old=cursor.intValue(1);\n          }\n          cursor.dispose();\n          if (count != -1) {\n            state.requery();\n            count=Math.max(0,count - value.valueAt(b));\n            state.bindLong(1,uid);\n            state.bindInteger(2,type);\n            state.bindInteger(3,count);\n            state.bindInteger(4,old);\n            state.step();\n          }\n        }\n      }\n      state.dispose();\n    }\n  }\n else {\n    if (channelId == 0) {\n      database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n    }\n else {\n      database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  getMediaDataController().clearBotKeyboard(0,messages);\n  if (dialogsToUpdate.size() != 0) {\n    resetAllUnreadCounters(false);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1238,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12993,
        "startLineNumber" : 8867,
        "startColumnNumber" : 12,
        "endLineNumber" : 9101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (scheduled) {\n  String ids;\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      if (!dialogsToUpdate.contains(did)) {\n        dialogsToUpdate.add(did);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n    broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n  }\n}\n else {\n  String ids;\n  final ArrayList<Integer> temp=new ArrayList<>(messages);\n  LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n  LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<File> filesToDelete=new ArrayList<>();\n  ArrayList<String> namesToDelete=new ArrayList<>();\n  ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n  int currentUser=getUserConfig().getClientUserId();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      int mid=cursor.intValue(5);\n      temp.remove((Integer)mid);\n      ArrayList<Integer> mids=messagesByDialogs.get(did);\n      if (mids == null) {\n        mids=new ArrayList<>();\n        messagesByDialogs.put(did,mids);\n      }\n      mids.add(mid);\n      if (did != currentUser) {\n        int read_state=cursor.intValue(2);\n        if (cursor.intValue(3) == 0) {\n          Integer[] unread_count=dialogsToUpdate.get(did);\n          if (unread_count == null) {\n            unread_count=new Integer[]{0,0};\n            dialogsToUpdate.put(did,unread_count);\n          }\n          if (read_state < 2) {\n            unread_count[1]++;\n          }\n          if (read_state == 0 || read_state == 2) {\n            unread_count[0]++;\n          }\n        }\n      }\n      if ((int)did != 0 && !deleteFiles) {\n        continue;\n      }\n      NativeByteBuffer data=cursor.byteBufferValue(1);\n      if (data != null) {\n        TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n        message.readAttachPath(data,getUserConfig().clientUserId);\n        data.reuse();\n        addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  deleteFromDownloadQueue(idsToDelete,true);\n  AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n  getFileLoader().deleteFiles(filesToDelete,0);\n  for (int a=0; a < dialogsToUpdate.size(); a++) {\n    long did=dialogsToUpdate.keyAt(a);\n    Integer[] counts=dialogsToUpdate.valueAt(a);\n    cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n    int old_unread_count=0;\n    int old_mentions_count=0;\n    if (cursor.next()) {\n      old_unread_count=cursor.intValue(0);\n      old_mentions_count=cursor.intValue(1);\n    }\n    cursor.dispose();\n    dialogsIds.add(did);\n    SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n    state.requery();\n    state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n    state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n    state.bindLong(3,did);\n    state.step();\n    state.dispose();\n  }\n  for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n    long did=messagesByDialogs.keyAt(a);\n    ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n    int lowerId=(int)did;\n    String idsStr=TextUtils.join(\",\",mids);\n    if (lowerId != 0) {\n      if (lowerId < 0) {\n        database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n    int updatedCount=0;\n    cursor=database.queryFinalized(\"SELECT changes()\");\n    if (cursor.next()) {\n      updatedCount=cursor.intValue(0);\n    }\n    cursor.dispose();\n    if (updatedCount > 0) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n      if (cursor.next()) {\n        int count=cursor.intValue(0);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,count - updatedCount));\n        state.bindLong(2,did);\n        state.step();\n        state.dispose();\n      }\n      cursor.dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  if (temp.isEmpty()) {\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n    SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n    while (cursor.next()) {\n      long uid=cursor.longValue(0);\n      int type=cursor.intValue(1);\n      if (mediaCounts == null) {\n        mediaCounts=new SparseArray<>();\n      }\n      LongSparseArray<Integer> counts=mediaCounts.get(type);\n      Integer count;\n      if (counts == null) {\n        counts=new LongSparseArray<>();\n        count=0;\n        mediaCounts.put(type,counts);\n      }\n else {\n        count=counts.get(uid);\n      }\n      if (count == null) {\n        count=0;\n      }\n      count++;\n      counts.put(uid,count);\n    }\n    cursor.dispose();\n    if (mediaCounts != null) {\n      SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n      for (int a=0; a < mediaCounts.size(); a++) {\n        int type=mediaCounts.keyAt(a);\n        LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n        for (int b=0; b < value.size(); b++) {\n          long uid=value.keyAt(b);\n          int lower_part=(int)uid;\n          int count=-1;\n          int old=0;\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n          if (cursor.next()) {\n            count=cursor.intValue(0);\n            old=cursor.intValue(1);\n          }\n          cursor.dispose();\n          if (count != -1) {\n            state.requery();\n            count=Math.max(0,count - value.valueAt(b));\n            state.bindLong(1,uid);\n            state.bindInteger(2,type);\n            state.bindInteger(3,count);\n            state.bindInteger(4,old);\n            state.step();\n          }\n        }\n      }\n      state.dispose();\n    }\n  }\n else {\n    if (channelId == 0) {\n      database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n    }\n else {\n      database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  getMediaDataController().clearBotKeyboard(0,messages);\n  if (dialogsToUpdate.size() != 0) {\n    resetAllUnreadCounters(false);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1435,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 13108,
        "startLineNumber" : 8865,
        "startColumnNumber" : 12,
        "endLineNumber" : 9103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ArrayList<Long> dialogsIds=new ArrayList<>();\n  if (scheduled) {\n    String ids;\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        if (!dialogsToUpdate.contains(did)) {\n          dialogsToUpdate.add(did);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n      broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n    }\n  }\n else {\n    String ids;\n    final ArrayList<Integer> temp=new ArrayList<>(messages);\n    LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n    LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<File> filesToDelete=new ArrayList<>();\n    ArrayList<String> namesToDelete=new ArrayList<>();\n    ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n    int currentUser=getUserConfig().getClientUserId();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        int mid=cursor.intValue(5);\n        temp.remove((Integer)mid);\n        ArrayList<Integer> mids=messagesByDialogs.get(did);\n        if (mids == null) {\n          mids=new ArrayList<>();\n          messagesByDialogs.put(did,mids);\n        }\n        mids.add(mid);\n        if (did != currentUser) {\n          int read_state=cursor.intValue(2);\n          if (cursor.intValue(3) == 0) {\n            Integer[] unread_count=dialogsToUpdate.get(did);\n            if (unread_count == null) {\n              unread_count=new Integer[]{0,0};\n              dialogsToUpdate.put(did,unread_count);\n            }\n            if (read_state < 2) {\n              unread_count[1]++;\n            }\n            if (read_state == 0 || read_state == 2) {\n              unread_count[0]++;\n            }\n          }\n        }\n        if ((int)did != 0 && !deleteFiles) {\n          continue;\n        }\n        NativeByteBuffer data=cursor.byteBufferValue(1);\n        if (data != null) {\n          TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n          message.readAttachPath(data,getUserConfig().clientUserId);\n          data.reuse();\n          addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    deleteFromDownloadQueue(idsToDelete,true);\n    AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n    getFileLoader().deleteFiles(filesToDelete,0);\n    for (int a=0; a < dialogsToUpdate.size(); a++) {\n      long did=dialogsToUpdate.keyAt(a);\n      Integer[] counts=dialogsToUpdate.valueAt(a);\n      cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n      int old_unread_count=0;\n      int old_mentions_count=0;\n      if (cursor.next()) {\n        old_unread_count=cursor.intValue(0);\n        old_mentions_count=cursor.intValue(1);\n      }\n      cursor.dispose();\n      dialogsIds.add(did);\n      SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n      state.requery();\n      state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n      state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n      state.bindLong(3,did);\n      state.step();\n      state.dispose();\n    }\n    for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n      long did=messagesByDialogs.keyAt(a);\n      ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n      int lowerId=(int)did;\n      String idsStr=TextUtils.join(\",\",mids);\n      if (lowerId != 0) {\n        if (lowerId < 0) {\n          database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n      int updatedCount=0;\n      cursor=database.queryFinalized(\"SELECT changes()\");\n      if (cursor.next()) {\n        updatedCount=cursor.intValue(0);\n      }\n      cursor.dispose();\n      if (updatedCount > 0) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n        if (cursor.next()) {\n          int count=cursor.intValue(0);\n          SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n          state.requery();\n          state.bindInteger(1,Math.max(0,count - updatedCount));\n          state.bindLong(2,did);\n          state.step();\n          state.dispose();\n        }\n        cursor.dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    if (temp.isEmpty()) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n      SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n      while (cursor.next()) {\n        long uid=cursor.longValue(0);\n        int type=cursor.intValue(1);\n        if (mediaCounts == null) {\n          mediaCounts=new SparseArray<>();\n        }\n        LongSparseArray<Integer> counts=mediaCounts.get(type);\n        Integer count;\n        if (counts == null) {\n          counts=new LongSparseArray<>();\n          count=0;\n          mediaCounts.put(type,counts);\n        }\n else {\n          count=counts.get(uid);\n        }\n        if (count == null) {\n          count=0;\n        }\n        count++;\n        counts.put(uid,count);\n      }\n      cursor.dispose();\n      if (mediaCounts != null) {\n        SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n        for (int a=0; a < mediaCounts.size(); a++) {\n          int type=mediaCounts.keyAt(a);\n          LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n          for (int b=0; b < value.size(); b++) {\n            long uid=value.keyAt(b);\n            int lower_part=(int)uid;\n            int count=-1;\n            int old=0;\n            cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n            if (cursor.next()) {\n              count=cursor.intValue(0);\n              old=cursor.intValue(1);\n            }\n            cursor.dispose();\n            if (count != -1) {\n              state.requery();\n              count=Math.max(0,count - value.valueAt(b));\n              state.bindLong(1,uid);\n              state.bindInteger(2,type);\n              state.bindInteger(3,count);\n              state.bindInteger(4,old);\n              state.step();\n            }\n          }\n        }\n        state.dispose();\n      }\n    }\n else {\n      if (channelId == 0) {\n        database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    getMediaDataController().clearBotKeyboard(0,messages);\n    if (dialogsToUpdate.size() != 0) {\n      resetAllUnreadCounters(false);\n    }\n  }\n  return dialogsIds;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1450,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13170,
        "startLineNumber" : 8865,
        "startColumnNumber" : 8,
        "endLineNumber" : 9105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ArrayList<Long> dialogsIds=new ArrayList<>();\n  if (scheduled) {\n    String ids;\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        if (!dialogsToUpdate.contains(did)) {\n          dialogsToUpdate.add(did);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n      broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n    }\n  }\n else {\n    String ids;\n    final ArrayList<Integer> temp=new ArrayList<>(messages);\n    LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n    LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<File> filesToDelete=new ArrayList<>();\n    ArrayList<String> namesToDelete=new ArrayList<>();\n    ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n    int currentUser=getUserConfig().getClientUserId();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        int mid=cursor.intValue(5);\n        temp.remove((Integer)mid);\n        ArrayList<Integer> mids=messagesByDialogs.get(did);\n        if (mids == null) {\n          mids=new ArrayList<>();\n          messagesByDialogs.put(did,mids);\n        }\n        mids.add(mid);\n        if (did != currentUser) {\n          int read_state=cursor.intValue(2);\n          if (cursor.intValue(3) == 0) {\n            Integer[] unread_count=dialogsToUpdate.get(did);\n            if (unread_count == null) {\n              unread_count=new Integer[]{0,0};\n              dialogsToUpdate.put(did,unread_count);\n            }\n            if (read_state < 2) {\n              unread_count[1]++;\n            }\n            if (read_state == 0 || read_state == 2) {\n              unread_count[0]++;\n            }\n          }\n        }\n        if ((int)did != 0 && !deleteFiles) {\n          continue;\n        }\n        NativeByteBuffer data=cursor.byteBufferValue(1);\n        if (data != null) {\n          TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n          message.readAttachPath(data,getUserConfig().clientUserId);\n          data.reuse();\n          addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    deleteFromDownloadQueue(idsToDelete,true);\n    AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n    getFileLoader().deleteFiles(filesToDelete,0);\n    for (int a=0; a < dialogsToUpdate.size(); a++) {\n      long did=dialogsToUpdate.keyAt(a);\n      Integer[] counts=dialogsToUpdate.valueAt(a);\n      cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n      int old_unread_count=0;\n      int old_mentions_count=0;\n      if (cursor.next()) {\n        old_unread_count=cursor.intValue(0);\n        old_mentions_count=cursor.intValue(1);\n      }\n      cursor.dispose();\n      dialogsIds.add(did);\n      SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n      state.requery();\n      state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n      state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n      state.bindLong(3,did);\n      state.step();\n      state.dispose();\n    }\n    for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n      long did=messagesByDialogs.keyAt(a);\n      ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n      int lowerId=(int)did;\n      String idsStr=TextUtils.join(\",\",mids);\n      if (lowerId != 0) {\n        if (lowerId < 0) {\n          database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n      int updatedCount=0;\n      cursor=database.queryFinalized(\"SELECT changes()\");\n      if (cursor.next()) {\n        updatedCount=cursor.intValue(0);\n      }\n      cursor.dispose();\n      if (updatedCount > 0) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n        if (cursor.next()) {\n          int count=cursor.intValue(0);\n          SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n          state.requery();\n          state.bindInteger(1,Math.max(0,count - updatedCount));\n          state.bindLong(2,did);\n          state.step();\n          state.dispose();\n        }\n        cursor.dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    if (temp.isEmpty()) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n      SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n      while (cursor.next()) {\n        long uid=cursor.longValue(0);\n        int type=cursor.intValue(1);\n        if (mediaCounts == null) {\n          mediaCounts=new SparseArray<>();\n        }\n        LongSparseArray<Integer> counts=mediaCounts.get(type);\n        Integer count;\n        if (counts == null) {\n          counts=new LongSparseArray<>();\n          count=0;\n          mediaCounts.put(type,counts);\n        }\n else {\n          count=counts.get(uid);\n        }\n        if (count == null) {\n          count=0;\n        }\n        count++;\n        counts.put(uid,count);\n      }\n      cursor.dispose();\n      if (mediaCounts != null) {\n        SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n        for (int a=0; a < mediaCounts.size(); a++) {\n          int type=mediaCounts.keyAt(a);\n          LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n          for (int b=0; b < value.size(); b++) {\n            long uid=value.keyAt(b);\n            int lower_part=(int)uid;\n            int count=-1;\n            int old=0;\n            cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n            if (cursor.next()) {\n              count=cursor.intValue(0);\n              old=cursor.intValue(1);\n            }\n            cursor.dispose();\n            if (count != -1) {\n              state.requery();\n              count=Math.max(0,count - value.valueAt(b));\n              state.bindLong(1,uid);\n              state.bindInteger(2,type);\n              state.bindInteger(3,count);\n              state.bindInteger(4,old);\n              state.step();\n            }\n          }\n        }\n        state.dispose();\n      }\n    }\n else {\n      if (channelId == 0) {\n        database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    getMediaDataController().clearBotKeyboard(0,messages);\n    if (dialogsToUpdate.size() != 0) {\n      resetAllUnreadCounters(false);\n    }\n  }\n  return dialogsIds;\n}\n catch (Exception e) {\n  FileLog.e(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 1462,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13207,
        "startLineNumber" : 8864,
        "startColumnNumber" : 148,
        "endLineNumber" : 9107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    ArrayList<Long> dialogsIds=new ArrayList<>();\n    if (scheduled) {\n      String ids;\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          if (!dialogsToUpdate.contains(did)) {\n            dialogsToUpdate.add(did);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n        broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n      }\n    }\n else {\n      String ids;\n      final ArrayList<Integer> temp=new ArrayList<>(messages);\n      LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n      LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<File> filesToDelete=new ArrayList<>();\n      ArrayList<String> namesToDelete=new ArrayList<>();\n      ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n      int currentUser=getUserConfig().getClientUserId();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          int mid=cursor.intValue(5);\n          temp.remove((Integer)mid);\n          ArrayList<Integer> mids=messagesByDialogs.get(did);\n          if (mids == null) {\n            mids=new ArrayList<>();\n            messagesByDialogs.put(did,mids);\n          }\n          mids.add(mid);\n          if (did != currentUser) {\n            int read_state=cursor.intValue(2);\n            if (cursor.intValue(3) == 0) {\n              Integer[] unread_count=dialogsToUpdate.get(did);\n              if (unread_count == null) {\n                unread_count=new Integer[]{0,0};\n                dialogsToUpdate.put(did,unread_count);\n              }\n              if (read_state < 2) {\n                unread_count[1]++;\n              }\n              if (read_state == 0 || read_state == 2) {\n                unread_count[0]++;\n              }\n            }\n          }\n          if ((int)did != 0 && !deleteFiles) {\n            continue;\n          }\n          NativeByteBuffer data=cursor.byteBufferValue(1);\n          if (data != null) {\n            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n            message.readAttachPath(data,getUserConfig().clientUserId);\n            data.reuse();\n            addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      deleteFromDownloadQueue(idsToDelete,true);\n      AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n      getFileLoader().deleteFiles(filesToDelete,0);\n      for (int a=0; a < dialogsToUpdate.size(); a++) {\n        long did=dialogsToUpdate.keyAt(a);\n        Integer[] counts=dialogsToUpdate.valueAt(a);\n        cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n        int old_unread_count=0;\n        int old_mentions_count=0;\n        if (cursor.next()) {\n          old_unread_count=cursor.intValue(0);\n          old_mentions_count=cursor.intValue(1);\n        }\n        cursor.dispose();\n        dialogsIds.add(did);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n        state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n        state.bindLong(3,did);\n        state.step();\n        state.dispose();\n      }\n      for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n        long did=messagesByDialogs.keyAt(a);\n        ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n        int lowerId=(int)did;\n        String idsStr=TextUtils.join(\",\",mids);\n        if (lowerId != 0) {\n          if (lowerId < 0) {\n            database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n          }\n else {\n            database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n          }\n        }\n        database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n        int updatedCount=0;\n        cursor=database.queryFinalized(\"SELECT changes()\");\n        if (cursor.next()) {\n          updatedCount=cursor.intValue(0);\n        }\n        cursor.dispose();\n        if (updatedCount > 0) {\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n          if (cursor.next()) {\n            int count=cursor.intValue(0);\n            SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n            state.requery();\n            state.bindInteger(1,Math.max(0,count - updatedCount));\n            state.bindLong(2,did);\n            state.step();\n            state.dispose();\n          }\n          cursor.dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      if (temp.isEmpty()) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n        SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n        while (cursor.next()) {\n          long uid=cursor.longValue(0);\n          int type=cursor.intValue(1);\n          if (mediaCounts == null) {\n            mediaCounts=new SparseArray<>();\n          }\n          LongSparseArray<Integer> counts=mediaCounts.get(type);\n          Integer count;\n          if (counts == null) {\n            counts=new LongSparseArray<>();\n            count=0;\n            mediaCounts.put(type,counts);\n          }\n else {\n            count=counts.get(uid);\n          }\n          if (count == null) {\n            count=0;\n          }\n          count++;\n          counts.put(uid,count);\n        }\n        cursor.dispose();\n        if (mediaCounts != null) {\n          SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n          for (int a=0; a < mediaCounts.size(); a++) {\n            int type=mediaCounts.keyAt(a);\n            LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n            for (int b=0; b < value.size(); b++) {\n              long uid=value.keyAt(b);\n              int lower_part=(int)uid;\n              int count=-1;\n              int old=0;\n              cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n              if (cursor.next()) {\n                count=cursor.intValue(0);\n                old=cursor.intValue(1);\n              }\n              cursor.dispose();\n              if (count != -1) {\n                state.requery();\n                count=Math.max(0,count - value.valueAt(b));\n                state.bindLong(1,uid);\n                state.bindInteger(2,type);\n                state.bindInteger(3,count);\n                state.bindInteger(4,old);\n                state.step();\n              }\n            }\n          }\n          state.dispose();\n        }\n      }\n else {\n        if (channelId == 0) {\n          database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      getMediaDataController().clearBotKeyboard(0,messages);\n      if (dialogsToUpdate.size() != 0) {\n        resetAllUnreadCounters(false);\n      }\n    }\n    return dialogsIds;\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1465,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 13351,
        "startLineNumber" : 8864,
        "startColumnNumber" : 4,
        "endLineNumber" : 9107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private ArrayList<Long> markMessagesAsDeletedInternal(final ArrayList<Integer> messages,int channelId,boolean deleteFiles,boolean scheduled){\n  try {\n    ArrayList<Long> dialogsIds=new ArrayList<>();\n    if (scheduled) {\n      String ids;\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          if (!dialogsToUpdate.contains(did)) {\n            dialogsToUpdate.add(did);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n        broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n      }\n    }\n else {\n      String ids;\n      final ArrayList<Integer> temp=new ArrayList<>(messages);\n      LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n      LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<File> filesToDelete=new ArrayList<>();\n      ArrayList<String> namesToDelete=new ArrayList<>();\n      ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n      int currentUser=getUserConfig().getClientUserId();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          int mid=cursor.intValue(5);\n          temp.remove((Integer)mid);\n          ArrayList<Integer> mids=messagesByDialogs.get(did);\n          if (mids == null) {\n            mids=new ArrayList<>();\n            messagesByDialogs.put(did,mids);\n          }\n          mids.add(mid);\n          if (did != currentUser) {\n            int read_state=cursor.intValue(2);\n            if (cursor.intValue(3) == 0) {\n              Integer[] unread_count=dialogsToUpdate.get(did);\n              if (unread_count == null) {\n                unread_count=new Integer[]{0,0};\n                dialogsToUpdate.put(did,unread_count);\n              }\n              if (read_state < 2) {\n                unread_count[1]++;\n              }\n              if (read_state == 0 || read_state == 2) {\n                unread_count[0]++;\n              }\n            }\n          }\n          if ((int)did != 0 && !deleteFiles) {\n            continue;\n          }\n          NativeByteBuffer data=cursor.byteBufferValue(1);\n          if (data != null) {\n            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n            message.readAttachPath(data,getUserConfig().clientUserId);\n            data.reuse();\n            addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      deleteFromDownloadQueue(idsToDelete,true);\n      AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n      getFileLoader().deleteFiles(filesToDelete,0);\n      for (int a=0; a < dialogsToUpdate.size(); a++) {\n        long did=dialogsToUpdate.keyAt(a);\n        Integer[] counts=dialogsToUpdate.valueAt(a);\n        cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n        int old_unread_count=0;\n        int old_mentions_count=0;\n        if (cursor.next()) {\n          old_unread_count=cursor.intValue(0);\n          old_mentions_count=cursor.intValue(1);\n        }\n        cursor.dispose();\n        dialogsIds.add(did);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n        state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n        state.bindLong(3,did);\n        state.step();\n        state.dispose();\n      }\n      for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n        long did=messagesByDialogs.keyAt(a);\n        ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n        int lowerId=(int)did;\n        String idsStr=TextUtils.join(\",\",mids);\n        if (lowerId != 0) {\n          if (lowerId < 0) {\n            database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n          }\n else {\n            database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n          }\n        }\n        database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n        int updatedCount=0;\n        cursor=database.queryFinalized(\"SELECT changes()\");\n        if (cursor.next()) {\n          updatedCount=cursor.intValue(0);\n        }\n        cursor.dispose();\n        if (updatedCount > 0) {\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n          if (cursor.next()) {\n            int count=cursor.intValue(0);\n            SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n            state.requery();\n            state.bindInteger(1,Math.max(0,count - updatedCount));\n            state.bindLong(2,did);\n            state.step();\n            state.dispose();\n          }\n          cursor.dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      if (temp.isEmpty()) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n        SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n        while (cursor.next()) {\n          long uid=cursor.longValue(0);\n          int type=cursor.intValue(1);\n          if (mediaCounts == null) {\n            mediaCounts=new SparseArray<>();\n          }\n          LongSparseArray<Integer> counts=mediaCounts.get(type);\n          Integer count;\n          if (counts == null) {\n            counts=new LongSparseArray<>();\n            count=0;\n            mediaCounts.put(type,counts);\n          }\n else {\n            count=counts.get(uid);\n          }\n          if (count == null) {\n            count=0;\n          }\n          count++;\n          counts.put(uid,count);\n        }\n        cursor.dispose();\n        if (mediaCounts != null) {\n          SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n          for (int a=0; a < mediaCounts.size(); a++) {\n            int type=mediaCounts.keyAt(a);\n            LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n            for (int b=0; b < value.size(); b++) {\n              long uid=value.keyAt(b);\n              int lower_part=(int)uid;\n              int count=-1;\n              int old=0;\n              cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n              if (cursor.next()) {\n                count=cursor.intValue(0);\n                old=cursor.intValue(1);\n              }\n              cursor.dispose();\n              if (count != -1) {\n                state.requery();\n                count=Math.max(0,count - value.valueAt(b));\n                state.bindLong(1,uid);\n                state.bindInteger(2,type);\n                state.bindInteger(3,count);\n                state.bindInteger(4,old);\n                state.step();\n              }\n            }\n          }\n          state.dispose();\n        }\n      }\n else {\n        if (channelId == 0) {\n          database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      getMediaDataController().clearBotKeyboard(0,messages);\n      if (dialogsToUpdate.size() != 0) {\n        resetAllUnreadCounters(false);\n      }\n    }\n    return dialogsIds;\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1490,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 9048,
        "startColumnNumber" : 28,
        "endLineNumber" : 9048,
        "endColumnNumber" : 58
      },
      "nodeContext" : "mediaCounts.put(type,counts);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.SparseArray<org.telegram.messenger.LongSparseArray<java.lang.Integer>>"
  }, {
    "nodeContext" : "mediaCounts",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 9059,
      "startColumnNumber" : 24,
      "endLineNumber" : 9059,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 9059,
        "startColumnNumber" : 24,
        "endLineNumber" : 9059,
        "endColumnNumber" : 43
      },
      "nodeContext" : "mediaCounts != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1740,
        "startLineNumber" : 9059,
        "startColumnNumber" : 20,
        "endLineNumber" : 9087,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (mediaCounts != null) {\n  SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n  for (int a=0; a < mediaCounts.size(); a++) {\n    int type=mediaCounts.keyAt(a);\n    LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n    for (int b=0; b < value.size(); b++) {\n      long uid=value.keyAt(b);\n      int lower_part=(int)uid;\n      int count=-1;\n      int old=0;\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n      if (cursor.next()) {\n        count=cursor.intValue(0);\n        old=cursor.intValue(1);\n      }\n      cursor.dispose();\n      if (count != -1) {\n        state.requery();\n        count=Math.max(0,count - value.valueAt(b));\n        state.bindLong(1,uid);\n        state.bindInteger(2,type);\n        state.bindInteger(3,count);\n        state.bindInteger(4,old);\n        state.step();\n      }\n    }\n  }\n  state.dispose();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 181,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2978,
        "startLineNumber" : 9034,
        "startColumnNumber" : 36,
        "endLineNumber" : 9088,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n  SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n  while (cursor.next()) {\n    long uid=cursor.longValue(0);\n    int type=cursor.intValue(1);\n    if (mediaCounts == null) {\n      mediaCounts=new SparseArray<>();\n    }\n    LongSparseArray<Integer> counts=mediaCounts.get(type);\n    Integer count;\n    if (counts == null) {\n      counts=new LongSparseArray<>();\n      count=0;\n      mediaCounts.put(type,counts);\n    }\n else {\n      count=counts.get(uid);\n    }\n    if (count == null) {\n      count=0;\n    }\n    count++;\n    counts.put(uid,count);\n  }\n  cursor.dispose();\n  if (mediaCounts != null) {\n    SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n    for (int a=0; a < mediaCounts.size(); a++) {\n      int type=mediaCounts.keyAt(a);\n      LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n      for (int b=0; b < value.size(); b++) {\n        long uid=value.keyAt(b);\n        int lower_part=(int)uid;\n        int count=-1;\n        int old=0;\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n        if (cursor.next()) {\n          count=cursor.intValue(0);\n          old=cursor.intValue(1);\n        }\n        cursor.dispose();\n        if (count != -1) {\n          state.requery();\n          count=Math.max(0,count - value.valueAt(b));\n          state.bindLong(1,uid);\n          state.bindInteger(2,type);\n          state.bindInteger(3,count);\n          state.bindInteger(4,old);\n          state.step();\n        }\n      }\n    }\n    state.dispose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3387,
        "startLineNumber" : 9034,
        "startColumnNumber" : 16,
        "endLineNumber" : 9094,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (temp.isEmpty()) {\n  cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n  SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n  while (cursor.next()) {\n    long uid=cursor.longValue(0);\n    int type=cursor.intValue(1);\n    if (mediaCounts == null) {\n      mediaCounts=new SparseArray<>();\n    }\n    LongSparseArray<Integer> counts=mediaCounts.get(type);\n    Integer count;\n    if (counts == null) {\n      counts=new LongSparseArray<>();\n      count=0;\n      mediaCounts.put(type,counts);\n    }\n else {\n      count=counts.get(uid);\n    }\n    if (count == null) {\n      count=0;\n    }\n    count++;\n    counts.put(uid,count);\n  }\n  cursor.dispose();\n  if (mediaCounts != null) {\n    SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n    for (int a=0; a < mediaCounts.size(); a++) {\n      int type=mediaCounts.keyAt(a);\n      LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n      for (int b=0; b < value.size(); b++) {\n        long uid=value.keyAt(b);\n        int lower_part=(int)uid;\n        int count=-1;\n        int old=0;\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n        if (cursor.next()) {\n          count=cursor.intValue(0);\n          old=cursor.intValue(1);\n        }\n        cursor.dispose();\n        if (count != -1) {\n          state.requery();\n          count=Math.max(0,count - value.valueAt(b));\n          state.bindLong(1,uid);\n          state.bindInteger(2,type);\n          state.bindInteger(3,count);\n          state.bindInteger(4,old);\n          state.step();\n        }\n      }\n    }\n    state.dispose();\n  }\n}\n else {\n  if (channelId == 0) {\n    database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n  }\n else {\n    database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 347,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 11336,
        "startLineNumber" : 8903,
        "startColumnNumber" : 19,
        "endLineNumber" : 9101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String ids;\n  final ArrayList<Integer> temp=new ArrayList<>(messages);\n  LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n  LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<File> filesToDelete=new ArrayList<>();\n  ArrayList<String> namesToDelete=new ArrayList<>();\n  ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n  int currentUser=getUserConfig().getClientUserId();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      int mid=cursor.intValue(5);\n      temp.remove((Integer)mid);\n      ArrayList<Integer> mids=messagesByDialogs.get(did);\n      if (mids == null) {\n        mids=new ArrayList<>();\n        messagesByDialogs.put(did,mids);\n      }\n      mids.add(mid);\n      if (did != currentUser) {\n        int read_state=cursor.intValue(2);\n        if (cursor.intValue(3) == 0) {\n          Integer[] unread_count=dialogsToUpdate.get(did);\n          if (unread_count == null) {\n            unread_count=new Integer[]{0,0};\n            dialogsToUpdate.put(did,unread_count);\n          }\n          if (read_state < 2) {\n            unread_count[1]++;\n          }\n          if (read_state == 0 || read_state == 2) {\n            unread_count[0]++;\n          }\n        }\n      }\n      if ((int)did != 0 && !deleteFiles) {\n        continue;\n      }\n      NativeByteBuffer data=cursor.byteBufferValue(1);\n      if (data != null) {\n        TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n        message.readAttachPath(data,getUserConfig().clientUserId);\n        data.reuse();\n        addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  deleteFromDownloadQueue(idsToDelete,true);\n  AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n  getFileLoader().deleteFiles(filesToDelete,0);\n  for (int a=0; a < dialogsToUpdate.size(); a++) {\n    long did=dialogsToUpdate.keyAt(a);\n    Integer[] counts=dialogsToUpdate.valueAt(a);\n    cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n    int old_unread_count=0;\n    int old_mentions_count=0;\n    if (cursor.next()) {\n      old_unread_count=cursor.intValue(0);\n      old_mentions_count=cursor.intValue(1);\n    }\n    cursor.dispose();\n    dialogsIds.add(did);\n    SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n    state.requery();\n    state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n    state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n    state.bindLong(3,did);\n    state.step();\n    state.dispose();\n  }\n  for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n    long did=messagesByDialogs.keyAt(a);\n    ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n    int lowerId=(int)did;\n    String idsStr=TextUtils.join(\",\",mids);\n    if (lowerId != 0) {\n      if (lowerId < 0) {\n        database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n    int updatedCount=0;\n    cursor=database.queryFinalized(\"SELECT changes()\");\n    if (cursor.next()) {\n      updatedCount=cursor.intValue(0);\n    }\n    cursor.dispose();\n    if (updatedCount > 0) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n      if (cursor.next()) {\n        int count=cursor.intValue(0);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,count - updatedCount));\n        state.bindLong(2,did);\n        state.step();\n        state.dispose();\n      }\n      cursor.dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  if (temp.isEmpty()) {\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n    SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n    while (cursor.next()) {\n      long uid=cursor.longValue(0);\n      int type=cursor.intValue(1);\n      if (mediaCounts == null) {\n        mediaCounts=new SparseArray<>();\n      }\n      LongSparseArray<Integer> counts=mediaCounts.get(type);\n      Integer count;\n      if (counts == null) {\n        counts=new LongSparseArray<>();\n        count=0;\n        mediaCounts.put(type,counts);\n      }\n else {\n        count=counts.get(uid);\n      }\n      if (count == null) {\n        count=0;\n      }\n      count++;\n      counts.put(uid,count);\n    }\n    cursor.dispose();\n    if (mediaCounts != null) {\n      SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n      for (int a=0; a < mediaCounts.size(); a++) {\n        int type=mediaCounts.keyAt(a);\n        LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n        for (int b=0; b < value.size(); b++) {\n          long uid=value.keyAt(b);\n          int lower_part=(int)uid;\n          int count=-1;\n          int old=0;\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n          if (cursor.next()) {\n            count=cursor.intValue(0);\n            old=cursor.intValue(1);\n          }\n          cursor.dispose();\n          if (count != -1) {\n            state.requery();\n            count=Math.max(0,count - value.valueAt(b));\n            state.bindLong(1,uid);\n            state.bindInteger(2,type);\n            state.bindInteger(3,count);\n            state.bindInteger(4,old);\n            state.step();\n          }\n        }\n      }\n      state.dispose();\n    }\n  }\n else {\n    if (channelId == 0) {\n      database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n    }\n else {\n      database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  getMediaDataController().clearBotKeyboard(0,messages);\n  if (dialogsToUpdate.size() != 0) {\n    resetAllUnreadCounters(false);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1238,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12993,
        "startLineNumber" : 8867,
        "startColumnNumber" : 12,
        "endLineNumber" : 9101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (scheduled) {\n  String ids;\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      if (!dialogsToUpdate.contains(did)) {\n        dialogsToUpdate.add(did);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n    broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n  }\n}\n else {\n  String ids;\n  final ArrayList<Integer> temp=new ArrayList<>(messages);\n  LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n  LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<File> filesToDelete=new ArrayList<>();\n  ArrayList<String> namesToDelete=new ArrayList<>();\n  ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n  int currentUser=getUserConfig().getClientUserId();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      int mid=cursor.intValue(5);\n      temp.remove((Integer)mid);\n      ArrayList<Integer> mids=messagesByDialogs.get(did);\n      if (mids == null) {\n        mids=new ArrayList<>();\n        messagesByDialogs.put(did,mids);\n      }\n      mids.add(mid);\n      if (did != currentUser) {\n        int read_state=cursor.intValue(2);\n        if (cursor.intValue(3) == 0) {\n          Integer[] unread_count=dialogsToUpdate.get(did);\n          if (unread_count == null) {\n            unread_count=new Integer[]{0,0};\n            dialogsToUpdate.put(did,unread_count);\n          }\n          if (read_state < 2) {\n            unread_count[1]++;\n          }\n          if (read_state == 0 || read_state == 2) {\n            unread_count[0]++;\n          }\n        }\n      }\n      if ((int)did != 0 && !deleteFiles) {\n        continue;\n      }\n      NativeByteBuffer data=cursor.byteBufferValue(1);\n      if (data != null) {\n        TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n        message.readAttachPath(data,getUserConfig().clientUserId);\n        data.reuse();\n        addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  deleteFromDownloadQueue(idsToDelete,true);\n  AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n  getFileLoader().deleteFiles(filesToDelete,0);\n  for (int a=0; a < dialogsToUpdate.size(); a++) {\n    long did=dialogsToUpdate.keyAt(a);\n    Integer[] counts=dialogsToUpdate.valueAt(a);\n    cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n    int old_unread_count=0;\n    int old_mentions_count=0;\n    if (cursor.next()) {\n      old_unread_count=cursor.intValue(0);\n      old_mentions_count=cursor.intValue(1);\n    }\n    cursor.dispose();\n    dialogsIds.add(did);\n    SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n    state.requery();\n    state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n    state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n    state.bindLong(3,did);\n    state.step();\n    state.dispose();\n  }\n  for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n    long did=messagesByDialogs.keyAt(a);\n    ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n    int lowerId=(int)did;\n    String idsStr=TextUtils.join(\",\",mids);\n    if (lowerId != 0) {\n      if (lowerId < 0) {\n        database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n    int updatedCount=0;\n    cursor=database.queryFinalized(\"SELECT changes()\");\n    if (cursor.next()) {\n      updatedCount=cursor.intValue(0);\n    }\n    cursor.dispose();\n    if (updatedCount > 0) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n      if (cursor.next()) {\n        int count=cursor.intValue(0);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,count - updatedCount));\n        state.bindLong(2,did);\n        state.step();\n        state.dispose();\n      }\n      cursor.dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  if (temp.isEmpty()) {\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n    SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n    while (cursor.next()) {\n      long uid=cursor.longValue(0);\n      int type=cursor.intValue(1);\n      if (mediaCounts == null) {\n        mediaCounts=new SparseArray<>();\n      }\n      LongSparseArray<Integer> counts=mediaCounts.get(type);\n      Integer count;\n      if (counts == null) {\n        counts=new LongSparseArray<>();\n        count=0;\n        mediaCounts.put(type,counts);\n      }\n else {\n        count=counts.get(uid);\n      }\n      if (count == null) {\n        count=0;\n      }\n      count++;\n      counts.put(uid,count);\n    }\n    cursor.dispose();\n    if (mediaCounts != null) {\n      SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n      for (int a=0; a < mediaCounts.size(); a++) {\n        int type=mediaCounts.keyAt(a);\n        LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n        for (int b=0; b < value.size(); b++) {\n          long uid=value.keyAt(b);\n          int lower_part=(int)uid;\n          int count=-1;\n          int old=0;\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n          if (cursor.next()) {\n            count=cursor.intValue(0);\n            old=cursor.intValue(1);\n          }\n          cursor.dispose();\n          if (count != -1) {\n            state.requery();\n            count=Math.max(0,count - value.valueAt(b));\n            state.bindLong(1,uid);\n            state.bindInteger(2,type);\n            state.bindInteger(3,count);\n            state.bindInteger(4,old);\n            state.step();\n          }\n        }\n      }\n      state.dispose();\n    }\n  }\n else {\n    if (channelId == 0) {\n      database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n    }\n else {\n      database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  getMediaDataController().clearBotKeyboard(0,messages);\n  if (dialogsToUpdate.size() != 0) {\n    resetAllUnreadCounters(false);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1435,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 13108,
        "startLineNumber" : 8865,
        "startColumnNumber" : 12,
        "endLineNumber" : 9103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ArrayList<Long> dialogsIds=new ArrayList<>();\n  if (scheduled) {\n    String ids;\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        if (!dialogsToUpdate.contains(did)) {\n          dialogsToUpdate.add(did);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n      broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n    }\n  }\n else {\n    String ids;\n    final ArrayList<Integer> temp=new ArrayList<>(messages);\n    LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n    LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<File> filesToDelete=new ArrayList<>();\n    ArrayList<String> namesToDelete=new ArrayList<>();\n    ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n    int currentUser=getUserConfig().getClientUserId();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        int mid=cursor.intValue(5);\n        temp.remove((Integer)mid);\n        ArrayList<Integer> mids=messagesByDialogs.get(did);\n        if (mids == null) {\n          mids=new ArrayList<>();\n          messagesByDialogs.put(did,mids);\n        }\n        mids.add(mid);\n        if (did != currentUser) {\n          int read_state=cursor.intValue(2);\n          if (cursor.intValue(3) == 0) {\n            Integer[] unread_count=dialogsToUpdate.get(did);\n            if (unread_count == null) {\n              unread_count=new Integer[]{0,0};\n              dialogsToUpdate.put(did,unread_count);\n            }\n            if (read_state < 2) {\n              unread_count[1]++;\n            }\n            if (read_state == 0 || read_state == 2) {\n              unread_count[0]++;\n            }\n          }\n        }\n        if ((int)did != 0 && !deleteFiles) {\n          continue;\n        }\n        NativeByteBuffer data=cursor.byteBufferValue(1);\n        if (data != null) {\n          TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n          message.readAttachPath(data,getUserConfig().clientUserId);\n          data.reuse();\n          addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    deleteFromDownloadQueue(idsToDelete,true);\n    AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n    getFileLoader().deleteFiles(filesToDelete,0);\n    for (int a=0; a < dialogsToUpdate.size(); a++) {\n      long did=dialogsToUpdate.keyAt(a);\n      Integer[] counts=dialogsToUpdate.valueAt(a);\n      cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n      int old_unread_count=0;\n      int old_mentions_count=0;\n      if (cursor.next()) {\n        old_unread_count=cursor.intValue(0);\n        old_mentions_count=cursor.intValue(1);\n      }\n      cursor.dispose();\n      dialogsIds.add(did);\n      SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n      state.requery();\n      state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n      state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n      state.bindLong(3,did);\n      state.step();\n      state.dispose();\n    }\n    for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n      long did=messagesByDialogs.keyAt(a);\n      ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n      int lowerId=(int)did;\n      String idsStr=TextUtils.join(\",\",mids);\n      if (lowerId != 0) {\n        if (lowerId < 0) {\n          database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n      int updatedCount=0;\n      cursor=database.queryFinalized(\"SELECT changes()\");\n      if (cursor.next()) {\n        updatedCount=cursor.intValue(0);\n      }\n      cursor.dispose();\n      if (updatedCount > 0) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n        if (cursor.next()) {\n          int count=cursor.intValue(0);\n          SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n          state.requery();\n          state.bindInteger(1,Math.max(0,count - updatedCount));\n          state.bindLong(2,did);\n          state.step();\n          state.dispose();\n        }\n        cursor.dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    if (temp.isEmpty()) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n      SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n      while (cursor.next()) {\n        long uid=cursor.longValue(0);\n        int type=cursor.intValue(1);\n        if (mediaCounts == null) {\n          mediaCounts=new SparseArray<>();\n        }\n        LongSparseArray<Integer> counts=mediaCounts.get(type);\n        Integer count;\n        if (counts == null) {\n          counts=new LongSparseArray<>();\n          count=0;\n          mediaCounts.put(type,counts);\n        }\n else {\n          count=counts.get(uid);\n        }\n        if (count == null) {\n          count=0;\n        }\n        count++;\n        counts.put(uid,count);\n      }\n      cursor.dispose();\n      if (mediaCounts != null) {\n        SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n        for (int a=0; a < mediaCounts.size(); a++) {\n          int type=mediaCounts.keyAt(a);\n          LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n          for (int b=0; b < value.size(); b++) {\n            long uid=value.keyAt(b);\n            int lower_part=(int)uid;\n            int count=-1;\n            int old=0;\n            cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n            if (cursor.next()) {\n              count=cursor.intValue(0);\n              old=cursor.intValue(1);\n            }\n            cursor.dispose();\n            if (count != -1) {\n              state.requery();\n              count=Math.max(0,count - value.valueAt(b));\n              state.bindLong(1,uid);\n              state.bindInteger(2,type);\n              state.bindInteger(3,count);\n              state.bindInteger(4,old);\n              state.step();\n            }\n          }\n        }\n        state.dispose();\n      }\n    }\n else {\n      if (channelId == 0) {\n        database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    getMediaDataController().clearBotKeyboard(0,messages);\n    if (dialogsToUpdate.size() != 0) {\n      resetAllUnreadCounters(false);\n    }\n  }\n  return dialogsIds;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1450,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13170,
        "startLineNumber" : 8865,
        "startColumnNumber" : 8,
        "endLineNumber" : 9105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ArrayList<Long> dialogsIds=new ArrayList<>();\n  if (scheduled) {\n    String ids;\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        if (!dialogsToUpdate.contains(did)) {\n          dialogsToUpdate.add(did);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n      broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n    }\n  }\n else {\n    String ids;\n    final ArrayList<Integer> temp=new ArrayList<>(messages);\n    LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n    LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<File> filesToDelete=new ArrayList<>();\n    ArrayList<String> namesToDelete=new ArrayList<>();\n    ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n    int currentUser=getUserConfig().getClientUserId();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        int mid=cursor.intValue(5);\n        temp.remove((Integer)mid);\n        ArrayList<Integer> mids=messagesByDialogs.get(did);\n        if (mids == null) {\n          mids=new ArrayList<>();\n          messagesByDialogs.put(did,mids);\n        }\n        mids.add(mid);\n        if (did != currentUser) {\n          int read_state=cursor.intValue(2);\n          if (cursor.intValue(3) == 0) {\n            Integer[] unread_count=dialogsToUpdate.get(did);\n            if (unread_count == null) {\n              unread_count=new Integer[]{0,0};\n              dialogsToUpdate.put(did,unread_count);\n            }\n            if (read_state < 2) {\n              unread_count[1]++;\n            }\n            if (read_state == 0 || read_state == 2) {\n              unread_count[0]++;\n            }\n          }\n        }\n        if ((int)did != 0 && !deleteFiles) {\n          continue;\n        }\n        NativeByteBuffer data=cursor.byteBufferValue(1);\n        if (data != null) {\n          TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n          message.readAttachPath(data,getUserConfig().clientUserId);\n          data.reuse();\n          addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    deleteFromDownloadQueue(idsToDelete,true);\n    AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n    getFileLoader().deleteFiles(filesToDelete,0);\n    for (int a=0; a < dialogsToUpdate.size(); a++) {\n      long did=dialogsToUpdate.keyAt(a);\n      Integer[] counts=dialogsToUpdate.valueAt(a);\n      cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n      int old_unread_count=0;\n      int old_mentions_count=0;\n      if (cursor.next()) {\n        old_unread_count=cursor.intValue(0);\n        old_mentions_count=cursor.intValue(1);\n      }\n      cursor.dispose();\n      dialogsIds.add(did);\n      SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n      state.requery();\n      state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n      state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n      state.bindLong(3,did);\n      state.step();\n      state.dispose();\n    }\n    for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n      long did=messagesByDialogs.keyAt(a);\n      ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n      int lowerId=(int)did;\n      String idsStr=TextUtils.join(\",\",mids);\n      if (lowerId != 0) {\n        if (lowerId < 0) {\n          database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n      int updatedCount=0;\n      cursor=database.queryFinalized(\"SELECT changes()\");\n      if (cursor.next()) {\n        updatedCount=cursor.intValue(0);\n      }\n      cursor.dispose();\n      if (updatedCount > 0) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n        if (cursor.next()) {\n          int count=cursor.intValue(0);\n          SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n          state.requery();\n          state.bindInteger(1,Math.max(0,count - updatedCount));\n          state.bindLong(2,did);\n          state.step();\n          state.dispose();\n        }\n        cursor.dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    if (temp.isEmpty()) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n      SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n      while (cursor.next()) {\n        long uid=cursor.longValue(0);\n        int type=cursor.intValue(1);\n        if (mediaCounts == null) {\n          mediaCounts=new SparseArray<>();\n        }\n        LongSparseArray<Integer> counts=mediaCounts.get(type);\n        Integer count;\n        if (counts == null) {\n          counts=new LongSparseArray<>();\n          count=0;\n          mediaCounts.put(type,counts);\n        }\n else {\n          count=counts.get(uid);\n        }\n        if (count == null) {\n          count=0;\n        }\n        count++;\n        counts.put(uid,count);\n      }\n      cursor.dispose();\n      if (mediaCounts != null) {\n        SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n        for (int a=0; a < mediaCounts.size(); a++) {\n          int type=mediaCounts.keyAt(a);\n          LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n          for (int b=0; b < value.size(); b++) {\n            long uid=value.keyAt(b);\n            int lower_part=(int)uid;\n            int count=-1;\n            int old=0;\n            cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n            if (cursor.next()) {\n              count=cursor.intValue(0);\n              old=cursor.intValue(1);\n            }\n            cursor.dispose();\n            if (count != -1) {\n              state.requery();\n              count=Math.max(0,count - value.valueAt(b));\n              state.bindLong(1,uid);\n              state.bindInteger(2,type);\n              state.bindInteger(3,count);\n              state.bindInteger(4,old);\n              state.step();\n            }\n          }\n        }\n        state.dispose();\n      }\n    }\n else {\n      if (channelId == 0) {\n        database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    getMediaDataController().clearBotKeyboard(0,messages);\n    if (dialogsToUpdate.size() != 0) {\n      resetAllUnreadCounters(false);\n    }\n  }\n  return dialogsIds;\n}\n catch (Exception e) {\n  FileLog.e(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 1462,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13207,
        "startLineNumber" : 8864,
        "startColumnNumber" : 148,
        "endLineNumber" : 9107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    ArrayList<Long> dialogsIds=new ArrayList<>();\n    if (scheduled) {\n      String ids;\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          if (!dialogsToUpdate.contains(did)) {\n            dialogsToUpdate.add(did);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n        broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n      }\n    }\n else {\n      String ids;\n      final ArrayList<Integer> temp=new ArrayList<>(messages);\n      LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n      LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<File> filesToDelete=new ArrayList<>();\n      ArrayList<String> namesToDelete=new ArrayList<>();\n      ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n      int currentUser=getUserConfig().getClientUserId();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          int mid=cursor.intValue(5);\n          temp.remove((Integer)mid);\n          ArrayList<Integer> mids=messagesByDialogs.get(did);\n          if (mids == null) {\n            mids=new ArrayList<>();\n            messagesByDialogs.put(did,mids);\n          }\n          mids.add(mid);\n          if (did != currentUser) {\n            int read_state=cursor.intValue(2);\n            if (cursor.intValue(3) == 0) {\n              Integer[] unread_count=dialogsToUpdate.get(did);\n              if (unread_count == null) {\n                unread_count=new Integer[]{0,0};\n                dialogsToUpdate.put(did,unread_count);\n              }\n              if (read_state < 2) {\n                unread_count[1]++;\n              }\n              if (read_state == 0 || read_state == 2) {\n                unread_count[0]++;\n              }\n            }\n          }\n          if ((int)did != 0 && !deleteFiles) {\n            continue;\n          }\n          NativeByteBuffer data=cursor.byteBufferValue(1);\n          if (data != null) {\n            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n            message.readAttachPath(data,getUserConfig().clientUserId);\n            data.reuse();\n            addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      deleteFromDownloadQueue(idsToDelete,true);\n      AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n      getFileLoader().deleteFiles(filesToDelete,0);\n      for (int a=0; a < dialogsToUpdate.size(); a++) {\n        long did=dialogsToUpdate.keyAt(a);\n        Integer[] counts=dialogsToUpdate.valueAt(a);\n        cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n        int old_unread_count=0;\n        int old_mentions_count=0;\n        if (cursor.next()) {\n          old_unread_count=cursor.intValue(0);\n          old_mentions_count=cursor.intValue(1);\n        }\n        cursor.dispose();\n        dialogsIds.add(did);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n        state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n        state.bindLong(3,did);\n        state.step();\n        state.dispose();\n      }\n      for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n        long did=messagesByDialogs.keyAt(a);\n        ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n        int lowerId=(int)did;\n        String idsStr=TextUtils.join(\",\",mids);\n        if (lowerId != 0) {\n          if (lowerId < 0) {\n            database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n          }\n else {\n            database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n          }\n        }\n        database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n        int updatedCount=0;\n        cursor=database.queryFinalized(\"SELECT changes()\");\n        if (cursor.next()) {\n          updatedCount=cursor.intValue(0);\n        }\n        cursor.dispose();\n        if (updatedCount > 0) {\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n          if (cursor.next()) {\n            int count=cursor.intValue(0);\n            SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n            state.requery();\n            state.bindInteger(1,Math.max(0,count - updatedCount));\n            state.bindLong(2,did);\n            state.step();\n            state.dispose();\n          }\n          cursor.dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      if (temp.isEmpty()) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n        SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n        while (cursor.next()) {\n          long uid=cursor.longValue(0);\n          int type=cursor.intValue(1);\n          if (mediaCounts == null) {\n            mediaCounts=new SparseArray<>();\n          }\n          LongSparseArray<Integer> counts=mediaCounts.get(type);\n          Integer count;\n          if (counts == null) {\n            counts=new LongSparseArray<>();\n            count=0;\n            mediaCounts.put(type,counts);\n          }\n else {\n            count=counts.get(uid);\n          }\n          if (count == null) {\n            count=0;\n          }\n          count++;\n          counts.put(uid,count);\n        }\n        cursor.dispose();\n        if (mediaCounts != null) {\n          SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n          for (int a=0; a < mediaCounts.size(); a++) {\n            int type=mediaCounts.keyAt(a);\n            LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n            for (int b=0; b < value.size(); b++) {\n              long uid=value.keyAt(b);\n              int lower_part=(int)uid;\n              int count=-1;\n              int old=0;\n              cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n              if (cursor.next()) {\n                count=cursor.intValue(0);\n                old=cursor.intValue(1);\n              }\n              cursor.dispose();\n              if (count != -1) {\n                state.requery();\n                count=Math.max(0,count - value.valueAt(b));\n                state.bindLong(1,uid);\n                state.bindInteger(2,type);\n                state.bindInteger(3,count);\n                state.bindInteger(4,old);\n                state.step();\n              }\n            }\n          }\n          state.dispose();\n        }\n      }\n else {\n        if (channelId == 0) {\n          database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      getMediaDataController().clearBotKeyboard(0,messages);\n      if (dialogsToUpdate.size() != 0) {\n        resetAllUnreadCounters(false);\n      }\n    }\n    return dialogsIds;\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1465,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 13351,
        "startLineNumber" : 8864,
        "startColumnNumber" : 4,
        "endLineNumber" : 9107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private ArrayList<Long> markMessagesAsDeletedInternal(final ArrayList<Integer> messages,int channelId,boolean deleteFiles,boolean scheduled){\n  try {\n    ArrayList<Long> dialogsIds=new ArrayList<>();\n    if (scheduled) {\n      String ids;\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          if (!dialogsToUpdate.contains(did)) {\n            dialogsToUpdate.add(did);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n        broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n      }\n    }\n else {\n      String ids;\n      final ArrayList<Integer> temp=new ArrayList<>(messages);\n      LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n      LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<File> filesToDelete=new ArrayList<>();\n      ArrayList<String> namesToDelete=new ArrayList<>();\n      ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n      int currentUser=getUserConfig().getClientUserId();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          int mid=cursor.intValue(5);\n          temp.remove((Integer)mid);\n          ArrayList<Integer> mids=messagesByDialogs.get(did);\n          if (mids == null) {\n            mids=new ArrayList<>();\n            messagesByDialogs.put(did,mids);\n          }\n          mids.add(mid);\n          if (did != currentUser) {\n            int read_state=cursor.intValue(2);\n            if (cursor.intValue(3) == 0) {\n              Integer[] unread_count=dialogsToUpdate.get(did);\n              if (unread_count == null) {\n                unread_count=new Integer[]{0,0};\n                dialogsToUpdate.put(did,unread_count);\n              }\n              if (read_state < 2) {\n                unread_count[1]++;\n              }\n              if (read_state == 0 || read_state == 2) {\n                unread_count[0]++;\n              }\n            }\n          }\n          if ((int)did != 0 && !deleteFiles) {\n            continue;\n          }\n          NativeByteBuffer data=cursor.byteBufferValue(1);\n          if (data != null) {\n            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n            message.readAttachPath(data,getUserConfig().clientUserId);\n            data.reuse();\n            addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      deleteFromDownloadQueue(idsToDelete,true);\n      AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n      getFileLoader().deleteFiles(filesToDelete,0);\n      for (int a=0; a < dialogsToUpdate.size(); a++) {\n        long did=dialogsToUpdate.keyAt(a);\n        Integer[] counts=dialogsToUpdate.valueAt(a);\n        cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n        int old_unread_count=0;\n        int old_mentions_count=0;\n        if (cursor.next()) {\n          old_unread_count=cursor.intValue(0);\n          old_mentions_count=cursor.intValue(1);\n        }\n        cursor.dispose();\n        dialogsIds.add(did);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n        state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n        state.bindLong(3,did);\n        state.step();\n        state.dispose();\n      }\n      for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n        long did=messagesByDialogs.keyAt(a);\n        ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n        int lowerId=(int)did;\n        String idsStr=TextUtils.join(\",\",mids);\n        if (lowerId != 0) {\n          if (lowerId < 0) {\n            database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n          }\n else {\n            database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n          }\n        }\n        database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n        int updatedCount=0;\n        cursor=database.queryFinalized(\"SELECT changes()\");\n        if (cursor.next()) {\n          updatedCount=cursor.intValue(0);\n        }\n        cursor.dispose();\n        if (updatedCount > 0) {\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n          if (cursor.next()) {\n            int count=cursor.intValue(0);\n            SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n            state.requery();\n            state.bindInteger(1,Math.max(0,count - updatedCount));\n            state.bindLong(2,did);\n            state.step();\n            state.dispose();\n          }\n          cursor.dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      if (temp.isEmpty()) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n        SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n        while (cursor.next()) {\n          long uid=cursor.longValue(0);\n          int type=cursor.intValue(1);\n          if (mediaCounts == null) {\n            mediaCounts=new SparseArray<>();\n          }\n          LongSparseArray<Integer> counts=mediaCounts.get(type);\n          Integer count;\n          if (counts == null) {\n            counts=new LongSparseArray<>();\n            count=0;\n            mediaCounts.put(type,counts);\n          }\n else {\n            count=counts.get(uid);\n          }\n          if (count == null) {\n            count=0;\n          }\n          count++;\n          counts.put(uid,count);\n        }\n        cursor.dispose();\n        if (mediaCounts != null) {\n          SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n          for (int a=0; a < mediaCounts.size(); a++) {\n            int type=mediaCounts.keyAt(a);\n            LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n            for (int b=0; b < value.size(); b++) {\n              long uid=value.keyAt(b);\n              int lower_part=(int)uid;\n              int count=-1;\n              int old=0;\n              cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n              if (cursor.next()) {\n                count=cursor.intValue(0);\n                old=cursor.intValue(1);\n              }\n              cursor.dispose();\n              if (count != -1) {\n                state.requery();\n                count=Math.max(0,count - value.valueAt(b));\n                state.bindLong(1,uid);\n                state.bindInteger(2,type);\n                state.bindInteger(3,count);\n                state.bindInteger(4,old);\n                state.step();\n              }\n            }\n          }\n          state.dispose();\n        }\n      }\n else {\n        if (channelId == 0) {\n          database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      getMediaDataController().clearBotKeyboard(0,messages);\n      if (dialogsToUpdate.size() != 0) {\n        resetAllUnreadCounters(false);\n      }\n    }\n    return dialogsIds;\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1490,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 9059,
        "startColumnNumber" : 24,
        "endLineNumber" : 9059,
        "endColumnNumber" : 43
      },
      "nodeContext" : "mediaCounts != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.SparseArray<org.telegram.messenger.LongSparseArray<java.lang.Integer>>"
  }, {
    "nodeContext" : "mediaCounts",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 9061,
      "startColumnNumber" : 44,
      "endLineNumber" : 9061,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 9061,
        "startColumnNumber" : 44,
        "endLineNumber" : 9061,
        "endColumnNumber" : 62
      },
      "nodeContext" : "mediaCounts.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 9061,
        "startColumnNumber" : 40,
        "endLineNumber" : 9061,
        "endColumnNumber" : 62
      },
      "nodeContext" : "a < mediaCounts.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1497,
        "startLineNumber" : 9061,
        "startColumnNumber" : 24,
        "endLineNumber" : 9085,
        "endColumnNumber" : 25
      },
      "nodeContext" : "for (int a=0; a < mediaCounts.size(); a++) {\n  int type=mediaCounts.keyAt(a);\n  LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n  for (int b=0; b < value.size(); b++) {\n    long uid=value.keyAt(b);\n    int lower_part=(int)uid;\n    int count=-1;\n    int old=0;\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n    if (cursor.next()) {\n      count=cursor.intValue(0);\n      old=cursor.intValue(1);\n    }\n    cursor.dispose();\n    if (count != -1) {\n      state.requery();\n      count=Math.max(0,count - value.valueAt(b));\n      state.bindLong(1,uid);\n      state.bindInteger(2,type);\n      state.bindInteger(3,count);\n      state.bindInteger(4,old);\n      state.step();\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 163,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1715,
        "startLineNumber" : 9059,
        "startColumnNumber" : 45,
        "endLineNumber" : 9087,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n  for (int a=0; a < mediaCounts.size(); a++) {\n    int type=mediaCounts.keyAt(a);\n    LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n    for (int b=0; b < value.size(); b++) {\n      long uid=value.keyAt(b);\n      int lower_part=(int)uid;\n      int count=-1;\n      int old=0;\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n      if (cursor.next()) {\n        count=cursor.intValue(0);\n        old=cursor.intValue(1);\n      }\n      cursor.dispose();\n      if (count != -1) {\n        state.requery();\n        count=Math.max(0,count - value.valueAt(b));\n        state.bindLong(1,uid);\n        state.bindInteger(2,type);\n        state.bindInteger(3,count);\n        state.bindInteger(4,old);\n        state.step();\n      }\n    }\n  }\n  state.dispose();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1740,
        "startLineNumber" : 9059,
        "startColumnNumber" : 20,
        "endLineNumber" : 9087,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (mediaCounts != null) {\n  SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n  for (int a=0; a < mediaCounts.size(); a++) {\n    int type=mediaCounts.keyAt(a);\n    LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n    for (int b=0; b < value.size(); b++) {\n      long uid=value.keyAt(b);\n      int lower_part=(int)uid;\n      int count=-1;\n      int old=0;\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n      if (cursor.next()) {\n        count=cursor.intValue(0);\n        old=cursor.intValue(1);\n      }\n      cursor.dispose();\n      if (count != -1) {\n        state.requery();\n        count=Math.max(0,count - value.valueAt(b));\n        state.bindLong(1,uid);\n        state.bindInteger(2,type);\n        state.bindInteger(3,count);\n        state.bindInteger(4,old);\n        state.step();\n      }\n    }\n  }\n  state.dispose();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 181,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2978,
        "startLineNumber" : 9034,
        "startColumnNumber" : 36,
        "endLineNumber" : 9088,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n  SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n  while (cursor.next()) {\n    long uid=cursor.longValue(0);\n    int type=cursor.intValue(1);\n    if (mediaCounts == null) {\n      mediaCounts=new SparseArray<>();\n    }\n    LongSparseArray<Integer> counts=mediaCounts.get(type);\n    Integer count;\n    if (counts == null) {\n      counts=new LongSparseArray<>();\n      count=0;\n      mediaCounts.put(type,counts);\n    }\n else {\n      count=counts.get(uid);\n    }\n    if (count == null) {\n      count=0;\n    }\n    count++;\n    counts.put(uid,count);\n  }\n  cursor.dispose();\n  if (mediaCounts != null) {\n    SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n    for (int a=0; a < mediaCounts.size(); a++) {\n      int type=mediaCounts.keyAt(a);\n      LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n      for (int b=0; b < value.size(); b++) {\n        long uid=value.keyAt(b);\n        int lower_part=(int)uid;\n        int count=-1;\n        int old=0;\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n        if (cursor.next()) {\n          count=cursor.intValue(0);\n          old=cursor.intValue(1);\n        }\n        cursor.dispose();\n        if (count != -1) {\n          state.requery();\n          count=Math.max(0,count - value.valueAt(b));\n          state.bindLong(1,uid);\n          state.bindInteger(2,type);\n          state.bindInteger(3,count);\n          state.bindInteger(4,old);\n          state.step();\n        }\n      }\n    }\n    state.dispose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3387,
        "startLineNumber" : 9034,
        "startColumnNumber" : 16,
        "endLineNumber" : 9094,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (temp.isEmpty()) {\n  cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n  SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n  while (cursor.next()) {\n    long uid=cursor.longValue(0);\n    int type=cursor.intValue(1);\n    if (mediaCounts == null) {\n      mediaCounts=new SparseArray<>();\n    }\n    LongSparseArray<Integer> counts=mediaCounts.get(type);\n    Integer count;\n    if (counts == null) {\n      counts=new LongSparseArray<>();\n      count=0;\n      mediaCounts.put(type,counts);\n    }\n else {\n      count=counts.get(uid);\n    }\n    if (count == null) {\n      count=0;\n    }\n    count++;\n    counts.put(uid,count);\n  }\n  cursor.dispose();\n  if (mediaCounts != null) {\n    SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n    for (int a=0; a < mediaCounts.size(); a++) {\n      int type=mediaCounts.keyAt(a);\n      LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n      for (int b=0; b < value.size(); b++) {\n        long uid=value.keyAt(b);\n        int lower_part=(int)uid;\n        int count=-1;\n        int old=0;\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n        if (cursor.next()) {\n          count=cursor.intValue(0);\n          old=cursor.intValue(1);\n        }\n        cursor.dispose();\n        if (count != -1) {\n          state.requery();\n          count=Math.max(0,count - value.valueAt(b));\n          state.bindLong(1,uid);\n          state.bindInteger(2,type);\n          state.bindInteger(3,count);\n          state.bindInteger(4,old);\n          state.step();\n        }\n      }\n    }\n    state.dispose();\n  }\n}\n else {\n  if (channelId == 0) {\n    database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n  }\n else {\n    database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 347,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 11336,
        "startLineNumber" : 8903,
        "startColumnNumber" : 19,
        "endLineNumber" : 9101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String ids;\n  final ArrayList<Integer> temp=new ArrayList<>(messages);\n  LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n  LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<File> filesToDelete=new ArrayList<>();\n  ArrayList<String> namesToDelete=new ArrayList<>();\n  ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n  int currentUser=getUserConfig().getClientUserId();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      int mid=cursor.intValue(5);\n      temp.remove((Integer)mid);\n      ArrayList<Integer> mids=messagesByDialogs.get(did);\n      if (mids == null) {\n        mids=new ArrayList<>();\n        messagesByDialogs.put(did,mids);\n      }\n      mids.add(mid);\n      if (did != currentUser) {\n        int read_state=cursor.intValue(2);\n        if (cursor.intValue(3) == 0) {\n          Integer[] unread_count=dialogsToUpdate.get(did);\n          if (unread_count == null) {\n            unread_count=new Integer[]{0,0};\n            dialogsToUpdate.put(did,unread_count);\n          }\n          if (read_state < 2) {\n            unread_count[1]++;\n          }\n          if (read_state == 0 || read_state == 2) {\n            unread_count[0]++;\n          }\n        }\n      }\n      if ((int)did != 0 && !deleteFiles) {\n        continue;\n      }\n      NativeByteBuffer data=cursor.byteBufferValue(1);\n      if (data != null) {\n        TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n        message.readAttachPath(data,getUserConfig().clientUserId);\n        data.reuse();\n        addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  deleteFromDownloadQueue(idsToDelete,true);\n  AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n  getFileLoader().deleteFiles(filesToDelete,0);\n  for (int a=0; a < dialogsToUpdate.size(); a++) {\n    long did=dialogsToUpdate.keyAt(a);\n    Integer[] counts=dialogsToUpdate.valueAt(a);\n    cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n    int old_unread_count=0;\n    int old_mentions_count=0;\n    if (cursor.next()) {\n      old_unread_count=cursor.intValue(0);\n      old_mentions_count=cursor.intValue(1);\n    }\n    cursor.dispose();\n    dialogsIds.add(did);\n    SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n    state.requery();\n    state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n    state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n    state.bindLong(3,did);\n    state.step();\n    state.dispose();\n  }\n  for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n    long did=messagesByDialogs.keyAt(a);\n    ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n    int lowerId=(int)did;\n    String idsStr=TextUtils.join(\",\",mids);\n    if (lowerId != 0) {\n      if (lowerId < 0) {\n        database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n    int updatedCount=0;\n    cursor=database.queryFinalized(\"SELECT changes()\");\n    if (cursor.next()) {\n      updatedCount=cursor.intValue(0);\n    }\n    cursor.dispose();\n    if (updatedCount > 0) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n      if (cursor.next()) {\n        int count=cursor.intValue(0);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,count - updatedCount));\n        state.bindLong(2,did);\n        state.step();\n        state.dispose();\n      }\n      cursor.dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  if (temp.isEmpty()) {\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n    SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n    while (cursor.next()) {\n      long uid=cursor.longValue(0);\n      int type=cursor.intValue(1);\n      if (mediaCounts == null) {\n        mediaCounts=new SparseArray<>();\n      }\n      LongSparseArray<Integer> counts=mediaCounts.get(type);\n      Integer count;\n      if (counts == null) {\n        counts=new LongSparseArray<>();\n        count=0;\n        mediaCounts.put(type,counts);\n      }\n else {\n        count=counts.get(uid);\n      }\n      if (count == null) {\n        count=0;\n      }\n      count++;\n      counts.put(uid,count);\n    }\n    cursor.dispose();\n    if (mediaCounts != null) {\n      SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n      for (int a=0; a < mediaCounts.size(); a++) {\n        int type=mediaCounts.keyAt(a);\n        LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n        for (int b=0; b < value.size(); b++) {\n          long uid=value.keyAt(b);\n          int lower_part=(int)uid;\n          int count=-1;\n          int old=0;\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n          if (cursor.next()) {\n            count=cursor.intValue(0);\n            old=cursor.intValue(1);\n          }\n          cursor.dispose();\n          if (count != -1) {\n            state.requery();\n            count=Math.max(0,count - value.valueAt(b));\n            state.bindLong(1,uid);\n            state.bindInteger(2,type);\n            state.bindInteger(3,count);\n            state.bindInteger(4,old);\n            state.step();\n          }\n        }\n      }\n      state.dispose();\n    }\n  }\n else {\n    if (channelId == 0) {\n      database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n    }\n else {\n      database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  getMediaDataController().clearBotKeyboard(0,messages);\n  if (dialogsToUpdate.size() != 0) {\n    resetAllUnreadCounters(false);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1238,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12993,
        "startLineNumber" : 8867,
        "startColumnNumber" : 12,
        "endLineNumber" : 9101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (scheduled) {\n  String ids;\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      if (!dialogsToUpdate.contains(did)) {\n        dialogsToUpdate.add(did);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n    broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n  }\n}\n else {\n  String ids;\n  final ArrayList<Integer> temp=new ArrayList<>(messages);\n  LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n  LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<File> filesToDelete=new ArrayList<>();\n  ArrayList<String> namesToDelete=new ArrayList<>();\n  ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n  int currentUser=getUserConfig().getClientUserId();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      int mid=cursor.intValue(5);\n      temp.remove((Integer)mid);\n      ArrayList<Integer> mids=messagesByDialogs.get(did);\n      if (mids == null) {\n        mids=new ArrayList<>();\n        messagesByDialogs.put(did,mids);\n      }\n      mids.add(mid);\n      if (did != currentUser) {\n        int read_state=cursor.intValue(2);\n        if (cursor.intValue(3) == 0) {\n          Integer[] unread_count=dialogsToUpdate.get(did);\n          if (unread_count == null) {\n            unread_count=new Integer[]{0,0};\n            dialogsToUpdate.put(did,unread_count);\n          }\n          if (read_state < 2) {\n            unread_count[1]++;\n          }\n          if (read_state == 0 || read_state == 2) {\n            unread_count[0]++;\n          }\n        }\n      }\n      if ((int)did != 0 && !deleteFiles) {\n        continue;\n      }\n      NativeByteBuffer data=cursor.byteBufferValue(1);\n      if (data != null) {\n        TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n        message.readAttachPath(data,getUserConfig().clientUserId);\n        data.reuse();\n        addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  deleteFromDownloadQueue(idsToDelete,true);\n  AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n  getFileLoader().deleteFiles(filesToDelete,0);\n  for (int a=0; a < dialogsToUpdate.size(); a++) {\n    long did=dialogsToUpdate.keyAt(a);\n    Integer[] counts=dialogsToUpdate.valueAt(a);\n    cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n    int old_unread_count=0;\n    int old_mentions_count=0;\n    if (cursor.next()) {\n      old_unread_count=cursor.intValue(0);\n      old_mentions_count=cursor.intValue(1);\n    }\n    cursor.dispose();\n    dialogsIds.add(did);\n    SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n    state.requery();\n    state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n    state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n    state.bindLong(3,did);\n    state.step();\n    state.dispose();\n  }\n  for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n    long did=messagesByDialogs.keyAt(a);\n    ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n    int lowerId=(int)did;\n    String idsStr=TextUtils.join(\",\",mids);\n    if (lowerId != 0) {\n      if (lowerId < 0) {\n        database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n    int updatedCount=0;\n    cursor=database.queryFinalized(\"SELECT changes()\");\n    if (cursor.next()) {\n      updatedCount=cursor.intValue(0);\n    }\n    cursor.dispose();\n    if (updatedCount > 0) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n      if (cursor.next()) {\n        int count=cursor.intValue(0);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,count - updatedCount));\n        state.bindLong(2,did);\n        state.step();\n        state.dispose();\n      }\n      cursor.dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  if (temp.isEmpty()) {\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n    SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n    while (cursor.next()) {\n      long uid=cursor.longValue(0);\n      int type=cursor.intValue(1);\n      if (mediaCounts == null) {\n        mediaCounts=new SparseArray<>();\n      }\n      LongSparseArray<Integer> counts=mediaCounts.get(type);\n      Integer count;\n      if (counts == null) {\n        counts=new LongSparseArray<>();\n        count=0;\n        mediaCounts.put(type,counts);\n      }\n else {\n        count=counts.get(uid);\n      }\n      if (count == null) {\n        count=0;\n      }\n      count++;\n      counts.put(uid,count);\n    }\n    cursor.dispose();\n    if (mediaCounts != null) {\n      SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n      for (int a=0; a < mediaCounts.size(); a++) {\n        int type=mediaCounts.keyAt(a);\n        LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n        for (int b=0; b < value.size(); b++) {\n          long uid=value.keyAt(b);\n          int lower_part=(int)uid;\n          int count=-1;\n          int old=0;\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n          if (cursor.next()) {\n            count=cursor.intValue(0);\n            old=cursor.intValue(1);\n          }\n          cursor.dispose();\n          if (count != -1) {\n            state.requery();\n            count=Math.max(0,count - value.valueAt(b));\n            state.bindLong(1,uid);\n            state.bindInteger(2,type);\n            state.bindInteger(3,count);\n            state.bindInteger(4,old);\n            state.step();\n          }\n        }\n      }\n      state.dispose();\n    }\n  }\n else {\n    if (channelId == 0) {\n      database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n    }\n else {\n      database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  getMediaDataController().clearBotKeyboard(0,messages);\n  if (dialogsToUpdate.size() != 0) {\n    resetAllUnreadCounters(false);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1435,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 13108,
        "startLineNumber" : 8865,
        "startColumnNumber" : 12,
        "endLineNumber" : 9103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ArrayList<Long> dialogsIds=new ArrayList<>();\n  if (scheduled) {\n    String ids;\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        if (!dialogsToUpdate.contains(did)) {\n          dialogsToUpdate.add(did);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n      broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n    }\n  }\n else {\n    String ids;\n    final ArrayList<Integer> temp=new ArrayList<>(messages);\n    LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n    LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<File> filesToDelete=new ArrayList<>();\n    ArrayList<String> namesToDelete=new ArrayList<>();\n    ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n    int currentUser=getUserConfig().getClientUserId();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        int mid=cursor.intValue(5);\n        temp.remove((Integer)mid);\n        ArrayList<Integer> mids=messagesByDialogs.get(did);\n        if (mids == null) {\n          mids=new ArrayList<>();\n          messagesByDialogs.put(did,mids);\n        }\n        mids.add(mid);\n        if (did != currentUser) {\n          int read_state=cursor.intValue(2);\n          if (cursor.intValue(3) == 0) {\n            Integer[] unread_count=dialogsToUpdate.get(did);\n            if (unread_count == null) {\n              unread_count=new Integer[]{0,0};\n              dialogsToUpdate.put(did,unread_count);\n            }\n            if (read_state < 2) {\n              unread_count[1]++;\n            }\n            if (read_state == 0 || read_state == 2) {\n              unread_count[0]++;\n            }\n          }\n        }\n        if ((int)did != 0 && !deleteFiles) {\n          continue;\n        }\n        NativeByteBuffer data=cursor.byteBufferValue(1);\n        if (data != null) {\n          TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n          message.readAttachPath(data,getUserConfig().clientUserId);\n          data.reuse();\n          addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    deleteFromDownloadQueue(idsToDelete,true);\n    AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n    getFileLoader().deleteFiles(filesToDelete,0);\n    for (int a=0; a < dialogsToUpdate.size(); a++) {\n      long did=dialogsToUpdate.keyAt(a);\n      Integer[] counts=dialogsToUpdate.valueAt(a);\n      cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n      int old_unread_count=0;\n      int old_mentions_count=0;\n      if (cursor.next()) {\n        old_unread_count=cursor.intValue(0);\n        old_mentions_count=cursor.intValue(1);\n      }\n      cursor.dispose();\n      dialogsIds.add(did);\n      SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n      state.requery();\n      state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n      state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n      state.bindLong(3,did);\n      state.step();\n      state.dispose();\n    }\n    for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n      long did=messagesByDialogs.keyAt(a);\n      ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n      int lowerId=(int)did;\n      String idsStr=TextUtils.join(\",\",mids);\n      if (lowerId != 0) {\n        if (lowerId < 0) {\n          database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n      int updatedCount=0;\n      cursor=database.queryFinalized(\"SELECT changes()\");\n      if (cursor.next()) {\n        updatedCount=cursor.intValue(0);\n      }\n      cursor.dispose();\n      if (updatedCount > 0) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n        if (cursor.next()) {\n          int count=cursor.intValue(0);\n          SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n          state.requery();\n          state.bindInteger(1,Math.max(0,count - updatedCount));\n          state.bindLong(2,did);\n          state.step();\n          state.dispose();\n        }\n        cursor.dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    if (temp.isEmpty()) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n      SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n      while (cursor.next()) {\n        long uid=cursor.longValue(0);\n        int type=cursor.intValue(1);\n        if (mediaCounts == null) {\n          mediaCounts=new SparseArray<>();\n        }\n        LongSparseArray<Integer> counts=mediaCounts.get(type);\n        Integer count;\n        if (counts == null) {\n          counts=new LongSparseArray<>();\n          count=0;\n          mediaCounts.put(type,counts);\n        }\n else {\n          count=counts.get(uid);\n        }\n        if (count == null) {\n          count=0;\n        }\n        count++;\n        counts.put(uid,count);\n      }\n      cursor.dispose();\n      if (mediaCounts != null) {\n        SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n        for (int a=0; a < mediaCounts.size(); a++) {\n          int type=mediaCounts.keyAt(a);\n          LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n          for (int b=0; b < value.size(); b++) {\n            long uid=value.keyAt(b);\n            int lower_part=(int)uid;\n            int count=-1;\n            int old=0;\n            cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n            if (cursor.next()) {\n              count=cursor.intValue(0);\n              old=cursor.intValue(1);\n            }\n            cursor.dispose();\n            if (count != -1) {\n              state.requery();\n              count=Math.max(0,count - value.valueAt(b));\n              state.bindLong(1,uid);\n              state.bindInteger(2,type);\n              state.bindInteger(3,count);\n              state.bindInteger(4,old);\n              state.step();\n            }\n          }\n        }\n        state.dispose();\n      }\n    }\n else {\n      if (channelId == 0) {\n        database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    getMediaDataController().clearBotKeyboard(0,messages);\n    if (dialogsToUpdate.size() != 0) {\n      resetAllUnreadCounters(false);\n    }\n  }\n  return dialogsIds;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1450,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13170,
        "startLineNumber" : 8865,
        "startColumnNumber" : 8,
        "endLineNumber" : 9105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ArrayList<Long> dialogsIds=new ArrayList<>();\n  if (scheduled) {\n    String ids;\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        if (!dialogsToUpdate.contains(did)) {\n          dialogsToUpdate.add(did);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n      broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n    }\n  }\n else {\n    String ids;\n    final ArrayList<Integer> temp=new ArrayList<>(messages);\n    LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n    LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<File> filesToDelete=new ArrayList<>();\n    ArrayList<String> namesToDelete=new ArrayList<>();\n    ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n    int currentUser=getUserConfig().getClientUserId();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        int mid=cursor.intValue(5);\n        temp.remove((Integer)mid);\n        ArrayList<Integer> mids=messagesByDialogs.get(did);\n        if (mids == null) {\n          mids=new ArrayList<>();\n          messagesByDialogs.put(did,mids);\n        }\n        mids.add(mid);\n        if (did != currentUser) {\n          int read_state=cursor.intValue(2);\n          if (cursor.intValue(3) == 0) {\n            Integer[] unread_count=dialogsToUpdate.get(did);\n            if (unread_count == null) {\n              unread_count=new Integer[]{0,0};\n              dialogsToUpdate.put(did,unread_count);\n            }\n            if (read_state < 2) {\n              unread_count[1]++;\n            }\n            if (read_state == 0 || read_state == 2) {\n              unread_count[0]++;\n            }\n          }\n        }\n        if ((int)did != 0 && !deleteFiles) {\n          continue;\n        }\n        NativeByteBuffer data=cursor.byteBufferValue(1);\n        if (data != null) {\n          TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n          message.readAttachPath(data,getUserConfig().clientUserId);\n          data.reuse();\n          addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    deleteFromDownloadQueue(idsToDelete,true);\n    AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n    getFileLoader().deleteFiles(filesToDelete,0);\n    for (int a=0; a < dialogsToUpdate.size(); a++) {\n      long did=dialogsToUpdate.keyAt(a);\n      Integer[] counts=dialogsToUpdate.valueAt(a);\n      cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n      int old_unread_count=0;\n      int old_mentions_count=0;\n      if (cursor.next()) {\n        old_unread_count=cursor.intValue(0);\n        old_mentions_count=cursor.intValue(1);\n      }\n      cursor.dispose();\n      dialogsIds.add(did);\n      SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n      state.requery();\n      state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n      state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n      state.bindLong(3,did);\n      state.step();\n      state.dispose();\n    }\n    for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n      long did=messagesByDialogs.keyAt(a);\n      ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n      int lowerId=(int)did;\n      String idsStr=TextUtils.join(\",\",mids);\n      if (lowerId != 0) {\n        if (lowerId < 0) {\n          database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n      int updatedCount=0;\n      cursor=database.queryFinalized(\"SELECT changes()\");\n      if (cursor.next()) {\n        updatedCount=cursor.intValue(0);\n      }\n      cursor.dispose();\n      if (updatedCount > 0) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n        if (cursor.next()) {\n          int count=cursor.intValue(0);\n          SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n          state.requery();\n          state.bindInteger(1,Math.max(0,count - updatedCount));\n          state.bindLong(2,did);\n          state.step();\n          state.dispose();\n        }\n        cursor.dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    if (temp.isEmpty()) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n      SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n      while (cursor.next()) {\n        long uid=cursor.longValue(0);\n        int type=cursor.intValue(1);\n        if (mediaCounts == null) {\n          mediaCounts=new SparseArray<>();\n        }\n        LongSparseArray<Integer> counts=mediaCounts.get(type);\n        Integer count;\n        if (counts == null) {\n          counts=new LongSparseArray<>();\n          count=0;\n          mediaCounts.put(type,counts);\n        }\n else {\n          count=counts.get(uid);\n        }\n        if (count == null) {\n          count=0;\n        }\n        count++;\n        counts.put(uid,count);\n      }\n      cursor.dispose();\n      if (mediaCounts != null) {\n        SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n        for (int a=0; a < mediaCounts.size(); a++) {\n          int type=mediaCounts.keyAt(a);\n          LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n          for (int b=0; b < value.size(); b++) {\n            long uid=value.keyAt(b);\n            int lower_part=(int)uid;\n            int count=-1;\n            int old=0;\n            cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n            if (cursor.next()) {\n              count=cursor.intValue(0);\n              old=cursor.intValue(1);\n            }\n            cursor.dispose();\n            if (count != -1) {\n              state.requery();\n              count=Math.max(0,count - value.valueAt(b));\n              state.bindLong(1,uid);\n              state.bindInteger(2,type);\n              state.bindInteger(3,count);\n              state.bindInteger(4,old);\n              state.step();\n            }\n          }\n        }\n        state.dispose();\n      }\n    }\n else {\n      if (channelId == 0) {\n        database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    getMediaDataController().clearBotKeyboard(0,messages);\n    if (dialogsToUpdate.size() != 0) {\n      resetAllUnreadCounters(false);\n    }\n  }\n  return dialogsIds;\n}\n catch (Exception e) {\n  FileLog.e(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 1462,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13207,
        "startLineNumber" : 8864,
        "startColumnNumber" : 148,
        "endLineNumber" : 9107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    ArrayList<Long> dialogsIds=new ArrayList<>();\n    if (scheduled) {\n      String ids;\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          if (!dialogsToUpdate.contains(did)) {\n            dialogsToUpdate.add(did);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n        broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n      }\n    }\n else {\n      String ids;\n      final ArrayList<Integer> temp=new ArrayList<>(messages);\n      LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n      LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<File> filesToDelete=new ArrayList<>();\n      ArrayList<String> namesToDelete=new ArrayList<>();\n      ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n      int currentUser=getUserConfig().getClientUserId();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          int mid=cursor.intValue(5);\n          temp.remove((Integer)mid);\n          ArrayList<Integer> mids=messagesByDialogs.get(did);\n          if (mids == null) {\n            mids=new ArrayList<>();\n            messagesByDialogs.put(did,mids);\n          }\n          mids.add(mid);\n          if (did != currentUser) {\n            int read_state=cursor.intValue(2);\n            if (cursor.intValue(3) == 0) {\n              Integer[] unread_count=dialogsToUpdate.get(did);\n              if (unread_count == null) {\n                unread_count=new Integer[]{0,0};\n                dialogsToUpdate.put(did,unread_count);\n              }\n              if (read_state < 2) {\n                unread_count[1]++;\n              }\n              if (read_state == 0 || read_state == 2) {\n                unread_count[0]++;\n              }\n            }\n          }\n          if ((int)did != 0 && !deleteFiles) {\n            continue;\n          }\n          NativeByteBuffer data=cursor.byteBufferValue(1);\n          if (data != null) {\n            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n            message.readAttachPath(data,getUserConfig().clientUserId);\n            data.reuse();\n            addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      deleteFromDownloadQueue(idsToDelete,true);\n      AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n      getFileLoader().deleteFiles(filesToDelete,0);\n      for (int a=0; a < dialogsToUpdate.size(); a++) {\n        long did=dialogsToUpdate.keyAt(a);\n        Integer[] counts=dialogsToUpdate.valueAt(a);\n        cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n        int old_unread_count=0;\n        int old_mentions_count=0;\n        if (cursor.next()) {\n          old_unread_count=cursor.intValue(0);\n          old_mentions_count=cursor.intValue(1);\n        }\n        cursor.dispose();\n        dialogsIds.add(did);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n        state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n        state.bindLong(3,did);\n        state.step();\n        state.dispose();\n      }\n      for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n        long did=messagesByDialogs.keyAt(a);\n        ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n        int lowerId=(int)did;\n        String idsStr=TextUtils.join(\",\",mids);\n        if (lowerId != 0) {\n          if (lowerId < 0) {\n            database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n          }\n else {\n            database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n          }\n        }\n        database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n        int updatedCount=0;\n        cursor=database.queryFinalized(\"SELECT changes()\");\n        if (cursor.next()) {\n          updatedCount=cursor.intValue(0);\n        }\n        cursor.dispose();\n        if (updatedCount > 0) {\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n          if (cursor.next()) {\n            int count=cursor.intValue(0);\n            SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n            state.requery();\n            state.bindInteger(1,Math.max(0,count - updatedCount));\n            state.bindLong(2,did);\n            state.step();\n            state.dispose();\n          }\n          cursor.dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      if (temp.isEmpty()) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n        SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n        while (cursor.next()) {\n          long uid=cursor.longValue(0);\n          int type=cursor.intValue(1);\n          if (mediaCounts == null) {\n            mediaCounts=new SparseArray<>();\n          }\n          LongSparseArray<Integer> counts=mediaCounts.get(type);\n          Integer count;\n          if (counts == null) {\n            counts=new LongSparseArray<>();\n            count=0;\n            mediaCounts.put(type,counts);\n          }\n else {\n            count=counts.get(uid);\n          }\n          if (count == null) {\n            count=0;\n          }\n          count++;\n          counts.put(uid,count);\n        }\n        cursor.dispose();\n        if (mediaCounts != null) {\n          SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n          for (int a=0; a < mediaCounts.size(); a++) {\n            int type=mediaCounts.keyAt(a);\n            LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n            for (int b=0; b < value.size(); b++) {\n              long uid=value.keyAt(b);\n              int lower_part=(int)uid;\n              int count=-1;\n              int old=0;\n              cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n              if (cursor.next()) {\n                count=cursor.intValue(0);\n                old=cursor.intValue(1);\n              }\n              cursor.dispose();\n              if (count != -1) {\n                state.requery();\n                count=Math.max(0,count - value.valueAt(b));\n                state.bindLong(1,uid);\n                state.bindInteger(2,type);\n                state.bindInteger(3,count);\n                state.bindInteger(4,old);\n                state.step();\n              }\n            }\n          }\n          state.dispose();\n        }\n      }\n else {\n        if (channelId == 0) {\n          database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      getMediaDataController().clearBotKeyboard(0,messages);\n      if (dialogsToUpdate.size() != 0) {\n        resetAllUnreadCounters(false);\n      }\n    }\n    return dialogsIds;\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1465,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 13351,
        "startLineNumber" : 8864,
        "startColumnNumber" : 4,
        "endLineNumber" : 9107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private ArrayList<Long> markMessagesAsDeletedInternal(final ArrayList<Integer> messages,int channelId,boolean deleteFiles,boolean scheduled){\n  try {\n    ArrayList<Long> dialogsIds=new ArrayList<>();\n    if (scheduled) {\n      String ids;\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          if (!dialogsToUpdate.contains(did)) {\n            dialogsToUpdate.add(did);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n        broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n      }\n    }\n else {\n      String ids;\n      final ArrayList<Integer> temp=new ArrayList<>(messages);\n      LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n      LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<File> filesToDelete=new ArrayList<>();\n      ArrayList<String> namesToDelete=new ArrayList<>();\n      ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n      int currentUser=getUserConfig().getClientUserId();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          int mid=cursor.intValue(5);\n          temp.remove((Integer)mid);\n          ArrayList<Integer> mids=messagesByDialogs.get(did);\n          if (mids == null) {\n            mids=new ArrayList<>();\n            messagesByDialogs.put(did,mids);\n          }\n          mids.add(mid);\n          if (did != currentUser) {\n            int read_state=cursor.intValue(2);\n            if (cursor.intValue(3) == 0) {\n              Integer[] unread_count=dialogsToUpdate.get(did);\n              if (unread_count == null) {\n                unread_count=new Integer[]{0,0};\n                dialogsToUpdate.put(did,unread_count);\n              }\n              if (read_state < 2) {\n                unread_count[1]++;\n              }\n              if (read_state == 0 || read_state == 2) {\n                unread_count[0]++;\n              }\n            }\n          }\n          if ((int)did != 0 && !deleteFiles) {\n            continue;\n          }\n          NativeByteBuffer data=cursor.byteBufferValue(1);\n          if (data != null) {\n            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n            message.readAttachPath(data,getUserConfig().clientUserId);\n            data.reuse();\n            addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      deleteFromDownloadQueue(idsToDelete,true);\n      AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n      getFileLoader().deleteFiles(filesToDelete,0);\n      for (int a=0; a < dialogsToUpdate.size(); a++) {\n        long did=dialogsToUpdate.keyAt(a);\n        Integer[] counts=dialogsToUpdate.valueAt(a);\n        cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n        int old_unread_count=0;\n        int old_mentions_count=0;\n        if (cursor.next()) {\n          old_unread_count=cursor.intValue(0);\n          old_mentions_count=cursor.intValue(1);\n        }\n        cursor.dispose();\n        dialogsIds.add(did);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n        state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n        state.bindLong(3,did);\n        state.step();\n        state.dispose();\n      }\n      for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n        long did=messagesByDialogs.keyAt(a);\n        ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n        int lowerId=(int)did;\n        String idsStr=TextUtils.join(\",\",mids);\n        if (lowerId != 0) {\n          if (lowerId < 0) {\n            database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n          }\n else {\n            database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n          }\n        }\n        database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n        int updatedCount=0;\n        cursor=database.queryFinalized(\"SELECT changes()\");\n        if (cursor.next()) {\n          updatedCount=cursor.intValue(0);\n        }\n        cursor.dispose();\n        if (updatedCount > 0) {\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n          if (cursor.next()) {\n            int count=cursor.intValue(0);\n            SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n            state.requery();\n            state.bindInteger(1,Math.max(0,count - updatedCount));\n            state.bindLong(2,did);\n            state.step();\n            state.dispose();\n          }\n          cursor.dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      if (temp.isEmpty()) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n        SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n        while (cursor.next()) {\n          long uid=cursor.longValue(0);\n          int type=cursor.intValue(1);\n          if (mediaCounts == null) {\n            mediaCounts=new SparseArray<>();\n          }\n          LongSparseArray<Integer> counts=mediaCounts.get(type);\n          Integer count;\n          if (counts == null) {\n            counts=new LongSparseArray<>();\n            count=0;\n            mediaCounts.put(type,counts);\n          }\n else {\n            count=counts.get(uid);\n          }\n          if (count == null) {\n            count=0;\n          }\n          count++;\n          counts.put(uid,count);\n        }\n        cursor.dispose();\n        if (mediaCounts != null) {\n          SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n          for (int a=0; a < mediaCounts.size(); a++) {\n            int type=mediaCounts.keyAt(a);\n            LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n            for (int b=0; b < value.size(); b++) {\n              long uid=value.keyAt(b);\n              int lower_part=(int)uid;\n              int count=-1;\n              int old=0;\n              cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n              if (cursor.next()) {\n                count=cursor.intValue(0);\n                old=cursor.intValue(1);\n              }\n              cursor.dispose();\n              if (count != -1) {\n                state.requery();\n                count=Math.max(0,count - value.valueAt(b));\n                state.bindLong(1,uid);\n                state.bindInteger(2,type);\n                state.bindInteger(3,count);\n                state.bindInteger(4,old);\n                state.step();\n              }\n            }\n          }\n          state.dispose();\n        }\n      }\n else {\n        if (channelId == 0) {\n          database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      getMediaDataController().clearBotKeyboard(0,messages);\n      if (dialogsToUpdate.size() != 0) {\n        resetAllUnreadCounters(false);\n      }\n    }\n    return dialogsIds;\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1490,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 9061,
        "startColumnNumber" : 40,
        "endLineNumber" : 9061,
        "endColumnNumber" : 62
      },
      "nodeContext" : "a < mediaCounts.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.SparseArray<org.telegram.messenger.LongSparseArray<java.lang.Integer>>"
  }, {
    "nodeContext" : "mediaCounts",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 9062,
      "startColumnNumber" : 39,
      "endLineNumber" : 9062,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 9062,
        "startColumnNumber" : 39,
        "endLineNumber" : 9062,
        "endColumnNumber" : 59
      },
      "nodeContext" : "mediaCounts.keyAt(a)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 9062,
        "startColumnNumber" : 32,
        "endLineNumber" : 9062,
        "endColumnNumber" : 59
      },
      "nodeContext" : "type=mediaCounts.keyAt(a)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 9062,
        "startColumnNumber" : 28,
        "endLineNumber" : 9062,
        "endColumnNumber" : 60
      },
      "nodeContext" : "int type=mediaCounts.keyAt(a);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1452,
        "startLineNumber" : 9061,
        "startColumnNumber" : 69,
        "endLineNumber" : 9085,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  int type=mediaCounts.keyAt(a);\n  LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n  for (int b=0; b < value.size(); b++) {\n    long uid=value.keyAt(b);\n    int lower_part=(int)uid;\n    int count=-1;\n    int old=0;\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n    if (cursor.next()) {\n      count=cursor.intValue(0);\n      old=cursor.intValue(1);\n    }\n    cursor.dispose();\n    if (count != -1) {\n      state.requery();\n      count=Math.max(0,count - value.valueAt(b));\n      state.bindLong(1,uid);\n      state.bindInteger(2,type);\n      state.bindInteger(3,count);\n      state.bindInteger(4,old);\n      state.step();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1497,
        "startLineNumber" : 9061,
        "startColumnNumber" : 24,
        "endLineNumber" : 9085,
        "endColumnNumber" : 25
      },
      "nodeContext" : "for (int a=0; a < mediaCounts.size(); a++) {\n  int type=mediaCounts.keyAt(a);\n  LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n  for (int b=0; b < value.size(); b++) {\n    long uid=value.keyAt(b);\n    int lower_part=(int)uid;\n    int count=-1;\n    int old=0;\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n    if (cursor.next()) {\n      count=cursor.intValue(0);\n      old=cursor.intValue(1);\n    }\n    cursor.dispose();\n    if (count != -1) {\n      state.requery();\n      count=Math.max(0,count - value.valueAt(b));\n      state.bindLong(1,uid);\n      state.bindInteger(2,type);\n      state.bindInteger(3,count);\n      state.bindInteger(4,old);\n      state.step();\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 163,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1715,
        "startLineNumber" : 9059,
        "startColumnNumber" : 45,
        "endLineNumber" : 9087,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n  for (int a=0; a < mediaCounts.size(); a++) {\n    int type=mediaCounts.keyAt(a);\n    LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n    for (int b=0; b < value.size(); b++) {\n      long uid=value.keyAt(b);\n      int lower_part=(int)uid;\n      int count=-1;\n      int old=0;\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n      if (cursor.next()) {\n        count=cursor.intValue(0);\n        old=cursor.intValue(1);\n      }\n      cursor.dispose();\n      if (count != -1) {\n        state.requery();\n        count=Math.max(0,count - value.valueAt(b));\n        state.bindLong(1,uid);\n        state.bindInteger(2,type);\n        state.bindInteger(3,count);\n        state.bindInteger(4,old);\n        state.step();\n      }\n    }\n  }\n  state.dispose();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1740,
        "startLineNumber" : 9059,
        "startColumnNumber" : 20,
        "endLineNumber" : 9087,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (mediaCounts != null) {\n  SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n  for (int a=0; a < mediaCounts.size(); a++) {\n    int type=mediaCounts.keyAt(a);\n    LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n    for (int b=0; b < value.size(); b++) {\n      long uid=value.keyAt(b);\n      int lower_part=(int)uid;\n      int count=-1;\n      int old=0;\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n      if (cursor.next()) {\n        count=cursor.intValue(0);\n        old=cursor.intValue(1);\n      }\n      cursor.dispose();\n      if (count != -1) {\n        state.requery();\n        count=Math.max(0,count - value.valueAt(b));\n        state.bindLong(1,uid);\n        state.bindInteger(2,type);\n        state.bindInteger(3,count);\n        state.bindInteger(4,old);\n        state.step();\n      }\n    }\n  }\n  state.dispose();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 181,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2978,
        "startLineNumber" : 9034,
        "startColumnNumber" : 36,
        "endLineNumber" : 9088,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n  SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n  while (cursor.next()) {\n    long uid=cursor.longValue(0);\n    int type=cursor.intValue(1);\n    if (mediaCounts == null) {\n      mediaCounts=new SparseArray<>();\n    }\n    LongSparseArray<Integer> counts=mediaCounts.get(type);\n    Integer count;\n    if (counts == null) {\n      counts=new LongSparseArray<>();\n      count=0;\n      mediaCounts.put(type,counts);\n    }\n else {\n      count=counts.get(uid);\n    }\n    if (count == null) {\n      count=0;\n    }\n    count++;\n    counts.put(uid,count);\n  }\n  cursor.dispose();\n  if (mediaCounts != null) {\n    SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n    for (int a=0; a < mediaCounts.size(); a++) {\n      int type=mediaCounts.keyAt(a);\n      LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n      for (int b=0; b < value.size(); b++) {\n        long uid=value.keyAt(b);\n        int lower_part=(int)uid;\n        int count=-1;\n        int old=0;\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n        if (cursor.next()) {\n          count=cursor.intValue(0);\n          old=cursor.intValue(1);\n        }\n        cursor.dispose();\n        if (count != -1) {\n          state.requery();\n          count=Math.max(0,count - value.valueAt(b));\n          state.bindLong(1,uid);\n          state.bindInteger(2,type);\n          state.bindInteger(3,count);\n          state.bindInteger(4,old);\n          state.step();\n        }\n      }\n    }\n    state.dispose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3387,
        "startLineNumber" : 9034,
        "startColumnNumber" : 16,
        "endLineNumber" : 9094,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (temp.isEmpty()) {\n  cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n  SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n  while (cursor.next()) {\n    long uid=cursor.longValue(0);\n    int type=cursor.intValue(1);\n    if (mediaCounts == null) {\n      mediaCounts=new SparseArray<>();\n    }\n    LongSparseArray<Integer> counts=mediaCounts.get(type);\n    Integer count;\n    if (counts == null) {\n      counts=new LongSparseArray<>();\n      count=0;\n      mediaCounts.put(type,counts);\n    }\n else {\n      count=counts.get(uid);\n    }\n    if (count == null) {\n      count=0;\n    }\n    count++;\n    counts.put(uid,count);\n  }\n  cursor.dispose();\n  if (mediaCounts != null) {\n    SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n    for (int a=0; a < mediaCounts.size(); a++) {\n      int type=mediaCounts.keyAt(a);\n      LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n      for (int b=0; b < value.size(); b++) {\n        long uid=value.keyAt(b);\n        int lower_part=(int)uid;\n        int count=-1;\n        int old=0;\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n        if (cursor.next()) {\n          count=cursor.intValue(0);\n          old=cursor.intValue(1);\n        }\n        cursor.dispose();\n        if (count != -1) {\n          state.requery();\n          count=Math.max(0,count - value.valueAt(b));\n          state.bindLong(1,uid);\n          state.bindInteger(2,type);\n          state.bindInteger(3,count);\n          state.bindInteger(4,old);\n          state.step();\n        }\n      }\n    }\n    state.dispose();\n  }\n}\n else {\n  if (channelId == 0) {\n    database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n  }\n else {\n    database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 347,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 11336,
        "startLineNumber" : 8903,
        "startColumnNumber" : 19,
        "endLineNumber" : 9101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String ids;\n  final ArrayList<Integer> temp=new ArrayList<>(messages);\n  LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n  LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<File> filesToDelete=new ArrayList<>();\n  ArrayList<String> namesToDelete=new ArrayList<>();\n  ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n  int currentUser=getUserConfig().getClientUserId();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      int mid=cursor.intValue(5);\n      temp.remove((Integer)mid);\n      ArrayList<Integer> mids=messagesByDialogs.get(did);\n      if (mids == null) {\n        mids=new ArrayList<>();\n        messagesByDialogs.put(did,mids);\n      }\n      mids.add(mid);\n      if (did != currentUser) {\n        int read_state=cursor.intValue(2);\n        if (cursor.intValue(3) == 0) {\n          Integer[] unread_count=dialogsToUpdate.get(did);\n          if (unread_count == null) {\n            unread_count=new Integer[]{0,0};\n            dialogsToUpdate.put(did,unread_count);\n          }\n          if (read_state < 2) {\n            unread_count[1]++;\n          }\n          if (read_state == 0 || read_state == 2) {\n            unread_count[0]++;\n          }\n        }\n      }\n      if ((int)did != 0 && !deleteFiles) {\n        continue;\n      }\n      NativeByteBuffer data=cursor.byteBufferValue(1);\n      if (data != null) {\n        TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n        message.readAttachPath(data,getUserConfig().clientUserId);\n        data.reuse();\n        addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  deleteFromDownloadQueue(idsToDelete,true);\n  AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n  getFileLoader().deleteFiles(filesToDelete,0);\n  for (int a=0; a < dialogsToUpdate.size(); a++) {\n    long did=dialogsToUpdate.keyAt(a);\n    Integer[] counts=dialogsToUpdate.valueAt(a);\n    cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n    int old_unread_count=0;\n    int old_mentions_count=0;\n    if (cursor.next()) {\n      old_unread_count=cursor.intValue(0);\n      old_mentions_count=cursor.intValue(1);\n    }\n    cursor.dispose();\n    dialogsIds.add(did);\n    SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n    state.requery();\n    state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n    state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n    state.bindLong(3,did);\n    state.step();\n    state.dispose();\n  }\n  for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n    long did=messagesByDialogs.keyAt(a);\n    ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n    int lowerId=(int)did;\n    String idsStr=TextUtils.join(\",\",mids);\n    if (lowerId != 0) {\n      if (lowerId < 0) {\n        database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n    int updatedCount=0;\n    cursor=database.queryFinalized(\"SELECT changes()\");\n    if (cursor.next()) {\n      updatedCount=cursor.intValue(0);\n    }\n    cursor.dispose();\n    if (updatedCount > 0) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n      if (cursor.next()) {\n        int count=cursor.intValue(0);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,count - updatedCount));\n        state.bindLong(2,did);\n        state.step();\n        state.dispose();\n      }\n      cursor.dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  if (temp.isEmpty()) {\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n    SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n    while (cursor.next()) {\n      long uid=cursor.longValue(0);\n      int type=cursor.intValue(1);\n      if (mediaCounts == null) {\n        mediaCounts=new SparseArray<>();\n      }\n      LongSparseArray<Integer> counts=mediaCounts.get(type);\n      Integer count;\n      if (counts == null) {\n        counts=new LongSparseArray<>();\n        count=0;\n        mediaCounts.put(type,counts);\n      }\n else {\n        count=counts.get(uid);\n      }\n      if (count == null) {\n        count=0;\n      }\n      count++;\n      counts.put(uid,count);\n    }\n    cursor.dispose();\n    if (mediaCounts != null) {\n      SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n      for (int a=0; a < mediaCounts.size(); a++) {\n        int type=mediaCounts.keyAt(a);\n        LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n        for (int b=0; b < value.size(); b++) {\n          long uid=value.keyAt(b);\n          int lower_part=(int)uid;\n          int count=-1;\n          int old=0;\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n          if (cursor.next()) {\n            count=cursor.intValue(0);\n            old=cursor.intValue(1);\n          }\n          cursor.dispose();\n          if (count != -1) {\n            state.requery();\n            count=Math.max(0,count - value.valueAt(b));\n            state.bindLong(1,uid);\n            state.bindInteger(2,type);\n            state.bindInteger(3,count);\n            state.bindInteger(4,old);\n            state.step();\n          }\n        }\n      }\n      state.dispose();\n    }\n  }\n else {\n    if (channelId == 0) {\n      database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n    }\n else {\n      database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  getMediaDataController().clearBotKeyboard(0,messages);\n  if (dialogsToUpdate.size() != 0) {\n    resetAllUnreadCounters(false);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1238,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12993,
        "startLineNumber" : 8867,
        "startColumnNumber" : 12,
        "endLineNumber" : 9101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (scheduled) {\n  String ids;\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      if (!dialogsToUpdate.contains(did)) {\n        dialogsToUpdate.add(did);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n    broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n  }\n}\n else {\n  String ids;\n  final ArrayList<Integer> temp=new ArrayList<>(messages);\n  LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n  LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<File> filesToDelete=new ArrayList<>();\n  ArrayList<String> namesToDelete=new ArrayList<>();\n  ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n  int currentUser=getUserConfig().getClientUserId();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      int mid=cursor.intValue(5);\n      temp.remove((Integer)mid);\n      ArrayList<Integer> mids=messagesByDialogs.get(did);\n      if (mids == null) {\n        mids=new ArrayList<>();\n        messagesByDialogs.put(did,mids);\n      }\n      mids.add(mid);\n      if (did != currentUser) {\n        int read_state=cursor.intValue(2);\n        if (cursor.intValue(3) == 0) {\n          Integer[] unread_count=dialogsToUpdate.get(did);\n          if (unread_count == null) {\n            unread_count=new Integer[]{0,0};\n            dialogsToUpdate.put(did,unread_count);\n          }\n          if (read_state < 2) {\n            unread_count[1]++;\n          }\n          if (read_state == 0 || read_state == 2) {\n            unread_count[0]++;\n          }\n        }\n      }\n      if ((int)did != 0 && !deleteFiles) {\n        continue;\n      }\n      NativeByteBuffer data=cursor.byteBufferValue(1);\n      if (data != null) {\n        TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n        message.readAttachPath(data,getUserConfig().clientUserId);\n        data.reuse();\n        addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  deleteFromDownloadQueue(idsToDelete,true);\n  AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n  getFileLoader().deleteFiles(filesToDelete,0);\n  for (int a=0; a < dialogsToUpdate.size(); a++) {\n    long did=dialogsToUpdate.keyAt(a);\n    Integer[] counts=dialogsToUpdate.valueAt(a);\n    cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n    int old_unread_count=0;\n    int old_mentions_count=0;\n    if (cursor.next()) {\n      old_unread_count=cursor.intValue(0);\n      old_mentions_count=cursor.intValue(1);\n    }\n    cursor.dispose();\n    dialogsIds.add(did);\n    SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n    state.requery();\n    state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n    state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n    state.bindLong(3,did);\n    state.step();\n    state.dispose();\n  }\n  for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n    long did=messagesByDialogs.keyAt(a);\n    ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n    int lowerId=(int)did;\n    String idsStr=TextUtils.join(\",\",mids);\n    if (lowerId != 0) {\n      if (lowerId < 0) {\n        database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n    int updatedCount=0;\n    cursor=database.queryFinalized(\"SELECT changes()\");\n    if (cursor.next()) {\n      updatedCount=cursor.intValue(0);\n    }\n    cursor.dispose();\n    if (updatedCount > 0) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n      if (cursor.next()) {\n        int count=cursor.intValue(0);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,count - updatedCount));\n        state.bindLong(2,did);\n        state.step();\n        state.dispose();\n      }\n      cursor.dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  if (temp.isEmpty()) {\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n    SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n    while (cursor.next()) {\n      long uid=cursor.longValue(0);\n      int type=cursor.intValue(1);\n      if (mediaCounts == null) {\n        mediaCounts=new SparseArray<>();\n      }\n      LongSparseArray<Integer> counts=mediaCounts.get(type);\n      Integer count;\n      if (counts == null) {\n        counts=new LongSparseArray<>();\n        count=0;\n        mediaCounts.put(type,counts);\n      }\n else {\n        count=counts.get(uid);\n      }\n      if (count == null) {\n        count=0;\n      }\n      count++;\n      counts.put(uid,count);\n    }\n    cursor.dispose();\n    if (mediaCounts != null) {\n      SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n      for (int a=0; a < mediaCounts.size(); a++) {\n        int type=mediaCounts.keyAt(a);\n        LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n        for (int b=0; b < value.size(); b++) {\n          long uid=value.keyAt(b);\n          int lower_part=(int)uid;\n          int count=-1;\n          int old=0;\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n          if (cursor.next()) {\n            count=cursor.intValue(0);\n            old=cursor.intValue(1);\n          }\n          cursor.dispose();\n          if (count != -1) {\n            state.requery();\n            count=Math.max(0,count - value.valueAt(b));\n            state.bindLong(1,uid);\n            state.bindInteger(2,type);\n            state.bindInteger(3,count);\n            state.bindInteger(4,old);\n            state.step();\n          }\n        }\n      }\n      state.dispose();\n    }\n  }\n else {\n    if (channelId == 0) {\n      database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n    }\n else {\n      database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  getMediaDataController().clearBotKeyboard(0,messages);\n  if (dialogsToUpdate.size() != 0) {\n    resetAllUnreadCounters(false);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1435,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 13108,
        "startLineNumber" : 8865,
        "startColumnNumber" : 12,
        "endLineNumber" : 9103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ArrayList<Long> dialogsIds=new ArrayList<>();\n  if (scheduled) {\n    String ids;\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        if (!dialogsToUpdate.contains(did)) {\n          dialogsToUpdate.add(did);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n      broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n    }\n  }\n else {\n    String ids;\n    final ArrayList<Integer> temp=new ArrayList<>(messages);\n    LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n    LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<File> filesToDelete=new ArrayList<>();\n    ArrayList<String> namesToDelete=new ArrayList<>();\n    ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n    int currentUser=getUserConfig().getClientUserId();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        int mid=cursor.intValue(5);\n        temp.remove((Integer)mid);\n        ArrayList<Integer> mids=messagesByDialogs.get(did);\n        if (mids == null) {\n          mids=new ArrayList<>();\n          messagesByDialogs.put(did,mids);\n        }\n        mids.add(mid);\n        if (did != currentUser) {\n          int read_state=cursor.intValue(2);\n          if (cursor.intValue(3) == 0) {\n            Integer[] unread_count=dialogsToUpdate.get(did);\n            if (unread_count == null) {\n              unread_count=new Integer[]{0,0};\n              dialogsToUpdate.put(did,unread_count);\n            }\n            if (read_state < 2) {\n              unread_count[1]++;\n            }\n            if (read_state == 0 || read_state == 2) {\n              unread_count[0]++;\n            }\n          }\n        }\n        if ((int)did != 0 && !deleteFiles) {\n          continue;\n        }\n        NativeByteBuffer data=cursor.byteBufferValue(1);\n        if (data != null) {\n          TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n          message.readAttachPath(data,getUserConfig().clientUserId);\n          data.reuse();\n          addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    deleteFromDownloadQueue(idsToDelete,true);\n    AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n    getFileLoader().deleteFiles(filesToDelete,0);\n    for (int a=0; a < dialogsToUpdate.size(); a++) {\n      long did=dialogsToUpdate.keyAt(a);\n      Integer[] counts=dialogsToUpdate.valueAt(a);\n      cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n      int old_unread_count=0;\n      int old_mentions_count=0;\n      if (cursor.next()) {\n        old_unread_count=cursor.intValue(0);\n        old_mentions_count=cursor.intValue(1);\n      }\n      cursor.dispose();\n      dialogsIds.add(did);\n      SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n      state.requery();\n      state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n      state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n      state.bindLong(3,did);\n      state.step();\n      state.dispose();\n    }\n    for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n      long did=messagesByDialogs.keyAt(a);\n      ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n      int lowerId=(int)did;\n      String idsStr=TextUtils.join(\",\",mids);\n      if (lowerId != 0) {\n        if (lowerId < 0) {\n          database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n      int updatedCount=0;\n      cursor=database.queryFinalized(\"SELECT changes()\");\n      if (cursor.next()) {\n        updatedCount=cursor.intValue(0);\n      }\n      cursor.dispose();\n      if (updatedCount > 0) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n        if (cursor.next()) {\n          int count=cursor.intValue(0);\n          SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n          state.requery();\n          state.bindInteger(1,Math.max(0,count - updatedCount));\n          state.bindLong(2,did);\n          state.step();\n          state.dispose();\n        }\n        cursor.dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    if (temp.isEmpty()) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n      SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n      while (cursor.next()) {\n        long uid=cursor.longValue(0);\n        int type=cursor.intValue(1);\n        if (mediaCounts == null) {\n          mediaCounts=new SparseArray<>();\n        }\n        LongSparseArray<Integer> counts=mediaCounts.get(type);\n        Integer count;\n        if (counts == null) {\n          counts=new LongSparseArray<>();\n          count=0;\n          mediaCounts.put(type,counts);\n        }\n else {\n          count=counts.get(uid);\n        }\n        if (count == null) {\n          count=0;\n        }\n        count++;\n        counts.put(uid,count);\n      }\n      cursor.dispose();\n      if (mediaCounts != null) {\n        SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n        for (int a=0; a < mediaCounts.size(); a++) {\n          int type=mediaCounts.keyAt(a);\n          LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n          for (int b=0; b < value.size(); b++) {\n            long uid=value.keyAt(b);\n            int lower_part=(int)uid;\n            int count=-1;\n            int old=0;\n            cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n            if (cursor.next()) {\n              count=cursor.intValue(0);\n              old=cursor.intValue(1);\n            }\n            cursor.dispose();\n            if (count != -1) {\n              state.requery();\n              count=Math.max(0,count - value.valueAt(b));\n              state.bindLong(1,uid);\n              state.bindInteger(2,type);\n              state.bindInteger(3,count);\n              state.bindInteger(4,old);\n              state.step();\n            }\n          }\n        }\n        state.dispose();\n      }\n    }\n else {\n      if (channelId == 0) {\n        database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    getMediaDataController().clearBotKeyboard(0,messages);\n    if (dialogsToUpdate.size() != 0) {\n      resetAllUnreadCounters(false);\n    }\n  }\n  return dialogsIds;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1450,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13170,
        "startLineNumber" : 8865,
        "startColumnNumber" : 8,
        "endLineNumber" : 9105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ArrayList<Long> dialogsIds=new ArrayList<>();\n  if (scheduled) {\n    String ids;\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        if (!dialogsToUpdate.contains(did)) {\n          dialogsToUpdate.add(did);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n      broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n    }\n  }\n else {\n    String ids;\n    final ArrayList<Integer> temp=new ArrayList<>(messages);\n    LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n    LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<File> filesToDelete=new ArrayList<>();\n    ArrayList<String> namesToDelete=new ArrayList<>();\n    ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n    int currentUser=getUserConfig().getClientUserId();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        int mid=cursor.intValue(5);\n        temp.remove((Integer)mid);\n        ArrayList<Integer> mids=messagesByDialogs.get(did);\n        if (mids == null) {\n          mids=new ArrayList<>();\n          messagesByDialogs.put(did,mids);\n        }\n        mids.add(mid);\n        if (did != currentUser) {\n          int read_state=cursor.intValue(2);\n          if (cursor.intValue(3) == 0) {\n            Integer[] unread_count=dialogsToUpdate.get(did);\n            if (unread_count == null) {\n              unread_count=new Integer[]{0,0};\n              dialogsToUpdate.put(did,unread_count);\n            }\n            if (read_state < 2) {\n              unread_count[1]++;\n            }\n            if (read_state == 0 || read_state == 2) {\n              unread_count[0]++;\n            }\n          }\n        }\n        if ((int)did != 0 && !deleteFiles) {\n          continue;\n        }\n        NativeByteBuffer data=cursor.byteBufferValue(1);\n        if (data != null) {\n          TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n          message.readAttachPath(data,getUserConfig().clientUserId);\n          data.reuse();\n          addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    deleteFromDownloadQueue(idsToDelete,true);\n    AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n    getFileLoader().deleteFiles(filesToDelete,0);\n    for (int a=0; a < dialogsToUpdate.size(); a++) {\n      long did=dialogsToUpdate.keyAt(a);\n      Integer[] counts=dialogsToUpdate.valueAt(a);\n      cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n      int old_unread_count=0;\n      int old_mentions_count=0;\n      if (cursor.next()) {\n        old_unread_count=cursor.intValue(0);\n        old_mentions_count=cursor.intValue(1);\n      }\n      cursor.dispose();\n      dialogsIds.add(did);\n      SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n      state.requery();\n      state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n      state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n      state.bindLong(3,did);\n      state.step();\n      state.dispose();\n    }\n    for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n      long did=messagesByDialogs.keyAt(a);\n      ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n      int lowerId=(int)did;\n      String idsStr=TextUtils.join(\",\",mids);\n      if (lowerId != 0) {\n        if (lowerId < 0) {\n          database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n      int updatedCount=0;\n      cursor=database.queryFinalized(\"SELECT changes()\");\n      if (cursor.next()) {\n        updatedCount=cursor.intValue(0);\n      }\n      cursor.dispose();\n      if (updatedCount > 0) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n        if (cursor.next()) {\n          int count=cursor.intValue(0);\n          SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n          state.requery();\n          state.bindInteger(1,Math.max(0,count - updatedCount));\n          state.bindLong(2,did);\n          state.step();\n          state.dispose();\n        }\n        cursor.dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    if (temp.isEmpty()) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n      SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n      while (cursor.next()) {\n        long uid=cursor.longValue(0);\n        int type=cursor.intValue(1);\n        if (mediaCounts == null) {\n          mediaCounts=new SparseArray<>();\n        }\n        LongSparseArray<Integer> counts=mediaCounts.get(type);\n        Integer count;\n        if (counts == null) {\n          counts=new LongSparseArray<>();\n          count=0;\n          mediaCounts.put(type,counts);\n        }\n else {\n          count=counts.get(uid);\n        }\n        if (count == null) {\n          count=0;\n        }\n        count++;\n        counts.put(uid,count);\n      }\n      cursor.dispose();\n      if (mediaCounts != null) {\n        SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n        for (int a=0; a < mediaCounts.size(); a++) {\n          int type=mediaCounts.keyAt(a);\n          LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n          for (int b=0; b < value.size(); b++) {\n            long uid=value.keyAt(b);\n            int lower_part=(int)uid;\n            int count=-1;\n            int old=0;\n            cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n            if (cursor.next()) {\n              count=cursor.intValue(0);\n              old=cursor.intValue(1);\n            }\n            cursor.dispose();\n            if (count != -1) {\n              state.requery();\n              count=Math.max(0,count - value.valueAt(b));\n              state.bindLong(1,uid);\n              state.bindInteger(2,type);\n              state.bindInteger(3,count);\n              state.bindInteger(4,old);\n              state.step();\n            }\n          }\n        }\n        state.dispose();\n      }\n    }\n else {\n      if (channelId == 0) {\n        database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    getMediaDataController().clearBotKeyboard(0,messages);\n    if (dialogsToUpdate.size() != 0) {\n      resetAllUnreadCounters(false);\n    }\n  }\n  return dialogsIds;\n}\n catch (Exception e) {\n  FileLog.e(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 1462,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13207,
        "startLineNumber" : 8864,
        "startColumnNumber" : 148,
        "endLineNumber" : 9107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    ArrayList<Long> dialogsIds=new ArrayList<>();\n    if (scheduled) {\n      String ids;\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          if (!dialogsToUpdate.contains(did)) {\n            dialogsToUpdate.add(did);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n        broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n      }\n    }\n else {\n      String ids;\n      final ArrayList<Integer> temp=new ArrayList<>(messages);\n      LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n      LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<File> filesToDelete=new ArrayList<>();\n      ArrayList<String> namesToDelete=new ArrayList<>();\n      ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n      int currentUser=getUserConfig().getClientUserId();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          int mid=cursor.intValue(5);\n          temp.remove((Integer)mid);\n          ArrayList<Integer> mids=messagesByDialogs.get(did);\n          if (mids == null) {\n            mids=new ArrayList<>();\n            messagesByDialogs.put(did,mids);\n          }\n          mids.add(mid);\n          if (did != currentUser) {\n            int read_state=cursor.intValue(2);\n            if (cursor.intValue(3) == 0) {\n              Integer[] unread_count=dialogsToUpdate.get(did);\n              if (unread_count == null) {\n                unread_count=new Integer[]{0,0};\n                dialogsToUpdate.put(did,unread_count);\n              }\n              if (read_state < 2) {\n                unread_count[1]++;\n              }\n              if (read_state == 0 || read_state == 2) {\n                unread_count[0]++;\n              }\n            }\n          }\n          if ((int)did != 0 && !deleteFiles) {\n            continue;\n          }\n          NativeByteBuffer data=cursor.byteBufferValue(1);\n          if (data != null) {\n            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n            message.readAttachPath(data,getUserConfig().clientUserId);\n            data.reuse();\n            addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      deleteFromDownloadQueue(idsToDelete,true);\n      AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n      getFileLoader().deleteFiles(filesToDelete,0);\n      for (int a=0; a < dialogsToUpdate.size(); a++) {\n        long did=dialogsToUpdate.keyAt(a);\n        Integer[] counts=dialogsToUpdate.valueAt(a);\n        cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n        int old_unread_count=0;\n        int old_mentions_count=0;\n        if (cursor.next()) {\n          old_unread_count=cursor.intValue(0);\n          old_mentions_count=cursor.intValue(1);\n        }\n        cursor.dispose();\n        dialogsIds.add(did);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n        state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n        state.bindLong(3,did);\n        state.step();\n        state.dispose();\n      }\n      for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n        long did=messagesByDialogs.keyAt(a);\n        ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n        int lowerId=(int)did;\n        String idsStr=TextUtils.join(\",\",mids);\n        if (lowerId != 0) {\n          if (lowerId < 0) {\n            database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n          }\n else {\n            database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n          }\n        }\n        database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n        int updatedCount=0;\n        cursor=database.queryFinalized(\"SELECT changes()\");\n        if (cursor.next()) {\n          updatedCount=cursor.intValue(0);\n        }\n        cursor.dispose();\n        if (updatedCount > 0) {\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n          if (cursor.next()) {\n            int count=cursor.intValue(0);\n            SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n            state.requery();\n            state.bindInteger(1,Math.max(0,count - updatedCount));\n            state.bindLong(2,did);\n            state.step();\n            state.dispose();\n          }\n          cursor.dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      if (temp.isEmpty()) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n        SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n        while (cursor.next()) {\n          long uid=cursor.longValue(0);\n          int type=cursor.intValue(1);\n          if (mediaCounts == null) {\n            mediaCounts=new SparseArray<>();\n          }\n          LongSparseArray<Integer> counts=mediaCounts.get(type);\n          Integer count;\n          if (counts == null) {\n            counts=new LongSparseArray<>();\n            count=0;\n            mediaCounts.put(type,counts);\n          }\n else {\n            count=counts.get(uid);\n          }\n          if (count == null) {\n            count=0;\n          }\n          count++;\n          counts.put(uid,count);\n        }\n        cursor.dispose();\n        if (mediaCounts != null) {\n          SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n          for (int a=0; a < mediaCounts.size(); a++) {\n            int type=mediaCounts.keyAt(a);\n            LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n            for (int b=0; b < value.size(); b++) {\n              long uid=value.keyAt(b);\n              int lower_part=(int)uid;\n              int count=-1;\n              int old=0;\n              cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n              if (cursor.next()) {\n                count=cursor.intValue(0);\n                old=cursor.intValue(1);\n              }\n              cursor.dispose();\n              if (count != -1) {\n                state.requery();\n                count=Math.max(0,count - value.valueAt(b));\n                state.bindLong(1,uid);\n                state.bindInteger(2,type);\n                state.bindInteger(3,count);\n                state.bindInteger(4,old);\n                state.step();\n              }\n            }\n          }\n          state.dispose();\n        }\n      }\n else {\n        if (channelId == 0) {\n          database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      getMediaDataController().clearBotKeyboard(0,messages);\n      if (dialogsToUpdate.size() != 0) {\n        resetAllUnreadCounters(false);\n      }\n    }\n    return dialogsIds;\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1465,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 13351,
        "startLineNumber" : 8864,
        "startColumnNumber" : 4,
        "endLineNumber" : 9107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private ArrayList<Long> markMessagesAsDeletedInternal(final ArrayList<Integer> messages,int channelId,boolean deleteFiles,boolean scheduled){\n  try {\n    ArrayList<Long> dialogsIds=new ArrayList<>();\n    if (scheduled) {\n      String ids;\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          if (!dialogsToUpdate.contains(did)) {\n            dialogsToUpdate.add(did);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n        broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n      }\n    }\n else {\n      String ids;\n      final ArrayList<Integer> temp=new ArrayList<>(messages);\n      LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n      LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<File> filesToDelete=new ArrayList<>();\n      ArrayList<String> namesToDelete=new ArrayList<>();\n      ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n      int currentUser=getUserConfig().getClientUserId();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          int mid=cursor.intValue(5);\n          temp.remove((Integer)mid);\n          ArrayList<Integer> mids=messagesByDialogs.get(did);\n          if (mids == null) {\n            mids=new ArrayList<>();\n            messagesByDialogs.put(did,mids);\n          }\n          mids.add(mid);\n          if (did != currentUser) {\n            int read_state=cursor.intValue(2);\n            if (cursor.intValue(3) == 0) {\n              Integer[] unread_count=dialogsToUpdate.get(did);\n              if (unread_count == null) {\n                unread_count=new Integer[]{0,0};\n                dialogsToUpdate.put(did,unread_count);\n              }\n              if (read_state < 2) {\n                unread_count[1]++;\n              }\n              if (read_state == 0 || read_state == 2) {\n                unread_count[0]++;\n              }\n            }\n          }\n          if ((int)did != 0 && !deleteFiles) {\n            continue;\n          }\n          NativeByteBuffer data=cursor.byteBufferValue(1);\n          if (data != null) {\n            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n            message.readAttachPath(data,getUserConfig().clientUserId);\n            data.reuse();\n            addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      deleteFromDownloadQueue(idsToDelete,true);\n      AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n      getFileLoader().deleteFiles(filesToDelete,0);\n      for (int a=0; a < dialogsToUpdate.size(); a++) {\n        long did=dialogsToUpdate.keyAt(a);\n        Integer[] counts=dialogsToUpdate.valueAt(a);\n        cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n        int old_unread_count=0;\n        int old_mentions_count=0;\n        if (cursor.next()) {\n          old_unread_count=cursor.intValue(0);\n          old_mentions_count=cursor.intValue(1);\n        }\n        cursor.dispose();\n        dialogsIds.add(did);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n        state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n        state.bindLong(3,did);\n        state.step();\n        state.dispose();\n      }\n      for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n        long did=messagesByDialogs.keyAt(a);\n        ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n        int lowerId=(int)did;\n        String idsStr=TextUtils.join(\",\",mids);\n        if (lowerId != 0) {\n          if (lowerId < 0) {\n            database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n          }\n else {\n            database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n          }\n        }\n        database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n        int updatedCount=0;\n        cursor=database.queryFinalized(\"SELECT changes()\");\n        if (cursor.next()) {\n          updatedCount=cursor.intValue(0);\n        }\n        cursor.dispose();\n        if (updatedCount > 0) {\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n          if (cursor.next()) {\n            int count=cursor.intValue(0);\n            SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n            state.requery();\n            state.bindInteger(1,Math.max(0,count - updatedCount));\n            state.bindLong(2,did);\n            state.step();\n            state.dispose();\n          }\n          cursor.dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      if (temp.isEmpty()) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n        SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n        while (cursor.next()) {\n          long uid=cursor.longValue(0);\n          int type=cursor.intValue(1);\n          if (mediaCounts == null) {\n            mediaCounts=new SparseArray<>();\n          }\n          LongSparseArray<Integer> counts=mediaCounts.get(type);\n          Integer count;\n          if (counts == null) {\n            counts=new LongSparseArray<>();\n            count=0;\n            mediaCounts.put(type,counts);\n          }\n else {\n            count=counts.get(uid);\n          }\n          if (count == null) {\n            count=0;\n          }\n          count++;\n          counts.put(uid,count);\n        }\n        cursor.dispose();\n        if (mediaCounts != null) {\n          SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n          for (int a=0; a < mediaCounts.size(); a++) {\n            int type=mediaCounts.keyAt(a);\n            LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n            for (int b=0; b < value.size(); b++) {\n              long uid=value.keyAt(b);\n              int lower_part=(int)uid;\n              int count=-1;\n              int old=0;\n              cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n              if (cursor.next()) {\n                count=cursor.intValue(0);\n                old=cursor.intValue(1);\n              }\n              cursor.dispose();\n              if (count != -1) {\n                state.requery();\n                count=Math.max(0,count - value.valueAt(b));\n                state.bindLong(1,uid);\n                state.bindInteger(2,type);\n                state.bindInteger(3,count);\n                state.bindInteger(4,old);\n                state.step();\n              }\n            }\n          }\n          state.dispose();\n        }\n      }\n else {\n        if (channelId == 0) {\n          database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      getMediaDataController().clearBotKeyboard(0,messages);\n      if (dialogsToUpdate.size() != 0) {\n        resetAllUnreadCounters(false);\n      }\n    }\n    return dialogsIds;\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1490,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 9062,
        "startColumnNumber" : 28,
        "endLineNumber" : 9062,
        "endColumnNumber" : 60
      },
      "nodeContext" : "int type=mediaCounts.keyAt(a);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.SparseArray<org.telegram.messenger.LongSparseArray<java.lang.Integer>>"
  }, {
    "nodeContext" : "mediaCounts",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 9063,
      "startColumnNumber" : 61,
      "endLineNumber" : 9063,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 9063,
        "startColumnNumber" : 61,
        "endLineNumber" : 9063,
        "endColumnNumber" : 83
      },
      "nodeContext" : "mediaCounts.valueAt(a)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 9063,
        "startColumnNumber" : 53,
        "endLineNumber" : 9063,
        "endColumnNumber" : 83
      },
      "nodeContext" : "value=mediaCounts.valueAt(a)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 9063,
        "startColumnNumber" : 28,
        "endLineNumber" : 9063,
        "endColumnNumber" : 84
      },
      "nodeContext" : "LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1452,
        "startLineNumber" : 9061,
        "startColumnNumber" : 69,
        "endLineNumber" : 9085,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  int type=mediaCounts.keyAt(a);\n  LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n  for (int b=0; b < value.size(); b++) {\n    long uid=value.keyAt(b);\n    int lower_part=(int)uid;\n    int count=-1;\n    int old=0;\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n    if (cursor.next()) {\n      count=cursor.intValue(0);\n      old=cursor.intValue(1);\n    }\n    cursor.dispose();\n    if (count != -1) {\n      state.requery();\n      count=Math.max(0,count - value.valueAt(b));\n      state.bindLong(1,uid);\n      state.bindInteger(2,type);\n      state.bindInteger(3,count);\n      state.bindInteger(4,old);\n      state.step();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1497,
        "startLineNumber" : 9061,
        "startColumnNumber" : 24,
        "endLineNumber" : 9085,
        "endColumnNumber" : 25
      },
      "nodeContext" : "for (int a=0; a < mediaCounts.size(); a++) {\n  int type=mediaCounts.keyAt(a);\n  LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n  for (int b=0; b < value.size(); b++) {\n    long uid=value.keyAt(b);\n    int lower_part=(int)uid;\n    int count=-1;\n    int old=0;\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n    if (cursor.next()) {\n      count=cursor.intValue(0);\n      old=cursor.intValue(1);\n    }\n    cursor.dispose();\n    if (count != -1) {\n      state.requery();\n      count=Math.max(0,count - value.valueAt(b));\n      state.bindLong(1,uid);\n      state.bindInteger(2,type);\n      state.bindInteger(3,count);\n      state.bindInteger(4,old);\n      state.step();\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 163,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1715,
        "startLineNumber" : 9059,
        "startColumnNumber" : 45,
        "endLineNumber" : 9087,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n  for (int a=0; a < mediaCounts.size(); a++) {\n    int type=mediaCounts.keyAt(a);\n    LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n    for (int b=0; b < value.size(); b++) {\n      long uid=value.keyAt(b);\n      int lower_part=(int)uid;\n      int count=-1;\n      int old=0;\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n      if (cursor.next()) {\n        count=cursor.intValue(0);\n        old=cursor.intValue(1);\n      }\n      cursor.dispose();\n      if (count != -1) {\n        state.requery();\n        count=Math.max(0,count - value.valueAt(b));\n        state.bindLong(1,uid);\n        state.bindInteger(2,type);\n        state.bindInteger(3,count);\n        state.bindInteger(4,old);\n        state.step();\n      }\n    }\n  }\n  state.dispose();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1740,
        "startLineNumber" : 9059,
        "startColumnNumber" : 20,
        "endLineNumber" : 9087,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (mediaCounts != null) {\n  SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n  for (int a=0; a < mediaCounts.size(); a++) {\n    int type=mediaCounts.keyAt(a);\n    LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n    for (int b=0; b < value.size(); b++) {\n      long uid=value.keyAt(b);\n      int lower_part=(int)uid;\n      int count=-1;\n      int old=0;\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n      if (cursor.next()) {\n        count=cursor.intValue(0);\n        old=cursor.intValue(1);\n      }\n      cursor.dispose();\n      if (count != -1) {\n        state.requery();\n        count=Math.max(0,count - value.valueAt(b));\n        state.bindLong(1,uid);\n        state.bindInteger(2,type);\n        state.bindInteger(3,count);\n        state.bindInteger(4,old);\n        state.step();\n      }\n    }\n  }\n  state.dispose();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 181,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2978,
        "startLineNumber" : 9034,
        "startColumnNumber" : 36,
        "endLineNumber" : 9088,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n  SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n  while (cursor.next()) {\n    long uid=cursor.longValue(0);\n    int type=cursor.intValue(1);\n    if (mediaCounts == null) {\n      mediaCounts=new SparseArray<>();\n    }\n    LongSparseArray<Integer> counts=mediaCounts.get(type);\n    Integer count;\n    if (counts == null) {\n      counts=new LongSparseArray<>();\n      count=0;\n      mediaCounts.put(type,counts);\n    }\n else {\n      count=counts.get(uid);\n    }\n    if (count == null) {\n      count=0;\n    }\n    count++;\n    counts.put(uid,count);\n  }\n  cursor.dispose();\n  if (mediaCounts != null) {\n    SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n    for (int a=0; a < mediaCounts.size(); a++) {\n      int type=mediaCounts.keyAt(a);\n      LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n      for (int b=0; b < value.size(); b++) {\n        long uid=value.keyAt(b);\n        int lower_part=(int)uid;\n        int count=-1;\n        int old=0;\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n        if (cursor.next()) {\n          count=cursor.intValue(0);\n          old=cursor.intValue(1);\n        }\n        cursor.dispose();\n        if (count != -1) {\n          state.requery();\n          count=Math.max(0,count - value.valueAt(b));\n          state.bindLong(1,uid);\n          state.bindInteger(2,type);\n          state.bindInteger(3,count);\n          state.bindInteger(4,old);\n          state.step();\n        }\n      }\n    }\n    state.dispose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3387,
        "startLineNumber" : 9034,
        "startColumnNumber" : 16,
        "endLineNumber" : 9094,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (temp.isEmpty()) {\n  cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n  SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n  while (cursor.next()) {\n    long uid=cursor.longValue(0);\n    int type=cursor.intValue(1);\n    if (mediaCounts == null) {\n      mediaCounts=new SparseArray<>();\n    }\n    LongSparseArray<Integer> counts=mediaCounts.get(type);\n    Integer count;\n    if (counts == null) {\n      counts=new LongSparseArray<>();\n      count=0;\n      mediaCounts.put(type,counts);\n    }\n else {\n      count=counts.get(uid);\n    }\n    if (count == null) {\n      count=0;\n    }\n    count++;\n    counts.put(uid,count);\n  }\n  cursor.dispose();\n  if (mediaCounts != null) {\n    SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n    for (int a=0; a < mediaCounts.size(); a++) {\n      int type=mediaCounts.keyAt(a);\n      LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n      for (int b=0; b < value.size(); b++) {\n        long uid=value.keyAt(b);\n        int lower_part=(int)uid;\n        int count=-1;\n        int old=0;\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n        if (cursor.next()) {\n          count=cursor.intValue(0);\n          old=cursor.intValue(1);\n        }\n        cursor.dispose();\n        if (count != -1) {\n          state.requery();\n          count=Math.max(0,count - value.valueAt(b));\n          state.bindLong(1,uid);\n          state.bindInteger(2,type);\n          state.bindInteger(3,count);\n          state.bindInteger(4,old);\n          state.step();\n        }\n      }\n    }\n    state.dispose();\n  }\n}\n else {\n  if (channelId == 0) {\n    database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n  }\n else {\n    database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 347,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 11336,
        "startLineNumber" : 8903,
        "startColumnNumber" : 19,
        "endLineNumber" : 9101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String ids;\n  final ArrayList<Integer> temp=new ArrayList<>(messages);\n  LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n  LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<File> filesToDelete=new ArrayList<>();\n  ArrayList<String> namesToDelete=new ArrayList<>();\n  ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n  int currentUser=getUserConfig().getClientUserId();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      int mid=cursor.intValue(5);\n      temp.remove((Integer)mid);\n      ArrayList<Integer> mids=messagesByDialogs.get(did);\n      if (mids == null) {\n        mids=new ArrayList<>();\n        messagesByDialogs.put(did,mids);\n      }\n      mids.add(mid);\n      if (did != currentUser) {\n        int read_state=cursor.intValue(2);\n        if (cursor.intValue(3) == 0) {\n          Integer[] unread_count=dialogsToUpdate.get(did);\n          if (unread_count == null) {\n            unread_count=new Integer[]{0,0};\n            dialogsToUpdate.put(did,unread_count);\n          }\n          if (read_state < 2) {\n            unread_count[1]++;\n          }\n          if (read_state == 0 || read_state == 2) {\n            unread_count[0]++;\n          }\n        }\n      }\n      if ((int)did != 0 && !deleteFiles) {\n        continue;\n      }\n      NativeByteBuffer data=cursor.byteBufferValue(1);\n      if (data != null) {\n        TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n        message.readAttachPath(data,getUserConfig().clientUserId);\n        data.reuse();\n        addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  deleteFromDownloadQueue(idsToDelete,true);\n  AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n  getFileLoader().deleteFiles(filesToDelete,0);\n  for (int a=0; a < dialogsToUpdate.size(); a++) {\n    long did=dialogsToUpdate.keyAt(a);\n    Integer[] counts=dialogsToUpdate.valueAt(a);\n    cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n    int old_unread_count=0;\n    int old_mentions_count=0;\n    if (cursor.next()) {\n      old_unread_count=cursor.intValue(0);\n      old_mentions_count=cursor.intValue(1);\n    }\n    cursor.dispose();\n    dialogsIds.add(did);\n    SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n    state.requery();\n    state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n    state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n    state.bindLong(3,did);\n    state.step();\n    state.dispose();\n  }\n  for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n    long did=messagesByDialogs.keyAt(a);\n    ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n    int lowerId=(int)did;\n    String idsStr=TextUtils.join(\",\",mids);\n    if (lowerId != 0) {\n      if (lowerId < 0) {\n        database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n    int updatedCount=0;\n    cursor=database.queryFinalized(\"SELECT changes()\");\n    if (cursor.next()) {\n      updatedCount=cursor.intValue(0);\n    }\n    cursor.dispose();\n    if (updatedCount > 0) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n      if (cursor.next()) {\n        int count=cursor.intValue(0);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,count - updatedCount));\n        state.bindLong(2,did);\n        state.step();\n        state.dispose();\n      }\n      cursor.dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  if (temp.isEmpty()) {\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n    SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n    while (cursor.next()) {\n      long uid=cursor.longValue(0);\n      int type=cursor.intValue(1);\n      if (mediaCounts == null) {\n        mediaCounts=new SparseArray<>();\n      }\n      LongSparseArray<Integer> counts=mediaCounts.get(type);\n      Integer count;\n      if (counts == null) {\n        counts=new LongSparseArray<>();\n        count=0;\n        mediaCounts.put(type,counts);\n      }\n else {\n        count=counts.get(uid);\n      }\n      if (count == null) {\n        count=0;\n      }\n      count++;\n      counts.put(uid,count);\n    }\n    cursor.dispose();\n    if (mediaCounts != null) {\n      SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n      for (int a=0; a < mediaCounts.size(); a++) {\n        int type=mediaCounts.keyAt(a);\n        LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n        for (int b=0; b < value.size(); b++) {\n          long uid=value.keyAt(b);\n          int lower_part=(int)uid;\n          int count=-1;\n          int old=0;\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n          if (cursor.next()) {\n            count=cursor.intValue(0);\n            old=cursor.intValue(1);\n          }\n          cursor.dispose();\n          if (count != -1) {\n            state.requery();\n            count=Math.max(0,count - value.valueAt(b));\n            state.bindLong(1,uid);\n            state.bindInteger(2,type);\n            state.bindInteger(3,count);\n            state.bindInteger(4,old);\n            state.step();\n          }\n        }\n      }\n      state.dispose();\n    }\n  }\n else {\n    if (channelId == 0) {\n      database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n    }\n else {\n      database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  getMediaDataController().clearBotKeyboard(0,messages);\n  if (dialogsToUpdate.size() != 0) {\n    resetAllUnreadCounters(false);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1238,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12993,
        "startLineNumber" : 8867,
        "startColumnNumber" : 12,
        "endLineNumber" : 9101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (scheduled) {\n  String ids;\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      if (!dialogsToUpdate.contains(did)) {\n        dialogsToUpdate.add(did);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n    broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n  }\n}\n else {\n  String ids;\n  final ArrayList<Integer> temp=new ArrayList<>(messages);\n  LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n  LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n  if (channelId != 0) {\n    StringBuilder builder=new StringBuilder(messages.size());\n    for (int a=0; a < messages.size(); a++) {\n      long messageId=messages.get(a);\n      messageId|=((long)channelId) << 32;\n      if (builder.length() > 0) {\n        builder.append(',');\n      }\n      builder.append(messageId);\n    }\n    ids=builder.toString();\n  }\n else {\n    ids=TextUtils.join(\",\",messages);\n  }\n  ArrayList<File> filesToDelete=new ArrayList<>();\n  ArrayList<String> namesToDelete=new ArrayList<>();\n  ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n  int currentUser=getUserConfig().getClientUserId();\n  SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n  try {\n    while (cursor.next()) {\n      long did=cursor.longValue(0);\n      int mid=cursor.intValue(5);\n      temp.remove((Integer)mid);\n      ArrayList<Integer> mids=messagesByDialogs.get(did);\n      if (mids == null) {\n        mids=new ArrayList<>();\n        messagesByDialogs.put(did,mids);\n      }\n      mids.add(mid);\n      if (did != currentUser) {\n        int read_state=cursor.intValue(2);\n        if (cursor.intValue(3) == 0) {\n          Integer[] unread_count=dialogsToUpdate.get(did);\n          if (unread_count == null) {\n            unread_count=new Integer[]{0,0};\n            dialogsToUpdate.put(did,unread_count);\n          }\n          if (read_state < 2) {\n            unread_count[1]++;\n          }\n          if (read_state == 0 || read_state == 2) {\n            unread_count[0]++;\n          }\n        }\n      }\n      if ((int)did != 0 && !deleteFiles) {\n        continue;\n      }\n      NativeByteBuffer data=cursor.byteBufferValue(1);\n      if (data != null) {\n        TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n        message.readAttachPath(data,getUserConfig().clientUserId);\n        data.reuse();\n        addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n      }\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  cursor.dispose();\n  deleteFromDownloadQueue(idsToDelete,true);\n  AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n  getFileLoader().deleteFiles(filesToDelete,0);\n  for (int a=0; a < dialogsToUpdate.size(); a++) {\n    long did=dialogsToUpdate.keyAt(a);\n    Integer[] counts=dialogsToUpdate.valueAt(a);\n    cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n    int old_unread_count=0;\n    int old_mentions_count=0;\n    if (cursor.next()) {\n      old_unread_count=cursor.intValue(0);\n      old_mentions_count=cursor.intValue(1);\n    }\n    cursor.dispose();\n    dialogsIds.add(did);\n    SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n    state.requery();\n    state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n    state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n    state.bindLong(3,did);\n    state.step();\n    state.dispose();\n  }\n  for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n    long did=messagesByDialogs.keyAt(a);\n    ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n    int lowerId=(int)did;\n    String idsStr=TextUtils.join(\",\",mids);\n    if (lowerId != 0) {\n      if (lowerId < 0) {\n        database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n    int updatedCount=0;\n    cursor=database.queryFinalized(\"SELECT changes()\");\n    if (cursor.next()) {\n      updatedCount=cursor.intValue(0);\n    }\n    cursor.dispose();\n    if (updatedCount > 0) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n      if (cursor.next()) {\n        int count=cursor.intValue(0);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,count - updatedCount));\n        state.bindLong(2,did);\n        state.step();\n        state.dispose();\n      }\n      cursor.dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  if (temp.isEmpty()) {\n    cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n    SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n    while (cursor.next()) {\n      long uid=cursor.longValue(0);\n      int type=cursor.intValue(1);\n      if (mediaCounts == null) {\n        mediaCounts=new SparseArray<>();\n      }\n      LongSparseArray<Integer> counts=mediaCounts.get(type);\n      Integer count;\n      if (counts == null) {\n        counts=new LongSparseArray<>();\n        count=0;\n        mediaCounts.put(type,counts);\n      }\n else {\n        count=counts.get(uid);\n      }\n      if (count == null) {\n        count=0;\n      }\n      count++;\n      counts.put(uid,count);\n    }\n    cursor.dispose();\n    if (mediaCounts != null) {\n      SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n      for (int a=0; a < mediaCounts.size(); a++) {\n        int type=mediaCounts.keyAt(a);\n        LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n        for (int b=0; b < value.size(); b++) {\n          long uid=value.keyAt(b);\n          int lower_part=(int)uid;\n          int count=-1;\n          int old=0;\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n          if (cursor.next()) {\n            count=cursor.intValue(0);\n            old=cursor.intValue(1);\n          }\n          cursor.dispose();\n          if (count != -1) {\n            state.requery();\n            count=Math.max(0,count - value.valueAt(b));\n            state.bindLong(1,uid);\n            state.bindInteger(2,type);\n            state.bindInteger(3,count);\n            state.bindInteger(4,old);\n            state.step();\n          }\n        }\n      }\n      state.dispose();\n    }\n  }\n else {\n    if (channelId == 0) {\n      database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n    }\n else {\n      database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n    }\n  }\n  database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n  getMediaDataController().clearBotKeyboard(0,messages);\n  if (dialogsToUpdate.size() != 0) {\n    resetAllUnreadCounters(false);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1435,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 13108,
        "startLineNumber" : 8865,
        "startColumnNumber" : 12,
        "endLineNumber" : 9103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ArrayList<Long> dialogsIds=new ArrayList<>();\n  if (scheduled) {\n    String ids;\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        if (!dialogsToUpdate.contains(did)) {\n          dialogsToUpdate.add(did);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n      broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n    }\n  }\n else {\n    String ids;\n    final ArrayList<Integer> temp=new ArrayList<>(messages);\n    LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n    LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<File> filesToDelete=new ArrayList<>();\n    ArrayList<String> namesToDelete=new ArrayList<>();\n    ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n    int currentUser=getUserConfig().getClientUserId();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        int mid=cursor.intValue(5);\n        temp.remove((Integer)mid);\n        ArrayList<Integer> mids=messagesByDialogs.get(did);\n        if (mids == null) {\n          mids=new ArrayList<>();\n          messagesByDialogs.put(did,mids);\n        }\n        mids.add(mid);\n        if (did != currentUser) {\n          int read_state=cursor.intValue(2);\n          if (cursor.intValue(3) == 0) {\n            Integer[] unread_count=dialogsToUpdate.get(did);\n            if (unread_count == null) {\n              unread_count=new Integer[]{0,0};\n              dialogsToUpdate.put(did,unread_count);\n            }\n            if (read_state < 2) {\n              unread_count[1]++;\n            }\n            if (read_state == 0 || read_state == 2) {\n              unread_count[0]++;\n            }\n          }\n        }\n        if ((int)did != 0 && !deleteFiles) {\n          continue;\n        }\n        NativeByteBuffer data=cursor.byteBufferValue(1);\n        if (data != null) {\n          TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n          message.readAttachPath(data,getUserConfig().clientUserId);\n          data.reuse();\n          addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    deleteFromDownloadQueue(idsToDelete,true);\n    AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n    getFileLoader().deleteFiles(filesToDelete,0);\n    for (int a=0; a < dialogsToUpdate.size(); a++) {\n      long did=dialogsToUpdate.keyAt(a);\n      Integer[] counts=dialogsToUpdate.valueAt(a);\n      cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n      int old_unread_count=0;\n      int old_mentions_count=0;\n      if (cursor.next()) {\n        old_unread_count=cursor.intValue(0);\n        old_mentions_count=cursor.intValue(1);\n      }\n      cursor.dispose();\n      dialogsIds.add(did);\n      SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n      state.requery();\n      state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n      state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n      state.bindLong(3,did);\n      state.step();\n      state.dispose();\n    }\n    for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n      long did=messagesByDialogs.keyAt(a);\n      ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n      int lowerId=(int)did;\n      String idsStr=TextUtils.join(\",\",mids);\n      if (lowerId != 0) {\n        if (lowerId < 0) {\n          database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n      int updatedCount=0;\n      cursor=database.queryFinalized(\"SELECT changes()\");\n      if (cursor.next()) {\n        updatedCount=cursor.intValue(0);\n      }\n      cursor.dispose();\n      if (updatedCount > 0) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n        if (cursor.next()) {\n          int count=cursor.intValue(0);\n          SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n          state.requery();\n          state.bindInteger(1,Math.max(0,count - updatedCount));\n          state.bindLong(2,did);\n          state.step();\n          state.dispose();\n        }\n        cursor.dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    if (temp.isEmpty()) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n      SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n      while (cursor.next()) {\n        long uid=cursor.longValue(0);\n        int type=cursor.intValue(1);\n        if (mediaCounts == null) {\n          mediaCounts=new SparseArray<>();\n        }\n        LongSparseArray<Integer> counts=mediaCounts.get(type);\n        Integer count;\n        if (counts == null) {\n          counts=new LongSparseArray<>();\n          count=0;\n          mediaCounts.put(type,counts);\n        }\n else {\n          count=counts.get(uid);\n        }\n        if (count == null) {\n          count=0;\n        }\n        count++;\n        counts.put(uid,count);\n      }\n      cursor.dispose();\n      if (mediaCounts != null) {\n        SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n        for (int a=0; a < mediaCounts.size(); a++) {\n          int type=mediaCounts.keyAt(a);\n          LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n          for (int b=0; b < value.size(); b++) {\n            long uid=value.keyAt(b);\n            int lower_part=(int)uid;\n            int count=-1;\n            int old=0;\n            cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n            if (cursor.next()) {\n              count=cursor.intValue(0);\n              old=cursor.intValue(1);\n            }\n            cursor.dispose();\n            if (count != -1) {\n              state.requery();\n              count=Math.max(0,count - value.valueAt(b));\n              state.bindLong(1,uid);\n              state.bindInteger(2,type);\n              state.bindInteger(3,count);\n              state.bindInteger(4,old);\n              state.step();\n            }\n          }\n        }\n        state.dispose();\n      }\n    }\n else {\n      if (channelId == 0) {\n        database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    getMediaDataController().clearBotKeyboard(0,messages);\n    if (dialogsToUpdate.size() != 0) {\n      resetAllUnreadCounters(false);\n    }\n  }\n  return dialogsIds;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1450,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13170,
        "startLineNumber" : 8865,
        "startColumnNumber" : 8,
        "endLineNumber" : 9105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ArrayList<Long> dialogsIds=new ArrayList<>();\n  if (scheduled) {\n    String ids;\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        if (!dialogsToUpdate.contains(did)) {\n          dialogsToUpdate.add(did);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n      broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n    }\n  }\n else {\n    String ids;\n    final ArrayList<Integer> temp=new ArrayList<>(messages);\n    LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n    LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n    if (channelId != 0) {\n      StringBuilder builder=new StringBuilder(messages.size());\n      for (int a=0; a < messages.size(); a++) {\n        long messageId=messages.get(a);\n        messageId|=((long)channelId) << 32;\n        if (builder.length() > 0) {\n          builder.append(',');\n        }\n        builder.append(messageId);\n      }\n      ids=builder.toString();\n    }\n else {\n      ids=TextUtils.join(\",\",messages);\n    }\n    ArrayList<File> filesToDelete=new ArrayList<>();\n    ArrayList<String> namesToDelete=new ArrayList<>();\n    ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n    int currentUser=getUserConfig().getClientUserId();\n    SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n    try {\n      while (cursor.next()) {\n        long did=cursor.longValue(0);\n        int mid=cursor.intValue(5);\n        temp.remove((Integer)mid);\n        ArrayList<Integer> mids=messagesByDialogs.get(did);\n        if (mids == null) {\n          mids=new ArrayList<>();\n          messagesByDialogs.put(did,mids);\n        }\n        mids.add(mid);\n        if (did != currentUser) {\n          int read_state=cursor.intValue(2);\n          if (cursor.intValue(3) == 0) {\n            Integer[] unread_count=dialogsToUpdate.get(did);\n            if (unread_count == null) {\n              unread_count=new Integer[]{0,0};\n              dialogsToUpdate.put(did,unread_count);\n            }\n            if (read_state < 2) {\n              unread_count[1]++;\n            }\n            if (read_state == 0 || read_state == 2) {\n              unread_count[0]++;\n            }\n          }\n        }\n        if ((int)did != 0 && !deleteFiles) {\n          continue;\n        }\n        NativeByteBuffer data=cursor.byteBufferValue(1);\n        if (data != null) {\n          TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n          message.readAttachPath(data,getUserConfig().clientUserId);\n          data.reuse();\n          addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n        }\n      }\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n    cursor.dispose();\n    deleteFromDownloadQueue(idsToDelete,true);\n    AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n    getFileLoader().deleteFiles(filesToDelete,0);\n    for (int a=0; a < dialogsToUpdate.size(); a++) {\n      long did=dialogsToUpdate.keyAt(a);\n      Integer[] counts=dialogsToUpdate.valueAt(a);\n      cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n      int old_unread_count=0;\n      int old_mentions_count=0;\n      if (cursor.next()) {\n        old_unread_count=cursor.intValue(0);\n        old_mentions_count=cursor.intValue(1);\n      }\n      cursor.dispose();\n      dialogsIds.add(did);\n      SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n      state.requery();\n      state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n      state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n      state.bindLong(3,did);\n      state.step();\n      state.dispose();\n    }\n    for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n      long did=messagesByDialogs.keyAt(a);\n      ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n      int lowerId=(int)did;\n      String idsStr=TextUtils.join(\",\",mids);\n      if (lowerId != 0) {\n        if (lowerId < 0) {\n          database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n      int updatedCount=0;\n      cursor=database.queryFinalized(\"SELECT changes()\");\n      if (cursor.next()) {\n        updatedCount=cursor.intValue(0);\n      }\n      cursor.dispose();\n      if (updatedCount > 0) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n        if (cursor.next()) {\n          int count=cursor.intValue(0);\n          SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n          state.requery();\n          state.bindInteger(1,Math.max(0,count - updatedCount));\n          state.bindLong(2,did);\n          state.step();\n          state.dispose();\n        }\n        cursor.dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    if (temp.isEmpty()) {\n      cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n      SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n      while (cursor.next()) {\n        long uid=cursor.longValue(0);\n        int type=cursor.intValue(1);\n        if (mediaCounts == null) {\n          mediaCounts=new SparseArray<>();\n        }\n        LongSparseArray<Integer> counts=mediaCounts.get(type);\n        Integer count;\n        if (counts == null) {\n          counts=new LongSparseArray<>();\n          count=0;\n          mediaCounts.put(type,counts);\n        }\n else {\n          count=counts.get(uid);\n        }\n        if (count == null) {\n          count=0;\n        }\n        count++;\n        counts.put(uid,count);\n      }\n      cursor.dispose();\n      if (mediaCounts != null) {\n        SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n        for (int a=0; a < mediaCounts.size(); a++) {\n          int type=mediaCounts.keyAt(a);\n          LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n          for (int b=0; b < value.size(); b++) {\n            long uid=value.keyAt(b);\n            int lower_part=(int)uid;\n            int count=-1;\n            int old=0;\n            cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n            if (cursor.next()) {\n              count=cursor.intValue(0);\n              old=cursor.intValue(1);\n            }\n            cursor.dispose();\n            if (count != -1) {\n              state.requery();\n              count=Math.max(0,count - value.valueAt(b));\n              state.bindLong(1,uid);\n              state.bindInteger(2,type);\n              state.bindInteger(3,count);\n              state.bindInteger(4,old);\n              state.step();\n            }\n          }\n        }\n        state.dispose();\n      }\n    }\n else {\n      if (channelId == 0) {\n        database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n      }\n else {\n        database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n      }\n    }\n    database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n    getMediaDataController().clearBotKeyboard(0,messages);\n    if (dialogsToUpdate.size() != 0) {\n      resetAllUnreadCounters(false);\n    }\n  }\n  return dialogsIds;\n}\n catch (Exception e) {\n  FileLog.e(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 1462,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13207,
        "startLineNumber" : 8864,
        "startColumnNumber" : 148,
        "endLineNumber" : 9107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    ArrayList<Long> dialogsIds=new ArrayList<>();\n    if (scheduled) {\n      String ids;\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          if (!dialogsToUpdate.contains(did)) {\n            dialogsToUpdate.add(did);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n        broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n      }\n    }\n else {\n      String ids;\n      final ArrayList<Integer> temp=new ArrayList<>(messages);\n      LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n      LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<File> filesToDelete=new ArrayList<>();\n      ArrayList<String> namesToDelete=new ArrayList<>();\n      ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n      int currentUser=getUserConfig().getClientUserId();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          int mid=cursor.intValue(5);\n          temp.remove((Integer)mid);\n          ArrayList<Integer> mids=messagesByDialogs.get(did);\n          if (mids == null) {\n            mids=new ArrayList<>();\n            messagesByDialogs.put(did,mids);\n          }\n          mids.add(mid);\n          if (did != currentUser) {\n            int read_state=cursor.intValue(2);\n            if (cursor.intValue(3) == 0) {\n              Integer[] unread_count=dialogsToUpdate.get(did);\n              if (unread_count == null) {\n                unread_count=new Integer[]{0,0};\n                dialogsToUpdate.put(did,unread_count);\n              }\n              if (read_state < 2) {\n                unread_count[1]++;\n              }\n              if (read_state == 0 || read_state == 2) {\n                unread_count[0]++;\n              }\n            }\n          }\n          if ((int)did != 0 && !deleteFiles) {\n            continue;\n          }\n          NativeByteBuffer data=cursor.byteBufferValue(1);\n          if (data != null) {\n            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n            message.readAttachPath(data,getUserConfig().clientUserId);\n            data.reuse();\n            addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      deleteFromDownloadQueue(idsToDelete,true);\n      AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n      getFileLoader().deleteFiles(filesToDelete,0);\n      for (int a=0; a < dialogsToUpdate.size(); a++) {\n        long did=dialogsToUpdate.keyAt(a);\n        Integer[] counts=dialogsToUpdate.valueAt(a);\n        cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n        int old_unread_count=0;\n        int old_mentions_count=0;\n        if (cursor.next()) {\n          old_unread_count=cursor.intValue(0);\n          old_mentions_count=cursor.intValue(1);\n        }\n        cursor.dispose();\n        dialogsIds.add(did);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n        state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n        state.bindLong(3,did);\n        state.step();\n        state.dispose();\n      }\n      for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n        long did=messagesByDialogs.keyAt(a);\n        ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n        int lowerId=(int)did;\n        String idsStr=TextUtils.join(\",\",mids);\n        if (lowerId != 0) {\n          if (lowerId < 0) {\n            database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n          }\n else {\n            database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n          }\n        }\n        database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n        int updatedCount=0;\n        cursor=database.queryFinalized(\"SELECT changes()\");\n        if (cursor.next()) {\n          updatedCount=cursor.intValue(0);\n        }\n        cursor.dispose();\n        if (updatedCount > 0) {\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n          if (cursor.next()) {\n            int count=cursor.intValue(0);\n            SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n            state.requery();\n            state.bindInteger(1,Math.max(0,count - updatedCount));\n            state.bindLong(2,did);\n            state.step();\n            state.dispose();\n          }\n          cursor.dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      if (temp.isEmpty()) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n        SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n        while (cursor.next()) {\n          long uid=cursor.longValue(0);\n          int type=cursor.intValue(1);\n          if (mediaCounts == null) {\n            mediaCounts=new SparseArray<>();\n          }\n          LongSparseArray<Integer> counts=mediaCounts.get(type);\n          Integer count;\n          if (counts == null) {\n            counts=new LongSparseArray<>();\n            count=0;\n            mediaCounts.put(type,counts);\n          }\n else {\n            count=counts.get(uid);\n          }\n          if (count == null) {\n            count=0;\n          }\n          count++;\n          counts.put(uid,count);\n        }\n        cursor.dispose();\n        if (mediaCounts != null) {\n          SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n          for (int a=0; a < mediaCounts.size(); a++) {\n            int type=mediaCounts.keyAt(a);\n            LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n            for (int b=0; b < value.size(); b++) {\n              long uid=value.keyAt(b);\n              int lower_part=(int)uid;\n              int count=-1;\n              int old=0;\n              cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n              if (cursor.next()) {\n                count=cursor.intValue(0);\n                old=cursor.intValue(1);\n              }\n              cursor.dispose();\n              if (count != -1) {\n                state.requery();\n                count=Math.max(0,count - value.valueAt(b));\n                state.bindLong(1,uid);\n                state.bindInteger(2,type);\n                state.bindInteger(3,count);\n                state.bindInteger(4,old);\n                state.step();\n              }\n            }\n          }\n          state.dispose();\n        }\n      }\n else {\n        if (channelId == 0) {\n          database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      getMediaDataController().clearBotKeyboard(0,messages);\n      if (dialogsToUpdate.size() != 0) {\n        resetAllUnreadCounters(false);\n      }\n    }\n    return dialogsIds;\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1465,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 13351,
        "startLineNumber" : 8864,
        "startColumnNumber" : 4,
        "endLineNumber" : 9107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private ArrayList<Long> markMessagesAsDeletedInternal(final ArrayList<Integer> messages,int channelId,boolean deleteFiles,boolean scheduled){\n  try {\n    ArrayList<Long> dialogsIds=new ArrayList<>();\n    if (scheduled) {\n      String ids;\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<Long> dialogsToUpdate=new ArrayList<>();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid FROM scheduled_messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          if (!dialogsToUpdate.contains(did)) {\n            dialogsToUpdate.add(did);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM scheduled_messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      for (int a=0, N=dialogsToUpdate.size(); a < N; a++) {\n        broadcastScheduledMessagesChange(dialogsToUpdate.get(a));\n      }\n    }\n else {\n      String ids;\n      final ArrayList<Integer> temp=new ArrayList<>(messages);\n      LongSparseArray<Integer[]> dialogsToUpdate=new LongSparseArray<>();\n      LongSparseArray<ArrayList<Integer>> messagesByDialogs=new LongSparseArray<>();\n      if (channelId != 0) {\n        StringBuilder builder=new StringBuilder(messages.size());\n        for (int a=0; a < messages.size(); a++) {\n          long messageId=messages.get(a);\n          messageId|=((long)channelId) << 32;\n          if (builder.length() > 0) {\n            builder.append(',');\n          }\n          builder.append(messageId);\n        }\n        ids=builder.toString();\n      }\n else {\n        ids=TextUtils.join(\",\",messages);\n      }\n      ArrayList<File> filesToDelete=new ArrayList<>();\n      ArrayList<String> namesToDelete=new ArrayList<>();\n      ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();\n      int currentUser=getUserConfig().getClientUserId();\n      SQLiteCursor cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)\",ids));\n      try {\n        while (cursor.next()) {\n          long did=cursor.longValue(0);\n          int mid=cursor.intValue(5);\n          temp.remove((Integer)mid);\n          ArrayList<Integer> mids=messagesByDialogs.get(did);\n          if (mids == null) {\n            mids=new ArrayList<>();\n            messagesByDialogs.put(did,mids);\n          }\n          mids.add(mid);\n          if (did != currentUser) {\n            int read_state=cursor.intValue(2);\n            if (cursor.intValue(3) == 0) {\n              Integer[] unread_count=dialogsToUpdate.get(did);\n              if (unread_count == null) {\n                unread_count=new Integer[]{0,0};\n                dialogsToUpdate.put(did,unread_count);\n              }\n              if (read_state < 2) {\n                unread_count[1]++;\n              }\n              if (read_state == 0 || read_state == 2) {\n                unread_count[0]++;\n              }\n            }\n          }\n          if ((int)did != 0 && !deleteFiles) {\n            continue;\n          }\n          NativeByteBuffer data=cursor.byteBufferValue(1);\n          if (data != null) {\n            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);\n            message.readAttachPath(data,getUserConfig().clientUserId);\n            data.reuse();\n            addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);\n          }\n        }\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n      cursor.dispose();\n      deleteFromDownloadQueue(idsToDelete,true);\n      AndroidUtilities.runOnUIThread(() -> getFileLoader().cancelLoadFiles(namesToDelete));\n      getFileLoader().deleteFiles(filesToDelete,0);\n      for (int a=0; a < dialogsToUpdate.size(); a++) {\n        long did=dialogsToUpdate.keyAt(a);\n        Integer[] counts=dialogsToUpdate.valueAt(a);\n        cursor=database.queryFinalized(\"SELECT unread_count, unread_count_i FROM dialogs WHERE did = \" + did);\n        int old_unread_count=0;\n        int old_mentions_count=0;\n        if (cursor.next()) {\n          old_unread_count=cursor.intValue(0);\n          old_mentions_count=cursor.intValue(1);\n        }\n        cursor.dispose();\n        dialogsIds.add(did);\n        SQLitePreparedStatement state=database.executeFast(\"UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?\");\n        state.requery();\n        state.bindInteger(1,Math.max(0,old_unread_count - counts[0]));\n        state.bindInteger(2,Math.max(0,old_mentions_count - counts[1]));\n        state.bindLong(3,did);\n        state.step();\n        state.dispose();\n      }\n      for (int a=0, N=messagesByDialogs.size(); a < N; a++) {\n        long did=messagesByDialogs.keyAt(a);\n        ArrayList<Integer> mids=messagesByDialogs.valueAt(a);\n        int lowerId=(int)did;\n        String idsStr=TextUtils.join(\",\",mids);\n        if (lowerId != 0) {\n          if (lowerId < 0) {\n            database.executeFast(String.format(Locale.US,\"UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",-lowerId,idsStr)).stepThis().dispose();\n          }\n else {\n            database.executeFast(String.format(Locale.US,\"UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)\",lowerId,idsStr)).stepThis().dispose();\n          }\n        }\n        database.executeFast(String.format(Locale.US,\"DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)\",did,idsStr)).stepThis().dispose();\n        int updatedCount=0;\n        cursor=database.queryFinalized(\"SELECT changes()\");\n        if (cursor.next()) {\n          updatedCount=cursor.intValue(0);\n        }\n        cursor.dispose();\n        if (updatedCount > 0) {\n          cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count FROM chat_pinned_count WHERE uid = %d\",did));\n          if (cursor.next()) {\n            int count=cursor.intValue(0);\n            SQLitePreparedStatement state=database.executeFast(\"UPDATE chat_pinned_count SET count = ? WHERE uid = ?\");\n            state.requery();\n            state.bindInteger(1,Math.max(0,count - updatedCount));\n            state.bindLong(2,did);\n            state.step();\n            state.dispose();\n          }\n          cursor.dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM polls WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM bot_keyboard WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      database.executeFast(String.format(Locale.US,\"DELETE FROM messages_seq WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      if (temp.isEmpty()) {\n        cursor=database.queryFinalized(String.format(Locale.US,\"SELECT uid, type FROM media_v2 WHERE mid IN(%s)\",ids));\n        SparseArray<LongSparseArray<Integer>> mediaCounts=null;\n        while (cursor.next()) {\n          long uid=cursor.longValue(0);\n          int type=cursor.intValue(1);\n          if (mediaCounts == null) {\n            mediaCounts=new SparseArray<>();\n          }\n          LongSparseArray<Integer> counts=mediaCounts.get(type);\n          Integer count;\n          if (counts == null) {\n            counts=new LongSparseArray<>();\n            count=0;\n            mediaCounts.put(type,counts);\n          }\n else {\n            count=counts.get(uid);\n          }\n          if (count == null) {\n            count=0;\n          }\n          count++;\n          counts.put(uid,count);\n        }\n        cursor.dispose();\n        if (mediaCounts != null) {\n          SQLitePreparedStatement state=database.executeFast(\"REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)\");\n          for (int a=0; a < mediaCounts.size(); a++) {\n            int type=mediaCounts.keyAt(a);\n            LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n            for (int b=0; b < value.size(); b++) {\n              long uid=value.keyAt(b);\n              int lower_part=(int)uid;\n              int count=-1;\n              int old=0;\n              cursor=database.queryFinalized(String.format(Locale.US,\"SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1\",uid,type));\n              if (cursor.next()) {\n                count=cursor.intValue(0);\n                old=cursor.intValue(1);\n              }\n              cursor.dispose();\n              if (count != -1) {\n                state.requery();\n                count=Math.max(0,count - value.valueAt(b));\n                state.bindLong(1,uid);\n                state.bindInteger(2,type);\n                state.bindInteger(3,count);\n                state.bindInteger(4,old);\n                state.step();\n              }\n            }\n          }\n          state.dispose();\n        }\n      }\n else {\n        if (channelId == 0) {\n          database.executeFast(\"UPDATE media_counts_v2 SET old = 1 WHERE 1\").stepThis().dispose();\n        }\n else {\n          database.executeFast(String.format(Locale.US,\"UPDATE media_counts_v2 SET old = 1 WHERE uid = %d\",-channelId)).stepThis().dispose();\n        }\n      }\n      database.executeFast(String.format(Locale.US,\"DELETE FROM media_v2 WHERE mid IN(%s)\",ids)).stepThis().dispose();\n      getMediaDataController().clearBotKeyboard(0,messages);\n      if (dialogsToUpdate.size() != 0) {\n        resetAllUnreadCounters(false);\n      }\n    }\n    return dialogsIds;\n  }\n catch (  Exception e) {\n    FileLog.e(e);\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1490,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 9063,
        "startColumnNumber" : 28,
        "endLineNumber" : 9063,
        "endColumnNumber" : 84
      },
      "nodeContext" : "LongSparseArray<Integer> value=mediaCounts.valueAt(a);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.SparseArray<org.telegram.messenger.LongSparseArray<java.lang.Integer>>"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 9040,
    "startColumnNumber" : 28,
    "endLineNumber" : 9040,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 9043,
    "startColumnNumber" : 58,
    "endLineNumber" : 9043,
    "endColumnNumber" : 69
  }, {
    "charLength" : 11,
    "startLineNumber" : 9048,
    "startColumnNumber" : 28,
    "endLineNumber" : 9048,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 9059,
    "startColumnNumber" : 24,
    "endLineNumber" : 9059,
    "endColumnNumber" : 35
  }, {
    "charLength" : 11,
    "startLineNumber" : 9061,
    "startColumnNumber" : 44,
    "endLineNumber" : 9061,
    "endColumnNumber" : 55
  }, {
    "charLength" : 11,
    "startLineNumber" : 9062,
    "startColumnNumber" : 39,
    "endLineNumber" : 9062,
    "endColumnNumber" : 50
  }, {
    "charLength" : 11,
    "startLineNumber" : 9063,
    "startColumnNumber" : 61,
    "endLineNumber" : 9063,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  } ]
}