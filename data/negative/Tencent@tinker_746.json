{
  "id" : 746,
  "expression" : "ShareIntentUtil",
  "projectName" : "Tencent@tinker",
  "commitID" : "737aee2e78e4901018eec2059f221218010f9784",
  "filePath" : "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java",
  "occurrences" : 24,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 69,
      "startColumnNumber" : 12,
      "endLineNumber" : 69,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 96
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 97
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 67,
        "startColumnNumber" : 63,
        "endLineNumber" : 71,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n  Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 97
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 74,
      "startColumnNumber" : 12,
      "endLineNumber" : 74,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 96
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 97
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 236,
        "startLineNumber" : 72,
        "startColumnNumber" : 56,
        "endLineNumber" : 77,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 284,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ShareTinkerInternals.isInPatchProcess(app)) {\n  Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 97
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 83,
      "startColumnNumber" : 12,
      "endLineNumber" : 83,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 114
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 115
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 80,
        "startColumnNumber" : 40,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (patchDirectoryFile == null) {\n  Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 115
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 91,
      "startColumnNumber" : 12,
      "endLineNumber" : 91,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 114
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 115
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 234,
        "startLineNumber" : 89,
        "startColumnNumber" : 42,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 268,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!patchDirectoryFile.exists()) {\n  Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 115
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 101,
      "startColumnNumber" : 12,
      "endLineNumber" : 101,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 109
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 110
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 99,
        "startColumnNumber" : 37,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 272,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!patchInfoFile.exists()) {\n  Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 110
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 110,
      "startColumnNumber" : 12,
      "endLineNumber" : 110,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 109
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 110
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 109,
        "startColumnNumber" : 31,
        "endLineNumber" : 112,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (patchInfo == null) {\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 110
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 121,
      "startColumnNumber" : 12,
      "endLineNumber" : 121,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 109
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 110
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 118,
        "startColumnNumber" : 72,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 312,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oldVersion == null || newVersion == null || oatDex == null) {\n  Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 110
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 125,
      "startColumnNumber" : 30,
      "endLineNumber" : 125,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 125,
        "startColumnNumber" : 30,
        "endLineNumber" : 125,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ShareIntentUtil.INTENT_PATCH_OLD_VERSION",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 125,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 83
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 125,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 84
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 125,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 84
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 126,
      "startColumnNumber" : 30,
      "endLineNumber" : 126,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 126,
        "startColumnNumber" : 30,
        "endLineNumber" : 126,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ShareIntentUtil.INTENT_PATCH_NEW_VERSION",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 83
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 84
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 84
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 132,
      "startColumnNumber" : 30,
      "endLineNumber" : 132,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 132,
        "startColumnNumber" : 30,
        "endLineNumber" : 132,
        "endColumnNumber" : 66
      },
      "nodeContext" : "ShareIntentUtil.INTENT_PATCH_OAT_DIR",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 132,
        "endColumnNumber" : 75
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 132,
        "endColumnNumber" : 76
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 132,
        "endColumnNumber" : 76
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 141,
      "startColumnNumber" : 12,
      "endLineNumber" : 141,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 141,
        "startColumnNumber" : 12,
        "endLineNumber" : 141,
        "endColumnNumber" : 105
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 141,
        "startColumnNumber" : 12,
        "endLineNumber" : 141,
        "endColumnNumber" : 106
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 139,
        "startColumnNumber" : 55,
        "endLineNumber" : 143,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 139,
        "startColumnNumber" : 8,
        "endLineNumber" : 143,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ShareTinkerInternals.isNullOrNil(version)) {\n  Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 141,
        "startColumnNumber" : 12,
        "endLineNumber" : 141,
        "endColumnNumber" : 106
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 150,
      "startColumnNumber" : 12,
      "endLineNumber" : 150,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 150,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 122
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 150,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 123
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 262,
        "startLineNumber" : 147,
        "startColumnNumber" : 31,
        "endLineNumber" : 152,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 147,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (patchName == null) {\n  Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 150,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 123
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 161,
      "startColumnNumber" : 12,
      "endLineNumber" : 161,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 161,
        "startColumnNumber" : 12,
        "endLineNumber" : 161,
        "endColumnNumber" : 122
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 161,
        "startColumnNumber" : 12,
        "endLineNumber" : 161,
        "endColumnNumber" : 123
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 158,
        "startColumnNumber" : 49,
        "endLineNumber" : 163,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 317,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 163,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!patchVersionDirectoryFile.exists()) {\n  Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 161,
        "startColumnNumber" : 12,
        "endLineNumber" : 161,
        "endColumnNumber" : 123
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 172,
      "startColumnNumber" : 12,
      "endLineNumber" : 172,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 172,
        "endColumnNumber" : 117
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 172,
        "endColumnNumber" : 118
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 169,
        "startColumnNumber" : 63,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 321,
        "startLineNumber" : 169,
        "startColumnNumber" : 8,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n  Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 172,
        "endColumnNumber" : 118
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 181,
      "startColumnNumber" : 34,
      "endLineNumber" : 181,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 181,
        "startColumnNumber" : 34,
        "endLineNumber" : 181,
        "endColumnNumber" : 82
      },
      "nodeContext" : "ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 181,
        "startColumnNumber" : 12,
        "endLineNumber" : 181,
        "endColumnNumber" : 95
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 181,
        "startColumnNumber" : 12,
        "endLineNumber" : 181,
        "endColumnNumber" : 96
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 307,
        "startLineNumber" : 179,
        "startColumnNumber" : 65,
        "endLineNumber" : 184,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 179,
        "startColumnNumber" : 8,
        "endLineNumber" : 184,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n  Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 181,
        "startColumnNumber" : 12,
        "endLineNumber" : 181,
        "endColumnNumber" : 96
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 182,
      "startColumnNumber" : 12,
      "endLineNumber" : 182,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 182,
        "startColumnNumber" : 12,
        "endLineNumber" : 182,
        "endColumnNumber" : 113
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 182,
        "startColumnNumber" : 12,
        "endLineNumber" : 182,
        "endColumnNumber" : 114
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 307,
        "startLineNumber" : 179,
        "startColumnNumber" : 65,
        "endLineNumber" : 184,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 179,
        "startColumnNumber" : 8,
        "endLineNumber" : 184,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n  Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 182,
        "startColumnNumber" : 12,
        "endLineNumber" : 182,
        "endColumnNumber" : 114
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 186,
      "startColumnNumber" : 30,
      "endLineNumber" : 186,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 186,
        "startColumnNumber" : 30,
        "endLineNumber" : 186,
        "endColumnNumber" : 73
      },
      "nodeContext" : "ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 186,
        "startColumnNumber" : 8,
        "endLineNumber" : 186,
        "endColumnNumber" : 121
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 186,
        "startColumnNumber" : 8,
        "endLineNumber" : 186,
        "endColumnNumber" : 122
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 186,
        "startColumnNumber" : 8,
        "endLineNumber" : 186,
        "endColumnNumber" : 122
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 229,
      "startColumnNumber" : 30,
      "endLineNumber" : 229,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 229,
        "startColumnNumber" : 30,
        "endLineNumber" : 229,
        "endColumnNumber" : 69
      },
      "nodeContext" : "ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 229,
        "startColumnNumber" : 8,
        "endLineNumber" : 229,
        "endColumnNumber" : 83
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 229,
        "startColumnNumber" : 8,
        "endLineNumber" : 229,
        "endColumnNumber" : 84
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 229,
        "startColumnNumber" : 8,
        "endLineNumber" : 229,
        "endColumnNumber" : 84
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 239,
      "startColumnNumber" : 16,
      "endLineNumber" : 239,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 239,
        "startColumnNumber" : 16,
        "endLineNumber" : 239,
        "endColumnNumber" : 122
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 239,
        "startColumnNumber" : 16,
        "endLineNumber" : 239,
        "endColumnNumber" : 123
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 238,
        "startColumnNumber" : 107,
        "endLineNumber" : 242,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n  Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 238,
        "startColumnNumber" : 12,
        "endLineNumber" : 242,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n  Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 233,
        "startColumnNumber" : 32,
        "endLineNumber" : 249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  patchInfo.oldVersion=version;\n  patchInfo.oatDir=oatDex;\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n    Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n    return;\n  }\n  if (oatModeChanged) {\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n    SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 988,
        "startLineNumber" : 232,
        "startColumnNumber" : 8,
        "endLineNumber" : 249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((mainProcess && versionChanged) || oatModeChanged) {\n  patchInfo.oldVersion=version;\n  patchInfo.oatDir=oatDex;\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n    Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n    return;\n  }\n  if (oatModeChanged) {\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n    SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 239,
        "startColumnNumber" : 16,
        "endLineNumber" : 239,
        "endColumnNumber" : 123
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 251,
      "startColumnNumber" : 34,
      "endLineNumber" : 251,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 251,
        "startColumnNumber" : 34,
        "endLineNumber" : 251,
        "endColumnNumber" : 72
      },
      "nodeContext" : "ShareIntentUtil.INTENT_PATCH_EXCEPTION",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 251,
        "startColumnNumber" : 12,
        "endLineNumber" : 251,
        "endColumnNumber" : 128
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 251,
        "startColumnNumber" : 12,
        "endLineNumber" : 251,
        "endColumnNumber" : 129
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 345,
        "startLineNumber" : 250,
        "startColumnNumber" : 38,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n  Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 250,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!checkSafeModeCount(app)) {\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n  Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 251,
        "startColumnNumber" : 12,
        "endLineNumber" : 251,
        "endColumnNumber" : 129
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 252,
      "startColumnNumber" : 12,
      "endLineNumber" : 252,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 252,
        "startColumnNumber" : 12,
        "endLineNumber" : 252,
        "endColumnNumber" : 113
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 252,
        "startColumnNumber" : 12,
        "endLineNumber" : 252,
        "endColumnNumber" : 114
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 345,
        "startLineNumber" : 250,
        "startColumnNumber" : 38,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n  Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 250,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!checkSafeModeCount(app)) {\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n  Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 252,
        "startColumnNumber" : 12,
        "endLineNumber" : 252,
        "endColumnNumber" : 114
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 269,
      "startColumnNumber" : 20,
      "endLineNumber" : 269,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 269,
        "startColumnNumber" : 20,
        "endLineNumber" : 269,
        "endColumnNumber" : 126
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 269,
        "startColumnNumber" : 20,
        "endLineNumber" : 269,
        "endColumnNumber" : 127
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 256,
        "startLineNumber" : 268,
        "startColumnNumber" : 111,
        "endLineNumber" : 272,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n  Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 351,
        "startLineNumber" : 268,
        "startColumnNumber" : 16,
        "endLineNumber" : 272,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n  Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 842,
        "startLineNumber" : 261,
        "startColumnNumber" : 29,
        "endLineNumber" : 275,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  patchInfo.fingerPrint=Build.FINGERPRINT;\n  patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n  oatModeChanged=false;\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n    Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 859,
        "startLineNumber" : 261,
        "startColumnNumber" : 12,
        "endLineNumber" : 275,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isSystemOTA) {\n  patchInfo.fingerPrint=Build.FINGERPRINT;\n  patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n  oatModeChanged=false;\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n    Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1159,
        "startLineNumber" : 258,
        "startColumnNumber" : 29,
        "endLineNumber" : 280,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n  if (isSystemOTA) {\n    patchInfo.fingerPrint=Build.FINGERPRINT;\n    patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n    oatModeChanged=false;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n  }\n  if (!loadTinkerJars) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1180,
        "startLineNumber" : 258,
        "startColumnNumber" : 8,
        "endLineNumber" : 280,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isEnabledForDex) {\n  boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n  if (isSystemOTA) {\n    patchInfo.fingerPrint=Build.FINGERPRINT;\n    patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n    oatModeChanged=false;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n  }\n  if (!loadTinkerJars) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n    return;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 269,
        "startColumnNumber" : 20,
        "endLineNumber" : 269,
        "endColumnNumber" : 127
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 274,
      "startColumnNumber" : 38,
      "endLineNumber" : 274,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 274,
        "startColumnNumber" : 38,
        "endLineNumber" : 274,
        "endColumnNumber" : 74
      },
      "nodeContext" : "ShareIntentUtil.INTENT_PATCH_OAT_DIR",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 274,
        "startColumnNumber" : 16,
        "endLineNumber" : 274,
        "endColumnNumber" : 93
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 274,
        "startColumnNumber" : 16,
        "endLineNumber" : 274,
        "endColumnNumber" : 94
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 842,
        "startLineNumber" : 261,
        "startColumnNumber" : 29,
        "endLineNumber" : 275,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  patchInfo.fingerPrint=Build.FINGERPRINT;\n  patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n  oatModeChanged=false;\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n    Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 859,
        "startLineNumber" : 261,
        "startColumnNumber" : 12,
        "endLineNumber" : 275,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isSystemOTA) {\n  patchInfo.fingerPrint=Build.FINGERPRINT;\n  patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n  oatModeChanged=false;\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n    Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1159,
        "startLineNumber" : 258,
        "startColumnNumber" : 29,
        "endLineNumber" : 280,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n  if (isSystemOTA) {\n    patchInfo.fingerPrint=Build.FINGERPRINT;\n    patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n    oatModeChanged=false;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n  }\n  if (!loadTinkerJars) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1180,
        "startLineNumber" : 258,
        "startColumnNumber" : 8,
        "endLineNumber" : 280,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isEnabledForDex) {\n  boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n  if (isSystemOTA) {\n    patchInfo.fingerPrint=Build.FINGERPRINT;\n    patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n    oatModeChanged=false;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n  }\n  if (!loadTinkerJars) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n    return;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 274,
        "startColumnNumber" : 16,
        "endLineNumber" : 274,
        "endColumnNumber" : 94
      },
      "nodeContext" : "resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  }, {
    "nodeContext" : "ShareIntentUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 302,
      "startColumnNumber" : 8,
      "endLineNumber" : 302,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 302,
        "startColumnNumber" : 8,
        "endLineNumber" : 302,
        "endColumnNumber" : 87
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 302,
        "startColumnNumber" : 8,
        "endLineNumber" : 302,
        "endColumnNumber" : 88
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 302,
        "startColumnNumber" : 8,
        "endLineNumber" : 302,
        "endColumnNumber" : 88
      },
      "nodeContext" : "ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareIntentUtil"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 69,
    "startColumnNumber" : 12,
    "endLineNumber" : 69,
    "endColumnNumber" : 27
  }, {
    "charLength" : 15,
    "startLineNumber" : 74,
    "startColumnNumber" : 12,
    "endLineNumber" : 74,
    "endColumnNumber" : 27
  }, {
    "charLength" : 15,
    "startLineNumber" : 83,
    "startColumnNumber" : 12,
    "endLineNumber" : 83,
    "endColumnNumber" : 27
  }, {
    "charLength" : 15,
    "startLineNumber" : 91,
    "startColumnNumber" : 12,
    "endLineNumber" : 91,
    "endColumnNumber" : 27
  }, {
    "charLength" : 15,
    "startLineNumber" : 101,
    "startColumnNumber" : 12,
    "endLineNumber" : 101,
    "endColumnNumber" : 27
  }, {
    "charLength" : 15,
    "startLineNumber" : 110,
    "startColumnNumber" : 12,
    "endLineNumber" : 110,
    "endColumnNumber" : 27
  }, {
    "charLength" : 15,
    "startLineNumber" : 121,
    "startColumnNumber" : 12,
    "endLineNumber" : 121,
    "endColumnNumber" : 27
  }, {
    "charLength" : 15,
    "startLineNumber" : 125,
    "startColumnNumber" : 30,
    "endLineNumber" : 125,
    "endColumnNumber" : 45
  }, {
    "charLength" : 15,
    "startLineNumber" : 126,
    "startColumnNumber" : 30,
    "endLineNumber" : 126,
    "endColumnNumber" : 45
  }, {
    "charLength" : 15,
    "startLineNumber" : 132,
    "startColumnNumber" : 30,
    "endLineNumber" : 132,
    "endColumnNumber" : 45
  }, {
    "charLength" : 15,
    "startLineNumber" : 141,
    "startColumnNumber" : 12,
    "endLineNumber" : 141,
    "endColumnNumber" : 27
  }, {
    "charLength" : 15,
    "startLineNumber" : 150,
    "startColumnNumber" : 12,
    "endLineNumber" : 150,
    "endColumnNumber" : 27
  }, {
    "charLength" : 15,
    "startLineNumber" : 161,
    "startColumnNumber" : 12,
    "endLineNumber" : 161,
    "endColumnNumber" : 27
  }, {
    "charLength" : 15,
    "startLineNumber" : 172,
    "startColumnNumber" : 12,
    "endLineNumber" : 172,
    "endColumnNumber" : 27
  }, {
    "charLength" : 15,
    "startLineNumber" : 181,
    "startColumnNumber" : 34,
    "endLineNumber" : 181,
    "endColumnNumber" : 49
  }, {
    "charLength" : 15,
    "startLineNumber" : 182,
    "startColumnNumber" : 12,
    "endLineNumber" : 182,
    "endColumnNumber" : 27
  }, {
    "charLength" : 15,
    "startLineNumber" : 186,
    "startColumnNumber" : 30,
    "endLineNumber" : 186,
    "endColumnNumber" : 45
  }, {
    "charLength" : 15,
    "startLineNumber" : 229,
    "startColumnNumber" : 30,
    "endLineNumber" : 229,
    "endColumnNumber" : 45
  }, {
    "charLength" : 15,
    "startLineNumber" : 239,
    "startColumnNumber" : 16,
    "endLineNumber" : 239,
    "endColumnNumber" : 31
  }, {
    "charLength" : 15,
    "startLineNumber" : 251,
    "startColumnNumber" : 34,
    "endLineNumber" : 251,
    "endColumnNumber" : 49
  }, {
    "charLength" : 15,
    "startLineNumber" : 252,
    "startColumnNumber" : 12,
    "endLineNumber" : 252,
    "endColumnNumber" : 27
  }, {
    "charLength" : 15,
    "startLineNumber" : 269,
    "startColumnNumber" : 20,
    "endLineNumber" : 269,
    "endColumnNumber" : 35
  }, {
    "charLength" : 15,
    "startLineNumber" : 274,
    "startColumnNumber" : 38,
    "endLineNumber" : 274,
    "endColumnNumber" : 53
  }, {
    "charLength" : 15,
    "startLineNumber" : 302,
    "startColumnNumber" : 8,
    "endLineNumber" : 302,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 22,
    "layout" : 2
  } ]
}