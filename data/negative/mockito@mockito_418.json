{
  "id" : 418,
  "expression" : "buildIntArgMethod(new InvocationBuilder()).arg(1111)",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/test/java/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "buildIntArgMethod(new InvocationBuilder()).arg(1111)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 52,
      "startLineNumber" : 61,
      "startColumnNumber" : 29,
      "endLineNumber" : 61,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 8,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 61,
        "startColumnNumber" : 29,
        "endLineNumber" : 61,
        "endColumnNumber" : 96
      },
      "nodeContext" : "buildIntArgMethod(new InvocationBuilder()).arg(1111).toInvocation()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 61,
        "startColumnNumber" : 22,
        "endLineNumber" : 61,
        "endColumnNumber" : 97
      },
      "nodeContext" : "asList(buildIntArgMethod(new InvocationBuilder()).arg(1111).toInvocation())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 97
      },
      "nodeContext" : "invocations=asList(buildIntArgMethod(new InvocationBuilder()).arg(1111).toInvocation())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 98
      },
      "nodeContext" : "invocations=asList(buildIntArgMethod(new InvocationBuilder()).arg(1111).toInvocation());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 631,
        "startLineNumber" : 59,
        "startColumnNumber" : 64,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  wanted=buildIntArgMethod(new InvocationBuilder()).arg(2222).toInvocationMatcher();\n  invocations=asList(buildIntArgMethod(new InvocationBuilder()).arg(1111).toInvocation());\n  exception.expect(ArgumentsAreDifferent.class);\n  exception.expectMessage(\"Argument(s) are different! Wanted:\");\n  exception.expectMessage(\"mock.intArgumentMethod(2222);\");\n  exception.expectMessage(\"Actual invocations have different arguments:\");\n  exception.expectMessage(\"mock.intArgumentMethod(1111);\");\n  MissingInvocationChecker.checkMissingInvocation(invocations,wanted);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 702,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldReportWantedInvocationDiffersFromActual(){\n  wanted=buildIntArgMethod(new InvocationBuilder()).arg(2222).toInvocationMatcher();\n  invocations=asList(buildIntArgMethod(new InvocationBuilder()).arg(1111).toInvocation());\n  exception.expect(ArgumentsAreDifferent.class);\n  exception.expectMessage(\"Argument(s) are different! Wanted:\");\n  exception.expectMessage(\"mock.intArgumentMethod(2222);\");\n  exception.expectMessage(\"Actual invocations have different arguments:\");\n  exception.expectMessage(\"mock.intArgumentMethod(1111);\");\n  MissingInvocationChecker.checkMissingInvocation(invocations,wanted);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 68,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 98
      },
      "nodeContext" : "invocations=asList(buildIntArgMethod(new InvocationBuilder()).arg(1111).toInvocation());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 9
    },
    "tokenLength" : 4,
    "type" : "org.mockito.internal.invocation.InvocationBuilder"
  } ],
  "positionList" : [ {
    "charLength" : 52,
    "startLineNumber" : 61,
    "startColumnNumber" : 29,
    "endLineNumber" : 61,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}