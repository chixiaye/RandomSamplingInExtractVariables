{
  "id" : 459,
  "expression" : "leftNode",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/plan/MySQLPlanClassic.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "leftNode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 118,
      "startColumnNumber" : 24,
      "endLineNumber" : 118,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 118,
        "startColumnNumber" : 24,
        "endLineNumber" : 118,
        "endColumnNumber" : 40
      },
      "nodeContext" : "leftNode == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 118,
        "startColumnNumber" : 20,
        "endLineNumber" : 120,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (leftNode == null) {\n  leftNode=nodes.get(0).getParent();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 414,
        "startLineNumber" : 116,
        "startColumnNumber" : 23,
        "endLineNumber" : 125,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  MySQLPlanNodePlain leftNode=lastCompositeNode;\n  if (leftNode == null) {\n    leftNode=nodes.get(0).getParent();\n  }\n  MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n  if (leftNode == null) {\n    roots.add(joinNode);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 873,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (nodes.size() == 1) {\n  MySQLPlanNodePlain firstNode=nodes.get(0);\n  if (lastCompositeNode != null) {\n    firstNode.setParent(lastCompositeNode);\n  }\n else {\n    roots.add(firstNode);\n  }\n  if (firstNode.isCompositeNode()) {\n    lastCompositeNode=firstNode;\n  }\n}\n else {\n  MySQLPlanNodePlain leftNode=lastCompositeNode;\n  if (leftNode == null) {\n    leftNode=nodes.get(0).getParent();\n  }\n  MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n  if (leftNode == null) {\n    roots.add(joinNode);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1106,
        "startLineNumber" : 101,
        "startColumnNumber" : 37,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n  if (nodes.isEmpty()) {\n    break;\n  }\n  if (nodes.size() == 1) {\n    MySQLPlanNodePlain firstNode=nodes.get(0);\n    if (lastCompositeNode != null) {\n      firstNode.setParent(lastCompositeNode);\n    }\n else {\n      roots.add(firstNode);\n    }\n    if (firstNode.isCompositeNode()) {\n      lastCompositeNode=firstNode;\n    }\n  }\n else {\n    MySQLPlanNodePlain leftNode=lastCompositeNode;\n    if (leftNode == null) {\n      leftNode=nodes.get(0).getParent();\n    }\n    MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n    if (leftNode == null) {\n      roots.add(joinNode);\n    }\n  }\n  parsed.addAll(nodes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int id=1; ; id++) {\n  List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n  if (nodes.isEmpty()) {\n    break;\n  }\n  if (nodes.size() == 1) {\n    MySQLPlanNodePlain firstNode=nodes.get(0);\n    if (lastCompositeNode != null) {\n      firstNode.setParent(lastCompositeNode);\n    }\n else {\n      roots.add(firstNode);\n    }\n    if (firstNode.isCompositeNode()) {\n      lastCompositeNode=firstNode;\n    }\n  }\n else {\n    MySQLPlanNodePlain leftNode=lastCompositeNode;\n    if (leftNode == null) {\n      leftNode=nodes.get(0).getParent();\n    }\n    MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n    if (leftNode == null) {\n      roots.add(joinNode);\n    }\n  }\n  parsed.addAll(nodes);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1499,
        "startLineNumber" : 98,
        "startColumnNumber" : 15,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<MySQLPlanNodePlain> parsed=new ArrayList<>();\n  MySQLPlanNodePlain lastCompositeNode=null;\n  for (int id=1; ; id++) {\n    List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n    if (nodes.isEmpty()) {\n      break;\n    }\n    if (nodes.size() == 1) {\n      MySQLPlanNodePlain firstNode=nodes.get(0);\n      if (lastCompositeNode != null) {\n        firstNode.setParent(lastCompositeNode);\n      }\n else {\n        roots.add(firstNode);\n      }\n      if (firstNode.isCompositeNode()) {\n        lastCompositeNode=firstNode;\n      }\n    }\n else {\n      MySQLPlanNodePlain leftNode=lastCompositeNode;\n      if (leftNode == null) {\n        leftNode=nodes.get(0).getParent();\n      }\n      MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n      if (leftNode == null) {\n        roots.add(joinNode);\n      }\n    }\n    parsed.addAll(nodes);\n  }\n  for (  MySQLPlanNodePlain node : srcNodes) {\n    if (node.getId() != null && !parsed.contains(node)) {\n      roots.add(node);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (srcNodes.size() == 1) {\n  roots.add(srcNodes.get(0));\n}\n else {\n  List<MySQLPlanNodePlain> parsed=new ArrayList<>();\n  MySQLPlanNodePlain lastCompositeNode=null;\n  for (int id=1; ; id++) {\n    List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n    if (nodes.isEmpty()) {\n      break;\n    }\n    if (nodes.size() == 1) {\n      MySQLPlanNodePlain firstNode=nodes.get(0);\n      if (lastCompositeNode != null) {\n        firstNode.setParent(lastCompositeNode);\n      }\n else {\n        roots.add(firstNode);\n      }\n      if (firstNode.isCompositeNode()) {\n        lastCompositeNode=firstNode;\n      }\n    }\n else {\n      MySQLPlanNodePlain leftNode=lastCompositeNode;\n      if (leftNode == null) {\n        leftNode=nodes.get(0).getParent();\n      }\n      MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n      if (leftNode == null) {\n        roots.add(joinNode);\n      }\n    }\n    parsed.addAll(nodes);\n  }\n  for (  MySQLPlanNodePlain node : srcNodes) {\n    if (node.getId() != null && !parsed.contains(node)) {\n      roots.add(node);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 173,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1803,
        "startLineNumber" : 92,
        "startColumnNumber" : 90,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<MySQLPlanNodePlain> roots=new ArrayList<>();\n  if (srcNodes.size() == 1) {\n    roots.add(srcNodes.get(0));\n  }\n else {\n    List<MySQLPlanNodePlain> parsed=new ArrayList<>();\n    MySQLPlanNodePlain lastCompositeNode=null;\n    for (int id=1; ; id++) {\n      List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n      if (nodes.isEmpty()) {\n        break;\n      }\n      if (nodes.size() == 1) {\n        MySQLPlanNodePlain firstNode=nodes.get(0);\n        if (lastCompositeNode != null) {\n          firstNode.setParent(lastCompositeNode);\n        }\n else {\n          roots.add(firstNode);\n        }\n        if (firstNode.isCompositeNode()) {\n          lastCompositeNode=firstNode;\n        }\n      }\n else {\n        MySQLPlanNodePlain leftNode=lastCompositeNode;\n        if (leftNode == null) {\n          leftNode=nodes.get(0).getParent();\n        }\n        MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n        if (leftNode == null) {\n          roots.add(joinNode);\n        }\n      }\n      parsed.addAll(nodes);\n    }\n    for (    MySQLPlanNodePlain node : srcNodes) {\n      if (node.getId() != null && !parsed.contains(node)) {\n        roots.add(node);\n      }\n    }\n  }\n  for (  MySQLPlanNodePlain node : roots) {\n    node.computeStats();\n  }\n  return roots;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1889,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private List<MySQLPlanNodePlain> convertToPlanTree(List<MySQLPlanNodePlain> srcNodes){\n  List<MySQLPlanNodePlain> roots=new ArrayList<>();\n  if (srcNodes.size() == 1) {\n    roots.add(srcNodes.get(0));\n  }\n else {\n    List<MySQLPlanNodePlain> parsed=new ArrayList<>();\n    MySQLPlanNodePlain lastCompositeNode=null;\n    for (int id=1; ; id++) {\n      List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n      if (nodes.isEmpty()) {\n        break;\n      }\n      if (nodes.size() == 1) {\n        MySQLPlanNodePlain firstNode=nodes.get(0);\n        if (lastCompositeNode != null) {\n          firstNode.setParent(lastCompositeNode);\n        }\n else {\n          roots.add(firstNode);\n        }\n        if (firstNode.isCompositeNode()) {\n          lastCompositeNode=firstNode;\n        }\n      }\n else {\n        MySQLPlanNodePlain leftNode=lastCompositeNode;\n        if (leftNode == null) {\n          leftNode=nodes.get(0).getParent();\n        }\n        MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n        if (leftNode == null) {\n          roots.add(joinNode);\n        }\n      }\n      parsed.addAll(nodes);\n    }\n    for (    MySQLPlanNodePlain node : srcNodes) {\n      if (node.getId() != null && !parsed.contains(node)) {\n        roots.add(node);\n      }\n    }\n  }\n  for (  MySQLPlanNodePlain node : roots) {\n    node.computeStats();\n  }\n  return roots;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 214,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 118,
        "startColumnNumber" : 24,
        "endLineNumber" : 118,
        "endColumnNumber" : 40
      },
      "nodeContext" : "leftNode == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ext.mysql.model.plan.MySQLPlanNodePlain"
  }, {
    "nodeContext" : "leftNode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 121,
      "startColumnNumber" : 70,
      "endLineNumber" : 121,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 121,
        "startColumnNumber" : 50,
        "endLineNumber" : 121,
        "endColumnNumber" : 86
      },
      "nodeContext" : "joinNodes(srcNodes,leftNode,nodes)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 121,
        "startColumnNumber" : 39,
        "endLineNumber" : 121,
        "endColumnNumber" : 86
      },
      "nodeContext" : "joinNode=joinNodes(srcNodes,leftNode,nodes)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 121,
        "startColumnNumber" : 20,
        "endLineNumber" : 121,
        "endColumnNumber" : 87
      },
      "nodeContext" : "MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 414,
        "startLineNumber" : 116,
        "startColumnNumber" : 23,
        "endLineNumber" : 125,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  MySQLPlanNodePlain leftNode=lastCompositeNode;\n  if (leftNode == null) {\n    leftNode=nodes.get(0).getParent();\n  }\n  MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n  if (leftNode == null) {\n    roots.add(joinNode);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 873,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (nodes.size() == 1) {\n  MySQLPlanNodePlain firstNode=nodes.get(0);\n  if (lastCompositeNode != null) {\n    firstNode.setParent(lastCompositeNode);\n  }\n else {\n    roots.add(firstNode);\n  }\n  if (firstNode.isCompositeNode()) {\n    lastCompositeNode=firstNode;\n  }\n}\n else {\n  MySQLPlanNodePlain leftNode=lastCompositeNode;\n  if (leftNode == null) {\n    leftNode=nodes.get(0).getParent();\n  }\n  MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n  if (leftNode == null) {\n    roots.add(joinNode);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1106,
        "startLineNumber" : 101,
        "startColumnNumber" : 37,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n  if (nodes.isEmpty()) {\n    break;\n  }\n  if (nodes.size() == 1) {\n    MySQLPlanNodePlain firstNode=nodes.get(0);\n    if (lastCompositeNode != null) {\n      firstNode.setParent(lastCompositeNode);\n    }\n else {\n      roots.add(firstNode);\n    }\n    if (firstNode.isCompositeNode()) {\n      lastCompositeNode=firstNode;\n    }\n  }\n else {\n    MySQLPlanNodePlain leftNode=lastCompositeNode;\n    if (leftNode == null) {\n      leftNode=nodes.get(0).getParent();\n    }\n    MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n    if (leftNode == null) {\n      roots.add(joinNode);\n    }\n  }\n  parsed.addAll(nodes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int id=1; ; id++) {\n  List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n  if (nodes.isEmpty()) {\n    break;\n  }\n  if (nodes.size() == 1) {\n    MySQLPlanNodePlain firstNode=nodes.get(0);\n    if (lastCompositeNode != null) {\n      firstNode.setParent(lastCompositeNode);\n    }\n else {\n      roots.add(firstNode);\n    }\n    if (firstNode.isCompositeNode()) {\n      lastCompositeNode=firstNode;\n    }\n  }\n else {\n    MySQLPlanNodePlain leftNode=lastCompositeNode;\n    if (leftNode == null) {\n      leftNode=nodes.get(0).getParent();\n    }\n    MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n    if (leftNode == null) {\n      roots.add(joinNode);\n    }\n  }\n  parsed.addAll(nodes);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1499,
        "startLineNumber" : 98,
        "startColumnNumber" : 15,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<MySQLPlanNodePlain> parsed=new ArrayList<>();\n  MySQLPlanNodePlain lastCompositeNode=null;\n  for (int id=1; ; id++) {\n    List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n    if (nodes.isEmpty()) {\n      break;\n    }\n    if (nodes.size() == 1) {\n      MySQLPlanNodePlain firstNode=nodes.get(0);\n      if (lastCompositeNode != null) {\n        firstNode.setParent(lastCompositeNode);\n      }\n else {\n        roots.add(firstNode);\n      }\n      if (firstNode.isCompositeNode()) {\n        lastCompositeNode=firstNode;\n      }\n    }\n else {\n      MySQLPlanNodePlain leftNode=lastCompositeNode;\n      if (leftNode == null) {\n        leftNode=nodes.get(0).getParent();\n      }\n      MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n      if (leftNode == null) {\n        roots.add(joinNode);\n      }\n    }\n    parsed.addAll(nodes);\n  }\n  for (  MySQLPlanNodePlain node : srcNodes) {\n    if (node.getId() != null && !parsed.contains(node)) {\n      roots.add(node);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (srcNodes.size() == 1) {\n  roots.add(srcNodes.get(0));\n}\n else {\n  List<MySQLPlanNodePlain> parsed=new ArrayList<>();\n  MySQLPlanNodePlain lastCompositeNode=null;\n  for (int id=1; ; id++) {\n    List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n    if (nodes.isEmpty()) {\n      break;\n    }\n    if (nodes.size() == 1) {\n      MySQLPlanNodePlain firstNode=nodes.get(0);\n      if (lastCompositeNode != null) {\n        firstNode.setParent(lastCompositeNode);\n      }\n else {\n        roots.add(firstNode);\n      }\n      if (firstNode.isCompositeNode()) {\n        lastCompositeNode=firstNode;\n      }\n    }\n else {\n      MySQLPlanNodePlain leftNode=lastCompositeNode;\n      if (leftNode == null) {\n        leftNode=nodes.get(0).getParent();\n      }\n      MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n      if (leftNode == null) {\n        roots.add(joinNode);\n      }\n    }\n    parsed.addAll(nodes);\n  }\n  for (  MySQLPlanNodePlain node : srcNodes) {\n    if (node.getId() != null && !parsed.contains(node)) {\n      roots.add(node);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 173,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1803,
        "startLineNumber" : 92,
        "startColumnNumber" : 90,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<MySQLPlanNodePlain> roots=new ArrayList<>();\n  if (srcNodes.size() == 1) {\n    roots.add(srcNodes.get(0));\n  }\n else {\n    List<MySQLPlanNodePlain> parsed=new ArrayList<>();\n    MySQLPlanNodePlain lastCompositeNode=null;\n    for (int id=1; ; id++) {\n      List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n      if (nodes.isEmpty()) {\n        break;\n      }\n      if (nodes.size() == 1) {\n        MySQLPlanNodePlain firstNode=nodes.get(0);\n        if (lastCompositeNode != null) {\n          firstNode.setParent(lastCompositeNode);\n        }\n else {\n          roots.add(firstNode);\n        }\n        if (firstNode.isCompositeNode()) {\n          lastCompositeNode=firstNode;\n        }\n      }\n else {\n        MySQLPlanNodePlain leftNode=lastCompositeNode;\n        if (leftNode == null) {\n          leftNode=nodes.get(0).getParent();\n        }\n        MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n        if (leftNode == null) {\n          roots.add(joinNode);\n        }\n      }\n      parsed.addAll(nodes);\n    }\n    for (    MySQLPlanNodePlain node : srcNodes) {\n      if (node.getId() != null && !parsed.contains(node)) {\n        roots.add(node);\n      }\n    }\n  }\n  for (  MySQLPlanNodePlain node : roots) {\n    node.computeStats();\n  }\n  return roots;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1889,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private List<MySQLPlanNodePlain> convertToPlanTree(List<MySQLPlanNodePlain> srcNodes){\n  List<MySQLPlanNodePlain> roots=new ArrayList<>();\n  if (srcNodes.size() == 1) {\n    roots.add(srcNodes.get(0));\n  }\n else {\n    List<MySQLPlanNodePlain> parsed=new ArrayList<>();\n    MySQLPlanNodePlain lastCompositeNode=null;\n    for (int id=1; ; id++) {\n      List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n      if (nodes.isEmpty()) {\n        break;\n      }\n      if (nodes.size() == 1) {\n        MySQLPlanNodePlain firstNode=nodes.get(0);\n        if (lastCompositeNode != null) {\n          firstNode.setParent(lastCompositeNode);\n        }\n else {\n          roots.add(firstNode);\n        }\n        if (firstNode.isCompositeNode()) {\n          lastCompositeNode=firstNode;\n        }\n      }\n else {\n        MySQLPlanNodePlain leftNode=lastCompositeNode;\n        if (leftNode == null) {\n          leftNode=nodes.get(0).getParent();\n        }\n        MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n        if (leftNode == null) {\n          roots.add(joinNode);\n        }\n      }\n      parsed.addAll(nodes);\n    }\n    for (    MySQLPlanNodePlain node : srcNodes) {\n      if (node.getId() != null && !parsed.contains(node)) {\n        roots.add(node);\n      }\n    }\n  }\n  for (  MySQLPlanNodePlain node : roots) {\n    node.computeStats();\n  }\n  return roots;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 214,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 121,
        "startColumnNumber" : 20,
        "endLineNumber" : 121,
        "endColumnNumber" : 87
      },
      "nodeContext" : "MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ext.mysql.model.plan.MySQLPlanNodePlain"
  }, {
    "nodeContext" : "leftNode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 122,
      "startColumnNumber" : 24,
      "endLineNumber" : 122,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 122,
        "startColumnNumber" : 24,
        "endLineNumber" : 122,
        "endColumnNumber" : 40
      },
      "nodeContext" : "leftNode == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 122,
        "startColumnNumber" : 20,
        "endLineNumber" : 124,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (leftNode == null) {\n  roots.add(joinNode);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 414,
        "startLineNumber" : 116,
        "startColumnNumber" : 23,
        "endLineNumber" : 125,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  MySQLPlanNodePlain leftNode=lastCompositeNode;\n  if (leftNode == null) {\n    leftNode=nodes.get(0).getParent();\n  }\n  MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n  if (leftNode == null) {\n    roots.add(joinNode);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 873,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (nodes.size() == 1) {\n  MySQLPlanNodePlain firstNode=nodes.get(0);\n  if (lastCompositeNode != null) {\n    firstNode.setParent(lastCompositeNode);\n  }\n else {\n    roots.add(firstNode);\n  }\n  if (firstNode.isCompositeNode()) {\n    lastCompositeNode=firstNode;\n  }\n}\n else {\n  MySQLPlanNodePlain leftNode=lastCompositeNode;\n  if (leftNode == null) {\n    leftNode=nodes.get(0).getParent();\n  }\n  MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n  if (leftNode == null) {\n    roots.add(joinNode);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1106,
        "startLineNumber" : 101,
        "startColumnNumber" : 37,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n  if (nodes.isEmpty()) {\n    break;\n  }\n  if (nodes.size() == 1) {\n    MySQLPlanNodePlain firstNode=nodes.get(0);\n    if (lastCompositeNode != null) {\n      firstNode.setParent(lastCompositeNode);\n    }\n else {\n      roots.add(firstNode);\n    }\n    if (firstNode.isCompositeNode()) {\n      lastCompositeNode=firstNode;\n    }\n  }\n else {\n    MySQLPlanNodePlain leftNode=lastCompositeNode;\n    if (leftNode == null) {\n      leftNode=nodes.get(0).getParent();\n    }\n    MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n    if (leftNode == null) {\n      roots.add(joinNode);\n    }\n  }\n  parsed.addAll(nodes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int id=1; ; id++) {\n  List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n  if (nodes.isEmpty()) {\n    break;\n  }\n  if (nodes.size() == 1) {\n    MySQLPlanNodePlain firstNode=nodes.get(0);\n    if (lastCompositeNode != null) {\n      firstNode.setParent(lastCompositeNode);\n    }\n else {\n      roots.add(firstNode);\n    }\n    if (firstNode.isCompositeNode()) {\n      lastCompositeNode=firstNode;\n    }\n  }\n else {\n    MySQLPlanNodePlain leftNode=lastCompositeNode;\n    if (leftNode == null) {\n      leftNode=nodes.get(0).getParent();\n    }\n    MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n    if (leftNode == null) {\n      roots.add(joinNode);\n    }\n  }\n  parsed.addAll(nodes);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1499,
        "startLineNumber" : 98,
        "startColumnNumber" : 15,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<MySQLPlanNodePlain> parsed=new ArrayList<>();\n  MySQLPlanNodePlain lastCompositeNode=null;\n  for (int id=1; ; id++) {\n    List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n    if (nodes.isEmpty()) {\n      break;\n    }\n    if (nodes.size() == 1) {\n      MySQLPlanNodePlain firstNode=nodes.get(0);\n      if (lastCompositeNode != null) {\n        firstNode.setParent(lastCompositeNode);\n      }\n else {\n        roots.add(firstNode);\n      }\n      if (firstNode.isCompositeNode()) {\n        lastCompositeNode=firstNode;\n      }\n    }\n else {\n      MySQLPlanNodePlain leftNode=lastCompositeNode;\n      if (leftNode == null) {\n        leftNode=nodes.get(0).getParent();\n      }\n      MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n      if (leftNode == null) {\n        roots.add(joinNode);\n      }\n    }\n    parsed.addAll(nodes);\n  }\n  for (  MySQLPlanNodePlain node : srcNodes) {\n    if (node.getId() != null && !parsed.contains(node)) {\n      roots.add(node);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (srcNodes.size() == 1) {\n  roots.add(srcNodes.get(0));\n}\n else {\n  List<MySQLPlanNodePlain> parsed=new ArrayList<>();\n  MySQLPlanNodePlain lastCompositeNode=null;\n  for (int id=1; ; id++) {\n    List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n    if (nodes.isEmpty()) {\n      break;\n    }\n    if (nodes.size() == 1) {\n      MySQLPlanNodePlain firstNode=nodes.get(0);\n      if (lastCompositeNode != null) {\n        firstNode.setParent(lastCompositeNode);\n      }\n else {\n        roots.add(firstNode);\n      }\n      if (firstNode.isCompositeNode()) {\n        lastCompositeNode=firstNode;\n      }\n    }\n else {\n      MySQLPlanNodePlain leftNode=lastCompositeNode;\n      if (leftNode == null) {\n        leftNode=nodes.get(0).getParent();\n      }\n      MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n      if (leftNode == null) {\n        roots.add(joinNode);\n      }\n    }\n    parsed.addAll(nodes);\n  }\n  for (  MySQLPlanNodePlain node : srcNodes) {\n    if (node.getId() != null && !parsed.contains(node)) {\n      roots.add(node);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 173,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1803,
        "startLineNumber" : 92,
        "startColumnNumber" : 90,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<MySQLPlanNodePlain> roots=new ArrayList<>();\n  if (srcNodes.size() == 1) {\n    roots.add(srcNodes.get(0));\n  }\n else {\n    List<MySQLPlanNodePlain> parsed=new ArrayList<>();\n    MySQLPlanNodePlain lastCompositeNode=null;\n    for (int id=1; ; id++) {\n      List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n      if (nodes.isEmpty()) {\n        break;\n      }\n      if (nodes.size() == 1) {\n        MySQLPlanNodePlain firstNode=nodes.get(0);\n        if (lastCompositeNode != null) {\n          firstNode.setParent(lastCompositeNode);\n        }\n else {\n          roots.add(firstNode);\n        }\n        if (firstNode.isCompositeNode()) {\n          lastCompositeNode=firstNode;\n        }\n      }\n else {\n        MySQLPlanNodePlain leftNode=lastCompositeNode;\n        if (leftNode == null) {\n          leftNode=nodes.get(0).getParent();\n        }\n        MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n        if (leftNode == null) {\n          roots.add(joinNode);\n        }\n      }\n      parsed.addAll(nodes);\n    }\n    for (    MySQLPlanNodePlain node : srcNodes) {\n      if (node.getId() != null && !parsed.contains(node)) {\n        roots.add(node);\n      }\n    }\n  }\n  for (  MySQLPlanNodePlain node : roots) {\n    node.computeStats();\n  }\n  return roots;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1889,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private List<MySQLPlanNodePlain> convertToPlanTree(List<MySQLPlanNodePlain> srcNodes){\n  List<MySQLPlanNodePlain> roots=new ArrayList<>();\n  if (srcNodes.size() == 1) {\n    roots.add(srcNodes.get(0));\n  }\n else {\n    List<MySQLPlanNodePlain> parsed=new ArrayList<>();\n    MySQLPlanNodePlain lastCompositeNode=null;\n    for (int id=1; ; id++) {\n      List<MySQLPlanNodePlain> nodes=getQueriesById(srcNodes,id);\n      if (nodes.isEmpty()) {\n        break;\n      }\n      if (nodes.size() == 1) {\n        MySQLPlanNodePlain firstNode=nodes.get(0);\n        if (lastCompositeNode != null) {\n          firstNode.setParent(lastCompositeNode);\n        }\n else {\n          roots.add(firstNode);\n        }\n        if (firstNode.isCompositeNode()) {\n          lastCompositeNode=firstNode;\n        }\n      }\n else {\n        MySQLPlanNodePlain leftNode=lastCompositeNode;\n        if (leftNode == null) {\n          leftNode=nodes.get(0).getParent();\n        }\n        MySQLPlanNodePlain joinNode=joinNodes(srcNodes,leftNode,nodes);\n        if (leftNode == null) {\n          roots.add(joinNode);\n        }\n      }\n      parsed.addAll(nodes);\n    }\n    for (    MySQLPlanNodePlain node : srcNodes) {\n      if (node.getId() != null && !parsed.contains(node)) {\n        roots.add(node);\n      }\n    }\n  }\n  for (  MySQLPlanNodePlain node : roots) {\n    node.computeStats();\n  }\n  return roots;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 214,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 122,
        "startColumnNumber" : 24,
        "endLineNumber" : 122,
        "endColumnNumber" : 40
      },
      "nodeContext" : "leftNode == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ext.mysql.model.plan.MySQLPlanNodePlain"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 118,
    "startColumnNumber" : 24,
    "endLineNumber" : 118,
    "endColumnNumber" : 32
  }, {
    "charLength" : 8,
    "startLineNumber" : 121,
    "startColumnNumber" : 70,
    "endLineNumber" : 121,
    "endColumnNumber" : 78
  }, {
    "charLength" : 8,
    "startLineNumber" : 122,
    "startColumnNumber" : 24,
    "endLineNumber" : 122,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}