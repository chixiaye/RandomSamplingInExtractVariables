{
  "id" : 308,
  "expression" : "\"jacoco-agent.sessionid\"",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/java_tools/junitrunner/java/com/google/testing/coverage/JacocoCoverageRunner.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"jacoco-agent.sessionid\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 494,
      "startColumnNumber" : 23,
      "endLineNumber" : 494,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 494,
        "startColumnNumber" : 4,
        "endLineNumber" : 494,
        "endColumnNumber" : 59
      },
      "nodeContext" : "System.setProperty(\"jacoco-agent.sessionid\",\"default\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 494,
        "startColumnNumber" : 4,
        "endLineNumber" : 494,
        "endColumnNumber" : 60
      },
      "nodeContext" : "System.setProperty(\"jacoco-agent.sessionid\",\"default\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8956,
        "startLineNumber" : 419,
        "startColumnNumber" : 58,
        "endLineNumber" : 585,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String metadataFile=System.getenv(\"JACOCO_METADATA_JAR\");\n  String jarWrappedValue=System.getenv(\"JACOCO_IS_JAR_WRAPPED\");\n  boolean wasWrappedJar=jarWrappedValue != null ? !jarWrappedValue.equals(\"0\") : false;\n  File[] metadataFiles=null;\n  int deployJars=0;\n  final HashMap<String,byte[]> uninstrumentedClasses=new HashMap<>();\n  ImmutableSet.Builder<String> pathsForCoverageBuilder=new ImmutableSet.Builder<>();\n  ClassLoader classLoader=ClassLoader.getSystemClassLoader();\n  URL[] urls=getUrls(classLoader,wasWrappedJar);\n  if (urls != null) {\n    metadataFiles=new File[urls.length];\n    for (int i=0; i < urls.length; i++) {\n      String file=URLDecoder.decode(urls[i].getFile(),\"UTF-8\");\n      metadataFiles[i]=new File(file);\n      if (file.endsWith(\"_deploy.jar\")) {\n        metadataFile=file;\n        deployJars++;\n      }\n      if (file.endsWith(\".jar\")) {\n        JarFile jarFile=new JarFile(file);\n        Enumeration<JarEntry> jarFileEntries=jarFile.entries();\n        while (jarFileEntries.hasMoreElements()) {\n          JarEntry jarEntry=jarFileEntries.nextElement();\n          String jarEntryName=jarEntry.getName();\n          if (jarEntryName.endsWith(\".class.uninstrumented\") && !uninstrumentedClasses.containsKey(jarEntryName)) {\n            uninstrumentedClasses.put(jarEntryName,ByteStreams.toByteArray(jarFile.getInputStream(jarEntry)));\n          }\n else           if (jarEntryName.endsWith(\"-paths-for-coverage.txt\")) {\n            BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(jarFile.getInputStream(jarEntry),UTF_8));\n            String line;\n            while ((line=bufferedReader.readLine()) != null) {\n              pathsForCoverageBuilder.add(line);\n            }\n          }\n        }\n      }\n    }\n  }\n  final ImmutableSet<String> pathsForCoverage=pathsForCoverageBuilder.build();\n  final String metadataFileFinal=metadataFile;\n  final File[] metadataFilesFinal=metadataFiles;\n  final String javaRunfilesRoot=System.getenv(\"JACOCO_JAVA_RUNFILES_ROOT\");\n  boolean hasOneFile=false;\n  if (metadataFile != null && (metadataFile.endsWith(\"_merged_instr.jar\") || metadataFile.endsWith(\"_deploy.jar\"))) {\n    hasOneFile=true;\n  }\n  final boolean hasOneFileFinal=hasOneFile;\n  final String coverageReportBase=System.getenv(\"JAVA_COVERAGE_FILE\");\n  System.setProperty(\"jacoco-agent.output\",\"none\");\n  System.setProperty(\"jacoco-agent.sessionid\",\"default\");\n  Runtime.getRuntime().addShutdownHook(new Thread(){\n    @Override public void run(){\n      try {\n        String coverageReport=getUniquePath(coverageReportBase,\".dat\");\n        String coverageData=getUniquePath(coverageReportBase,\".exec\");\n        ByteArrayInputStream dataInputStream;\n        try {\n          IAgent agent=RT.getAgent();\n          byte[] data=agent.getExecutionData(false);\n          try (FileOutputStream fs=new FileOutputStream(coverageData,true)){\n            fs.write(data);\n          }\n           dataInputStream=new ByteArrayInputStream(data);\n        }\n catch (        IllegalStateException e) {\n          dataInputStream=new ByteArrayInputStream(new byte[0]);\n        }\n        if (metadataFileFinal != null || metadataFilesFinal != null) {\n          File[] metadataJars;\n          if (metadataFilesFinal != null) {\n            metadataJars=metadataFilesFinal;\n          }\n else {\n            metadataJars=hasOneFileFinal ? new File[]{new File(metadataFileFinal)} : getFilesFromFileList(new File(metadataFileFinal),javaRunfilesRoot).toArray(new File[0]);\n          }\n          if (uninstrumentedClasses.isEmpty()) {\n            new JacocoCoverageRunner(dataInputStream,coverageReport,metadataJars).create();\n          }\n else {\n            new JacocoCoverageRunner(dataInputStream,coverageReport,uninstrumentedClasses,pathsForCoverage,metadataJars).create();\n          }\n        }\n      }\n catch (      IOException e) {\n        e.printStackTrace();\n        Runtime.getRuntime().halt(1);\n      }\n    }\n  }\n);\n  boolean insideDeployJar=(deployJars == 1) && (metadataFilesFinal == null || metadataFilesFinal.length == 1);\n  Class<?> mainClass=getMainClass(insideDeployJar);\n  Method main=mainClass.getMethod(\"main\",String[].class);\n  main.setAccessible(true);\n  main.invoke(null,new Object[]{args});\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 629,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9012,
        "startLineNumber" : 419,
        "startColumnNumber" : 2,
        "endLineNumber" : 585,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  String metadataFile=System.getenv(\"JACOCO_METADATA_JAR\");\n  String jarWrappedValue=System.getenv(\"JACOCO_IS_JAR_WRAPPED\");\n  boolean wasWrappedJar=jarWrappedValue != null ? !jarWrappedValue.equals(\"0\") : false;\n  File[] metadataFiles=null;\n  int deployJars=0;\n  final HashMap<String,byte[]> uninstrumentedClasses=new HashMap<>();\n  ImmutableSet.Builder<String> pathsForCoverageBuilder=new ImmutableSet.Builder<>();\n  ClassLoader classLoader=ClassLoader.getSystemClassLoader();\n  URL[] urls=getUrls(classLoader,wasWrappedJar);\n  if (urls != null) {\n    metadataFiles=new File[urls.length];\n    for (int i=0; i < urls.length; i++) {\n      String file=URLDecoder.decode(urls[i].getFile(),\"UTF-8\");\n      metadataFiles[i]=new File(file);\n      if (file.endsWith(\"_deploy.jar\")) {\n        metadataFile=file;\n        deployJars++;\n      }\n      if (file.endsWith(\".jar\")) {\n        JarFile jarFile=new JarFile(file);\n        Enumeration<JarEntry> jarFileEntries=jarFile.entries();\n        while (jarFileEntries.hasMoreElements()) {\n          JarEntry jarEntry=jarFileEntries.nextElement();\n          String jarEntryName=jarEntry.getName();\n          if (jarEntryName.endsWith(\".class.uninstrumented\") && !uninstrumentedClasses.containsKey(jarEntryName)) {\n            uninstrumentedClasses.put(jarEntryName,ByteStreams.toByteArray(jarFile.getInputStream(jarEntry)));\n          }\n else           if (jarEntryName.endsWith(\"-paths-for-coverage.txt\")) {\n            BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(jarFile.getInputStream(jarEntry),UTF_8));\n            String line;\n            while ((line=bufferedReader.readLine()) != null) {\n              pathsForCoverageBuilder.add(line);\n            }\n          }\n        }\n      }\n    }\n  }\n  final ImmutableSet<String> pathsForCoverage=pathsForCoverageBuilder.build();\n  final String metadataFileFinal=metadataFile;\n  final File[] metadataFilesFinal=metadataFiles;\n  final String javaRunfilesRoot=System.getenv(\"JACOCO_JAVA_RUNFILES_ROOT\");\n  boolean hasOneFile=false;\n  if (metadataFile != null && (metadataFile.endsWith(\"_merged_instr.jar\") || metadataFile.endsWith(\"_deploy.jar\"))) {\n    hasOneFile=true;\n  }\n  final boolean hasOneFileFinal=hasOneFile;\n  final String coverageReportBase=System.getenv(\"JAVA_COVERAGE_FILE\");\n  System.setProperty(\"jacoco-agent.output\",\"none\");\n  System.setProperty(\"jacoco-agent.sessionid\",\"default\");\n  Runtime.getRuntime().addShutdownHook(new Thread(){\n    @Override public void run(){\n      try {\n        String coverageReport=getUniquePath(coverageReportBase,\".dat\");\n        String coverageData=getUniquePath(coverageReportBase,\".exec\");\n        ByteArrayInputStream dataInputStream;\n        try {\n          IAgent agent=RT.getAgent();\n          byte[] data=agent.getExecutionData(false);\n          try (FileOutputStream fs=new FileOutputStream(coverageData,true)){\n            fs.write(data);\n          }\n           dataInputStream=new ByteArrayInputStream(data);\n        }\n catch (        IllegalStateException e) {\n          dataInputStream=new ByteArrayInputStream(new byte[0]);\n        }\n        if (metadataFileFinal != null || metadataFilesFinal != null) {\n          File[] metadataJars;\n          if (metadataFilesFinal != null) {\n            metadataJars=metadataFilesFinal;\n          }\n else {\n            metadataJars=hasOneFileFinal ? new File[]{new File(metadataFileFinal)} : getFilesFromFileList(new File(metadataFileFinal),javaRunfilesRoot).toArray(new File[0]);\n          }\n          if (uninstrumentedClasses.isEmpty()) {\n            new JacocoCoverageRunner(dataInputStream,coverageReport,metadataJars).create();\n          }\n else {\n            new JacocoCoverageRunner(dataInputStream,coverageReport,uninstrumentedClasses,pathsForCoverage,metadataJars).create();\n          }\n        }\n      }\n catch (      IOException e) {\n        e.printStackTrace();\n        Runtime.getRuntime().halt(1);\n      }\n    }\n  }\n);\n  boolean insideDeployJar=(deployJars == 1) && (metadataFilesFinal == null || metadataFilesFinal.length == 1);\n  Class<?> mainClass=getMainClass(insideDeployJar);\n  Method main=mainClass.getMethod(\"main\",String[].class);\n  main.setAccessible(true);\n  main.invoke(null,new Object[]{args});\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 642,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 494,
        "startColumnNumber" : 4,
        "endLineNumber" : 494,
        "endColumnNumber" : 60
      },
      "nodeContext" : "System.setProperty(\"jacoco-agent.sessionid\",\"default\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 494,
    "startColumnNumber" : 23,
    "endLineNumber" : 494,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}