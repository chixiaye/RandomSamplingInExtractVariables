{
  "id" : 248,
  "expression" : "provider",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/broker/stats/PrometheusMetricsTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "provider",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 829,
      "startColumnNumber" : 8,
      "endLineNumber" : 829,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 829,
        "startColumnNumber" : 8,
        "endLineNumber" : 829,
        "endColumnNumber" : 33
      },
      "nodeContext" : "provider.initialize(conf)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 829,
        "startColumnNumber" : 8,
        "endLineNumber" : 829,
        "endColumnNumber" : 34
      },
      "nodeContext" : "provider.initialize(conf);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2485,
        "startLineNumber" : 819,
        "startColumnNumber" : 78,
        "endLineNumber" : 882,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SecretKey secretKey=AuthTokenUtils.createSecretKey(SignatureAlgorithm.HS256);\n  AuthenticationProviderToken provider=new AuthenticationProviderToken();\n  Properties properties=new Properties();\n  properties.setProperty(\"tokenSecretKey\",AuthTokenUtils.encodeKeyBase64(secretKey));\n  ServiceConfiguration conf=new ServiceConfiguration();\n  conf.setProperties(properties);\n  provider.initialize(conf);\n  String authExceptionMessage=\"\";\n  try {\n    provider.authenticate(new AuthenticationDataSource(){\n    }\n);\n    fail(\"Should have failed\");\n  }\n catch (  AuthenticationException e) {\n    authExceptionMessage=e.getMessage();\n  }\n  String token=AuthTokenUtils.createToken(secretKey,\"subject\",Optional.empty());\n  String subject=provider.authenticate(new AuthenticationDataSource(){\n    @Override public boolean hasDataFromCommand(){\n      return true;\n    }\n    @Override public String getCommandData(){\n      return token;\n    }\n  }\n);\n  ByteArrayOutputStream statsOut=new ByteArrayOutputStream();\n  PrometheusMetricsGenerator.generate(pulsar,false,false,false,statsOut);\n  String metricsStr=statsOut.toString();\n  Multimap<String,Metric> metrics=parseMetrics(metricsStr);\n  List<Metric> cm=(List<Metric>)metrics.get(\"pulsar_authentication_success_count\");\n  boolean haveSucceed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveSucceed=true;\n    }\n  }\n  Assert.assertTrue(haveSucceed);\n  cm=(List<Metric>)metrics.get(\"pulsar_authentication_failures_count\");\n  boolean haveFailed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"reason\"),authExceptionMessage) && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveFailed=true;\n    }\n  }\n  Assert.assertTrue(haveFailed);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2569,
        "startLineNumber" : 818,
        "startColumnNumber" : 4,
        "endLineNumber" : 882,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAuthMetrics() throws IOException, AuthenticationException {\n  SecretKey secretKey=AuthTokenUtils.createSecretKey(SignatureAlgorithm.HS256);\n  AuthenticationProviderToken provider=new AuthenticationProviderToken();\n  Properties properties=new Properties();\n  properties.setProperty(\"tokenSecretKey\",AuthTokenUtils.encodeKeyBase64(secretKey));\n  ServiceConfiguration conf=new ServiceConfiguration();\n  conf.setProperties(properties);\n  provider.initialize(conf);\n  String authExceptionMessage=\"\";\n  try {\n    provider.authenticate(new AuthenticationDataSource(){\n    }\n);\n    fail(\"Should have failed\");\n  }\n catch (  AuthenticationException e) {\n    authExceptionMessage=e.getMessage();\n  }\n  String token=AuthTokenUtils.createToken(secretKey,\"subject\",Optional.empty());\n  String subject=provider.authenticate(new AuthenticationDataSource(){\n    @Override public boolean hasDataFromCommand(){\n      return true;\n    }\n    @Override public String getCommandData(){\n      return token;\n    }\n  }\n);\n  ByteArrayOutputStream statsOut=new ByteArrayOutputStream();\n  PrometheusMetricsGenerator.generate(pulsar,false,false,false,statsOut);\n  String metricsStr=statsOut.toString();\n  Multimap<String,Metric> metrics=parseMetrics(metricsStr);\n  List<Metric> cm=(List<Metric>)metrics.get(\"pulsar_authentication_success_count\");\n  boolean haveSucceed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveSucceed=true;\n    }\n  }\n  Assert.assertTrue(haveSucceed);\n  cm=(List<Metric>)metrics.get(\"pulsar_authentication_failures_count\");\n  boolean haveFailed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"reason\"),authExceptionMessage) && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveFailed=true;\n    }\n  }\n  Assert.assertTrue(haveFailed);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 316,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 829,
        "startColumnNumber" : 8,
        "endLineNumber" : 829,
        "endColumnNumber" : 34
      },
      "nodeContext" : "provider.initialize(conf);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.broker.authentication.AuthenticationProviderToken"
  }, {
    "nodeContext" : "provider",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 834,
      "startColumnNumber" : 12,
      "endLineNumber" : 834,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 834,
        "startColumnNumber" : 12,
        "endLineNumber" : 835,
        "endColumnNumber" : 14
      },
      "nodeContext" : "provider.authenticate(new AuthenticationDataSource(){\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 834,
        "startColumnNumber" : 12,
        "endLineNumber" : 835,
        "endColumnNumber" : 15
      },
      "nodeContext" : "provider.authenticate(new AuthenticationDataSource(){\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 833,
        "startColumnNumber" : 12,
        "endLineNumber" : 837,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  provider.authenticate(new AuthenticationDataSource(){\n  }\n);\n  fail(\"Should have failed\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 833,
        "startColumnNumber" : 8,
        "endLineNumber" : 840,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  provider.authenticate(new AuthenticationDataSource(){\n  }\n);\n  fail(\"Should have failed\");\n}\n catch (AuthenticationException e) {\n  authExceptionMessage=e.getMessage();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2485,
        "startLineNumber" : 819,
        "startColumnNumber" : 78,
        "endLineNumber" : 882,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SecretKey secretKey=AuthTokenUtils.createSecretKey(SignatureAlgorithm.HS256);\n  AuthenticationProviderToken provider=new AuthenticationProviderToken();\n  Properties properties=new Properties();\n  properties.setProperty(\"tokenSecretKey\",AuthTokenUtils.encodeKeyBase64(secretKey));\n  ServiceConfiguration conf=new ServiceConfiguration();\n  conf.setProperties(properties);\n  provider.initialize(conf);\n  String authExceptionMessage=\"\";\n  try {\n    provider.authenticate(new AuthenticationDataSource(){\n    }\n);\n    fail(\"Should have failed\");\n  }\n catch (  AuthenticationException e) {\n    authExceptionMessage=e.getMessage();\n  }\n  String token=AuthTokenUtils.createToken(secretKey,\"subject\",Optional.empty());\n  String subject=provider.authenticate(new AuthenticationDataSource(){\n    @Override public boolean hasDataFromCommand(){\n      return true;\n    }\n    @Override public String getCommandData(){\n      return token;\n    }\n  }\n);\n  ByteArrayOutputStream statsOut=new ByteArrayOutputStream();\n  PrometheusMetricsGenerator.generate(pulsar,false,false,false,statsOut);\n  String metricsStr=statsOut.toString();\n  Multimap<String,Metric> metrics=parseMetrics(metricsStr);\n  List<Metric> cm=(List<Metric>)metrics.get(\"pulsar_authentication_success_count\");\n  boolean haveSucceed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveSucceed=true;\n    }\n  }\n  Assert.assertTrue(haveSucceed);\n  cm=(List<Metric>)metrics.get(\"pulsar_authentication_failures_count\");\n  boolean haveFailed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"reason\"),authExceptionMessage) && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveFailed=true;\n    }\n  }\n  Assert.assertTrue(haveFailed);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2569,
        "startLineNumber" : 818,
        "startColumnNumber" : 4,
        "endLineNumber" : 882,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAuthMetrics() throws IOException, AuthenticationException {\n  SecretKey secretKey=AuthTokenUtils.createSecretKey(SignatureAlgorithm.HS256);\n  AuthenticationProviderToken provider=new AuthenticationProviderToken();\n  Properties properties=new Properties();\n  properties.setProperty(\"tokenSecretKey\",AuthTokenUtils.encodeKeyBase64(secretKey));\n  ServiceConfiguration conf=new ServiceConfiguration();\n  conf.setProperties(properties);\n  provider.initialize(conf);\n  String authExceptionMessage=\"\";\n  try {\n    provider.authenticate(new AuthenticationDataSource(){\n    }\n);\n    fail(\"Should have failed\");\n  }\n catch (  AuthenticationException e) {\n    authExceptionMessage=e.getMessage();\n  }\n  String token=AuthTokenUtils.createToken(secretKey,\"subject\",Optional.empty());\n  String subject=provider.authenticate(new AuthenticationDataSource(){\n    @Override public boolean hasDataFromCommand(){\n      return true;\n    }\n    @Override public String getCommandData(){\n      return token;\n    }\n  }\n);\n  ByteArrayOutputStream statsOut=new ByteArrayOutputStream();\n  PrometheusMetricsGenerator.generate(pulsar,false,false,false,statsOut);\n  String metricsStr=statsOut.toString();\n  Multimap<String,Metric> metrics=parseMetrics(metricsStr);\n  List<Metric> cm=(List<Metric>)metrics.get(\"pulsar_authentication_success_count\");\n  boolean haveSucceed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveSucceed=true;\n    }\n  }\n  Assert.assertTrue(haveSucceed);\n  cm=(List<Metric>)metrics.get(\"pulsar_authentication_failures_count\");\n  boolean haveFailed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"reason\"),authExceptionMessage) && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveFailed=true;\n    }\n  }\n  Assert.assertTrue(haveFailed);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 316,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 834,
        "startColumnNumber" : 12,
        "endLineNumber" : 835,
        "endColumnNumber" : 14
      },
      "nodeContext" : "provider.authenticate(new AuthenticationDataSource(){\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.broker.authentication.AuthenticationProviderToken"
  }, {
    "nodeContext" : "provider",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 845,
      "startColumnNumber" : 25,
      "endLineNumber" : 845,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 845,
        "startColumnNumber" : 25,
        "endLineNumber" : 855,
        "endColumnNumber" : 10
      },
      "nodeContext" : "provider.authenticate(new AuthenticationDataSource(){\n  @Override public boolean hasDataFromCommand(){\n    return true;\n  }\n  @Override public String getCommandData(){\n    return token;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 302,
        "startLineNumber" : 845,
        "startColumnNumber" : 15,
        "endLineNumber" : 855,
        "endColumnNumber" : 10
      },
      "nodeContext" : "subject=provider.authenticate(new AuthenticationDataSource(){\n  @Override public boolean hasDataFromCommand(){\n    return true;\n  }\n  @Override public String getCommandData(){\n    return token;\n  }\n}\n)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 310,
        "startLineNumber" : 845,
        "startColumnNumber" : 8,
        "endLineNumber" : 855,
        "endColumnNumber" : 11
      },
      "nodeContext" : "String subject=provider.authenticate(new AuthenticationDataSource(){\n  @Override public boolean hasDataFromCommand(){\n    return true;\n  }\n  @Override public String getCommandData(){\n    return token;\n  }\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2485,
        "startLineNumber" : 819,
        "startColumnNumber" : 78,
        "endLineNumber" : 882,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SecretKey secretKey=AuthTokenUtils.createSecretKey(SignatureAlgorithm.HS256);\n  AuthenticationProviderToken provider=new AuthenticationProviderToken();\n  Properties properties=new Properties();\n  properties.setProperty(\"tokenSecretKey\",AuthTokenUtils.encodeKeyBase64(secretKey));\n  ServiceConfiguration conf=new ServiceConfiguration();\n  conf.setProperties(properties);\n  provider.initialize(conf);\n  String authExceptionMessage=\"\";\n  try {\n    provider.authenticate(new AuthenticationDataSource(){\n    }\n);\n    fail(\"Should have failed\");\n  }\n catch (  AuthenticationException e) {\n    authExceptionMessage=e.getMessage();\n  }\n  String token=AuthTokenUtils.createToken(secretKey,\"subject\",Optional.empty());\n  String subject=provider.authenticate(new AuthenticationDataSource(){\n    @Override public boolean hasDataFromCommand(){\n      return true;\n    }\n    @Override public String getCommandData(){\n      return token;\n    }\n  }\n);\n  ByteArrayOutputStream statsOut=new ByteArrayOutputStream();\n  PrometheusMetricsGenerator.generate(pulsar,false,false,false,statsOut);\n  String metricsStr=statsOut.toString();\n  Multimap<String,Metric> metrics=parseMetrics(metricsStr);\n  List<Metric> cm=(List<Metric>)metrics.get(\"pulsar_authentication_success_count\");\n  boolean haveSucceed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveSucceed=true;\n    }\n  }\n  Assert.assertTrue(haveSucceed);\n  cm=(List<Metric>)metrics.get(\"pulsar_authentication_failures_count\");\n  boolean haveFailed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"reason\"),authExceptionMessage) && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveFailed=true;\n    }\n  }\n  Assert.assertTrue(haveFailed);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2569,
        "startLineNumber" : 818,
        "startColumnNumber" : 4,
        "endLineNumber" : 882,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAuthMetrics() throws IOException, AuthenticationException {\n  SecretKey secretKey=AuthTokenUtils.createSecretKey(SignatureAlgorithm.HS256);\n  AuthenticationProviderToken provider=new AuthenticationProviderToken();\n  Properties properties=new Properties();\n  properties.setProperty(\"tokenSecretKey\",AuthTokenUtils.encodeKeyBase64(secretKey));\n  ServiceConfiguration conf=new ServiceConfiguration();\n  conf.setProperties(properties);\n  provider.initialize(conf);\n  String authExceptionMessage=\"\";\n  try {\n    provider.authenticate(new AuthenticationDataSource(){\n    }\n);\n    fail(\"Should have failed\");\n  }\n catch (  AuthenticationException e) {\n    authExceptionMessage=e.getMessage();\n  }\n  String token=AuthTokenUtils.createToken(secretKey,\"subject\",Optional.empty());\n  String subject=provider.authenticate(new AuthenticationDataSource(){\n    @Override public boolean hasDataFromCommand(){\n      return true;\n    }\n    @Override public String getCommandData(){\n      return token;\n    }\n  }\n);\n  ByteArrayOutputStream statsOut=new ByteArrayOutputStream();\n  PrometheusMetricsGenerator.generate(pulsar,false,false,false,statsOut);\n  String metricsStr=statsOut.toString();\n  Multimap<String,Metric> metrics=parseMetrics(metricsStr);\n  List<Metric> cm=(List<Metric>)metrics.get(\"pulsar_authentication_success_count\");\n  boolean haveSucceed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveSucceed=true;\n    }\n  }\n  Assert.assertTrue(haveSucceed);\n  cm=(List<Metric>)metrics.get(\"pulsar_authentication_failures_count\");\n  boolean haveFailed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"reason\"),authExceptionMessage) && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveFailed=true;\n    }\n  }\n  Assert.assertTrue(haveFailed);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 316,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 845,
        "startColumnNumber" : 25,
        "endLineNumber" : 855,
        "endColumnNumber" : 10
      },
      "nodeContext" : "provider.authenticate(new AuthenticationDataSource(){\n  @Override public boolean hasDataFromCommand(){\n    return true;\n  }\n  @Override public String getCommandData(){\n    return token;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.broker.authentication.AuthenticationProviderToken"
  }, {
    "nodeContext" : "provider",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 865,
      "startColumnNumber" : 72,
      "endLineNumber" : 865,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 865,
        "startColumnNumber" : 72,
        "endLineNumber" : 865,
        "endColumnNumber" : 91
      },
      "nodeContext" : "provider.getClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 865,
        "startColumnNumber" : 72,
        "endLineNumber" : 865,
        "endColumnNumber" : 107
      },
      "nodeContext" : "provider.getClass().getSimpleName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 865,
        "startColumnNumber" : 23,
        "endLineNumber" : 865,
        "endColumnNumber" : 108
      },
      "nodeContext" : "Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 864,
        "startColumnNumber" : 16,
        "endLineNumber" : 865,
        "endColumnNumber" : 108
      },
      "nodeContext" : "Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 221,
        "startLineNumber" : 864,
        "startColumnNumber" : 12,
        "endLineNumber" : 867,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n  haveSucceed=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 863,
        "startColumnNumber" : 33,
        "endLineNumber" : 868,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n    haveSucceed=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 863,
        "startColumnNumber" : 8,
        "endLineNumber" : 868,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Metric metric : cm) {\n  if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n    haveSucceed=true;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2485,
        "startLineNumber" : 819,
        "startColumnNumber" : 78,
        "endLineNumber" : 882,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SecretKey secretKey=AuthTokenUtils.createSecretKey(SignatureAlgorithm.HS256);\n  AuthenticationProviderToken provider=new AuthenticationProviderToken();\n  Properties properties=new Properties();\n  properties.setProperty(\"tokenSecretKey\",AuthTokenUtils.encodeKeyBase64(secretKey));\n  ServiceConfiguration conf=new ServiceConfiguration();\n  conf.setProperties(properties);\n  provider.initialize(conf);\n  String authExceptionMessage=\"\";\n  try {\n    provider.authenticate(new AuthenticationDataSource(){\n    }\n);\n    fail(\"Should have failed\");\n  }\n catch (  AuthenticationException e) {\n    authExceptionMessage=e.getMessage();\n  }\n  String token=AuthTokenUtils.createToken(secretKey,\"subject\",Optional.empty());\n  String subject=provider.authenticate(new AuthenticationDataSource(){\n    @Override public boolean hasDataFromCommand(){\n      return true;\n    }\n    @Override public String getCommandData(){\n      return token;\n    }\n  }\n);\n  ByteArrayOutputStream statsOut=new ByteArrayOutputStream();\n  PrometheusMetricsGenerator.generate(pulsar,false,false,false,statsOut);\n  String metricsStr=statsOut.toString();\n  Multimap<String,Metric> metrics=parseMetrics(metricsStr);\n  List<Metric> cm=(List<Metric>)metrics.get(\"pulsar_authentication_success_count\");\n  boolean haveSucceed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveSucceed=true;\n    }\n  }\n  Assert.assertTrue(haveSucceed);\n  cm=(List<Metric>)metrics.get(\"pulsar_authentication_failures_count\");\n  boolean haveFailed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"reason\"),authExceptionMessage) && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveFailed=true;\n    }\n  }\n  Assert.assertTrue(haveFailed);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2569,
        "startLineNumber" : 818,
        "startColumnNumber" : 4,
        "endLineNumber" : 882,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAuthMetrics() throws IOException, AuthenticationException {\n  SecretKey secretKey=AuthTokenUtils.createSecretKey(SignatureAlgorithm.HS256);\n  AuthenticationProviderToken provider=new AuthenticationProviderToken();\n  Properties properties=new Properties();\n  properties.setProperty(\"tokenSecretKey\",AuthTokenUtils.encodeKeyBase64(secretKey));\n  ServiceConfiguration conf=new ServiceConfiguration();\n  conf.setProperties(properties);\n  provider.initialize(conf);\n  String authExceptionMessage=\"\";\n  try {\n    provider.authenticate(new AuthenticationDataSource(){\n    }\n);\n    fail(\"Should have failed\");\n  }\n catch (  AuthenticationException e) {\n    authExceptionMessage=e.getMessage();\n  }\n  String token=AuthTokenUtils.createToken(secretKey,\"subject\",Optional.empty());\n  String subject=provider.authenticate(new AuthenticationDataSource(){\n    @Override public boolean hasDataFromCommand(){\n      return true;\n    }\n    @Override public String getCommandData(){\n      return token;\n    }\n  }\n);\n  ByteArrayOutputStream statsOut=new ByteArrayOutputStream();\n  PrometheusMetricsGenerator.generate(pulsar,false,false,false,statsOut);\n  String metricsStr=statsOut.toString();\n  Multimap<String,Metric> metrics=parseMetrics(metricsStr);\n  List<Metric> cm=(List<Metric>)metrics.get(\"pulsar_authentication_success_count\");\n  boolean haveSucceed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveSucceed=true;\n    }\n  }\n  Assert.assertTrue(haveSucceed);\n  cm=(List<Metric>)metrics.get(\"pulsar_authentication_failures_count\");\n  boolean haveFailed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"reason\"),authExceptionMessage) && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveFailed=true;\n    }\n  }\n  Assert.assertTrue(haveFailed);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 316,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 865,
        "startColumnNumber" : 23,
        "endLineNumber" : 865,
        "endColumnNumber" : 108
      },
      "nodeContext" : "Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.broker.authentication.AuthenticationProviderToken"
  }, {
    "nodeContext" : "provider",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 877,
      "startColumnNumber" : 72,
      "endLineNumber" : 877,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 877,
        "startColumnNumber" : 72,
        "endLineNumber" : 877,
        "endColumnNumber" : 91
      },
      "nodeContext" : "provider.getClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 877,
        "startColumnNumber" : 72,
        "endLineNumber" : 877,
        "endColumnNumber" : 107
      },
      "nodeContext" : "provider.getClass().getSimpleName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 877,
        "startColumnNumber" : 23,
        "endLineNumber" : 877,
        "endColumnNumber" : 108
      },
      "nodeContext" : "Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 875,
        "startColumnNumber" : 16,
        "endLineNumber" : 877,
        "endColumnNumber" : 108
      },
      "nodeContext" : "Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"reason\"),authExceptionMessage) && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 35,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 307,
        "startLineNumber" : 875,
        "startColumnNumber" : 12,
        "endLineNumber" : 879,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"reason\"),authExceptionMessage) && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n  haveFailed=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 331,
        "startLineNumber" : 874,
        "startColumnNumber" : 33,
        "endLineNumber" : 880,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"reason\"),authExceptionMessage) && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n    haveFailed=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 356,
        "startLineNumber" : 874,
        "startColumnNumber" : 8,
        "endLineNumber" : 880,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Metric metric : cm) {\n  if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"reason\"),authExceptionMessage) && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n    haveFailed=true;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 48,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2485,
        "startLineNumber" : 819,
        "startColumnNumber" : 78,
        "endLineNumber" : 882,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SecretKey secretKey=AuthTokenUtils.createSecretKey(SignatureAlgorithm.HS256);\n  AuthenticationProviderToken provider=new AuthenticationProviderToken();\n  Properties properties=new Properties();\n  properties.setProperty(\"tokenSecretKey\",AuthTokenUtils.encodeKeyBase64(secretKey));\n  ServiceConfiguration conf=new ServiceConfiguration();\n  conf.setProperties(properties);\n  provider.initialize(conf);\n  String authExceptionMessage=\"\";\n  try {\n    provider.authenticate(new AuthenticationDataSource(){\n    }\n);\n    fail(\"Should have failed\");\n  }\n catch (  AuthenticationException e) {\n    authExceptionMessage=e.getMessage();\n  }\n  String token=AuthTokenUtils.createToken(secretKey,\"subject\",Optional.empty());\n  String subject=provider.authenticate(new AuthenticationDataSource(){\n    @Override public boolean hasDataFromCommand(){\n      return true;\n    }\n    @Override public String getCommandData(){\n      return token;\n    }\n  }\n);\n  ByteArrayOutputStream statsOut=new ByteArrayOutputStream();\n  PrometheusMetricsGenerator.generate(pulsar,false,false,false,statsOut);\n  String metricsStr=statsOut.toString();\n  Multimap<String,Metric> metrics=parseMetrics(metricsStr);\n  List<Metric> cm=(List<Metric>)metrics.get(\"pulsar_authentication_success_count\");\n  boolean haveSucceed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveSucceed=true;\n    }\n  }\n  Assert.assertTrue(haveSucceed);\n  cm=(List<Metric>)metrics.get(\"pulsar_authentication_failures_count\");\n  boolean haveFailed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"reason\"),authExceptionMessage) && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveFailed=true;\n    }\n  }\n  Assert.assertTrue(haveFailed);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2569,
        "startLineNumber" : 818,
        "startColumnNumber" : 4,
        "endLineNumber" : 882,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAuthMetrics() throws IOException, AuthenticationException {\n  SecretKey secretKey=AuthTokenUtils.createSecretKey(SignatureAlgorithm.HS256);\n  AuthenticationProviderToken provider=new AuthenticationProviderToken();\n  Properties properties=new Properties();\n  properties.setProperty(\"tokenSecretKey\",AuthTokenUtils.encodeKeyBase64(secretKey));\n  ServiceConfiguration conf=new ServiceConfiguration();\n  conf.setProperties(properties);\n  provider.initialize(conf);\n  String authExceptionMessage=\"\";\n  try {\n    provider.authenticate(new AuthenticationDataSource(){\n    }\n);\n    fail(\"Should have failed\");\n  }\n catch (  AuthenticationException e) {\n    authExceptionMessage=e.getMessage();\n  }\n  String token=AuthTokenUtils.createToken(secretKey,\"subject\",Optional.empty());\n  String subject=provider.authenticate(new AuthenticationDataSource(){\n    @Override public boolean hasDataFromCommand(){\n      return true;\n    }\n    @Override public String getCommandData(){\n      return token;\n    }\n  }\n);\n  ByteArrayOutputStream statsOut=new ByteArrayOutputStream();\n  PrometheusMetricsGenerator.generate(pulsar,false,false,false,statsOut);\n  String metricsStr=statsOut.toString();\n  Multimap<String,Metric> metrics=parseMetrics(metricsStr);\n  List<Metric> cm=(List<Metric>)metrics.get(\"pulsar_authentication_success_count\");\n  boolean haveSucceed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveSucceed=true;\n    }\n  }\n  Assert.assertTrue(haveSucceed);\n  cm=(List<Metric>)metrics.get(\"pulsar_authentication_failures_count\");\n  boolean haveFailed=false;\n  for (  Metric metric : cm) {\n    if (Objects.equals(metric.tags.get(\"auth_method\"),\"token\") && Objects.equals(metric.tags.get(\"reason\"),authExceptionMessage) && Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())) {\n      haveFailed=true;\n    }\n  }\n  Assert.assertTrue(haveFailed);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 316,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 877,
        "startColumnNumber" : 23,
        "endLineNumber" : 877,
        "endColumnNumber" : 108
      },
      "nodeContext" : "Objects.equals(metric.tags.get(\"provider_name\"),provider.getClass().getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.broker.authentication.AuthenticationProviderToken"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 829,
    "startColumnNumber" : 8,
    "endLineNumber" : 829,
    "endColumnNumber" : 16
  }, {
    "charLength" : 8,
    "startLineNumber" : 834,
    "startColumnNumber" : 12,
    "endLineNumber" : 834,
    "endColumnNumber" : 20
  }, {
    "charLength" : 8,
    "startLineNumber" : 845,
    "startColumnNumber" : 25,
    "endLineNumber" : 845,
    "endColumnNumber" : 33
  }, {
    "charLength" : 8,
    "startLineNumber" : 865,
    "startColumnNumber" : 72,
    "endLineNumber" : 865,
    "endColumnNumber" : 80
  }, {
    "charLength" : 8,
    "startLineNumber" : 877,
    "startColumnNumber" : 72,
    "endLineNumber" : 877,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 7
  } ]
}