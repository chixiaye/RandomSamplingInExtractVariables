{
  "id" : 476,
  "expression" : "i",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava/src/com/google/common/math/IntMath.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 667,
      "startColumnNumber" : 24,
      "endLineNumber" : 667,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 667,
        "startColumnNumber" : 24,
        "endLineNumber" : 667,
        "endColumnNumber" : 29
      },
      "nodeContext" : "i < k",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 667,
        "startColumnNumber" : 8,
        "endLineNumber" : 670,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < k; i++) {\n  result*=n - i;\n  result/=i + 1;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 265,
        "startLineNumber" : 660,
        "startColumnNumber" : 4,
        "endLineNumber" : 672,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (k) {\ncase 0:  return 1;\ncase 1:return n;\ndefault:long result=1;\nfor (int i=0; i < k; i++) {\nresult*=n - i;\nresult/=i + 1;\n}\nreturn (int)result;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 44,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 650,
        "startColumnNumber" : 43,
        "endLineNumber" : 673,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkNonNegative(\"n\",n);\n  checkNonNegative(\"k\",k);\n  checkArgument(k <= n,\"k (%s) > n (%s)\",k,n);\n  if (k > (n >> 1)) {\n    k=n - k;\n  }\n  if (k >= biggestBinomials.length || n > biggestBinomials[k]) {\n    return Integer.MAX_VALUE;\n  }\nswitch (k) {\ncase 0:    return 1;\ncase 1:  return n;\ndefault:long result=1;\nfor (int i=0; i < k; i++) {\nresult*=n - i;\nresult/=i + 1;\n}\nreturn (int)result;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 889,
        "startLineNumber" : 644,
        "startColumnNumber" : 2,
        "endLineNumber" : 673,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns  {@code n} choose {@code k}, also known as the binomial coefficient of  {@code n} and{@code k}, or  {@link Integer#MAX_VALUE} if the result does not fit in an {@code int}.\n * @throws IllegalArgumentException if {@code n < 0},  {@code k < 0} or {@code k > n}\n */\npublic static int binomial(int n,int k){\n  checkNonNegative(\"n\",n);\n  checkNonNegative(\"k\",k);\n  checkArgument(k <= n,\"k (%s) > n (%s)\",k,n);\n  if (k > (n >> 1)) {\n    k=n - k;\n  }\n  if (k >= biggestBinomials.length || n > biggestBinomials[k]) {\n    return Integer.MAX_VALUE;\n  }\nswitch (k) {\ncase 0:    return 1;\ncase 1:  return n;\ndefault:long result=1;\nfor (int i=0; i < k; i++) {\nresult*=n - i;\nresult/=i + 1;\n}\nreturn (int)result;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 107,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 667,
        "startColumnNumber" : 24,
        "endLineNumber" : 667,
        "endColumnNumber" : 29
      },
      "nodeContext" : "i < k",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 668,
      "startColumnNumber" : 24,
      "endLineNumber" : 668,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 668,
        "startColumnNumber" : 20,
        "endLineNumber" : 668,
        "endColumnNumber" : 25
      },
      "nodeContext" : "n - i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 668,
        "startColumnNumber" : 10,
        "endLineNumber" : 668,
        "endColumnNumber" : 25
      },
      "nodeContext" : "result*=n - i",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 668,
        "startColumnNumber" : 10,
        "endLineNumber" : 668,
        "endColumnNumber" : 26
      },
      "nodeContext" : "result*=n - i;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 667,
        "startColumnNumber" : 36,
        "endLineNumber" : 670,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  result*=n - i;\n  result/=i + 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 667,
        "startColumnNumber" : 8,
        "endLineNumber" : 670,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < k; i++) {\n  result*=n - i;\n  result/=i + 1;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 265,
        "startLineNumber" : 660,
        "startColumnNumber" : 4,
        "endLineNumber" : 672,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (k) {\ncase 0:  return 1;\ncase 1:return n;\ndefault:long result=1;\nfor (int i=0; i < k; i++) {\nresult*=n - i;\nresult/=i + 1;\n}\nreturn (int)result;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 44,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 650,
        "startColumnNumber" : 43,
        "endLineNumber" : 673,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkNonNegative(\"n\",n);\n  checkNonNegative(\"k\",k);\n  checkArgument(k <= n,\"k (%s) > n (%s)\",k,n);\n  if (k > (n >> 1)) {\n    k=n - k;\n  }\n  if (k >= biggestBinomials.length || n > biggestBinomials[k]) {\n    return Integer.MAX_VALUE;\n  }\nswitch (k) {\ncase 0:    return 1;\ncase 1:  return n;\ndefault:long result=1;\nfor (int i=0; i < k; i++) {\nresult*=n - i;\nresult/=i + 1;\n}\nreturn (int)result;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 889,
        "startLineNumber" : 644,
        "startColumnNumber" : 2,
        "endLineNumber" : 673,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns  {@code n} choose {@code k}, also known as the binomial coefficient of  {@code n} and{@code k}, or  {@link Integer#MAX_VALUE} if the result does not fit in an {@code int}.\n * @throws IllegalArgumentException if {@code n < 0},  {@code k < 0} or {@code k > n}\n */\npublic static int binomial(int n,int k){\n  checkNonNegative(\"n\",n);\n  checkNonNegative(\"k\",k);\n  checkArgument(k <= n,\"k (%s) > n (%s)\",k,n);\n  if (k > (n >> 1)) {\n    k=n - k;\n  }\n  if (k >= biggestBinomials.length || n > biggestBinomials[k]) {\n    return Integer.MAX_VALUE;\n  }\nswitch (k) {\ncase 0:    return 1;\ncase 1:  return n;\ndefault:long result=1;\nfor (int i=0; i < k; i++) {\nresult*=n - i;\nresult/=i + 1;\n}\nreturn (int)result;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 107,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 668,
        "startColumnNumber" : 10,
        "endLineNumber" : 668,
        "endColumnNumber" : 26
      },
      "nodeContext" : "result*=n - i;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 669,
      "startColumnNumber" : 20,
      "endLineNumber" : 669,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 669,
        "startColumnNumber" : 20,
        "endLineNumber" : 669,
        "endColumnNumber" : 25
      },
      "nodeContext" : "i + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 669,
        "startColumnNumber" : 10,
        "endLineNumber" : 669,
        "endColumnNumber" : 25
      },
      "nodeContext" : "result/=i + 1",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 669,
        "startColumnNumber" : 10,
        "endLineNumber" : 669,
        "endColumnNumber" : 26
      },
      "nodeContext" : "result/=i + 1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 667,
        "startColumnNumber" : 36,
        "endLineNumber" : 670,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  result*=n - i;\n  result/=i + 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 667,
        "startColumnNumber" : 8,
        "endLineNumber" : 670,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < k; i++) {\n  result*=n - i;\n  result/=i + 1;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 265,
        "startLineNumber" : 660,
        "startColumnNumber" : 4,
        "endLineNumber" : 672,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (k) {\ncase 0:  return 1;\ncase 1:return n;\ndefault:long result=1;\nfor (int i=0; i < k; i++) {\nresult*=n - i;\nresult/=i + 1;\n}\nreturn (int)result;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 44,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 650,
        "startColumnNumber" : 43,
        "endLineNumber" : 673,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkNonNegative(\"n\",n);\n  checkNonNegative(\"k\",k);\n  checkArgument(k <= n,\"k (%s) > n (%s)\",k,n);\n  if (k > (n >> 1)) {\n    k=n - k;\n  }\n  if (k >= biggestBinomials.length || n > biggestBinomials[k]) {\n    return Integer.MAX_VALUE;\n  }\nswitch (k) {\ncase 0:    return 1;\ncase 1:  return n;\ndefault:long result=1;\nfor (int i=0; i < k; i++) {\nresult*=n - i;\nresult/=i + 1;\n}\nreturn (int)result;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 889,
        "startLineNumber" : 644,
        "startColumnNumber" : 2,
        "endLineNumber" : 673,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns  {@code n} choose {@code k}, also known as the binomial coefficient of  {@code n} and{@code k}, or  {@link Integer#MAX_VALUE} if the result does not fit in an {@code int}.\n * @throws IllegalArgumentException if {@code n < 0},  {@code k < 0} or {@code k > n}\n */\npublic static int binomial(int n,int k){\n  checkNonNegative(\"n\",n);\n  checkNonNegative(\"k\",k);\n  checkArgument(k <= n,\"k (%s) > n (%s)\",k,n);\n  if (k > (n >> 1)) {\n    k=n - k;\n  }\n  if (k >= biggestBinomials.length || n > biggestBinomials[k]) {\n    return Integer.MAX_VALUE;\n  }\nswitch (k) {\ncase 0:    return 1;\ncase 1:  return n;\ndefault:long result=1;\nfor (int i=0; i < k; i++) {\nresult*=n - i;\nresult/=i + 1;\n}\nreturn (int)result;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 107,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 669,
        "startColumnNumber" : 10,
        "endLineNumber" : 669,
        "endColumnNumber" : 26
      },
      "nodeContext" : "result/=i + 1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 667,
    "startColumnNumber" : 24,
    "endLineNumber" : 667,
    "endColumnNumber" : 25
  }, {
    "charLength" : 1,
    "startLineNumber" : 668,
    "startColumnNumber" : 24,
    "endLineNumber" : 668,
    "endColumnNumber" : 25
  }, {
    "charLength" : 1,
    "startLineNumber" : 669,
    "startColumnNumber" : 20,
    "endLineNumber" : 669,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}