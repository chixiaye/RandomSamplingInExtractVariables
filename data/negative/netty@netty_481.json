{
  "id" : 481,
  "expression" : "group",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2MultiplexCodecBuilderTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "group",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 76,
      "startColumnNumber" : 23,
      "endLineNumber" : 76,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 74,
        "startColumnNumber" : 29,
        "endLineNumber" : 76,
        "endColumnNumber" : 29
      },
      "nodeContext" : "new ServerBootstrap().channel(LocalServerChannel.class).group(group)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 2054,
        "startLineNumber" : 74,
        "startColumnNumber" : 29,
        "endLineNumber" : 111,
        "endColumnNumber" : 18
      },
      "nodeContext" : "new ServerBootstrap().channel(LocalServerChannel.class).group(group).childHandler(new ChannelInitializer<Channel>(){\n  @Override protected void initChannel(  Channel ch) throws Exception {\n    serverConnectedChannel=ch;\n    ch.pipeline().addLast(new Http2MultiplexCodecBuilder(true,new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch) throws Exception {\n        ch.pipeline().addLast(new ChannelHandler(){\n          private boolean writable;\n          @Override public void channelActive(          ChannelHandlerContext ctx) throws Exception {\n            writable|=ctx.channel().isWritable();\n            ctx.fireChannelActive();\n          }\n          @Override public void channelWritabilityChanged(          ChannelHandlerContext ctx) throws Exception {\n            writable|=ctx.channel().isWritable();\n            ctx.fireChannelWritabilityChanged();\n          }\n          @Override public void channelInactive(          ChannelHandlerContext ctx) throws Exception {\n            assertTrue(writable);\n            ctx.fireChannelInactive();\n          }\n        }\n);\n        ch.pipeline().addLast(serverLastInboundHandler);\n      }\n    }\n).build());\n    serverChannelLatch.countDown();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 166,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 2059,
        "startLineNumber" : 74,
        "startColumnNumber" : 24,
        "endLineNumber" : 111,
        "endColumnNumber" : 18
      },
      "nodeContext" : "sb=new ServerBootstrap().channel(LocalServerChannel.class).group(group).childHandler(new ChannelInitializer<Channel>(){\n  @Override protected void initChannel(  Channel ch) throws Exception {\n    serverConnectedChannel=ch;\n    ch.pipeline().addLast(new Http2MultiplexCodecBuilder(true,new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch) throws Exception {\n        ch.pipeline().addLast(new ChannelHandler(){\n          private boolean writable;\n          @Override public void channelActive(          ChannelHandlerContext ctx) throws Exception {\n            writable|=ctx.channel().isWritable();\n            ctx.fireChannelActive();\n          }\n          @Override public void channelWritabilityChanged(          ChannelHandlerContext ctx) throws Exception {\n            writable|=ctx.channel().isWritable();\n            ctx.fireChannelWritabilityChanged();\n          }\n          @Override public void channelInactive(          ChannelHandlerContext ctx) throws Exception {\n            assertTrue(writable);\n            ctx.fireChannelInactive();\n          }\n        }\n);\n        ch.pipeline().addLast(serverLastInboundHandler);\n      }\n    }\n).build());\n    serverChannelLatch.countDown();\n  }\n}\n)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 168,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2076,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 19
      },
      "nodeContext" : "ServerBootstrap sb=new ServerBootstrap().channel(LocalServerChannel.class).group(group).childHandler(new ChannelInitializer<Channel>(){\n  @Override protected void initChannel(  Channel ch) throws Exception {\n    serverConnectedChannel=ch;\n    ch.pipeline().addLast(new Http2MultiplexCodecBuilder(true,new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch) throws Exception {\n        ch.pipeline().addLast(new ChannelHandler(){\n          private boolean writable;\n          @Override public void channelActive(          ChannelHandlerContext ctx) throws Exception {\n            writable|=ctx.channel().isWritable();\n            ctx.fireChannelActive();\n          }\n          @Override public void channelWritabilityChanged(          ChannelHandlerContext ctx) throws Exception {\n            writable|=ctx.channel().isWritable();\n            ctx.fireChannelWritabilityChanged();\n          }\n          @Override public void channelInactive(          ChannelHandlerContext ctx) throws Exception {\n            assertTrue(writable);\n            ctx.fireChannelInactive();\n          }\n        }\n);\n        ch.pipeline().addLast(serverLastInboundHandler);\n      }\n    }\n).build());\n    serverChannelLatch.countDown();\n  }\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 171,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2946,
        "startLineNumber" : 70,
        "startColumnNumber" : 41,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CountDownLatch serverChannelLatch=new CountDownLatch(1);\n  LocalAddress serverAddress=new LocalAddress(getClass().getName());\n  serverLastInboundHandler=new SharableLastInboundHandler();\n  ServerBootstrap sb=new ServerBootstrap().channel(LocalServerChannel.class).group(group).childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch) throws Exception {\n      serverConnectedChannel=ch;\n      ch.pipeline().addLast(new Http2MultiplexCodecBuilder(true,new ChannelInitializer<Channel>(){\n        @Override protected void initChannel(        Channel ch) throws Exception {\n          ch.pipeline().addLast(new ChannelHandler(){\n            private boolean writable;\n            @Override public void channelActive(            ChannelHandlerContext ctx) throws Exception {\n              writable|=ctx.channel().isWritable();\n              ctx.fireChannelActive();\n            }\n            @Override public void channelWritabilityChanged(            ChannelHandlerContext ctx) throws Exception {\n              writable|=ctx.channel().isWritable();\n              ctx.fireChannelWritabilityChanged();\n            }\n            @Override public void channelInactive(            ChannelHandlerContext ctx) throws Exception {\n              assertTrue(writable);\n              ctx.fireChannelInactive();\n            }\n          }\n);\n          ch.pipeline().addLast(serverLastInboundHandler);\n        }\n      }\n).build());\n      serverChannelLatch.countDown();\n    }\n  }\n);\n  serverChannel=sb.bind(serverAddress).get();\n  Bootstrap cb=new Bootstrap().channel(LocalChannel.class).group(group).handler(new Http2MultiplexCodecBuilder(false,new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch) throws Exception {\n      fail(\"Should not be called for outbound streams\");\n    }\n  }\n).build());\n  clientChannel=cb.connect(serverAddress).get();\n  assertTrue(serverChannelLatch.await(5,SECONDS));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3000,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@BeforeEach public void setUp() throws Exception {\n  final CountDownLatch serverChannelLatch=new CountDownLatch(1);\n  LocalAddress serverAddress=new LocalAddress(getClass().getName());\n  serverLastInboundHandler=new SharableLastInboundHandler();\n  ServerBootstrap sb=new ServerBootstrap().channel(LocalServerChannel.class).group(group).childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch) throws Exception {\n      serverConnectedChannel=ch;\n      ch.pipeline().addLast(new Http2MultiplexCodecBuilder(true,new ChannelInitializer<Channel>(){\n        @Override protected void initChannel(        Channel ch) throws Exception {\n          ch.pipeline().addLast(new ChannelHandler(){\n            private boolean writable;\n            @Override public void channelActive(            ChannelHandlerContext ctx) throws Exception {\n              writable|=ctx.channel().isWritable();\n              ctx.fireChannelActive();\n            }\n            @Override public void channelWritabilityChanged(            ChannelHandlerContext ctx) throws Exception {\n              writable|=ctx.channel().isWritable();\n              ctx.fireChannelWritabilityChanged();\n            }\n            @Override public void channelInactive(            ChannelHandlerContext ctx) throws Exception {\n              assertTrue(writable);\n              ctx.fireChannelInactive();\n            }\n          }\n);\n          ch.pipeline().addLast(serverLastInboundHandler);\n        }\n      }\n).build());\n      serverChannelLatch.countDown();\n    }\n  }\n);\n  serverChannel=sb.bind(serverAddress).get();\n  Bootstrap cb=new Bootstrap().channel(LocalChannel.class).group(group).handler(new Http2MultiplexCodecBuilder(false,new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch) throws Exception {\n      fail(\"Should not be called for outbound streams\");\n    }\n  }\n).build());\n  clientChannel=cb.connect(serverAddress).get();\n  assertTrue(serverChannelLatch.await(5,SECONDS));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 282,
      "astHeight" : 28
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 74,
        "startColumnNumber" : 29,
        "endLineNumber" : 76,
        "endColumnNumber" : 29
      },
      "nodeContext" : "new ServerBootstrap().channel(LocalServerChannel.class).group(group)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.channel.EventLoopGroup"
  }, {
    "nodeContext" : "group",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 116,
      "startColumnNumber" : 23,
      "endLineNumber" : 116,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 114,
        "startColumnNumber" : 23,
        "endLineNumber" : 116,
        "endColumnNumber" : 29
      },
      "nodeContext" : "new Bootstrap().channel(LocalChannel.class).group(group)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 430,
        "startLineNumber" : 114,
        "startColumnNumber" : 23,
        "endLineNumber" : 122,
        "endColumnNumber" : 27
      },
      "nodeContext" : "new Bootstrap().channel(LocalChannel.class).group(group).handler(new Http2MultiplexCodecBuilder(false,new ChannelInitializer<Channel>(){\n  @Override protected void initChannel(  Channel ch) throws Exception {\n    fail(\"Should not be called for outbound streams\");\n  }\n}\n).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 43,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 435,
        "startLineNumber" : 114,
        "startColumnNumber" : 18,
        "endLineNumber" : 122,
        "endColumnNumber" : 27
      },
      "nodeContext" : "cb=new Bootstrap().channel(LocalChannel.class).group(group).handler(new Http2MultiplexCodecBuilder(false,new ChannelInitializer<Channel>(){\n  @Override protected void initChannel(  Channel ch) throws Exception {\n    fail(\"Should not be called for outbound streams\");\n  }\n}\n).build())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 45,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 446,
        "startLineNumber" : 114,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 28
      },
      "nodeContext" : "Bootstrap cb=new Bootstrap().channel(LocalChannel.class).group(group).handler(new Http2MultiplexCodecBuilder(false,new ChannelInitializer<Channel>(){\n  @Override protected void initChannel(  Channel ch) throws Exception {\n    fail(\"Should not be called for outbound streams\");\n  }\n}\n).build());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 48,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2946,
        "startLineNumber" : 70,
        "startColumnNumber" : 41,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CountDownLatch serverChannelLatch=new CountDownLatch(1);\n  LocalAddress serverAddress=new LocalAddress(getClass().getName());\n  serverLastInboundHandler=new SharableLastInboundHandler();\n  ServerBootstrap sb=new ServerBootstrap().channel(LocalServerChannel.class).group(group).childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch) throws Exception {\n      serverConnectedChannel=ch;\n      ch.pipeline().addLast(new Http2MultiplexCodecBuilder(true,new ChannelInitializer<Channel>(){\n        @Override protected void initChannel(        Channel ch) throws Exception {\n          ch.pipeline().addLast(new ChannelHandler(){\n            private boolean writable;\n            @Override public void channelActive(            ChannelHandlerContext ctx) throws Exception {\n              writable|=ctx.channel().isWritable();\n              ctx.fireChannelActive();\n            }\n            @Override public void channelWritabilityChanged(            ChannelHandlerContext ctx) throws Exception {\n              writable|=ctx.channel().isWritable();\n              ctx.fireChannelWritabilityChanged();\n            }\n            @Override public void channelInactive(            ChannelHandlerContext ctx) throws Exception {\n              assertTrue(writable);\n              ctx.fireChannelInactive();\n            }\n          }\n);\n          ch.pipeline().addLast(serverLastInboundHandler);\n        }\n      }\n).build());\n      serverChannelLatch.countDown();\n    }\n  }\n);\n  serverChannel=sb.bind(serverAddress).get();\n  Bootstrap cb=new Bootstrap().channel(LocalChannel.class).group(group).handler(new Http2MultiplexCodecBuilder(false,new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch) throws Exception {\n      fail(\"Should not be called for outbound streams\");\n    }\n  }\n).build());\n  clientChannel=cb.connect(serverAddress).get();\n  assertTrue(serverChannelLatch.await(5,SECONDS));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3000,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@BeforeEach public void setUp() throws Exception {\n  final CountDownLatch serverChannelLatch=new CountDownLatch(1);\n  LocalAddress serverAddress=new LocalAddress(getClass().getName());\n  serverLastInboundHandler=new SharableLastInboundHandler();\n  ServerBootstrap sb=new ServerBootstrap().channel(LocalServerChannel.class).group(group).childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch) throws Exception {\n      serverConnectedChannel=ch;\n      ch.pipeline().addLast(new Http2MultiplexCodecBuilder(true,new ChannelInitializer<Channel>(){\n        @Override protected void initChannel(        Channel ch) throws Exception {\n          ch.pipeline().addLast(new ChannelHandler(){\n            private boolean writable;\n            @Override public void channelActive(            ChannelHandlerContext ctx) throws Exception {\n              writable|=ctx.channel().isWritable();\n              ctx.fireChannelActive();\n            }\n            @Override public void channelWritabilityChanged(            ChannelHandlerContext ctx) throws Exception {\n              writable|=ctx.channel().isWritable();\n              ctx.fireChannelWritabilityChanged();\n            }\n            @Override public void channelInactive(            ChannelHandlerContext ctx) throws Exception {\n              assertTrue(writable);\n              ctx.fireChannelInactive();\n            }\n          }\n);\n          ch.pipeline().addLast(serverLastInboundHandler);\n        }\n      }\n).build());\n      serverChannelLatch.countDown();\n    }\n  }\n);\n  serverChannel=sb.bind(serverAddress).get();\n  Bootstrap cb=new Bootstrap().channel(LocalChannel.class).group(group).handler(new Http2MultiplexCodecBuilder(false,new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch) throws Exception {\n      fail(\"Should not be called for outbound streams\");\n    }\n  }\n).build());\n  clientChannel=cb.connect(serverAddress).get();\n  assertTrue(serverChannelLatch.await(5,SECONDS));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 282,
      "astHeight" : 28
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 114,
        "startColumnNumber" : 23,
        "endLineNumber" : 116,
        "endColumnNumber" : 29
      },
      "nodeContext" : "new Bootstrap().channel(LocalChannel.class).group(group)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.channel.EventLoopGroup"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 76,
    "startColumnNumber" : 23,
    "endLineNumber" : 76,
    "endColumnNumber" : 28
  }, {
    "charLength" : 5,
    "startLineNumber" : 116,
    "startColumnNumber" : 23,
    "endLineNumber" : 116,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}