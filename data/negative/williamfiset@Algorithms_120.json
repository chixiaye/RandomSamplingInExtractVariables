{
  "id" : 120,
  "expression" : "new Edge(3,6,11)",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/KruskalsEdgeListPartialSortSolver.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Edge(3,6,11)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 163,
      "startColumnNumber" : 14,
      "endLineNumber" : 163,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 163,
        "endColumnNumber" : 33
      },
      "nodeContext" : "edges.add(new Edge(3,6,11))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 163,
        "endColumnNumber" : 34
      },
      "nodeContext" : "edges.add(new Edge(3,6,11));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1494,
        "startLineNumber" : 145,
        "startColumnNumber" : 41,
        "endLineNumber" : 193,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int numNodes=10;\n  List<Edge> edges=new ArrayList<>();\n  edges.add(new Edge(0,1,5));\n  edges.add(new Edge(1,2,4));\n  edges.add(new Edge(2,9,2));\n  edges.add(new Edge(0,4,1));\n  edges.add(new Edge(0,3,4));\n  edges.add(new Edge(1,3,2));\n  edges.add(new Edge(2,7,4));\n  edges.add(new Edge(2,8,1));\n  edges.add(new Edge(9,8,0));\n  edges.add(new Edge(4,5,1));\n  edges.add(new Edge(5,6,7));\n  edges.add(new Edge(6,8,4));\n  edges.add(new Edge(4,3,2));\n  edges.add(new Edge(5,3,5));\n  edges.add(new Edge(3,6,11));\n  edges.add(new Edge(6,7,1));\n  edges.add(new Edge(3,7,2));\n  edges.add(new Edge(7,8,6));\n  KruskalsEdgeListPartialSortSolver solver;\n  solver=new KruskalsEdgeListPartialSortSolver(edges,numNodes);\n  Long cost=solver.getMstCost();\n  if (cost == null) {\n    System.out.println(\"No MST does not exists\");\n  }\n else {\n    System.out.println(\"MST cost: \" + cost);\n    for (    Edge e : solver.getMst()) {\n      System.out.println(String.format(\"Used edge (%d, %d) with cost: %d\",e.u,e.v,e.cost));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 269,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1533,
        "startLineNumber" : 145,
        "startColumnNumber" : 2,
        "endLineNumber" : 193,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void main(String[] args){\n  int numNodes=10;\n  List<Edge> edges=new ArrayList<>();\n  edges.add(new Edge(0,1,5));\n  edges.add(new Edge(1,2,4));\n  edges.add(new Edge(2,9,2));\n  edges.add(new Edge(0,4,1));\n  edges.add(new Edge(0,3,4));\n  edges.add(new Edge(1,3,2));\n  edges.add(new Edge(2,7,4));\n  edges.add(new Edge(2,8,1));\n  edges.add(new Edge(9,8,0));\n  edges.add(new Edge(4,5,1));\n  edges.add(new Edge(5,6,7));\n  edges.add(new Edge(6,8,4));\n  edges.add(new Edge(4,3,2));\n  edges.add(new Edge(5,3,5));\n  edges.add(new Edge(3,6,11));\n  edges.add(new Edge(6,7,1));\n  edges.add(new Edge(3,7,2));\n  edges.add(new Edge(7,8,6));\n  KruskalsEdgeListPartialSortSolver solver;\n  solver=new KruskalsEdgeListPartialSortSolver(edges,numNodes);\n  Long cost=solver.getMstCost();\n  if (cost == null) {\n    System.out.println(\"No MST does not exists\");\n  }\n else {\n    System.out.println(\"MST cost: \" + cost);\n    for (    Edge e : solver.getMst()) {\n      System.out.println(String.format(\"Used edge (%d, %d) with cost: %d\",e.u,e.v,e.cost));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 280,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 163,
        "endColumnNumber" : 34
      },
      "nodeContext" : "edges.add(new Edge(3,6,11));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "com.williamfiset.algorithms.graphtheory.KruskalsEdgeListPartialSortSolver.Edge"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 163,
    "startColumnNumber" : 14,
    "endLineNumber" : 163,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}