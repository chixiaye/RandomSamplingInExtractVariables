{
  "id" : 210,
  "expression" : "\"Offset of last partition is not zero\"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/IdentityReplicationIntegrationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Offset of last partition is not zero\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 191,
      "startColumnNumber" : 45,
      "endLineNumber" : 191,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 191,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 84
      },
      "nodeContext" : "assertEquals(0,offset.offset(),\"Offset of last partition is not zero\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 191,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 85
      },
      "nodeContext" : "assertEquals(0,offset.offset(),\"Offset of last partition is not zero\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 716,
        "startLineNumber" : 182,
        "startColumnNumber" : 70,
        "endLineNumber" : 192,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Map<TopicPartition,OffsetAndMetadata> remoteOffsets=backupClient.listConsumerGroupOffsets(consumerGroupName).partitionsToOffsetAndMetadata().get();\n  OffsetAndMetadata offset=remoteOffsets.get(new TopicPartition(backupTopic,NUM_PARTITIONS - 1));\n  assertNotNull(offset,\"Offset of last partition was not replicated\");\n  assertEquals(0,offset.offset(),\"Offset of last partition is not zero\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 778,
        "startLineNumber" : 182,
        "startColumnNumber" : 8,
        "endLineNumber" : 192,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (Admin backupClient=backup.kafka().createAdminClient()){\n  Map<TopicPartition,OffsetAndMetadata> remoteOffsets=backupClient.listConsumerGroupOffsets(consumerGroupName).partitionsToOffsetAndMetadata().get();\n  OffsetAndMetadata offset=remoteOffsets.get(new TopicPartition(backupTopic,NUM_PARTITIONS - 1));\n  assertNotNull(offset,\"Offset of last partition was not replicated\");\n  assertEquals(0,offset.offset(),\"Offset of last partition is not zero\");\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2584,
        "startLineNumber" : 148,
        "startColumnNumber" : 69,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String consumerGroupName=\"consumer-group-testReplicationWithEmptyPartition\";\n  Map<String,Object> consumerProps=Collections.singletonMap(\"group.id\",consumerGroupName);\n  String topic=\"test-topic-with-empty-partition\";\n  primary.kafka().createTopic(topic,NUM_PARTITIONS);\n  produceMessages(primary,topic,NUM_PARTITIONS - 1);\n  int expectedRecords=NUM_RECORDS_PER_PARTITION * (NUM_PARTITIONS - 1);\n  try (Consumer<byte[],byte[]> primaryConsumer=primary.kafka().createConsumerAndSubscribeTo(consumerProps,topic)){\n    waitForConsumingAllRecords(primaryConsumer,expectedRecords);\n  }\n   mm2Props.put(BACKUP_CLUSTER_ALIAS + \"->\" + PRIMARY_CLUSTER_ALIAS+ \".enabled\",\"false\");\n  mm2Config=new MirrorMakerConfig(mm2Props);\n  waitUntilMirrorMakerIsRunning(backup,CONNECTOR_LIST,mm2Config,PRIMARY_CLUSTER_ALIAS,BACKUP_CLUSTER_ALIAS);\n  Thread.sleep(TimeUnit.SECONDS.toMillis(3));\n  String backupTopic=topic;\n  try (Consumer<byte[],byte[]> backupConsumer=backup.kafka().createConsumerAndSubscribeTo(consumerProps,backupTopic)){\n    waitForConsumingAllRecords(backupConsumer,expectedRecords);\n  }\n   try (Admin backupClient=backup.kafka().createAdminClient()){\n    Map<TopicPartition,OffsetAndMetadata> remoteOffsets=backupClient.listConsumerGroupOffsets(consumerGroupName).partitionsToOffsetAndMetadata().get();\n    OffsetAndMetadata offset=remoteOffsets.get(new TopicPartition(backupTopic,NUM_PARTITIONS - 1));\n    assertNotNull(offset,\"Offset of last partition was not replicated\");\n    assertEquals(0,offset.offset(),\"Offset of last partition is not zero\");\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2659,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testReplicationWithEmptyPartition() throws Exception {\n  String consumerGroupName=\"consumer-group-testReplicationWithEmptyPartition\";\n  Map<String,Object> consumerProps=Collections.singletonMap(\"group.id\",consumerGroupName);\n  String topic=\"test-topic-with-empty-partition\";\n  primary.kafka().createTopic(topic,NUM_PARTITIONS);\n  produceMessages(primary,topic,NUM_PARTITIONS - 1);\n  int expectedRecords=NUM_RECORDS_PER_PARTITION * (NUM_PARTITIONS - 1);\n  try (Consumer<byte[],byte[]> primaryConsumer=primary.kafka().createConsumerAndSubscribeTo(consumerProps,topic)){\n    waitForConsumingAllRecords(primaryConsumer,expectedRecords);\n  }\n   mm2Props.put(BACKUP_CLUSTER_ALIAS + \"->\" + PRIMARY_CLUSTER_ALIAS+ \".enabled\",\"false\");\n  mm2Config=new MirrorMakerConfig(mm2Props);\n  waitUntilMirrorMakerIsRunning(backup,CONNECTOR_LIST,mm2Config,PRIMARY_CLUSTER_ALIAS,BACKUP_CLUSTER_ALIAS);\n  Thread.sleep(TimeUnit.SECONDS.toMillis(3));\n  String backupTopic=topic;\n  try (Consumer<byte[],byte[]> backupConsumer=backup.kafka().createConsumerAndSubscribeTo(consumerProps,backupTopic)){\n    waitForConsumingAllRecords(backupConsumer,expectedRecords);\n  }\n   try (Admin backupClient=backup.kafka().createAdminClient()){\n    Map<TopicPartition,OffsetAndMetadata> remoteOffsets=backupClient.listConsumerGroupOffsets(consumerGroupName).partitionsToOffsetAndMetadata().get();\n    OffsetAndMetadata offset=remoteOffsets.get(new TopicPartition(backupTopic,NUM_PARTITIONS - 1));\n    assertNotNull(offset,\"Offset of last partition was not replicated\");\n    assertEquals(0,offset.offset(),\"Offset of last partition is not zero\");\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 213,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 191,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 85
      },
      "nodeContext" : "assertEquals(0,offset.offset(),\"Offset of last partition is not zero\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 191,
    "startColumnNumber" : 45,
    "endLineNumber" : 191,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ ]
}