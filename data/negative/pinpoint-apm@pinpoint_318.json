{
  "id" : 318,
  "expression" : "spanEvent.getEndElapsed()",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/collector/src/main/java/com/navercorp/pinpoint/collector/handler/SpanHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "spanEvent.getEndElapsed()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 176,
      "startColumnNumber" : 32,
      "endLineNumber" : 176,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 176,
        "startColumnNumber" : 22,
        "endLineNumber" : 176,
        "endColumnNumber" : 57
      },
      "nodeContext" : "elapsed=spanEvent.getEndElapsed()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 176,
        "startColumnNumber" : 12,
        "endLineNumber" : 176,
        "endColumnNumber" : 58
      },
      "nodeContext" : "final int elapsed=spanEvent.getEndElapsed();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1029,
        "startLineNumber" : 169,
        "startColumnNumber" : 52,
        "endLineNumber" : 187,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final ServiceType spanEventType=registry.findServiceType(spanEvent.getServiceType());\n  if (!spanEventType.isRecordStatistics()) {\n    continue;\n  }\n  final int elapsed=spanEvent.getEndElapsed();\n  final boolean hasException=spanEvent.hasException();\n  statisticsHandler.updateCaller(span.getApplicationId(),applicationServiceType,span.getAgentId(),spanEvent.getDestinationId(),spanEventType,spanEvent.getEndPoint(),elapsed,hasException);\n  statisticsHandler.updateCallee(spanEvent.getDestinationId(),spanEventType,span.getApplicationId(),applicationServiceType,span.getEndPoint(),elapsed,hasException);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 169,
        "startColumnNumber" : 8,
        "endLineNumber" : 187,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (SpanEventBo spanEvent : spanEventList) {\n  final ServiceType spanEventType=registry.findServiceType(spanEvent.getServiceType());\n  if (!spanEventType.isRecordStatistics()) {\n    continue;\n  }\n  final int elapsed=spanEvent.getEndElapsed();\n  final boolean hasException=spanEvent.hasException();\n  statisticsHandler.updateCaller(span.getApplicationId(),applicationServiceType,span.getAgentId(),spanEvent.getDestinationId(),spanEventType,spanEvent.getEndPoint(),elapsed,hasException);\n  statisticsHandler.updateCallee(spanEvent.getDestinationId(),spanEventType,span.getApplicationId(),applicationServiceType,span.getEndPoint(),elapsed,hasException);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1451,
        "startLineNumber" : 158,
        "startColumnNumber" : 50,
        "endLineNumber" : 188,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<SpanEventBo> spanEventList=span.getSpanEventBoList();\n  if (CollectionUtils.isEmpty(spanEventList)) {\n    return;\n  }\n  final ServiceType applicationServiceType=getApplicationServiceType(span);\n  logger.debug(\"handle spanEvent size:{}\",spanEventList.size());\n  for (  SpanEventBo spanEvent : spanEventList) {\n    final ServiceType spanEventType=registry.findServiceType(spanEvent.getServiceType());\n    if (!spanEventType.isRecordStatistics()) {\n      continue;\n    }\n    final int elapsed=spanEvent.getEndElapsed();\n    final boolean hasException=spanEvent.hasException();\n    statisticsHandler.updateCaller(span.getApplicationId(),applicationServiceType,span.getAgentId(),spanEvent.getDestinationId(),spanEventType,spanEvent.getEndPoint(),elapsed,hasException);\n    statisticsHandler.updateCallee(spanEvent.getDestinationId(),spanEventType,span.getApplicationId(),applicationServiceType,span.getEndPoint(),elapsed,hasException);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1497,
        "startLineNumber" : 158,
        "startColumnNumber" : 4,
        "endLineNumber" : 188,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void insertSpanEventStat(SpanBo span){\n  final List<SpanEventBo> spanEventList=span.getSpanEventBoList();\n  if (CollectionUtils.isEmpty(spanEventList)) {\n    return;\n  }\n  final ServiceType applicationServiceType=getApplicationServiceType(span);\n  logger.debug(\"handle spanEvent size:{}\",spanEventList.size());\n  for (  SpanEventBo spanEvent : spanEventList) {\n    final ServiceType spanEventType=registry.findServiceType(spanEvent.getServiceType());\n    if (!spanEventType.isRecordStatistics()) {\n      continue;\n    }\n    final int elapsed=spanEvent.getEndElapsed();\n    final boolean hasException=spanEvent.hasException();\n    statisticsHandler.updateCaller(span.getApplicationId(),applicationServiceType,span.getAgentId(),spanEvent.getDestinationId(),spanEventType,spanEvent.getEndPoint(),elapsed,hasException);\n    statisticsHandler.updateCallee(spanEvent.getDestinationId(),spanEventType,span.getApplicationId(),applicationServiceType,span.getEndPoint(),elapsed,hasException);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 176,
        "startColumnNumber" : 12,
        "endLineNumber" : 176,
        "endColumnNumber" : 58
      },
      "nodeContext" : "final int elapsed=spanEvent.getEndElapsed();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 176,
    "startColumnNumber" : 32,
    "endLineNumber" : 176,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}