{
  "id" : 82,
  "expression" : "typeName.indexOf('.') > -1 ? typeName.substring(0,typeName.indexOf('.')) : typeName",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/core/AnnotationValues.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "typeName.indexOf('.') > -1 ? typeName.substring(0,typeName.indexOf('.')) : typeName",
    "nodeType" : "ConditionalExpression",
    "nodePosition" : {
      "charLength" : 84,
      "startLineNumber" : 403,
      "startColumnNumber" : 18,
      "endLineNumber" : 403,
      "endColumnNumber" : 102
    },
    "astNodeNumber" : 17,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 403,
        "startColumnNumber" : 9,
        "endLineNumber" : 403,
        "endColumnNumber" : 102
      },
      "nodeContext" : "prefix=typeName.indexOf('.') > -1 ? typeName.substring(0,typeName.indexOf('.')) : typeName",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 403,
        "startColumnNumber" : 2,
        "endLineNumber" : 403,
        "endColumnNumber" : 103
      },
      "nodeContext" : "String prefix=typeName.indexOf('.') > -1 ? typeName.substring(0,typeName.indexOf('.')) : typeName;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3162,
        "startLineNumber" : 402,
        "startColumnNumber" : 38,
        "endLineNumber" : 476,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String prefix=typeName.indexOf('.') > -1 ? typeName.substring(0,typeName.indexOf('.')) : typeName;\n{\n    LombokNode<?,?,?> n=ast;\n    walkThroughCU:     while (n != null) {\n      if (n.getKind() == Kind.TYPE) {\n        String simpleName=n.getName();\n        if (prefix.equals(simpleName)) {\n          List<String> outerNames=new ArrayList<String>();\n          while (true) {\n            n=n.up();\n            if (n == null || n.getKind() == Kind.COMPILATION_UNIT)             break;\n            if (n.getKind() == Kind.TYPE)             outerNames.add(n.getName());\n            break walkThroughCU;\n          }\n          StringBuilder result=new StringBuilder();\n          if (ast.getPackageDeclaration() != null)           result.append(ast.getPackageDeclaration());\n          if (result.length() > 0)           result.append('.');\n          Collections.reverse(outerNames);\n          for (          String outerName : outerNames)           result.append(outerName).append('.');\n          result.append(typeName);\n          return result.toString();\n        }\n      }\n      n=n.up();\n    }\n  }\n{\n    for (    String im : ast == null ? Collections.<String>emptyList() : ast.getImportStatements()) {\n      if (im.endsWith(\".*\"))       continue;\n      int idx=im.lastIndexOf('.');\n      String simple=idx == -1 ? im : im.substring(idx + 1);\n      if (simple.equals(prefix)) {\n        return im + typeName.substring(prefix.length());\n      }\n    }\n  }\n{\n    List<String> imports=ast == null ? Collections.<String>emptyList() : new ArrayList<String>(ast.getImportStatements());\n    imports.add(\"java.lang.*\");\n    for (    String im : imports) {\n      if (!im.endsWith(\".*\") || !im.startsWith(\"java.\"))       continue;\n      try {\n        Class<?> c=Class.forName(im.substring(0,im.length() - 1) + typeName);\n        if (c != null)         return c.getName();\n      }\n catch (      Throwable t) {\n      }\n    }\n  }\n{\n    if (typeName.indexOf('.') == -1)     return inLocalPackage(ast,typeName);\n  }\n{\n    char firstChar=typeName.charAt(0);\n    if (Character.isTitleCase(firstChar) || Character.isUpperCase(firstChar)) {\n      return inLocalPackage(ast,typeName);\n    }\n    return typeName;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 378,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3199,
        "startLineNumber" : 402,
        "startColumnNumber" : 1,
        "endLineNumber" : 476,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private String toFQ(String typeName){\n  String prefix=typeName.indexOf('.') > -1 ? typeName.substring(0,typeName.indexOf('.')) : typeName;\n{\n    LombokNode<?,?,?> n=ast;\n    walkThroughCU:     while (n != null) {\n      if (n.getKind() == Kind.TYPE) {\n        String simpleName=n.getName();\n        if (prefix.equals(simpleName)) {\n          List<String> outerNames=new ArrayList<String>();\n          while (true) {\n            n=n.up();\n            if (n == null || n.getKind() == Kind.COMPILATION_UNIT)             break;\n            if (n.getKind() == Kind.TYPE)             outerNames.add(n.getName());\n            break walkThroughCU;\n          }\n          StringBuilder result=new StringBuilder();\n          if (ast.getPackageDeclaration() != null)           result.append(ast.getPackageDeclaration());\n          if (result.length() > 0)           result.append('.');\n          Collections.reverse(outerNames);\n          for (          String outerName : outerNames)           result.append(outerName).append('.');\n          result.append(typeName);\n          return result.toString();\n        }\n      }\n      n=n.up();\n    }\n  }\n{\n    for (    String im : ast == null ? Collections.<String>emptyList() : ast.getImportStatements()) {\n      if (im.endsWith(\".*\"))       continue;\n      int idx=im.lastIndexOf('.');\n      String simple=idx == -1 ? im : im.substring(idx + 1);\n      if (simple.equals(prefix)) {\n        return im + typeName.substring(prefix.length());\n      }\n    }\n  }\n{\n    List<String> imports=ast == null ? Collections.<String>emptyList() : new ArrayList<String>(ast.getImportStatements());\n    imports.add(\"java.lang.*\");\n    for (    String im : imports) {\n      if (!im.endsWith(\".*\") || !im.startsWith(\"java.\"))       continue;\n      try {\n        Class<?> c=Class.forName(im.substring(0,im.length() - 1) + typeName);\n        if (c != null)         return c.getName();\n      }\n catch (      Throwable t) {\n      }\n    }\n  }\n{\n    if (typeName.indexOf('.') == -1)     return inLocalPackage(ast,typeName);\n  }\n{\n    char firstChar=typeName.charAt(0);\n    if (Character.isTitleCase(firstChar) || Character.isUpperCase(firstChar)) {\n      return inLocalPackage(ast,typeName);\n    }\n    return typeName;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 387,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 403,
        "startColumnNumber" : 2,
        "endLineNumber" : 403,
        "endColumnNumber" : 103
      },
      "nodeContext" : "String prefix=typeName.indexOf('.') > -1 ? typeName.substring(0,typeName.indexOf('.')) : typeName;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    },
    "tokenLength" : 10,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 84,
    "startLineNumber" : 403,
    "startColumnNumber" : 18,
    "endLineNumber" : 403,
    "endColumnNumber" : 102
  } ],
  "layoutRelationDataList" : [ ]
}