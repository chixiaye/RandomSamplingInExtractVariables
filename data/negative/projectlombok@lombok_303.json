{
  "id" : 303,
  "expression" : "lib",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/HandlerLibrary.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "lib",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 112,
      "startColumnNumber" : 7,
      "endLineNumber" : 112,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 112,
        "startColumnNumber" : 7,
        "endLineNumber" : 112,
        "endColumnNumber" : 29
      },
      "nodeContext" : "lib.annotationHandlers",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 112,
        "startColumnNumber" : 7,
        "endLineNumber" : 112,
        "endColumnNumber" : 65
      },
      "nodeContext" : "lib.annotationHandlers.put(annotationClassName,container)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 112,
        "startColumnNumber" : 7,
        "endLineNumber" : 112,
        "endColumnNumber" : 73
      },
      "nodeContext" : "lib.annotationHandlers.put(annotationClassName,container) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 112,
        "startColumnNumber" : 3,
        "endLineNumber" : 114,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n  lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 566,
        "startLineNumber" : 107,
        "startColumnNumber" : 143,
        "endLineNumber" : 116,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),JavacAnnotationHandler.class);\n  AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n  String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n  if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n    lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n  }\n  lib.typeLibrary.addType(container.annotationClass.getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 707,
        "startLineNumber" : 107,
        "startColumnNumber" : 2,
        "endLineNumber" : 116,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (JavacAnnotationHandler handler : SpiLoadUtil.findServices(JavacAnnotationHandler.class,JavacAnnotationHandler.class.getClassLoader())) {\n  Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),JavacAnnotationHandler.class);\n  AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n  String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n  if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n    lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n  }\n  lib.typeLibrary.addType(container.annotationClass.getName());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 90,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 827,
        "startLineNumber" : 105,
        "startColumnNumber" : 83,
        "endLineNumber" : 117,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  for (  JavacAnnotationHandler handler : SpiLoadUtil.findServices(JavacAnnotationHandler.class,JavacAnnotationHandler.class.getClassLoader())) {\n    Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),JavacAnnotationHandler.class);\n    AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n    String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n    if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n      lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n    }\n    lib.typeLibrary.addType(container.annotationClass.getName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1041,
        "startLineNumber" : 103,
        "startColumnNumber" : 1,
        "endLineNumber" : 117,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Uses SPI Discovery to find implementations of  {@link JavacAnnotationHandler}. \n */\n@SuppressWarnings({\"rawtypes\",\"unchecked\"}) private static void loadAnnotationHandlers(HandlerLibrary lib) throws IOException {\n  for (  JavacAnnotationHandler handler : SpiLoadUtil.findServices(JavacAnnotationHandler.class,JavacAnnotationHandler.class.getClassLoader())) {\n    Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),JavacAnnotationHandler.class);\n    AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n    String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n    if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n      lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n    }\n    lib.typeLibrary.addType(container.annotationClass.getName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 112,
        "startColumnNumber" : 7,
        "endLineNumber" : 112,
        "endColumnNumber" : 73
      },
      "nodeContext" : "lib.annotationHandlers.put(annotationClassName,container) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "lombok.javac.HandlerLibrary"
  }, {
    "nodeContext" : "lib",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 113,
      "startColumnNumber" : 4,
      "endLineNumber" : 113,
      "endColumnNumber" : 7
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 113,
        "endColumnNumber" : 86
      },
      "nodeContext" : "lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 113,
        "endColumnNumber" : 87
      },
      "nodeContext" : "lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 112,
        "startColumnNumber" : 75,
        "endLineNumber" : 114,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 112,
        "startColumnNumber" : 3,
        "endLineNumber" : 114,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n  lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 566,
        "startLineNumber" : 107,
        "startColumnNumber" : 143,
        "endLineNumber" : 116,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),JavacAnnotationHandler.class);\n  AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n  String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n  if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n    lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n  }\n  lib.typeLibrary.addType(container.annotationClass.getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 707,
        "startLineNumber" : 107,
        "startColumnNumber" : 2,
        "endLineNumber" : 116,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (JavacAnnotationHandler handler : SpiLoadUtil.findServices(JavacAnnotationHandler.class,JavacAnnotationHandler.class.getClassLoader())) {\n  Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),JavacAnnotationHandler.class);\n  AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n  String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n  if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n    lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n  }\n  lib.typeLibrary.addType(container.annotationClass.getName());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 90,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 827,
        "startLineNumber" : 105,
        "startColumnNumber" : 83,
        "endLineNumber" : 117,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  for (  JavacAnnotationHandler handler : SpiLoadUtil.findServices(JavacAnnotationHandler.class,JavacAnnotationHandler.class.getClassLoader())) {\n    Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),JavacAnnotationHandler.class);\n    AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n    String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n    if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n      lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n    }\n    lib.typeLibrary.addType(container.annotationClass.getName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1041,
        "startLineNumber" : 103,
        "startColumnNumber" : 1,
        "endLineNumber" : 117,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Uses SPI Discovery to find implementations of  {@link JavacAnnotationHandler}. \n */\n@SuppressWarnings({\"rawtypes\",\"unchecked\"}) private static void loadAnnotationHandlers(HandlerLibrary lib) throws IOException {\n  for (  JavacAnnotationHandler handler : SpiLoadUtil.findServices(JavacAnnotationHandler.class,JavacAnnotationHandler.class.getClassLoader())) {\n    Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),JavacAnnotationHandler.class);\n    AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n    String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n    if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n      lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n    }\n    lib.typeLibrary.addType(container.annotationClass.getName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 113,
        "endColumnNumber" : 87
      },
      "nodeContext" : "lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "lombok.javac.HandlerLibrary"
  }, {
    "nodeContext" : "lib",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 115,
      "startColumnNumber" : 3,
      "endLineNumber" : 115,
      "endColumnNumber" : 6
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 115,
        "startColumnNumber" : 3,
        "endLineNumber" : 115,
        "endColumnNumber" : 18
      },
      "nodeContext" : "lib.typeLibrary",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 115,
        "startColumnNumber" : 3,
        "endLineNumber" : 115,
        "endColumnNumber" : 63
      },
      "nodeContext" : "lib.typeLibrary.addType(container.annotationClass.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 115,
        "startColumnNumber" : 3,
        "endLineNumber" : 115,
        "endColumnNumber" : 64
      },
      "nodeContext" : "lib.typeLibrary.addType(container.annotationClass.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 566,
        "startLineNumber" : 107,
        "startColumnNumber" : 143,
        "endLineNumber" : 116,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),JavacAnnotationHandler.class);\n  AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n  String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n  if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n    lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n  }\n  lib.typeLibrary.addType(container.annotationClass.getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 707,
        "startLineNumber" : 107,
        "startColumnNumber" : 2,
        "endLineNumber" : 116,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (JavacAnnotationHandler handler : SpiLoadUtil.findServices(JavacAnnotationHandler.class,JavacAnnotationHandler.class.getClassLoader())) {\n  Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),JavacAnnotationHandler.class);\n  AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n  String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n  if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n    lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n  }\n  lib.typeLibrary.addType(container.annotationClass.getName());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 90,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 827,
        "startLineNumber" : 105,
        "startColumnNumber" : 83,
        "endLineNumber" : 117,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  for (  JavacAnnotationHandler handler : SpiLoadUtil.findServices(JavacAnnotationHandler.class,JavacAnnotationHandler.class.getClassLoader())) {\n    Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),JavacAnnotationHandler.class);\n    AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n    String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n    if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n      lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n    }\n    lib.typeLibrary.addType(container.annotationClass.getName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1041,
        "startLineNumber" : 103,
        "startColumnNumber" : 1,
        "endLineNumber" : 117,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Uses SPI Discovery to find implementations of  {@link JavacAnnotationHandler}. \n */\n@SuppressWarnings({\"rawtypes\",\"unchecked\"}) private static void loadAnnotationHandlers(HandlerLibrary lib) throws IOException {\n  for (  JavacAnnotationHandler handler : SpiLoadUtil.findServices(JavacAnnotationHandler.class,JavacAnnotationHandler.class.getClassLoader())) {\n    Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),JavacAnnotationHandler.class);\n    AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n    String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n    if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n      lib.javacWarning(\"Duplicate handlers for annotation type: \" + annotationClassName);\n    }\n    lib.typeLibrary.addType(container.annotationClass.getName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 115,
        "startColumnNumber" : 3,
        "endLineNumber" : 115,
        "endColumnNumber" : 64
      },
      "nodeContext" : "lib.typeLibrary.addType(container.annotationClass.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "lombok.javac.HandlerLibrary"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 112,
    "startColumnNumber" : 7,
    "endLineNumber" : 112,
    "endColumnNumber" : 10
  }, {
    "charLength" : 3,
    "startLineNumber" : 113,
    "startColumnNumber" : 4,
    "endLineNumber" : 113,
    "endColumnNumber" : 7
  }, {
    "charLength" : 3,
    "startLineNumber" : 115,
    "startColumnNumber" : 3,
    "endLineNumber" : 115,
    "endColumnNumber" : 6
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}