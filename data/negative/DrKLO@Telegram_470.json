{
  "id" : 470,
  "expression" : "touchSlop",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/DialogOrContactPickerActivity.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "touchSlop",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 357,
      "startColumnNumber" : 48,
      "endLineNumber" : 357,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 357,
        "startColumnNumber" : 32,
        "endLineNumber" : 357,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Math.abs(dx) >= touchSlop",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 357,
        "startColumnNumber" : 32,
        "endLineNumber" : 357,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Math.abs(dx) >= touchSlop && Math.abs(dx) > dy",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 357,
        "startColumnNumber" : 28,
        "endLineNumber" : 359,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (Math.abs(dx) >= touchSlop && Math.abs(dx) > dy) {\n  prepareForMoving(ev,dx < 0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 291,
        "startLineNumber" : 355,
        "startColumnNumber" : 68,
        "endLineNumber" : 360,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  float touchSlop=AndroidUtilities.getPixelsInCM(0.3f,true);\n  if (Math.abs(dx) >= touchSlop && Math.abs(dx) > dy) {\n    prepareForMoving(ev,dx < 0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 355,
        "startColumnNumber" : 24,
        "endLineNumber" : 369,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (maybeStartTracking && !startedTracking) {\n  float touchSlop=AndroidUtilities.getPixelsInCM(0.3f,true);\n  if (Math.abs(dx) >= touchSlop && Math.abs(dx) > dy) {\n    prepareForMoving(ev,dx < 0);\n  }\n}\n else if (startedTracking) {\n  viewPages[0].setTranslationX(dx);\n  if (animatingForward) {\n    viewPages[1].setTranslationX(viewPages[0].getMeasuredWidth() + dx);\n  }\n else {\n    viewPages[1].setTranslationX(dx - viewPages[0].getMeasuredWidth());\n  }\n  float scrollProgress=Math.abs(dx) / (float)viewPages[0].getMeasuredWidth();\n  scrollSlidingTextTabStrip.selectTabWithId(viewPages[1].selectedType,scrollProgress);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 103,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1855,
        "startLineNumber" : 343,
        "startColumnNumber" : 138,
        "endLineNumber" : 370,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int dx=(int)(ev.getX() - startedTrackingX);\n  int dy=Math.abs((int)ev.getY() - startedTrackingY);\n  if (startedTracking && (animatingForward && dx > 0 || !animatingForward && dx < 0)) {\n    if (!prepareForMoving(ev,dx < 0)) {\n      maybeStartTracking=true;\n      startedTracking=false;\n      viewPages[0].setTranslationX(0);\n      viewPages[1].setTranslationX(animatingForward ? viewPages[0].getMeasuredWidth() : -viewPages[0].getMeasuredWidth());\n      scrollSlidingTextTabStrip.selectTabWithId(viewPages[1].selectedType,0);\n    }\n  }\n  if (maybeStartTracking && !startedTracking) {\n    float touchSlop=AndroidUtilities.getPixelsInCM(0.3f,true);\n    if (Math.abs(dx) >= touchSlop && Math.abs(dx) > dy) {\n      prepareForMoving(ev,dx < 0);\n    }\n  }\n else   if (startedTracking) {\n    viewPages[0].setTranslationX(dx);\n    if (animatingForward) {\n      viewPages[1].setTranslationX(viewPages[0].getMeasuredWidth() + dx);\n    }\n else {\n      viewPages[1].setTranslationX(dx - viewPages[0].getMeasuredWidth());\n    }\n    float scrollProgress=Math.abs(dx) / (float)viewPages[0].getMeasuredWidth();\n    scrollSlidingTextTabStrip.selectTabWithId(viewPages[1].selectedType,scrollProgress);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 200,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 8348,
        "startLineNumber" : 343,
        "startColumnNumber" : 27,
        "endLineNumber" : 469,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (ev != null && ev.getAction() == MotionEvent.ACTION_MOVE && ev.getPointerId(0) == startedTrackingPointerId) {\n  int dx=(int)(ev.getX() - startedTrackingX);\n  int dy=Math.abs((int)ev.getY() - startedTrackingY);\n  if (startedTracking && (animatingForward && dx > 0 || !animatingForward && dx < 0)) {\n    if (!prepareForMoving(ev,dx < 0)) {\n      maybeStartTracking=true;\n      startedTracking=false;\n      viewPages[0].setTranslationX(0);\n      viewPages[1].setTranslationX(animatingForward ? viewPages[0].getMeasuredWidth() : -viewPages[0].getMeasuredWidth());\n      scrollSlidingTextTabStrip.selectTabWithId(viewPages[1].selectedType,0);\n    }\n  }\n  if (maybeStartTracking && !startedTracking) {\n    float touchSlop=AndroidUtilities.getPixelsInCM(0.3f,true);\n    if (Math.abs(dx) >= touchSlop && Math.abs(dx) > dy) {\n      prepareForMoving(ev,dx < 0);\n    }\n  }\n else   if (startedTracking) {\n    viewPages[0].setTranslationX(dx);\n    if (animatingForward) {\n      viewPages[1].setTranslationX(viewPages[0].getMeasuredWidth() + dx);\n    }\n else {\n      viewPages[1].setTranslationX(dx - viewPages[0].getMeasuredWidth());\n    }\n    float scrollProgress=Math.abs(dx) / (float)viewPages[0].getMeasuredWidth();\n    scrollSlidingTextTabStrip.selectTabWithId(viewPages[1].selectedType,scrollProgress);\n  }\n}\n else if (ev == null || ev.getPointerId(0) == startedTrackingPointerId && (ev.getAction() == MotionEvent.ACTION_CANCEL || ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_POINTER_UP)) {\n  velocityTracker.computeCurrentVelocity(1000,maximumVelocity);\n  float velX;\n  float velY;\n  if (ev != null && ev.getAction() != MotionEvent.ACTION_CANCEL) {\n    velX=velocityTracker.getXVelocity();\n    velY=velocityTracker.getYVelocity();\n    if (!startedTracking) {\n      if (Math.abs(velX) >= 3000 && Math.abs(velX) > Math.abs(velY)) {\n        prepareForMoving(ev,velX < 0);\n      }\n    }\n  }\n else {\n    velX=0;\n    velY=0;\n  }\n  if (startedTracking) {\n    float x=viewPages[0].getX();\n    tabsAnimation=new AnimatorSet();\n    backAnimation=Math.abs(x) < viewPages[0].getMeasuredWidth() / 3.0f && (Math.abs(velX) < 3500 || Math.abs(velX) < Math.abs(velY));\n    float distToMove;\n    float dx;\n    if (backAnimation) {\n      dx=Math.abs(x);\n      if (animatingForward) {\n        tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,0),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,viewPages[1].getMeasuredWidth()));\n      }\n else {\n        tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,0),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,-viewPages[1].getMeasuredWidth()));\n      }\n    }\n else {\n      dx=viewPages[0].getMeasuredWidth() - Math.abs(x);\n      if (animatingForward) {\n        tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,-viewPages[0].getMeasuredWidth()),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,0));\n      }\n else {\n        tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,viewPages[0].getMeasuredWidth()),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,0));\n      }\n    }\n    tabsAnimation.setInterpolator(interpolator);\n    int width=getMeasuredWidth();\n    int halfWidth=width / 2;\n    float distanceRatio=Math.min(1.0f,1.0f * dx / (float)width);\n    float distance=(float)halfWidth + (float)halfWidth * AndroidUtilities.distanceInfluenceForSnapDuration(distanceRatio);\n    velX=Math.abs(velX);\n    int duration;\n    if (velX > 0) {\n      duration=4 * Math.round(1000.0f * Math.abs(distance / velX));\n    }\n else {\n      float pageDelta=dx / getMeasuredWidth();\n      duration=(int)((pageDelta + 1.0f) * 100.0f);\n    }\n    duration=Math.max(150,Math.min(duration,600));\n    tabsAnimation.setDuration(duration);\n    tabsAnimation.addListener(new AnimatorListenerAdapter(){\n      @Override public void onAnimationEnd(      Animator animator){\n        tabsAnimation=null;\n        if (backAnimation) {\n          viewPages[1].setVisibility(View.GONE);\n        }\n else {\n          ViewPage tempPage=viewPages[0];\n          viewPages[0]=viewPages[1];\n          viewPages[1]=tempPage;\n          viewPages[1].setVisibility(View.GONE);\n          swipeBackEnabled=viewPages[0].selectedType == scrollSlidingTextTabStrip.getFirstTabId();\n          scrollSlidingTextTabStrip.selectTabWithId(viewPages[0].selectedType,1.0f);\n        }\n        tabsAnimationInProgress=false;\n        maybeStartTracking=false;\n        startedTracking=false;\n        actionBar.setEnabled(true);\n        scrollSlidingTextTabStrip.setEnabled(true);\n      }\n    }\n);\n    tabsAnimation.start();\n    tabsAnimationInProgress=true;\n    startedTracking=false;\n  }\n else {\n    maybeStartTracking=false;\n    actionBar.setEnabled(true);\n    scrollSlidingTextTabStrip.setEnabled(true);\n  }\n  if (velocityTracker != null) {\n    velocityTracker.recycle();\n    velocityTracker=null;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 808,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8772,
        "startLineNumber" : 337,
        "startColumnNumber" : 20,
        "endLineNumber" : 469,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (ev != null && ev.getAction() == MotionEvent.ACTION_DOWN && !startedTracking && !maybeStartTracking) {\n  startedTrackingPointerId=ev.getPointerId(0);\n  maybeStartTracking=true;\n  startedTrackingX=(int)ev.getX();\n  startedTrackingY=(int)ev.getY();\n  velocityTracker.clear();\n}\n else if (ev != null && ev.getAction() == MotionEvent.ACTION_MOVE && ev.getPointerId(0) == startedTrackingPointerId) {\n  int dx=(int)(ev.getX() - startedTrackingX);\n  int dy=Math.abs((int)ev.getY() - startedTrackingY);\n  if (startedTracking && (animatingForward && dx > 0 || !animatingForward && dx < 0)) {\n    if (!prepareForMoving(ev,dx < 0)) {\n      maybeStartTracking=true;\n      startedTracking=false;\n      viewPages[0].setTranslationX(0);\n      viewPages[1].setTranslationX(animatingForward ? viewPages[0].getMeasuredWidth() : -viewPages[0].getMeasuredWidth());\n      scrollSlidingTextTabStrip.selectTabWithId(viewPages[1].selectedType,0);\n    }\n  }\n  if (maybeStartTracking && !startedTracking) {\n    float touchSlop=AndroidUtilities.getPixelsInCM(0.3f,true);\n    if (Math.abs(dx) >= touchSlop && Math.abs(dx) > dy) {\n      prepareForMoving(ev,dx < 0);\n    }\n  }\n else   if (startedTracking) {\n    viewPages[0].setTranslationX(dx);\n    if (animatingForward) {\n      viewPages[1].setTranslationX(viewPages[0].getMeasuredWidth() + dx);\n    }\n else {\n      viewPages[1].setTranslationX(dx - viewPages[0].getMeasuredWidth());\n    }\n    float scrollProgress=Math.abs(dx) / (float)viewPages[0].getMeasuredWidth();\n    scrollSlidingTextTabStrip.selectTabWithId(viewPages[1].selectedType,scrollProgress);\n  }\n}\n else if (ev == null || ev.getPointerId(0) == startedTrackingPointerId && (ev.getAction() == MotionEvent.ACTION_CANCEL || ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_POINTER_UP)) {\n  velocityTracker.computeCurrentVelocity(1000,maximumVelocity);\n  float velX;\n  float velY;\n  if (ev != null && ev.getAction() != MotionEvent.ACTION_CANCEL) {\n    velX=velocityTracker.getXVelocity();\n    velY=velocityTracker.getYVelocity();\n    if (!startedTracking) {\n      if (Math.abs(velX) >= 3000 && Math.abs(velX) > Math.abs(velY)) {\n        prepareForMoving(ev,velX < 0);\n      }\n    }\n  }\n else {\n    velX=0;\n    velY=0;\n  }\n  if (startedTracking) {\n    float x=viewPages[0].getX();\n    tabsAnimation=new AnimatorSet();\n    backAnimation=Math.abs(x) < viewPages[0].getMeasuredWidth() / 3.0f && (Math.abs(velX) < 3500 || Math.abs(velX) < Math.abs(velY));\n    float distToMove;\n    float dx;\n    if (backAnimation) {\n      dx=Math.abs(x);\n      if (animatingForward) {\n        tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,0),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,viewPages[1].getMeasuredWidth()));\n      }\n else {\n        tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,0),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,-viewPages[1].getMeasuredWidth()));\n      }\n    }\n else {\n      dx=viewPages[0].getMeasuredWidth() - Math.abs(x);\n      if (animatingForward) {\n        tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,-viewPages[0].getMeasuredWidth()),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,0));\n      }\n else {\n        tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,viewPages[0].getMeasuredWidth()),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,0));\n      }\n    }\n    tabsAnimation.setInterpolator(interpolator);\n    int width=getMeasuredWidth();\n    int halfWidth=width / 2;\n    float distanceRatio=Math.min(1.0f,1.0f * dx / (float)width);\n    float distance=(float)halfWidth + (float)halfWidth * AndroidUtilities.distanceInfluenceForSnapDuration(distanceRatio);\n    velX=Math.abs(velX);\n    int duration;\n    if (velX > 0) {\n      duration=4 * Math.round(1000.0f * Math.abs(distance / velX));\n    }\n else {\n      float pageDelta=dx / getMeasuredWidth();\n      duration=(int)((pageDelta + 1.0f) * 100.0f);\n    }\n    duration=Math.max(150,Math.min(duration,600));\n    tabsAnimation.setDuration(duration);\n    tabsAnimation.addListener(new AnimatorListenerAdapter(){\n      @Override public void onAnimationEnd(      Animator animator){\n        tabsAnimation=null;\n        if (backAnimation) {\n          viewPages[1].setVisibility(View.GONE);\n        }\n else {\n          ViewPage tempPage=viewPages[0];\n          viewPages[0]=viewPages[1];\n          viewPages[1]=tempPage;\n          viewPages[1].setVisibility(View.GONE);\n          swipeBackEnabled=viewPages[0].selectedType == scrollSlidingTextTabStrip.getFirstTabId();\n          scrollSlidingTextTabStrip.selectTabWithId(viewPages[0].selectedType,1.0f);\n        }\n        tabsAnimationInProgress=false;\n        maybeStartTracking=false;\n        startedTracking=false;\n        actionBar.setEnabled(true);\n        scrollSlidingTextTabStrip.setEnabled(true);\n      }\n    }\n);\n    tabsAnimation.start();\n    tabsAnimationInProgress=true;\n    startedTracking=false;\n  }\n else {\n    maybeStartTracking=false;\n    actionBar.setEnabled(true);\n    scrollSlidingTextTabStrip.setEnabled(true);\n  }\n  if (velocityTracker != null) {\n    velocityTracker.recycle();\n    velocityTracker=null;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 858,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 9126,
        "startLineNumber" : 330,
        "startColumnNumber" : 97,
        "endLineNumber" : 471,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (ev != null) {\n    if (velocityTracker == null) {\n      velocityTracker=VelocityTracker.obtain();\n    }\n    velocityTracker.addMovement(ev);\n  }\n  if (ev != null && ev.getAction() == MotionEvent.ACTION_DOWN && !startedTracking && !maybeStartTracking) {\n    startedTrackingPointerId=ev.getPointerId(0);\n    maybeStartTracking=true;\n    startedTrackingX=(int)ev.getX();\n    startedTrackingY=(int)ev.getY();\n    velocityTracker.clear();\n  }\n else   if (ev != null && ev.getAction() == MotionEvent.ACTION_MOVE && ev.getPointerId(0) == startedTrackingPointerId) {\n    int dx=(int)(ev.getX() - startedTrackingX);\n    int dy=Math.abs((int)ev.getY() - startedTrackingY);\n    if (startedTracking && (animatingForward && dx > 0 || !animatingForward && dx < 0)) {\n      if (!prepareForMoving(ev,dx < 0)) {\n        maybeStartTracking=true;\n        startedTracking=false;\n        viewPages[0].setTranslationX(0);\n        viewPages[1].setTranslationX(animatingForward ? viewPages[0].getMeasuredWidth() : -viewPages[0].getMeasuredWidth());\n        scrollSlidingTextTabStrip.selectTabWithId(viewPages[1].selectedType,0);\n      }\n    }\n    if (maybeStartTracking && !startedTracking) {\n      float touchSlop=AndroidUtilities.getPixelsInCM(0.3f,true);\n      if (Math.abs(dx) >= touchSlop && Math.abs(dx) > dy) {\n        prepareForMoving(ev,dx < 0);\n      }\n    }\n else     if (startedTracking) {\n      viewPages[0].setTranslationX(dx);\n      if (animatingForward) {\n        viewPages[1].setTranslationX(viewPages[0].getMeasuredWidth() + dx);\n      }\n else {\n        viewPages[1].setTranslationX(dx - viewPages[0].getMeasuredWidth());\n      }\n      float scrollProgress=Math.abs(dx) / (float)viewPages[0].getMeasuredWidth();\n      scrollSlidingTextTabStrip.selectTabWithId(viewPages[1].selectedType,scrollProgress);\n    }\n  }\n else   if (ev == null || ev.getPointerId(0) == startedTrackingPointerId && (ev.getAction() == MotionEvent.ACTION_CANCEL || ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_POINTER_UP)) {\n    velocityTracker.computeCurrentVelocity(1000,maximumVelocity);\n    float velX;\n    float velY;\n    if (ev != null && ev.getAction() != MotionEvent.ACTION_CANCEL) {\n      velX=velocityTracker.getXVelocity();\n      velY=velocityTracker.getYVelocity();\n      if (!startedTracking) {\n        if (Math.abs(velX) >= 3000 && Math.abs(velX) > Math.abs(velY)) {\n          prepareForMoving(ev,velX < 0);\n        }\n      }\n    }\n else {\n      velX=0;\n      velY=0;\n    }\n    if (startedTracking) {\n      float x=viewPages[0].getX();\n      tabsAnimation=new AnimatorSet();\n      backAnimation=Math.abs(x) < viewPages[0].getMeasuredWidth() / 3.0f && (Math.abs(velX) < 3500 || Math.abs(velX) < Math.abs(velY));\n      float distToMove;\n      float dx;\n      if (backAnimation) {\n        dx=Math.abs(x);\n        if (animatingForward) {\n          tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,0),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,viewPages[1].getMeasuredWidth()));\n        }\n else {\n          tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,0),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,-viewPages[1].getMeasuredWidth()));\n        }\n      }\n else {\n        dx=viewPages[0].getMeasuredWidth() - Math.abs(x);\n        if (animatingForward) {\n          tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,-viewPages[0].getMeasuredWidth()),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,0));\n        }\n else {\n          tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,viewPages[0].getMeasuredWidth()),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,0));\n        }\n      }\n      tabsAnimation.setInterpolator(interpolator);\n      int width=getMeasuredWidth();\n      int halfWidth=width / 2;\n      float distanceRatio=Math.min(1.0f,1.0f * dx / (float)width);\n      float distance=(float)halfWidth + (float)halfWidth * AndroidUtilities.distanceInfluenceForSnapDuration(distanceRatio);\n      velX=Math.abs(velX);\n      int duration;\n      if (velX > 0) {\n        duration=4 * Math.round(1000.0f * Math.abs(distance / velX));\n      }\n else {\n        float pageDelta=dx / getMeasuredWidth();\n        duration=(int)((pageDelta + 1.0f) * 100.0f);\n      }\n      duration=Math.max(150,Math.min(duration,600));\n      tabsAnimation.setDuration(duration);\n      tabsAnimation.addListener(new AnimatorListenerAdapter(){\n        @Override public void onAnimationEnd(        Animator animator){\n          tabsAnimation=null;\n          if (backAnimation) {\n            viewPages[1].setVisibility(View.GONE);\n          }\n else {\n            ViewPage tempPage=viewPages[0];\n            viewPages[0]=viewPages[1];\n            viewPages[1]=tempPage;\n            viewPages[1].setVisibility(View.GONE);\n            swipeBackEnabled=viewPages[0].selectedType == scrollSlidingTextTabStrip.getFirstTabId();\n            scrollSlidingTextTabStrip.selectTabWithId(viewPages[0].selectedType,1.0f);\n          }\n          tabsAnimationInProgress=false;\n          maybeStartTracking=false;\n          startedTracking=false;\n          actionBar.setEnabled(true);\n          scrollSlidingTextTabStrip.setEnabled(true);\n        }\n      }\n);\n      tabsAnimation.start();\n      tabsAnimationInProgress=true;\n      startedTracking=false;\n    }\n else {\n      maybeStartTracking=false;\n      actionBar.setEnabled(true);\n      scrollSlidingTextTabStrip.setEnabled(true);\n    }\n    if (velocityTracker != null) {\n      velocityTracker.recycle();\n      velocityTracker=null;\n    }\n  }\n  return startedTracking;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 882,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9207,
        "startLineNumber" : 330,
        "startColumnNumber" : 16,
        "endLineNumber" : 471,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!parentLayout.checkTransitionAnimation() && !checkTabsAnimationInProgress()) {\n  if (ev != null) {\n    if (velocityTracker == null) {\n      velocityTracker=VelocityTracker.obtain();\n    }\n    velocityTracker.addMovement(ev);\n  }\n  if (ev != null && ev.getAction() == MotionEvent.ACTION_DOWN && !startedTracking && !maybeStartTracking) {\n    startedTrackingPointerId=ev.getPointerId(0);\n    maybeStartTracking=true;\n    startedTrackingX=(int)ev.getX();\n    startedTrackingY=(int)ev.getY();\n    velocityTracker.clear();\n  }\n else   if (ev != null && ev.getAction() == MotionEvent.ACTION_MOVE && ev.getPointerId(0) == startedTrackingPointerId) {\n    int dx=(int)(ev.getX() - startedTrackingX);\n    int dy=Math.abs((int)ev.getY() - startedTrackingY);\n    if (startedTracking && (animatingForward && dx > 0 || !animatingForward && dx < 0)) {\n      if (!prepareForMoving(ev,dx < 0)) {\n        maybeStartTracking=true;\n        startedTracking=false;\n        viewPages[0].setTranslationX(0);\n        viewPages[1].setTranslationX(animatingForward ? viewPages[0].getMeasuredWidth() : -viewPages[0].getMeasuredWidth());\n        scrollSlidingTextTabStrip.selectTabWithId(viewPages[1].selectedType,0);\n      }\n    }\n    if (maybeStartTracking && !startedTracking) {\n      float touchSlop=AndroidUtilities.getPixelsInCM(0.3f,true);\n      if (Math.abs(dx) >= touchSlop && Math.abs(dx) > dy) {\n        prepareForMoving(ev,dx < 0);\n      }\n    }\n else     if (startedTracking) {\n      viewPages[0].setTranslationX(dx);\n      if (animatingForward) {\n        viewPages[1].setTranslationX(viewPages[0].getMeasuredWidth() + dx);\n      }\n else {\n        viewPages[1].setTranslationX(dx - viewPages[0].getMeasuredWidth());\n      }\n      float scrollProgress=Math.abs(dx) / (float)viewPages[0].getMeasuredWidth();\n      scrollSlidingTextTabStrip.selectTabWithId(viewPages[1].selectedType,scrollProgress);\n    }\n  }\n else   if (ev == null || ev.getPointerId(0) == startedTrackingPointerId && (ev.getAction() == MotionEvent.ACTION_CANCEL || ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_POINTER_UP)) {\n    velocityTracker.computeCurrentVelocity(1000,maximumVelocity);\n    float velX;\n    float velY;\n    if (ev != null && ev.getAction() != MotionEvent.ACTION_CANCEL) {\n      velX=velocityTracker.getXVelocity();\n      velY=velocityTracker.getYVelocity();\n      if (!startedTracking) {\n        if (Math.abs(velX) >= 3000 && Math.abs(velX) > Math.abs(velY)) {\n          prepareForMoving(ev,velX < 0);\n        }\n      }\n    }\n else {\n      velX=0;\n      velY=0;\n    }\n    if (startedTracking) {\n      float x=viewPages[0].getX();\n      tabsAnimation=new AnimatorSet();\n      backAnimation=Math.abs(x) < viewPages[0].getMeasuredWidth() / 3.0f && (Math.abs(velX) < 3500 || Math.abs(velX) < Math.abs(velY));\n      float distToMove;\n      float dx;\n      if (backAnimation) {\n        dx=Math.abs(x);\n        if (animatingForward) {\n          tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,0),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,viewPages[1].getMeasuredWidth()));\n        }\n else {\n          tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,0),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,-viewPages[1].getMeasuredWidth()));\n        }\n      }\n else {\n        dx=viewPages[0].getMeasuredWidth() - Math.abs(x);\n        if (animatingForward) {\n          tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,-viewPages[0].getMeasuredWidth()),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,0));\n        }\n else {\n          tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,viewPages[0].getMeasuredWidth()),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,0));\n        }\n      }\n      tabsAnimation.setInterpolator(interpolator);\n      int width=getMeasuredWidth();\n      int halfWidth=width / 2;\n      float distanceRatio=Math.min(1.0f,1.0f * dx / (float)width);\n      float distance=(float)halfWidth + (float)halfWidth * AndroidUtilities.distanceInfluenceForSnapDuration(distanceRatio);\n      velX=Math.abs(velX);\n      int duration;\n      if (velX > 0) {\n        duration=4 * Math.round(1000.0f * Math.abs(distance / velX));\n      }\n else {\n        float pageDelta=dx / getMeasuredWidth();\n        duration=(int)((pageDelta + 1.0f) * 100.0f);\n      }\n      duration=Math.max(150,Math.min(duration,600));\n      tabsAnimation.setDuration(duration);\n      tabsAnimation.addListener(new AnimatorListenerAdapter(){\n        @Override public void onAnimationEnd(        Animator animator){\n          tabsAnimation=null;\n          if (backAnimation) {\n            viewPages[1].setVisibility(View.GONE);\n          }\n else {\n            ViewPage tempPage=viewPages[0];\n            viewPages[0]=viewPages[1];\n            viewPages[1]=tempPage;\n            viewPages[1].setVisibility(View.GONE);\n            swipeBackEnabled=viewPages[0].selectedType == scrollSlidingTextTabStrip.getFirstTabId();\n            scrollSlidingTextTabStrip.selectTabWithId(viewPages[0].selectedType,1.0f);\n          }\n          tabsAnimationInProgress=false;\n          maybeStartTracking=false;\n          startedTracking=false;\n          actionBar.setEnabled(true);\n          scrollSlidingTextTabStrip.setEnabled(true);\n        }\n      }\n);\n      tabsAnimation.start();\n      tabsAnimationInProgress=true;\n      startedTracking=false;\n    }\n else {\n      maybeStartTracking=false;\n      actionBar.setEnabled(true);\n      scrollSlidingTextTabStrip.setEnabled(true);\n    }\n    if (velocityTracker != null) {\n      velocityTracker.recycle();\n      velocityTracker=null;\n    }\n  }\n  return startedTracking;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 891,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9269,
        "startLineNumber" : 329,
        "startColumnNumber" : 56,
        "endLineNumber" : 473,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!parentLayout.checkTransitionAnimation() && !checkTabsAnimationInProgress()) {\n    if (ev != null) {\n      if (velocityTracker == null) {\n        velocityTracker=VelocityTracker.obtain();\n      }\n      velocityTracker.addMovement(ev);\n    }\n    if (ev != null && ev.getAction() == MotionEvent.ACTION_DOWN && !startedTracking && !maybeStartTracking) {\n      startedTrackingPointerId=ev.getPointerId(0);\n      maybeStartTracking=true;\n      startedTrackingX=(int)ev.getX();\n      startedTrackingY=(int)ev.getY();\n      velocityTracker.clear();\n    }\n else     if (ev != null && ev.getAction() == MotionEvent.ACTION_MOVE && ev.getPointerId(0) == startedTrackingPointerId) {\n      int dx=(int)(ev.getX() - startedTrackingX);\n      int dy=Math.abs((int)ev.getY() - startedTrackingY);\n      if (startedTracking && (animatingForward && dx > 0 || !animatingForward && dx < 0)) {\n        if (!prepareForMoving(ev,dx < 0)) {\n          maybeStartTracking=true;\n          startedTracking=false;\n          viewPages[0].setTranslationX(0);\n          viewPages[1].setTranslationX(animatingForward ? viewPages[0].getMeasuredWidth() : -viewPages[0].getMeasuredWidth());\n          scrollSlidingTextTabStrip.selectTabWithId(viewPages[1].selectedType,0);\n        }\n      }\n      if (maybeStartTracking && !startedTracking) {\n        float touchSlop=AndroidUtilities.getPixelsInCM(0.3f,true);\n        if (Math.abs(dx) >= touchSlop && Math.abs(dx) > dy) {\n          prepareForMoving(ev,dx < 0);\n        }\n      }\n else       if (startedTracking) {\n        viewPages[0].setTranslationX(dx);\n        if (animatingForward) {\n          viewPages[1].setTranslationX(viewPages[0].getMeasuredWidth() + dx);\n        }\n else {\n          viewPages[1].setTranslationX(dx - viewPages[0].getMeasuredWidth());\n        }\n        float scrollProgress=Math.abs(dx) / (float)viewPages[0].getMeasuredWidth();\n        scrollSlidingTextTabStrip.selectTabWithId(viewPages[1].selectedType,scrollProgress);\n      }\n    }\n else     if (ev == null || ev.getPointerId(0) == startedTrackingPointerId && (ev.getAction() == MotionEvent.ACTION_CANCEL || ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_POINTER_UP)) {\n      velocityTracker.computeCurrentVelocity(1000,maximumVelocity);\n      float velX;\n      float velY;\n      if (ev != null && ev.getAction() != MotionEvent.ACTION_CANCEL) {\n        velX=velocityTracker.getXVelocity();\n        velY=velocityTracker.getYVelocity();\n        if (!startedTracking) {\n          if (Math.abs(velX) >= 3000 && Math.abs(velX) > Math.abs(velY)) {\n            prepareForMoving(ev,velX < 0);\n          }\n        }\n      }\n else {\n        velX=0;\n        velY=0;\n      }\n      if (startedTracking) {\n        float x=viewPages[0].getX();\n        tabsAnimation=new AnimatorSet();\n        backAnimation=Math.abs(x) < viewPages[0].getMeasuredWidth() / 3.0f && (Math.abs(velX) < 3500 || Math.abs(velX) < Math.abs(velY));\n        float distToMove;\n        float dx;\n        if (backAnimation) {\n          dx=Math.abs(x);\n          if (animatingForward) {\n            tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,0),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,viewPages[1].getMeasuredWidth()));\n          }\n else {\n            tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,0),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,-viewPages[1].getMeasuredWidth()));\n          }\n        }\n else {\n          dx=viewPages[0].getMeasuredWidth() - Math.abs(x);\n          if (animatingForward) {\n            tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,-viewPages[0].getMeasuredWidth()),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,0));\n          }\n else {\n            tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,viewPages[0].getMeasuredWidth()),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,0));\n          }\n        }\n        tabsAnimation.setInterpolator(interpolator);\n        int width=getMeasuredWidth();\n        int halfWidth=width / 2;\n        float distanceRatio=Math.min(1.0f,1.0f * dx / (float)width);\n        float distance=(float)halfWidth + (float)halfWidth * AndroidUtilities.distanceInfluenceForSnapDuration(distanceRatio);\n        velX=Math.abs(velX);\n        int duration;\n        if (velX > 0) {\n          duration=4 * Math.round(1000.0f * Math.abs(distance / velX));\n        }\n else {\n          float pageDelta=dx / getMeasuredWidth();\n          duration=(int)((pageDelta + 1.0f) * 100.0f);\n        }\n        duration=Math.max(150,Math.min(duration,600));\n        tabsAnimation.setDuration(duration);\n        tabsAnimation.addListener(new AnimatorListenerAdapter(){\n          @Override public void onAnimationEnd(          Animator animator){\n            tabsAnimation=null;\n            if (backAnimation) {\n              viewPages[1].setVisibility(View.GONE);\n            }\n else {\n              ViewPage tempPage=viewPages[0];\n              viewPages[0]=viewPages[1];\n              viewPages[1]=tempPage;\n              viewPages[1].setVisibility(View.GONE);\n              swipeBackEnabled=viewPages[0].selectedType == scrollSlidingTextTabStrip.getFirstTabId();\n              scrollSlidingTextTabStrip.selectTabWithId(viewPages[0].selectedType,1.0f);\n            }\n            tabsAnimationInProgress=false;\n            maybeStartTracking=false;\n            startedTracking=false;\n            actionBar.setEnabled(true);\n            scrollSlidingTextTabStrip.setEnabled(true);\n          }\n        }\n);\n        tabsAnimation.start();\n        tabsAnimationInProgress=true;\n        startedTracking=false;\n      }\n else {\n        maybeStartTracking=false;\n        actionBar.setEnabled(true);\n        scrollSlidingTextTabStrip.setEnabled(true);\n      }\n      if (velocityTracker != null) {\n        velocityTracker.recycle();\n        velocityTracker=null;\n      }\n    }\n    return startedTracking;\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 894,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9335,
        "startLineNumber" : 328,
        "startColumnNumber" : 12,
        "endLineNumber" : 473,
        "endColumnNumber" : 13
      },
      "nodeContext" : "@Override public boolean onTouchEvent(MotionEvent ev){\n  if (!parentLayout.checkTransitionAnimation() && !checkTabsAnimationInProgress()) {\n    if (ev != null) {\n      if (velocityTracker == null) {\n        velocityTracker=VelocityTracker.obtain();\n      }\n      velocityTracker.addMovement(ev);\n    }\n    if (ev != null && ev.getAction() == MotionEvent.ACTION_DOWN && !startedTracking && !maybeStartTracking) {\n      startedTrackingPointerId=ev.getPointerId(0);\n      maybeStartTracking=true;\n      startedTrackingX=(int)ev.getX();\n      startedTrackingY=(int)ev.getY();\n      velocityTracker.clear();\n    }\n else     if (ev != null && ev.getAction() == MotionEvent.ACTION_MOVE && ev.getPointerId(0) == startedTrackingPointerId) {\n      int dx=(int)(ev.getX() - startedTrackingX);\n      int dy=Math.abs((int)ev.getY() - startedTrackingY);\n      if (startedTracking && (animatingForward && dx > 0 || !animatingForward && dx < 0)) {\n        if (!prepareForMoving(ev,dx < 0)) {\n          maybeStartTracking=true;\n          startedTracking=false;\n          viewPages[0].setTranslationX(0);\n          viewPages[1].setTranslationX(animatingForward ? viewPages[0].getMeasuredWidth() : -viewPages[0].getMeasuredWidth());\n          scrollSlidingTextTabStrip.selectTabWithId(viewPages[1].selectedType,0);\n        }\n      }\n      if (maybeStartTracking && !startedTracking) {\n        float touchSlop=AndroidUtilities.getPixelsInCM(0.3f,true);\n        if (Math.abs(dx) >= touchSlop && Math.abs(dx) > dy) {\n          prepareForMoving(ev,dx < 0);\n        }\n      }\n else       if (startedTracking) {\n        viewPages[0].setTranslationX(dx);\n        if (animatingForward) {\n          viewPages[1].setTranslationX(viewPages[0].getMeasuredWidth() + dx);\n        }\n else {\n          viewPages[1].setTranslationX(dx - viewPages[0].getMeasuredWidth());\n        }\n        float scrollProgress=Math.abs(dx) / (float)viewPages[0].getMeasuredWidth();\n        scrollSlidingTextTabStrip.selectTabWithId(viewPages[1].selectedType,scrollProgress);\n      }\n    }\n else     if (ev == null || ev.getPointerId(0) == startedTrackingPointerId && (ev.getAction() == MotionEvent.ACTION_CANCEL || ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_POINTER_UP)) {\n      velocityTracker.computeCurrentVelocity(1000,maximumVelocity);\n      float velX;\n      float velY;\n      if (ev != null && ev.getAction() != MotionEvent.ACTION_CANCEL) {\n        velX=velocityTracker.getXVelocity();\n        velY=velocityTracker.getYVelocity();\n        if (!startedTracking) {\n          if (Math.abs(velX) >= 3000 && Math.abs(velX) > Math.abs(velY)) {\n            prepareForMoving(ev,velX < 0);\n          }\n        }\n      }\n else {\n        velX=0;\n        velY=0;\n      }\n      if (startedTracking) {\n        float x=viewPages[0].getX();\n        tabsAnimation=new AnimatorSet();\n        backAnimation=Math.abs(x) < viewPages[0].getMeasuredWidth() / 3.0f && (Math.abs(velX) < 3500 || Math.abs(velX) < Math.abs(velY));\n        float distToMove;\n        float dx;\n        if (backAnimation) {\n          dx=Math.abs(x);\n          if (animatingForward) {\n            tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,0),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,viewPages[1].getMeasuredWidth()));\n          }\n else {\n            tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,0),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,-viewPages[1].getMeasuredWidth()));\n          }\n        }\n else {\n          dx=viewPages[0].getMeasuredWidth() - Math.abs(x);\n          if (animatingForward) {\n            tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,-viewPages[0].getMeasuredWidth()),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,0));\n          }\n else {\n            tabsAnimation.playTogether(ObjectAnimator.ofFloat(viewPages[0],View.TRANSLATION_X,viewPages[0].getMeasuredWidth()),ObjectAnimator.ofFloat(viewPages[1],View.TRANSLATION_X,0));\n          }\n        }\n        tabsAnimation.setInterpolator(interpolator);\n        int width=getMeasuredWidth();\n        int halfWidth=width / 2;\n        float distanceRatio=Math.min(1.0f,1.0f * dx / (float)width);\n        float distance=(float)halfWidth + (float)halfWidth * AndroidUtilities.distanceInfluenceForSnapDuration(distanceRatio);\n        velX=Math.abs(velX);\n        int duration;\n        if (velX > 0) {\n          duration=4 * Math.round(1000.0f * Math.abs(distance / velX));\n        }\n else {\n          float pageDelta=dx / getMeasuredWidth();\n          duration=(int)((pageDelta + 1.0f) * 100.0f);\n        }\n        duration=Math.max(150,Math.min(duration,600));\n        tabsAnimation.setDuration(duration);\n        tabsAnimation.addListener(new AnimatorListenerAdapter(){\n          @Override public void onAnimationEnd(          Animator animator){\n            tabsAnimation=null;\n            if (backAnimation) {\n              viewPages[1].setVisibility(View.GONE);\n            }\n else {\n              ViewPage tempPage=viewPages[0];\n              viewPages[0]=viewPages[1];\n              viewPages[1]=tempPage;\n              viewPages[1].setVisibility(View.GONE);\n              swipeBackEnabled=viewPages[0].selectedType == scrollSlidingTextTabStrip.getFirstTabId();\n              scrollSlidingTextTabStrip.selectTabWithId(viewPages[0].selectedType,1.0f);\n            }\n            tabsAnimationInProgress=false;\n            maybeStartTracking=false;\n            startedTracking=false;\n            actionBar.setEnabled(true);\n            scrollSlidingTextTabStrip.setEnabled(true);\n          }\n        }\n);\n        tabsAnimation.start();\n        tabsAnimationInProgress=true;\n        startedTracking=false;\n      }\n else {\n        maybeStartTracking=false;\n        actionBar.setEnabled(true);\n        scrollSlidingTextTabStrip.setEnabled(true);\n      }\n      if (velocityTracker != null) {\n        velocityTracker.recycle();\n        velocityTracker=null;\n      }\n    }\n    return startedTracking;\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 904,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 357,
        "startColumnNumber" : 32,
        "endLineNumber" : 357,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Math.abs(dx) >= touchSlop && Math.abs(dx) > dy",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 357,
    "startColumnNumber" : 48,
    "endLineNumber" : 357,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}