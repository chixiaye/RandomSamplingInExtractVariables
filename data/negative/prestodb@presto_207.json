{
  "id" : 207,
  "expression" : "Modifier",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-common/src/main/java/com/facebook/presto/common/block/BlockBuilderStatus.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Modifier",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 68,
      "startColumnNumber" : 12,
      "endLineNumber" : 68,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 53
      },
      "nodeContext" : "Modifier.isAbstract(clazz.getModifiers())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Modifier.isAbstract(clazz.getModifiers())) {\n  throw new IllegalArgumentException(format(\"%s is abstract\",clazz.getSimpleName()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1191,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (clazz.isArray()) {\n    throw new IllegalArgumentException(format(\"Cannot determine size of %s because it contains an array\",clazz.getSimpleName()));\n  }\n  if (clazz.isInterface()) {\n    throw new IllegalArgumentException(format(\"%s is an interface\",clazz.getSimpleName()));\n  }\n  if (Modifier.isAbstract(clazz.getModifiers())) {\n    throw new IllegalArgumentException(format(\"%s is abstract\",clazz.getSimpleName()));\n  }\n  if (!clazz.getSuperclass().equals(Object.class)) {\n    throw new IllegalArgumentException(format(\"Cannot determine size of a subclass. %s extends from %s\",clazz.getSimpleName(),clazz.getSuperclass().getSimpleName()));\n  }\n  int size=ClassLayout.parseClass(clazz).instanceSize();\n  for (  Field field : clazz.getDeclaredFields()) {\n    if (!field.getType().isPrimitive() && !field.isSynthetic()) {\n      size+=deepInstanceSize(field.getType());\n    }\n  }\n  return size;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1365,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Computes the size of an instance of this class assuming that all reference fields are non-null\n */\nprivate static int deepInstanceSize(Class<?> clazz){\n  if (clazz.isArray()) {\n    throw new IllegalArgumentException(format(\"Cannot determine size of %s because it contains an array\",clazz.getSimpleName()));\n  }\n  if (clazz.isInterface()) {\n    throw new IllegalArgumentException(format(\"%s is an interface\",clazz.getSimpleName()));\n  }\n  if (Modifier.isAbstract(clazz.getModifiers())) {\n    throw new IllegalArgumentException(format(\"%s is abstract\",clazz.getSimpleName()));\n  }\n  if (!clazz.getSuperclass().equals(Object.class)) {\n    throw new IllegalArgumentException(format(\"Cannot determine size of a subclass. %s extends from %s\",clazz.getSimpleName(),clazz.getSuperclass().getSimpleName()));\n  }\n  int size=ClassLayout.parseClass(clazz).instanceSize();\n  for (  Field field : clazz.getDeclaredFields()) {\n    if (!field.getType().isPrimitive() && !field.isSynthetic()) {\n      size+=deepInstanceSize(field.getType());\n    }\n  }\n  return size;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 129,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 53
      },
      "nodeContext" : "Modifier.isAbstract(clazz.getModifiers())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.reflect.Modifier"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 68,
    "startColumnNumber" : 12,
    "endLineNumber" : 68,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ ]
}