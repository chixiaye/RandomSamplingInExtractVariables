{
  "id" : 392,
  "expression" : "new Function<Throwable,Observable<String>>(){\n  @Override public Observable<String> apply(  Throwable t1){\n    return Observable.<String>error(t1);\n  }\n}\n",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/observable/ObservableRefCountTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Function<Throwable,Observable<String>>(){\n  @Override public Observable<String> apply(  Throwable t1){\n    return Observable.<String>error(t1);\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 295,
      "startLineNumber" : 523,
      "startColumnNumber" : 43,
      "endLineNumber" : 528,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 34,
    "astHeight" : 8,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1455,
        "startLineNumber" : 504,
        "startColumnNumber" : 16,
        "endLineNumber" : 528,
        "endColumnNumber" : 26
      },
      "nodeContext" : "Observable.interval(200,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Disposable>(){\n  @Override public void accept(  Disposable s){\n    System.out.println(\"Subscribing to interval \" + intervalSubscribed.incrementAndGet());\n  }\n}\n).flatMap(new Function<Long,Observable<String>>(){\n  @Override public Observable<String> apply(  Long t1){\n    return Observable.defer(new Supplier<Observable<String>>(){\n      @Override public Observable<String> get(){\n        return Observable.<String>error(new Exception(\"Some exception\"));\n      }\n    }\n);\n  }\n}\n).onErrorResumeNext(new Function<Throwable,Observable<String>>(){\n  @Override public Observable<String> apply(  Throwable t1){\n    return Observable.<String>error(t1);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 138,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1491,
        "startLineNumber" : 504,
        "startColumnNumber" : 16,
        "endLineNumber" : 529,
        "endColumnNumber" : 34
      },
      "nodeContext" : "Observable.interval(200,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Disposable>(){\n  @Override public void accept(  Disposable s){\n    System.out.println(\"Subscribing to interval \" + intervalSubscribed.incrementAndGet());\n  }\n}\n).flatMap(new Function<Long,Observable<String>>(){\n  @Override public Observable<String> apply(  Long t1){\n    return Observable.defer(new Supplier<Observable<String>>(){\n      @Override public Observable<String> get(){\n        return Observable.<String>error(new Exception(\"Some exception\"));\n      }\n    }\n);\n  }\n}\n).onErrorResumeNext(new Function<Throwable,Observable<String>>(){\n  @Override public Observable<String> apply(  Throwable t1){\n    return Observable.<String>error(t1);\n  }\n}\n).publish()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 140,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1528,
        "startLineNumber" : 504,
        "startColumnNumber" : 16,
        "endLineNumber" : 530,
        "endColumnNumber" : 35
      },
      "nodeContext" : "Observable.interval(200,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Disposable>(){\n  @Override public void accept(  Disposable s){\n    System.out.println(\"Subscribing to interval \" + intervalSubscribed.incrementAndGet());\n  }\n}\n).flatMap(new Function<Long,Observable<String>>(){\n  @Override public Observable<String> apply(  Long t1){\n    return Observable.defer(new Supplier<Observable<String>>(){\n      @Override public Observable<String> get(){\n        return Observable.<String>error(new Exception(\"Some exception\"));\n      }\n    }\n);\n  }\n}\n).onErrorResumeNext(new Function<Throwable,Observable<String>>(){\n  @Override public Observable<String> apply(  Throwable t1){\n    return Observable.<String>error(t1);\n  }\n}\n).publish().refCount()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 142,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 1556,
        "startLineNumber" : 503,
        "startColumnNumber" : 27,
        "endLineNumber" : 530,
        "endColumnNumber" : 35
      },
      "nodeContext" : "interval=Observable.interval(200,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Disposable>(){\n  @Override public void accept(  Disposable s){\n    System.out.println(\"Subscribing to interval \" + intervalSubscribed.incrementAndGet());\n  }\n}\n).flatMap(new Function<Long,Observable<String>>(){\n  @Override public Observable<String> apply(  Long t1){\n    return Observable.defer(new Supplier<Observable<String>>(){\n      @Override public Observable<String> get(){\n        return Observable.<String>error(new Exception(\"Some exception\"));\n      }\n    }\n);\n  }\n}\n).onErrorResumeNext(new Function<Throwable,Observable<String>>(){\n  @Override public Observable<String> apply(  Throwable t1){\n    return Observable.<String>error(t1);\n  }\n}\n).publish().refCount()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 144,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 503,
        "startColumnNumber" : 8,
        "endLineNumber" : 530,
        "endColumnNumber" : 36
      },
      "nodeContext" : "Observable<String> interval=Observable.interval(200,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Disposable>(){\n  @Override public void accept(  Disposable s){\n    System.out.println(\"Subscribing to interval \" + intervalSubscribed.incrementAndGet());\n  }\n}\n).flatMap(new Function<Long,Observable<String>>(){\n  @Override public Observable<String> apply(  Long t1){\n    return Observable.defer(new Supplier<Observable<String>>(){\n      @Override public Observable<String> get(){\n        return Observable.<String>error(new Exception(\"Some exception\"));\n      }\n    }\n);\n  }\n}\n).onErrorResumeNext(new Function<Throwable,Observable<String>>(){\n  @Override public Observable<String> apply(  Throwable t1){\n    return Observable.<String>error(t1);\n  }\n}\n).publish().refCount();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 150,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2935,
        "startLineNumber" : 501,
        "startColumnNumber" : 75,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicInteger intervalSubscribed=new AtomicInteger();\n  Observable<String> interval=Observable.interval(200,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Disposable>(){\n    @Override public void accept(    Disposable s){\n      System.out.println(\"Subscribing to interval \" + intervalSubscribed.incrementAndGet());\n    }\n  }\n).flatMap(new Function<Long,Observable<String>>(){\n    @Override public Observable<String> apply(    Long t1){\n      return Observable.defer(new Supplier<Observable<String>>(){\n        @Override public Observable<String> get(){\n          return Observable.<String>error(new Exception(\"Some exception\"));\n        }\n      }\n);\n    }\n  }\n).onErrorResumeNext(new Function<Throwable,Observable<String>>(){\n    @Override public Observable<String> apply(    Throwable t1){\n      return Observable.<String>error(t1);\n    }\n  }\n).publish().refCount();\n  interval.doOnError(new Consumer<Throwable>(){\n    @Override public void accept(    Throwable t1){\n      System.out.println(\"NbpSubscriber 1 onError: \" + t1);\n    }\n  }\n).retry(5).subscribe(new Consumer<String>(){\n    @Override public void accept(    String t1){\n      System.out.println(\"NbpSubscriber 1: \" + t1);\n    }\n  }\n);\n  Thread.sleep(100);\n  interval.doOnError(new Consumer<Throwable>(){\n    @Override public void accept(    Throwable t1){\n      System.out.println(\"NbpSubscriber 2 onError: \" + t1);\n    }\n  }\n).retry(5).subscribe(new Consumer<String>(){\n    @Override public void accept(    String t1){\n      System.out.println(\"NbpSubscriber 2: \" + t1);\n    }\n  }\n);\n  Thread.sleep(1300);\n  System.out.println(intervalSubscribed.get());\n  assertEquals(6,intervalSubscribed.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 312,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3034,
        "startLineNumber" : 500,
        "startColumnNumber" : 4,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeout=10000) public void testUpstreamErrorAllowsRetry() throws InterruptedException {\n  final AtomicInteger intervalSubscribed=new AtomicInteger();\n  Observable<String> interval=Observable.interval(200,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Disposable>(){\n    @Override public void accept(    Disposable s){\n      System.out.println(\"Subscribing to interval \" + intervalSubscribed.incrementAndGet());\n    }\n  }\n).flatMap(new Function<Long,Observable<String>>(){\n    @Override public Observable<String> apply(    Long t1){\n      return Observable.defer(new Supplier<Observable<String>>(){\n        @Override public Observable<String> get(){\n          return Observable.<String>error(new Exception(\"Some exception\"));\n        }\n      }\n);\n    }\n  }\n).onErrorResumeNext(new Function<Throwable,Observable<String>>(){\n    @Override public Observable<String> apply(    Throwable t1){\n      return Observable.<String>error(t1);\n    }\n  }\n).publish().refCount();\n  interval.doOnError(new Consumer<Throwable>(){\n    @Override public void accept(    Throwable t1){\n      System.out.println(\"NbpSubscriber 1 onError: \" + t1);\n    }\n  }\n).retry(5).subscribe(new Consumer<String>(){\n    @Override public void accept(    String t1){\n      System.out.println(\"NbpSubscriber 1: \" + t1);\n    }\n  }\n);\n  Thread.sleep(100);\n  interval.doOnError(new Consumer<Throwable>(){\n    @Override public void accept(    Throwable t1){\n      System.out.println(\"NbpSubscriber 2 onError: \" + t1);\n    }\n  }\n).retry(5).subscribe(new Consumer<String>(){\n    @Override public void accept(    String t1){\n      System.out.println(\"NbpSubscriber 2: \" + t1);\n    }\n  }\n);\n  Thread.sleep(1300);\n  System.out.println(intervalSubscribed.get());\n  assertEquals(6,intervalSubscribed.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 323,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1455,
        "startLineNumber" : 504,
        "startColumnNumber" : 16,
        "endLineNumber" : 528,
        "endColumnNumber" : 26
      },
      "nodeContext" : "Observable.interval(200,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Disposable>(){\n  @Override public void accept(  Disposable s){\n    System.out.println(\"Subscribing to interval \" + intervalSubscribed.incrementAndGet());\n  }\n}\n).flatMap(new Function<Long,Observable<String>>(){\n  @Override public Observable<String> apply(  Long t1){\n    return Observable.defer(new Supplier<Observable<String>>(){\n      @Override public Observable<String> get(){\n        return Observable.<String>error(new Exception(\"Some exception\"));\n      }\n    }\n);\n  }\n}\n).onErrorResumeNext(new Function<Throwable,Observable<String>>(){\n  @Override public Observable<String> apply(  Throwable t1){\n    return Observable.<String>error(t1);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 138,
      "astHeight" : 17
    },
    "tokenLength" : 10,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 295,
    "startLineNumber" : 523,
    "startColumnNumber" : 43,
    "endLineNumber" : 528,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}