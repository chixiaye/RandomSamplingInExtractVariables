{
  "id" : 6,
  "expression" : "\"ES384\"",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/core/src/test/java/org/keycloak/util/JWKSUtilsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"ES384\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 111,
      "startColumnNumber" : 21,
      "endLineNumber" : 111,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 58
      },
      "nodeContext" : "assertEquals(\"ES384\",key.getAlgorithmOrDefault())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertEquals(\"ES384\",key.getAlgorithmOrDefault());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3890,
        "startLineNumber" : 42,
        "startColumnNumber" : 47,
        "endLineNumber" : 122,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n  String kidRsa1=\"key1\";\n  String kidRsa2=\"key2\";\n  String kidInvalidKey=\"ignored\";\n  String kidEC1=\"key3\";\n  String kidEC2=\"key4\";\n  String jwksJson=\"{\" + \"\\\"keys\\\": [\" + \"  {\"+ \"   \\\"kty\\\": \\\"RSA\\\",\"+ \"   \\\"alg\\\": \\\"RS256\\\",\"+ \"   \\\"use\\\": \\\"sig\\\",\"+ \"   \\\"kid\\\": \\\"\" + kidRsa1 + \"\\\",\"+ \"   \\\"n\\\": \\\"soFDjoZ5mQ8XAA7reQAFg90inKAHk0DXMTizo4JuOsgzUbhcplIeZ7ks83hsEjm8mP8lUVaHMPMAHEIp3gu6Xxsg-s73ofx1dtt_Fo7aj8j383MFQGl8-FvixTVobNeGeC0XBBQjN8lEl-lIwOa4ZoERNAShplTej0ntDp7TQm0=\\\",\"+ \"   \\\"e\\\": \\\"AQAB\\\"\"+ \"  }\"+ \"  ,{\"+ \"   \\\"kty\\\": \\\"RSA\\\",\"+ \"   \\\"use\\\": \\\"sig\\\",\"+ \"   \\\"kid\\\": \\\"\"+ kidRsa2+ \"\\\",\"+ \"   \\\"n\\\": \\\"soFDjoZ5mQ8XAA7reQAFg90inKAHk0DXMTizo4JuOsgzUbhcplIeZ7ks83hsEjm8mP8lUVaHMPMAHEIp3gu6Xxsg-s73ofx1dtt_Fo7aj8j383MFQGl8-FvixTVobNeGeC0XBBQjN8lEl-lIwOa4ZoERNAShplTej0ntDp7TQm0=\\\",\"+ \"   \\\"e\\\": \\\"AQAB\\\"\"+ \"  },\"+ \"  {\"+ \"   \\\"kty\\\": \\\"RSA\\\",\"+ \"   \\\"kid\\\": \\\"\"+ kidInvalidKey+ \"\\\",\"+ \"   \\\"n\\\": \\\"soFDjoZ5mQ8XAA7reQAFg90inKAHk0DXMTizo4JuOsgzUbhcplIeZ7ks83hsEjm8mP8lUVaHMPMAHEIp3gu6Xxsg-s73ofx1dtt_Fo7aj8j383MFQGl8-FvixTVobNeGeC0XBBQjN8lEl-lIwOa4ZoERNAShplTej0ntDp7TQm0=\\\",\"+ \"   \\\"e\\\": \\\"AQAB\\\"\"+ \"  },\"+ \"  {\"+ \"   \\\"kty\\\": \\\"EC\\\",\"+ \"   \\\"use\\\": \\\"sig\\\",\"+ \"   \\\"crv\\\": \\\"P-384\\\",\"+ \"   \\\"kid\\\": \\\"\"+ kidEC1+ \"\\\",\"+ \"   \\\"x\\\": \\\"KVZ5h_W0-8fXmUrxmyRpO_9vwwI7urXfyxGdxm1hpEuhPj2hhDxivnb2BhNvtC6O\\\",\"+ \"   \\\"y\\\": \\\"1J3JVw_zR3uB3biAE7fs3V_4tJy2M1JinzWj9a4je5GSoW6zgGV4bk85OcuyUAhj\\\",\"+ \"   \\\"alg\\\": \\\"ES384\\\"\"+ \"  },\"+ \"  {\"+ \"   \\\"kty\\\": \\\"EC\\\",\"+ \"   \\\"use\\\": \\\"sig\\\",\"+ \"   \\\"crv\\\": \\\"P-384\\\",\"+ \"   \\\"kid\\\": \\\"\"+ kidEC2+ \"\\\",\"+ \"   \\\"x\\\": \\\"KVZ5h_W0-8fXmUrxmyRpO_9vwwI7urXfyxGdxm1hpEuhPj2hhDxivnb2BhNvtC6O\\\",\"+ \"   \\\"y\\\": \\\"1J3JVw_zR3uB3biAE7fs3V_4tJy2M1JinzWj9a4je5GSoW6zgGV4bk85OcuyUAhj\\\"\"+ \"  }\"+ \"] }\";\n  JSONWebKeySet jsonWebKeySet=JsonSerialization.readValue(jwksJson,JSONWebKeySet.class);\n  Map<String,KeyWrapper> keyWrappersForUse=JWKSUtils.getKeyWrappersForUse(jsonWebKeySet,JWK.Use.SIG);\n  assertEquals(4,keyWrappersForUse.size());\n  KeyWrapper key=keyWrappersForUse.get(kidRsa1);\n  assertNotNull(key);\n  assertEquals(\"RS256\",key.getAlgorithmOrDefault());\n  assertEquals(KeyUse.SIG,key.getUse());\n  assertEquals(kidRsa1,key.getKid());\n  assertEquals(\"RSA\",key.getType());\n  key=keyWrappersForUse.get(kidRsa2);\n  assertNotNull(key);\n  assertEquals(\"RS256\",key.getAlgorithmOrDefault());\n  assertEquals(KeyUse.SIG,key.getUse());\n  assertEquals(kidRsa2,key.getKid());\n  assertEquals(\"RSA\",key.getType());\n  key=keyWrappersForUse.get(kidEC1);\n  assertNotNull(key);\n  assertEquals(\"ES384\",key.getAlgorithmOrDefault());\n  assertEquals(KeyUse.SIG,key.getUse());\n  assertEquals(kidEC1,key.getKid());\n  assertEquals(\"EC\",key.getType());\n  key=keyWrappersForUse.get(kidEC2);\n  assertNotNull(key);\n  assertNull(key.getAlgorithmOrDefault());\n  assertEquals(KeyUse.SIG,key.getUse());\n  assertEquals(kidEC2,key.getKid());\n  assertEquals(\"EC\",key.getType());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3943,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void publicRs256() throws Exception {\n  Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n  String kidRsa1=\"key1\";\n  String kidRsa2=\"key2\";\n  String kidInvalidKey=\"ignored\";\n  String kidEC1=\"key3\";\n  String kidEC2=\"key4\";\n  String jwksJson=\"{\" + \"\\\"keys\\\": [\" + \"  {\"+ \"   \\\"kty\\\": \\\"RSA\\\",\"+ \"   \\\"alg\\\": \\\"RS256\\\",\"+ \"   \\\"use\\\": \\\"sig\\\",\"+ \"   \\\"kid\\\": \\\"\" + kidRsa1 + \"\\\",\"+ \"   \\\"n\\\": \\\"soFDjoZ5mQ8XAA7reQAFg90inKAHk0DXMTizo4JuOsgzUbhcplIeZ7ks83hsEjm8mP8lUVaHMPMAHEIp3gu6Xxsg-s73ofx1dtt_Fo7aj8j383MFQGl8-FvixTVobNeGeC0XBBQjN8lEl-lIwOa4ZoERNAShplTej0ntDp7TQm0=\\\",\"+ \"   \\\"e\\\": \\\"AQAB\\\"\"+ \"  }\"+ \"  ,{\"+ \"   \\\"kty\\\": \\\"RSA\\\",\"+ \"   \\\"use\\\": \\\"sig\\\",\"+ \"   \\\"kid\\\": \\\"\"+ kidRsa2+ \"\\\",\"+ \"   \\\"n\\\": \\\"soFDjoZ5mQ8XAA7reQAFg90inKAHk0DXMTizo4JuOsgzUbhcplIeZ7ks83hsEjm8mP8lUVaHMPMAHEIp3gu6Xxsg-s73ofx1dtt_Fo7aj8j383MFQGl8-FvixTVobNeGeC0XBBQjN8lEl-lIwOa4ZoERNAShplTej0ntDp7TQm0=\\\",\"+ \"   \\\"e\\\": \\\"AQAB\\\"\"+ \"  },\"+ \"  {\"+ \"   \\\"kty\\\": \\\"RSA\\\",\"+ \"   \\\"kid\\\": \\\"\"+ kidInvalidKey+ \"\\\",\"+ \"   \\\"n\\\": \\\"soFDjoZ5mQ8XAA7reQAFg90inKAHk0DXMTizo4JuOsgzUbhcplIeZ7ks83hsEjm8mP8lUVaHMPMAHEIp3gu6Xxsg-s73ofx1dtt_Fo7aj8j383MFQGl8-FvixTVobNeGeC0XBBQjN8lEl-lIwOa4ZoERNAShplTej0ntDp7TQm0=\\\",\"+ \"   \\\"e\\\": \\\"AQAB\\\"\"+ \"  },\"+ \"  {\"+ \"   \\\"kty\\\": \\\"EC\\\",\"+ \"   \\\"use\\\": \\\"sig\\\",\"+ \"   \\\"crv\\\": \\\"P-384\\\",\"+ \"   \\\"kid\\\": \\\"\"+ kidEC1+ \"\\\",\"+ \"   \\\"x\\\": \\\"KVZ5h_W0-8fXmUrxmyRpO_9vwwI7urXfyxGdxm1hpEuhPj2hhDxivnb2BhNvtC6O\\\",\"+ \"   \\\"y\\\": \\\"1J3JVw_zR3uB3biAE7fs3V_4tJy2M1JinzWj9a4je5GSoW6zgGV4bk85OcuyUAhj\\\",\"+ \"   \\\"alg\\\": \\\"ES384\\\"\"+ \"  },\"+ \"  {\"+ \"   \\\"kty\\\": \\\"EC\\\",\"+ \"   \\\"use\\\": \\\"sig\\\",\"+ \"   \\\"crv\\\": \\\"P-384\\\",\"+ \"   \\\"kid\\\": \\\"\"+ kidEC2+ \"\\\",\"+ \"   \\\"x\\\": \\\"KVZ5h_W0-8fXmUrxmyRpO_9vwwI7urXfyxGdxm1hpEuhPj2hhDxivnb2BhNvtC6O\\\",\"+ \"   \\\"y\\\": \\\"1J3JVw_zR3uB3biAE7fs3V_4tJy2M1JinzWj9a4je5GSoW6zgGV4bk85OcuyUAhj\\\"\"+ \"  }\"+ \"] }\";\n  JSONWebKeySet jsonWebKeySet=JsonSerialization.readValue(jwksJson,JSONWebKeySet.class);\n  Map<String,KeyWrapper> keyWrappersForUse=JWKSUtils.getKeyWrappersForUse(jsonWebKeySet,JWK.Use.SIG);\n  assertEquals(4,keyWrappersForUse.size());\n  KeyWrapper key=keyWrappersForUse.get(kidRsa1);\n  assertNotNull(key);\n  assertEquals(\"RS256\",key.getAlgorithmOrDefault());\n  assertEquals(KeyUse.SIG,key.getUse());\n  assertEquals(kidRsa1,key.getKid());\n  assertEquals(\"RSA\",key.getType());\n  key=keyWrappersForUse.get(kidRsa2);\n  assertNotNull(key);\n  assertEquals(\"RS256\",key.getAlgorithmOrDefault());\n  assertEquals(KeyUse.SIG,key.getUse());\n  assertEquals(kidRsa2,key.getKid());\n  assertEquals(\"RSA\",key.getType());\n  key=keyWrappersForUse.get(kidEC1);\n  assertNotNull(key);\n  assertEquals(\"ES384\",key.getAlgorithmOrDefault());\n  assertEquals(KeyUse.SIG,key.getUse());\n  assertEquals(kidEC1,key.getKid());\n  assertEquals(\"EC\",key.getType());\n  key=keyWrappersForUse.get(kidEC2);\n  assertNotNull(key);\n  assertNull(key.getAlgorithmOrDefault());\n  assertEquals(KeyUse.SIG,key.getUse());\n  assertEquals(kidEC2,key.getKid());\n  assertEquals(\"EC\",key.getType());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertEquals(\"ES384\",key.getAlgorithmOrDefault());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 111,
    "startColumnNumber" : 21,
    "endLineNumber" : 111,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}