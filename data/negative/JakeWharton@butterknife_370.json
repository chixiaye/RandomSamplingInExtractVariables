{
  "id" : 370,
  "expression" : "arrayType",
  "projectName" : "JakeWharton@butterknife",
  "commitID" : "f89fb0f12f5a0c21d95dae234d53f590e1384557",
  "filePath" : "/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "arrayType",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 399,
      "startColumnNumber" : 17,
      "endLineNumber" : 399,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 399,
        "startColumnNumber" : 17,
        "endLineNumber" : 399,
        "endColumnNumber" : 45
      },
      "nodeContext" : "arrayType.getComponentType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 399,
        "startColumnNumber" : 6,
        "endLineNumber" : 399,
        "endColumnNumber" : 45
      },
      "nodeContext" : "viewType=arrayType.getComponentType()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 399,
        "startColumnNumber" : 6,
        "endLineNumber" : 399,
        "endColumnNumber" : 46
      },
      "nodeContext" : "viewType=arrayType.getComponentType();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 397,
        "startColumnNumber" : 49,
        "endLineNumber" : 401,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ArrayType arrayType=(ArrayType)elementType;\n  viewType=arrayType.getComponentType();\n  kind=FieldCollectionViewBinding.Kind.ARRAY;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 810,
        "startLineNumber" : 397,
        "startColumnNumber" : 4,
        "endLineNumber" : 415,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (elementType.getKind() == TypeKind.ARRAY) {\n  ArrayType arrayType=(ArrayType)elementType;\n  viewType=arrayType.getComponentType();\n  kind=FieldCollectionViewBinding.Kind.ARRAY;\n}\n else if (LIST_TYPE.equals(erasedType)) {\n  DeclaredType declaredType=(DeclaredType)elementType;\n  List<? extends TypeMirror> typeArguments=declaredType.getTypeArguments();\n  if (typeArguments.size() != 1) {\n    error(element,\"@%s List must have a generic component. (%s.%s)\",Bind.class.getSimpleName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n else {\n    viewType=typeArguments.get(0);\n  }\n  kind=FieldCollectionViewBinding.Kind.LIST;\n}\n else {\n  throw new AssertionError();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2871,
        "startLineNumber" : 388,
        "startColumnNumber" : 37,
        "endLineNumber" : 456,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  String erasedType=doubleErasure(elementType);\n  TypeMirror viewType=null;\n  FieldCollectionViewBinding.Kind kind;\n  if (elementType.getKind() == TypeKind.ARRAY) {\n    ArrayType arrayType=(ArrayType)elementType;\n    viewType=arrayType.getComponentType();\n    kind=FieldCollectionViewBinding.Kind.ARRAY;\n  }\n else   if (LIST_TYPE.equals(erasedType)) {\n    DeclaredType declaredType=(DeclaredType)elementType;\n    List<? extends TypeMirror> typeArguments=declaredType.getTypeArguments();\n    if (typeArguments.size() != 1) {\n      error(element,\"@%s List must have a generic component. (%s.%s)\",Bind.class.getSimpleName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n else {\n      viewType=typeArguments.get(0);\n    }\n    kind=FieldCollectionViewBinding.Kind.LIST;\n  }\n else {\n    throw new AssertionError();\n  }\n  if (viewType != null && viewType.getKind() == TypeKind.TYPEVAR) {\n    TypeVariable typeVariable=(TypeVariable)viewType;\n    viewType=typeVariable.getUpperBound();\n  }\n  if (viewType != null && !isSubtypeOfType(viewType,VIEW_TYPE) && !isInterface(viewType)) {\n    error(element,\"@%s List or array type must extend from View or be an interface. (%s.%s)\",Bind.class.getSimpleName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  String name=element.getSimpleName().toString();\n  int[] ids=element.getAnnotation(Bind.class).value();\n  if (ids.length == 0) {\n    error(element,\"@%s must specify at least one ID. (%s.%s)\",Bind.class.getSimpleName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation contains duplicate ID %d. (%s.%s)\",Bind.class.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n  }\n  assert viewType != null;\n  TypeName type=TypeName.get(viewType);\n  boolean required=isRequiredBinding(element);\n  BindingClass bindingClass=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  FieldCollectionViewBinding binding=new FieldCollectionViewBinding(name,type,kind,required);\n  bindingClass.addFieldCollection(ids,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 353,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2999,
        "startLineNumber" : 387,
        "startColumnNumber" : 2,
        "endLineNumber" : 456,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseBindMany(Element element,Map<TypeElement,BindingClass> targetClassMap,Set<String> erasedTargetNames){\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  String erasedType=doubleErasure(elementType);\n  TypeMirror viewType=null;\n  FieldCollectionViewBinding.Kind kind;\n  if (elementType.getKind() == TypeKind.ARRAY) {\n    ArrayType arrayType=(ArrayType)elementType;\n    viewType=arrayType.getComponentType();\n    kind=FieldCollectionViewBinding.Kind.ARRAY;\n  }\n else   if (LIST_TYPE.equals(erasedType)) {\n    DeclaredType declaredType=(DeclaredType)elementType;\n    List<? extends TypeMirror> typeArguments=declaredType.getTypeArguments();\n    if (typeArguments.size() != 1) {\n      error(element,\"@%s List must have a generic component. (%s.%s)\",Bind.class.getSimpleName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n else {\n      viewType=typeArguments.get(0);\n    }\n    kind=FieldCollectionViewBinding.Kind.LIST;\n  }\n else {\n    throw new AssertionError();\n  }\n  if (viewType != null && viewType.getKind() == TypeKind.TYPEVAR) {\n    TypeVariable typeVariable=(TypeVariable)viewType;\n    viewType=typeVariable.getUpperBound();\n  }\n  if (viewType != null && !isSubtypeOfType(viewType,VIEW_TYPE) && !isInterface(viewType)) {\n    error(element,\"@%s List or array type must extend from View or be an interface. (%s.%s)\",Bind.class.getSimpleName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  String name=element.getSimpleName().toString();\n  int[] ids=element.getAnnotation(Bind.class).value();\n  if (ids.length == 0) {\n    error(element,\"@%s must specify at least one ID. (%s.%s)\",Bind.class.getSimpleName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation contains duplicate ID %d. (%s.%s)\",Bind.class.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n  }\n  assert viewType != null;\n  TypeName type=TypeName.get(viewType);\n  boolean required=isRequiredBinding(element);\n  BindingClass bindingClass=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  FieldCollectionViewBinding binding=new FieldCollectionViewBinding(name,type,kind,required);\n  bindingClass.addFieldCollection(ids,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 377,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 399,
        "startColumnNumber" : 6,
        "endLineNumber" : 399,
        "endColumnNumber" : 46
      },
      "nodeContext" : "viewType=arrayType.getComponentType();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.type.ArrayType"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 399,
    "startColumnNumber" : 17,
    "endLineNumber" : 399,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}