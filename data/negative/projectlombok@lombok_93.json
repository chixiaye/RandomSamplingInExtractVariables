{
  "id" : 93,
  "expression" : "\"()\"",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/handlers/HandleToString.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"()\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 186,
      "startColumnNumber" : 23,
      "endLineNumber" : 186,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 186,
        "startColumnNumber" : 12,
        "endLineNumber" : 186,
        "endColumnNumber" : 27
      },
      "nodeContext" : "typeName + \"()\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 186,
        "startColumnNumber" : 3,
        "endLineNumber" : 186,
        "endColumnNumber" : 27
      },
      "nodeContext" : "prefix=typeName + \"()\"",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 186,
        "startColumnNumber" : 3,
        "endLineNumber" : 186,
        "endColumnNumber" : 28
      },
      "nodeContext" : "prefix=typeName + \"()\";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 185,
        "startColumnNumber" : 31,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  prefix=typeName + \"()\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 185,
        "startColumnNumber" : 9,
        "endLineNumber" : 191,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (fields.isEmpty()) {\n  prefix=typeName + \"()\";\n}\n else if (includeFieldNames) {\n  prefix=typeName + \"(\" + ((JCVariableDecl)fields.iterator().next().get()).name.toString()+ \"=\";\n}\n else {\n  prefix=typeName + \"(\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 290,
        "startLineNumber" : 183,
        "startColumnNumber" : 2,
        "endLineNumber" : 191,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (callSuper) {\n  prefix=typeName + \"(super=\";\n}\n else if (fields.isEmpty()) {\n  prefix=typeName + \"()\";\n}\n else if (includeFieldNames) {\n  prefix=typeName + \"(\" + ((JCVariableDecl)fields.iterator().next().get()).name.toString()+ \"=\";\n}\n else {\n  prefix=typeName + \"(\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2838,
        "startLineNumber" : 170,
        "startColumnNumber" : 167,
        "endLineNumber" : 241,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TreeMaker maker=typeNode.getTreeMaker();\n  JCAnnotation overrideAnnotation=maker.Annotation(chainDots(typeNode,\"java\",\"lang\",\"Override\"),List.<JCExpression>nil());\n  JCModifiers mods=maker.Modifiers(Flags.PUBLIC,List.of(overrideAnnotation));\n  JCExpression returnType=chainDots(typeNode,\"java\",\"lang\",\"String\");\n  boolean first=true;\n  String typeName=getTypeName(typeNode);\n  String infix=\", \";\n  String suffix=\")\";\n  String prefix;\n  if (callSuper) {\n    prefix=typeName + \"(super=\";\n  }\n else   if (fields.isEmpty()) {\n    prefix=typeName + \"()\";\n  }\n else   if (includeFieldNames) {\n    prefix=typeName + \"(\" + ((JCVariableDecl)fields.iterator().next().get()).name.toString()+ \"=\";\n  }\n else {\n    prefix=typeName + \"(\";\n  }\n  JCExpression current=maker.Literal(prefix);\n  if (callSuper) {\n    JCMethodInvocation callToSuper=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(typeNode.toName(\"super\")),typeNode.toName(\"toString\")),List.<JCExpression>nil());\n    current=maker.Binary(getCtcInt(JCTree.class,\"PLUS\"),current,callToSuper);\n    first=false;\n  }\n  for (  JavacNode fieldNode : fields) {\n    JCVariableDecl field=(JCVariableDecl)fieldNode.get();\n    JCExpression expr;\n    JCExpression fieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n    if (getFieldType(fieldNode,fieldAccess) instanceof JCArrayTypeTree) {\n      boolean multiDim=((JCArrayTypeTree)field.vartype).elemtype instanceof JCArrayTypeTree;\n      boolean primitiveArray=((JCArrayTypeTree)field.vartype).elemtype instanceof JCPrimitiveTypeTree;\n      boolean useDeepTS=multiDim || !primitiveArray;\n      JCExpression hcMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepTS ? \"deepToString\" : \"toString\");\n      expr=maker.Apply(List.<JCExpression>nil(),hcMethod,List.<JCExpression>of(fieldAccessor));\n    }\n else     expr=fieldAccessor;\n    if (first) {\n      current=maker.Binary(getCtcInt(JCTree.class,\"PLUS\"),current,expr);\n      first=false;\n      continue;\n    }\n    if (includeFieldNames) {\n      current=maker.Binary(getCtcInt(JCTree.class,\"PLUS\"),current,maker.Literal(infix + fieldNode.getName() + \"=\"));\n    }\n else {\n      current=maker.Binary(getCtcInt(JCTree.class,\"PLUS\"),current,maker.Literal(infix));\n    }\n    current=maker.Binary(getCtcInt(JCTree.class,\"PLUS\"),current,expr);\n  }\n  if (!first)   current=maker.Binary(getCtcInt(JCTree.class,\"PLUS\"),current,maker.Literal(suffix));\n  JCStatement returnStatement=maker.Return(current);\n  JCBlock body=maker.Block(0,List.of(returnStatement));\n  return recursiveSetGeneratedBy(maker.MethodDef(mods,typeNode.toName(\"toString\"),returnType,List.<JCTypeParameter>nil(),List.<JCVariableDecl>nil(),List.<JCExpression>nil(),body,null),source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 468,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3004,
        "startLineNumber" : 170,
        "startColumnNumber" : 1,
        "endLineNumber" : 241,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private JCMethodDecl createToString(JavacNode typeNode,List<JavacNode> fields,boolean includeFieldNames,boolean callSuper,FieldAccess fieldAccess,JCTree source){\n  TreeMaker maker=typeNode.getTreeMaker();\n  JCAnnotation overrideAnnotation=maker.Annotation(chainDots(typeNode,\"java\",\"lang\",\"Override\"),List.<JCExpression>nil());\n  JCModifiers mods=maker.Modifiers(Flags.PUBLIC,List.of(overrideAnnotation));\n  JCExpression returnType=chainDots(typeNode,\"java\",\"lang\",\"String\");\n  boolean first=true;\n  String typeName=getTypeName(typeNode);\n  String infix=\", \";\n  String suffix=\")\";\n  String prefix;\n  if (callSuper) {\n    prefix=typeName + \"(super=\";\n  }\n else   if (fields.isEmpty()) {\n    prefix=typeName + \"()\";\n  }\n else   if (includeFieldNames) {\n    prefix=typeName + \"(\" + ((JCVariableDecl)fields.iterator().next().get()).name.toString()+ \"=\";\n  }\n else {\n    prefix=typeName + \"(\";\n  }\n  JCExpression current=maker.Literal(prefix);\n  if (callSuper) {\n    JCMethodInvocation callToSuper=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(typeNode.toName(\"super\")),typeNode.toName(\"toString\")),List.<JCExpression>nil());\n    current=maker.Binary(getCtcInt(JCTree.class,\"PLUS\"),current,callToSuper);\n    first=false;\n  }\n  for (  JavacNode fieldNode : fields) {\n    JCVariableDecl field=(JCVariableDecl)fieldNode.get();\n    JCExpression expr;\n    JCExpression fieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n    if (getFieldType(fieldNode,fieldAccess) instanceof JCArrayTypeTree) {\n      boolean multiDim=((JCArrayTypeTree)field.vartype).elemtype instanceof JCArrayTypeTree;\n      boolean primitiveArray=((JCArrayTypeTree)field.vartype).elemtype instanceof JCPrimitiveTypeTree;\n      boolean useDeepTS=multiDim || !primitiveArray;\n      JCExpression hcMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepTS ? \"deepToString\" : \"toString\");\n      expr=maker.Apply(List.<JCExpression>nil(),hcMethod,List.<JCExpression>of(fieldAccessor));\n    }\n else     expr=fieldAccessor;\n    if (first) {\n      current=maker.Binary(getCtcInt(JCTree.class,\"PLUS\"),current,expr);\n      first=false;\n      continue;\n    }\n    if (includeFieldNames) {\n      current=maker.Binary(getCtcInt(JCTree.class,\"PLUS\"),current,maker.Literal(infix + fieldNode.getName() + \"=\"));\n    }\n else {\n      current=maker.Binary(getCtcInt(JCTree.class,\"PLUS\"),current,maker.Literal(infix));\n    }\n    current=maker.Binary(getCtcInt(JCTree.class,\"PLUS\"),current,expr);\n  }\n  if (!first)   current=maker.Binary(getCtcInt(JCTree.class,\"PLUS\"),current,maker.Literal(suffix));\n  JCStatement returnStatement=maker.Return(current);\n  JCBlock body=maker.Block(0,List.of(returnStatement));\n  return recursiveSetGeneratedBy(maker.MethodDef(mods,typeNode.toName(\"toString\"),returnType,List.<JCTypeParameter>nil(),List.<JCVariableDecl>nil(),List.<JCExpression>nil(),body,null),source);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 498,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 186,
        "startColumnNumber" : 3,
        "endLineNumber" : 186,
        "endColumnNumber" : 28
      },
      "nodeContext" : "prefix=typeName + \"()\";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 186,
    "startColumnNumber" : 23,
    "endLineNumber" : 186,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}