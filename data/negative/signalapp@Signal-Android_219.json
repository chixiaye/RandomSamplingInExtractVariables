{
  "id" : 219,
  "expression" : "minimumUnit.ordinal()",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/util/MemoryUnitFormat.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "minimumUnit.ordinal()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 48,
      "startColumnNumber" : 25,
      "endLineNumber" : 48,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 46
      },
      "nodeContext" : "unit.ordinal() < minimumUnit.ordinal()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (unit.ordinal() < minimumUnit.ordinal()) {\n  unit=minimumUnit;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 468,
        "startLineNumber" : 37,
        "startColumnNumber" : 106,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (bytes <= 0)   bytes=0;\n  int ordinal=bytes != 0 ? (int)(Math.log10(bytes) / 3) : 0;\n  if (ordinal >= MemoryUnitFormat.values().length) {\n    ordinal=MemoryUnitFormat.values().length - 1;\n  }\n  MemoryUnitFormat unit=MemoryUnitFormat.values()[ordinal];\n  if (unit.ordinal() < minimumUnit.ordinal()) {\n    unit=minimumUnit;\n  }\n  return (forceOneDp ? ONE_DP : OPTIONAL_ONE_DP).format(unit.fromBytes(bytes)) + unit.unitString;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.EnumDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 982,
        "startLineNumber" : 30,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Creates a string suitable to present to the user from the specified  {@param bytes}. It will pick a suitable unit of measure to display depending on the size of the bytes. It will not select a unit of measure lower than the specified  {@param minimumUnit}.\n * @param forceOneDp If true, will include 1 decimal place, even if 0. If false, will only show 1 dp when it's non-zero.\n */\npublic static String formatBytes(long bytes,@NonNull MemoryUnitFormat minimumUnit,boolean forceOneDp){\n  if (bytes <= 0)   bytes=0;\n  int ordinal=bytes != 0 ? (int)(Math.log10(bytes) / 3) : 0;\n  if (ordinal >= MemoryUnitFormat.values().length) {\n    ordinal=MemoryUnitFormat.values().length - 1;\n  }\n  MemoryUnitFormat unit=MemoryUnitFormat.values()[ordinal];\n  if (unit.ordinal() < minimumUnit.ordinal()) {\n    unit=minimumUnit;\n  }\n  return (forceOneDp ? ONE_DP : OPTIONAL_ONE_DP).format(unit.fromBytes(bytes)) + unit.unitString;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 104,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 46
      },
      "nodeContext" : "unit.ordinal() < minimumUnit.ordinal()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 48,
    "startColumnNumber" : 25,
    "endLineNumber" : 48,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}