{
  "id" : 356,
  "expression" : "consumer1.getListener()",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/test/src/test/java/org/apache/rocketmq/test/client/consumer/balance/NormalMsgStaticBalanceIT.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "consumer1.getListener()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 64,
      "startColumnNumber" : 12,
      "endLineNumber" : 64,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 63,
        "startColumnNumber" : 26,
        "endLineNumber" : 64,
        "endColumnNumber" : 61
      },
      "nodeContext" : "MQWait.waitConsumeAll(consumeTime,producer.getAllMsgBody(),consumer1.getListener(),consumer2.getListener())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 64,
        "endColumnNumber" : 61
      },
      "nodeContext" : "recvAll=MQWait.waitConsumeAll(consumeTime,producer.getAllMsgBody(),consumer1.getListener(),consumer2.getListener())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 62
      },
      "nodeContext" : "boolean recvAll=MQWait.waitConsumeAll(consumeTime,producer.getAllMsgBody(),consumer1.getListener(),consumer2.getListener());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1021,
        "startLineNumber" : 53,
        "startColumnNumber" : 42,
        "endLineNumber" : 73,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int msgSize=400;\n  RMQNormalConsumer consumer1=getConsumer(nsAddr,topic,\"*\",new RMQNormalListener());\n  RMQNormalConsumer consumer2=getConsumer(nsAddr,consumer1.getConsumerGroup(),topic,\"*\",new RMQNormalListener());\n  TestUtils.waitForSeconds(waitTime);\n  producer.send(msgSize);\n  Assert.assertEquals(\"Not all are sent\",msgSize,producer.getAllUndupMsgBody().size());\n  boolean recvAll=MQWait.waitConsumeAll(consumeTime,producer.getAllMsgBody(),consumer1.getListener(),consumer2.getListener());\n  assertThat(recvAll).isEqualTo(true);\n  boolean balance=VerifyUtils.verifyBalance(msgSize,VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),consumer1.getListener().getAllUndupMsgBody()).size(),VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),consumer2.getListener().getAllUndupMsgBody()).size());\n  assertThat(balance).isEqualTo(true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTwoConsumersBalance(){\n  int msgSize=400;\n  RMQNormalConsumer consumer1=getConsumer(nsAddr,topic,\"*\",new RMQNormalListener());\n  RMQNormalConsumer consumer2=getConsumer(nsAddr,consumer1.getConsumerGroup(),topic,\"*\",new RMQNormalListener());\n  TestUtils.waitForSeconds(waitTime);\n  producer.send(msgSize);\n  Assert.assertEquals(\"Not all are sent\",msgSize,producer.getAllUndupMsgBody().size());\n  boolean recvAll=MQWait.waitConsumeAll(consumeTime,producer.getAllMsgBody(),consumer1.getListener(),consumer2.getListener());\n  assertThat(recvAll).isEqualTo(true);\n  boolean balance=VerifyUtils.verifyBalance(msgSize,VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),consumer1.getListener().getAllUndupMsgBody()).size(),VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),consumer2.getListener().getAllUndupMsgBody()).size());\n  assertThat(balance).isEqualTo(true);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 127,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 63,
        "startColumnNumber" : 26,
        "endLineNumber" : 64,
        "endColumnNumber" : 61
      },
      "nodeContext" : "MQWait.waitConsumeAll(consumeTime,producer.getAllMsgBody(),consumer1.getListener(),consumer2.getListener())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "org.apache.rocketmq.test.listener.AbstractListener"
  }, {
    "nodeContext" : "consumer1.getListener()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 69,
      "startColumnNumber" : 16,
      "endLineNumber" : 69,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 69,
        "endColumnNumber" : 60
      },
      "nodeContext" : "consumer1.getListener().getAllUndupMsgBody()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 61
      },
      "nodeContext" : "VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),consumer1.getListener().getAllUndupMsgBody())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 68
      },
      "nodeContext" : "VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),consumer1.getListener().getAllUndupMsgBody()).size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 310,
        "startLineNumber" : 67,
        "startColumnNumber" : 26,
        "endLineNumber" : 71,
        "endColumnNumber" : 69
      },
      "nodeContext" : "VerifyUtils.verifyBalance(msgSize,VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),consumer1.getListener().getAllUndupMsgBody()).size(),VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),consumer2.getListener().getAllUndupMsgBody()).size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 30,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 320,
        "startLineNumber" : 67,
        "startColumnNumber" : 16,
        "endLineNumber" : 71,
        "endColumnNumber" : 69
      },
      "nodeContext" : "balance=VerifyUtils.verifyBalance(msgSize,VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),consumer1.getListener().getAllUndupMsgBody()).size(),VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),consumer2.getListener().getAllUndupMsgBody()).size())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 329,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 70
      },
      "nodeContext" : "boolean balance=VerifyUtils.verifyBalance(msgSize,VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),consumer1.getListener().getAllUndupMsgBody()).size(),VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),consumer2.getListener().getAllUndupMsgBody()).size());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1021,
        "startLineNumber" : 53,
        "startColumnNumber" : 42,
        "endLineNumber" : 73,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int msgSize=400;\n  RMQNormalConsumer consumer1=getConsumer(nsAddr,topic,\"*\",new RMQNormalListener());\n  RMQNormalConsumer consumer2=getConsumer(nsAddr,consumer1.getConsumerGroup(),topic,\"*\",new RMQNormalListener());\n  TestUtils.waitForSeconds(waitTime);\n  producer.send(msgSize);\n  Assert.assertEquals(\"Not all are sent\",msgSize,producer.getAllUndupMsgBody().size());\n  boolean recvAll=MQWait.waitConsumeAll(consumeTime,producer.getAllMsgBody(),consumer1.getListener(),consumer2.getListener());\n  assertThat(recvAll).isEqualTo(true);\n  boolean balance=VerifyUtils.verifyBalance(msgSize,VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),consumer1.getListener().getAllUndupMsgBody()).size(),VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),consumer2.getListener().getAllUndupMsgBody()).size());\n  assertThat(balance).isEqualTo(true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTwoConsumersBalance(){\n  int msgSize=400;\n  RMQNormalConsumer consumer1=getConsumer(nsAddr,topic,\"*\",new RMQNormalListener());\n  RMQNormalConsumer consumer2=getConsumer(nsAddr,consumer1.getConsumerGroup(),topic,\"*\",new RMQNormalListener());\n  TestUtils.waitForSeconds(waitTime);\n  producer.send(msgSize);\n  Assert.assertEquals(\"Not all are sent\",msgSize,producer.getAllUndupMsgBody().size());\n  boolean recvAll=MQWait.waitConsumeAll(consumeTime,producer.getAllMsgBody(),consumer1.getListener(),consumer2.getListener());\n  assertThat(recvAll).isEqualTo(true);\n  boolean balance=VerifyUtils.verifyBalance(msgSize,VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),consumer1.getListener().getAllUndupMsgBody()).size(),VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),consumer2.getListener().getAllUndupMsgBody()).size());\n  assertThat(balance).isEqualTo(true);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 127,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 69,
        "endColumnNumber" : 60
      },
      "nodeContext" : "consumer1.getListener().getAllUndupMsgBody()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "org.apache.rocketmq.test.listener.AbstractListener"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 64,
    "startColumnNumber" : 12,
    "endLineNumber" : 64,
    "endColumnNumber" : 35
  }, {
    "charLength" : 23,
    "startLineNumber" : 69,
    "startColumnNumber" : 16,
    "endLineNumber" : 69,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  } ]
}