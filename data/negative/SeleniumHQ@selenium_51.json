{
  "id" : 51,
  "expression" : "subStringWithoutSpace",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/src/org/openqa/selenium/support/ui/Select.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "subStringWithoutSpace",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 127,
      "startColumnNumber" : 20,
      "endLineNumber" : 127,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 127,
        "startColumnNumber" : 10,
        "endLineNumber" : 127,
        "endColumnNumber" : 42
      },
      "nodeContext" : "\"\".equals(subStringWithoutSpace)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 127,
        "startColumnNumber" : 6,
        "endLineNumber" : 135,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (\"\".equals(subStringWithoutSpace)) {\n  candidates=element.findElements(By.tagName(\"option\"));\n}\n else {\n  candidates=element.findElements(By.xpath(\".//option[contains(., \" + Quotes.escape(subStringWithoutSpace) + \")]\"));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 832,
        "startLineNumber" : 124,
        "startColumnNumber" : 40,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String subStringWithoutSpace=getLongestSubstringWithoutSpace(text);\n  List<WebElement> candidates;\n  if (\"\".equals(subStringWithoutSpace)) {\n    candidates=element.findElements(By.tagName(\"option\"));\n  }\n else {\n    candidates=element.findElements(By.xpath(\".//option[contains(., \" + Quotes.escape(subStringWithoutSpace) + \")]\"));\n  }\n  String trimmed=text.trim();\n  for (  WebElement option : candidates) {\n    if (trimmed.equals(option.getText().trim())) {\n      setSelected(option,true);\n      if (!isMultiple()) {\n        return;\n      }\n      matched=true;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 868,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!matched && text.contains(\" \")) {\n  String subStringWithoutSpace=getLongestSubstringWithoutSpace(text);\n  List<WebElement> candidates;\n  if (\"\".equals(subStringWithoutSpace)) {\n    candidates=element.findElements(By.tagName(\"option\"));\n  }\n else {\n    candidates=element.findElements(By.xpath(\".//option[contains(., \" + Quotes.escape(subStringWithoutSpace) + \")]\"));\n  }\n  String trimmed=text.trim();\n  for (  WebElement option : candidates) {\n    if (trimmed.equals(option.getText().trim())) {\n      setSelected(option,true);\n      if (!isMultiple()) {\n        return;\n      }\n      matched=true;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 98,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1338,
        "startLineNumber" : 111,
        "startColumnNumber" : 47,
        "endLineNumber" : 153,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<WebElement> options=element.findElements(By.xpath(\".//option[normalize-space(.) = \" + Quotes.escape(text) + \"]\"));\n  for (  WebElement option : options) {\n    setSelected(option,true);\n    if (!isMultiple()) {\n      return;\n    }\n  }\n  boolean matched=!options.isEmpty();\n  if (!matched && text.contains(\" \")) {\n    String subStringWithoutSpace=getLongestSubstringWithoutSpace(text);\n    List<WebElement> candidates;\n    if (\"\".equals(subStringWithoutSpace)) {\n      candidates=element.findElements(By.tagName(\"option\"));\n    }\n else {\n      candidates=element.findElements(By.xpath(\".//option[contains(., \" + Quotes.escape(subStringWithoutSpace) + \")]\"));\n    }\n    String trimmed=text.trim();\n    for (    WebElement option : candidates) {\n      if (trimmed.equals(option.getText().trim())) {\n        setSelected(option,true);\n        if (!isMultiple()) {\n          return;\n        }\n        matched=true;\n      }\n    }\n  }\n  if (!matched) {\n    throw new NoSuchElementException(\"Cannot locate option with text: \" + text);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1725,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 153,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Select all options that display text matching the argument. That is, when given \"Bar\" this would select an option like: &lt;option value=\"foo\"&gt;Bar&lt;/option&gt;\n * @param text The visible text to match against\n * @throws NoSuchElementException If no matching option elements are found\n */\n@Override public void selectByVisibleText(String text){\n  List<WebElement> options=element.findElements(By.xpath(\".//option[normalize-space(.) = \" + Quotes.escape(text) + \"]\"));\n  for (  WebElement option : options) {\n    setSelected(option,true);\n    if (!isMultiple()) {\n      return;\n    }\n  }\n  boolean matched=!options.isEmpty();\n  if (!matched && text.contains(\" \")) {\n    String subStringWithoutSpace=getLongestSubstringWithoutSpace(text);\n    List<WebElement> candidates;\n    if (\"\".equals(subStringWithoutSpace)) {\n      candidates=element.findElements(By.tagName(\"option\"));\n    }\n else {\n      candidates=element.findElements(By.xpath(\".//option[contains(., \" + Quotes.escape(subStringWithoutSpace) + \")]\"));\n    }\n    String trimmed=text.trim();\n    for (    WebElement option : candidates) {\n      if (trimmed.equals(option.getText().trim())) {\n        setSelected(option,true);\n        if (!isMultiple()) {\n          return;\n        }\n        matched=true;\n      }\n    }\n  }\n  if (!matched) {\n    throw new NoSuchElementException(\"Cannot locate option with text: \" + text);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 127,
        "startColumnNumber" : 10,
        "endLineNumber" : 127,
        "endColumnNumber" : 42
      },
      "nodeContext" : "\"\".equals(subStringWithoutSpace)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "subStringWithoutSpace",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 134,
      "startColumnNumber" : 54,
      "endLineNumber" : 134,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 134,
        "startColumnNumber" : 40,
        "endLineNumber" : 134,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Quotes.escape(subStringWithoutSpace)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 133,
        "startColumnNumber" : 40,
        "endLineNumber" : 134,
        "endColumnNumber" : 83
      },
      "nodeContext" : "\".//option[contains(., \" + Quotes.escape(subStringWithoutSpace) + \")]\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 133,
        "startColumnNumber" : 31,
        "endLineNumber" : 134,
        "endColumnNumber" : 84
      },
      "nodeContext" : "By.xpath(\".//option[contains(., \" + Quotes.escape(subStringWithoutSpace) + \")]\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 133,
        "startColumnNumber" : 10,
        "endLineNumber" : 134,
        "endColumnNumber" : 85
      },
      "nodeContext" : "element.findElements(By.xpath(\".//option[contains(., \" + Quotes.escape(subStringWithoutSpace) + \")]\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 85
      },
      "nodeContext" : "candidates=element.findElements(By.xpath(\".//option[contains(., \" + Quotes.escape(subStringWithoutSpace) + \")]\"))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 86
      },
      "nodeContext" : "candidates=element.findElements(By.xpath(\".//option[contains(., \" + Quotes.escape(subStringWithoutSpace) + \")]\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 130,
        "startColumnNumber" : 13,
        "endLineNumber" : 135,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  candidates=element.findElements(By.xpath(\".//option[contains(., \" + Quotes.escape(subStringWithoutSpace) + \")]\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 127,
        "startColumnNumber" : 6,
        "endLineNumber" : 135,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (\"\".equals(subStringWithoutSpace)) {\n  candidates=element.findElements(By.tagName(\"option\"));\n}\n else {\n  candidates=element.findElements(By.xpath(\".//option[contains(., \" + Quotes.escape(subStringWithoutSpace) + \")]\"));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 832,
        "startLineNumber" : 124,
        "startColumnNumber" : 40,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String subStringWithoutSpace=getLongestSubstringWithoutSpace(text);\n  List<WebElement> candidates;\n  if (\"\".equals(subStringWithoutSpace)) {\n    candidates=element.findElements(By.tagName(\"option\"));\n  }\n else {\n    candidates=element.findElements(By.xpath(\".//option[contains(., \" + Quotes.escape(subStringWithoutSpace) + \")]\"));\n  }\n  String trimmed=text.trim();\n  for (  WebElement option : candidates) {\n    if (trimmed.equals(option.getText().trim())) {\n      setSelected(option,true);\n      if (!isMultiple()) {\n        return;\n      }\n      matched=true;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 868,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!matched && text.contains(\" \")) {\n  String subStringWithoutSpace=getLongestSubstringWithoutSpace(text);\n  List<WebElement> candidates;\n  if (\"\".equals(subStringWithoutSpace)) {\n    candidates=element.findElements(By.tagName(\"option\"));\n  }\n else {\n    candidates=element.findElements(By.xpath(\".//option[contains(., \" + Quotes.escape(subStringWithoutSpace) + \")]\"));\n  }\n  String trimmed=text.trim();\n  for (  WebElement option : candidates) {\n    if (trimmed.equals(option.getText().trim())) {\n      setSelected(option,true);\n      if (!isMultiple()) {\n        return;\n      }\n      matched=true;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 98,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1338,
        "startLineNumber" : 111,
        "startColumnNumber" : 47,
        "endLineNumber" : 153,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<WebElement> options=element.findElements(By.xpath(\".//option[normalize-space(.) = \" + Quotes.escape(text) + \"]\"));\n  for (  WebElement option : options) {\n    setSelected(option,true);\n    if (!isMultiple()) {\n      return;\n    }\n  }\n  boolean matched=!options.isEmpty();\n  if (!matched && text.contains(\" \")) {\n    String subStringWithoutSpace=getLongestSubstringWithoutSpace(text);\n    List<WebElement> candidates;\n    if (\"\".equals(subStringWithoutSpace)) {\n      candidates=element.findElements(By.tagName(\"option\"));\n    }\n else {\n      candidates=element.findElements(By.xpath(\".//option[contains(., \" + Quotes.escape(subStringWithoutSpace) + \")]\"));\n    }\n    String trimmed=text.trim();\n    for (    WebElement option : candidates) {\n      if (trimmed.equals(option.getText().trim())) {\n        setSelected(option,true);\n        if (!isMultiple()) {\n          return;\n        }\n        matched=true;\n      }\n    }\n  }\n  if (!matched) {\n    throw new NoSuchElementException(\"Cannot locate option with text: \" + text);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1725,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 153,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Select all options that display text matching the argument. That is, when given \"Bar\" this would select an option like: &lt;option value=\"foo\"&gt;Bar&lt;/option&gt;\n * @param text The visible text to match against\n * @throws NoSuchElementException If no matching option elements are found\n */\n@Override public void selectByVisibleText(String text){\n  List<WebElement> options=element.findElements(By.xpath(\".//option[normalize-space(.) = \" + Quotes.escape(text) + \"]\"));\n  for (  WebElement option : options) {\n    setSelected(option,true);\n    if (!isMultiple()) {\n      return;\n    }\n  }\n  boolean matched=!options.isEmpty();\n  if (!matched && text.contains(\" \")) {\n    String subStringWithoutSpace=getLongestSubstringWithoutSpace(text);\n    List<WebElement> candidates;\n    if (\"\".equals(subStringWithoutSpace)) {\n      candidates=element.findElements(By.tagName(\"option\"));\n    }\n else {\n      candidates=element.findElements(By.xpath(\".//option[contains(., \" + Quotes.escape(subStringWithoutSpace) + \")]\"));\n    }\n    String trimmed=text.trim();\n    for (    WebElement option : candidates) {\n      if (trimmed.equals(option.getText().trim())) {\n        setSelected(option,true);\n        if (!isMultiple()) {\n          return;\n        }\n        matched=true;\n      }\n    }\n  }\n  if (!matched) {\n    throw new NoSuchElementException(\"Cannot locate option with text: \" + text);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 134,
        "startColumnNumber" : 40,
        "endLineNumber" : 134,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Quotes.escape(subStringWithoutSpace)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 127,
    "startColumnNumber" : 20,
    "endLineNumber" : 127,
    "endColumnNumber" : 41
  }, {
    "charLength" : 21,
    "startLineNumber" : 134,
    "startColumnNumber" : 54,
    "endLineNumber" : 134,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  } ]
}