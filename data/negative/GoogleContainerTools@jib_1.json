{
  "id" : 1,
  "expression" : "Files.getLastModifiedTime(fileA2)",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/test/java/com/google/cloud/tools/jib/image/ReproducibleLayerBuilderTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Files.getLastModifiedTime(fileA2)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 151,
      "startColumnNumber" : 62,
      "endLineNumber" : 151,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 151,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 96
      },
      "nodeContext" : "Assert.assertNotEquals(Files.getLastModifiedTime(fileA1),Files.getLastModifiedTime(fileA2))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 151,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 97
      },
      "nodeContext" : "Assert.assertNotEquals(Files.getLastModifiedTime(fileA1),Files.getLastModifiedTime(fileA2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1641,
        "startLineNumber" : 134,
        "startColumnNumber" : 62,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Path testRoot=temporaryFolder.getRoot().toPath();\n  Path root1=Files.createDirectories(testRoot.resolve(\"files1\"));\n  Path root2=Files.createDirectories(testRoot.resolve(\"files2\"));\n  String extractionPath=\"/somewhere\";\n  String contentA=\"abcabc\";\n  Path fileA1=createFile(root1,\"fileA\",contentA,10000);\n  Path fileA2=createFile(root2,\"fileA\",contentA,20000);\n  String contentB=\"yumyum\";\n  Path fileB1=createFile(root1,\"fileB\",contentB,10000);\n  Path fileB2=createFile(root2,\"fileB\",contentB,20000);\n  Assert.assertNotEquals(Files.getLastModifiedTime(fileA1),Files.getLastModifiedTime(fileA2));\n  Assert.assertNotEquals(Files.getLastModifiedTime(fileB1),Files.getLastModifiedTime(fileB2));\n  Blob layer=new ReproducibleLayerBuilder().addFiles(Arrays.asList(fileA1,fileB1),extractionPath).build().getBlob();\n  Blob reproduced=new ReproducibleLayerBuilder().addFiles(Arrays.asList(fileB2,fileA2),extractionPath).build().getBlob();\n  byte[] layerContent=Blobs.writeToByteArray(layer);\n  byte[] reproducedLayerContent=Blobs.writeToByteArray(reproduced);\n  Assert.assertThat(layerContent,CoreMatchers.is(reproducedLayerContent));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 190,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1709,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testToBlob_reproducibility() throws IOException {\n  Path testRoot=temporaryFolder.getRoot().toPath();\n  Path root1=Files.createDirectories(testRoot.resolve(\"files1\"));\n  Path root2=Files.createDirectories(testRoot.resolve(\"files2\"));\n  String extractionPath=\"/somewhere\";\n  String contentA=\"abcabc\";\n  Path fileA1=createFile(root1,\"fileA\",contentA,10000);\n  Path fileA2=createFile(root2,\"fileA\",contentA,20000);\n  String contentB=\"yumyum\";\n  Path fileB1=createFile(root1,\"fileB\",contentB,10000);\n  Path fileB2=createFile(root2,\"fileB\",contentB,20000);\n  Assert.assertNotEquals(Files.getLastModifiedTime(fileA1),Files.getLastModifiedTime(fileA2));\n  Assert.assertNotEquals(Files.getLastModifiedTime(fileB1),Files.getLastModifiedTime(fileB2));\n  Blob layer=new ReproducibleLayerBuilder().addFiles(Arrays.asList(fileA1,fileB1),extractionPath).build().getBlob();\n  Blob reproduced=new ReproducibleLayerBuilder().addFiles(Arrays.asList(fileB2,fileA2),extractionPath).build().getBlob();\n  byte[] layerContent=Blobs.writeToByteArray(layer);\n  byte[] reproducedLayerContent=Blobs.writeToByteArray(reproduced);\n  Assert.assertThat(layerContent,CoreMatchers.is(reproducedLayerContent));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 198,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 151,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 97
      },
      "nodeContext" : "Assert.assertNotEquals(Files.getLastModifiedTime(fileA1),Files.getLastModifiedTime(fileA2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.nio.file.attribute.FileTime"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 151,
    "startColumnNumber" : 62,
    "endLineNumber" : 151,
    "endColumnNumber" : 95
  } ],
  "layoutRelationDataList" : [ ]
}