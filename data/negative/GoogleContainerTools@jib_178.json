{
  "id" : 178,
  "expression" : "responseInputStream",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/test/java/com/google/cloud/tools/jib/http/ResponseTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "responseInputStream",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 44,
      "startColumnNumber" : 59,
      "endLineNumber" : 44,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 44,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Mockito.when(httpResponseMock.getContent()).thenReturn(responseInputStream)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 44,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Mockito.when(httpResponseMock.getContent()).thenReturn(responseInputStream);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 630,
        "startLineNumber" : 39,
        "startColumnNumber" : 50,
        "endLineNumber" : 54,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String expectedResponse=\"crepecake\\nis\\ngood!\";\n  ByteArrayInputStream responseInputStream=new ByteArrayInputStream(expectedResponse.getBytes(StandardCharsets.UTF_8));\n  Mockito.when(httpResponseMock.getContent()).thenReturn(responseInputStream);\n  Response response=new Response(httpResponseMock);\n  Blob responseStream=response.getBody();\n  ByteArrayOutputStream responseOutputStream=new ByteArrayOutputStream();\n  responseStream.writeTo(responseOutputStream);\n  Assert.assertEquals(expectedResponse,new String(responseOutputStream.toByteArray(),StandardCharsets.UTF_8));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 686,
        "startLineNumber" : 38,
        "startColumnNumber" : 2,
        "endLineNumber" : 54,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testGetContent() throws IOException {\n  String expectedResponse=\"crepecake\\nis\\ngood!\";\n  ByteArrayInputStream responseInputStream=new ByteArrayInputStream(expectedResponse.getBytes(StandardCharsets.UTF_8));\n  Mockito.when(httpResponseMock.getContent()).thenReturn(responseInputStream);\n  Response response=new Response(httpResponseMock);\n  Blob responseStream=response.getBody();\n  ByteArrayOutputStream responseOutputStream=new ByteArrayOutputStream();\n  responseStream.writeTo(responseOutputStream);\n  Assert.assertEquals(expectedResponse,new String(responseOutputStream.toByteArray(),StandardCharsets.UTF_8));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 83,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 44,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Mockito.when(httpResponseMock.getContent()).thenReturn(responseInputStream);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.io.ByteArrayInputStream"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 44,
    "startColumnNumber" : 59,
    "endLineNumber" : 44,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ ]
}