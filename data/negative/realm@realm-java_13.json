{
  "id" : 13,
  "expression" : "value",
  "projectName" : "realm@realm-java",
  "commitID" : "230b72bbfac2e1755e8c2039b0917e6137211778",
  "filePath" : "realm/realm-library/src/main/java/io/realm/internal/UncheckedRow.java",
  "occurrences" : 11,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "value",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 245,
      "startColumnNumber" : 12,
      "endLineNumber" : 245,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 245,
        "startColumnNumber" : 12,
        "endLineNumber" : 245,
        "endColumnNumber" : 25
      },
      "nodeContext" : "value == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1797,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value == null) {\n  nativeMixedSetNull(nativePtr,columnKey);\n}\n else {\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 151,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1847,
        "startLineNumber" : 242,
        "startColumnNumber" : 54,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1911,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void setMixed(long columnKey,Mixed value){\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 245,
        "startColumnNumber" : 12,
        "endLineNumber" : 245,
        "endColumnNumber" : 25
      },
      "nodeContext" : "value == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "io.realm.Mixed"
  }, {
    "nodeContext" : "value",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 248,
      "startColumnNumber" : 29,
      "endLineNumber" : 248,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 248,
        "startColumnNumber" : 29,
        "endLineNumber" : 248,
        "endColumnNumber" : 44
      },
      "nodeContext" : "value.getType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 248,
        "startColumnNumber" : 22,
        "endLineNumber" : 248,
        "endColumnNumber" : 44
      },
      "nodeContext" : "type=value.getType()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 248,
        "startColumnNumber" : 12,
        "endLineNumber" : 248,
        "endColumnNumber" : 45
      },
      "nodeContext" : "MixedType type=value.getType();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 247,
        "startColumnNumber" : 15,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1797,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value == null) {\n  nativeMixedSetNull(nativePtr,columnKey);\n}\n else {\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 151,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1847,
        "startLineNumber" : 242,
        "startColumnNumber" : 54,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1911,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void setMixed(long columnKey,Mixed value){\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 248,
        "startColumnNumber" : 12,
        "endLineNumber" : 248,
        "endColumnNumber" : 45
      },
      "nodeContext" : "MixedType type=value.getType();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.realm.Mixed"
  }, {
    "nodeContext" : "value",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 251,
      "startColumnNumber" : 61,
      "endLineNumber" : 251,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 251,
        "startColumnNumber" : 61,
        "endLineNumber" : 251,
        "endColumnNumber" : 78
      },
      "nodeContext" : "value.asInteger()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 251,
        "startColumnNumber" : 20,
        "endLineNumber" : 251,
        "endColumnNumber" : 79
      },
      "nodeContext" : "nativeMixedSetLong(nativePtr,columnKey,value.asInteger())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 251,
        "startColumnNumber" : 20,
        "endLineNumber" : 251,
        "endColumnNumber" : 80
      },
      "nodeContext" : "nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 283,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (type) {\ncase INTEGER:  nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\nbreak;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 132,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 247,
        "startColumnNumber" : 15,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1797,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value == null) {\n  nativeMixedSetNull(nativePtr,columnKey);\n}\n else {\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 151,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1847,
        "startLineNumber" : 242,
        "startColumnNumber" : 54,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1911,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void setMixed(long columnKey,Mixed value){\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 251,
        "startColumnNumber" : 20,
        "endLineNumber" : 251,
        "endColumnNumber" : 80
      },
      "nodeContext" : "nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.realm.Mixed"
  }, {
    "nodeContext" : "value",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 254,
      "startColumnNumber" : 64,
      "endLineNumber" : 254,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 254,
        "startColumnNumber" : 64,
        "endLineNumber" : 254,
        "endColumnNumber" : 81
      },
      "nodeContext" : "value.asBoolean()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 254,
        "startColumnNumber" : 20,
        "endLineNumber" : 254,
        "endColumnNumber" : 82
      },
      "nodeContext" : "nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 254,
        "startColumnNumber" : 20,
        "endLineNumber" : 254,
        "endColumnNumber" : 83
      },
      "nodeContext" : "nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 283,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (type) {\ncase INTEGER:  nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\nbreak;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 132,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 247,
        "startColumnNumber" : 15,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1797,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value == null) {\n  nativeMixedSetNull(nativePtr,columnKey);\n}\n else {\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 151,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1847,
        "startLineNumber" : 242,
        "startColumnNumber" : 54,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1911,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void setMixed(long columnKey,Mixed value){\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 254,
        "startColumnNumber" : 20,
        "endLineNumber" : 254,
        "endColumnNumber" : 83
      },
      "nodeContext" : "nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.realm.Mixed"
  }, {
    "nodeContext" : "value",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 257,
      "startColumnNumber" : 62,
      "endLineNumber" : 257,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 257,
        "startColumnNumber" : 62,
        "endLineNumber" : 257,
        "endColumnNumber" : 77
      },
      "nodeContext" : "value.asFloat()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 257,
        "startColumnNumber" : 20,
        "endLineNumber" : 257,
        "endColumnNumber" : 78
      },
      "nodeContext" : "nativeMixedSetFloat(nativePtr,columnKey,value.asFloat())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 257,
        "startColumnNumber" : 20,
        "endLineNumber" : 257,
        "endColumnNumber" : 79
      },
      "nodeContext" : "nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 283,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (type) {\ncase INTEGER:  nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\nbreak;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 132,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 247,
        "startColumnNumber" : 15,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1797,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value == null) {\n  nativeMixedSetNull(nativePtr,columnKey);\n}\n else {\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 151,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1847,
        "startLineNumber" : 242,
        "startColumnNumber" : 54,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1911,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void setMixed(long columnKey,Mixed value){\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 257,
        "startColumnNumber" : 20,
        "endLineNumber" : 257,
        "endColumnNumber" : 79
      },
      "nodeContext" : "nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.realm.Mixed"
  }, {
    "nodeContext" : "value",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 260,
      "startColumnNumber" : 63,
      "endLineNumber" : 260,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 260,
        "startColumnNumber" : 63,
        "endLineNumber" : 260,
        "endColumnNumber" : 79
      },
      "nodeContext" : "value.asDouble()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 260,
        "startColumnNumber" : 20,
        "endLineNumber" : 260,
        "endColumnNumber" : 80
      },
      "nodeContext" : "nativeMixedSetDouble(nativePtr,columnKey,value.asDouble())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 260,
        "startColumnNumber" : 20,
        "endLineNumber" : 260,
        "endColumnNumber" : 81
      },
      "nodeContext" : "nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 283,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (type) {\ncase INTEGER:  nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\nbreak;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 132,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 247,
        "startColumnNumber" : 15,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1797,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value == null) {\n  nativeMixedSetNull(nativePtr,columnKey);\n}\n else {\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 151,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1847,
        "startLineNumber" : 242,
        "startColumnNumber" : 54,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1911,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void setMixed(long columnKey,Mixed value){\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 260,
        "startColumnNumber" : 20,
        "endLineNumber" : 260,
        "endColumnNumber" : 81
      },
      "nodeContext" : "nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.realm.Mixed"
  }, {
    "nodeContext" : "value",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 263,
      "startColumnNumber" : 63,
      "endLineNumber" : 263,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 263,
        "startColumnNumber" : 63,
        "endLineNumber" : 263,
        "endColumnNumber" : 79
      },
      "nodeContext" : "value.asString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 263,
        "startColumnNumber" : 20,
        "endLineNumber" : 263,
        "endColumnNumber" : 80
      },
      "nodeContext" : "nativeMixedSetString(nativePtr,columnKey,value.asString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 263,
        "startColumnNumber" : 20,
        "endLineNumber" : 263,
        "endColumnNumber" : 81
      },
      "nodeContext" : "nativeMixedSetString(nativePtr,columnKey,value.asString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 283,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (type) {\ncase INTEGER:  nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\nbreak;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 132,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 247,
        "startColumnNumber" : 15,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1797,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value == null) {\n  nativeMixedSetNull(nativePtr,columnKey);\n}\n else {\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 151,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1847,
        "startLineNumber" : 242,
        "startColumnNumber" : 54,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1911,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void setMixed(long columnKey,Mixed value){\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 263,
        "startColumnNumber" : 20,
        "endLineNumber" : 263,
        "endColumnNumber" : 81
      },
      "nodeContext" : "nativeMixedSetString(nativePtr,columnKey,value.asString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.realm.Mixed"
  }, {
    "nodeContext" : "value",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 266,
      "startColumnNumber" : 66,
      "endLineNumber" : 266,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 266,
        "startColumnNumber" : 66,
        "endLineNumber" : 266,
        "endColumnNumber" : 82
      },
      "nodeContext" : "value.asBinary()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 266,
        "startColumnNumber" : 20,
        "endLineNumber" : 266,
        "endColumnNumber" : 83
      },
      "nodeContext" : "nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 266,
        "startColumnNumber" : 20,
        "endLineNumber" : 266,
        "endColumnNumber" : 84
      },
      "nodeContext" : "nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 283,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (type) {\ncase INTEGER:  nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\nbreak;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 132,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 247,
        "startColumnNumber" : 15,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1797,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value == null) {\n  nativeMixedSetNull(nativePtr,columnKey);\n}\n else {\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 151,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1847,
        "startLineNumber" : 242,
        "startColumnNumber" : 54,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1911,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void setMixed(long columnKey,Mixed value){\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 266,
        "startColumnNumber" : 20,
        "endLineNumber" : 266,
        "endColumnNumber" : 84
      },
      "nodeContext" : "nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.realm.Mixed"
  }, {
    "nodeContext" : "value",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 269,
      "startColumnNumber" : 66,
      "endLineNumber" : 269,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 269,
        "startColumnNumber" : 66,
        "endLineNumber" : 269,
        "endColumnNumber" : 80
      },
      "nodeContext" : "value.asDate()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 269,
        "startColumnNumber" : 66,
        "endLineNumber" : 269,
        "endColumnNumber" : 90
      },
      "nodeContext" : "value.asDate().getTime()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 269,
        "startColumnNumber" : 20,
        "endLineNumber" : 269,
        "endColumnNumber" : 91
      },
      "nodeContext" : "nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 269,
        "startColumnNumber" : 20,
        "endLineNumber" : 269,
        "endColumnNumber" : 92
      },
      "nodeContext" : "nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 283,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (type) {\ncase INTEGER:  nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\nbreak;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 132,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 247,
        "startColumnNumber" : 15,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1797,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value == null) {\n  nativeMixedSetNull(nativePtr,columnKey);\n}\n else {\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 151,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1847,
        "startLineNumber" : 242,
        "startColumnNumber" : 54,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1911,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void setMixed(long columnKey,Mixed value){\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 269,
        "startColumnNumber" : 20,
        "endLineNumber" : 269,
        "endColumnNumber" : 92
      },
      "nodeContext" : "nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.realm.Mixed"
  }, {
    "nodeContext" : "value",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 272,
      "startColumnNumber" : 65,
      "endLineNumber" : 272,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 272,
        "startColumnNumber" : 65,
        "endLineNumber" : 272,
        "endColumnNumber" : 83
      },
      "nodeContext" : "value.asObjectId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 272,
        "startColumnNumber" : 65,
        "endLineNumber" : 272,
        "endColumnNumber" : 94
      },
      "nodeContext" : "value.asObjectId().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 272,
        "startColumnNumber" : 20,
        "endLineNumber" : 272,
        "endColumnNumber" : 95
      },
      "nodeContext" : "nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 272,
        "startColumnNumber" : 20,
        "endLineNumber" : 272,
        "endColumnNumber" : 96
      },
      "nodeContext" : "nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 283,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (type) {\ncase INTEGER:  nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\nbreak;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 132,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 247,
        "startColumnNumber" : 15,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1797,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value == null) {\n  nativeMixedSetNull(nativePtr,columnKey);\n}\n else {\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 151,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1847,
        "startLineNumber" : 242,
        "startColumnNumber" : 54,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1911,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void setMixed(long columnKey,Mixed value){\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 272,
        "startColumnNumber" : 20,
        "endLineNumber" : 272,
        "endColumnNumber" : 96
      },
      "nodeContext" : "nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.realm.Mixed"
  }, {
    "nodeContext" : "value",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 275,
      "startColumnNumber" : 46,
      "endLineNumber" : 275,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 275,
        "startColumnNumber" : 46,
        "endLineNumber" : 275,
        "endColumnNumber" : 66
      },
      "nodeContext" : "value.asDecimal128()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 275,
        "startColumnNumber" : 31,
        "endLineNumber" : 275,
        "endColumnNumber" : 66
      },
      "nodeContext" : "decimalValue=value.asDecimal128()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 275,
        "startColumnNumber" : 20,
        "endLineNumber" : 275,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Decimal128 decimalValue=value.asDecimal128();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 283,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (type) {\ncase INTEGER:  nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\nbreak;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 132,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 247,
        "startColumnNumber" : 15,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1797,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value == null) {\n  nativeMixedSetNull(nativePtr,columnKey);\n}\n else {\n  MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 151,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1847,
        "startLineNumber" : 242,
        "startColumnNumber" : 54,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1911,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void setMixed(long columnKey,Mixed value){\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType type=value.getType();\nswitch (type) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed type: \" + type);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 275,
        "startColumnNumber" : 20,
        "endLineNumber" : 275,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Decimal128 decimalValue=value.asDecimal128();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.realm.Mixed"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 245,
    "startColumnNumber" : 12,
    "endLineNumber" : 245,
    "endColumnNumber" : 17
  }, {
    "charLength" : 5,
    "startLineNumber" : 248,
    "startColumnNumber" : 29,
    "endLineNumber" : 248,
    "endColumnNumber" : 34
  }, {
    "charLength" : 5,
    "startLineNumber" : 251,
    "startColumnNumber" : 61,
    "endLineNumber" : 251,
    "endColumnNumber" : 66
  }, {
    "charLength" : 5,
    "startLineNumber" : 254,
    "startColumnNumber" : 64,
    "endLineNumber" : 254,
    "endColumnNumber" : 69
  }, {
    "charLength" : 5,
    "startLineNumber" : 257,
    "startColumnNumber" : 62,
    "endLineNumber" : 257,
    "endColumnNumber" : 67
  }, {
    "charLength" : 5,
    "startLineNumber" : 260,
    "startColumnNumber" : 63,
    "endLineNumber" : 260,
    "endColumnNumber" : 68
  }, {
    "charLength" : 5,
    "startLineNumber" : 263,
    "startColumnNumber" : 63,
    "endLineNumber" : 263,
    "endColumnNumber" : 68
  }, {
    "charLength" : 5,
    "startLineNumber" : 266,
    "startColumnNumber" : 66,
    "endLineNumber" : 266,
    "endColumnNumber" : 71
  }, {
    "charLength" : 5,
    "startLineNumber" : 269,
    "startColumnNumber" : 66,
    "endLineNumber" : 269,
    "endColumnNumber" : 71
  }, {
    "charLength" : 5,
    "startLineNumber" : 272,
    "startColumnNumber" : 65,
    "endLineNumber" : 272,
    "endColumnNumber" : 70
  }, {
    "charLength" : 5,
    "startLineNumber" : 275,
    "startColumnNumber" : 46,
    "endLineNumber" : 275,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 3
  } ]
}