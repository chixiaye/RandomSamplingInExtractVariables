{
  "id" : 220,
  "expression" : "mockablePersonRepository.count()",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/reactive/ReactiveMongodbPanacheMockingTest.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mockablePersonRepository.count()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 84,
      "startColumnNumber" : 35,
      "endLineNumber" : 84,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 84,
        "startColumnNumber" : 35,
        "endLineNumber" : 84,
        "endColumnNumber" : 75
      },
      "nodeContext" : "mockablePersonRepository.count().await()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 84,
        "startColumnNumber" : 35,
        "endLineNumber" : 84,
        "endColumnNumber" : 91
      },
      "nodeContext" : "mockablePersonRepository.count().await().atMost(timeout)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 92
      },
      "nodeContext" : "Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 93
      },
      "nodeContext" : "Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2080,
        "startLineNumber" : 83,
        "startColumnNumber" : 64,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Uni<Long> uni23=Uni.createFrom().item(23L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni23);\n  Assertions.assertEquals(uni23,mockablePersonRepository.count());\n  Uni<Long> uni42=Uni.createFrom().item(42L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni42);\n  Assertions.assertEquals(uni42,mockablePersonRepository.count());\n  Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Mockito.verify(mockablePersonRepository,Mockito.times(4)).count();\n  ReactivePersonEntity p=new ReactivePersonEntity();\n  Uni<ReactivePersonEntity> uniP=Uni.createFrom().item(p);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenReturn(uniP);\n  Assertions.assertSame(uniP,mockablePersonRepository.findById(12L));\n  Assertions.assertNull(mockablePersonRepository.findById(42L).await().atMost(timeout));\n  mockablePersonRepository.persist(p);\n  Assertions.assertNull(p.id);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenThrow(new WebApplicationException());\n  try {\n    mockablePersonRepository.findById(12L);\n    Assertions.fail();\n  }\n catch (  WebApplicationException x) {\n  }\n  Uni<List<ReactivePersonEntity>> uniEmptyList=Uni.createFrom().item(Collections.emptyList());\n  Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(uniEmptyList);\n  Assertions.assertEquals(uniEmptyList,mockablePersonRepository.findOrdered());\n  Mockito.verify(mockablePersonRepository).findOrdered();\n  Mockito.verify(mockablePersonRepository,Mockito.atLeastOnce()).findById(Mockito.any());\n  Mockito.verify(mockablePersonRepository).persist(Mockito.<ReactivePersonEntity>any());\n  Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2150,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPanacheRepositoryMocking() throws Throwable {\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Uni<Long> uni23=Uni.createFrom().item(23L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni23);\n  Assertions.assertEquals(uni23,mockablePersonRepository.count());\n  Uni<Long> uni42=Uni.createFrom().item(42L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni42);\n  Assertions.assertEquals(uni42,mockablePersonRepository.count());\n  Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Mockito.verify(mockablePersonRepository,Mockito.times(4)).count();\n  ReactivePersonEntity p=new ReactivePersonEntity();\n  Uni<ReactivePersonEntity> uniP=Uni.createFrom().item(p);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenReturn(uniP);\n  Assertions.assertSame(uniP,mockablePersonRepository.findById(12L));\n  Assertions.assertNull(mockablePersonRepository.findById(42L).await().atMost(timeout));\n  mockablePersonRepository.persist(p);\n  Assertions.assertNull(p.id);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenThrow(new WebApplicationException());\n  try {\n    mockablePersonRepository.findById(12L);\n    Assertions.fail();\n  }\n catch (  WebApplicationException x) {\n  }\n  Uni<List<ReactivePersonEntity>> uniEmptyList=Uni.createFrom().item(Collections.emptyList());\n  Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(uniEmptyList);\n  Assertions.assertEquals(uniEmptyList,mockablePersonRepository.findOrdered());\n  Mockito.verify(mockablePersonRepository).findOrdered();\n  Mockito.verify(mockablePersonRepository,Mockito.atLeastOnce()).findById(Mockito.any());\n  Mockito.verify(mockablePersonRepository).persist(Mockito.<ReactivePersonEntity>any());\n  Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 93
      },
      "nodeContext" : "Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "io.quarkus.mongodb.panache.reactive.Uni<java.lang.Long>"
  }, {
    "nodeContext" : "mockablePersonRepository.count()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 87,
      "startColumnNumber" : 21,
      "endLineNumber" : 87,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Mockito.when(mockablePersonRepository.count())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Mockito.when(mockablePersonRepository.count()).thenReturn(uni23)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Mockito.when(mockablePersonRepository.count()).thenReturn(uni23);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2080,
        "startLineNumber" : 83,
        "startColumnNumber" : 64,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Uni<Long> uni23=Uni.createFrom().item(23L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni23);\n  Assertions.assertEquals(uni23,mockablePersonRepository.count());\n  Uni<Long> uni42=Uni.createFrom().item(42L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni42);\n  Assertions.assertEquals(uni42,mockablePersonRepository.count());\n  Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Mockito.verify(mockablePersonRepository,Mockito.times(4)).count();\n  ReactivePersonEntity p=new ReactivePersonEntity();\n  Uni<ReactivePersonEntity> uniP=Uni.createFrom().item(p);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenReturn(uniP);\n  Assertions.assertSame(uniP,mockablePersonRepository.findById(12L));\n  Assertions.assertNull(mockablePersonRepository.findById(42L).await().atMost(timeout));\n  mockablePersonRepository.persist(p);\n  Assertions.assertNull(p.id);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenThrow(new WebApplicationException());\n  try {\n    mockablePersonRepository.findById(12L);\n    Assertions.fail();\n  }\n catch (  WebApplicationException x) {\n  }\n  Uni<List<ReactivePersonEntity>> uniEmptyList=Uni.createFrom().item(Collections.emptyList());\n  Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(uniEmptyList);\n  Assertions.assertEquals(uniEmptyList,mockablePersonRepository.findOrdered());\n  Mockito.verify(mockablePersonRepository).findOrdered();\n  Mockito.verify(mockablePersonRepository,Mockito.atLeastOnce()).findById(Mockito.any());\n  Mockito.verify(mockablePersonRepository).persist(Mockito.<ReactivePersonEntity>any());\n  Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2150,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPanacheRepositoryMocking() throws Throwable {\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Uni<Long> uni23=Uni.createFrom().item(23L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni23);\n  Assertions.assertEquals(uni23,mockablePersonRepository.count());\n  Uni<Long> uni42=Uni.createFrom().item(42L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni42);\n  Assertions.assertEquals(uni42,mockablePersonRepository.count());\n  Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Mockito.verify(mockablePersonRepository,Mockito.times(4)).count();\n  ReactivePersonEntity p=new ReactivePersonEntity();\n  Uni<ReactivePersonEntity> uniP=Uni.createFrom().item(p);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenReturn(uniP);\n  Assertions.assertSame(uniP,mockablePersonRepository.findById(12L));\n  Assertions.assertNull(mockablePersonRepository.findById(42L).await().atMost(timeout));\n  mockablePersonRepository.persist(p);\n  Assertions.assertNull(p.id);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenThrow(new WebApplicationException());\n  try {\n    mockablePersonRepository.findById(12L);\n    Assertions.fail();\n  }\n catch (  WebApplicationException x) {\n  }\n  Uni<List<ReactivePersonEntity>> uniEmptyList=Uni.createFrom().item(Collections.emptyList());\n  Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(uniEmptyList);\n  Assertions.assertEquals(uniEmptyList,mockablePersonRepository.findOrdered());\n  Mockito.verify(mockablePersonRepository).findOrdered();\n  Mockito.verify(mockablePersonRepository,Mockito.atLeastOnce()).findById(Mockito.any());\n  Mockito.verify(mockablePersonRepository).persist(Mockito.<ReactivePersonEntity>any());\n  Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Mockito.when(mockablePersonRepository.count()).thenReturn(uni23);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "io.quarkus.mongodb.panache.reactive.Uni<java.lang.Long>"
  }, {
    "nodeContext" : "mockablePersonRepository.count()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 88,
      "startColumnNumber" : 39,
      "endLineNumber" : 88,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Assertions.assertEquals(uni23,mockablePersonRepository.count())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Assertions.assertEquals(uni23,mockablePersonRepository.count());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2080,
        "startLineNumber" : 83,
        "startColumnNumber" : 64,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Uni<Long> uni23=Uni.createFrom().item(23L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni23);\n  Assertions.assertEquals(uni23,mockablePersonRepository.count());\n  Uni<Long> uni42=Uni.createFrom().item(42L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni42);\n  Assertions.assertEquals(uni42,mockablePersonRepository.count());\n  Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Mockito.verify(mockablePersonRepository,Mockito.times(4)).count();\n  ReactivePersonEntity p=new ReactivePersonEntity();\n  Uni<ReactivePersonEntity> uniP=Uni.createFrom().item(p);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenReturn(uniP);\n  Assertions.assertSame(uniP,mockablePersonRepository.findById(12L));\n  Assertions.assertNull(mockablePersonRepository.findById(42L).await().atMost(timeout));\n  mockablePersonRepository.persist(p);\n  Assertions.assertNull(p.id);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenThrow(new WebApplicationException());\n  try {\n    mockablePersonRepository.findById(12L);\n    Assertions.fail();\n  }\n catch (  WebApplicationException x) {\n  }\n  Uni<List<ReactivePersonEntity>> uniEmptyList=Uni.createFrom().item(Collections.emptyList());\n  Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(uniEmptyList);\n  Assertions.assertEquals(uniEmptyList,mockablePersonRepository.findOrdered());\n  Mockito.verify(mockablePersonRepository).findOrdered();\n  Mockito.verify(mockablePersonRepository,Mockito.atLeastOnce()).findById(Mockito.any());\n  Mockito.verify(mockablePersonRepository).persist(Mockito.<ReactivePersonEntity>any());\n  Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2150,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPanacheRepositoryMocking() throws Throwable {\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Uni<Long> uni23=Uni.createFrom().item(23L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni23);\n  Assertions.assertEquals(uni23,mockablePersonRepository.count());\n  Uni<Long> uni42=Uni.createFrom().item(42L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni42);\n  Assertions.assertEquals(uni42,mockablePersonRepository.count());\n  Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Mockito.verify(mockablePersonRepository,Mockito.times(4)).count();\n  ReactivePersonEntity p=new ReactivePersonEntity();\n  Uni<ReactivePersonEntity> uniP=Uni.createFrom().item(p);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenReturn(uniP);\n  Assertions.assertSame(uniP,mockablePersonRepository.findById(12L));\n  Assertions.assertNull(mockablePersonRepository.findById(42L).await().atMost(timeout));\n  mockablePersonRepository.persist(p);\n  Assertions.assertNull(p.id);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenThrow(new WebApplicationException());\n  try {\n    mockablePersonRepository.findById(12L);\n    Assertions.fail();\n  }\n catch (  WebApplicationException x) {\n  }\n  Uni<List<ReactivePersonEntity>> uniEmptyList=Uni.createFrom().item(Collections.emptyList());\n  Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(uniEmptyList);\n  Assertions.assertEquals(uniEmptyList,mockablePersonRepository.findOrdered());\n  Mockito.verify(mockablePersonRepository).findOrdered();\n  Mockito.verify(mockablePersonRepository,Mockito.atLeastOnce()).findById(Mockito.any());\n  Mockito.verify(mockablePersonRepository).persist(Mockito.<ReactivePersonEntity>any());\n  Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Assertions.assertEquals(uni23,mockablePersonRepository.count());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "io.quarkus.mongodb.panache.reactive.Uni<java.lang.Long>"
  }, {
    "nodeContext" : "mockablePersonRepository.count()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 91,
      "startColumnNumber" : 21,
      "endLineNumber" : 91,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Mockito.when(mockablePersonRepository.count())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Mockito.when(mockablePersonRepository.count()).thenReturn(uni42)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Mockito.when(mockablePersonRepository.count()).thenReturn(uni42);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2080,
        "startLineNumber" : 83,
        "startColumnNumber" : 64,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Uni<Long> uni23=Uni.createFrom().item(23L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni23);\n  Assertions.assertEquals(uni23,mockablePersonRepository.count());\n  Uni<Long> uni42=Uni.createFrom().item(42L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni42);\n  Assertions.assertEquals(uni42,mockablePersonRepository.count());\n  Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Mockito.verify(mockablePersonRepository,Mockito.times(4)).count();\n  ReactivePersonEntity p=new ReactivePersonEntity();\n  Uni<ReactivePersonEntity> uniP=Uni.createFrom().item(p);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenReturn(uniP);\n  Assertions.assertSame(uniP,mockablePersonRepository.findById(12L));\n  Assertions.assertNull(mockablePersonRepository.findById(42L).await().atMost(timeout));\n  mockablePersonRepository.persist(p);\n  Assertions.assertNull(p.id);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenThrow(new WebApplicationException());\n  try {\n    mockablePersonRepository.findById(12L);\n    Assertions.fail();\n  }\n catch (  WebApplicationException x) {\n  }\n  Uni<List<ReactivePersonEntity>> uniEmptyList=Uni.createFrom().item(Collections.emptyList());\n  Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(uniEmptyList);\n  Assertions.assertEquals(uniEmptyList,mockablePersonRepository.findOrdered());\n  Mockito.verify(mockablePersonRepository).findOrdered();\n  Mockito.verify(mockablePersonRepository,Mockito.atLeastOnce()).findById(Mockito.any());\n  Mockito.verify(mockablePersonRepository).persist(Mockito.<ReactivePersonEntity>any());\n  Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2150,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPanacheRepositoryMocking() throws Throwable {\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Uni<Long> uni23=Uni.createFrom().item(23L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni23);\n  Assertions.assertEquals(uni23,mockablePersonRepository.count());\n  Uni<Long> uni42=Uni.createFrom().item(42L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni42);\n  Assertions.assertEquals(uni42,mockablePersonRepository.count());\n  Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Mockito.verify(mockablePersonRepository,Mockito.times(4)).count();\n  ReactivePersonEntity p=new ReactivePersonEntity();\n  Uni<ReactivePersonEntity> uniP=Uni.createFrom().item(p);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenReturn(uniP);\n  Assertions.assertSame(uniP,mockablePersonRepository.findById(12L));\n  Assertions.assertNull(mockablePersonRepository.findById(42L).await().atMost(timeout));\n  mockablePersonRepository.persist(p);\n  Assertions.assertNull(p.id);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenThrow(new WebApplicationException());\n  try {\n    mockablePersonRepository.findById(12L);\n    Assertions.fail();\n  }\n catch (  WebApplicationException x) {\n  }\n  Uni<List<ReactivePersonEntity>> uniEmptyList=Uni.createFrom().item(Collections.emptyList());\n  Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(uniEmptyList);\n  Assertions.assertEquals(uniEmptyList,mockablePersonRepository.findOrdered());\n  Mockito.verify(mockablePersonRepository).findOrdered();\n  Mockito.verify(mockablePersonRepository,Mockito.atLeastOnce()).findById(Mockito.any());\n  Mockito.verify(mockablePersonRepository).persist(Mockito.<ReactivePersonEntity>any());\n  Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Mockito.when(mockablePersonRepository.count()).thenReturn(uni42);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "io.quarkus.mongodb.panache.reactive.Uni<java.lang.Long>"
  }, {
    "nodeContext" : "mockablePersonRepository.count()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 92,
      "startColumnNumber" : 39,
      "endLineNumber" : 92,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Assertions.assertEquals(uni42,mockablePersonRepository.count())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Assertions.assertEquals(uni42,mockablePersonRepository.count());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2080,
        "startLineNumber" : 83,
        "startColumnNumber" : 64,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Uni<Long> uni23=Uni.createFrom().item(23L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni23);\n  Assertions.assertEquals(uni23,mockablePersonRepository.count());\n  Uni<Long> uni42=Uni.createFrom().item(42L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni42);\n  Assertions.assertEquals(uni42,mockablePersonRepository.count());\n  Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Mockito.verify(mockablePersonRepository,Mockito.times(4)).count();\n  ReactivePersonEntity p=new ReactivePersonEntity();\n  Uni<ReactivePersonEntity> uniP=Uni.createFrom().item(p);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenReturn(uniP);\n  Assertions.assertSame(uniP,mockablePersonRepository.findById(12L));\n  Assertions.assertNull(mockablePersonRepository.findById(42L).await().atMost(timeout));\n  mockablePersonRepository.persist(p);\n  Assertions.assertNull(p.id);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenThrow(new WebApplicationException());\n  try {\n    mockablePersonRepository.findById(12L);\n    Assertions.fail();\n  }\n catch (  WebApplicationException x) {\n  }\n  Uni<List<ReactivePersonEntity>> uniEmptyList=Uni.createFrom().item(Collections.emptyList());\n  Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(uniEmptyList);\n  Assertions.assertEquals(uniEmptyList,mockablePersonRepository.findOrdered());\n  Mockito.verify(mockablePersonRepository).findOrdered();\n  Mockito.verify(mockablePersonRepository,Mockito.atLeastOnce()).findById(Mockito.any());\n  Mockito.verify(mockablePersonRepository).persist(Mockito.<ReactivePersonEntity>any());\n  Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2150,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPanacheRepositoryMocking() throws Throwable {\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Uni<Long> uni23=Uni.createFrom().item(23L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni23);\n  Assertions.assertEquals(uni23,mockablePersonRepository.count());\n  Uni<Long> uni42=Uni.createFrom().item(42L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni42);\n  Assertions.assertEquals(uni42,mockablePersonRepository.count());\n  Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Mockito.verify(mockablePersonRepository,Mockito.times(4)).count();\n  ReactivePersonEntity p=new ReactivePersonEntity();\n  Uni<ReactivePersonEntity> uniP=Uni.createFrom().item(p);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenReturn(uniP);\n  Assertions.assertSame(uniP,mockablePersonRepository.findById(12L));\n  Assertions.assertNull(mockablePersonRepository.findById(42L).await().atMost(timeout));\n  mockablePersonRepository.persist(p);\n  Assertions.assertNull(p.id);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenThrow(new WebApplicationException());\n  try {\n    mockablePersonRepository.findById(12L);\n    Assertions.fail();\n  }\n catch (  WebApplicationException x) {\n  }\n  Uni<List<ReactivePersonEntity>> uniEmptyList=Uni.createFrom().item(Collections.emptyList());\n  Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(uniEmptyList);\n  Assertions.assertEquals(uniEmptyList,mockablePersonRepository.findOrdered());\n  Mockito.verify(mockablePersonRepository).findOrdered();\n  Mockito.verify(mockablePersonRepository,Mockito.atLeastOnce()).findById(Mockito.any());\n  Mockito.verify(mockablePersonRepository).persist(Mockito.<ReactivePersonEntity>any());\n  Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Assertions.assertEquals(uni42,mockablePersonRepository.count());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "io.quarkus.mongodb.panache.reactive.Uni<java.lang.Long>"
  }, {
    "nodeContext" : "mockablePersonRepository.count()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 94,
      "startColumnNumber" : 21,
      "endLineNumber" : 94,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Mockito.when(mockablePersonRepository.count())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Mockito.when(mockablePersonRepository.count()).thenCallRealMethod()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2080,
        "startLineNumber" : 83,
        "startColumnNumber" : 64,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Uni<Long> uni23=Uni.createFrom().item(23L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni23);\n  Assertions.assertEquals(uni23,mockablePersonRepository.count());\n  Uni<Long> uni42=Uni.createFrom().item(42L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni42);\n  Assertions.assertEquals(uni42,mockablePersonRepository.count());\n  Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Mockito.verify(mockablePersonRepository,Mockito.times(4)).count();\n  ReactivePersonEntity p=new ReactivePersonEntity();\n  Uni<ReactivePersonEntity> uniP=Uni.createFrom().item(p);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenReturn(uniP);\n  Assertions.assertSame(uniP,mockablePersonRepository.findById(12L));\n  Assertions.assertNull(mockablePersonRepository.findById(42L).await().atMost(timeout));\n  mockablePersonRepository.persist(p);\n  Assertions.assertNull(p.id);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenThrow(new WebApplicationException());\n  try {\n    mockablePersonRepository.findById(12L);\n    Assertions.fail();\n  }\n catch (  WebApplicationException x) {\n  }\n  Uni<List<ReactivePersonEntity>> uniEmptyList=Uni.createFrom().item(Collections.emptyList());\n  Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(uniEmptyList);\n  Assertions.assertEquals(uniEmptyList,mockablePersonRepository.findOrdered());\n  Mockito.verify(mockablePersonRepository).findOrdered();\n  Mockito.verify(mockablePersonRepository,Mockito.atLeastOnce()).findById(Mockito.any());\n  Mockito.verify(mockablePersonRepository).persist(Mockito.<ReactivePersonEntity>any());\n  Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2150,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPanacheRepositoryMocking() throws Throwable {\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Uni<Long> uni23=Uni.createFrom().item(23L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni23);\n  Assertions.assertEquals(uni23,mockablePersonRepository.count());\n  Uni<Long> uni42=Uni.createFrom().item(42L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni42);\n  Assertions.assertEquals(uni42,mockablePersonRepository.count());\n  Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Mockito.verify(mockablePersonRepository,Mockito.times(4)).count();\n  ReactivePersonEntity p=new ReactivePersonEntity();\n  Uni<ReactivePersonEntity> uniP=Uni.createFrom().item(p);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenReturn(uniP);\n  Assertions.assertSame(uniP,mockablePersonRepository.findById(12L));\n  Assertions.assertNull(mockablePersonRepository.findById(42L).await().atMost(timeout));\n  mockablePersonRepository.persist(p);\n  Assertions.assertNull(p.id);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenThrow(new WebApplicationException());\n  try {\n    mockablePersonRepository.findById(12L);\n    Assertions.fail();\n  }\n catch (  WebApplicationException x) {\n  }\n  Uni<List<ReactivePersonEntity>> uniEmptyList=Uni.createFrom().item(Collections.emptyList());\n  Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(uniEmptyList);\n  Assertions.assertEquals(uniEmptyList,mockablePersonRepository.findOrdered());\n  Mockito.verify(mockablePersonRepository).findOrdered();\n  Mockito.verify(mockablePersonRepository,Mockito.atLeastOnce()).findById(Mockito.any());\n  Mockito.verify(mockablePersonRepository).persist(Mockito.<ReactivePersonEntity>any());\n  Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "io.quarkus.mongodb.panache.reactive.Uni<java.lang.Long>"
  }, {
    "nodeContext" : "mockablePersonRepository.count()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 95,
      "startColumnNumber" : 35,
      "endLineNumber" : 95,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 95,
        "startColumnNumber" : 35,
        "endLineNumber" : 95,
        "endColumnNumber" : 75
      },
      "nodeContext" : "mockablePersonRepository.count().await()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 95,
        "startColumnNumber" : 35,
        "endLineNumber" : 95,
        "endColumnNumber" : 91
      },
      "nodeContext" : "mockablePersonRepository.count().await().atMost(timeout)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 92
      },
      "nodeContext" : "Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 93
      },
      "nodeContext" : "Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2080,
        "startLineNumber" : 83,
        "startColumnNumber" : 64,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Uni<Long> uni23=Uni.createFrom().item(23L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni23);\n  Assertions.assertEquals(uni23,mockablePersonRepository.count());\n  Uni<Long> uni42=Uni.createFrom().item(42L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni42);\n  Assertions.assertEquals(uni42,mockablePersonRepository.count());\n  Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Mockito.verify(mockablePersonRepository,Mockito.times(4)).count();\n  ReactivePersonEntity p=new ReactivePersonEntity();\n  Uni<ReactivePersonEntity> uniP=Uni.createFrom().item(p);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenReturn(uniP);\n  Assertions.assertSame(uniP,mockablePersonRepository.findById(12L));\n  Assertions.assertNull(mockablePersonRepository.findById(42L).await().atMost(timeout));\n  mockablePersonRepository.persist(p);\n  Assertions.assertNull(p.id);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenThrow(new WebApplicationException());\n  try {\n    mockablePersonRepository.findById(12L);\n    Assertions.fail();\n  }\n catch (  WebApplicationException x) {\n  }\n  Uni<List<ReactivePersonEntity>> uniEmptyList=Uni.createFrom().item(Collections.emptyList());\n  Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(uniEmptyList);\n  Assertions.assertEquals(uniEmptyList,mockablePersonRepository.findOrdered());\n  Mockito.verify(mockablePersonRepository).findOrdered();\n  Mockito.verify(mockablePersonRepository,Mockito.atLeastOnce()).findById(Mockito.any());\n  Mockito.verify(mockablePersonRepository).persist(Mockito.<ReactivePersonEntity>any());\n  Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2150,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPanacheRepositoryMocking() throws Throwable {\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Uni<Long> uni23=Uni.createFrom().item(23L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni23);\n  Assertions.assertEquals(uni23,mockablePersonRepository.count());\n  Uni<Long> uni42=Uni.createFrom().item(42L);\n  Mockito.when(mockablePersonRepository.count()).thenReturn(uni42);\n  Assertions.assertEquals(uni42,mockablePersonRepository.count());\n  Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n  Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n  Mockito.verify(mockablePersonRepository,Mockito.times(4)).count();\n  ReactivePersonEntity p=new ReactivePersonEntity();\n  Uni<ReactivePersonEntity> uniP=Uni.createFrom().item(p);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenReturn(uniP);\n  Assertions.assertSame(uniP,mockablePersonRepository.findById(12L));\n  Assertions.assertNull(mockablePersonRepository.findById(42L).await().atMost(timeout));\n  mockablePersonRepository.persist(p);\n  Assertions.assertNull(p.id);\n  Mockito.when(mockablePersonRepository.findById(12L)).thenThrow(new WebApplicationException());\n  try {\n    mockablePersonRepository.findById(12L);\n    Assertions.fail();\n  }\n catch (  WebApplicationException x) {\n  }\n  Uni<List<ReactivePersonEntity>> uniEmptyList=Uni.createFrom().item(Collections.emptyList());\n  Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(uniEmptyList);\n  Assertions.assertEquals(uniEmptyList,mockablePersonRepository.findOrdered());\n  Mockito.verify(mockablePersonRepository).findOrdered();\n  Mockito.verify(mockablePersonRepository,Mockito.atLeastOnce()).findById(Mockito.any());\n  Mockito.verify(mockablePersonRepository).persist(Mockito.<ReactivePersonEntity>any());\n  Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 93
      },
      "nodeContext" : "Assertions.assertEquals(0,mockablePersonRepository.count().await().atMost(timeout));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "io.quarkus.mongodb.panache.reactive.Uni<java.lang.Long>"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 84,
    "startColumnNumber" : 35,
    "endLineNumber" : 84,
    "endColumnNumber" : 67
  }, {
    "charLength" : 32,
    "startLineNumber" : 87,
    "startColumnNumber" : 21,
    "endLineNumber" : 87,
    "endColumnNumber" : 53
  }, {
    "charLength" : 32,
    "startLineNumber" : 88,
    "startColumnNumber" : 39,
    "endLineNumber" : 88,
    "endColumnNumber" : 71
  }, {
    "charLength" : 32,
    "startLineNumber" : 91,
    "startColumnNumber" : 21,
    "endLineNumber" : 91,
    "endColumnNumber" : 53
  }, {
    "charLength" : 32,
    "startLineNumber" : 92,
    "startColumnNumber" : 39,
    "endLineNumber" : 92,
    "endColumnNumber" : 71
  }, {
    "charLength" : 32,
    "startLineNumber" : 94,
    "startColumnNumber" : 21,
    "endLineNumber" : 94,
    "endColumnNumber" : 53
  }, {
    "charLength" : 32,
    "startLineNumber" : 95,
    "startColumnNumber" : 35,
    "endLineNumber" : 95,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  } ]
}