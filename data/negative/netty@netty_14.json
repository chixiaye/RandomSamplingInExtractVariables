{
  "id" : 14,
  "expression" : "')'",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/testsuite/src/main/java/io/netty/testsuite/transport/socket/TrafficShapingHandlerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "')'",
    "nodeType" : "CharacterLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 439,
      "startColumnNumber" : 58,
      "endLineNumber" : 439,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 438,
        "startColumnNumber" : 30,
        "endLineNumber" : 439,
        "endColumnNumber" : 61
      },
      "nodeContext" : "\"Step: \" + step + \" Interval: \"+ (lastTimestamp - currentLastTime)+ \" compareTo \"+ minimalWait+ \" (\"+ ar+ ')'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 438,
        "startColumnNumber" : 12,
        "endLineNumber" : 439,
        "endColumnNumber" : 62
      },
      "nodeContext" : "loggerClient.info(\"Step: \" + step + \" Interval: \"+ (lastTimestamp - currentLastTime)+ \" compareTo \"+ minimalWait+ \" (\"+ ar+ ')')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 438,
        "startColumnNumber" : 12,
        "endLineNumber" : 439,
        "endColumnNumber" : 63
      },
      "nodeContext" : "loggerClient.info(\"Step: \" + step + \" Interval: \"+ (lastTimestamp - currentLastTime)+ \" compareTo \"+ minimalWait+ \" (\"+ ar+ ')');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 420,
        "startColumnNumber" : 92,
        "endLineNumber" : 453,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long lastTimestamp=0;\n  loggerClient.debug(\"Step: \" + step + \" Read: \"+ in.readableBytes() / 8 + \" blocks\");\n  while (in.isReadable()) {\n    lastTimestamp=in.readLong();\n    multipleMessage[step]--;\n  }\n  if (multipleMessage[step] > 0) {\n    return;\n  }\n  long minimalWait=minimalWaitBetween != null ? minimalWaitBetween[step] : 0;\n  int ar=0;\n  if (autoRead != null) {\n    if (step > 0 && autoRead[step - 1] != 0) {\n      ar=autoRead[step - 1];\n    }\n  }\n  loggerClient.info(\"Step: \" + step + \" Interval: \"+ (lastTimestamp - currentLastTime)+ \" compareTo \"+ minimalWait+ \" (\"+ ar+ ')');\n  assertTrue(lastTimestamp - currentLastTime >= minimalWait,\"The interval of time is incorrect:\" + (lastTimestamp - currentLastTime) + \" not> \"+ minimalWait);\n  currentLastTime=lastTimestamp;\n  step++;\n  if (multipleMessage.length > step) {\n    int nb=multipleMessage[step];\n    for (int i=0; i < nb; i++) {\n      channel.write(channel.alloc().buffer().writeBytes(data));\n    }\n    channel.flush();\n  }\n else {\n    promise.setSuccess(true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 176,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1618,
        "startLineNumber" : 419,
        "startColumnNumber" : 8,
        "endLineNumber" : 453,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void messageReceived(ChannelHandlerContext ctx,ByteBuf in) throws Exception {\n  long lastTimestamp=0;\n  loggerClient.debug(\"Step: \" + step + \" Read: \"+ in.readableBytes() / 8 + \" blocks\");\n  while (in.isReadable()) {\n    lastTimestamp=in.readLong();\n    multipleMessage[step]--;\n  }\n  if (multipleMessage[step] > 0) {\n    return;\n  }\n  long minimalWait=minimalWaitBetween != null ? minimalWaitBetween[step] : 0;\n  int ar=0;\n  if (autoRead != null) {\n    if (step > 0 && autoRead[step - 1] != 0) {\n      ar=autoRead[step - 1];\n    }\n  }\n  loggerClient.info(\"Step: \" + step + \" Interval: \"+ (lastTimestamp - currentLastTime)+ \" compareTo \"+ minimalWait+ \" (\"+ ar+ ')');\n  assertTrue(lastTimestamp - currentLastTime >= minimalWait,\"The interval of time is incorrect:\" + (lastTimestamp - currentLastTime) + \" not> \"+ minimalWait);\n  currentLastTime=lastTimestamp;\n  step++;\n  if (multipleMessage.length > step) {\n    int nb=multipleMessage[step];\n    for (int i=0; i < nb; i++) {\n      channel.write(channel.alloc().buffer().writeBytes(data));\n    }\n    channel.flush();\n  }\n else {\n    promise.setSuccess(true);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 438,
        "startColumnNumber" : 30,
        "endLineNumber" : 439,
        "endColumnNumber" : 61
      },
      "nodeContext" : "\"Step: \" + step + \" Interval: \"+ (lastTimestamp - currentLastTime)+ \" compareTo \"+ minimalWait+ \" (\"+ ar+ ')'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 439,
    "startColumnNumber" : 58,
    "endLineNumber" : 439,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}