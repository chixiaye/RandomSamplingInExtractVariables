{
  "id" : 509,
  "expression" : "ComponentMainThreadExecutorServiceAdapter",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/test/java/org/apache/flink/runtime/executiongraph/ExecutionGraphVariousFailuesTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ComponentMainThreadExecutorServiceAdapter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 48,
      "startColumnNumber" : 32,
      "endLineNumber" : 48,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 48,
        "startColumnNumber" : 32,
        "endLineNumber" : 48,
        "endColumnNumber" : 89
      },
      "nodeContext" : "ComponentMainThreadExecutorServiceAdapter.forMainThread()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 46,
        "startColumnNumber" : 16,
        "endLineNumber" : 48,
        "endColumnNumber" : 90
      },
      "nodeContext" : "SchedulerTestingUtils.newSchedulerBuilder(JobGraphTestUtils.emptyJobGraph(),ComponentMainThreadExecutorServiceAdapter.forMainThread())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 46,
        "startColumnNumber" : 16,
        "endLineNumber" : 49,
        "endColumnNumber" : 32
      },
      "nodeContext" : "SchedulerTestingUtils.newSchedulerBuilder(JobGraphTestUtils.emptyJobGraph(),ComponentMainThreadExecutorServiceAdapter.forMainThread()).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 45,
        "startColumnNumber" : 28,
        "endLineNumber" : 49,
        "endColumnNumber" : 32
      },
      "nodeContext" : "scheduler=SchedulerTestingUtils.newSchedulerBuilder(JobGraphTestUtils.emptyJobGraph(),ComponentMainThreadExecutorServiceAdapter.forMainThread()).build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 282,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 33
      },
      "nodeContext" : "final SchedulerBase scheduler=SchedulerTestingUtils.newSchedulerBuilder(JobGraphTestUtils.emptyJobGraph(),ComponentMainThreadExecutorServiceAdapter.forMainThread()).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1348,
        "startLineNumber" : 44,
        "startColumnNumber" : 75,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SchedulerBase scheduler=SchedulerTestingUtils.newSchedulerBuilder(JobGraphTestUtils.emptyJobGraph(),ComponentMainThreadExecutorServiceAdapter.forMainThread()).build();\n  scheduler.startScheduling();\n  final ExecutionGraph eg=scheduler.getExecutionGraph();\n  assertEquals(JobStatus.RUNNING,eg.getState());\n  ExecutionGraphTestUtils.switchAllVerticesToRunning(eg);\n  IntermediateResultPartitionID intermediateResultPartitionId=new IntermediateResultPartitionID();\n  ExecutionAttemptID producerId=new ExecutionAttemptID();\n  ResultPartitionID resultPartitionId=new ResultPartitionID(intermediateResultPartitionId,producerId);\n  try {\n    scheduler.notifyPartitionDataAvailable(resultPartitionId);\n    fail(\"Error expected.\");\n  }\n catch (  IllegalStateException e) {\n    assertThat(e.getMessage(),containsString(\"Cannot find execution for execution Id\"));\n  }\n  assertEquals(JobStatus.RUNNING,eg.getState());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1591,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests that a failing notifyPartitionDataAvailable call with a non-existing execution attempt id, will not fail the execution graph.\n */\n@Test public void testFailingNotifyPartitionDataAvailable() throws Exception {\n  final SchedulerBase scheduler=SchedulerTestingUtils.newSchedulerBuilder(JobGraphTestUtils.emptyJobGraph(),ComponentMainThreadExecutorServiceAdapter.forMainThread()).build();\n  scheduler.startScheduling();\n  final ExecutionGraph eg=scheduler.getExecutionGraph();\n  assertEquals(JobStatus.RUNNING,eg.getState());\n  ExecutionGraphTestUtils.switchAllVerticesToRunning(eg);\n  IntermediateResultPartitionID intermediateResultPartitionId=new IntermediateResultPartitionID();\n  ExecutionAttemptID producerId=new ExecutionAttemptID();\n  ResultPartitionID resultPartitionId=new ResultPartitionID(intermediateResultPartitionId,producerId);\n  try {\n    scheduler.notifyPartitionDataAvailable(resultPartitionId);\n    fail(\"Error expected.\");\n  }\n catch (  IllegalStateException e) {\n    assertThat(e.getMessage(),containsString(\"Cannot find execution for execution Id\"));\n  }\n  assertEquals(JobStatus.RUNNING,eg.getState());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 115,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 48,
        "startColumnNumber" : 32,
        "endLineNumber" : 48,
        "endColumnNumber" : 89
      },
      "nodeContext" : "ComponentMainThreadExecutorServiceAdapter.forMainThread()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter"
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 48,
    "startColumnNumber" : 32,
    "endLineNumber" : 48,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ ]
}