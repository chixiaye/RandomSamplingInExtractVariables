{
  "id" : 473,
  "expression" : "calculatedList.get(i)",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-client-tools/src/test/java/org/apache/pulsar/admin/cli/TestCmdNamespaceIsolationPolicy.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "calculatedList.get(i)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 44,
      "startColumnNumber" : 59,
      "endLineNumber" : 44,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 44,
        "startColumnNumber" : 20,
        "endLineNumber" : 44,
        "endColumnNumber" : 81
      },
      "nodeContext" : "Assert.assertEquals(resultList.get(i),calculatedList.get(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 44,
        "startColumnNumber" : 20,
        "endLineNumber" : 44,
        "endColumnNumber" : 82
      },
      "nodeContext" : "Assert.assertEquals(resultList.get(i),calculatedList.get(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 43,
        "startColumnNumber" : 60,
        "endLineNumber" : 45,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Assert.assertEquals(resultList.get(i),calculatedList.get(i));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 43,
        "startColumnNumber" : 16,
        "endLineNumber" : 45,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < resultList.size(); i++) {\n  Assert.assertEquals(resultList.get(i),calculatedList.get(i));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 426,
        "startLineNumber" : 39,
        "startColumnNumber" : 16,
        "endLineNumber" : 46,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  innerMethod.setAccessible(true);\n  List<String> calculatedList=(List<String>)innerMethod.invoke(cmdNamespaceIsolationPolicy,mockList);\n  Assert.assertEquals(calculatedList.size(),resultList.size());\n  for (int i=0; i < resultList.size(); i++) {\n    Assert.assertEquals(resultList.get(i),calculatedList.get(i));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 544,
        "startLineNumber" : 39,
        "startColumnNumber" : 12,
        "endLineNumber" : 48,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  innerMethod.setAccessible(true);\n  List<String> calculatedList=(List<String>)innerMethod.invoke(cmdNamespaceIsolationPolicy,mockList);\n  Assert.assertEquals(calculatedList.size(),resultList.size());\n  for (int i=0; i < resultList.size(); i++) {\n    Assert.assertEquals(resultList.get(i),calculatedList.get(i));\n  }\n}\n catch (IllegalAccessException|InvocationTargetException e) {\n  e.printStackTrace();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 75,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 38,
        "startColumnNumber" : 54,
        "endLineNumber" : 49,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    innerMethod.setAccessible(true);\n    List<String> calculatedList=(List<String>)innerMethod.invoke(cmdNamespaceIsolationPolicy,mockList);\n    Assert.assertEquals(calculatedList.size(),resultList.size());\n    for (int i=0; i < resultList.size(); i++) {\n      Assert.assertEquals(resultList.get(i),calculatedList.get(i));\n    }\n  }\n catch (  IllegalAccessException|InvocationTargetException e) {\n    e.printStackTrace();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 583,
        "startLineNumber" : 38,
        "startColumnNumber" : 39,
        "endLineNumber" : 49,
        "endColumnNumber" : 9
      },
      "nodeContext" : "innerMethod -> {\n  try {\n    innerMethod.setAccessible(true);\n    List<String> calculatedList=(List<String>)innerMethod.invoke(cmdNamespaceIsolationPolicy,mockList);\n    Assert.assertEquals(calculatedList.size(),resultList.size());\n    for (int i=0; i < resultList.size(); i++) {\n      Assert.assertEquals(resultList.get(i),calculatedList.get(i));\n    }\n  }\n catch (  IllegalAccessException|InvocationTargetException e) {\n    e.printStackTrace();\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 79,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 44,
        "startColumnNumber" : 20,
        "endLineNumber" : 44,
        "endColumnNumber" : 82
      },
      "nodeContext" : "Assert.assertEquals(resultList.get(i),calculatedList.get(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 44,
    "startColumnNumber" : 59,
    "endLineNumber" : 44,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}