{
  "id" : 233,
  "expression" : "new RuleClass.Builder(\"$test_base_rule\",RuleClassType.ABSTRACT,true,baseRule).requiresConfigurationFragments(TestConfiguration.class).setMissingFragmentPolicy(TestConfiguration.class,MissingFragmentPolicy.IGNORE).add(attr(\"size\",STRING).value(\"medium\").taggable().nonconfigurable(\"used in loading phase rule validation logic\")).add(attr(\"timeout\",STRING).taggable().nonconfigurable(\"policy decision: should be consistent across configurations\").value(TIMEOUT_DEFAULT)).add(attr(\"flaky\",BOOLEAN).value(false).taggable().nonconfigurable(\"taggable - called in Rule.getRuleTags\")).add(attr(\"shard_count\",INTEGER).value(StarlarkInt.of(-1))).add(attr(\"local\",BOOLEAN).value(false).taggable().nonconfigurable(\"policy decision: this should be consistent across configurations\")).add(attr(\"args\",STRING_LIST))",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/analysis/starlark/StarlarkRuleClassFunctions.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new RuleClass.Builder(\"$test_base_rule\",RuleClassType.ABSTRACT,true,baseRule).requiresConfigurationFragments(TestConfiguration.class).setMissingFragmentPolicy(TestConfiguration.class,MissingFragmentPolicy.IGNORE).add(attr(\"size\",STRING).value(\"medium\").taggable().nonconfigurable(\"used in loading phase rule validation logic\")).add(attr(\"timeout\",STRING).taggable().nonconfigurable(\"policy decision: should be consistent across configurations\").value(TIMEOUT_DEFAULT)).add(attr(\"flaky\",BOOLEAN).value(false).taggable().nonconfigurable(\"taggable - called in Rule.getRuleTags\")).add(attr(\"shard_count\",INTEGER).value(StarlarkInt.of(-1))).add(attr(\"local\",BOOLEAN).value(false).taggable().nonconfigurable(\"policy decision: this should be consistent across configurations\")).add(attr(\"args\",STRING_LIST))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 1416,
      "startLineNumber" : 185,
      "startColumnNumber" : 8,
      "endLineNumber" : 212,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 99,
    "astHeight" : 12,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1714,
        "startLineNumber" : 185,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 90
      },
      "nodeContext" : "new RuleClass.Builder(\"$test_base_rule\",RuleClassType.ABSTRACT,true,baseRule).requiresConfigurationFragments(TestConfiguration.class).setMissingFragmentPolicy(TestConfiguration.class,MissingFragmentPolicy.IGNORE).add(attr(\"size\",STRING).value(\"medium\").taggable().nonconfigurable(\"used in loading phase rule validation logic\")).add(attr(\"timeout\",STRING).taggable().nonconfigurable(\"policy decision: should be consistent across configurations\").value(TIMEOUT_DEFAULT)).add(attr(\"flaky\",BOOLEAN).value(false).taggable().nonconfigurable(\"taggable - called in Rule.getRuleTags\")).add(attr(\"shard_count\",INTEGER).value(StarlarkInt.of(-1))).add(attr(\"local\",BOOLEAN).value(false).taggable().nonconfigurable(\"policy decision: this should be consistent across configurations\")).add(attr(\"args\",STRING_LIST)).add(attr(\"$test_wrapper\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_wrapper\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 120,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1959,
        "startLineNumber" : 185,
        "startColumnNumber" : 8,
        "endLineNumber" : 223,
        "endColumnNumber" : 88
      },
      "nodeContext" : "new RuleClass.Builder(\"$test_base_rule\",RuleClassType.ABSTRACT,true,baseRule).requiresConfigurationFragments(TestConfiguration.class).setMissingFragmentPolicy(TestConfiguration.class,MissingFragmentPolicy.IGNORE).add(attr(\"size\",STRING).value(\"medium\").taggable().nonconfigurable(\"used in loading phase rule validation logic\")).add(attr(\"timeout\",STRING).taggable().nonconfigurable(\"policy decision: should be consistent across configurations\").value(TIMEOUT_DEFAULT)).add(attr(\"flaky\",BOOLEAN).value(false).taggable().nonconfigurable(\"taggable - called in Rule.getRuleTags\")).add(attr(\"shard_count\",INTEGER).value(StarlarkInt.of(-1))).add(attr(\"local\",BOOLEAN).value(false).taggable().nonconfigurable(\"policy decision: this should be consistent across configurations\")).add(attr(\"args\",STRING_LIST)).add(attr(\"$test_wrapper\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_wrapper\"))).add(attr(\"$xml_writer\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:xml_writer\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 141,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 2343,
        "startLineNumber" : 185,
        "startColumnNumber" : 8,
        "endLineNumber" : 229,
        "endColumnNumber" : 57
      },
      "nodeContext" : "new RuleClass.Builder(\"$test_base_rule\",RuleClassType.ABSTRACT,true,baseRule).requiresConfigurationFragments(TestConfiguration.class).setMissingFragmentPolicy(TestConfiguration.class,MissingFragmentPolicy.IGNORE).add(attr(\"size\",STRING).value(\"medium\").taggable().nonconfigurable(\"used in loading phase rule validation logic\")).add(attr(\"timeout\",STRING).taggable().nonconfigurable(\"policy decision: should be consistent across configurations\").value(TIMEOUT_DEFAULT)).add(attr(\"flaky\",BOOLEAN).value(false).taggable().nonconfigurable(\"taggable - called in Rule.getRuleTags\")).add(attr(\"shard_count\",INTEGER).value(StarlarkInt.of(-1))).add(attr(\"local\",BOOLEAN).value(false).taggable().nonconfigurable(\"policy decision: this should be consistent across configurations\")).add(attr(\"args\",STRING_LIST)).add(attr(\"$test_wrapper\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_wrapper\"))).add(attr(\"$xml_writer\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:xml_writer\"))).add(attr(\"$test_runtime\",LABEL_LIST).cfg(HostTransition.createFactory()).value(getTestRuntimeLabelList(env)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 157,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 2595,
        "startLineNumber" : 185,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 88
      },
      "nodeContext" : "new RuleClass.Builder(\"$test_base_rule\",RuleClassType.ABSTRACT,true,baseRule).requiresConfigurationFragments(TestConfiguration.class).setMissingFragmentPolicy(TestConfiguration.class,MissingFragmentPolicy.IGNORE).add(attr(\"size\",STRING).value(\"medium\").taggable().nonconfigurable(\"used in loading phase rule validation logic\")).add(attr(\"timeout\",STRING).taggable().nonconfigurable(\"policy decision: should be consistent across configurations\").value(TIMEOUT_DEFAULT)).add(attr(\"flaky\",BOOLEAN).value(false).taggable().nonconfigurable(\"taggable - called in Rule.getRuleTags\")).add(attr(\"shard_count\",INTEGER).value(StarlarkInt.of(-1))).add(attr(\"local\",BOOLEAN).value(false).taggable().nonconfigurable(\"policy decision: this should be consistent across configurations\")).add(attr(\"args\",STRING_LIST)).add(attr(\"$test_wrapper\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_wrapper\"))).add(attr(\"$xml_writer\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:xml_writer\"))).add(attr(\"$test_runtime\",LABEL_LIST).cfg(HostTransition.createFactory()).value(getTestRuntimeLabelList(env))).add(attr(\"$test_setup_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_setup\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 178,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 2858,
        "startLineNumber" : 185,
        "startColumnNumber" : 8,
        "endLineNumber" : 239,
        "endColumnNumber" : 96
      },
      "nodeContext" : "new RuleClass.Builder(\"$test_base_rule\",RuleClassType.ABSTRACT,true,baseRule).requiresConfigurationFragments(TestConfiguration.class).setMissingFragmentPolicy(TestConfiguration.class,MissingFragmentPolicy.IGNORE).add(attr(\"size\",STRING).value(\"medium\").taggable().nonconfigurable(\"used in loading phase rule validation logic\")).add(attr(\"timeout\",STRING).taggable().nonconfigurable(\"policy decision: should be consistent across configurations\").value(TIMEOUT_DEFAULT)).add(attr(\"flaky\",BOOLEAN).value(false).taggable().nonconfigurable(\"taggable - called in Rule.getRuleTags\")).add(attr(\"shard_count\",INTEGER).value(StarlarkInt.of(-1))).add(attr(\"local\",BOOLEAN).value(false).taggable().nonconfigurable(\"policy decision: this should be consistent across configurations\")).add(attr(\"args\",STRING_LIST)).add(attr(\"$test_wrapper\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_wrapper\"))).add(attr(\"$xml_writer\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:xml_writer\"))).add(attr(\"$test_runtime\",LABEL_LIST).cfg(HostTransition.createFactory()).value(getTestRuntimeLabelList(env))).add(attr(\"$test_setup_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_setup\"))).add(attr(\"$xml_generator_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_xml_generator\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 199,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 3122,
        "startLineNumber" : 185,
        "startColumnNumber" : 8,
        "endLineNumber" : 244,
        "endColumnNumber" : 94
      },
      "nodeContext" : "new RuleClass.Builder(\"$test_base_rule\",RuleClassType.ABSTRACT,true,baseRule).requiresConfigurationFragments(TestConfiguration.class).setMissingFragmentPolicy(TestConfiguration.class,MissingFragmentPolicy.IGNORE).add(attr(\"size\",STRING).value(\"medium\").taggable().nonconfigurable(\"used in loading phase rule validation logic\")).add(attr(\"timeout\",STRING).taggable().nonconfigurable(\"policy decision: should be consistent across configurations\").value(TIMEOUT_DEFAULT)).add(attr(\"flaky\",BOOLEAN).value(false).taggable().nonconfigurable(\"taggable - called in Rule.getRuleTags\")).add(attr(\"shard_count\",INTEGER).value(StarlarkInt.of(-1))).add(attr(\"local\",BOOLEAN).value(false).taggable().nonconfigurable(\"policy decision: this should be consistent across configurations\")).add(attr(\"args\",STRING_LIST)).add(attr(\"$test_wrapper\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_wrapper\"))).add(attr(\"$xml_writer\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:xml_writer\"))).add(attr(\"$test_runtime\",LABEL_LIST).cfg(HostTransition.createFactory()).value(getTestRuntimeLabelList(env))).add(attr(\"$test_setup_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_setup\"))).add(attr(\"$xml_generator_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_xml_generator\"))).add(attr(\"$collect_coverage_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:collect_coverage\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 220,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 3554,
        "startLineNumber" : 185,
        "startColumnNumber" : 8,
        "endLineNumber" : 252,
        "endColumnNumber" : 100
      },
      "nodeContext" : "new RuleClass.Builder(\"$test_base_rule\",RuleClassType.ABSTRACT,true,baseRule).requiresConfigurationFragments(TestConfiguration.class).setMissingFragmentPolicy(TestConfiguration.class,MissingFragmentPolicy.IGNORE).add(attr(\"size\",STRING).value(\"medium\").taggable().nonconfigurable(\"used in loading phase rule validation logic\")).add(attr(\"timeout\",STRING).taggable().nonconfigurable(\"policy decision: should be consistent across configurations\").value(TIMEOUT_DEFAULT)).add(attr(\"flaky\",BOOLEAN).value(false).taggable().nonconfigurable(\"taggable - called in Rule.getRuleTags\")).add(attr(\"shard_count\",INTEGER).value(StarlarkInt.of(-1))).add(attr(\"local\",BOOLEAN).value(false).taggable().nonconfigurable(\"policy decision: this should be consistent across configurations\")).add(attr(\"args\",STRING_LIST)).add(attr(\"$test_wrapper\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_wrapper\"))).add(attr(\"$xml_writer\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:xml_writer\"))).add(attr(\"$test_runtime\",LABEL_LIST).cfg(HostTransition.createFactory()).value(getTestRuntimeLabelList(env))).add(attr(\"$test_setup_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_setup\"))).add(attr(\"$xml_generator_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_xml_generator\"))).add(attr(\"$collect_coverage_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:collect_coverage\"))).add(attr(\":coverage_support\",LABEL).cfg(HostTransition.createFactory()).value(BaseRuleClasses.coverageSupportAttribute(labelCache.get(toolsRepository + BaseRuleClasses.DEFAULT_COVERAGE_SUPPORT_VALUE))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 244,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 4055,
        "startLineNumber" : 185,
        "startColumnNumber" : 8,
        "endLineNumber" : 261,
        "endColumnNumber" : 97
      },
      "nodeContext" : "new RuleClass.Builder(\"$test_base_rule\",RuleClassType.ABSTRACT,true,baseRule).requiresConfigurationFragments(TestConfiguration.class).setMissingFragmentPolicy(TestConfiguration.class,MissingFragmentPolicy.IGNORE).add(attr(\"size\",STRING).value(\"medium\").taggable().nonconfigurable(\"used in loading phase rule validation logic\")).add(attr(\"timeout\",STRING).taggable().nonconfigurable(\"policy decision: should be consistent across configurations\").value(TIMEOUT_DEFAULT)).add(attr(\"flaky\",BOOLEAN).value(false).taggable().nonconfigurable(\"taggable - called in Rule.getRuleTags\")).add(attr(\"shard_count\",INTEGER).value(StarlarkInt.of(-1))).add(attr(\"local\",BOOLEAN).value(false).taggable().nonconfigurable(\"policy decision: this should be consistent across configurations\")).add(attr(\"args\",STRING_LIST)).add(attr(\"$test_wrapper\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_wrapper\"))).add(attr(\"$xml_writer\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:xml_writer\"))).add(attr(\"$test_runtime\",LABEL_LIST).cfg(HostTransition.createFactory()).value(getTestRuntimeLabelList(env))).add(attr(\"$test_setup_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_setup\"))).add(attr(\"$xml_generator_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_xml_generator\"))).add(attr(\"$collect_coverage_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:collect_coverage\"))).add(attr(\":coverage_support\",LABEL).cfg(HostTransition.createFactory()).value(BaseRuleClasses.coverageSupportAttribute(labelCache.get(toolsRepository + BaseRuleClasses.DEFAULT_COVERAGE_SUPPORT_VALUE)))).add(attr(\":coverage_report_generator\",LABEL).cfg(HostTransition.createFactory()).value(BaseRuleClasses.coverageReportGeneratorAttribute(labelCache.get(toolsRepository + BaseRuleClasses.DEFAULT_COVERAGE_REPORT_GENERATOR_VALUE))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 268,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 4116,
        "startLineNumber" : 185,
        "startColumnNumber" : 8,
        "endLineNumber" : 262,
        "endColumnNumber" : 60
      },
      "nodeContext" : "new RuleClass.Builder(\"$test_base_rule\",RuleClassType.ABSTRACT,true,baseRule).requiresConfigurationFragments(TestConfiguration.class).setMissingFragmentPolicy(TestConfiguration.class,MissingFragmentPolicy.IGNORE).add(attr(\"size\",STRING).value(\"medium\").taggable().nonconfigurable(\"used in loading phase rule validation logic\")).add(attr(\"timeout\",STRING).taggable().nonconfigurable(\"policy decision: should be consistent across configurations\").value(TIMEOUT_DEFAULT)).add(attr(\"flaky\",BOOLEAN).value(false).taggable().nonconfigurable(\"taggable - called in Rule.getRuleTags\")).add(attr(\"shard_count\",INTEGER).value(StarlarkInt.of(-1))).add(attr(\"local\",BOOLEAN).value(false).taggable().nonconfigurable(\"policy decision: this should be consistent across configurations\")).add(attr(\"args\",STRING_LIST)).add(attr(\"$test_wrapper\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_wrapper\"))).add(attr(\"$xml_writer\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:xml_writer\"))).add(attr(\"$test_runtime\",LABEL_LIST).cfg(HostTransition.createFactory()).value(getTestRuntimeLabelList(env))).add(attr(\"$test_setup_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_setup\"))).add(attr(\"$xml_generator_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_xml_generator\"))).add(attr(\"$collect_coverage_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:collect_coverage\"))).add(attr(\":coverage_support\",LABEL).cfg(HostTransition.createFactory()).value(BaseRuleClasses.coverageSupportAttribute(labelCache.get(toolsRepository + BaseRuleClasses.DEFAULT_COVERAGE_SUPPORT_VALUE)))).add(attr(\":coverage_report_generator\",LABEL).cfg(HostTransition.createFactory()).value(BaseRuleClasses.coverageReportGeneratorAttribute(labelCache.get(toolsRepository + BaseRuleClasses.DEFAULT_COVERAGE_REPORT_GENERATOR_VALUE)))).add(attr(\":run_under\",LABEL).value(RUN_UNDER))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 277,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 4134,
        "startLineNumber" : 184,
        "startColumnNumber" : 22,
        "endLineNumber" : 262,
        "endColumnNumber" : 60
      },
      "nodeContext" : "builder=new RuleClass.Builder(\"$test_base_rule\",RuleClassType.ABSTRACT,true,baseRule).requiresConfigurationFragments(TestConfiguration.class).setMissingFragmentPolicy(TestConfiguration.class,MissingFragmentPolicy.IGNORE).add(attr(\"size\",STRING).value(\"medium\").taggable().nonconfigurable(\"used in loading phase rule validation logic\")).add(attr(\"timeout\",STRING).taggable().nonconfigurable(\"policy decision: should be consistent across configurations\").value(TIMEOUT_DEFAULT)).add(attr(\"flaky\",BOOLEAN).value(false).taggable().nonconfigurable(\"taggable - called in Rule.getRuleTags\")).add(attr(\"shard_count\",INTEGER).value(StarlarkInt.of(-1))).add(attr(\"local\",BOOLEAN).value(false).taggable().nonconfigurable(\"policy decision: this should be consistent across configurations\")).add(attr(\"args\",STRING_LIST)).add(attr(\"$test_wrapper\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_wrapper\"))).add(attr(\"$xml_writer\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:xml_writer\"))).add(attr(\"$test_runtime\",LABEL_LIST).cfg(HostTransition.createFactory()).value(getTestRuntimeLabelList(env))).add(attr(\"$test_setup_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_setup\"))).add(attr(\"$xml_generator_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_xml_generator\"))).add(attr(\"$collect_coverage_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:collect_coverage\"))).add(attr(\":coverage_support\",LABEL).cfg(HostTransition.createFactory()).value(BaseRuleClasses.coverageSupportAttribute(labelCache.get(toolsRepository + BaseRuleClasses.DEFAULT_COVERAGE_SUPPORT_VALUE)))).add(attr(\":coverage_report_generator\",LABEL).cfg(HostTransition.createFactory()).value(BaseRuleClasses.coverageReportGeneratorAttribute(labelCache.get(toolsRepository + BaseRuleClasses.DEFAULT_COVERAGE_REPORT_GENERATOR_VALUE)))).add(attr(\":run_under\",LABEL).value(RUN_UNDER))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 279,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4153,
        "startLineNumber" : 184,
        "startColumnNumber" : 4,
        "endLineNumber" : 262,
        "endColumnNumber" : 61
      },
      "nodeContext" : "RuleClass.Builder builder=new RuleClass.Builder(\"$test_base_rule\",RuleClassType.ABSTRACT,true,baseRule).requiresConfigurationFragments(TestConfiguration.class).setMissingFragmentPolicy(TestConfiguration.class,MissingFragmentPolicy.IGNORE).add(attr(\"size\",STRING).value(\"medium\").taggable().nonconfigurable(\"used in loading phase rule validation logic\")).add(attr(\"timeout\",STRING).taggable().nonconfigurable(\"policy decision: should be consistent across configurations\").value(TIMEOUT_DEFAULT)).add(attr(\"flaky\",BOOLEAN).value(false).taggable().nonconfigurable(\"taggable - called in Rule.getRuleTags\")).add(attr(\"shard_count\",INTEGER).value(StarlarkInt.of(-1))).add(attr(\"local\",BOOLEAN).value(false).taggable().nonconfigurable(\"policy decision: this should be consistent across configurations\")).add(attr(\"args\",STRING_LIST)).add(attr(\"$test_wrapper\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_wrapper\"))).add(attr(\"$xml_writer\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:xml_writer\"))).add(attr(\"$test_runtime\",LABEL_LIST).cfg(HostTransition.createFactory()).value(getTestRuntimeLabelList(env))).add(attr(\"$test_setup_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_setup\"))).add(attr(\"$xml_generator_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_xml_generator\"))).add(attr(\"$collect_coverage_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:collect_coverage\"))).add(attr(\":coverage_support\",LABEL).cfg(HostTransition.createFactory()).value(BaseRuleClasses.coverageSupportAttribute(labelCache.get(toolsRepository + BaseRuleClasses.DEFAULT_COVERAGE_SUPPORT_VALUE)))).add(attr(\":coverage_report_generator\",LABEL).cfg(HostTransition.createFactory()).value(BaseRuleClasses.coverageReportGeneratorAttribute(labelCache.get(toolsRepository + BaseRuleClasses.DEFAULT_COVERAGE_REPORT_GENERATOR_VALUE)))).add(attr(\":run_under\",LABEL).value(RUN_UNDER));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 284,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4460,
        "startLineNumber" : 182,
        "startColumnNumber" : 73,
        "endLineNumber" : 271,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  RepositoryName toolsRepository=env.getToolsRepository();\n  RuleClass.Builder builder=new RuleClass.Builder(\"$test_base_rule\",RuleClassType.ABSTRACT,true,baseRule).requiresConfigurationFragments(TestConfiguration.class).setMissingFragmentPolicy(TestConfiguration.class,MissingFragmentPolicy.IGNORE).add(attr(\"size\",STRING).value(\"medium\").taggable().nonconfigurable(\"used in loading phase rule validation logic\")).add(attr(\"timeout\",STRING).taggable().nonconfigurable(\"policy decision: should be consistent across configurations\").value(TIMEOUT_DEFAULT)).add(attr(\"flaky\",BOOLEAN).value(false).taggable().nonconfigurable(\"taggable - called in Rule.getRuleTags\")).add(attr(\"shard_count\",INTEGER).value(StarlarkInt.of(-1))).add(attr(\"local\",BOOLEAN).value(false).taggable().nonconfigurable(\"policy decision: this should be consistent across configurations\")).add(attr(\"args\",STRING_LIST)).add(attr(\"$test_wrapper\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_wrapper\"))).add(attr(\"$xml_writer\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:xml_writer\"))).add(attr(\"$test_runtime\",LABEL_LIST).cfg(HostTransition.createFactory()).value(getTestRuntimeLabelList(env))).add(attr(\"$test_setup_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_setup\"))).add(attr(\"$xml_generator_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_xml_generator\"))).add(attr(\"$collect_coverage_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:collect_coverage\"))).add(attr(\":coverage_support\",LABEL).cfg(HostTransition.createFactory()).value(BaseRuleClasses.coverageSupportAttribute(labelCache.get(toolsRepository + BaseRuleClasses.DEFAULT_COVERAGE_SUPPORT_VALUE)))).add(attr(\":coverage_report_generator\",LABEL).cfg(HostTransition.createFactory()).value(BaseRuleClasses.coverageReportGeneratorAttribute(labelCache.get(toolsRepository + BaseRuleClasses.DEFAULT_COVERAGE_REPORT_GENERATOR_VALUE)))).add(attr(\":run_under\",LABEL).value(RUN_UNDER));\n  env.getNetworkAllowlistForTests().ifPresent(label -> builder.add(Allowlist.getAttributeFromAllowlistName(\"external_network\").value(label)));\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4583,
        "startLineNumber" : 181,
        "startColumnNumber" : 2,
        "endLineNumber" : 271,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parent rule class for test Starlark rules. \n */\npublic static RuleClass getTestBaseRule(RuleDefinitionEnvironment env){\n  RepositoryName toolsRepository=env.getToolsRepository();\n  RuleClass.Builder builder=new RuleClass.Builder(\"$test_base_rule\",RuleClassType.ABSTRACT,true,baseRule).requiresConfigurationFragments(TestConfiguration.class).setMissingFragmentPolicy(TestConfiguration.class,MissingFragmentPolicy.IGNORE).add(attr(\"size\",STRING).value(\"medium\").taggable().nonconfigurable(\"used in loading phase rule validation logic\")).add(attr(\"timeout\",STRING).taggable().nonconfigurable(\"policy decision: should be consistent across configurations\").value(TIMEOUT_DEFAULT)).add(attr(\"flaky\",BOOLEAN).value(false).taggable().nonconfigurable(\"taggable - called in Rule.getRuleTags\")).add(attr(\"shard_count\",INTEGER).value(StarlarkInt.of(-1))).add(attr(\"local\",BOOLEAN).value(false).taggable().nonconfigurable(\"policy decision: this should be consistent across configurations\")).add(attr(\"args\",STRING_LIST)).add(attr(\"$test_wrapper\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_wrapper\"))).add(attr(\"$xml_writer\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:xml_writer\"))).add(attr(\"$test_runtime\",LABEL_LIST).cfg(HostTransition.createFactory()).value(getTestRuntimeLabelList(env))).add(attr(\"$test_setup_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_setup\"))).add(attr(\"$xml_generator_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_xml_generator\"))).add(attr(\"$collect_coverage_script\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:collect_coverage\"))).add(attr(\":coverage_support\",LABEL).cfg(HostTransition.createFactory()).value(BaseRuleClasses.coverageSupportAttribute(labelCache.get(toolsRepository + BaseRuleClasses.DEFAULT_COVERAGE_SUPPORT_VALUE)))).add(attr(\":coverage_report_generator\",LABEL).cfg(HostTransition.createFactory()).value(BaseRuleClasses.coverageReportGeneratorAttribute(labelCache.get(toolsRepository + BaseRuleClasses.DEFAULT_COVERAGE_REPORT_GENERATOR_VALUE)))).add(attr(\":run_under\",LABEL).value(RUN_UNDER));\n  env.getNetworkAllowlistForTests().ifPresent(label -> builder.add(Allowlist.getAttributeFromAllowlistName(\"external_network\").value(label)));\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 327,
      "astHeight" : 25
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1714,
        "startLineNumber" : 185,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 90
      },
      "nodeContext" : "new RuleClass.Builder(\"$test_base_rule\",RuleClassType.ABSTRACT,true,baseRule).requiresConfigurationFragments(TestConfiguration.class).setMissingFragmentPolicy(TestConfiguration.class,MissingFragmentPolicy.IGNORE).add(attr(\"size\",STRING).value(\"medium\").taggable().nonconfigurable(\"used in loading phase rule validation logic\")).add(attr(\"timeout\",STRING).taggable().nonconfigurable(\"policy decision: should be consistent across configurations\").value(TIMEOUT_DEFAULT)).add(attr(\"flaky\",BOOLEAN).value(false).taggable().nonconfigurable(\"taggable - called in Rule.getRuleTags\")).add(attr(\"shard_count\",INTEGER).value(StarlarkInt.of(-1))).add(attr(\"local\",BOOLEAN).value(false).taggable().nonconfigurable(\"policy decision: this should be consistent across configurations\")).add(attr(\"args\",STRING_LIST)).add(attr(\"$test_wrapper\",LABEL).cfg(HostTransition.createFactory()).singleArtifact().value(labelCache.get(toolsRepository + \"//tools/test:test_wrapper\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 120,
      "astHeight" : 13
    },
    "tokenLength" : 89,
    "type" : "com.google.devtools.build.lib.packages.RuleClass.Builder"
  } ],
  "positionList" : [ {
    "charLength" : 1416,
    "startLineNumber" : 185,
    "startColumnNumber" : 8,
    "endLineNumber" : 212,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}