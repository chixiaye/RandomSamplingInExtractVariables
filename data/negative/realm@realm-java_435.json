{
  "id" : 435,
  "expression" : "proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDouble(columnKey)",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDouble(columnKey)",
    "nodeType" : "ConditionalExpression",
    "nodePosition" : {
      "charLength" : 101,
      "startLineNumber" : 1280,
      "startColumnNumber" : 30,
      "endLineNumber" : 1280,
      "endColumnNumber" : 131
    },
    "astNodeNumber" : 14,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 1280,
        "startColumnNumber" : 20,
        "endLineNumber" : 1280,
        "endColumnNumber" : 132
      },
      "nodeContext" : "sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDouble(columnKey))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 1280,
        "startColumnNumber" : 20,
        "endLineNumber" : 1280,
        "endColumnNumber" : 133
      },
      "nodeContext" : "sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDouble(columnKey));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5049,
        "startLineNumber" : 1269,
        "startColumnNumber" : 12,
        "endLineNumber" : 1349,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (type) {\ncase BOOLEAN:  sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getBoolean(columnKey));\nbreak;\ncase INTEGER:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getLong(columnKey));\nbreak;\ncase FLOAT:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getFloat(columnKey));\nbreak;\ncase DOUBLE:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDouble(columnKey));\nbreak;\ncase STRING:sb.append(proxyState.getRow$realm().getString(columnKey));\nbreak;\ncase BINARY:sb.append(Arrays.toString(proxyState.getRow$realm().getBinaryByteArray(columnKey)));\nbreak;\ncase DATE:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDate(columnKey));\nbreak;\ncase DECIMAL128:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDecimal128(columnKey));\nbreak;\ncase OBJECT_ID:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getObjectId(columnKey));\nbreak;\ncase UUID:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getUUID(columnKey));\nbreak;\ncase MIXED:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : getMixed(columnKey));\nbreak;\ncase OBJECT:sb.append(proxyState.getRow$realm().isNullLink(columnKey) ? \"null\" : proxyState.getRow$realm().getTable().getLinkTarget(columnKey).getClassName());\nbreak;\ncase LIST:String targetClassName=proxyState.getRow$realm().getTable().getLinkTarget(columnKey).getClassName();\nsb.append(String.format(Locale.US,\"RealmList<%s>[%s]\",targetClassName,proxyState.getRow$realm().getModelList(columnKey).size()));\nbreak;\ncase INTEGER_LIST:sb.append(String.format(Locale.US,\"RealmList<Long>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase BOOLEAN_LIST:sb.append(String.format(Locale.US,\"RealmList<Boolean>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase STRING_LIST:sb.append(String.format(Locale.US,\"RealmList<String>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase BINARY_LIST:sb.append(String.format(Locale.US,\"RealmList<byte[]>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase DATE_LIST:sb.append(String.format(Locale.US,\"RealmList<Date>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase FLOAT_LIST:sb.append(String.format(Locale.US,\"RealmList<Float>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase DOUBLE_LIST:sb.append(String.format(Locale.US,\"RealmList<Double>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase DECIMAL128_LIST:sb.append(String.format(Locale.US,\"RealmList<Decimal128>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase OBJECT_ID_LIST:sb.append(String.format(Locale.US,\"RealmList<ObjectId>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase UUID_LIST:sb.append(String.format(Locale.US,\"RealmList<UUID>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase MIXED_LIST:sb.append(String.format(Locale.US,\"RealmList<Mixed>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ndefault:sb.append(\"?\");\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 540,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5334,
        "startLineNumber" : 1264,
        "startColumnNumber" : 36,
        "endLineNumber" : 1351,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long columnKey=proxyState.getRow$realm().getColumnKey(field);\n  RealmFieldType type=proxyState.getRow$realm().getColumnType(columnKey);\n  sb.append(\"{\");\n  sb.append(field).append(\":\");\nswitch (type) {\ncase BOOLEAN:    sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getBoolean(columnKey));\n  break;\ncase INTEGER:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getLong(columnKey));\nbreak;\ncase FLOAT:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getFloat(columnKey));\nbreak;\ncase DOUBLE:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDouble(columnKey));\nbreak;\ncase STRING:sb.append(proxyState.getRow$realm().getString(columnKey));\nbreak;\ncase BINARY:sb.append(Arrays.toString(proxyState.getRow$realm().getBinaryByteArray(columnKey)));\nbreak;\ncase DATE:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDate(columnKey));\nbreak;\ncase DECIMAL128:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDecimal128(columnKey));\nbreak;\ncase OBJECT_ID:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getObjectId(columnKey));\nbreak;\ncase UUID:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getUUID(columnKey));\nbreak;\ncase MIXED:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : getMixed(columnKey));\nbreak;\ncase OBJECT:sb.append(proxyState.getRow$realm().isNullLink(columnKey) ? \"null\" : proxyState.getRow$realm().getTable().getLinkTarget(columnKey).getClassName());\nbreak;\ncase LIST:String targetClassName=proxyState.getRow$realm().getTable().getLinkTarget(columnKey).getClassName();\nsb.append(String.format(Locale.US,\"RealmList<%s>[%s]\",targetClassName,proxyState.getRow$realm().getModelList(columnKey).size()));\nbreak;\ncase INTEGER_LIST:sb.append(String.format(Locale.US,\"RealmList<Long>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase BOOLEAN_LIST:sb.append(String.format(Locale.US,\"RealmList<Boolean>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase STRING_LIST:sb.append(String.format(Locale.US,\"RealmList<String>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase BINARY_LIST:sb.append(String.format(Locale.US,\"RealmList<byte[]>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase DATE_LIST:sb.append(String.format(Locale.US,\"RealmList<Date>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase FLOAT_LIST:sb.append(String.format(Locale.US,\"RealmList<Float>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase DOUBLE_LIST:sb.append(String.format(Locale.US,\"RealmList<Double>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase DECIMAL128_LIST:sb.append(String.format(Locale.US,\"RealmList<Decimal128>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase OBJECT_ID_LIST:sb.append(String.format(Locale.US,\"RealmList<ObjectId>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase UUID_LIST:sb.append(String.format(Locale.US,\"RealmList<UUID>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase MIXED_LIST:sb.append(String.format(Locale.US,\"RealmList<Mixed>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ndefault:sb.append(\"?\");\nbreak;\n}\nsb.append(\"},\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 580,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5362,
        "startLineNumber" : 1264,
        "startColumnNumber" : 8,
        "endLineNumber" : 1351,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String field : fields) {\n  long columnKey=proxyState.getRow$realm().getColumnKey(field);\n  RealmFieldType type=proxyState.getRow$realm().getColumnType(columnKey);\n  sb.append(\"{\");\n  sb.append(field).append(\":\");\nswitch (type) {\ncase BOOLEAN:    sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getBoolean(columnKey));\n  break;\ncase INTEGER:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getLong(columnKey));\nbreak;\ncase FLOAT:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getFloat(columnKey));\nbreak;\ncase DOUBLE:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDouble(columnKey));\nbreak;\ncase STRING:sb.append(proxyState.getRow$realm().getString(columnKey));\nbreak;\ncase BINARY:sb.append(Arrays.toString(proxyState.getRow$realm().getBinaryByteArray(columnKey)));\nbreak;\ncase DATE:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDate(columnKey));\nbreak;\ncase DECIMAL128:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDecimal128(columnKey));\nbreak;\ncase OBJECT_ID:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getObjectId(columnKey));\nbreak;\ncase UUID:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getUUID(columnKey));\nbreak;\ncase MIXED:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : getMixed(columnKey));\nbreak;\ncase OBJECT:sb.append(proxyState.getRow$realm().isNullLink(columnKey) ? \"null\" : proxyState.getRow$realm().getTable().getLinkTarget(columnKey).getClassName());\nbreak;\ncase LIST:String targetClassName=proxyState.getRow$realm().getTable().getLinkTarget(columnKey).getClassName();\nsb.append(String.format(Locale.US,\"RealmList<%s>[%s]\",targetClassName,proxyState.getRow$realm().getModelList(columnKey).size()));\nbreak;\ncase INTEGER_LIST:sb.append(String.format(Locale.US,\"RealmList<Long>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase BOOLEAN_LIST:sb.append(String.format(Locale.US,\"RealmList<Boolean>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase STRING_LIST:sb.append(String.format(Locale.US,\"RealmList<String>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase BINARY_LIST:sb.append(String.format(Locale.US,\"RealmList<byte[]>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase DATE_LIST:sb.append(String.format(Locale.US,\"RealmList<Date>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase FLOAT_LIST:sb.append(String.format(Locale.US,\"RealmList<Float>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase DOUBLE_LIST:sb.append(String.format(Locale.US,\"RealmList<Double>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase DECIMAL128_LIST:sb.append(String.format(Locale.US,\"RealmList<Decimal128>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase OBJECT_ID_LIST:sb.append(String.format(Locale.US,\"RealmList<ObjectId>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase UUID_LIST:sb.append(String.format(Locale.US,\"RealmList<UUID>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase MIXED_LIST:sb.append(String.format(Locale.US,\"RealmList<Mixed>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ndefault:sb.append(\"?\");\nbreak;\n}\nsb.append(\"},\");\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 586,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5841,
        "startLineNumber" : 1254,
        "startColumnNumber" : 29,
        "endLineNumber" : 1355,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  proxyState.getRealm$realm().checkIfValid();\n  if (!proxyState.getRow$realm().isValid()) {\n    return \"Invalid object\";\n  }\n  final String className=proxyState.getRow$realm().getTable().getClassName();\n  StringBuilder sb=new StringBuilder(className + \" = dynamic[\");\n  String[] fields=getFieldNames();\n  for (  String field : fields) {\n    long columnKey=proxyState.getRow$realm().getColumnKey(field);\n    RealmFieldType type=proxyState.getRow$realm().getColumnType(columnKey);\n    sb.append(\"{\");\n    sb.append(field).append(\":\");\nswitch (type) {\ncase BOOLEAN:      sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getBoolean(columnKey));\n    break;\ncase INTEGER:  sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getLong(columnKey));\nbreak;\ncase FLOAT:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getFloat(columnKey));\nbreak;\ncase DOUBLE:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDouble(columnKey));\nbreak;\ncase STRING:sb.append(proxyState.getRow$realm().getString(columnKey));\nbreak;\ncase BINARY:sb.append(Arrays.toString(proxyState.getRow$realm().getBinaryByteArray(columnKey)));\nbreak;\ncase DATE:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDate(columnKey));\nbreak;\ncase DECIMAL128:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDecimal128(columnKey));\nbreak;\ncase OBJECT_ID:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getObjectId(columnKey));\nbreak;\ncase UUID:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getUUID(columnKey));\nbreak;\ncase MIXED:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : getMixed(columnKey));\nbreak;\ncase OBJECT:sb.append(proxyState.getRow$realm().isNullLink(columnKey) ? \"null\" : proxyState.getRow$realm().getTable().getLinkTarget(columnKey).getClassName());\nbreak;\ncase LIST:String targetClassName=proxyState.getRow$realm().getTable().getLinkTarget(columnKey).getClassName();\nsb.append(String.format(Locale.US,\"RealmList<%s>[%s]\",targetClassName,proxyState.getRow$realm().getModelList(columnKey).size()));\nbreak;\ncase INTEGER_LIST:sb.append(String.format(Locale.US,\"RealmList<Long>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase BOOLEAN_LIST:sb.append(String.format(Locale.US,\"RealmList<Boolean>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase STRING_LIST:sb.append(String.format(Locale.US,\"RealmList<String>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase BINARY_LIST:sb.append(String.format(Locale.US,\"RealmList<byte[]>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase DATE_LIST:sb.append(String.format(Locale.US,\"RealmList<Date>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase FLOAT_LIST:sb.append(String.format(Locale.US,\"RealmList<Float>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase DOUBLE_LIST:sb.append(String.format(Locale.US,\"RealmList<Double>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase DECIMAL128_LIST:sb.append(String.format(Locale.US,\"RealmList<Decimal128>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase OBJECT_ID_LIST:sb.append(String.format(Locale.US,\"RealmList<ObjectId>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase UUID_LIST:sb.append(String.format(Locale.US,\"RealmList<UUID>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase MIXED_LIST:sb.append(String.format(Locale.US,\"RealmList<Mixed>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ndefault:sb.append(\"?\");\nbreak;\n}\nsb.append(\"},\");\n}\nsb.replace(sb.length() - 1,sb.length(),\"\");\nsb.append(\"]\");\nreturn sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 658,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5880,
        "startLineNumber" : 1253,
        "startColumnNumber" : 4,
        "endLineNumber" : 1355,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String toString(){\n  proxyState.getRealm$realm().checkIfValid();\n  if (!proxyState.getRow$realm().isValid()) {\n    return \"Invalid object\";\n  }\n  final String className=proxyState.getRow$realm().getTable().getClassName();\n  StringBuilder sb=new StringBuilder(className + \" = dynamic[\");\n  String[] fields=getFieldNames();\n  for (  String field : fields) {\n    long columnKey=proxyState.getRow$realm().getColumnKey(field);\n    RealmFieldType type=proxyState.getRow$realm().getColumnType(columnKey);\n    sb.append(\"{\");\n    sb.append(field).append(\":\");\nswitch (type) {\ncase BOOLEAN:      sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getBoolean(columnKey));\n    break;\ncase INTEGER:  sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getLong(columnKey));\nbreak;\ncase FLOAT:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getFloat(columnKey));\nbreak;\ncase DOUBLE:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDouble(columnKey));\nbreak;\ncase STRING:sb.append(proxyState.getRow$realm().getString(columnKey));\nbreak;\ncase BINARY:sb.append(Arrays.toString(proxyState.getRow$realm().getBinaryByteArray(columnKey)));\nbreak;\ncase DATE:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDate(columnKey));\nbreak;\ncase DECIMAL128:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDecimal128(columnKey));\nbreak;\ncase OBJECT_ID:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getObjectId(columnKey));\nbreak;\ncase UUID:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getUUID(columnKey));\nbreak;\ncase MIXED:sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : getMixed(columnKey));\nbreak;\ncase OBJECT:sb.append(proxyState.getRow$realm().isNullLink(columnKey) ? \"null\" : proxyState.getRow$realm().getTable().getLinkTarget(columnKey).getClassName());\nbreak;\ncase LIST:String targetClassName=proxyState.getRow$realm().getTable().getLinkTarget(columnKey).getClassName();\nsb.append(String.format(Locale.US,\"RealmList<%s>[%s]\",targetClassName,proxyState.getRow$realm().getModelList(columnKey).size()));\nbreak;\ncase INTEGER_LIST:sb.append(String.format(Locale.US,\"RealmList<Long>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase BOOLEAN_LIST:sb.append(String.format(Locale.US,\"RealmList<Boolean>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase STRING_LIST:sb.append(String.format(Locale.US,\"RealmList<String>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase BINARY_LIST:sb.append(String.format(Locale.US,\"RealmList<byte[]>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase DATE_LIST:sb.append(String.format(Locale.US,\"RealmList<Date>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase FLOAT_LIST:sb.append(String.format(Locale.US,\"RealmList<Float>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase DOUBLE_LIST:sb.append(String.format(Locale.US,\"RealmList<Double>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase DECIMAL128_LIST:sb.append(String.format(Locale.US,\"RealmList<Decimal128>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase OBJECT_ID_LIST:sb.append(String.format(Locale.US,\"RealmList<ObjectId>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase UUID_LIST:sb.append(String.format(Locale.US,\"RealmList<UUID>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ncase MIXED_LIST:sb.append(String.format(Locale.US,\"RealmList<Mixed>[%s]\",proxyState.getRow$realm().getValueList(columnKey,type).size()));\nbreak;\ndefault:sb.append(\"?\");\nbreak;\n}\nsb.append(\"},\");\n}\nsb.replace(sb.length() - 1,sb.length(),\"\");\nsb.append(\"]\");\nreturn sb.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 665,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 1280,
        "startColumnNumber" : 20,
        "endLineNumber" : 1280,
        "endColumnNumber" : 133
      },
      "nodeContext" : "sb.append(proxyState.getRow$realm().isNull(columnKey) ? \"null\" : proxyState.getRow$realm().getDouble(columnKey));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 11,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 101,
    "startLineNumber" : 1280,
    "startColumnNumber" : 30,
    "endLineNumber" : 1280,
    "endColumnNumber" : 131
  } ],
  "layoutRelationDataList" : [ ]
}