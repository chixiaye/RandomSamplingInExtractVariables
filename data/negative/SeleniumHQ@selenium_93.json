{
  "id" : 93,
  "expression" : "\"Exception: \"",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/server/src/org/openqa/selenium/remote/server/rest/ResultConfig.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Exception: \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 145,
      "startColumnNumber" : 18,
      "endLineNumber" : 145,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 145,
        "startColumnNumber" : 18,
        "endLineNumber" : 145,
        "endColumnNumber" : 52
      },
      "nodeContext" : "\"Exception: \" + toUse.getMessage()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 145,
        "startColumnNumber" : 6,
        "endLineNumber" : 145,
        "endColumnNumber" : 53
      },
      "nodeContext" : "log.warning(\"Exception: \" + toUse.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 145,
        "startColumnNumber" : 6,
        "endLineNumber" : 145,
        "endColumnNumber" : 54
      },
      "nodeContext" : "log.warning(\"Exception: \" + toUse.getMessage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 435,
        "startLineNumber" : 140,
        "startColumnNumber" : 26,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.log(Level.WARNING,\"Exception thrown\",e);\n  Throwable toUse=getRootExceptionCause(e);\n  log.warning(\"Exception: \" + toUse.getMessage());\n  Optional<String> screenshot=Optional.empty();\n  if (handler instanceof WebDriverHandler) {\n    screenshot=Optional.ofNullable(((WebDriverHandler<?>)handler).getScreenshot());\n  }\n  response=Responses.failure(sessionId,toUse,screenshot);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 455,
        "startLineNumber" : 140,
        "startColumnNumber" : 6,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "catch (Exception e) {\n  log.log(Level.WARNING,\"Exception thrown\",e);\n  Throwable toUse=getRootExceptionCause(e);\n  log.warning(\"Exception: \" + toUse.getMessage());\n  Optional<String> screenshot=Optional.empty();\n  if (handler instanceof WebDriverHandler) {\n    screenshot=Optional.ofNullable(((WebDriverHandler<?>)handler).getScreenshot());\n  }\n  response=Responses.failure(sessionId,toUse,screenshot);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 73,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1491,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  @SuppressWarnings(\"unchecked\") Map<String,Object> parameters=(Map<String,Object>)command.getParameters();\n  if (parameters != null && !parameters.isEmpty()) {\n    handler.setJsonParameters(parameters);\n  }\n  throwUpIfSessionTerminated(sessionId);\n  Consumer<String> logger=DriverCommand.STATUS.equals(command.getName()) ? log::fine : log::info;\n  logger.accept(String.format(\"Executing: %s)\",handler));\n  Object value=handler.handle();\n  if (value instanceof Response) {\n    response=(Response)value;\n  }\n else {\n    response.setValue(value);\n    response.setState(ErrorCodes.SUCCESS_STRING);\n    response.setStatus(ErrorCodes.SUCCESS);\n  }\n  logger.accept(\"Done: \" + handler);\n}\n catch (UnreachableBrowserException e) {\n  throwUpIfSessionTerminated(sessionId);\n  return Responses.failure(sessionId,e);\n}\ncatch (Exception e) {\n  log.log(Level.WARNING,\"Exception thrown\",e);\n  Throwable toUse=getRootExceptionCause(e);\n  log.warning(\"Exception: \" + toUse.getMessage());\n  Optional<String> screenshot=Optional.empty();\n  if (handler instanceof WebDriverHandler) {\n    screenshot=Optional.ofNullable(((WebDriverHandler<?>)handler).getScreenshot());\n  }\n  response=Responses.failure(sessionId,toUse,screenshot);\n}\ncatch (Error e) {\n  log.info(\"Error: \" + e.getMessage());\n  response=Responses.failure(sessionId,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2147,
        "startLineNumber" : 102,
        "startColumnNumber" : 42,
        "endLineNumber" : 163,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Response response=new Response();\n  SessionId sessionId=command.getSessionId();\n  if (sessionId != null) {\n    response.setSessionId(sessionId.toString());\n  }\n  throwUpIfSessionTerminated(sessionId);\n  final RestishHandler<?> handler=handlerFactory.createHandler(sessionId);\n  try {\n    @SuppressWarnings(\"unchecked\") Map<String,Object> parameters=(Map<String,Object>)command.getParameters();\n    if (parameters != null && !parameters.isEmpty()) {\n      handler.setJsonParameters(parameters);\n    }\n    throwUpIfSessionTerminated(sessionId);\n    Consumer<String> logger=DriverCommand.STATUS.equals(command.getName()) ? log::fine : log::info;\n    logger.accept(String.format(\"Executing: %s)\",handler));\n    Object value=handler.handle();\n    if (value instanceof Response) {\n      response=(Response)value;\n    }\n else {\n      response.setValue(value);\n      response.setState(ErrorCodes.SUCCESS_STRING);\n      response.setStatus(ErrorCodes.SUCCESS);\n    }\n    logger.accept(\"Done: \" + handler);\n  }\n catch (  UnreachableBrowserException e) {\n    throwUpIfSessionTerminated(sessionId);\n    return Responses.failure(sessionId,e);\n  }\ncatch (  Exception e) {\n    log.log(Level.WARNING,\"Exception thrown\",e);\n    Throwable toUse=getRootExceptionCause(e);\n    log.warning(\"Exception: \" + toUse.getMessage());\n    Optional<String> screenshot=Optional.empty();\n    if (handler instanceof WebDriverHandler) {\n      screenshot=Optional.ofNullable(((WebDriverHandler<?>)handler).getScreenshot());\n    }\n    response=Responses.failure(sessionId,toUse,screenshot);\n  }\ncatch (  Error e) {\n    log.info(\"Error: \" + e.getMessage());\n    response=Responses.failure(sessionId,e);\n  }\n  if (handler instanceof DeleteSession) {\n    final PerSessionLogHandler logHandler=LoggingManager.perSessionLogHandler();\n    logHandler.transferThreadTempLogsToSessionLogs(sessionId);\n    logHandler.removeSessionLogs(sessionId);\n  }\n  return response;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 309,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2187,
        "startLineNumber" : 102,
        "startColumnNumber" : 2,
        "endLineNumber" : 163,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public Response handle(Command command){\n  Response response=new Response();\n  SessionId sessionId=command.getSessionId();\n  if (sessionId != null) {\n    response.setSessionId(sessionId.toString());\n  }\n  throwUpIfSessionTerminated(sessionId);\n  final RestishHandler<?> handler=handlerFactory.createHandler(sessionId);\n  try {\n    @SuppressWarnings(\"unchecked\") Map<String,Object> parameters=(Map<String,Object>)command.getParameters();\n    if (parameters != null && !parameters.isEmpty()) {\n      handler.setJsonParameters(parameters);\n    }\n    throwUpIfSessionTerminated(sessionId);\n    Consumer<String> logger=DriverCommand.STATUS.equals(command.getName()) ? log::fine : log::info;\n    logger.accept(String.format(\"Executing: %s)\",handler));\n    Object value=handler.handle();\n    if (value instanceof Response) {\n      response=(Response)value;\n    }\n else {\n      response.setValue(value);\n      response.setState(ErrorCodes.SUCCESS_STRING);\n      response.setStatus(ErrorCodes.SUCCESS);\n    }\n    logger.accept(\"Done: \" + handler);\n  }\n catch (  UnreachableBrowserException e) {\n    throwUpIfSessionTerminated(sessionId);\n    return Responses.failure(sessionId,e);\n  }\ncatch (  Exception e) {\n    log.log(Level.WARNING,\"Exception thrown\",e);\n    Throwable toUse=getRootExceptionCause(e);\n    log.warning(\"Exception: \" + toUse.getMessage());\n    Optional<String> screenshot=Optional.empty();\n    if (handler instanceof WebDriverHandler) {\n      screenshot=Optional.ofNullable(((WebDriverHandler<?>)handler).getScreenshot());\n    }\n    response=Responses.failure(sessionId,toUse,screenshot);\n  }\ncatch (  Error e) {\n    log.info(\"Error: \" + e.getMessage());\n    response=Responses.failure(sessionId,e);\n  }\n  if (handler instanceof DeleteSession) {\n    final PerSessionLogHandler logHandler=LoggingManager.perSessionLogHandler();\n    logHandler.transferThreadTempLogsToSessionLogs(sessionId);\n    logHandler.removeSessionLogs(sessionId);\n  }\n  return response;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 318,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 145,
        "startColumnNumber" : 6,
        "endLineNumber" : 145,
        "endColumnNumber" : 54
      },
      "nodeContext" : "log.warning(\"Exception: \" + toUse.getMessage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 145,
    "startColumnNumber" : 18,
    "endLineNumber" : 145,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}