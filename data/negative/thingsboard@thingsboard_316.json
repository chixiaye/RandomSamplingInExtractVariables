{
  "id" : 316,
  "expression" : "delimiter",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/application/src/main/java/org/thingsboard/server/utils/CsvUtils.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "delimiter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 32,
      "startColumnNumber" : 30,
      "endLineNumber" : 32,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 32,
        "startColumnNumber" : 30,
        "endLineNumber" : 32,
        "endColumnNumber" : 51
      },
      "nodeContext" : "delimiter.equals(',')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 32,
        "startColumnNumber" : 30,
        "endLineNumber" : 32,
        "endColumnNumber" : 116
      },
      "nodeContext" : "delimiter.equals(',') ? CSVFormat.DEFAULT : CSVFormat.DEFAULT.withDelimiter(delimiter)",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 32,
        "startColumnNumber" : 18,
        "endLineNumber" : 32,
        "endColumnNumber" : 116
      },
      "nodeContext" : "csvFormat=delimiter.equals(',') ? CSVFormat.DEFAULT : CSVFormat.DEFAULT.withDelimiter(delimiter)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 117
      },
      "nodeContext" : "CSVFormat csvFormat=delimiter.equals(',') ? CSVFormat.DEFAULT : CSVFormat.DEFAULT.withDelimiter(delimiter);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 567,
        "startLineNumber" : 31,
        "startColumnNumber" : 100,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  CSVFormat csvFormat=delimiter.equals(',') ? CSVFormat.DEFAULT : CSVFormat.DEFAULT.withDelimiter(delimiter);\n  List<CSVRecord> records;\n  try (CharSequenceReader reader=new CharSequenceReader(content)){\n    records=csvFormat.parse(reader).getRecords();\n  }\n   return records.stream().map(record -> Stream.iterate(0,i -> i < record.size(),i -> i + 1).map(record::get).collect(Collectors.toList())).collect(Collectors.toList());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 663,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<List<String>> parseCsv(String content,Character delimiter) throws Exception {\n  CSVFormat csvFormat=delimiter.equals(',') ? CSVFormat.DEFAULT : CSVFormat.DEFAULT.withDelimiter(delimiter);\n  List<CSVRecord> records;\n  try (CharSequenceReader reader=new CharSequenceReader(content)){\n    records=csvFormat.parse(reader).getRecords();\n  }\n   return records.stream().map(record -> Stream.iterate(0,i -> i < record.size(),i -> i + 1).map(record::get).collect(Collectors.toList())).collect(Collectors.toList());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 117
      },
      "nodeContext" : "CSVFormat csvFormat=delimiter.equals(',') ? CSVFormat.DEFAULT : CSVFormat.DEFAULT.withDelimiter(delimiter);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Character"
  }, {
    "nodeContext" : "delimiter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 32,
      "startColumnNumber" : 106,
      "endLineNumber" : 32,
      "endColumnNumber" : 115
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 32,
        "startColumnNumber" : 74,
        "endLineNumber" : 32,
        "endColumnNumber" : 116
      },
      "nodeContext" : "CSVFormat.DEFAULT.withDelimiter(delimiter)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 32,
        "startColumnNumber" : 30,
        "endLineNumber" : 32,
        "endColumnNumber" : 116
      },
      "nodeContext" : "delimiter.equals(',') ? CSVFormat.DEFAULT : CSVFormat.DEFAULT.withDelimiter(delimiter)",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 32,
        "startColumnNumber" : 18,
        "endLineNumber" : 32,
        "endColumnNumber" : 116
      },
      "nodeContext" : "csvFormat=delimiter.equals(',') ? CSVFormat.DEFAULT : CSVFormat.DEFAULT.withDelimiter(delimiter)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 117
      },
      "nodeContext" : "CSVFormat csvFormat=delimiter.equals(',') ? CSVFormat.DEFAULT : CSVFormat.DEFAULT.withDelimiter(delimiter);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 567,
        "startLineNumber" : 31,
        "startColumnNumber" : 100,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  CSVFormat csvFormat=delimiter.equals(',') ? CSVFormat.DEFAULT : CSVFormat.DEFAULT.withDelimiter(delimiter);\n  List<CSVRecord> records;\n  try (CharSequenceReader reader=new CharSequenceReader(content)){\n    records=csvFormat.parse(reader).getRecords();\n  }\n   return records.stream().map(record -> Stream.iterate(0,i -> i < record.size(),i -> i + 1).map(record::get).collect(Collectors.toList())).collect(Collectors.toList());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 663,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<List<String>> parseCsv(String content,Character delimiter) throws Exception {\n  CSVFormat csvFormat=delimiter.equals(',') ? CSVFormat.DEFAULT : CSVFormat.DEFAULT.withDelimiter(delimiter);\n  List<CSVRecord> records;\n  try (CharSequenceReader reader=new CharSequenceReader(content)){\n    records=csvFormat.parse(reader).getRecords();\n  }\n   return records.stream().map(record -> Stream.iterate(0,i -> i < record.size(),i -> i + 1).map(record::get).collect(Collectors.toList())).collect(Collectors.toList());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 117
      },
      "nodeContext" : "CSVFormat csvFormat=delimiter.equals(',') ? CSVFormat.DEFAULT : CSVFormat.DEFAULT.withDelimiter(delimiter);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Character"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 32,
    "startColumnNumber" : 30,
    "endLineNumber" : 32,
    "endColumnNumber" : 39
  }, {
    "charLength" : 9,
    "startLineNumber" : 32,
    "startColumnNumber" : 106,
    "endLineNumber" : 32,
    "endColumnNumber" : 115
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}