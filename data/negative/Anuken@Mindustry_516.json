{
  "id" : 516,
  "expression" : "Math",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/world/blocks/defense/turrets/TractorBeamTurret.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 87,
      "startColumnNumber" : 29,
      "endLineNumber" : 87,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 87,
        "startColumnNumber" : 29,
        "endLineNumber" : 87,
        "endColumnNumber" : 151
      },
      "nodeContext" : "Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 87,
        "startColumnNumber" : 22,
        "endLineNumber" : 87,
        "endColumnNumber" : 151
      },
      "nodeContext" : "used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 152
      },
      "nodeContext" : "float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 621,
        "startLineNumber" : 82,
        "startColumnNumber" : 47,
        "endLineNumber" : 96,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  float maxUsed=consumes.<ConsumeLiquidBase>get(ConsumeType.liquid).amount;\n  Liquid liquid=liquids.current();\n  float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n  liquids.remove(liquid,used);\n  if (Mathf.chance(0.06 * used)) {\n    coolEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n  }\n  coolant=1f + (used * liquid.heatCapacity * coolantMultiplier);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 656,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (target != null && acceptCoolant) {\n  float maxUsed=consumes.<ConsumeLiquidBase>get(ConsumeType.liquid).amount;\n  Liquid liquid=liquids.current();\n  float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n  liquids.remove(liquid,used);\n  if (Mathf.chance(0.06 * used)) {\n    coolEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n  }\n  coolant=1f + (used * liquid.heatCapacity * coolantMultiplier);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 110,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2204,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (timer(timerTarget,retargetTime)) {\n    target=Units.closestEnemy(team,x,y,range,u -> u.checkTarget(targetAir,targetGround));\n  }\n  if (target != null && acceptCoolant) {\n    float maxUsed=consumes.<ConsumeLiquidBase>get(ConsumeType.liquid).amount;\n    Liquid liquid=liquids.current();\n    float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n    liquids.remove(liquid,used);\n    if (Mathf.chance(0.06 * used)) {\n      coolEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n    }\n    coolant=1f + (used * liquid.heatCapacity * coolantMultiplier);\n  }\n  any=false;\n  if (target != null && target.within(this,range + target.hitSize / 2f) && target.team() != team && target.checkTarget(targetAir,targetGround) && efficiency() > 0.02f) {\n    if (!headless) {\n      control.sound.loop(shootSound,this,shootSoundVolume);\n    }\n    float dest=angleTo(target);\n    rotation=Angles.moveToward(rotation,dest,rotateSpeed * edelta());\n    lastX=target.x;\n    lastY=target.y;\n    strength=Mathf.lerpDelta(strength,1f,0.1f);\n    if (Angles.within(rotation,dest,shootCone)) {\n      if (damage > 0) {\n        target.damageContinuous(damage * efficiency());\n      }\n      if (status != StatusEffects.none) {\n        target.apply(status,statusDuration);\n      }\n      any=true;\n      target.impulseNet(Tmp.v1.set(this).sub(target).limit((force + (1f - target.dst(this) / range) * scaledForce) * edelta() * timeScale));\n    }\n  }\n else {\n    strength=Mathf.lerpDelta(strength,0,0.1f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2246,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void updateTile(){\n  if (timer(timerTarget,retargetTime)) {\n    target=Units.closestEnemy(team,x,y,range,u -> u.checkTarget(targetAir,targetGround));\n  }\n  if (target != null && acceptCoolant) {\n    float maxUsed=consumes.<ConsumeLiquidBase>get(ConsumeType.liquid).amount;\n    Liquid liquid=liquids.current();\n    float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n    liquids.remove(liquid,used);\n    if (Mathf.chance(0.06 * used)) {\n      coolEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n    }\n    coolant=1f + (used * liquid.heatCapacity * coolantMultiplier);\n  }\n  any=false;\n  if (target != null && target.within(this,range + target.hitSize / 2f) && target.team() != team && target.checkTarget(targetAir,targetGround) && efficiency() > 0.02f) {\n    if (!headless) {\n      control.sound.loop(shootSound,this,shootSoundVolume);\n    }\n    float dest=angleTo(target);\n    rotation=Angles.moveToward(rotation,dest,rotateSpeed * edelta());\n    lastX=target.x;\n    lastY=target.y;\n    strength=Mathf.lerpDelta(strength,1f,0.1f);\n    if (Angles.within(rotation,dest,shootCone)) {\n      if (damage > 0) {\n        target.damageContinuous(damage * efficiency());\n      }\n      if (status != StatusEffects.none) {\n        target.apply(status,statusDuration);\n      }\n      any=true;\n      target.impulseNet(Tmp.v1.set(this).sub(target).limit((force + (1f - target.dst(this) / range) * scaledForce) * edelta() * timeScale));\n    }\n  }\n else {\n    strength=Mathf.lerpDelta(strength,0,0.1f);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 313,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 152
      },
      "nodeContext" : "float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  }, {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 87,
      "startColumnNumber" : 38,
      "endLineNumber" : 87,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 87,
        "startColumnNumber" : 38,
        "endLineNumber" : 87,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Math.min(liquids.get(liquid),maxUsed * Time.delta)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 87,
        "startColumnNumber" : 29,
        "endLineNumber" : 87,
        "endColumnNumber" : 151
      },
      "nodeContext" : "Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 87,
        "startColumnNumber" : 22,
        "endLineNumber" : 87,
        "endColumnNumber" : 151
      },
      "nodeContext" : "used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 152
      },
      "nodeContext" : "float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 621,
        "startLineNumber" : 82,
        "startColumnNumber" : 47,
        "endLineNumber" : 96,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  float maxUsed=consumes.<ConsumeLiquidBase>get(ConsumeType.liquid).amount;\n  Liquid liquid=liquids.current();\n  float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n  liquids.remove(liquid,used);\n  if (Mathf.chance(0.06 * used)) {\n    coolEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n  }\n  coolant=1f + (used * liquid.heatCapacity * coolantMultiplier);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 656,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (target != null && acceptCoolant) {\n  float maxUsed=consumes.<ConsumeLiquidBase>get(ConsumeType.liquid).amount;\n  Liquid liquid=liquids.current();\n  float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n  liquids.remove(liquid,used);\n  if (Mathf.chance(0.06 * used)) {\n    coolEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n  }\n  coolant=1f + (used * liquid.heatCapacity * coolantMultiplier);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 110,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2204,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (timer(timerTarget,retargetTime)) {\n    target=Units.closestEnemy(team,x,y,range,u -> u.checkTarget(targetAir,targetGround));\n  }\n  if (target != null && acceptCoolant) {\n    float maxUsed=consumes.<ConsumeLiquidBase>get(ConsumeType.liquid).amount;\n    Liquid liquid=liquids.current();\n    float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n    liquids.remove(liquid,used);\n    if (Mathf.chance(0.06 * used)) {\n      coolEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n    }\n    coolant=1f + (used * liquid.heatCapacity * coolantMultiplier);\n  }\n  any=false;\n  if (target != null && target.within(this,range + target.hitSize / 2f) && target.team() != team && target.checkTarget(targetAir,targetGround) && efficiency() > 0.02f) {\n    if (!headless) {\n      control.sound.loop(shootSound,this,shootSoundVolume);\n    }\n    float dest=angleTo(target);\n    rotation=Angles.moveToward(rotation,dest,rotateSpeed * edelta());\n    lastX=target.x;\n    lastY=target.y;\n    strength=Mathf.lerpDelta(strength,1f,0.1f);\n    if (Angles.within(rotation,dest,shootCone)) {\n      if (damage > 0) {\n        target.damageContinuous(damage * efficiency());\n      }\n      if (status != StatusEffects.none) {\n        target.apply(status,statusDuration);\n      }\n      any=true;\n      target.impulseNet(Tmp.v1.set(this).sub(target).limit((force + (1f - target.dst(this) / range) * scaledForce) * edelta() * timeScale));\n    }\n  }\n else {\n    strength=Mathf.lerpDelta(strength,0,0.1f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2246,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void updateTile(){\n  if (timer(timerTarget,retargetTime)) {\n    target=Units.closestEnemy(team,x,y,range,u -> u.checkTarget(targetAir,targetGround));\n  }\n  if (target != null && acceptCoolant) {\n    float maxUsed=consumes.<ConsumeLiquidBase>get(ConsumeType.liquid).amount;\n    Liquid liquid=liquids.current();\n    float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n    liquids.remove(liquid,used);\n    if (Mathf.chance(0.06 * used)) {\n      coolEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n    }\n    coolant=1f + (used * liquid.heatCapacity * coolantMultiplier);\n  }\n  any=false;\n  if (target != null && target.within(this,range + target.hitSize / 2f) && target.team() != team && target.checkTarget(targetAir,targetGround) && efficiency() > 0.02f) {\n    if (!headless) {\n      control.sound.loop(shootSound,this,shootSoundVolume);\n    }\n    float dest=angleTo(target);\n    rotation=Angles.moveToward(rotation,dest,rotateSpeed * edelta());\n    lastX=target.x;\n    lastY=target.y;\n    strength=Mathf.lerpDelta(strength,1f,0.1f);\n    if (Angles.within(rotation,dest,shootCone)) {\n      if (damage > 0) {\n        target.damageContinuous(damage * efficiency());\n      }\n      if (status != StatusEffects.none) {\n        target.apply(status,statusDuration);\n      }\n      any=true;\n      target.impulseNet(Tmp.v1.set(this).sub(target).limit((force + (1f - target.dst(this) / range) * scaledForce) * edelta() * timeScale));\n    }\n  }\n else {\n    strength=Mathf.lerpDelta(strength,0,0.1f);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 313,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 152
      },
      "nodeContext" : "float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  }, {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 87,
      "startColumnNumber" : 91,
      "endLineNumber" : 87,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 87,
        "startColumnNumber" : 91,
        "endLineNumber" : 87,
        "endColumnNumber" : 150
      },
      "nodeContext" : "Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 87,
        "startColumnNumber" : 29,
        "endLineNumber" : 87,
        "endColumnNumber" : 151
      },
      "nodeContext" : "Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 87,
        "startColumnNumber" : 22,
        "endLineNumber" : 87,
        "endColumnNumber" : 151
      },
      "nodeContext" : "used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 152
      },
      "nodeContext" : "float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 621,
        "startLineNumber" : 82,
        "startColumnNumber" : 47,
        "endLineNumber" : 96,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  float maxUsed=consumes.<ConsumeLiquidBase>get(ConsumeType.liquid).amount;\n  Liquid liquid=liquids.current();\n  float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n  liquids.remove(liquid,used);\n  if (Mathf.chance(0.06 * used)) {\n    coolEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n  }\n  coolant=1f + (used * liquid.heatCapacity * coolantMultiplier);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 656,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (target != null && acceptCoolant) {\n  float maxUsed=consumes.<ConsumeLiquidBase>get(ConsumeType.liquid).amount;\n  Liquid liquid=liquids.current();\n  float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n  liquids.remove(liquid,used);\n  if (Mathf.chance(0.06 * used)) {\n    coolEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n  }\n  coolant=1f + (used * liquid.heatCapacity * coolantMultiplier);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 110,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2204,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (timer(timerTarget,retargetTime)) {\n    target=Units.closestEnemy(team,x,y,range,u -> u.checkTarget(targetAir,targetGround));\n  }\n  if (target != null && acceptCoolant) {\n    float maxUsed=consumes.<ConsumeLiquidBase>get(ConsumeType.liquid).amount;\n    Liquid liquid=liquids.current();\n    float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n    liquids.remove(liquid,used);\n    if (Mathf.chance(0.06 * used)) {\n      coolEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n    }\n    coolant=1f + (used * liquid.heatCapacity * coolantMultiplier);\n  }\n  any=false;\n  if (target != null && target.within(this,range + target.hitSize / 2f) && target.team() != team && target.checkTarget(targetAir,targetGround) && efficiency() > 0.02f) {\n    if (!headless) {\n      control.sound.loop(shootSound,this,shootSoundVolume);\n    }\n    float dest=angleTo(target);\n    rotation=Angles.moveToward(rotation,dest,rotateSpeed * edelta());\n    lastX=target.x;\n    lastY=target.y;\n    strength=Mathf.lerpDelta(strength,1f,0.1f);\n    if (Angles.within(rotation,dest,shootCone)) {\n      if (damage > 0) {\n        target.damageContinuous(damage * efficiency());\n      }\n      if (status != StatusEffects.none) {\n        target.apply(status,statusDuration);\n      }\n      any=true;\n      target.impulseNet(Tmp.v1.set(this).sub(target).limit((force + (1f - target.dst(this) / range) * scaledForce) * edelta() * timeScale));\n    }\n  }\n else {\n    strength=Mathf.lerpDelta(strength,0,0.1f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2246,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void updateTile(){\n  if (timer(timerTarget,retargetTime)) {\n    target=Units.closestEnemy(team,x,y,range,u -> u.checkTarget(targetAir,targetGround));\n  }\n  if (target != null && acceptCoolant) {\n    float maxUsed=consumes.<ConsumeLiquidBase>get(ConsumeType.liquid).amount;\n    Liquid liquid=liquids.current();\n    float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n    liquids.remove(liquid,used);\n    if (Mathf.chance(0.06 * used)) {\n      coolEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n    }\n    coolant=1f + (used * liquid.heatCapacity * coolantMultiplier);\n  }\n  any=false;\n  if (target != null && target.within(this,range + target.hitSize / 2f) && target.team() != team && target.checkTarget(targetAir,targetGround) && efficiency() > 0.02f) {\n    if (!headless) {\n      control.sound.loop(shootSound,this,shootSoundVolume);\n    }\n    float dest=angleTo(target);\n    rotation=Angles.moveToward(rotation,dest,rotateSpeed * edelta());\n    lastX=target.x;\n    lastY=target.y;\n    strength=Mathf.lerpDelta(strength,1f,0.1f);\n    if (Angles.within(rotation,dest,shootCone)) {\n      if (damage > 0) {\n        target.damageContinuous(damage * efficiency());\n      }\n      if (status != StatusEffects.none) {\n        target.apply(status,statusDuration);\n      }\n      any=true;\n      target.impulseNet(Tmp.v1.set(this).sub(target).limit((force + (1f - target.dst(this) / range) * scaledForce) * edelta() * timeScale));\n    }\n  }\n else {\n    strength=Mathf.lerpDelta(strength,0,0.1f);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 313,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 152
      },
      "nodeContext" : "float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,(1f / coolantMultiplier) / liquid.heatCapacity));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 87,
    "startColumnNumber" : 29,
    "endLineNumber" : 87,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 87,
    "startColumnNumber" : 38,
    "endLineNumber" : 87,
    "endColumnNumber" : 42
  }, {
    "charLength" : 4,
    "startLineNumber" : 87,
    "startColumnNumber" : 91,
    "endLineNumber" : 87,
    "endColumnNumber" : 95
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  } ]
}