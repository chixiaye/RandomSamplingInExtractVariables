{
  "id" : 155,
  "expression" : "i <= APPEND_IN_SIZE",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/rm-datasource/src/test/java/io/seata/rm/datasource/undo/UndoLogManagerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i <= APPEND_IN_SIZE",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 64,
      "startColumnNumber" : 23,
      "endLineNumber" : 64,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=1; i <= APPEND_IN_SIZE; i++) {\n  verify(preparedStatement).setLong(eq(i),anyLong());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 941,
        "startLineNumber" : 49,
        "startColumnNumber" : 58,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Set<String> xids=new HashSet<>();\n  for (int i=0; i < APPEND_IN_SIZE; i++) {\n    xids.add(UUID.randomUUID().toString());\n  }\n  Set<Long> branchIds=new HashSet<>();\n  for (int i=0; i < APPEND_IN_SIZE; i++) {\n    branchIds.add(Long.valueOf(i));\n  }\n  Connection connection=mock(Connection.class);\n  PreparedStatement preparedStatement=mock(PreparedStatement.class);\n  when(connection.prepareStatement(anyString())).thenReturn(preparedStatement);\n  UndoLogManager.batchDeleteUndoLog(xids,branchIds,connection);\n  for (int i=1; i <= APPEND_IN_SIZE; i++) {\n    verify(preparedStatement).setLong(eq(i),anyLong());\n  }\n  for (int i=APPEND_IN_SIZE + 1; i <= APPEND_IN_SIZE * 2; i++) {\n    verify(preparedStatement).setString(eq(i),anyString());\n  }\n  verify(preparedStatement).executeUpdate();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1005,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testBatchDeleteUndoLog() throws Exception {\n  Set<String> xids=new HashSet<>();\n  for (int i=0; i < APPEND_IN_SIZE; i++) {\n    xids.add(UUID.randomUUID().toString());\n  }\n  Set<Long> branchIds=new HashSet<>();\n  for (int i=0; i < APPEND_IN_SIZE; i++) {\n    branchIds.add(Long.valueOf(i));\n  }\n  Connection connection=mock(Connection.class);\n  PreparedStatement preparedStatement=mock(PreparedStatement.class);\n  when(connection.prepareStatement(anyString())).thenReturn(preparedStatement);\n  UndoLogManager.batchDeleteUndoLog(xids,branchIds,connection);\n  for (int i=1; i <= APPEND_IN_SIZE; i++) {\n    verify(preparedStatement).setLong(eq(i),anyLong());\n  }\n  for (int i=APPEND_IN_SIZE + 1; i <= APPEND_IN_SIZE * 2; i++) {\n    verify(preparedStatement).setString(eq(i),anyString());\n  }\n  verify(preparedStatement).executeUpdate();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=1; i <= APPEND_IN_SIZE; i++) {\n  verify(preparedStatement).setLong(eq(i),anyLong());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 64,
    "startColumnNumber" : 23,
    "endLineNumber" : 64,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}