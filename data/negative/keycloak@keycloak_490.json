{
  "id" : 490,
  "expression" : "realmsResouce().realm(getRealmId())",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/client/authorization/AuthorizationTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "realmsResouce().realm(getRealmId())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 51,
      "startColumnNumber" : 30,
      "endLineNumber" : 51,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 51,
        "startColumnNumber" : 22,
        "endLineNumber" : 51,
        "endColumnNumber" : 65
      },
      "nodeContext" : "realm=realmsResouce().realm(getRealmId())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 66
      },
      "nodeContext" : "RealmResource realm=realmsResouce().realm(getRealmId());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2867,
        "startLineNumber" : 48,
        "startColumnNumber" : 50,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClientResource clientResource=getClientResource();\n  ClientRepresentation resourceServer=getResourceServer();\n  RealmResource realm=realmsResouce().realm(getRealmId());\n  UserRepresentation serviceAccount=realm.users().search(ServiceAccountConstants.SERVICE_ACCOUNT_USER_PREFIX + resourceServer.getClientId()).get(0);\n  Assert.assertNotNull(serviceAccount);\n  List<RoleRepresentation> serviceAccountRoles=realm.users().get(serviceAccount.getId()).roles().clientLevel(resourceServer.getId()).listEffective();\n  Assert.assertTrue(serviceAccountRoles.stream().anyMatch(roleRepresentation -> \"uma_protection\".equals(roleRepresentation.getName())));\n  enableAuthorizationServices(false);\n  enableAuthorizationServices(true);\n  serviceAccount=clientResource.getServiceAccountUser();\n  Assert.assertNotNull(serviceAccount);\n  realm=realmsResouce().realm(getRealmId());\n  serviceAccountRoles=realm.users().get(serviceAccount.getId()).roles().clientLevel(resourceServer.getId()).listEffective();\n  Assert.assertTrue(serviceAccountRoles.stream().anyMatch(roleRepresentation -> \"uma_protection\".equals(roleRepresentation.getName())));\n  JSPolicyRepresentation policy=new JSPolicyRepresentation();\n  policy.setName(\"should be removed\");\n  policy.setCode(\"\");\n  clientResource.authorization().policies().js().create(policy);\n  List<ResourceRepresentation> defaultResources=clientResource.authorization().resources().resources();\n  assertEquals(1,defaultResources.size());\n  List<PolicyRepresentation> defaultPolicies=clientResource.authorization().policies().policies();\n  assertEquals(3,defaultPolicies.size());\n  enableAuthorizationServices(false);\n  enableAuthorizationServices(true);\n  ResourceServerRepresentation settings=clientResource.authorization().getSettings();\n  assertEquals(PolicyEnforcerConfig.EnforcementMode.ENFORCING.name(),settings.getPolicyEnforcementMode().name());\n  assertTrue(settings.isAllowRemoteResourceManagement());\n  assertEquals(resourceServer.getId(),settings.getClientId());\n  defaultResources=clientResource.authorization().resources().resources();\n  assertEquals(1,defaultResources.size());\n  defaultPolicies=clientResource.authorization().policies().policies();\n  assertEquals(2,defaultPolicies.size());\n  serviceAccount=clientResource.getServiceAccountUser();\n  Assert.assertNotNull(serviceAccount);\n  serviceAccountRoles=realm.users().get(serviceAccount.getId()).roles().clientLevel(resourceServer.getId()).listEffective();\n  Assert.assertTrue(serviceAccountRoles.stream().anyMatch(roleRepresentation -> \"uma_protection\".equals(roleRepresentation.getName())));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 364,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2923,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testEnableAuthorizationServices(){\n  ClientResource clientResource=getClientResource();\n  ClientRepresentation resourceServer=getResourceServer();\n  RealmResource realm=realmsResouce().realm(getRealmId());\n  UserRepresentation serviceAccount=realm.users().search(ServiceAccountConstants.SERVICE_ACCOUNT_USER_PREFIX + resourceServer.getClientId()).get(0);\n  Assert.assertNotNull(serviceAccount);\n  List<RoleRepresentation> serviceAccountRoles=realm.users().get(serviceAccount.getId()).roles().clientLevel(resourceServer.getId()).listEffective();\n  Assert.assertTrue(serviceAccountRoles.stream().anyMatch(roleRepresentation -> \"uma_protection\".equals(roleRepresentation.getName())));\n  enableAuthorizationServices(false);\n  enableAuthorizationServices(true);\n  serviceAccount=clientResource.getServiceAccountUser();\n  Assert.assertNotNull(serviceAccount);\n  realm=realmsResouce().realm(getRealmId());\n  serviceAccountRoles=realm.users().get(serviceAccount.getId()).roles().clientLevel(resourceServer.getId()).listEffective();\n  Assert.assertTrue(serviceAccountRoles.stream().anyMatch(roleRepresentation -> \"uma_protection\".equals(roleRepresentation.getName())));\n  JSPolicyRepresentation policy=new JSPolicyRepresentation();\n  policy.setName(\"should be removed\");\n  policy.setCode(\"\");\n  clientResource.authorization().policies().js().create(policy);\n  List<ResourceRepresentation> defaultResources=clientResource.authorization().resources().resources();\n  assertEquals(1,defaultResources.size());\n  List<PolicyRepresentation> defaultPolicies=clientResource.authorization().policies().policies();\n  assertEquals(3,defaultPolicies.size());\n  enableAuthorizationServices(false);\n  enableAuthorizationServices(true);\n  ResourceServerRepresentation settings=clientResource.authorization().getSettings();\n  assertEquals(PolicyEnforcerConfig.EnforcementMode.ENFORCING.name(),settings.getPolicyEnforcementMode().name());\n  assertTrue(settings.isAllowRemoteResourceManagement());\n  assertEquals(resourceServer.getId(),settings.getClientId());\n  defaultResources=clientResource.authorization().resources().resources();\n  assertEquals(1,defaultResources.size());\n  defaultPolicies=clientResource.authorization().policies().policies();\n  assertEquals(2,defaultPolicies.size());\n  serviceAccount=clientResource.getServiceAccountUser();\n  Assert.assertNotNull(serviceAccount);\n  serviceAccountRoles=realm.users().get(serviceAccount.getId()).roles().clientLevel(resourceServer.getId()).listEffective();\n  Assert.assertTrue(serviceAccountRoles.stream().anyMatch(roleRepresentation -> \"uma_protection\".equals(roleRepresentation.getName())));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 370,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 66
      },
      "nodeContext" : "RealmResource realm=realmsResouce().realm(getRealmId());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "org.keycloak.admin.client.resource.RealmResource"
  }, {
    "nodeContext" : "realmsResouce().realm(getRealmId())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 63,
      "startColumnNumber" : 16,
      "endLineNumber" : 63,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 51
      },
      "nodeContext" : "realm=realmsResouce().realm(getRealmId())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 52
      },
      "nodeContext" : "realm=realmsResouce().realm(getRealmId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2867,
        "startLineNumber" : 48,
        "startColumnNumber" : 50,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClientResource clientResource=getClientResource();\n  ClientRepresentation resourceServer=getResourceServer();\n  RealmResource realm=realmsResouce().realm(getRealmId());\n  UserRepresentation serviceAccount=realm.users().search(ServiceAccountConstants.SERVICE_ACCOUNT_USER_PREFIX + resourceServer.getClientId()).get(0);\n  Assert.assertNotNull(serviceAccount);\n  List<RoleRepresentation> serviceAccountRoles=realm.users().get(serviceAccount.getId()).roles().clientLevel(resourceServer.getId()).listEffective();\n  Assert.assertTrue(serviceAccountRoles.stream().anyMatch(roleRepresentation -> \"uma_protection\".equals(roleRepresentation.getName())));\n  enableAuthorizationServices(false);\n  enableAuthorizationServices(true);\n  serviceAccount=clientResource.getServiceAccountUser();\n  Assert.assertNotNull(serviceAccount);\n  realm=realmsResouce().realm(getRealmId());\n  serviceAccountRoles=realm.users().get(serviceAccount.getId()).roles().clientLevel(resourceServer.getId()).listEffective();\n  Assert.assertTrue(serviceAccountRoles.stream().anyMatch(roleRepresentation -> \"uma_protection\".equals(roleRepresentation.getName())));\n  JSPolicyRepresentation policy=new JSPolicyRepresentation();\n  policy.setName(\"should be removed\");\n  policy.setCode(\"\");\n  clientResource.authorization().policies().js().create(policy);\n  List<ResourceRepresentation> defaultResources=clientResource.authorization().resources().resources();\n  assertEquals(1,defaultResources.size());\n  List<PolicyRepresentation> defaultPolicies=clientResource.authorization().policies().policies();\n  assertEquals(3,defaultPolicies.size());\n  enableAuthorizationServices(false);\n  enableAuthorizationServices(true);\n  ResourceServerRepresentation settings=clientResource.authorization().getSettings();\n  assertEquals(PolicyEnforcerConfig.EnforcementMode.ENFORCING.name(),settings.getPolicyEnforcementMode().name());\n  assertTrue(settings.isAllowRemoteResourceManagement());\n  assertEquals(resourceServer.getId(),settings.getClientId());\n  defaultResources=clientResource.authorization().resources().resources();\n  assertEquals(1,defaultResources.size());\n  defaultPolicies=clientResource.authorization().policies().policies();\n  assertEquals(2,defaultPolicies.size());\n  serviceAccount=clientResource.getServiceAccountUser();\n  Assert.assertNotNull(serviceAccount);\n  serviceAccountRoles=realm.users().get(serviceAccount.getId()).roles().clientLevel(resourceServer.getId()).listEffective();\n  Assert.assertTrue(serviceAccountRoles.stream().anyMatch(roleRepresentation -> \"uma_protection\".equals(roleRepresentation.getName())));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 364,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2923,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testEnableAuthorizationServices(){\n  ClientResource clientResource=getClientResource();\n  ClientRepresentation resourceServer=getResourceServer();\n  RealmResource realm=realmsResouce().realm(getRealmId());\n  UserRepresentation serviceAccount=realm.users().search(ServiceAccountConstants.SERVICE_ACCOUNT_USER_PREFIX + resourceServer.getClientId()).get(0);\n  Assert.assertNotNull(serviceAccount);\n  List<RoleRepresentation> serviceAccountRoles=realm.users().get(serviceAccount.getId()).roles().clientLevel(resourceServer.getId()).listEffective();\n  Assert.assertTrue(serviceAccountRoles.stream().anyMatch(roleRepresentation -> \"uma_protection\".equals(roleRepresentation.getName())));\n  enableAuthorizationServices(false);\n  enableAuthorizationServices(true);\n  serviceAccount=clientResource.getServiceAccountUser();\n  Assert.assertNotNull(serviceAccount);\n  realm=realmsResouce().realm(getRealmId());\n  serviceAccountRoles=realm.users().get(serviceAccount.getId()).roles().clientLevel(resourceServer.getId()).listEffective();\n  Assert.assertTrue(serviceAccountRoles.stream().anyMatch(roleRepresentation -> \"uma_protection\".equals(roleRepresentation.getName())));\n  JSPolicyRepresentation policy=new JSPolicyRepresentation();\n  policy.setName(\"should be removed\");\n  policy.setCode(\"\");\n  clientResource.authorization().policies().js().create(policy);\n  List<ResourceRepresentation> defaultResources=clientResource.authorization().resources().resources();\n  assertEquals(1,defaultResources.size());\n  List<PolicyRepresentation> defaultPolicies=clientResource.authorization().policies().policies();\n  assertEquals(3,defaultPolicies.size());\n  enableAuthorizationServices(false);\n  enableAuthorizationServices(true);\n  ResourceServerRepresentation settings=clientResource.authorization().getSettings();\n  assertEquals(PolicyEnforcerConfig.EnforcementMode.ENFORCING.name(),settings.getPolicyEnforcementMode().name());\n  assertTrue(settings.isAllowRemoteResourceManagement());\n  assertEquals(resourceServer.getId(),settings.getClientId());\n  defaultResources=clientResource.authorization().resources().resources();\n  assertEquals(1,defaultResources.size());\n  defaultPolicies=clientResource.authorization().policies().policies();\n  assertEquals(2,defaultPolicies.size());\n  serviceAccount=clientResource.getServiceAccountUser();\n  Assert.assertNotNull(serviceAccount);\n  serviceAccountRoles=realm.users().get(serviceAccount.getId()).roles().clientLevel(resourceServer.getId()).listEffective();\n  Assert.assertTrue(serviceAccountRoles.stream().anyMatch(roleRepresentation -> \"uma_protection\".equals(roleRepresentation.getName())));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 370,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 52
      },
      "nodeContext" : "realm=realmsResouce().realm(getRealmId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "org.keycloak.admin.client.resource.RealmResource"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 51,
    "startColumnNumber" : 30,
    "endLineNumber" : 51,
    "endColumnNumber" : 65
  }, {
    "charLength" : 35,
    "startLineNumber" : 63,
    "startColumnNumber" : 16,
    "endLineNumber" : 63,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}