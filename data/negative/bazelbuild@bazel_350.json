{
  "id" : 350,
  "expression" : "sourceFile",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/tools/test/CoverageOutputGenerator/javatests/com/google/devtools/coverageoutputgenerator/LcovParserTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sourceFile",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 95,
      "startColumnNumber" : 34,
      "endLineNumber" : 95,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 95,
        "startColumnNumber" : 34,
        "endLineNumber" : 95,
        "endColumnNumber" : 68
      },
      "nodeContext" : "sourceFile.getFunctionsExecution()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 95,
        "startColumnNumber" : 22,
        "endLineNumber" : 95,
        "endColumnNumber" : 68
      },
      "nodeContext" : "functions=sourceFile.getFunctionsExecution()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Map<String,Long> functions=sourceFile.getFunctionsExecution();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 905,
        "startLineNumber" : 77,
        "startColumnNumber" : 69,
        "endLineNumber" : 101,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<String> tracefile=ImmutableList.of(\"SF:SOURCE_FILENAME\",\"FN:4,file1-func1\",\"FNDA:1000000000000,file1-func1\",\"FNF:1\",\"FNH:1\",\"DA:4,1000000000000\",\"DA:5,1000000000000\",\"LH:2\",\"LF:2\",\"end_of_record\");\n  List<SourceFileCoverage> sourceFiles=LcovParser.parse(new ByteArrayInputStream(Joiner.on(\"\\n\").join(tracefile).getBytes(UTF_8)));\n  SourceFileCoverage sourceFile=sourceFiles.get(0);\n  Map<String,Long> functions=sourceFile.getFunctionsExecution();\n  assertThat(functions).containsEntry(\"file1-func1\",1000000000000L);\n  Map<Integer,LineCoverage> lines=sourceFile.getLines();\n  assertThat(lines.get(4).executionCount()).isEqualTo(1000000000000L);\n  assertThat(lines.get(5).executionCount()).isEqualTo(1000000000000L);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 980,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 101,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testParseTracefileWithLargeCounts() throws IOException {\n  List<String> tracefile=ImmutableList.of(\"SF:SOURCE_FILENAME\",\"FN:4,file1-func1\",\"FNDA:1000000000000,file1-func1\",\"FNF:1\",\"FNH:1\",\"DA:4,1000000000000\",\"DA:5,1000000000000\",\"LH:2\",\"LF:2\",\"end_of_record\");\n  List<SourceFileCoverage> sourceFiles=LcovParser.parse(new ByteArrayInputStream(Joiner.on(\"\\n\").join(tracefile).getBytes(UTF_8)));\n  SourceFileCoverage sourceFile=sourceFiles.get(0);\n  Map<String,Long> functions=sourceFile.getFunctionsExecution();\n  assertThat(functions).containsEntry(\"file1-func1\",1000000000000L);\n  Map<Integer,LineCoverage> lines=sourceFile.getLines();\n  assertThat(lines.get(4).executionCount()).isEqualTo(1000000000000L);\n  assertThat(lines.get(5).executionCount()).isEqualTo(1000000000000L);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 121,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Map<String,Long> functions=sourceFile.getFunctionsExecution();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.coverageoutputgenerator.SourceFileCoverage"
  }, {
    "nodeContext" : "sourceFile",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 98,
      "startColumnNumber" : 39,
      "endLineNumber" : 98,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 98,
        "startColumnNumber" : 39,
        "endLineNumber" : 98,
        "endColumnNumber" : 60
      },
      "nodeContext" : "sourceFile.getLines()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 98,
        "startColumnNumber" : 31,
        "endLineNumber" : 98,
        "endColumnNumber" : 60
      },
      "nodeContext" : "lines=sourceFile.getLines()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Map<Integer,LineCoverage> lines=sourceFile.getLines();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 905,
        "startLineNumber" : 77,
        "startColumnNumber" : 69,
        "endLineNumber" : 101,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<String> tracefile=ImmutableList.of(\"SF:SOURCE_FILENAME\",\"FN:4,file1-func1\",\"FNDA:1000000000000,file1-func1\",\"FNF:1\",\"FNH:1\",\"DA:4,1000000000000\",\"DA:5,1000000000000\",\"LH:2\",\"LF:2\",\"end_of_record\");\n  List<SourceFileCoverage> sourceFiles=LcovParser.parse(new ByteArrayInputStream(Joiner.on(\"\\n\").join(tracefile).getBytes(UTF_8)));\n  SourceFileCoverage sourceFile=sourceFiles.get(0);\n  Map<String,Long> functions=sourceFile.getFunctionsExecution();\n  assertThat(functions).containsEntry(\"file1-func1\",1000000000000L);\n  Map<Integer,LineCoverage> lines=sourceFile.getLines();\n  assertThat(lines.get(4).executionCount()).isEqualTo(1000000000000L);\n  assertThat(lines.get(5).executionCount()).isEqualTo(1000000000000L);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 980,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 101,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testParseTracefileWithLargeCounts() throws IOException {\n  List<String> tracefile=ImmutableList.of(\"SF:SOURCE_FILENAME\",\"FN:4,file1-func1\",\"FNDA:1000000000000,file1-func1\",\"FNF:1\",\"FNH:1\",\"DA:4,1000000000000\",\"DA:5,1000000000000\",\"LH:2\",\"LF:2\",\"end_of_record\");\n  List<SourceFileCoverage> sourceFiles=LcovParser.parse(new ByteArrayInputStream(Joiner.on(\"\\n\").join(tracefile).getBytes(UTF_8)));\n  SourceFileCoverage sourceFile=sourceFiles.get(0);\n  Map<String,Long> functions=sourceFile.getFunctionsExecution();\n  assertThat(functions).containsEntry(\"file1-func1\",1000000000000L);\n  Map<Integer,LineCoverage> lines=sourceFile.getLines();\n  assertThat(lines.get(4).executionCount()).isEqualTo(1000000000000L);\n  assertThat(lines.get(5).executionCount()).isEqualTo(1000000000000L);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 121,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Map<Integer,LineCoverage> lines=sourceFile.getLines();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.coverageoutputgenerator.SourceFileCoverage"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 95,
    "startColumnNumber" : 34,
    "endLineNumber" : 95,
    "endColumnNumber" : 44
  }, {
    "charLength" : 10,
    "startLineNumber" : 98,
    "startColumnNumber" : 39,
    "endLineNumber" : 98,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}