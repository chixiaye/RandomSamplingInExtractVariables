{
  "id" : 616,
  "expression" : "Boolean.FALSE",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "abbaaa75b5bbcc93de7f6b6668cc44ae3629662f",
  "filePath" : "plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/data/ExecuteBatchImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Boolean.FALSE",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 112,
      "startColumnNumber" : 106,
      "endLineNumber" : 112,
      "endColumnNumber" : 119
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 112,
        "startColumnNumber" : 106,
        "endLineNumber" : 112,
        "endColumnNumber" : 148
      },
      "nodeContext" : "Boolean.FALSE.equals(disableBatchesOption)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 112,
        "startColumnNumber" : 106,
        "endLineNumber" : 112,
        "endColumnNumber" : 180
      },
      "nodeContext" : "Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 112,
        "startColumnNumber" : 105,
        "endLineNumber" : 112,
        "endColumnNumber" : 181
      },
      "nodeContext" : "(Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 112,
        "startColumnNumber" : 27,
        "endLineNumber" : 112,
        "endColumnNumber" : 181
      },
      "nodeContext" : "session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 112,
        "startColumnNumber" : 16,
        "endLineNumber" : 112,
        "endColumnNumber" : 181
      },
      "nodeContext" : "useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 182
      },
      "nodeContext" : "boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5535,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5973,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Execute batch OR generate batch script.\n * @param session    session\n * @param actions    script actions. If not null then no execution will be done\n * @param options\n * @return execution statistics\n * @throws DBCException\n */\n@NotNull private DBCStatistics processBatch(@NotNull DBCSession session,@Nullable List<DBEPersistAction> actions,Map<String,Object> options) throws DBCException {\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 182
      },
      "nodeContext" : "boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    },
    "tokenLength" : 2,
    "type" : "java.lang.Boolean"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 112,
    "startColumnNumber" : 106,
    "endLineNumber" : 112,
    "endColumnNumber" : 119
  } ],
  "layoutRelationDataList" : [ ]
}