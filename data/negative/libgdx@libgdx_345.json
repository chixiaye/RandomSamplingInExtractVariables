{
  "id" : 345,
  "expression" : "s",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/gdx/src/com/badlogic/gdx/graphics/g3d/utils/shapebuilders/SphereShapeBuilder.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "s",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 75,
      "startColumnNumber" : 20,
      "endLineNumber" : 75,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 21
      },
      "nodeContext" : "tmpIndices.size=s",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 22
      },
      "nodeContext" : "tmpIndices.size=s;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2490,
        "startLineNumber" : 51,
        "startColumnNumber" : 102,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 517,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2852,
        "startLineNumber" : 48,
        "startColumnNumber" : 1,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @deprecated use {@link MeshPartBuilder#setVertexTransform(Matrix4)} instead of using the method signature taking a matrix. \n */\n@Deprecated public static void build(MeshPartBuilder builder,final Matrix4 transform,float width,float height,float depth,int divisionsU,int divisionsV,float angleUFrom,float angleUTo,float angleVFrom,float angleVTo){\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 561,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 22
      },
      "nodeContext" : "tmpIndices.size=s;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "s",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 97,
      "startColumnNumber" : 31,
      "endLineNumber" : 97,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 97,
        "startColumnNumber" : 18,
        "endLineNumber" : 97,
        "endColumnNumber" : 32
      },
      "nodeContext" : "tempOffset + s",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 97,
        "startColumnNumber" : 14,
        "endLineNumber" : 97,
        "endColumnNumber" : 32
      },
      "nodeContext" : "o=tempOffset + s",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 33
      },
      "nodeContext" : "final int o=tempOffset + s;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 85,
        "startColumnNumber" : 44,
        "endLineNumber" : 111,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  angleU=auo + stepU * iu;\n  if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n    u=1f - us * (iu - .5f);\n  }\n else {\n    u=1f - us * iu;\n  }\n  curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n  curr1.normal.set(curr1.position).mul(normalTransform).nor();\n  curr1.position.mul(transform);\n  curr1.uv.set(u,v);\n  tmpIndices.set(tempOffset,builder.vertex(curr1));\n  final int o=tempOffset + s;\n  if ((iv > 0) && (iu > 0)) {\n    if (iv == 1 && closedVFrom) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else     if (iv == divisionsV && closedVTo) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else {\n      builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n  }\n  tempOffset=(tempOffset + 1) % tmpIndices.size;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 248,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 85,
        "startColumnNumber" : 3,
        "endLineNumber" : 111,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int iu=0; iu <= divisionsU; iu++) {\n  angleU=auo + stepU * iu;\n  if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n    u=1f - us * (iu - .5f);\n  }\n else {\n    u=1f - us * iu;\n  }\n  curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n  curr1.normal.set(curr1.position).mul(normalTransform).nor();\n  curr1.position.mul(transform);\n  curr1.uv.set(u,v);\n  tmpIndices.set(tempOffset,builder.vertex(curr1));\n  final int o=tempOffset + s;\n  if ((iv > 0) && (iu > 0)) {\n    if (iv == 1 && closedVFrom) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else     if (iv == divisionsV && closedVTo) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else {\n      builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n  }\n  tempOffset=(tempOffset + 1) % tmpIndices.size;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 259,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1355,
        "startLineNumber" : 80,
        "startColumnNumber" : 43,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  angleV=avo + stepV * iv;\n  v=vs * iv;\n  final float t=MathUtils.sin(angleV);\n  final float h=MathUtils.cos(angleV) * hh;\n  for (int iu=0; iu <= divisionsU; iu++) {\n    angleU=auo + stepU * iu;\n    if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n      u=1f - us * (iu - .5f);\n    }\n else {\n      u=1f - us * iu;\n    }\n    curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n    curr1.normal.set(curr1.position).mul(normalTransform).nor();\n    curr1.position.mul(transform);\n    curr1.uv.set(u,v);\n    tmpIndices.set(tempOffset,builder.vertex(curr1));\n    final int o=tempOffset + s;\n    if ((iv > 0) && (iu > 0)) {\n      if (iv == 1 && closedVFrom) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else       if (iv == divisionsV && closedVTo) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else {\n        builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n    }\n    tempOffset=(tempOffset + 1) % tmpIndices.size;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int iv=0; iv <= divisionsV; iv++) {\n  angleV=avo + stepV * iv;\n  v=vs * iv;\n  final float t=MathUtils.sin(angleV);\n  final float h=MathUtils.cos(angleV) * hh;\n  for (int iu=0; iu <= divisionsU; iu++) {\n    angleU=auo + stepU * iu;\n    if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n      u=1f - us * (iu - .5f);\n    }\n else {\n      u=1f - us * iu;\n    }\n    curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n    curr1.normal.set(curr1.position).mul(normalTransform).nor();\n    curr1.position.mul(transform);\n    curr1.uv.set(u,v);\n    tmpIndices.set(tempOffset,builder.vertex(curr1));\n    final int o=tempOffset + s;\n    if ((iv > 0) && (iu > 0)) {\n      if (iv == 1 && closedVFrom) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else       if (iv == divisionsV && closedVTo) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else {\n        builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n    }\n    tempOffset=(tempOffset + 1) % tmpIndices.size;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 305,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2490,
        "startLineNumber" : 51,
        "startColumnNumber" : 102,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 517,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2852,
        "startLineNumber" : 48,
        "startColumnNumber" : 1,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @deprecated use {@link MeshPartBuilder#setVertexTransform(Matrix4)} instead of using the method signature taking a matrix. \n */\n@Deprecated public static void build(MeshPartBuilder builder,final Matrix4 transform,float width,float height,float depth,int divisionsU,int divisionsV,float angleUFrom,float angleUTo,float angleVFrom,float angleVTo){\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 561,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 33
      },
      "nodeContext" : "final int o=tempOffset + s;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "s",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 100,
      "startColumnNumber" : 76,
      "endLineNumber" : 100,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 100,
        "startColumnNumber" : 66,
        "endLineNumber" : 100,
        "endColumnNumber" : 77
      },
      "nodeContext" : "(o - 1) % s",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 100,
        "startColumnNumber" : 51,
        "endLineNumber" : 100,
        "endColumnNumber" : 78
      },
      "nodeContext" : "tmpIndices.get((o - 1) % s)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 100,
        "startColumnNumber" : 6,
        "endLineNumber" : 101,
        "endColumnNumber" : 50
      },
      "nodeContext" : "builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 100,
        "startColumnNumber" : 6,
        "endLineNumber" : 101,
        "endColumnNumber" : 51
      },
      "nodeContext" : "builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 99,
        "startColumnNumber" : 33,
        "endLineNumber" : 102,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 99,
        "startColumnNumber" : 5,
        "endLineNumber" : 108,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (iv == 1 && closedVFrom) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else if (iv == divisionsV && closedVTo) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else {\n  builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 605,
        "startLineNumber" : 98,
        "startColumnNumber" : 30,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (iv == 1 && closedVFrom) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else   if (iv == divisionsV && closedVTo) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else {\n    builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 631,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((iv > 0) && (iu > 0)) {\n  if (iv == 1 && closedVFrom) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else   if (iv == divisionsV && closedVTo) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else {\n    builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 128,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 85,
        "startColumnNumber" : 44,
        "endLineNumber" : 111,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  angleU=auo + stepU * iu;\n  if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n    u=1f - us * (iu - .5f);\n  }\n else {\n    u=1f - us * iu;\n  }\n  curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n  curr1.normal.set(curr1.position).mul(normalTransform).nor();\n  curr1.position.mul(transform);\n  curr1.uv.set(u,v);\n  tmpIndices.set(tempOffset,builder.vertex(curr1));\n  final int o=tempOffset + s;\n  if ((iv > 0) && (iu > 0)) {\n    if (iv == 1 && closedVFrom) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else     if (iv == divisionsV && closedVTo) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else {\n      builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n  }\n  tempOffset=(tempOffset + 1) % tmpIndices.size;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 248,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 85,
        "startColumnNumber" : 3,
        "endLineNumber" : 111,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int iu=0; iu <= divisionsU; iu++) {\n  angleU=auo + stepU * iu;\n  if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n    u=1f - us * (iu - .5f);\n  }\n else {\n    u=1f - us * iu;\n  }\n  curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n  curr1.normal.set(curr1.position).mul(normalTransform).nor();\n  curr1.position.mul(transform);\n  curr1.uv.set(u,v);\n  tmpIndices.set(tempOffset,builder.vertex(curr1));\n  final int o=tempOffset + s;\n  if ((iv > 0) && (iu > 0)) {\n    if (iv == 1 && closedVFrom) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else     if (iv == divisionsV && closedVTo) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else {\n      builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n  }\n  tempOffset=(tempOffset + 1) % tmpIndices.size;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 259,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1355,
        "startLineNumber" : 80,
        "startColumnNumber" : 43,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  angleV=avo + stepV * iv;\n  v=vs * iv;\n  final float t=MathUtils.sin(angleV);\n  final float h=MathUtils.cos(angleV) * hh;\n  for (int iu=0; iu <= divisionsU; iu++) {\n    angleU=auo + stepU * iu;\n    if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n      u=1f - us * (iu - .5f);\n    }\n else {\n      u=1f - us * iu;\n    }\n    curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n    curr1.normal.set(curr1.position).mul(normalTransform).nor();\n    curr1.position.mul(transform);\n    curr1.uv.set(u,v);\n    tmpIndices.set(tempOffset,builder.vertex(curr1));\n    final int o=tempOffset + s;\n    if ((iv > 0) && (iu > 0)) {\n      if (iv == 1 && closedVFrom) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else       if (iv == divisionsV && closedVTo) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else {\n        builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n    }\n    tempOffset=(tempOffset + 1) % tmpIndices.size;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int iv=0; iv <= divisionsV; iv++) {\n  angleV=avo + stepV * iv;\n  v=vs * iv;\n  final float t=MathUtils.sin(angleV);\n  final float h=MathUtils.cos(angleV) * hh;\n  for (int iu=0; iu <= divisionsU; iu++) {\n    angleU=auo + stepU * iu;\n    if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n      u=1f - us * (iu - .5f);\n    }\n else {\n      u=1f - us * iu;\n    }\n    curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n    curr1.normal.set(curr1.position).mul(normalTransform).nor();\n    curr1.position.mul(transform);\n    curr1.uv.set(u,v);\n    tmpIndices.set(tempOffset,builder.vertex(curr1));\n    final int o=tempOffset + s;\n    if ((iv > 0) && (iu > 0)) {\n      if (iv == 1 && closedVFrom) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else       if (iv == divisionsV && closedVTo) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else {\n        builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n    }\n    tempOffset=(tempOffset + 1) % tmpIndices.size;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 305,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2490,
        "startLineNumber" : 51,
        "startColumnNumber" : 102,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 517,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2852,
        "startLineNumber" : 48,
        "startColumnNumber" : 1,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @deprecated use {@link MeshPartBuilder#setVertexTransform(Matrix4)} instead of using the method signature taking a matrix. \n */\n@Deprecated public static void build(MeshPartBuilder builder,final Matrix4 transform,float width,float height,float depth,int divisionsU,int divisionsV,float angleUFrom,float angleUTo,float angleVFrom,float angleVTo){\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 561,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 100,
        "startColumnNumber" : 51,
        "endLineNumber" : 100,
        "endColumnNumber" : 78
      },
      "nodeContext" : "tmpIndices.get((o - 1) % s)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "s",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 101,
      "startColumnNumber" : 47,
      "endLineNumber" : 101,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 101,
        "startColumnNumber" : 22,
        "endLineNumber" : 101,
        "endColumnNumber" : 48
      },
      "nodeContext" : "(o - (divisionsU + 1)) % s",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 101,
        "startColumnNumber" : 7,
        "endLineNumber" : 101,
        "endColumnNumber" : 49
      },
      "nodeContext" : "tmpIndices.get((o - (divisionsU + 1)) % s)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 100,
        "startColumnNumber" : 6,
        "endLineNumber" : 101,
        "endColumnNumber" : 50
      },
      "nodeContext" : "builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 100,
        "startColumnNumber" : 6,
        "endLineNumber" : 101,
        "endColumnNumber" : 51
      },
      "nodeContext" : "builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 99,
        "startColumnNumber" : 33,
        "endLineNumber" : 102,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 99,
        "startColumnNumber" : 5,
        "endLineNumber" : 108,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (iv == 1 && closedVFrom) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else if (iv == divisionsV && closedVTo) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else {\n  builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 605,
        "startLineNumber" : 98,
        "startColumnNumber" : 30,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (iv == 1 && closedVFrom) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else   if (iv == divisionsV && closedVTo) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else {\n    builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 631,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((iv > 0) && (iu > 0)) {\n  if (iv == 1 && closedVFrom) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else   if (iv == divisionsV && closedVTo) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else {\n    builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 128,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 85,
        "startColumnNumber" : 44,
        "endLineNumber" : 111,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  angleU=auo + stepU * iu;\n  if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n    u=1f - us * (iu - .5f);\n  }\n else {\n    u=1f - us * iu;\n  }\n  curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n  curr1.normal.set(curr1.position).mul(normalTransform).nor();\n  curr1.position.mul(transform);\n  curr1.uv.set(u,v);\n  tmpIndices.set(tempOffset,builder.vertex(curr1));\n  final int o=tempOffset + s;\n  if ((iv > 0) && (iu > 0)) {\n    if (iv == 1 && closedVFrom) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else     if (iv == divisionsV && closedVTo) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else {\n      builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n  }\n  tempOffset=(tempOffset + 1) % tmpIndices.size;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 248,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 85,
        "startColumnNumber" : 3,
        "endLineNumber" : 111,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int iu=0; iu <= divisionsU; iu++) {\n  angleU=auo + stepU * iu;\n  if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n    u=1f - us * (iu - .5f);\n  }\n else {\n    u=1f - us * iu;\n  }\n  curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n  curr1.normal.set(curr1.position).mul(normalTransform).nor();\n  curr1.position.mul(transform);\n  curr1.uv.set(u,v);\n  tmpIndices.set(tempOffset,builder.vertex(curr1));\n  final int o=tempOffset + s;\n  if ((iv > 0) && (iu > 0)) {\n    if (iv == 1 && closedVFrom) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else     if (iv == divisionsV && closedVTo) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else {\n      builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n  }\n  tempOffset=(tempOffset + 1) % tmpIndices.size;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 259,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1355,
        "startLineNumber" : 80,
        "startColumnNumber" : 43,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  angleV=avo + stepV * iv;\n  v=vs * iv;\n  final float t=MathUtils.sin(angleV);\n  final float h=MathUtils.cos(angleV) * hh;\n  for (int iu=0; iu <= divisionsU; iu++) {\n    angleU=auo + stepU * iu;\n    if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n      u=1f - us * (iu - .5f);\n    }\n else {\n      u=1f - us * iu;\n    }\n    curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n    curr1.normal.set(curr1.position).mul(normalTransform).nor();\n    curr1.position.mul(transform);\n    curr1.uv.set(u,v);\n    tmpIndices.set(tempOffset,builder.vertex(curr1));\n    final int o=tempOffset + s;\n    if ((iv > 0) && (iu > 0)) {\n      if (iv == 1 && closedVFrom) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else       if (iv == divisionsV && closedVTo) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else {\n        builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n    }\n    tempOffset=(tempOffset + 1) % tmpIndices.size;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int iv=0; iv <= divisionsV; iv++) {\n  angleV=avo + stepV * iv;\n  v=vs * iv;\n  final float t=MathUtils.sin(angleV);\n  final float h=MathUtils.cos(angleV) * hh;\n  for (int iu=0; iu <= divisionsU; iu++) {\n    angleU=auo + stepU * iu;\n    if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n      u=1f - us * (iu - .5f);\n    }\n else {\n      u=1f - us * iu;\n    }\n    curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n    curr1.normal.set(curr1.position).mul(normalTransform).nor();\n    curr1.position.mul(transform);\n    curr1.uv.set(u,v);\n    tmpIndices.set(tempOffset,builder.vertex(curr1));\n    final int o=tempOffset + s;\n    if ((iv > 0) && (iu > 0)) {\n      if (iv == 1 && closedVFrom) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else       if (iv == divisionsV && closedVTo) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else {\n        builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n    }\n    tempOffset=(tempOffset + 1) % tmpIndices.size;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 305,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2490,
        "startLineNumber" : 51,
        "startColumnNumber" : 102,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 517,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2852,
        "startLineNumber" : 48,
        "startColumnNumber" : 1,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @deprecated use {@link MeshPartBuilder#setVertexTransform(Matrix4)} instead of using the method signature taking a matrix. \n */\n@Deprecated public static void build(MeshPartBuilder builder,final Matrix4 transform,float width,float height,float depth,int divisionsU,int divisionsV,float angleUFrom,float angleUTo,float angleVFrom,float angleVTo){\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 561,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 101,
        "startColumnNumber" : 7,
        "endLineNumber" : 101,
        "endColumnNumber" : 49
      },
      "nodeContext" : "tmpIndices.get((o - (divisionsU + 1)) % s)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "s",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 103,
      "startColumnNumber" : 91,
      "endLineNumber" : 103,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 103,
        "startColumnNumber" : 66,
        "endLineNumber" : 103,
        "endColumnNumber" : 92
      },
      "nodeContext" : "(o - (divisionsU + 2)) % s",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 103,
        "startColumnNumber" : 51,
        "endLineNumber" : 103,
        "endColumnNumber" : 93
      },
      "nodeContext" : "tmpIndices.get((o - (divisionsU + 2)) % s)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 103,
        "startColumnNumber" : 6,
        "endLineNumber" : 104,
        "endColumnNumber" : 50
      },
      "nodeContext" : "builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 103,
        "startColumnNumber" : 6,
        "endLineNumber" : 104,
        "endColumnNumber" : 51
      },
      "nodeContext" : "builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 102,
        "startColumnNumber" : 47,
        "endLineNumber" : 105,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 376,
        "startLineNumber" : 102,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (iv == divisionsV && closedVTo) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else {\n  builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 81,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 99,
        "startColumnNumber" : 5,
        "endLineNumber" : 108,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (iv == 1 && closedVFrom) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else if (iv == divisionsV && closedVTo) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else {\n  builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 605,
        "startLineNumber" : 98,
        "startColumnNumber" : 30,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (iv == 1 && closedVFrom) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else   if (iv == divisionsV && closedVTo) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else {\n    builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 631,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((iv > 0) && (iu > 0)) {\n  if (iv == 1 && closedVFrom) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else   if (iv == divisionsV && closedVTo) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else {\n    builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 128,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 85,
        "startColumnNumber" : 44,
        "endLineNumber" : 111,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  angleU=auo + stepU * iu;\n  if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n    u=1f - us * (iu - .5f);\n  }\n else {\n    u=1f - us * iu;\n  }\n  curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n  curr1.normal.set(curr1.position).mul(normalTransform).nor();\n  curr1.position.mul(transform);\n  curr1.uv.set(u,v);\n  tmpIndices.set(tempOffset,builder.vertex(curr1));\n  final int o=tempOffset + s;\n  if ((iv > 0) && (iu > 0)) {\n    if (iv == 1 && closedVFrom) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else     if (iv == divisionsV && closedVTo) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else {\n      builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n  }\n  tempOffset=(tempOffset + 1) % tmpIndices.size;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 248,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 85,
        "startColumnNumber" : 3,
        "endLineNumber" : 111,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int iu=0; iu <= divisionsU; iu++) {\n  angleU=auo + stepU * iu;\n  if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n    u=1f - us * (iu - .5f);\n  }\n else {\n    u=1f - us * iu;\n  }\n  curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n  curr1.normal.set(curr1.position).mul(normalTransform).nor();\n  curr1.position.mul(transform);\n  curr1.uv.set(u,v);\n  tmpIndices.set(tempOffset,builder.vertex(curr1));\n  final int o=tempOffset + s;\n  if ((iv > 0) && (iu > 0)) {\n    if (iv == 1 && closedVFrom) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else     if (iv == divisionsV && closedVTo) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else {\n      builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n  }\n  tempOffset=(tempOffset + 1) % tmpIndices.size;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 259,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1355,
        "startLineNumber" : 80,
        "startColumnNumber" : 43,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  angleV=avo + stepV * iv;\n  v=vs * iv;\n  final float t=MathUtils.sin(angleV);\n  final float h=MathUtils.cos(angleV) * hh;\n  for (int iu=0; iu <= divisionsU; iu++) {\n    angleU=auo + stepU * iu;\n    if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n      u=1f - us * (iu - .5f);\n    }\n else {\n      u=1f - us * iu;\n    }\n    curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n    curr1.normal.set(curr1.position).mul(normalTransform).nor();\n    curr1.position.mul(transform);\n    curr1.uv.set(u,v);\n    tmpIndices.set(tempOffset,builder.vertex(curr1));\n    final int o=tempOffset + s;\n    if ((iv > 0) && (iu > 0)) {\n      if (iv == 1 && closedVFrom) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else       if (iv == divisionsV && closedVTo) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else {\n        builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n    }\n    tempOffset=(tempOffset + 1) % tmpIndices.size;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int iv=0; iv <= divisionsV; iv++) {\n  angleV=avo + stepV * iv;\n  v=vs * iv;\n  final float t=MathUtils.sin(angleV);\n  final float h=MathUtils.cos(angleV) * hh;\n  for (int iu=0; iu <= divisionsU; iu++) {\n    angleU=auo + stepU * iu;\n    if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n      u=1f - us * (iu - .5f);\n    }\n else {\n      u=1f - us * iu;\n    }\n    curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n    curr1.normal.set(curr1.position).mul(normalTransform).nor();\n    curr1.position.mul(transform);\n    curr1.uv.set(u,v);\n    tmpIndices.set(tempOffset,builder.vertex(curr1));\n    final int o=tempOffset + s;\n    if ((iv > 0) && (iu > 0)) {\n      if (iv == 1 && closedVFrom) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else       if (iv == divisionsV && closedVTo) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else {\n        builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n    }\n    tempOffset=(tempOffset + 1) % tmpIndices.size;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 305,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2490,
        "startLineNumber" : 51,
        "startColumnNumber" : 102,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 517,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2852,
        "startLineNumber" : 48,
        "startColumnNumber" : 1,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @deprecated use {@link MeshPartBuilder#setVertexTransform(Matrix4)} instead of using the method signature taking a matrix. \n */\n@Deprecated public static void build(MeshPartBuilder builder,final Matrix4 transform,float width,float height,float depth,int divisionsU,int divisionsV,float angleUFrom,float angleUTo,float angleVFrom,float angleVTo){\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 561,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 103,
        "startColumnNumber" : 51,
        "endLineNumber" : 103,
        "endColumnNumber" : 93
      },
      "nodeContext" : "tmpIndices.get((o - (divisionsU + 2)) % s)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "s",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 104,
      "startColumnNumber" : 47,
      "endLineNumber" : 104,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 104,
        "startColumnNumber" : 22,
        "endLineNumber" : 104,
        "endColumnNumber" : 48
      },
      "nodeContext" : "(o - (divisionsU + 1)) % s",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 104,
        "startColumnNumber" : 7,
        "endLineNumber" : 104,
        "endColumnNumber" : 49
      },
      "nodeContext" : "tmpIndices.get((o - (divisionsU + 1)) % s)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 103,
        "startColumnNumber" : 6,
        "endLineNumber" : 104,
        "endColumnNumber" : 50
      },
      "nodeContext" : "builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 103,
        "startColumnNumber" : 6,
        "endLineNumber" : 104,
        "endColumnNumber" : 51
      },
      "nodeContext" : "builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 102,
        "startColumnNumber" : 47,
        "endLineNumber" : 105,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 376,
        "startLineNumber" : 102,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (iv == divisionsV && closedVTo) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else {\n  builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 81,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 99,
        "startColumnNumber" : 5,
        "endLineNumber" : 108,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (iv == 1 && closedVFrom) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else if (iv == divisionsV && closedVTo) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else {\n  builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 605,
        "startLineNumber" : 98,
        "startColumnNumber" : 30,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (iv == 1 && closedVFrom) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else   if (iv == divisionsV && closedVTo) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else {\n    builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 631,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((iv > 0) && (iu > 0)) {\n  if (iv == 1 && closedVFrom) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else   if (iv == divisionsV && closedVTo) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else {\n    builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 128,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 85,
        "startColumnNumber" : 44,
        "endLineNumber" : 111,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  angleU=auo + stepU * iu;\n  if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n    u=1f - us * (iu - .5f);\n  }\n else {\n    u=1f - us * iu;\n  }\n  curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n  curr1.normal.set(curr1.position).mul(normalTransform).nor();\n  curr1.position.mul(transform);\n  curr1.uv.set(u,v);\n  tmpIndices.set(tempOffset,builder.vertex(curr1));\n  final int o=tempOffset + s;\n  if ((iv > 0) && (iu > 0)) {\n    if (iv == 1 && closedVFrom) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else     if (iv == divisionsV && closedVTo) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else {\n      builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n  }\n  tempOffset=(tempOffset + 1) % tmpIndices.size;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 248,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 85,
        "startColumnNumber" : 3,
        "endLineNumber" : 111,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int iu=0; iu <= divisionsU; iu++) {\n  angleU=auo + stepU * iu;\n  if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n    u=1f - us * (iu - .5f);\n  }\n else {\n    u=1f - us * iu;\n  }\n  curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n  curr1.normal.set(curr1.position).mul(normalTransform).nor();\n  curr1.position.mul(transform);\n  curr1.uv.set(u,v);\n  tmpIndices.set(tempOffset,builder.vertex(curr1));\n  final int o=tempOffset + s;\n  if ((iv > 0) && (iu > 0)) {\n    if (iv == 1 && closedVFrom) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else     if (iv == divisionsV && closedVTo) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else {\n      builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n  }\n  tempOffset=(tempOffset + 1) % tmpIndices.size;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 259,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1355,
        "startLineNumber" : 80,
        "startColumnNumber" : 43,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  angleV=avo + stepV * iv;\n  v=vs * iv;\n  final float t=MathUtils.sin(angleV);\n  final float h=MathUtils.cos(angleV) * hh;\n  for (int iu=0; iu <= divisionsU; iu++) {\n    angleU=auo + stepU * iu;\n    if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n      u=1f - us * (iu - .5f);\n    }\n else {\n      u=1f - us * iu;\n    }\n    curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n    curr1.normal.set(curr1.position).mul(normalTransform).nor();\n    curr1.position.mul(transform);\n    curr1.uv.set(u,v);\n    tmpIndices.set(tempOffset,builder.vertex(curr1));\n    final int o=tempOffset + s;\n    if ((iv > 0) && (iu > 0)) {\n      if (iv == 1 && closedVFrom) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else       if (iv == divisionsV && closedVTo) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else {\n        builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n    }\n    tempOffset=(tempOffset + 1) % tmpIndices.size;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int iv=0; iv <= divisionsV; iv++) {\n  angleV=avo + stepV * iv;\n  v=vs * iv;\n  final float t=MathUtils.sin(angleV);\n  final float h=MathUtils.cos(angleV) * hh;\n  for (int iu=0; iu <= divisionsU; iu++) {\n    angleU=auo + stepU * iu;\n    if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n      u=1f - us * (iu - .5f);\n    }\n else {\n      u=1f - us * iu;\n    }\n    curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n    curr1.normal.set(curr1.position).mul(normalTransform).nor();\n    curr1.position.mul(transform);\n    curr1.uv.set(u,v);\n    tmpIndices.set(tempOffset,builder.vertex(curr1));\n    final int o=tempOffset + s;\n    if ((iv > 0) && (iu > 0)) {\n      if (iv == 1 && closedVFrom) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else       if (iv == divisionsV && closedVTo) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else {\n        builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n    }\n    tempOffset=(tempOffset + 1) % tmpIndices.size;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 305,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2490,
        "startLineNumber" : 51,
        "startColumnNumber" : 102,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 517,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2852,
        "startLineNumber" : 48,
        "startColumnNumber" : 1,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @deprecated use {@link MeshPartBuilder#setVertexTransform(Matrix4)} instead of using the method signature taking a matrix. \n */\n@Deprecated public static void build(MeshPartBuilder builder,final Matrix4 transform,float width,float height,float depth,int divisionsU,int divisionsV,float angleUFrom,float angleUTo,float angleVFrom,float angleVTo){\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 561,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 104,
        "startColumnNumber" : 7,
        "endLineNumber" : 104,
        "endColumnNumber" : 49
      },
      "nodeContext" : "tmpIndices.get((o - (divisionsU + 1)) % s)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "s",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 106,
      "startColumnNumber" : 72,
      "endLineNumber" : 106,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 106,
        "startColumnNumber" : 62,
        "endLineNumber" : 106,
        "endColumnNumber" : 73
      },
      "nodeContext" : "(o - 1) % s",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 106,
        "startColumnNumber" : 47,
        "endLineNumber" : 106,
        "endColumnNumber" : 74
      },
      "nodeContext" : "tmpIndices.get((o - 1) % s)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 94
      },
      "nodeContext" : "builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 95
      },
      "nodeContext" : "builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 376,
        "startLineNumber" : 102,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (iv == divisionsV && closedVTo) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else {\n  builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 81,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 99,
        "startColumnNumber" : 5,
        "endLineNumber" : 108,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (iv == 1 && closedVFrom) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else if (iv == divisionsV && closedVTo) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else {\n  builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 605,
        "startLineNumber" : 98,
        "startColumnNumber" : 30,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (iv == 1 && closedVFrom) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else   if (iv == divisionsV && closedVTo) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else {\n    builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 631,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((iv > 0) && (iu > 0)) {\n  if (iv == 1 && closedVFrom) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else   if (iv == divisionsV && closedVTo) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else {\n    builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 128,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 85,
        "startColumnNumber" : 44,
        "endLineNumber" : 111,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  angleU=auo + stepU * iu;\n  if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n    u=1f - us * (iu - .5f);\n  }\n else {\n    u=1f - us * iu;\n  }\n  curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n  curr1.normal.set(curr1.position).mul(normalTransform).nor();\n  curr1.position.mul(transform);\n  curr1.uv.set(u,v);\n  tmpIndices.set(tempOffset,builder.vertex(curr1));\n  final int o=tempOffset + s;\n  if ((iv > 0) && (iu > 0)) {\n    if (iv == 1 && closedVFrom) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else     if (iv == divisionsV && closedVTo) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else {\n      builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n  }\n  tempOffset=(tempOffset + 1) % tmpIndices.size;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 248,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 85,
        "startColumnNumber" : 3,
        "endLineNumber" : 111,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int iu=0; iu <= divisionsU; iu++) {\n  angleU=auo + stepU * iu;\n  if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n    u=1f - us * (iu - .5f);\n  }\n else {\n    u=1f - us * iu;\n  }\n  curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n  curr1.normal.set(curr1.position).mul(normalTransform).nor();\n  curr1.position.mul(transform);\n  curr1.uv.set(u,v);\n  tmpIndices.set(tempOffset,builder.vertex(curr1));\n  final int o=tempOffset + s;\n  if ((iv > 0) && (iu > 0)) {\n    if (iv == 1 && closedVFrom) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else     if (iv == divisionsV && closedVTo) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else {\n      builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n  }\n  tempOffset=(tempOffset + 1) % tmpIndices.size;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 259,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1355,
        "startLineNumber" : 80,
        "startColumnNumber" : 43,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  angleV=avo + stepV * iv;\n  v=vs * iv;\n  final float t=MathUtils.sin(angleV);\n  final float h=MathUtils.cos(angleV) * hh;\n  for (int iu=0; iu <= divisionsU; iu++) {\n    angleU=auo + stepU * iu;\n    if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n      u=1f - us * (iu - .5f);\n    }\n else {\n      u=1f - us * iu;\n    }\n    curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n    curr1.normal.set(curr1.position).mul(normalTransform).nor();\n    curr1.position.mul(transform);\n    curr1.uv.set(u,v);\n    tmpIndices.set(tempOffset,builder.vertex(curr1));\n    final int o=tempOffset + s;\n    if ((iv > 0) && (iu > 0)) {\n      if (iv == 1 && closedVFrom) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else       if (iv == divisionsV && closedVTo) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else {\n        builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n    }\n    tempOffset=(tempOffset + 1) % tmpIndices.size;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int iv=0; iv <= divisionsV; iv++) {\n  angleV=avo + stepV * iv;\n  v=vs * iv;\n  final float t=MathUtils.sin(angleV);\n  final float h=MathUtils.cos(angleV) * hh;\n  for (int iu=0; iu <= divisionsU; iu++) {\n    angleU=auo + stepU * iu;\n    if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n      u=1f - us * (iu - .5f);\n    }\n else {\n      u=1f - us * iu;\n    }\n    curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n    curr1.normal.set(curr1.position).mul(normalTransform).nor();\n    curr1.position.mul(transform);\n    curr1.uv.set(u,v);\n    tmpIndices.set(tempOffset,builder.vertex(curr1));\n    final int o=tempOffset + s;\n    if ((iv > 0) && (iu > 0)) {\n      if (iv == 1 && closedVFrom) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else       if (iv == divisionsV && closedVTo) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else {\n        builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n    }\n    tempOffset=(tempOffset + 1) % tmpIndices.size;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 305,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2490,
        "startLineNumber" : 51,
        "startColumnNumber" : 102,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 517,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2852,
        "startLineNumber" : 48,
        "startColumnNumber" : 1,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @deprecated use {@link MeshPartBuilder#setVertexTransform(Matrix4)} instead of using the method signature taking a matrix. \n */\n@Deprecated public static void build(MeshPartBuilder builder,final Matrix4 transform,float width,float height,float depth,int divisionsU,int divisionsV,float angleUFrom,float angleUTo,float angleVFrom,float angleVTo){\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 561,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 106,
        "startColumnNumber" : 47,
        "endLineNumber" : 106,
        "endColumnNumber" : 74
      },
      "nodeContext" : "tmpIndices.get((o - 1) % s)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "s",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 107,
      "startColumnNumber" : 47,
      "endLineNumber" : 107,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 107,
        "startColumnNumber" : 22,
        "endLineNumber" : 107,
        "endColumnNumber" : 48
      },
      "nodeContext" : "(o - (divisionsU + 2)) % s",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 107,
        "startColumnNumber" : 7,
        "endLineNumber" : 107,
        "endColumnNumber" : 49
      },
      "nodeContext" : "tmpIndices.get((o - (divisionsU + 2)) % s)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 94
      },
      "nodeContext" : "builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 95
      },
      "nodeContext" : "builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 376,
        "startLineNumber" : 102,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (iv == divisionsV && closedVTo) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else {\n  builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 81,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 99,
        "startColumnNumber" : 5,
        "endLineNumber" : 108,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (iv == 1 && closedVFrom) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else if (iv == divisionsV && closedVTo) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else {\n  builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 605,
        "startLineNumber" : 98,
        "startColumnNumber" : 30,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (iv == 1 && closedVFrom) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else   if (iv == divisionsV && closedVTo) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else {\n    builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 631,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((iv > 0) && (iu > 0)) {\n  if (iv == 1 && closedVFrom) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else   if (iv == divisionsV && closedVTo) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else {\n    builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 128,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 85,
        "startColumnNumber" : 44,
        "endLineNumber" : 111,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  angleU=auo + stepU * iu;\n  if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n    u=1f - us * (iu - .5f);\n  }\n else {\n    u=1f - us * iu;\n  }\n  curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n  curr1.normal.set(curr1.position).mul(normalTransform).nor();\n  curr1.position.mul(transform);\n  curr1.uv.set(u,v);\n  tmpIndices.set(tempOffset,builder.vertex(curr1));\n  final int o=tempOffset + s;\n  if ((iv > 0) && (iu > 0)) {\n    if (iv == 1 && closedVFrom) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else     if (iv == divisionsV && closedVTo) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else {\n      builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n  }\n  tempOffset=(tempOffset + 1) % tmpIndices.size;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 248,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 85,
        "startColumnNumber" : 3,
        "endLineNumber" : 111,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int iu=0; iu <= divisionsU; iu++) {\n  angleU=auo + stepU * iu;\n  if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n    u=1f - us * (iu - .5f);\n  }\n else {\n    u=1f - us * iu;\n  }\n  curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n  curr1.normal.set(curr1.position).mul(normalTransform).nor();\n  curr1.position.mul(transform);\n  curr1.uv.set(u,v);\n  tmpIndices.set(tempOffset,builder.vertex(curr1));\n  final int o=tempOffset + s;\n  if ((iv > 0) && (iu > 0)) {\n    if (iv == 1 && closedVFrom) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else     if (iv == divisionsV && closedVTo) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else {\n      builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n  }\n  tempOffset=(tempOffset + 1) % tmpIndices.size;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 259,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1355,
        "startLineNumber" : 80,
        "startColumnNumber" : 43,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  angleV=avo + stepV * iv;\n  v=vs * iv;\n  final float t=MathUtils.sin(angleV);\n  final float h=MathUtils.cos(angleV) * hh;\n  for (int iu=0; iu <= divisionsU; iu++) {\n    angleU=auo + stepU * iu;\n    if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n      u=1f - us * (iu - .5f);\n    }\n else {\n      u=1f - us * iu;\n    }\n    curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n    curr1.normal.set(curr1.position).mul(normalTransform).nor();\n    curr1.position.mul(transform);\n    curr1.uv.set(u,v);\n    tmpIndices.set(tempOffset,builder.vertex(curr1));\n    final int o=tempOffset + s;\n    if ((iv > 0) && (iu > 0)) {\n      if (iv == 1 && closedVFrom) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else       if (iv == divisionsV && closedVTo) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else {\n        builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n    }\n    tempOffset=(tempOffset + 1) % tmpIndices.size;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int iv=0; iv <= divisionsV; iv++) {\n  angleV=avo + stepV * iv;\n  v=vs * iv;\n  final float t=MathUtils.sin(angleV);\n  final float h=MathUtils.cos(angleV) * hh;\n  for (int iu=0; iu <= divisionsU; iu++) {\n    angleU=auo + stepU * iu;\n    if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n      u=1f - us * (iu - .5f);\n    }\n else {\n      u=1f - us * iu;\n    }\n    curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n    curr1.normal.set(curr1.position).mul(normalTransform).nor();\n    curr1.position.mul(transform);\n    curr1.uv.set(u,v);\n    tmpIndices.set(tempOffset,builder.vertex(curr1));\n    final int o=tempOffset + s;\n    if ((iv > 0) && (iu > 0)) {\n      if (iv == 1 && closedVFrom) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else       if (iv == divisionsV && closedVTo) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else {\n        builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n    }\n    tempOffset=(tempOffset + 1) % tmpIndices.size;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 305,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2490,
        "startLineNumber" : 51,
        "startColumnNumber" : 102,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 517,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2852,
        "startLineNumber" : 48,
        "startColumnNumber" : 1,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @deprecated use {@link MeshPartBuilder#setVertexTransform(Matrix4)} instead of using the method signature taking a matrix. \n */\n@Deprecated public static void build(MeshPartBuilder builder,final Matrix4 transform,float width,float height,float depth,int divisionsU,int divisionsV,float angleUFrom,float angleUTo,float angleVFrom,float angleVTo){\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 561,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 107,
        "startColumnNumber" : 7,
        "endLineNumber" : 107,
        "endColumnNumber" : 49
      },
      "nodeContext" : "tmpIndices.get((o - (divisionsU + 2)) % s)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "s",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 107,
      "startColumnNumber" : 91,
      "endLineNumber" : 107,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 107,
        "startColumnNumber" : 66,
        "endLineNumber" : 107,
        "endColumnNumber" : 92
      },
      "nodeContext" : "(o - (divisionsU + 1)) % s",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 107,
        "startColumnNumber" : 51,
        "endLineNumber" : 107,
        "endColumnNumber" : 93
      },
      "nodeContext" : "tmpIndices.get((o - (divisionsU + 1)) % s)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 94
      },
      "nodeContext" : "builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 95
      },
      "nodeContext" : "builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 376,
        "startLineNumber" : 102,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (iv == divisionsV && closedVTo) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else {\n  builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 81,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 99,
        "startColumnNumber" : 5,
        "endLineNumber" : 108,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (iv == 1 && closedVFrom) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else if (iv == divisionsV && closedVTo) {\n  builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n else {\n  builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 605,
        "startLineNumber" : 98,
        "startColumnNumber" : 30,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (iv == 1 && closedVFrom) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else   if (iv == divisionsV && closedVTo) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else {\n    builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 631,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((iv > 0) && (iu > 0)) {\n  if (iv == 1 && closedVFrom) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else   if (iv == divisionsV && closedVTo) {\n    builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n else {\n    builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 128,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 85,
        "startColumnNumber" : 44,
        "endLineNumber" : 111,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  angleU=auo + stepU * iu;\n  if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n    u=1f - us * (iu - .5f);\n  }\n else {\n    u=1f - us * iu;\n  }\n  curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n  curr1.normal.set(curr1.position).mul(normalTransform).nor();\n  curr1.position.mul(transform);\n  curr1.uv.set(u,v);\n  tmpIndices.set(tempOffset,builder.vertex(curr1));\n  final int o=tempOffset + s;\n  if ((iv > 0) && (iu > 0)) {\n    if (iv == 1 && closedVFrom) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else     if (iv == divisionsV && closedVTo) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else {\n      builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n  }\n  tempOffset=(tempOffset + 1) % tmpIndices.size;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 248,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 85,
        "startColumnNumber" : 3,
        "endLineNumber" : 111,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int iu=0; iu <= divisionsU; iu++) {\n  angleU=auo + stepU * iu;\n  if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n    u=1f - us * (iu - .5f);\n  }\n else {\n    u=1f - us * iu;\n  }\n  curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n  curr1.normal.set(curr1.position).mul(normalTransform).nor();\n  curr1.position.mul(transform);\n  curr1.uv.set(u,v);\n  tmpIndices.set(tempOffset,builder.vertex(curr1));\n  final int o=tempOffset + s;\n  if ((iv > 0) && (iu > 0)) {\n    if (iv == 1 && closedVFrom) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else     if (iv == divisionsV && closedVTo) {\n      builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n else {\n      builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n    }\n  }\n  tempOffset=(tempOffset + 1) % tmpIndices.size;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 259,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1355,
        "startLineNumber" : 80,
        "startColumnNumber" : 43,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  angleV=avo + stepV * iv;\n  v=vs * iv;\n  final float t=MathUtils.sin(angleV);\n  final float h=MathUtils.cos(angleV) * hh;\n  for (int iu=0; iu <= divisionsU; iu++) {\n    angleU=auo + stepU * iu;\n    if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n      u=1f - us * (iu - .5f);\n    }\n else {\n      u=1f - us * iu;\n    }\n    curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n    curr1.normal.set(curr1.position).mul(normalTransform).nor();\n    curr1.position.mul(transform);\n    curr1.uv.set(u,v);\n    tmpIndices.set(tempOffset,builder.vertex(curr1));\n    final int o=tempOffset + s;\n    if ((iv > 0) && (iu > 0)) {\n      if (iv == 1 && closedVFrom) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else       if (iv == divisionsV && closedVTo) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else {\n        builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n    }\n    tempOffset=(tempOffset + 1) % tmpIndices.size;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int iv=0; iv <= divisionsV; iv++) {\n  angleV=avo + stepV * iv;\n  v=vs * iv;\n  final float t=MathUtils.sin(angleV);\n  final float h=MathUtils.cos(angleV) * hh;\n  for (int iu=0; iu <= divisionsU; iu++) {\n    angleU=auo + stepU * iu;\n    if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n      u=1f - us * (iu - .5f);\n    }\n else {\n      u=1f - us * iu;\n    }\n    curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n    curr1.normal.set(curr1.position).mul(normalTransform).nor();\n    curr1.position.mul(transform);\n    curr1.uv.set(u,v);\n    tmpIndices.set(tempOffset,builder.vertex(curr1));\n    final int o=tempOffset + s;\n    if ((iv > 0) && (iu > 0)) {\n      if (iv == 1 && closedVFrom) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else       if (iv == divisionsV && closedVTo) {\n        builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n else {\n        builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n      }\n    }\n    tempOffset=(tempOffset + 1) % tmpIndices.size;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 305,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2490,
        "startLineNumber" : 51,
        "startColumnNumber" : 102,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 517,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2852,
        "startLineNumber" : 48,
        "startColumnNumber" : 1,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @deprecated use {@link MeshPartBuilder#setVertexTransform(Matrix4)} instead of using the method signature taking a matrix. \n */\n@Deprecated public static void build(MeshPartBuilder builder,final Matrix4 transform,float width,float height,float depth,int divisionsU,int divisionsV,float angleUFrom,float angleUTo,float angleVFrom,float angleVTo){\n  final boolean closedVFrom=MathUtils.isEqual(angleVFrom,0f);\n  final boolean closedVTo=MathUtils.isEqual(angleVTo,180f);\n  final float hw=width * 0.5f;\n  final float hh=height * 0.5f;\n  final float hd=depth * 0.5f;\n  final float auo=MathUtils.degreesToRadians * angleUFrom;\n  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;\n  final float avo=MathUtils.degreesToRadians * angleVFrom;\n  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;\n  final float us=1f / divisionsU;\n  final float vs=1f / divisionsV;\n  float u=0f;\n  float v=0f;\n  float angleU=0f;\n  float angleV=0f;\n  VertexInfo curr1=vertTmp3.set(null,null,null,null);\n  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;\n  normalTransform.set(transform);\n  final int s=divisionsU + 3;\n  tmpIndices.clear();\n  tmpIndices.ensureCapacity(divisionsU * 2);\n  tmpIndices.size=s;\n  int tempOffset=0;\n  builder.ensureVertices((divisionsV + 1) * (divisionsU + 1));\n  builder.ensureRectangleIndices(divisionsU);\n  for (int iv=0; iv <= divisionsV; iv++) {\n    angleV=avo + stepV * iv;\n    v=vs * iv;\n    final float t=MathUtils.sin(angleV);\n    final float h=MathUtils.cos(angleV) * hh;\n    for (int iu=0; iu <= divisionsU; iu++) {\n      angleU=auo + stepU * iu;\n      if (iv == 0 && closedVFrom || iv == divisionsV && closedVTo) {\n        u=1f - us * (iu - .5f);\n      }\n else {\n        u=1f - us * iu;\n      }\n      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t);\n      curr1.normal.set(curr1.position).mul(normalTransform).nor();\n      curr1.position.mul(transform);\n      curr1.uv.set(u,v);\n      tmpIndices.set(tempOffset,builder.vertex(curr1));\n      final int o=tempOffset + s;\n      if ((iv > 0) && (iu > 0)) {\n        if (iv == 1 && closedVFrom) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else         if (iv == divisionsV && closedVTo) {\n          builder.triangle(tmpIndices.get(tempOffset),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n else {\n          builder.rect(tmpIndices.get(tempOffset),tmpIndices.get((o - 1) % s),tmpIndices.get((o - (divisionsU + 2)) % s),tmpIndices.get((o - (divisionsU + 1)) % s));\n        }\n      }\n      tempOffset=(tempOffset + 1) % tmpIndices.size;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 561,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 107,
        "startColumnNumber" : 51,
        "endLineNumber" : 107,
        "endColumnNumber" : 93
      },
      "nodeContext" : "tmpIndices.get((o - (divisionsU + 1)) % s)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 75,
    "startColumnNumber" : 20,
    "endLineNumber" : 75,
    "endColumnNumber" : 21
  }, {
    "charLength" : 1,
    "startLineNumber" : 97,
    "startColumnNumber" : 31,
    "endLineNumber" : 97,
    "endColumnNumber" : 32
  }, {
    "charLength" : 1,
    "startLineNumber" : 100,
    "startColumnNumber" : 76,
    "endLineNumber" : 100,
    "endColumnNumber" : 77
  }, {
    "charLength" : 1,
    "startLineNumber" : 101,
    "startColumnNumber" : 47,
    "endLineNumber" : 101,
    "endColumnNumber" : 48
  }, {
    "charLength" : 1,
    "startLineNumber" : 103,
    "startColumnNumber" : 91,
    "endLineNumber" : 103,
    "endColumnNumber" : 92
  }, {
    "charLength" : 1,
    "startLineNumber" : 104,
    "startColumnNumber" : 47,
    "endLineNumber" : 104,
    "endColumnNumber" : 48
  }, {
    "charLength" : 1,
    "startLineNumber" : 106,
    "startColumnNumber" : 72,
    "endLineNumber" : 106,
    "endColumnNumber" : 73
  }, {
    "charLength" : 1,
    "startLineNumber" : 107,
    "startColumnNumber" : 47,
    "endLineNumber" : 107,
    "endColumnNumber" : 48
  }, {
    "charLength" : 1,
    "startLineNumber" : 107,
    "startColumnNumber" : 91,
    "endLineNumber" : 107,
    "endColumnNumber" : 92
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  } ]
}