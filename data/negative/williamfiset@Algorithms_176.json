{
  "id" : 176,
  "expression" : "0",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/other/CombinationsWithRepetition.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 32,
      "startColumnNumber" : 15,
      "endLineNumber" : 32,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 32,
        "startColumnNumber" : 10,
        "endLineNumber" : 32,
        "endColumnNumber" : 16
      },
      "nodeContext" : "r == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 238,
        "startLineNumber" : 32,
        "startColumnNumber" : 6,
        "endLineNumber" : 39,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (r == 0) {\n  System.out.print(\"{ \");\n  for (int i=0; i < N; i++)   for (int j=0; j < usedCount[i]; j++)   System.out.print(sequence[i] + \" \");\n  System.out.println(\"}\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 29,
        "startColumnNumber" : 17,
        "endLineNumber" : 41,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (r == 0) {\n    System.out.print(\"{ \");\n    for (int i=0; i < N; i++)     for (int j=0; j < usedCount[i]; j++)     System.out.print(sequence[i] + \" \");\n    System.out.println(\"}\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 700,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (at == N) {\n  if (r == 0) {\n    System.out.print(\"{ \");\n    for (int i=0; i < N; i++)     for (int j=0; j < usedCount[i]; j++)     System.out.print(sequence[i] + \" \");\n    System.out.println(\"}\");\n  }\n}\n else {\n  for (int itemCount=0; itemCount <= k; itemCount++) {\n    usedCount[at]=itemCount;\n    combinationsWithRepetition(sequence,usedCount,at + 1,r - itemCount,k);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 773,
        "startLineNumber" : 24,
        "startColumnNumber" : 61,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int N=sequence.length;\n  if (at == N) {\n    if (r == 0) {\n      System.out.print(\"{ \");\n      for (int i=0; i < N; i++)       for (int j=0; j < usedCount[i]; j++)       System.out.print(sequence[i] + \" \");\n      System.out.println(\"}\");\n    }\n  }\n else {\n    for (int itemCount=0; itemCount <= k; itemCount++) {\n      usedCount[at]=itemCount;\n      combinationsWithRepetition(sequence,usedCount,at + 1,r - itemCount,k);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1388,
        "startLineNumber" : 13,
        "startColumnNumber" : 2,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Computes all combinations of elements of 'r' elements which can be repeated at most 'k' times each.\n * @param sequence - The sequence containing all the elements we wish to take combinations from\n * @param usedCount - Tracks how many of each element we currently have selected\n * @param at - The current position we're at in the sequence\n * @param r - The number of elements we're choosing\n * @param k - The maximum number of times each element is allowed to be picked\n */\nprivate static void combinationsWithRepetition(int[] sequence,int[] usedCount,int at,int r,int k){\n  final int N=sequence.length;\n  if (at == N) {\n    if (r == 0) {\n      System.out.print(\"{ \");\n      for (int i=0; i < N; i++)       for (int j=0; j < usedCount[i]; j++)       System.out.print(sequence[i] + \" \");\n      System.out.println(\"}\");\n    }\n  }\n else {\n    for (int itemCount=0; itemCount <= k; itemCount++) {\n      usedCount[at]=itemCount;\n      combinationsWithRepetition(sequence,usedCount,at + 1,r - itemCount,k);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 32,
        "startColumnNumber" : 10,
        "endLineNumber" : 32,
        "endColumnNumber" : 16
      },
      "nodeContext" : "r == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 36,
      "startColumnNumber" : 21,
      "endLineNumber" : 36,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 36,
        "startColumnNumber" : 17,
        "endLineNumber" : 36,
        "endColumnNumber" : 22
      },
      "nodeContext" : "i=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 36,
        "startColumnNumber" : 13,
        "endLineNumber" : 36,
        "endColumnNumber" : 22
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 37,
        "endColumnNumber" : 85
      },
      "nodeContext" : "for (int i=0; i < N; i++) for (int j=0; j < usedCount[i]; j++) System.out.print(sequence[i] + \" \");\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 32,
        "startColumnNumber" : 18,
        "endLineNumber" : 39,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  System.out.print(\"{ \");\n  for (int i=0; i < N; i++)   for (int j=0; j < usedCount[i]; j++)   System.out.print(sequence[i] + \" \");\n  System.out.println(\"}\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 238,
        "startLineNumber" : 32,
        "startColumnNumber" : 6,
        "endLineNumber" : 39,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (r == 0) {\n  System.out.print(\"{ \");\n  for (int i=0; i < N; i++)   for (int j=0; j < usedCount[i]; j++)   System.out.print(sequence[i] + \" \");\n  System.out.println(\"}\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 29,
        "startColumnNumber" : 17,
        "endLineNumber" : 41,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (r == 0) {\n    System.out.print(\"{ \");\n    for (int i=0; i < N; i++)     for (int j=0; j < usedCount[i]; j++)     System.out.print(sequence[i] + \" \");\n    System.out.println(\"}\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 700,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (at == N) {\n  if (r == 0) {\n    System.out.print(\"{ \");\n    for (int i=0; i < N; i++)     for (int j=0; j < usedCount[i]; j++)     System.out.print(sequence[i] + \" \");\n    System.out.println(\"}\");\n  }\n}\n else {\n  for (int itemCount=0; itemCount <= k; itemCount++) {\n    usedCount[at]=itemCount;\n    combinationsWithRepetition(sequence,usedCount,at + 1,r - itemCount,k);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 773,
        "startLineNumber" : 24,
        "startColumnNumber" : 61,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int N=sequence.length;\n  if (at == N) {\n    if (r == 0) {\n      System.out.print(\"{ \");\n      for (int i=0; i < N; i++)       for (int j=0; j < usedCount[i]; j++)       System.out.print(sequence[i] + \" \");\n      System.out.println(\"}\");\n    }\n  }\n else {\n    for (int itemCount=0; itemCount <= k; itemCount++) {\n      usedCount[at]=itemCount;\n      combinationsWithRepetition(sequence,usedCount,at + 1,r - itemCount,k);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1388,
        "startLineNumber" : 13,
        "startColumnNumber" : 2,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Computes all combinations of elements of 'r' elements which can be repeated at most 'k' times each.\n * @param sequence - The sequence containing all the elements we wish to take combinations from\n * @param usedCount - Tracks how many of each element we currently have selected\n * @param at - The current position we're at in the sequence\n * @param r - The number of elements we're choosing\n * @param k - The maximum number of times each element is allowed to be picked\n */\nprivate static void combinationsWithRepetition(int[] sequence,int[] usedCount,int at,int r,int k){\n  final int N=sequence.length;\n  if (at == N) {\n    if (r == 0) {\n      System.out.print(\"{ \");\n      for (int i=0; i < N; i++)       for (int j=0; j < usedCount[i]; j++)       System.out.print(sequence[i] + \" \");\n      System.out.println(\"}\");\n    }\n  }\n else {\n    for (int itemCount=0; itemCount <= k; itemCount++) {\n      usedCount[at]=itemCount;\n      combinationsWithRepetition(sequence,usedCount,at + 1,r - itemCount,k);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 36,
        "startColumnNumber" : 13,
        "endLineNumber" : 36,
        "endColumnNumber" : 22
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 37,
      "startColumnNumber" : 23,
      "endLineNumber" : 37,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 37,
        "startColumnNumber" : 19,
        "endLineNumber" : 37,
        "endColumnNumber" : 24
      },
      "nodeContext" : "j=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 37,
        "startColumnNumber" : 15,
        "endLineNumber" : 37,
        "endColumnNumber" : 24
      },
      "nodeContext" : "int j=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 37,
        "startColumnNumber" : 10,
        "endLineNumber" : 37,
        "endColumnNumber" : 85
      },
      "nodeContext" : "for (int j=0; j < usedCount[i]; j++) System.out.print(sequence[i] + \" \");\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 37,
        "endColumnNumber" : 85
      },
      "nodeContext" : "for (int i=0; i < N; i++) for (int j=0; j < usedCount[i]; j++) System.out.print(sequence[i] + \" \");\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 32,
        "startColumnNumber" : 18,
        "endLineNumber" : 39,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  System.out.print(\"{ \");\n  for (int i=0; i < N; i++)   for (int j=0; j < usedCount[i]; j++)   System.out.print(sequence[i] + \" \");\n  System.out.println(\"}\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 238,
        "startLineNumber" : 32,
        "startColumnNumber" : 6,
        "endLineNumber" : 39,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (r == 0) {\n  System.out.print(\"{ \");\n  for (int i=0; i < N; i++)   for (int j=0; j < usedCount[i]; j++)   System.out.print(sequence[i] + \" \");\n  System.out.println(\"}\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 29,
        "startColumnNumber" : 17,
        "endLineNumber" : 41,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (r == 0) {\n    System.out.print(\"{ \");\n    for (int i=0; i < N; i++)     for (int j=0; j < usedCount[i]; j++)     System.out.print(sequence[i] + \" \");\n    System.out.println(\"}\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 700,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (at == N) {\n  if (r == 0) {\n    System.out.print(\"{ \");\n    for (int i=0; i < N; i++)     for (int j=0; j < usedCount[i]; j++)     System.out.print(sequence[i] + \" \");\n    System.out.println(\"}\");\n  }\n}\n else {\n  for (int itemCount=0; itemCount <= k; itemCount++) {\n    usedCount[at]=itemCount;\n    combinationsWithRepetition(sequence,usedCount,at + 1,r - itemCount,k);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 773,
        "startLineNumber" : 24,
        "startColumnNumber" : 61,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int N=sequence.length;\n  if (at == N) {\n    if (r == 0) {\n      System.out.print(\"{ \");\n      for (int i=0; i < N; i++)       for (int j=0; j < usedCount[i]; j++)       System.out.print(sequence[i] + \" \");\n      System.out.println(\"}\");\n    }\n  }\n else {\n    for (int itemCount=0; itemCount <= k; itemCount++) {\n      usedCount[at]=itemCount;\n      combinationsWithRepetition(sequence,usedCount,at + 1,r - itemCount,k);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1388,
        "startLineNumber" : 13,
        "startColumnNumber" : 2,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Computes all combinations of elements of 'r' elements which can be repeated at most 'k' times each.\n * @param sequence - The sequence containing all the elements we wish to take combinations from\n * @param usedCount - Tracks how many of each element we currently have selected\n * @param at - The current position we're at in the sequence\n * @param r - The number of elements we're choosing\n * @param k - The maximum number of times each element is allowed to be picked\n */\nprivate static void combinationsWithRepetition(int[] sequence,int[] usedCount,int at,int r,int k){\n  final int N=sequence.length;\n  if (at == N) {\n    if (r == 0) {\n      System.out.print(\"{ \");\n      for (int i=0; i < N; i++)       for (int j=0; j < usedCount[i]; j++)       System.out.print(sequence[i] + \" \");\n      System.out.println(\"}\");\n    }\n  }\n else {\n    for (int itemCount=0; itemCount <= k; itemCount++) {\n      usedCount[at]=itemCount;\n      combinationsWithRepetition(sequence,usedCount,at + 1,r - itemCount,k);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 37,
        "startColumnNumber" : 10,
        "endLineNumber" : 37,
        "endColumnNumber" : 85
      },
      "nodeContext" : "for (int j=0; j < usedCount[i]; j++) System.out.print(sequence[i] + \" \");\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 44,
      "startColumnNumber" : 27,
      "endLineNumber" : 44,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 44,
        "startColumnNumber" : 15,
        "endLineNumber" : 44,
        "endColumnNumber" : 28
      },
      "nodeContext" : "itemCount=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 44,
        "startColumnNumber" : 11,
        "endLineNumber" : 44,
        "endColumnNumber" : 28
      },
      "nodeContext" : "int itemCount=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 280,
        "startLineNumber" : 44,
        "startColumnNumber" : 6,
        "endLineNumber" : 50,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int itemCount=0; itemCount <= k; itemCount++) {\n  usedCount[at]=itemCount;\n  combinationsWithRepetition(sequence,usedCount,at + 1,r - itemCount,k);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 384,
        "startLineNumber" : 41,
        "startColumnNumber" : 11,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int itemCount=0; itemCount <= k; itemCount++) {\n    usedCount[at]=itemCount;\n    combinationsWithRepetition(sequence,usedCount,at + 1,r - itemCount,k);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 700,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (at == N) {\n  if (r == 0) {\n    System.out.print(\"{ \");\n    for (int i=0; i < N; i++)     for (int j=0; j < usedCount[i]; j++)     System.out.print(sequence[i] + \" \");\n    System.out.println(\"}\");\n  }\n}\n else {\n  for (int itemCount=0; itemCount <= k; itemCount++) {\n    usedCount[at]=itemCount;\n    combinationsWithRepetition(sequence,usedCount,at + 1,r - itemCount,k);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 773,
        "startLineNumber" : 24,
        "startColumnNumber" : 61,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int N=sequence.length;\n  if (at == N) {\n    if (r == 0) {\n      System.out.print(\"{ \");\n      for (int i=0; i < N; i++)       for (int j=0; j < usedCount[i]; j++)       System.out.print(sequence[i] + \" \");\n      System.out.println(\"}\");\n    }\n  }\n else {\n    for (int itemCount=0; itemCount <= k; itemCount++) {\n      usedCount[at]=itemCount;\n      combinationsWithRepetition(sequence,usedCount,at + 1,r - itemCount,k);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1388,
        "startLineNumber" : 13,
        "startColumnNumber" : 2,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Computes all combinations of elements of 'r' elements which can be repeated at most 'k' times each.\n * @param sequence - The sequence containing all the elements we wish to take combinations from\n * @param usedCount - Tracks how many of each element we currently have selected\n * @param at - The current position we're at in the sequence\n * @param r - The number of elements we're choosing\n * @param k - The maximum number of times each element is allowed to be picked\n */\nprivate static void combinationsWithRepetition(int[] sequence,int[] usedCount,int at,int r,int k){\n  final int N=sequence.length;\n  if (at == N) {\n    if (r == 0) {\n      System.out.print(\"{ \");\n      for (int i=0; i < N; i++)       for (int j=0; j < usedCount[i]; j++)       System.out.print(sequence[i] + \" \");\n      System.out.println(\"}\");\n    }\n  }\n else {\n    for (int itemCount=0; itemCount <= k; itemCount++) {\n      usedCount[at]=itemCount;\n      combinationsWithRepetition(sequence,usedCount,at + 1,r - itemCount,k);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 44,
        "startColumnNumber" : 11,
        "endLineNumber" : 44,
        "endColumnNumber" : 28
      },
      "nodeContext" : "int itemCount=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 32,
    "startColumnNumber" : 15,
    "endLineNumber" : 32,
    "endColumnNumber" : 16
  }, {
    "charLength" : 1,
    "startLineNumber" : 36,
    "startColumnNumber" : 21,
    "endLineNumber" : 36,
    "endColumnNumber" : 22
  }, {
    "charLength" : 1,
    "startLineNumber" : 37,
    "startColumnNumber" : 23,
    "endLineNumber" : 37,
    "endColumnNumber" : 24
  }, {
    "charLength" : 1,
    "startLineNumber" : 44,
    "startColumnNumber" : 27,
    "endLineNumber" : 44,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}