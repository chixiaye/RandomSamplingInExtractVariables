{
  "id" : 843,
  "expression" : "classInfosInChangedClassesDex",
  "projectName" : "Tencent@tinker",
  "commitID" : "86b66fce017896fbc41d4da6431ac4f38f39dad6",
  "filePath" : "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "classInfosInChangedClassesDex",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 233,
      "startColumnNumber" : 38,
      "endLineNumber" : 233,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 481,
        "startLineNumber" : 233,
        "startColumnNumber" : 8,
        "endLineNumber" : 241,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (DexClassInfo classInfo : classInfosInChangedClassesDex) {\n  owners.add(classInfo.owner);\n  Set<String> descOfChangedClasses=ownerToDescOfChangedClassesMap.get(classInfo.owner);\n  if (descOfChangedClasses == null) {\n    descOfChangedClasses=new HashSet<>();\n    ownerToDescOfChangedClassesMap.put(classInfo.owner,descOfChangedClasses);\n  }\n  descOfChangedClasses.add(classInfo.classDesc);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 55,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5566,
        "startLineNumber" : 205,
        "startColumnNumber" : 68,
        "endLineNumber" : 321,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String dexMode=config.mDexRaw ? \"raw\" : \"jar\";\n  List<File> oldDexList=new ArrayList<>();\n  List<File> newDexList=new ArrayList<>();\n  for (  AbstractMap.SimpleEntry<File,File> oldAndNewDexFilePair : oldAndNewDexFilePairList) {\n    File oldDexFile=oldAndNewDexFilePair.getKey();\n    File newDexFile=oldAndNewDexFilePair.getValue();\n    if (oldDexFile != null) {\n      oldDexList.add(oldDexFile);\n    }\n    if (newDexFile != null) {\n      newDexList.add(newDexFile);\n    }\n  }\n  DexGroup oldDexGroup=DexGroup.wrap(oldDexList);\n  DexGroup newDexGroup=DexGroup.wrap(newDexList);\n  ChangedClassesDexClassInfoCollector collector=new ChangedClassesDexClassInfoCollector();\n  collector.setExcludedClassPatterns(config.mDexLoaderPattern);\n  collector.setLogger(dexPatcherLoggerBridge);\n  collector.setIncludeRefererToRefererAffectedClasses(true);\n  Set<DexClassInfo> classInfosInChangedClassesDex=collector.doCollect(oldDexGroup,newDexGroup);\n  Set<Dex> owners=new HashSet<>();\n  Map<Dex,Set<String>> ownerToDescOfChangedClassesMap=new HashMap<>();\n  for (  DexClassInfo classInfo : classInfosInChangedClassesDex) {\n    owners.add(classInfo.owner);\n    Set<String> descOfChangedClasses=ownerToDescOfChangedClassesMap.get(classInfo.owner);\n    if (descOfChangedClasses == null) {\n      descOfChangedClasses=new HashSet<>();\n      ownerToDescOfChangedClassesMap.put(classInfo.owner,descOfChangedClasses);\n    }\n    descOfChangedClasses.add(classInfo.classDesc);\n  }\n  StringBuilder metaBuilder=new StringBuilder();\n  int changedDexId=1;\n  for (  Dex dex : owners) {\n    Set<String> descOfChangedClassesInCurrDex=ownerToDescOfChangedClassesMap.get(dex);\n    DexFile dexFile=new DexBackedDexFile(org.jf.dexlib2.Opcodes.forApi(20),dex.getBytes());\n    boolean isCurrentDexHasChangedClass=false;\n    for (    org.jf.dexlib2.iface.ClassDef classDef : dexFile.getClasses()) {\n      if (descOfChangedClassesInCurrDex.contains(classDef.getType())) {\n        isCurrentDexHasChangedClass=true;\n        break;\n      }\n    }\n    if (!isCurrentDexHasChangedClass) {\n      continue;\n    }\n    DexBuilder dexBuilder=DexBuilder.makeDexBuilder();\n    for (    org.jf.dexlib2.iface.ClassDef classDef : dexFile.getClasses()) {\n      if (!descOfChangedClassesInCurrDex.contains(classDef.getType())) {\n        continue;\n      }\n      Logger.d(\"Class %s will be added into changed classes dex ...\",classDef.getType());\n      List<BuilderField> builderFields=new ArrayList<>();\n      for (      Field field : classDef.getFields()) {\n        final BuilderField builderField=dexBuilder.internField(field.getDefiningClass(),field.getName(),field.getType(),field.getAccessFlags(),field.getInitialValue(),field.getAnnotations());\n        builderFields.add(builderField);\n      }\n      List<BuilderMethod> builderMethods=new ArrayList<>();\n      for (      Method method : classDef.getMethods()) {\n        MethodImplementation methodImpl=method.getImplementation();\n        if (methodImpl != null) {\n          methodImpl=new BuilderMutableMethodImplementation(dexBuilder,methodImpl);\n        }\n        BuilderMethod builderMethod=dexBuilder.internMethod(method.getDefiningClass(),method.getName(),method.getParameters(),method.getReturnType(),method.getAccessFlags(),method.getAnnotations(),methodImpl);\n        builderMethods.add(builderMethod);\n      }\n      dexBuilder.internClassDef(classDef.getType(),classDef.getAccessFlags(),classDef.getSuperclass(),classDef.getInterfaces(),classDef.getSourceFile(),classDef.getAnnotations(),builderFields,builderMethods);\n    }\n    final String changedDexName=CHANGED_CLASSES_DEX_NAME_PREFIX + changedDexId + \".dex\";\n    final File dest=new File(config.mTempResultDir + \"/\" + changedDexName);\n    final FileDataStore fileDataStore=new FileDataStore(dest);\n    dexBuilder.writeTo(fileDataStore);\n    final String md5=MD5.getMD5(dest);\n    appendMetaLine(metaBuilder,changedDexName,\"\",md5,md5,0,0,0,dexMode);\n    ++changedDexId;\n  }\n  final String meta=metaBuilder.toString();\n  Logger.d(\"\\nDexDecoder:write changed classes dex meta file data:\\n%s\",meta);\n  metaWriter.writeLineToInfoFile(meta);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 599,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5662,
        "startLineNumber" : 204,
        "startColumnNumber" : 4,
        "endLineNumber" : 321,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"NewApi\") private void generateChangedClassesDexFile() throws IOException {\n  final String dexMode=config.mDexRaw ? \"raw\" : \"jar\";\n  List<File> oldDexList=new ArrayList<>();\n  List<File> newDexList=new ArrayList<>();\n  for (  AbstractMap.SimpleEntry<File,File> oldAndNewDexFilePair : oldAndNewDexFilePairList) {\n    File oldDexFile=oldAndNewDexFilePair.getKey();\n    File newDexFile=oldAndNewDexFilePair.getValue();\n    if (oldDexFile != null) {\n      oldDexList.add(oldDexFile);\n    }\n    if (newDexFile != null) {\n      newDexList.add(newDexFile);\n    }\n  }\n  DexGroup oldDexGroup=DexGroup.wrap(oldDexList);\n  DexGroup newDexGroup=DexGroup.wrap(newDexList);\n  ChangedClassesDexClassInfoCollector collector=new ChangedClassesDexClassInfoCollector();\n  collector.setExcludedClassPatterns(config.mDexLoaderPattern);\n  collector.setLogger(dexPatcherLoggerBridge);\n  collector.setIncludeRefererToRefererAffectedClasses(true);\n  Set<DexClassInfo> classInfosInChangedClassesDex=collector.doCollect(oldDexGroup,newDexGroup);\n  Set<Dex> owners=new HashSet<>();\n  Map<Dex,Set<String>> ownerToDescOfChangedClassesMap=new HashMap<>();\n  for (  DexClassInfo classInfo : classInfosInChangedClassesDex) {\n    owners.add(classInfo.owner);\n    Set<String> descOfChangedClasses=ownerToDescOfChangedClassesMap.get(classInfo.owner);\n    if (descOfChangedClasses == null) {\n      descOfChangedClasses=new HashSet<>();\n      ownerToDescOfChangedClassesMap.put(classInfo.owner,descOfChangedClasses);\n    }\n    descOfChangedClasses.add(classInfo.classDesc);\n  }\n  StringBuilder metaBuilder=new StringBuilder();\n  int changedDexId=1;\n  for (  Dex dex : owners) {\n    Set<String> descOfChangedClassesInCurrDex=ownerToDescOfChangedClassesMap.get(dex);\n    DexFile dexFile=new DexBackedDexFile(org.jf.dexlib2.Opcodes.forApi(20),dex.getBytes());\n    boolean isCurrentDexHasChangedClass=false;\n    for (    org.jf.dexlib2.iface.ClassDef classDef : dexFile.getClasses()) {\n      if (descOfChangedClassesInCurrDex.contains(classDef.getType())) {\n        isCurrentDexHasChangedClass=true;\n        break;\n      }\n    }\n    if (!isCurrentDexHasChangedClass) {\n      continue;\n    }\n    DexBuilder dexBuilder=DexBuilder.makeDexBuilder();\n    for (    org.jf.dexlib2.iface.ClassDef classDef : dexFile.getClasses()) {\n      if (!descOfChangedClassesInCurrDex.contains(classDef.getType())) {\n        continue;\n      }\n      Logger.d(\"Class %s will be added into changed classes dex ...\",classDef.getType());\n      List<BuilderField> builderFields=new ArrayList<>();\n      for (      Field field : classDef.getFields()) {\n        final BuilderField builderField=dexBuilder.internField(field.getDefiningClass(),field.getName(),field.getType(),field.getAccessFlags(),field.getInitialValue(),field.getAnnotations());\n        builderFields.add(builderField);\n      }\n      List<BuilderMethod> builderMethods=new ArrayList<>();\n      for (      Method method : classDef.getMethods()) {\n        MethodImplementation methodImpl=method.getImplementation();\n        if (methodImpl != null) {\n          methodImpl=new BuilderMutableMethodImplementation(dexBuilder,methodImpl);\n        }\n        BuilderMethod builderMethod=dexBuilder.internMethod(method.getDefiningClass(),method.getName(),method.getParameters(),method.getReturnType(),method.getAccessFlags(),method.getAnnotations(),methodImpl);\n        builderMethods.add(builderMethod);\n      }\n      dexBuilder.internClassDef(classDef.getType(),classDef.getAccessFlags(),classDef.getSuperclass(),classDef.getInterfaces(),classDef.getSourceFile(),classDef.getAnnotations(),builderFields,builderMethods);\n    }\n    final String changedDexName=CHANGED_CLASSES_DEX_NAME_PREFIX + changedDexId + \".dex\";\n    final File dest=new File(config.mTempResultDir + \"/\" + changedDexName);\n    final FileDataStore fileDataStore=new FileDataStore(dest);\n    dexBuilder.writeTo(fileDataStore);\n    final String md5=MD5.getMD5(dest);\n    appendMetaLine(metaBuilder,changedDexName,\"\",md5,md5,0,0,0,dexMode);\n    ++changedDexId;\n  }\n  final String meta=metaBuilder.toString();\n  Logger.d(\"\\nDexDecoder:write changed classes dex meta file data:\\n%s\",meta);\n  metaWriter.writeLineToInfoFile(meta);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 608,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 481,
        "startLineNumber" : 233,
        "startColumnNumber" : 8,
        "endLineNumber" : 241,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (DexClassInfo classInfo : classInfosInChangedClassesDex) {\n  owners.add(classInfo.owner);\n  Set<String> descOfChangedClasses=ownerToDescOfChangedClassesMap.get(classInfo.owner);\n  if (descOfChangedClasses == null) {\n    descOfChangedClasses=new HashSet<>();\n    ownerToDescOfChangedClassesMap.put(classInfo.owner,descOfChangedClasses);\n  }\n  descOfChangedClasses.add(classInfo.classDesc);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 55,
      "astHeight" : 10
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<com.tencent.tinker.build.util.DexClassesComparator.DexClassInfo>"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 233,
    "startColumnNumber" : 38,
    "endLineNumber" : 233,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}