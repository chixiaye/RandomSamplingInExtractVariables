{
  "id" : 396,
  "expression" : "FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 47,
      "startLineNumber" : 1018,
      "startColumnNumber" : 24,
      "endLineNumber" : 1018,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 1018,
        "startColumnNumber" : 16,
        "endLineNumber" : 1018,
        "endColumnNumber" : 71
      },
      "nodeContext" : "flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 1018,
        "startColumnNumber" : 15,
        "endLineNumber" : 1018,
        "endColumnNumber" : 72
      },
      "nodeContext" : "(flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 1018,
        "startColumnNumber" : 15,
        "endLineNumber" : 1018,
        "endColumnNumber" : 77
      },
      "nodeContext" : "(flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 1017,
        "startColumnNumber" : 8,
        "endLineNumber" : 1018,
        "endColumnNumber" : 77
      },
      "nodeContext" : "track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 1016,
        "startColumnNumber" : 12,
        "endLineNumber" : 1018,
        "endColumnNumber" : 77
      },
      "nodeContext" : "workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 1016,
        "startColumnNumber" : 4,
        "endLineNumber" : 1018,
        "endColumnNumber" : 78
      },
      "nodeContext" : "boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 1018,
        "startColumnNumber" : 15,
        "endLineNumber" : 1018,
        "endColumnNumber" : 77
      },
      "nodeContext" : "(flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 8,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 47,
    "startLineNumber" : 1018,
    "startColumnNumber" : 24,
    "endLineNumber" : 1018,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}