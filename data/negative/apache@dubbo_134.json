{
  "id" : 134,
  "expression" : "\"five\"",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-common/src/test/java/org/apache/dubbo/common/utils/LRUCacheTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"five\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 53,
      "startColumnNumber" : 18,
      "endLineNumber" : 53,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 28
      },
      "nodeContext" : "cache.put(\"five\",5)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 29
      },
      "nodeContext" : "cache.put(\"five\",5);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1343,
        "startLineNumber" : 29,
        "startColumnNumber" : 45,
        "endLineNumber" : 62,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LRUCache<String,Integer> cache=new LRUCache<String,Integer>(3);\n  cache.put(\"one\",1);\n  cache.put(\"two\",2);\n  cache.put(\"three\",3);\n  assertFalse(cache.containsKey(\"one\"));\n  assertFalse(cache.containsKey(\"two\"));\n  assertFalse(cache.containsKey(\"three\"));\n  cache.put(\"one\",1);\n  cache.put(\"two\",2);\n  cache.put(\"three\",3);\n  assertThat(cache.get(\"one\"),equalTo(1));\n  assertThat(cache.get(\"two\"),equalTo(2));\n  assertThat(cache.get(\"three\"),equalTo(3));\n  assertThat(cache.size(),equalTo(3));\n  cache.put(\"four\",4);\n  cache.put(\"four\",4);\n  assertThat(cache.size(),equalTo(3));\n  assertFalse(cache.containsKey(\"one\"));\n  assertTrue(cache.containsKey(\"two\"));\n  assertTrue(cache.containsKey(\"three\"));\n  assertTrue(cache.containsKey(\"four\"));\n  cache.remove(\"four\");\n  assertThat(cache.size(),equalTo(2));\n  cache.put(\"five\",5);\n  cache.put(\"five\",5);\n  assertFalse(cache.containsKey(\"four\"));\n  assertTrue(cache.containsKey(\"five\"));\n  assertTrue(cache.containsKey(\"two\"));\n  assertTrue(cache.containsKey(\"three\"));\n  assertThat(cache.size(),equalTo(3));\n  cache.put(\"six\",6);\n  assertFalse(cache.containsKey(\"six\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1394,
        "startLineNumber" : 28,
        "startColumnNumber" : 4,
        "endLineNumber" : 62,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testCache() throws Exception {\n  LRUCache<String,Integer> cache=new LRUCache<String,Integer>(3);\n  cache.put(\"one\",1);\n  cache.put(\"two\",2);\n  cache.put(\"three\",3);\n  assertFalse(cache.containsKey(\"one\"));\n  assertFalse(cache.containsKey(\"two\"));\n  assertFalse(cache.containsKey(\"three\"));\n  cache.put(\"one\",1);\n  cache.put(\"two\",2);\n  cache.put(\"three\",3);\n  assertThat(cache.get(\"one\"),equalTo(1));\n  assertThat(cache.get(\"two\"),equalTo(2));\n  assertThat(cache.get(\"three\"),equalTo(3));\n  assertThat(cache.size(),equalTo(3));\n  cache.put(\"four\",4);\n  cache.put(\"four\",4);\n  assertThat(cache.size(),equalTo(3));\n  assertFalse(cache.containsKey(\"one\"));\n  assertTrue(cache.containsKey(\"two\"));\n  assertTrue(cache.containsKey(\"three\"));\n  assertTrue(cache.containsKey(\"four\"));\n  cache.remove(\"four\");\n  assertThat(cache.size(),equalTo(2));\n  cache.put(\"five\",5);\n  cache.put(\"five\",5);\n  assertFalse(cache.containsKey(\"four\"));\n  assertTrue(cache.containsKey(\"five\"));\n  assertTrue(cache.containsKey(\"two\"));\n  assertTrue(cache.containsKey(\"three\"));\n  assertThat(cache.size(),equalTo(3));\n  cache.put(\"six\",6);\n  assertFalse(cache.containsKey(\"six\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 249,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 29
      },
      "nodeContext" : "cache.put(\"five\",5);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"five\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 54,
      "startColumnNumber" : 18,
      "endLineNumber" : 54,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 28
      },
      "nodeContext" : "cache.put(\"five\",5)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 29
      },
      "nodeContext" : "cache.put(\"five\",5);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1343,
        "startLineNumber" : 29,
        "startColumnNumber" : 45,
        "endLineNumber" : 62,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LRUCache<String,Integer> cache=new LRUCache<String,Integer>(3);\n  cache.put(\"one\",1);\n  cache.put(\"two\",2);\n  cache.put(\"three\",3);\n  assertFalse(cache.containsKey(\"one\"));\n  assertFalse(cache.containsKey(\"two\"));\n  assertFalse(cache.containsKey(\"three\"));\n  cache.put(\"one\",1);\n  cache.put(\"two\",2);\n  cache.put(\"three\",3);\n  assertThat(cache.get(\"one\"),equalTo(1));\n  assertThat(cache.get(\"two\"),equalTo(2));\n  assertThat(cache.get(\"three\"),equalTo(3));\n  assertThat(cache.size(),equalTo(3));\n  cache.put(\"four\",4);\n  cache.put(\"four\",4);\n  assertThat(cache.size(),equalTo(3));\n  assertFalse(cache.containsKey(\"one\"));\n  assertTrue(cache.containsKey(\"two\"));\n  assertTrue(cache.containsKey(\"three\"));\n  assertTrue(cache.containsKey(\"four\"));\n  cache.remove(\"four\");\n  assertThat(cache.size(),equalTo(2));\n  cache.put(\"five\",5);\n  cache.put(\"five\",5);\n  assertFalse(cache.containsKey(\"four\"));\n  assertTrue(cache.containsKey(\"five\"));\n  assertTrue(cache.containsKey(\"two\"));\n  assertTrue(cache.containsKey(\"three\"));\n  assertThat(cache.size(),equalTo(3));\n  cache.put(\"six\",6);\n  assertFalse(cache.containsKey(\"six\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1394,
        "startLineNumber" : 28,
        "startColumnNumber" : 4,
        "endLineNumber" : 62,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testCache() throws Exception {\n  LRUCache<String,Integer> cache=new LRUCache<String,Integer>(3);\n  cache.put(\"one\",1);\n  cache.put(\"two\",2);\n  cache.put(\"three\",3);\n  assertFalse(cache.containsKey(\"one\"));\n  assertFalse(cache.containsKey(\"two\"));\n  assertFalse(cache.containsKey(\"three\"));\n  cache.put(\"one\",1);\n  cache.put(\"two\",2);\n  cache.put(\"three\",3);\n  assertThat(cache.get(\"one\"),equalTo(1));\n  assertThat(cache.get(\"two\"),equalTo(2));\n  assertThat(cache.get(\"three\"),equalTo(3));\n  assertThat(cache.size(),equalTo(3));\n  cache.put(\"four\",4);\n  cache.put(\"four\",4);\n  assertThat(cache.size(),equalTo(3));\n  assertFalse(cache.containsKey(\"one\"));\n  assertTrue(cache.containsKey(\"two\"));\n  assertTrue(cache.containsKey(\"three\"));\n  assertTrue(cache.containsKey(\"four\"));\n  cache.remove(\"four\");\n  assertThat(cache.size(),equalTo(2));\n  cache.put(\"five\",5);\n  cache.put(\"five\",5);\n  assertFalse(cache.containsKey(\"four\"));\n  assertTrue(cache.containsKey(\"five\"));\n  assertTrue(cache.containsKey(\"two\"));\n  assertTrue(cache.containsKey(\"three\"));\n  assertThat(cache.size(),equalTo(3));\n  cache.put(\"six\",6);\n  assertFalse(cache.containsKey(\"six\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 249,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 29
      },
      "nodeContext" : "cache.put(\"five\",5);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"five\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 56,
      "startColumnNumber" : 37,
      "endLineNumber" : 56,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 56,
        "startColumnNumber" : 19,
        "endLineNumber" : 56,
        "endColumnNumber" : 44
      },
      "nodeContext" : "cache.containsKey(\"five\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertTrue(cache.containsKey(\"five\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertTrue(cache.containsKey(\"five\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1343,
        "startLineNumber" : 29,
        "startColumnNumber" : 45,
        "endLineNumber" : 62,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LRUCache<String,Integer> cache=new LRUCache<String,Integer>(3);\n  cache.put(\"one\",1);\n  cache.put(\"two\",2);\n  cache.put(\"three\",3);\n  assertFalse(cache.containsKey(\"one\"));\n  assertFalse(cache.containsKey(\"two\"));\n  assertFalse(cache.containsKey(\"three\"));\n  cache.put(\"one\",1);\n  cache.put(\"two\",2);\n  cache.put(\"three\",3);\n  assertThat(cache.get(\"one\"),equalTo(1));\n  assertThat(cache.get(\"two\"),equalTo(2));\n  assertThat(cache.get(\"three\"),equalTo(3));\n  assertThat(cache.size(),equalTo(3));\n  cache.put(\"four\",4);\n  cache.put(\"four\",4);\n  assertThat(cache.size(),equalTo(3));\n  assertFalse(cache.containsKey(\"one\"));\n  assertTrue(cache.containsKey(\"two\"));\n  assertTrue(cache.containsKey(\"three\"));\n  assertTrue(cache.containsKey(\"four\"));\n  cache.remove(\"four\");\n  assertThat(cache.size(),equalTo(2));\n  cache.put(\"five\",5);\n  cache.put(\"five\",5);\n  assertFalse(cache.containsKey(\"four\"));\n  assertTrue(cache.containsKey(\"five\"));\n  assertTrue(cache.containsKey(\"two\"));\n  assertTrue(cache.containsKey(\"three\"));\n  assertThat(cache.size(),equalTo(3));\n  cache.put(\"six\",6);\n  assertFalse(cache.containsKey(\"six\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1394,
        "startLineNumber" : 28,
        "startColumnNumber" : 4,
        "endLineNumber" : 62,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testCache() throws Exception {\n  LRUCache<String,Integer> cache=new LRUCache<String,Integer>(3);\n  cache.put(\"one\",1);\n  cache.put(\"two\",2);\n  cache.put(\"three\",3);\n  assertFalse(cache.containsKey(\"one\"));\n  assertFalse(cache.containsKey(\"two\"));\n  assertFalse(cache.containsKey(\"three\"));\n  cache.put(\"one\",1);\n  cache.put(\"two\",2);\n  cache.put(\"three\",3);\n  assertThat(cache.get(\"one\"),equalTo(1));\n  assertThat(cache.get(\"two\"),equalTo(2));\n  assertThat(cache.get(\"three\"),equalTo(3));\n  assertThat(cache.size(),equalTo(3));\n  cache.put(\"four\",4);\n  cache.put(\"four\",4);\n  assertThat(cache.size(),equalTo(3));\n  assertFalse(cache.containsKey(\"one\"));\n  assertTrue(cache.containsKey(\"two\"));\n  assertTrue(cache.containsKey(\"three\"));\n  assertTrue(cache.containsKey(\"four\"));\n  cache.remove(\"four\");\n  assertThat(cache.size(),equalTo(2));\n  cache.put(\"five\",5);\n  cache.put(\"five\",5);\n  assertFalse(cache.containsKey(\"four\"));\n  assertTrue(cache.containsKey(\"five\"));\n  assertTrue(cache.containsKey(\"two\"));\n  assertTrue(cache.containsKey(\"three\"));\n  assertThat(cache.size(),equalTo(3));\n  cache.put(\"six\",6);\n  assertFalse(cache.containsKey(\"six\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 249,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertTrue(cache.containsKey(\"five\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 53,
    "startColumnNumber" : 18,
    "endLineNumber" : 53,
    "endColumnNumber" : 24
  }, {
    "charLength" : 6,
    "startLineNumber" : 54,
    "startColumnNumber" : 18,
    "endLineNumber" : 54,
    "endColumnNumber" : 24
  }, {
    "charLength" : 6,
    "startLineNumber" : 56,
    "startColumnNumber" : 37,
    "endLineNumber" : 56,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}