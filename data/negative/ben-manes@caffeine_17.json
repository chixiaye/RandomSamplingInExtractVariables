{
  "id" : 17,
  "expression" : "new WeightedValue<V>(newValue[0],weight)",
  "projectName" : "ben-manes@caffeine",
  "commitID" : "30ca3d80d9dc7aa20adceacfc5fff1659bbadb8e",
  "filePath" : "src/main/java/com/github/benmanes/caffeine/cache/BoundedLocalCache.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new WeightedValue<V>(newValue[0],weight)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 1002,
      "startColumnNumber" : 47,
      "endLineNumber" : 1002,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 10,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 1002,
        "startColumnNumber" : 31,
        "endLineNumber" : 1002,
        "endColumnNumber" : 88
      },
      "nodeContext" : "weightedValue=new WeightedValue<V>(newValue[0],weight)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 1002,
        "startColumnNumber" : 8,
        "endLineNumber" : 1002,
        "endColumnNumber" : 89
      },
      "nodeContext" : "final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 436,
        "startLineNumber" : 996,
        "startColumnNumber" : 25,
        "endLineNumber" : 1006,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  newValue[0]=remappingFunction.apply(k,null);\n  if (newValue[0] == null) {\n    return null;\n  }\n  final int weight=weigher.weigh(key,newValue[0]);\n  final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n  final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n  task[0]=new AddTask(newNode,weight);\n  return newNode;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 455,
        "startLineNumber" : 996,
        "startColumnNumber" : 6,
        "endLineNumber" : 1006,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (prior == null) {\n  newValue[0]=remappingFunction.apply(k,null);\n  if (newValue[0] == null) {\n    return null;\n  }\n  final int weight=weigher.weigh(key,newValue[0]);\n  final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n  final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n  task[0]=new AddTask(newNode,weight);\n  return newNode;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 2159,
        "startLineNumber" : 995,
        "startColumnNumber" : 36,
        "endLineNumber" : 1048,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (prior == null) {\n    newValue[0]=remappingFunction.apply(k,null);\n    if (newValue[0] == null) {\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n    return newNode;\n  }\nsynchronized (prior) {\n    WeightedValue<V> oldWeightedValue=prior.get();\n    V oldValue;\n    if (oldWeightedValue.isAlive()) {\n      oldValue=oldWeightedValue.value;\n    }\n else {\n      task[1]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      oldValue=null;\n    }\n    newValue[0]=remappingFunction.apply(k,oldValue);\n    if ((newValue[0] == null) && (oldValue != null)) {\n      task[0]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    Node<K,V> newNode;\n    if (task[1] == null) {\n      newNode=prior;\n      prior.lazySet(weightedValue);\n      final int weightedDifference=weight - oldWeightedValue.weight;\n      if (weightedDifference != 0) {\n        task[0]=new UpdateTask(prior,weightedDifference);\n      }\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n      }\n    }\n else {\n      newNode=new Node<>(key,weightedValue);\n      task[0]=new AddTask(newNode,weight);\n    }\n    return prior;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 313,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 2173,
        "startLineNumber" : 995,
        "startColumnNumber" : 22,
        "endLineNumber" : 1048,
        "endColumnNumber" : 5
      },
      "nodeContext" : "(k,prior) -> {\n  if (prior == null) {\n    newValue[0]=remappingFunction.apply(k,null);\n    if (newValue[0] == null) {\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n    return newNode;\n  }\nsynchronized (prior) {\n    WeightedValue<V> oldWeightedValue=prior.get();\n    V oldValue;\n    if (oldWeightedValue.isAlive()) {\n      oldValue=oldWeightedValue.value;\n    }\n else {\n      task[1]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      oldValue=null;\n    }\n    newValue[0]=remappingFunction.apply(k,oldValue);\n    if ((newValue[0] == null) && (oldValue != null)) {\n      task[0]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    Node<K,V> newNode;\n    if (task[1] == null) {\n      newNode=prior;\n      prior.lazySet(weightedValue);\n      final int weightedDifference=weight - oldWeightedValue.weight;\n      if (weightedDifference != 0) {\n        task[0]=new UpdateTask(prior,weightedDifference);\n      }\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n      }\n    }\n else {\n      newNode=new Node<>(key,weightedValue);\n      task[0]=new AddTask(newNode,weight);\n    }\n    return prior;\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 318,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 1002,
        "startColumnNumber" : 8,
        "endLineNumber" : 1002,
        "endColumnNumber" : 89
      },
      "nodeContext" : "final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "com.github.benmanes.caffeine.cache.BoundedLocalCache.WeightedValue<V>"
  }, {
    "nodeContext" : "new WeightedValue<V>(newValue[0],weight)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 1030,
      "startColumnNumber" : 47,
      "endLineNumber" : 1030,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 10,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 1030,
        "startColumnNumber" : 31,
        "endLineNumber" : 1030,
        "endColumnNumber" : 88
      },
      "nodeContext" : "weightedValue=new WeightedValue<V>(newValue[0],weight)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 1030,
        "startColumnNumber" : 8,
        "endLineNumber" : 1030,
        "endColumnNumber" : 89
      },
      "nodeContext" : "final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1659,
        "startLineNumber" : 1007,
        "startColumnNumber" : 27,
        "endLineNumber" : 1047,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  WeightedValue<V> oldWeightedValue=prior.get();\n  V oldValue;\n  if (oldWeightedValue.isAlive()) {\n    oldValue=oldWeightedValue.value;\n  }\n else {\n    task[1]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    oldValue=null;\n  }\n  newValue[0]=remappingFunction.apply(k,oldValue);\n  if ((newValue[0] == null) && (oldValue != null)) {\n    task[0]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    return null;\n  }\n  final int weight=weigher.weigh(key,newValue[0]);\n  final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n  Node<K,V> newNode;\n  if (task[1] == null) {\n    newNode=prior;\n    prior.lazySet(weightedValue);\n    final int weightedDifference=weight - oldWeightedValue.weight;\n    if (weightedDifference != 0) {\n      task[0]=new UpdateTask(prior,weightedDifference);\n    }\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n    }\n  }\n else {\n    newNode=new Node<>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n  }\n  return prior;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1680,
        "startLineNumber" : 1007,
        "startColumnNumber" : 6,
        "endLineNumber" : 1047,
        "endColumnNumber" : 7
      },
      "nodeContext" : "synchronized (prior) {\n  WeightedValue<V> oldWeightedValue=prior.get();\n  V oldValue;\n  if (oldWeightedValue.isAlive()) {\n    oldValue=oldWeightedValue.value;\n  }\n else {\n    task[1]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    oldValue=null;\n  }\n  newValue[0]=remappingFunction.apply(k,oldValue);\n  if ((newValue[0] == null) && (oldValue != null)) {\n    task[0]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    return null;\n  }\n  final int weight=weigher.weigh(key,newValue[0]);\n  final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n  Node<K,V> newNode;\n  if (task[1] == null) {\n    newNode=prior;\n    prior.lazySet(weightedValue);\n    final int weightedDifference=weight - oldWeightedValue.weight;\n    if (weightedDifference != 0) {\n      task[0]=new UpdateTask(prior,weightedDifference);\n    }\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n    }\n  }\n else {\n    newNode=new Node<>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n  }\n  return prior;\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 224,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 2159,
        "startLineNumber" : 995,
        "startColumnNumber" : 36,
        "endLineNumber" : 1048,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (prior == null) {\n    newValue[0]=remappingFunction.apply(k,null);\n    if (newValue[0] == null) {\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n    return newNode;\n  }\nsynchronized (prior) {\n    WeightedValue<V> oldWeightedValue=prior.get();\n    V oldValue;\n    if (oldWeightedValue.isAlive()) {\n      oldValue=oldWeightedValue.value;\n    }\n else {\n      task[1]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      oldValue=null;\n    }\n    newValue[0]=remappingFunction.apply(k,oldValue);\n    if ((newValue[0] == null) && (oldValue != null)) {\n      task[0]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    Node<K,V> newNode;\n    if (task[1] == null) {\n      newNode=prior;\n      prior.lazySet(weightedValue);\n      final int weightedDifference=weight - oldWeightedValue.weight;\n      if (weightedDifference != 0) {\n        task[0]=new UpdateTask(prior,weightedDifference);\n      }\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n      }\n    }\n else {\n      newNode=new Node<>(key,weightedValue);\n      task[0]=new AddTask(newNode,weight);\n    }\n    return prior;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 313,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 2173,
        "startLineNumber" : 995,
        "startColumnNumber" : 22,
        "endLineNumber" : 1048,
        "endColumnNumber" : 5
      },
      "nodeContext" : "(k,prior) -> {\n  if (prior == null) {\n    newValue[0]=remappingFunction.apply(k,null);\n    if (newValue[0] == null) {\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n    return newNode;\n  }\nsynchronized (prior) {\n    WeightedValue<V> oldWeightedValue=prior.get();\n    V oldValue;\n    if (oldWeightedValue.isAlive()) {\n      oldValue=oldWeightedValue.value;\n    }\n else {\n      task[1]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      oldValue=null;\n    }\n    newValue[0]=remappingFunction.apply(k,oldValue);\n    if ((newValue[0] == null) && (oldValue != null)) {\n      task[0]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    Node<K,V> newNode;\n    if (task[1] == null) {\n      newNode=prior;\n      prior.lazySet(weightedValue);\n      final int weightedDifference=weight - oldWeightedValue.weight;\n      if (weightedDifference != 0) {\n        task[0]=new UpdateTask(prior,weightedDifference);\n      }\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n      }\n    }\n else {\n      newNode=new Node<>(key,weightedValue);\n      task[0]=new AddTask(newNode,weight);\n    }\n    return prior;\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 318,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 1030,
        "startColumnNumber" : 8,
        "endLineNumber" : 1030,
        "endColumnNumber" : 89
      },
      "nodeContext" : "final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "com.github.benmanes.caffeine.cache.BoundedLocalCache.WeightedValue<V>"
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 1002,
    "startColumnNumber" : 47,
    "endLineNumber" : 1002,
    "endColumnNumber" : 88
  }, {
    "charLength" : 41,
    "startLineNumber" : 1030,
    "startColumnNumber" : 47,
    "endLineNumber" : 1030,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}