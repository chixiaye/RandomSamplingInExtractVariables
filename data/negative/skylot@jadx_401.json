{
  "id" : 401,
  "expression" : "names.add(passName)",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/test/java/jadx/tests/functional/JadxVisitorsOrderTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "names.add(passName)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 51,
      "startColumnNumber" : 8,
      "endLineNumber" : 51,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 51,
        "startColumnNumber" : 7,
        "endLineNumber" : 51,
        "endColumnNumber" : 27
      },
      "nodeContext" : "!names.add(passName)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 51,
        "startColumnNumber" : 3,
        "endLineNumber" : 53,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (!names.add(passName)) {\n  errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 822,
        "startLineNumber" : 43,
        "startColumnNumber" : 42,
        "endLineNumber" : 64,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  IDexTreeVisitor pass=passes.get(i);\n  JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n    continue;\n  }\n  String passName=pass.getClass().getSimpleName();\n  if (!names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 862,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 64,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < passes.size(); i++) {\n  IDexTreeVisitor pass=passes.get(i);\n  JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n    continue;\n  }\n  String passName=pass.getClass().getSimpleName();\n  if (!names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 146,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1109,
        "startLineNumber" : 35,
        "startColumnNumber" : 65,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n      continue;\n    }\n    String passName=pass.getClass().getSimpleName();\n    if (!names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1173,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static List<String> check(List<IDexTreeVisitor> passes){\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n      continue;\n    }\n    String passName=pass.getClass().getSimpleName();\n    if (!names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 51,
        "startColumnNumber" : 7,
        "endLineNumber" : 51,
        "endColumnNumber" : 27
      },
      "nodeContext" : "!names.add(passName)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 51,
    "startColumnNumber" : 8,
    "endLineNumber" : 51,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}