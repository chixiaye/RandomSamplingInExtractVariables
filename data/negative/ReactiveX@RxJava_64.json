{
  "id" : 64,
  "expression" : "Observable.<Long>just(1L,2L,3L)",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/observable/ObservableRetryWithPredicateTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Observable.<Long>just(1L,2L,3L)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 315,
      "startColumnNumber" : 8,
      "endLineNumber" : 315,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 315,
        "startColumnNumber" : 8,
        "endLineNumber" : 323,
        "endColumnNumber" : 15
      },
      "nodeContext" : "Observable.<Long>just(1L,2L,3L).map(new Function<Long,Long>(){\n  @Override public Long apply(  Long x){\n    System.out.println(\"map \" + x);\n    if (x == 2 && isFirst.getAndSet(false)) {\n      throw new RuntimeException(\"retryable error\");\n    }\n    return x;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 57,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 556,
        "startLineNumber" : 315,
        "startColumnNumber" : 8,
        "endLineNumber" : 328,
        "endColumnNumber" : 15
      },
      "nodeContext" : "Observable.<Long>just(1L,2L,3L).map(new Function<Long,Long>(){\n  @Override public Long apply(  Long x){\n    System.out.println(\"map \" + x);\n    if (x == 2 && isFirst.getAndSet(false)) {\n      throw new RuntimeException(\"retryable error\");\n    }\n    return x;\n  }\n}\n).retry(new BiPredicate<Integer,Throwable>(){\n  @Override public boolean test(  Integer t1,  Throwable t2){\n    return true;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 85,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 315,
        "startColumnNumber" : 8,
        "endLineNumber" : 335,
        "endColumnNumber" : 15
      },
      "nodeContext" : "Observable.<Long>just(1L,2L,3L).map(new Function<Long,Long>(){\n  @Override public Long apply(  Long x){\n    System.out.println(\"map \" + x);\n    if (x == 2 && isFirst.getAndSet(false)) {\n      throw new RuntimeException(\"retryable error\");\n    }\n    return x;\n  }\n}\n).retry(new BiPredicate<Integer,Throwable>(){\n  @Override public boolean test(  Integer t1,  Throwable t2){\n    return true;\n  }\n}\n).forEach(new Consumer<Long>(){\n  @Override public void accept(  Long t){\n    System.out.println(t);\n    list.add(t);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 117,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 752,
        "startLineNumber" : 315,
        "startColumnNumber" : 8,
        "endLineNumber" : 335,
        "endColumnNumber" : 16
      },
      "nodeContext" : "Observable.<Long>just(1L,2L,3L).map(new Function<Long,Long>(){\n  @Override public Long apply(  Long x){\n    System.out.println(\"map \" + x);\n    if (x == 2 && isFirst.getAndSet(false)) {\n      throw new RuntimeException(\"retryable error\");\n    }\n    return x;\n  }\n}\n).retry(new BiPredicate<Integer,Throwable>(){\n  @Override public boolean test(  Integer t1,  Throwable t2){\n    return true;\n  }\n}\n).forEach(new Consumer<Long>(){\n  @Override public void accept(  Long t){\n    System.out.println(t);\n    list.add(t);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 118,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 958,
        "startLineNumber" : 312,
        "startColumnNumber" : 50,
        "endLineNumber" : 337,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<Long> list=new CopyOnWriteArrayList<Long>();\n  final AtomicBoolean isFirst=new AtomicBoolean(true);\n  Observable.<Long>just(1L,2L,3L).map(new Function<Long,Long>(){\n    @Override public Long apply(    Long x){\n      System.out.println(\"map \" + x);\n      if (x == 2 && isFirst.getAndSet(false)) {\n        throw new RuntimeException(\"retryable error\");\n      }\n      return x;\n    }\n  }\n).retry(new BiPredicate<Integer,Throwable>(){\n    @Override public boolean test(    Integer t1,    Throwable t2){\n      return true;\n    }\n  }\n).forEach(new Consumer<Long>(){\n    @Override public void accept(    Long t){\n      System.out.println(t);\n      list.add(t);\n    }\n  }\n);\n  assertEquals(Arrays.asList(1L,1L,2L,3L),list);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1015,
        "startLineNumber" : 311,
        "startColumnNumber" : 4,
        "endLineNumber" : 337,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testIssue3008RetryWithPredicate(){\n  final List<Long> list=new CopyOnWriteArrayList<Long>();\n  final AtomicBoolean isFirst=new AtomicBoolean(true);\n  Observable.<Long>just(1L,2L,3L).map(new Function<Long,Long>(){\n    @Override public Long apply(    Long x){\n      System.out.println(\"map \" + x);\n      if (x == 2 && isFirst.getAndSet(false)) {\n        throw new RuntimeException(\"retryable error\");\n      }\n      return x;\n    }\n  }\n).retry(new BiPredicate<Integer,Throwable>(){\n    @Override public boolean test(    Integer t1,    Throwable t2){\n      return true;\n    }\n  }\n).forEach(new Consumer<Long>(){\n    @Override public void accept(    Long t){\n      System.out.println(t);\n      list.add(t);\n    }\n  }\n);\n  assertEquals(Arrays.asList(1L,1L,2L,3L),list);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 315,
        "startColumnNumber" : 8,
        "endLineNumber" : 323,
        "endColumnNumber" : 15
      },
      "nodeContext" : "Observable.<Long>just(1L,2L,3L).map(new Function<Long,Long>(){\n  @Override public Long apply(  Long x){\n    System.out.println(\"map \" + x);\n    if (x == 2 && isFirst.getAndSet(false)) {\n      throw new RuntimeException(\"retryable error\");\n    }\n    return x;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 57,
      "astHeight" : 11
    },
    "tokenLength" : 5,
    "type" : "io.reactivex.Observable<java.lang.Long>"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 315,
    "startColumnNumber" : 8,
    "endLineNumber" : 315,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}