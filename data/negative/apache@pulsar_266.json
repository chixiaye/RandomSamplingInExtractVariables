{
  "id" : 266,
  "expression" : "consumers.get(i)",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractDispatcherSingleActiveConsumer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "consumers.get(i)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 115,
      "startColumnNumber" : 48,
      "endLineNumber" : 115,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 115,
        "startColumnNumber" : 48,
        "endLineNumber" : 115,
        "endColumnNumber" : 83
      },
      "nodeContext" : "consumers.get(i).getPriorityLevel()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 115,
        "startColumnNumber" : 24,
        "endLineNumber" : 115,
        "endColumnNumber" : 83
      },
      "nodeContext" : "highestPriorityLevel != consumers.get(i).getPriorityLevel()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 115,
        "startColumnNumber" : 20,
        "endLineNumber" : 118,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (highestPriorityLevel != consumers.get(i).getPriorityLevel()) {\n  consumersSize=i;\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 114,
        "startColumnNumber" : 59,
        "endLineNumber" : 119,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (highestPriorityLevel != consumers.get(i).getPriorityLevel()) {\n    consumersSize=i;\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 114,
        "startColumnNumber" : 16,
        "endLineNumber" : 119,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < consumers.size(); i++) {\n  if (highestPriorityLevel != consumers.get(i).getPriorityLevel()) {\n    consumersSize=i;\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 357,
        "startLineNumber" : 112,
        "startColumnNumber" : 43,
        "endLineNumber" : 120,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int highestPriorityLevel=consumers.get(0).getPriorityLevel();\n  for (int i=0; i < consumers.size(); i++) {\n    if (highestPriorityLevel != consumers.get(i).getPriorityLevel()) {\n      consumersSize=i;\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 388,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (hasPriorityConsumer.get()) {\n  int highestPriorityLevel=consumers.get(0).getPriorityLevel();\n  for (int i=0; i < consumers.size(); i++) {\n    if (highestPriorityLevel != consumers.get(i).getPriorityLevel()) {\n      consumersSize=i;\n      break;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1115,
        "startLineNumber" : 98,
        "startColumnNumber" : 33,
        "endLineNumber" : 122,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  AtomicBoolean hasPriorityConsumer=new AtomicBoolean(false);\n  consumers.sort((c1,c2) -> {\n    int priority=c1.getPriorityLevel() - c2.getPriorityLevel();\n    if (priority != 0) {\n      hasPriorityConsumer.set(true);\n      return priority;\n    }\n    return c1.consumerName().compareTo(c2.consumerName());\n  }\n);\n  int consumersSize=consumers.size();\n  if (hasPriorityConsumer.get()) {\n    int highestPriorityLevel=consumers.get(0).getPriorityLevel();\n    for (int i=0; i < consumers.size(); i++) {\n      if (highestPriorityLevel != consumers.get(i).getPriorityLevel()) {\n        consumersSize=i;\n        break;\n      }\n    }\n  }\n  index=partitionIndex % consumersSize;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1140,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (partitionIndex >= 0) {\n  AtomicBoolean hasPriorityConsumer=new AtomicBoolean(false);\n  consumers.sort((c1,c2) -> {\n    int priority=c1.getPriorityLevel() - c2.getPriorityLevel();\n    if (priority != 0) {\n      hasPriorityConsumer.set(true);\n      return priority;\n    }\n    return c1.consumerName().compareTo(c2.consumerName());\n  }\n);\n  int consumersSize=consumers.size();\n  if (hasPriorityConsumer.get()) {\n    int highestPriorityLevel=consumers.get(0).getPriorityLevel();\n    for (int i=0; i < consumers.size(); i++) {\n      if (highestPriorityLevel != consumers.get(i).getPriorityLevel()) {\n        consumersSize=i;\n        break;\n      }\n    }\n  }\n  index=partitionIndex % consumersSize;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 113,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1889,
        "startLineNumber" : 92,
        "startColumnNumber" : 54,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkArgument(!consumers.isEmpty());\n  int index=0;\n  if (partitionIndex >= 0) {\n    AtomicBoolean hasPriorityConsumer=new AtomicBoolean(false);\n    consumers.sort((c1,c2) -> {\n      int priority=c1.getPriorityLevel() - c2.getPriorityLevel();\n      if (priority != 0) {\n        hasPriorityConsumer.set(true);\n        return priority;\n      }\n      return c1.consumerName().compareTo(c2.consumerName());\n    }\n);\n    int consumersSize=consumers.size();\n    if (hasPriorityConsumer.get()) {\n      int highestPriorityLevel=consumers.get(0).getPriorityLevel();\n      for (int i=0; i < consumers.size(); i++) {\n        if (highestPriorityLevel != consumers.get(i).getPriorityLevel()) {\n          consumersSize=i;\n          break;\n        }\n      }\n    }\n    index=partitionIndex % consumersSize;\n  }\n  Consumer prevConsumer=ACTIVE_CONSUMER_UPDATER.getAndSet(this,consumers.get(index));\n  Consumer activeConsumer=ACTIVE_CONSUMER_UPDATER.get(this);\n  if (prevConsumer == activeConsumer) {\n    return false;\n  }\n else {\n    scheduleReadOnActiveConsumer();\n    return true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 161,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2424,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Pick active consumer for a topic for  {@link SubType#Failover} subscription.If it's a non-partitioned topic then it'll pick consumer based on order they subscribe to the topic. If is's a partitioned topic, first sort consumers based on their priority level and consumer name then distributed partitions evenly across consumers with highest priority level.\n * @return the true consumer if the consumer is changed, otherwise false.\n */\nprotected boolean pickAndScheduleActiveConsumer(){\n  checkArgument(!consumers.isEmpty());\n  int index=0;\n  if (partitionIndex >= 0) {\n    AtomicBoolean hasPriorityConsumer=new AtomicBoolean(false);\n    consumers.sort((c1,c2) -> {\n      int priority=c1.getPriorityLevel() - c2.getPriorityLevel();\n      if (priority != 0) {\n        hasPriorityConsumer.set(true);\n        return priority;\n      }\n      return c1.consumerName().compareTo(c2.consumerName());\n    }\n);\n    int consumersSize=consumers.size();\n    if (hasPriorityConsumer.get()) {\n      int highestPriorityLevel=consumers.get(0).getPriorityLevel();\n      for (int i=0; i < consumers.size(); i++) {\n        if (highestPriorityLevel != consumers.get(i).getPriorityLevel()) {\n          consumersSize=i;\n          break;\n        }\n      }\n    }\n    index=partitionIndex % consumersSize;\n  }\n  Consumer prevConsumer=ACTIVE_CONSUMER_UPDATER.getAndSet(this,consumers.get(index));\n  Consumer activeConsumer=ACTIVE_CONSUMER_UPDATER.get(this);\n  if (prevConsumer == activeConsumer) {\n    return false;\n  }\n else {\n    scheduleReadOnActiveConsumer();\n    return true;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 166,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 115,
        "startColumnNumber" : 24,
        "endLineNumber" : 115,
        "endColumnNumber" : 83
      },
      "nodeContext" : "highestPriorityLevel != consumers.get(i).getPriorityLevel()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "org.apache.pulsar.broker.service.Consumer"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 115,
    "startColumnNumber" : 48,
    "endLineNumber" : 115,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}