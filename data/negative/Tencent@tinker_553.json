{
  "id" : 553,
  "expression" : "ShareTinkerInternals",
  "projectName" : "Tencent@tinker",
  "commitID" : "8907f584e73ace1dd53a38521815112a9b390d56",
  "filePath" : "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java",
  "occurrences" : 13,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ShareTinkerInternals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 67,
      "startColumnNumber" : 13,
      "endLineNumber" : 67,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 67,
        "startColumnNumber" : 13,
        "endLineNumber" : 67,
        "endColumnNumber" : 61
      },
      "nodeContext" : "ShareTinkerInternals.isTinkerEnabled(tinkerFlag)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 67,
        "startColumnNumber" : 12,
        "endLineNumber" : 67,
        "endColumnNumber" : 61
      },
      "nodeContext" : "!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n  Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 67,
        "startColumnNumber" : 12,
        "endLineNumber" : 67,
        "endColumnNumber" : 61
      },
      "nodeContext" : "!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareTinkerInternals"
  }, {
    "nodeContext" : "ShareTinkerInternals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 72,
      "startColumnNumber" : 12,
      "endLineNumber" : 72,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ShareTinkerInternals.isInPatchProcess(app)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 284,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ShareTinkerInternals.isInPatchProcess(app)) {\n  Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ShareTinkerInternals.isInPatchProcess(app)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareTinkerInternals"
  }, {
    "nodeContext" : "ShareTinkerInternals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 128,
      "startColumnNumber" : 30,
      "endLineNumber" : 128,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 128,
        "startColumnNumber" : 30,
        "endLineNumber" : 128,
        "endColumnNumber" : 71
      },
      "nodeContext" : "ShareTinkerInternals.isInMainProcess(app)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 71
      },
      "nodeContext" : "mainProcess=ShareTinkerInternals.isInMainProcess(app)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 72
      },
      "nodeContext" : "boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 72
      },
      "nodeContext" : "boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareTinkerInternals"
  }, {
    "nodeContext" : "ShareTinkerInternals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 131,
      "startColumnNumber" : 17,
      "endLineNumber" : 131,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 131,
        "startColumnNumber" : 17,
        "endLineNumber" : 131,
        "endColumnNumber" : 68
      },
      "nodeContext" : "ShareTinkerInternals.getCurrentOatMode(app,oatDex)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 68
      },
      "nodeContext" : "oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 69
      },
      "nodeContext" : "oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 69
      },
      "nodeContext" : "oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareTinkerInternals"
  }, {
    "nodeContext" : "ShareTinkerInternals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 139,
      "startColumnNumber" : 12,
      "endLineNumber" : 139,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 139,
        "startColumnNumber" : 12,
        "endLineNumber" : 139,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ShareTinkerInternals.isNullOrNil(version)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 139,
        "startColumnNumber" : 8,
        "endLineNumber" : 143,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ShareTinkerInternals.isNullOrNil(version)) {\n  Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 139,
        "startColumnNumber" : 12,
        "endLineNumber" : 139,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ShareTinkerInternals.isNullOrNil(version)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareTinkerInternals"
  }, {
    "nodeContext" : "ShareTinkerInternals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 178,
      "startColumnNumber" : 25,
      "endLineNumber" : 178,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 178,
        "startColumnNumber" : 25,
        "endLineNumber" : 178,
        "endColumnNumber" : 114
      },
      "nodeContext" : "ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 178,
        "startColumnNumber" : 12,
        "endLineNumber" : 178,
        "endColumnNumber" : 114
      },
      "nodeContext" : "returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 178,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 115
      },
      "nodeContext" : "int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 178,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 115
      },
      "nodeContext" : "int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareTinkerInternals"
  }, {
    "nodeContext" : "ShareTinkerInternals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 188,
      "startColumnNumber" : 40,
      "endLineNumber" : 188,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 188,
        "startColumnNumber" : 40,
        "endLineNumber" : 188,
        "endColumnNumber" : 94
      },
      "nodeContext" : "ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 188,
        "startColumnNumber" : 22,
        "endLineNumber" : 188,
        "endColumnNumber" : 94
      },
      "nodeContext" : "isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 188,
        "startColumnNumber" : 8,
        "endLineNumber" : 188,
        "endColumnNumber" : 95
      },
      "nodeContext" : "final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 188,
        "startColumnNumber" : 8,
        "endLineNumber" : 188,
        "endColumnNumber" : 95
      },
      "nodeContext" : "final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareTinkerInternals"
  }, {
    "nodeContext" : "ShareTinkerInternals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 200,
      "startColumnNumber" : 46,
      "endLineNumber" : 200,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 200,
        "startColumnNumber" : 46,
        "endLineNumber" : 200,
        "endColumnNumber" : 106
      },
      "nodeContext" : "ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 200,
        "startColumnNumber" : 22,
        "endLineNumber" : 200,
        "endColumnNumber" : 106
      },
      "nodeContext" : "isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 200,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 107
      },
      "nodeContext" : "final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 200,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 107
      },
      "nodeContext" : "final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareTinkerInternals"
  }, {
    "nodeContext" : "ShareTinkerInternals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 213,
      "startColumnNumber" : 45,
      "endLineNumber" : 213,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 213,
        "startColumnNumber" : 45,
        "endLineNumber" : 213,
        "endColumnNumber" : 104
      },
      "nodeContext" : "ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 213,
        "startColumnNumber" : 22,
        "endLineNumber" : 213,
        "endColumnNumber" : 104
      },
      "nodeContext" : "isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 213,
        "startColumnNumber" : 8,
        "endLineNumber" : 213,
        "endColumnNumber" : 105
      },
      "nodeContext" : "final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 213,
        "startColumnNumber" : 8,
        "endLineNumber" : 213,
        "endColumnNumber" : 105
      },
      "nodeContext" : "final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareTinkerInternals"
  }, {
    "nodeContext" : "ShareTinkerInternals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 225,
      "startColumnNumber" : 30,
      "endLineNumber" : 225,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 225,
        "startColumnNumber" : 30,
        "endLineNumber" : 225,
        "endColumnNumber" : 60
      },
      "nodeContext" : "ShareTinkerInternals.isVmArt()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 225,
        "startColumnNumber" : 30,
        "endLineNumber" : 227,
        "endColumnNumber" : 42
      },
      "nodeContext" : "ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 225,
        "startColumnNumber" : 30,
        "endLineNumber" : 227,
        "endColumnNumber" : 85
      },
      "nodeContext" : "ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 225,
        "startColumnNumber" : 16,
        "endLineNumber" : 227,
        "endColumnNumber" : 85
      },
      "nodeContext" : "isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 225,
        "startColumnNumber" : 8,
        "endLineNumber" : 227,
        "endColumnNumber" : 86
      },
      "nodeContext" : "boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 225,
        "startColumnNumber" : 30,
        "endLineNumber" : 225,
        "endColumnNumber" : 60
      },
      "nodeContext" : "ShareTinkerInternals.isVmArt()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareTinkerInternals"
  }, {
    "nodeContext" : "ShareTinkerInternals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 226,
      "startColumnNumber" : 15,
      "endLineNumber" : 226,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 226,
        "startColumnNumber" : 15,
        "endLineNumber" : 226,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 225,
        "startColumnNumber" : 30,
        "endLineNumber" : 227,
        "endColumnNumber" : 42
      },
      "nodeContext" : "ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 225,
        "startColumnNumber" : 30,
        "endLineNumber" : 227,
        "endColumnNumber" : 85
      },
      "nodeContext" : "ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 225,
        "startColumnNumber" : 16,
        "endLineNumber" : 227,
        "endColumnNumber" : 85
      },
      "nodeContext" : "isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 225,
        "startColumnNumber" : 8,
        "endLineNumber" : 227,
        "endColumnNumber" : 86
      },
      "nodeContext" : "boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 226,
        "startColumnNumber" : 15,
        "endLineNumber" : 226,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareTinkerInternals"
  }, {
    "nodeContext" : "ShareTinkerInternals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 227,
      "startColumnNumber" : 47,
      "endLineNumber" : 227,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 227,
        "startColumnNumber" : 47,
        "endLineNumber" : 227,
        "endColumnNumber" : 85
      },
      "nodeContext" : "ShareTinkerInternals.isAfterAndroidO()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 227,
        "startColumnNumber" : 46,
        "endLineNumber" : 227,
        "endColumnNumber" : 85
      },
      "nodeContext" : "!ShareTinkerInternals.isAfterAndroidO()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 225,
        "startColumnNumber" : 30,
        "endLineNumber" : 227,
        "endColumnNumber" : 85
      },
      "nodeContext" : "ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 225,
        "startColumnNumber" : 16,
        "endLineNumber" : 227,
        "endColumnNumber" : 85
      },
      "nodeContext" : "isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 225,
        "startColumnNumber" : 8,
        "endLineNumber" : 227,
        "endColumnNumber" : 86
      },
      "nodeContext" : "boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 227,
        "startColumnNumber" : 46,
        "endLineNumber" : 227,
        "endColumnNumber" : 85
      },
      "nodeContext" : "!ShareTinkerInternals.isAfterAndroidO()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareTinkerInternals"
  }, {
    "nodeContext" : "ShareTinkerInternals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 298,
      "startColumnNumber" : 12,
      "endLineNumber" : 298,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 298,
        "startColumnNumber" : 12,
        "endLineNumber" : 298,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ShareTinkerInternals.killAllOtherProcess(app)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 298,
        "startColumnNumber" : 12,
        "endLineNumber" : 298,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ShareTinkerInternals.killAllOtherProcess(app);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 297,
        "startColumnNumber" : 28,
        "endLineNumber" : 300,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ShareTinkerInternals.killAllOtherProcess(app);\n  Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 297,
        "startColumnNumber" : 8,
        "endLineNumber" : 300,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oatModeChanged) {\n  ShareTinkerInternals.killAllOtherProcess(app);\n  Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 298,
        "startColumnNumber" : 12,
        "endLineNumber" : 298,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ShareTinkerInternals.killAllOtherProcess(app);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.tencent.tinker.loader.shareutil.ShareTinkerInternals"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 67,
    "startColumnNumber" : 13,
    "endLineNumber" : 67,
    "endColumnNumber" : 33
  }, {
    "charLength" : 20,
    "startLineNumber" : 72,
    "startColumnNumber" : 12,
    "endLineNumber" : 72,
    "endColumnNumber" : 32
  }, {
    "charLength" : 20,
    "startLineNumber" : 128,
    "startColumnNumber" : 30,
    "endLineNumber" : 128,
    "endColumnNumber" : 50
  }, {
    "charLength" : 20,
    "startLineNumber" : 131,
    "startColumnNumber" : 17,
    "endLineNumber" : 131,
    "endColumnNumber" : 37
  }, {
    "charLength" : 20,
    "startLineNumber" : 139,
    "startColumnNumber" : 12,
    "endLineNumber" : 139,
    "endColumnNumber" : 32
  }, {
    "charLength" : 20,
    "startLineNumber" : 178,
    "startColumnNumber" : 25,
    "endLineNumber" : 178,
    "endColumnNumber" : 45
  }, {
    "charLength" : 20,
    "startLineNumber" : 188,
    "startColumnNumber" : 40,
    "endLineNumber" : 188,
    "endColumnNumber" : 60
  }, {
    "charLength" : 20,
    "startLineNumber" : 200,
    "startColumnNumber" : 46,
    "endLineNumber" : 200,
    "endColumnNumber" : 66
  }, {
    "charLength" : 20,
    "startLineNumber" : 213,
    "startColumnNumber" : 45,
    "endLineNumber" : 213,
    "endColumnNumber" : 65
  }, {
    "charLength" : 20,
    "startLineNumber" : 225,
    "startColumnNumber" : 30,
    "endLineNumber" : 225,
    "endColumnNumber" : 50
  }, {
    "charLength" : 20,
    "startLineNumber" : 226,
    "startColumnNumber" : 15,
    "endLineNumber" : 226,
    "endColumnNumber" : 35
  }, {
    "charLength" : 20,
    "startLineNumber" : 227,
    "startColumnNumber" : 47,
    "endLineNumber" : 227,
    "endColumnNumber" : 67
  }, {
    "charLength" : 20,
    "startLineNumber" : 298,
    "startColumnNumber" : 12,
    "endLineNumber" : 298,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 4
  } ]
}