{
  "id" : 210,
  "expression" : "(char)(next - 64)",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/oned/Code93Reader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(char)(next - 64)",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 203,
      "startColumnNumber" : 28,
      "endLineNumber" : 203,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 203,
        "startColumnNumber" : 14,
        "endLineNumber" : 203,
        "endColumnNumber" : 46
      },
      "nodeContext" : "decodedChar=(char)(next - 64)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 203,
        "startColumnNumber" : 14,
        "endLineNumber" : 203,
        "endColumnNumber" : 47
      },
      "nodeContext" : "decodedChar=(char)(next - 64);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 202,
        "startColumnNumber" : 44,
        "endLineNumber" : 204,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  decodedChar=(char)(next - 64);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 202,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (next >= 'A' && next <= 'Z') {\n  decodedChar=(char)(next - 64);\n}\n else {\n  throw FormatException.getFormatInstance();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1333,
        "startLineNumber" : 191,
        "startColumnNumber" : 8,
        "endLineNumber" : 228,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (c) {\ncase 'd':  if (next >= 'A' && next <= 'Z') {\n    decodedChar=(char)(next + 32);\n  }\n else {\n    throw FormatException.getFormatInstance();\n  }\nbreak;\ncase 'a':if (next >= 'A' && next <= 'Z') {\ndecodedChar=(char)(next - 64);\n}\n else {\nthrow FormatException.getFormatInstance();\n}\nbreak;\ncase 'b':if (next >= 'A' && next <= 'E') {\ndecodedChar=(char)(next - 38);\n}\n else if (next >= 'F' && next <= 'W') {\ndecodedChar=(char)(next - 11);\n}\n else {\nthrow FormatException.getFormatInstance();\n}\nbreak;\ncase 'c':if (next >= 'A' && next <= 'O') {\ndecodedChar=(char)(next - 32);\n}\n else if (next == 'Z') {\ndecodedChar=':';\n}\n else {\nthrow FormatException.getFormatInstance();\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 133,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1540,
        "startLineNumber" : 188,
        "startColumnNumber" : 32,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  char next=encoded.charAt(i + 1);\n  char decodedChar='\\0';\nswitch (c) {\ncase 'd':    if (next >= 'A' && next <= 'Z') {\n      decodedChar=(char)(next + 32);\n    }\n else {\n      throw FormatException.getFormatInstance();\n    }\n  break;\ncase 'a':if (next >= 'A' && next <= 'Z') {\n  decodedChar=(char)(next - 64);\n}\n else {\n  throw FormatException.getFormatInstance();\n}\nbreak;\ncase 'b':if (next >= 'A' && next <= 'E') {\ndecodedChar=(char)(next - 38);\n}\n else if (next >= 'F' && next <= 'W') {\ndecodedChar=(char)(next - 11);\n}\n else {\nthrow FormatException.getFormatInstance();\n}\nbreak;\ncase 'c':if (next >= 'A' && next <= 'O') {\ndecodedChar=(char)(next - 32);\n}\n else if (next == 'Z') {\ndecodedChar=':';\n}\n else {\nthrow FormatException.getFormatInstance();\n}\nbreak;\n}\ndecoded.append(decodedChar);\ni++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1610,
        "startLineNumber" : 188,
        "startColumnNumber" : 6,
        "endLineNumber" : 234,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (c >= 'a' && c <= 'd') {\n  char next=encoded.charAt(i + 1);\n  char decodedChar='\\0';\nswitch (c) {\ncase 'd':    if (next >= 'A' && next <= 'Z') {\n      decodedChar=(char)(next + 32);\n    }\n else {\n      throw FormatException.getFormatInstance();\n    }\n  break;\ncase 'a':if (next >= 'A' && next <= 'Z') {\n  decodedChar=(char)(next - 64);\n}\n else {\n  throw FormatException.getFormatInstance();\n}\nbreak;\ncase 'b':if (next >= 'A' && next <= 'E') {\ndecodedChar=(char)(next - 38);\n}\n else if (next >= 'F' && next <= 'W') {\ndecodedChar=(char)(next - 11);\n}\n else {\nthrow FormatException.getFormatInstance();\n}\nbreak;\ncase 'c':if (next >= 'A' && next <= 'O') {\ndecodedChar=(char)(next - 32);\n}\n else if (next == 'Z') {\ndecodedChar=':';\n}\n else {\nthrow FormatException.getFormatInstance();\n}\nbreak;\n}\ndecoded.append(decodedChar);\ni++;\n}\n else {\ndecoded.append(c);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 171,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1661,
        "startLineNumber" : 186,
        "startColumnNumber" : 37,
        "endLineNumber" : 235,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  char c=encoded.charAt(i);\n  if (c >= 'a' && c <= 'd') {\n    char next=encoded.charAt(i + 1);\n    char decodedChar='\\0';\nswitch (c) {\ncase 'd':      if (next >= 'A' && next <= 'Z') {\n        decodedChar=(char)(next + 32);\n      }\n else {\n        throw FormatException.getFormatInstance();\n      }\n    break;\ncase 'a':  if (next >= 'A' && next <= 'Z') {\n    decodedChar=(char)(next - 64);\n  }\n else {\n    throw FormatException.getFormatInstance();\n  }\nbreak;\ncase 'b':if (next >= 'A' && next <= 'E') {\ndecodedChar=(char)(next - 38);\n}\n else if (next >= 'F' && next <= 'W') {\ndecodedChar=(char)(next - 11);\n}\n else {\nthrow FormatException.getFormatInstance();\n}\nbreak;\ncase 'c':if (next >= 'A' && next <= 'O') {\ndecodedChar=(char)(next - 32);\n}\n else if (next == 'Z') {\ndecodedChar=':';\n}\n else {\nthrow FormatException.getFormatInstance();\n}\nbreak;\n}\ndecoded.append(decodedChar);\ni++;\n}\n else {\ndecoded.append(c);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1694,
        "startLineNumber" : 186,
        "startColumnNumber" : 4,
        "endLineNumber" : 235,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < length; i++) {\n  char c=encoded.charAt(i);\n  if (c >= 'a' && c <= 'd') {\n    char next=encoded.charAt(i + 1);\n    char decodedChar='\\0';\nswitch (c) {\ncase 'd':      if (next >= 'A' && next <= 'Z') {\n        decodedChar=(char)(next + 32);\n      }\n else {\n        throw FormatException.getFormatInstance();\n      }\n    break;\ncase 'a':  if (next >= 'A' && next <= 'Z') {\n    decodedChar=(char)(next - 64);\n  }\n else {\n    throw FormatException.getFormatInstance();\n  }\nbreak;\ncase 'b':if (next >= 'A' && next <= 'E') {\ndecodedChar=(char)(next - 38);\n}\n else if (next >= 'F' && next <= 'W') {\ndecodedChar=(char)(next - 11);\n}\n else {\nthrow FormatException.getFormatInstance();\n}\nbreak;\ncase 'c':if (next >= 'A' && next <= 'O') {\ndecodedChar=(char)(next - 32);\n}\n else if (next == 'Z') {\ndecodedChar=':';\n}\n else {\nthrow FormatException.getFormatInstance();\n}\nbreak;\n}\ndecoded.append(decodedChar);\ni++;\n}\n else {\ndecoded.append(c);\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 191,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1830,
        "startLineNumber" : 183,
        "startColumnNumber" : 84,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int length=encoded.length();\n  StringBuilder decoded=new StringBuilder(length);\n  for (int i=0; i < length; i++) {\n    char c=encoded.charAt(i);\n    if (c >= 'a' && c <= 'd') {\n      char next=encoded.charAt(i + 1);\n      char decodedChar='\\0';\nswitch (c) {\ncase 'd':        if (next >= 'A' && next <= 'Z') {\n          decodedChar=(char)(next + 32);\n        }\n else {\n          throw FormatException.getFormatInstance();\n        }\n      break;\ncase 'a':    if (next >= 'A' && next <= 'Z') {\n      decodedChar=(char)(next - 64);\n    }\n else {\n      throw FormatException.getFormatInstance();\n    }\n  break;\ncase 'b':if (next >= 'A' && next <= 'E') {\n  decodedChar=(char)(next - 38);\n}\n else if (next >= 'F' && next <= 'W') {\n  decodedChar=(char)(next - 11);\n}\n else {\n  throw FormatException.getFormatInstance();\n}\nbreak;\ncase 'c':if (next >= 'A' && next <= 'O') {\ndecodedChar=(char)(next - 32);\n}\n else if (next == 'Z') {\ndecodedChar=':';\n}\n else {\nthrow FormatException.getFormatInstance();\n}\nbreak;\n}\ndecoded.append(decodedChar);\ni++;\n}\n else {\ndecoded.append(c);\n}\n}\nreturn decoded.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1912,
        "startLineNumber" : 183,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static String decodeExtended(CharSequence encoded) throws FormatException {\n  int length=encoded.length();\n  StringBuilder decoded=new StringBuilder(length);\n  for (int i=0; i < length; i++) {\n    char c=encoded.charAt(i);\n    if (c >= 'a' && c <= 'd') {\n      char next=encoded.charAt(i + 1);\n      char decodedChar='\\0';\nswitch (c) {\ncase 'd':        if (next >= 'A' && next <= 'Z') {\n          decodedChar=(char)(next + 32);\n        }\n else {\n          throw FormatException.getFormatInstance();\n        }\n      break;\ncase 'a':    if (next >= 'A' && next <= 'Z') {\n      decodedChar=(char)(next - 64);\n    }\n else {\n      throw FormatException.getFormatInstance();\n    }\n  break;\ncase 'b':if (next >= 'A' && next <= 'E') {\n  decodedChar=(char)(next - 38);\n}\n else if (next >= 'F' && next <= 'W') {\n  decodedChar=(char)(next - 11);\n}\n else {\n  throw FormatException.getFormatInstance();\n}\nbreak;\ncase 'c':if (next >= 'A' && next <= 'O') {\ndecodedChar=(char)(next - 32);\n}\n else if (next == 'Z') {\ndecodedChar=':';\n}\n else {\nthrow FormatException.getFormatInstance();\n}\nbreak;\n}\ndecoded.append(decodedChar);\ni++;\n}\n else {\ndecoded.append(c);\n}\n}\nreturn decoded.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 224,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 203,
        "startColumnNumber" : 14,
        "endLineNumber" : 203,
        "endColumnNumber" : 47
      },
      "nodeContext" : "decodedChar=(char)(next - 64);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 203,
    "startColumnNumber" : 28,
    "endLineNumber" : 203,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}