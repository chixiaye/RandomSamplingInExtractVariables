{
  "id" : 11,
  "expression" : "Files::isRegularFile",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/main/java/com/google/cloud/tools/jib/frontend/MainClassFinder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Files::isRegularFile",
    "nodeType" : "ExpressionMethodReference",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 206,
      "startColumnNumber" : 18,
      "endLineNumber" : 206,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 205,
        "startColumnNumber" : 6,
        "endLineNumber" : 206,
        "endColumnNumber" : 39
      },
      "nodeContext" : "new DirectoryWalker(rootDirectory).filter(Files::isRegularFile)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 205,
        "startColumnNumber" : 6,
        "endLineNumber" : 207,
        "endColumnNumber" : 61
      },
      "nodeContext" : "new DirectoryWalker(rootDirectory).filter(Files::isRegularFile).filter(path -> path.toString().endsWith(\".class\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1140,
        "startLineNumber" : 205,
        "startColumnNumber" : 6,
        "endLineNumber" : 229,
        "endColumnNumber" : 16
      },
      "nodeContext" : "new DirectoryWalker(rootDirectory).filter(Files::isRegularFile).filter(path -> path.toString().endsWith(\".class\")).walk(classFile -> {\n  try (InputStream classFileInputStream=Files.newInputStream(classFile)){\n    CtClass fileClass=classPool.makeClass(classFileInputStream);\n    CtMethod mainMethod=fileClass.getDeclaredMethod(\"main\",mainMethodParams);\n    if (CtClass.voidType.equals(mainMethod.getReturnType()) && Modifier.isStatic(mainMethod.getModifiers()) && Modifier.isPublic(mainMethod.getModifiers())) {\n      classNames.add(fileClass.getName());\n    }\n  }\n catch (  NotFoundException ex) {\n  }\ncatch (  IOException ex) {\n    buildLogger.warn(\"Could not read class file: \" + classFile);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 105,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1141,
        "startLineNumber" : 205,
        "startColumnNumber" : 6,
        "endLineNumber" : 229,
        "endColumnNumber" : 17
      },
      "nodeContext" : "new DirectoryWalker(rootDirectory).filter(Files::isRegularFile).filter(path -> path.toString().endsWith(\".class\")).walk(classFile -> {\n  try (InputStream classFileInputStream=Files.newInputStream(classFile)){\n    CtClass fileClass=classPool.makeClass(classFileInputStream);\n    CtMethod mainMethod=fileClass.getDeclaredMethod(\"main\",mainMethodParams);\n    if (CtClass.voidType.equals(mainMethod.getReturnType()) && Modifier.isStatic(mainMethod.getModifiers()) && Modifier.isPublic(mainMethod.getModifiers())) {\n      classNames.add(fileClass.getName());\n    }\n  }\n catch (  NotFoundException ex) {\n  }\ncatch (  IOException ex) {\n    buildLogger.warn(\"Could not read class file: \" + classFile);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 106,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1271,
        "startLineNumber" : 202,
        "startColumnNumber" : 8,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  CtClass[] mainMethodParams=new CtClass[]{classPool.get(\"java.lang.String[]\")};\n  new DirectoryWalker(rootDirectory).filter(Files::isRegularFile).filter(path -> path.toString().endsWith(\".class\")).walk(classFile -> {\n    try (InputStream classFileInputStream=Files.newInputStream(classFile)){\n      CtClass fileClass=classPool.makeClass(classFileInputStream);\n      CtMethod mainMethod=fileClass.getDeclaredMethod(\"main\",mainMethodParams);\n      if (CtClass.voidType.equals(mainMethod.getReturnType()) && Modifier.isStatic(mainMethod.getModifiers()) && Modifier.isPublic(mainMethod.getModifiers())) {\n        classNames.add(fileClass.getName());\n      }\n    }\n catch (    NotFoundException ex) {\n    }\ncatch (    IOException ex) {\n      buildLogger.warn(\"Could not read class file: \" + classFile);\n    }\n  }\n);\n  return classNames;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 202,
        "startColumnNumber" : 4,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  CtClass[] mainMethodParams=new CtClass[]{classPool.get(\"java.lang.String[]\")};\n  new DirectoryWalker(rootDirectory).filter(Files::isRegularFile).filter(path -> path.toString().endsWith(\".class\")).walk(classFile -> {\n    try (InputStream classFileInputStream=Files.newInputStream(classFile)){\n      CtClass fileClass=classPool.makeClass(classFileInputStream);\n      CtMethod mainMethod=fileClass.getDeclaredMethod(\"main\",mainMethodParams);\n      if (CtClass.voidType.equals(mainMethod.getReturnType()) && Modifier.isStatic(mainMethod.getModifiers()) && Modifier.isPublic(mainMethod.getModifiers())) {\n        classNames.add(fileClass.getName());\n      }\n    }\n catch (    NotFoundException ex) {\n    }\ncatch (    IOException ex) {\n      buildLogger.warn(\"Could not read class file: \" + classFile);\n    }\n  }\n);\n  return classNames;\n}\n catch (NotFoundException ex) {\n  throw new RuntimeException(ex);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 138,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1717,
        "startLineNumber" : 191,
        "startColumnNumber" : 78,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!Files.exists(rootDirectory) || !Files.isDirectory(rootDirectory)) {\n    return Collections.emptyList();\n  }\n  List<String> classNames=new ArrayList<>();\n  ClassPool classPool=new ClassPool();\n  classPool.appendSystemPath();\n  try {\n    CtClass[] mainMethodParams=new CtClass[]{classPool.get(\"java.lang.String[]\")};\n    new DirectoryWalker(rootDirectory).filter(Files::isRegularFile).filter(path -> path.toString().endsWith(\".class\")).walk(classFile -> {\n      try (InputStream classFileInputStream=Files.newInputStream(classFile)){\n        CtClass fileClass=classPool.makeClass(classFileInputStream);\n        CtMethod mainMethod=fileClass.getDeclaredMethod(\"main\",mainMethodParams);\n        if (CtClass.voidType.equals(mainMethod.getReturnType()) && Modifier.isStatic(mainMethod.getModifiers()) && Modifier.isPublic(mainMethod.getModifiers())) {\n          classNames.add(fileClass.getName());\n        }\n      }\n catch (      NotFoundException ex) {\n      }\ncatch (      IOException ex) {\n        buildLogger.warn(\"Could not read class file: \" + classFile);\n      }\n    }\n);\n    return classNames;\n  }\n catch (  NotFoundException ex) {\n    throw new RuntimeException(ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2109,
        "startLineNumber" : 184,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Finds the classes with  {@code public static void main(String[] args)} in {@code rootDirectory}.\n * @param rootDirectory directory containing the {@code .class} files.\n * @return a list of class names containing a main method.\n * @throws IOException if searching the root directory fails.\n */\nprivate List<String> findMainClasses(Path rootDirectory) throws IOException {\n  if (!Files.exists(rootDirectory) || !Files.isDirectory(rootDirectory)) {\n    return Collections.emptyList();\n  }\n  List<String> classNames=new ArrayList<>();\n  ClassPool classPool=new ClassPool();\n  classPool.appendSystemPath();\n  try {\n    CtClass[] mainMethodParams=new CtClass[]{classPool.get(\"java.lang.String[]\")};\n    new DirectoryWalker(rootDirectory).filter(Files::isRegularFile).filter(path -> path.toString().endsWith(\".class\")).walk(classFile -> {\n      try (InputStream classFileInputStream=Files.newInputStream(classFile)){\n        CtClass fileClass=classPool.makeClass(classFileInputStream);\n        CtMethod mainMethod=fileClass.getDeclaredMethod(\"main\",mainMethodParams);\n        if (CtClass.voidType.equals(mainMethod.getReturnType()) && Modifier.isStatic(mainMethod.getModifiers()) && Modifier.isPublic(mainMethod.getModifiers())) {\n          classNames.add(fileClass.getName());\n        }\n      }\n catch (      NotFoundException ex) {\n      }\ncatch (      IOException ex) {\n        buildLogger.warn(\"Could not read class file: \" + classFile);\n      }\n    }\n);\n    return classNames;\n  }\n catch (  NotFoundException ex) {\n    throw new RuntimeException(ex);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 195,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 205,
        "startColumnNumber" : 6,
        "endLineNumber" : 206,
        "endColumnNumber" : 39
      },
      "nodeContext" : "new DirectoryWalker(rootDirectory).filter(Files::isRegularFile)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.function.Predicate<java.nio.file.Path>"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 206,
    "startColumnNumber" : 18,
    "endLineNumber" : 206,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}