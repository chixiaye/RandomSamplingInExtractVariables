{
  "id" : 72,
  "expression" : "out.writerIndex() + 1",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec/src/main/java/io/netty/handler/codec/compression/SnappyCompressor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "out.writerIndex() + 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 89,
      "startColumnNumber" : 50,
      "endLineNumber" : 89,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 89,
        "startColumnNumber" : 38,
        "endLineNumber" : 89,
        "endColumnNumber" : 71
      },
      "nodeContext" : "lengthIdx=out.writerIndex() + 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 89,
        "startColumnNumber" : 28,
        "endLineNumber" : 89,
        "endColumnNumber" : 72
      },
      "nodeContext" : "final int lengthIdx=out.writerIndex() + 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1263,
        "startLineNumber" : 88,
        "startColumnNumber" : 33,
        "endLineNumber" : 110,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  final int lengthIdx=out.writerIndex() + 1;\n  if (dataLength < MIN_COMPRESSIBLE_LENGTH) {\n    ByteBuf slice=in.readSlice(dataLength);\n    writeUnencodedChunk(slice,out,dataLength);\n    break;\n  }\n  out.writeInt(0);\n  if (dataLength > Short.MAX_VALUE) {\n    ByteBuf slice=in.readSlice(Short.MAX_VALUE);\n    calculateAndWriteChecksum(slice,out);\n    snappy.encode(slice,out,Short.MAX_VALUE);\n    setChunkLength(out,lengthIdx);\n    dataLength-=Short.MAX_VALUE;\n  }\n else {\n    ByteBuf slice=in.readSlice(dataLength);\n    calculateAndWriteChecksum(slice,out);\n    snappy.encode(slice,out,dataLength);\n    setChunkLength(out,lengthIdx);\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1272,
        "startLineNumber" : 88,
        "startColumnNumber" : 24,
        "endLineNumber" : 110,
        "endColumnNumber" : 25
      },
      "nodeContext" : "for (; ; ) {\n  final int lengthIdx=out.writerIndex() + 1;\n  if (dataLength < MIN_COMPRESSIBLE_LENGTH) {\n    ByteBuf slice=in.readSlice(dataLength);\n    writeUnencodedChunk(slice,out,dataLength);\n    break;\n  }\n  out.writeInt(0);\n  if (dataLength > Short.MAX_VALUE) {\n    ByteBuf slice=in.readSlice(Short.MAX_VALUE);\n    calculateAndWriteChecksum(slice,out);\n    snappy.encode(slice,out,Short.MAX_VALUE);\n    setChunkLength(out,lengthIdx);\n    dataLength-=Short.MAX_VALUE;\n  }\n else {\n    ByteBuf slice=in.readSlice(dataLength);\n    calculateAndWriteChecksum(slice,out);\n    snappy.encode(slice,out,dataLength);\n    setChunkLength(out,lengthIdx);\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1322,
        "startLineNumber" : 87,
        "startColumnNumber" : 62,
        "endLineNumber" : 111,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  for (; ; ) {\n    final int lengthIdx=out.writerIndex() + 1;\n    if (dataLength < MIN_COMPRESSIBLE_LENGTH) {\n      ByteBuf slice=in.readSlice(dataLength);\n      writeUnencodedChunk(slice,out,dataLength);\n      break;\n    }\n    out.writeInt(0);\n    if (dataLength > Short.MAX_VALUE) {\n      ByteBuf slice=in.readSlice(Short.MAX_VALUE);\n      calculateAndWriteChecksum(slice,out);\n      snappy.encode(slice,out,Short.MAX_VALUE);\n      setChunkLength(out,lengthIdx);\n      dataLength-=Short.MAX_VALUE;\n    }\n else {\n      ByteBuf slice=in.readSlice(dataLength);\n      calculateAndWriteChecksum(slice,out);\n      snappy.encode(slice,out,dataLength);\n      setChunkLength(out,lengthIdx);\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1461,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 113,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (dataLength > MIN_COMPRESSIBLE_LENGTH) {\n  for (; ; ) {\n    final int lengthIdx=out.writerIndex() + 1;\n    if (dataLength < MIN_COMPRESSIBLE_LENGTH) {\n      ByteBuf slice=in.readSlice(dataLength);\n      writeUnencodedChunk(slice,out,dataLength);\n      break;\n    }\n    out.writeInt(0);\n    if (dataLength > Short.MAX_VALUE) {\n      ByteBuf slice=in.readSlice(Short.MAX_VALUE);\n      calculateAndWriteChecksum(slice,out);\n      snappy.encode(slice,out,Short.MAX_VALUE);\n      setChunkLength(out,lengthIdx);\n      dataLength-=Short.MAX_VALUE;\n    }\n else {\n      ByteBuf slice=in.readSlice(dataLength);\n      calculateAndWriteChecksum(slice,out);\n      snappy.encode(slice,out,dataLength);\n      setChunkLength(out,lengthIdx);\n      break;\n    }\n  }\n}\n else {\n  writeUnencodedChunk(in,out,dataLength);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 121,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1888,
        "startLineNumber" : 78,
        "startColumnNumber" : 20,
        "endLineNumber" : 115,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (state == State.Init) {\n    state=State.Started;\n    out.writeBytes(STREAM_START);\n  }\n else   if (state != State.Started) {\n    throw new IllegalStateException();\n  }\n  int dataLength=in.readableBytes();\n  if (dataLength > MIN_COMPRESSIBLE_LENGTH) {\n    for (; ; ) {\n      final int lengthIdx=out.writerIndex() + 1;\n      if (dataLength < MIN_COMPRESSIBLE_LENGTH) {\n        ByteBuf slice=in.readSlice(dataLength);\n        writeUnencodedChunk(slice,out,dataLength);\n        break;\n      }\n      out.writeInt(0);\n      if (dataLength > Short.MAX_VALUE) {\n        ByteBuf slice=in.readSlice(Short.MAX_VALUE);\n        calculateAndWriteChecksum(slice,out);\n        snappy.encode(slice,out,Short.MAX_VALUE);\n        setChunkLength(out,lengthIdx);\n        dataLength-=Short.MAX_VALUE;\n      }\n else {\n        ByteBuf slice=in.readSlice(dataLength);\n        calculateAndWriteChecksum(slice,out);\n        snappy.encode(slice,out,dataLength);\n        setChunkLength(out,lengthIdx);\n        break;\n      }\n    }\n  }\n else {\n    writeUnencodedChunk(in,out,dataLength);\n  }\n  return out;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 2007,
        "startLineNumber" : 78,
        "startColumnNumber" : 16,
        "endLineNumber" : 118,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  if (state == State.Init) {\n    state=State.Started;\n    out.writeBytes(STREAM_START);\n  }\n else   if (state != State.Started) {\n    throw new IllegalStateException();\n  }\n  int dataLength=in.readableBytes();\n  if (dataLength > MIN_COMPRESSIBLE_LENGTH) {\n    for (; ; ) {\n      final int lengthIdx=out.writerIndex() + 1;\n      if (dataLength < MIN_COMPRESSIBLE_LENGTH) {\n        ByteBuf slice=in.readSlice(dataLength);\n        writeUnencodedChunk(slice,out,dataLength);\n        break;\n      }\n      out.writeInt(0);\n      if (dataLength > Short.MAX_VALUE) {\n        ByteBuf slice=in.readSlice(Short.MAX_VALUE);\n        calculateAndWriteChecksum(slice,out);\n        snappy.encode(slice,out,Short.MAX_VALUE);\n        setChunkLength(out,lengthIdx);\n        dataLength-=Short.MAX_VALUE;\n      }\n else {\n        ByteBuf slice=in.readSlice(dataLength);\n        calculateAndWriteChecksum(slice,out);\n        snappy.encode(slice,out,dataLength);\n        setChunkLength(out,lengthIdx);\n        break;\n      }\n    }\n  }\n else {\n    writeUnencodedChunk(in,out,dataLength);\n  }\n  return out;\n}\n catch (Throwable cause) {\n  out.release();\n  throw cause;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 173,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2375,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (state) {\ncase Finished:  return Unpooled.EMPTY_BUFFER;\ncase Closed:throw new CompressionException(\"Compressor closed\");\ndefault:ByteBuf out=allocator.buffer();\ntry {\nif (state == State.Init) {\nstate=State.Started;\nout.writeBytes(STREAM_START);\n}\n else if (state != State.Started) {\nthrow new IllegalStateException();\n}\nint dataLength=in.readableBytes();\nif (dataLength > MIN_COMPRESSIBLE_LENGTH) {\nfor (; ; ) {\n  final int lengthIdx=out.writerIndex() + 1;\n  if (dataLength < MIN_COMPRESSIBLE_LENGTH) {\n    ByteBuf slice=in.readSlice(dataLength);\n    writeUnencodedChunk(slice,out,dataLength);\n    break;\n  }\n  out.writeInt(0);\n  if (dataLength > Short.MAX_VALUE) {\n    ByteBuf slice=in.readSlice(Short.MAX_VALUE);\n    calculateAndWriteChecksum(slice,out);\n    snappy.encode(slice,out,Short.MAX_VALUE);\n    setChunkLength(out,lengthIdx);\n    dataLength-=Short.MAX_VALUE;\n  }\n else {\n    ByteBuf slice=in.readSlice(dataLength);\n    calculateAndWriteChecksum(slice,out);\n    snappy.encode(slice,out,dataLength);\n    setChunkLength(out,lengthIdx);\n    break;\n  }\n}\n}\n else {\nwriteUnencodedChunk(in,out,dataLength);\n}\nreturn out;\n}\n catch (Throwable cause) {\nout.release();\nthrow cause;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 197,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2393,
        "startLineNumber" : 69,
        "startColumnNumber" : 96,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (state) {\ncase Finished:    return Unpooled.EMPTY_BUFFER;\ncase Closed:  throw new CompressionException(\"Compressor closed\");\ndefault:ByteBuf out=allocator.buffer();\ntry {\nif (state == State.Init) {\n  state=State.Started;\n  out.writeBytes(STREAM_START);\n}\n else if (state != State.Started) {\n  throw new IllegalStateException();\n}\nint dataLength=in.readableBytes();\nif (dataLength > MIN_COMPRESSIBLE_LENGTH) {\n  for (; ; ) {\n    final int lengthIdx=out.writerIndex() + 1;\n    if (dataLength < MIN_COMPRESSIBLE_LENGTH) {\n      ByteBuf slice=in.readSlice(dataLength);\n      writeUnencodedChunk(slice,out,dataLength);\n      break;\n    }\n    out.writeInt(0);\n    if (dataLength > Short.MAX_VALUE) {\n      ByteBuf slice=in.readSlice(Short.MAX_VALUE);\n      calculateAndWriteChecksum(slice,out);\n      snappy.encode(slice,out,Short.MAX_VALUE);\n      setChunkLength(out,lengthIdx);\n      dataLength-=Short.MAX_VALUE;\n    }\n else {\n      ByteBuf slice=in.readSlice(dataLength);\n      calculateAndWriteChecksum(slice,out);\n      snappy.encode(slice,out,dataLength);\n      setChunkLength(out,lengthIdx);\n      break;\n    }\n  }\n}\n else {\n  writeUnencodedChunk(in,out,dataLength);\n}\nreturn out;\n}\n catch (Throwable cause) {\nout.release();\nthrow cause;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 198,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2500,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public ByteBuf compress(ByteBuf in,ByteBufAllocator allocator) throws CompressionException {\nswitch (state) {\ncase Finished:    return Unpooled.EMPTY_BUFFER;\ncase Closed:  throw new CompressionException(\"Compressor closed\");\ndefault:ByteBuf out=allocator.buffer();\ntry {\nif (state == State.Init) {\n  state=State.Started;\n  out.writeBytes(STREAM_START);\n}\n else if (state != State.Started) {\n  throw new IllegalStateException();\n}\nint dataLength=in.readableBytes();\nif (dataLength > MIN_COMPRESSIBLE_LENGTH) {\n  for (; ; ) {\n    final int lengthIdx=out.writerIndex() + 1;\n    if (dataLength < MIN_COMPRESSIBLE_LENGTH) {\n      ByteBuf slice=in.readSlice(dataLength);\n      writeUnencodedChunk(slice,out,dataLength);\n      break;\n    }\n    out.writeInt(0);\n    if (dataLength > Short.MAX_VALUE) {\n      ByteBuf slice=in.readSlice(Short.MAX_VALUE);\n      calculateAndWriteChecksum(slice,out);\n      snappy.encode(slice,out,Short.MAX_VALUE);\n      setChunkLength(out,lengthIdx);\n      dataLength-=Short.MAX_VALUE;\n    }\n else {\n      ByteBuf slice=in.readSlice(dataLength);\n      calculateAndWriteChecksum(slice,out);\n      snappy.encode(slice,out,dataLength);\n      setChunkLength(out,lengthIdx);\n      break;\n    }\n  }\n}\n else {\n  writeUnencodedChunk(in,out,dataLength);\n}\nreturn out;\n}\n catch (Throwable cause) {\nout.release();\nthrow cause;\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 215,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 89,
        "startColumnNumber" : 28,
        "endLineNumber" : 89,
        "endColumnNumber" : 72
      },
      "nodeContext" : "final int lengthIdx=out.writerIndex() + 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 89,
    "startColumnNumber" : 50,
    "endLineNumber" : 89,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}