{
  "id" : 130,
  "expression" : "1142",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/clients/consumer/ConsumerRecordTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1142",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 65,
      "startColumnNumber" : 34,
      "endLineNumber" : 65,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 65,
        "endColumnNumber" : 38
      },
      "nodeContext" : "serializedValueSize=1142",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 39
      },
      "nodeContext" : "int serializedValueSize=1142;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2946,
        "startLineNumber" : 55,
        "startColumnNumber" : 47,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String topic=\"topic\";\n  int partition=0;\n  long offset=23;\n  long timestamp=23434217432432L;\n  TimestampType timestampType=TimestampType.CREATE_TIME;\n  String key=\"key\";\n  String value=\"value\";\n  long checksum=50L;\n  int serializedKeySize=100;\n  int serializedValueSize=1142;\n  ConsumerRecord<String,String> record=new ConsumerRecord<>(topic,partition,offset,timestamp,timestampType,checksum,serializedKeySize,serializedValueSize,key,value);\n  assertEquals(topic,record.topic());\n  assertEquals(partition,record.partition());\n  assertEquals(offset,record.offset());\n  assertEquals(key,record.key());\n  assertEquals(value,record.value());\n  assertEquals(timestampType,record.timestampType());\n  assertEquals(timestamp,record.timestamp());\n  assertEquals(serializedKeySize,record.serializedKeySize());\n  assertEquals(serializedValueSize,record.serializedValueSize());\n  assertEquals(Optional.empty(),record.leaderEpoch());\n  assertEquals(new RecordHeaders(),record.headers());\n  RecordHeaders headers=new RecordHeaders();\n  headers.add(new RecordHeader(\"header key\",\"header value\".getBytes(StandardCharsets.UTF_8)));\n  record=new ConsumerRecord<>(topic,partition,offset,timestamp,timestampType,checksum,serializedKeySize,serializedValueSize,key,value,headers);\n  assertEquals(topic,record.topic());\n  assertEquals(partition,record.partition());\n  assertEquals(offset,record.offset());\n  assertEquals(key,record.key());\n  assertEquals(value,record.value());\n  assertEquals(timestampType,record.timestampType());\n  assertEquals(timestamp,record.timestamp());\n  assertEquals(serializedKeySize,record.serializedKeySize());\n  assertEquals(serializedValueSize,record.serializedValueSize());\n  assertEquals(Optional.empty(),record.leaderEpoch());\n  assertEquals(headers,record.headers());\n  Optional<Integer> leaderEpoch=Optional.of(10);\n  record=new ConsumerRecord<>(topic,partition,offset,timestamp,timestampType,checksum,serializedKeySize,serializedValueSize,key,value,headers,leaderEpoch);\n  assertEquals(topic,record.topic());\n  assertEquals(partition,record.partition());\n  assertEquals(offset,record.offset());\n  assertEquals(key,record.key());\n  assertEquals(value,record.value());\n  assertEquals(timestampType,record.timestampType());\n  assertEquals(timestamp,record.timestamp());\n  assertEquals(serializedKeySize,record.serializedKeySize());\n  assertEquals(serializedValueSize,record.serializedValueSize());\n  assertEquals(leaderEpoch,record.leaderEpoch());\n  assertEquals(headers,record.headers());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 389,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3015,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Deprecated public void testConstructorsWithChecksum(){\n  String topic=\"topic\";\n  int partition=0;\n  long offset=23;\n  long timestamp=23434217432432L;\n  TimestampType timestampType=TimestampType.CREATE_TIME;\n  String key=\"key\";\n  String value=\"value\";\n  long checksum=50L;\n  int serializedKeySize=100;\n  int serializedValueSize=1142;\n  ConsumerRecord<String,String> record=new ConsumerRecord<>(topic,partition,offset,timestamp,timestampType,checksum,serializedKeySize,serializedValueSize,key,value);\n  assertEquals(topic,record.topic());\n  assertEquals(partition,record.partition());\n  assertEquals(offset,record.offset());\n  assertEquals(key,record.key());\n  assertEquals(value,record.value());\n  assertEquals(timestampType,record.timestampType());\n  assertEquals(timestamp,record.timestamp());\n  assertEquals(serializedKeySize,record.serializedKeySize());\n  assertEquals(serializedValueSize,record.serializedValueSize());\n  assertEquals(Optional.empty(),record.leaderEpoch());\n  assertEquals(new RecordHeaders(),record.headers());\n  RecordHeaders headers=new RecordHeaders();\n  headers.add(new RecordHeader(\"header key\",\"header value\".getBytes(StandardCharsets.UTF_8)));\n  record=new ConsumerRecord<>(topic,partition,offset,timestamp,timestampType,checksum,serializedKeySize,serializedValueSize,key,value,headers);\n  assertEquals(topic,record.topic());\n  assertEquals(partition,record.partition());\n  assertEquals(offset,record.offset());\n  assertEquals(key,record.key());\n  assertEquals(value,record.value());\n  assertEquals(timestampType,record.timestampType());\n  assertEquals(timestamp,record.timestamp());\n  assertEquals(serializedKeySize,record.serializedKeySize());\n  assertEquals(serializedValueSize,record.serializedValueSize());\n  assertEquals(Optional.empty(),record.leaderEpoch());\n  assertEquals(headers,record.headers());\n  Optional<Integer> leaderEpoch=Optional.of(10);\n  record=new ConsumerRecord<>(topic,partition,offset,timestamp,timestampType,checksum,serializedKeySize,serializedValueSize,key,value,headers,leaderEpoch);\n  assertEquals(topic,record.topic());\n  assertEquals(partition,record.partition());\n  assertEquals(offset,record.offset());\n  assertEquals(key,record.key());\n  assertEquals(value,record.value());\n  assertEquals(timestampType,record.timestampType());\n  assertEquals(timestamp,record.timestamp());\n  assertEquals(serializedKeySize,record.serializedKeySize());\n  assertEquals(serializedValueSize,record.serializedValueSize());\n  assertEquals(leaderEpoch,record.leaderEpoch());\n  assertEquals(headers,record.headers());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 397,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 39
      },
      "nodeContext" : "int serializedValueSize=1142;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 65,
    "startColumnNumber" : 34,
    "endLineNumber" : 65,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}