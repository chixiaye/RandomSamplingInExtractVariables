{
  "id" : 2,
  "expression" : "TimeUnit.MILLISECONDS",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/observable/ObservableDoOnUnsubscribeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TimeUnit.MILLISECONDS",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 43,
      "startColumnNumber" : 30,
      "endLineNumber" : 43,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 40,
        "startColumnNumber" : 33,
        "endLineNumber" : 43,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Observable.interval(50,TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 618,
        "startLineNumber" : 40,
        "startColumnNumber" : 33,
        "endLineNumber" : 52,
        "endColumnNumber" : 18
      },
      "nodeContext" : "Observable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n  @Override public void run(){\n    upperLatch.countDown();\n    upperCount.incrementAndGet();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 957,
        "startLineNumber" : 40,
        "startColumnNumber" : 33,
        "endLineNumber" : 59,
        "endColumnNumber" : 18
      },
      "nodeContext" : "Observable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n  @Override public void run(){\n    upperLatch.countDown();\n    upperCount.incrementAndGet();\n  }\n}\n).doOnNext(new Consumer<Long>(){\n  @Override public void accept(  Long aLong){\n    onNextLatch.countDown();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1327,
        "startLineNumber" : 40,
        "startColumnNumber" : 33,
        "endLineNumber" : 67,
        "endColumnNumber" : 18
      },
      "nodeContext" : "Observable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n  @Override public void run(){\n    upperLatch.countDown();\n    upperCount.incrementAndGet();\n  }\n}\n).doOnNext(new Consumer<Long>(){\n  @Override public void accept(  Long aLong){\n    onNextLatch.countDown();\n  }\n}\n).doOnCancel(new Runnable(){\n  @Override public void run(){\n    lowerLatch.countDown();\n    lowerCount.incrementAndGet();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 73,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 1335,
        "startLineNumber" : 40,
        "startColumnNumber" : 25,
        "endLineNumber" : 67,
        "endColumnNumber" : 18
      },
      "nodeContext" : "longs=Observable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n  @Override public void run(){\n    upperLatch.countDown();\n    upperCount.incrementAndGet();\n  }\n}\n).doOnNext(new Consumer<Long>(){\n  @Override public void accept(  Long aLong){\n    onNextLatch.countDown();\n  }\n}\n).doOnCancel(new Runnable(){\n  @Override public void run(){\n    lowerLatch.countDown();\n    lowerCount.incrementAndGet();\n  }\n}\n)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 75,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1353,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 19
      },
      "nodeContext" : "Observable<Long> longs=Observable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n  @Override public void run(){\n    upperLatch.countDown();\n    upperCount.incrementAndGet();\n  }\n}\n).doOnNext(new Consumer<Long>(){\n  @Override public void accept(  Long aLong){\n    onNextLatch.countDown();\n  }\n}\n).doOnCancel(new Runnable(){\n  @Override public void run(){\n    lowerLatch.countDown();\n    lowerCount.incrementAndGet();\n  }\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 81,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2822,
        "startLineNumber" : 32,
        "startColumnNumber" : 55,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int subCount=3;\n  final CountDownLatch upperLatch=new CountDownLatch(subCount);\n  final CountDownLatch lowerLatch=new CountDownLatch(subCount);\n  final CountDownLatch onNextLatch=new CountDownLatch(subCount);\n  final AtomicInteger upperCount=new AtomicInteger();\n  final AtomicInteger lowerCount=new AtomicInteger();\n  Observable<Long> longs=Observable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n    @Override public void run(){\n      upperLatch.countDown();\n      upperCount.incrementAndGet();\n    }\n  }\n).doOnNext(new Consumer<Long>(){\n    @Override public void accept(    Long aLong){\n      onNextLatch.countDown();\n    }\n  }\n).doOnCancel(new Runnable(){\n    @Override public void run(){\n      lowerLatch.countDown();\n      lowerCount.incrementAndGet();\n    }\n  }\n);\n  List<Disposable> subscriptions=new ArrayList<Disposable>();\n  List<TestObserver<Long>> subscribers=new ArrayList<TestObserver<Long>>();\n  for (int i=0; i < subCount; ++i) {\n    TestObserver<Long> NbpSubscriber=new TestObserver<Long>();\n    subscriptions.add(NbpSubscriber);\n    longs.subscribe(NbpSubscriber);\n    subscribers.add(NbpSubscriber);\n  }\n  onNextLatch.await();\n  for (int i=0; i < subCount; ++i) {\n    subscriptions.get(i).dispose();\n  }\n  upperLatch.await();\n  lowerLatch.await();\n  assertEquals(String.format(\"There should exactly %d un-subscription events for upper stream\",subCount),subCount,upperCount.get());\n  assertEquals(String.format(\"There should exactly %d un-subscription events for lower stream\",subCount),subCount,lowerCount.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2884,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDoOnUnsubscribe() throws Exception {\n  int subCount=3;\n  final CountDownLatch upperLatch=new CountDownLatch(subCount);\n  final CountDownLatch lowerLatch=new CountDownLatch(subCount);\n  final CountDownLatch onNextLatch=new CountDownLatch(subCount);\n  final AtomicInteger upperCount=new AtomicInteger();\n  final AtomicInteger lowerCount=new AtomicInteger();\n  Observable<Long> longs=Observable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n    @Override public void run(){\n      upperLatch.countDown();\n      upperCount.incrementAndGet();\n    }\n  }\n).doOnNext(new Consumer<Long>(){\n    @Override public void accept(    Long aLong){\n      onNextLatch.countDown();\n    }\n  }\n).doOnCancel(new Runnable(){\n    @Override public void run(){\n      lowerLatch.countDown();\n      lowerCount.incrementAndGet();\n    }\n  }\n);\n  List<Disposable> subscriptions=new ArrayList<Disposable>();\n  List<TestObserver<Long>> subscribers=new ArrayList<TestObserver<Long>>();\n  for (int i=0; i < subCount; ++i) {\n    TestObserver<Long> NbpSubscriber=new TestObserver<Long>();\n    subscriptions.add(NbpSubscriber);\n    longs.subscribe(NbpSubscriber);\n    subscribers.add(NbpSubscriber);\n  }\n  onNextLatch.await();\n  for (int i=0; i < subCount; ++i) {\n    subscriptions.get(i).dispose();\n  }\n  upperLatch.await();\n  lowerLatch.await();\n  assertEquals(String.format(\"There should exactly %d un-subscription events for upper stream\",subCount),subCount,upperCount.get());\n  assertEquals(String.format(\"There should exactly %d un-subscription events for lower stream\",subCount),subCount,lowerCount.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 40,
        "startColumnNumber" : 33,
        "endLineNumber" : 43,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Observable.interval(50,TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.util.concurrent.TimeUnit"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 43,
    "startColumnNumber" : 30,
    "endLineNumber" : 43,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}