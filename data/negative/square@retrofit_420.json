{
  "id" : 420,
  "expression" : "AsyncExample.class",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "AsyncExample.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 250,
      "startColumnNumber" : 54,
      "endLineNumber" : 250,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 250,
        "startColumnNumber" : 31,
        "endLineNumber" : 250,
        "endColumnNumber" : 97
      },
      "nodeContext" : "mockRestAdapter.create(AsyncExample.class,new MockAsyncExample())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 250,
        "startColumnNumber" : 17,
        "endLineNumber" : 250,
        "endColumnNumber" : 97
      },
      "nodeContext" : "mockService=mockRestAdapter.create(AsyncExample.class,new MockAsyncExample())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 250,
        "startColumnNumber" : 4,
        "endLineNumber" : 250,
        "endColumnNumber" : 98
      },
      "nodeContext" : "AsyncExample mockService=mockRestAdapter.create(AsyncExample.class,new MockAsyncExample());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 999,
        "startLineNumber" : 240,
        "startColumnNumber" : 55,
        "endLineNumber" : 269,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  mockRestAdapter.setDelay(1);\n  mockRestAdapter.setErrorPercentage(100);\nclass MockAsyncExample implements AsyncExample {\n    @Override public void doStuff(    Callback<String> cb){\n      throw new AssertionError();\n    }\n  }\n  AsyncExample mockService=mockRestAdapter.create(AsyncExample.class,new MockAsyncExample());\n  final AtomicReference<RetrofitError> errorRef=new AtomicReference<RetrofitError>();\n  mockService.doStuff(new Callback<String>(){\n    @Override public void success(    String o,    Response response){\n      throw new AssertionError();\n    }\n    @Override public void failure(    RetrofitError error){\n      errorRef.set(error);\n    }\n  }\n);\n  verify(httpExecutor).execute(any(Runnable.class));\n  verify(callbackExecutor).execute(any(Runnable.class));\n  RetrofitError error=errorRef.get();\n  assertThat(error.getKind()).isEqualTo(RetrofitError.Kind.NETWORK);\n  assertThat(error.getCause()).hasMessage(\"Mock network error!\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 161,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1052,
        "startLineNumber" : 240,
        "startColumnNumber" : 2,
        "endLineNumber" : 269,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void asyncFailureTriggersNetworkError(){\n  mockRestAdapter.setDelay(1);\n  mockRestAdapter.setErrorPercentage(100);\nclass MockAsyncExample implements AsyncExample {\n    @Override public void doStuff(    Callback<String> cb){\n      throw new AssertionError();\n    }\n  }\n  AsyncExample mockService=mockRestAdapter.create(AsyncExample.class,new MockAsyncExample());\n  final AtomicReference<RetrofitError> errorRef=new AtomicReference<RetrofitError>();\n  mockService.doStuff(new Callback<String>(){\n    @Override public void success(    String o,    Response response){\n      throw new AssertionError();\n    }\n    @Override public void failure(    RetrofitError error){\n      errorRef.set(error);\n    }\n  }\n);\n  verify(httpExecutor).execute(any(Runnable.class));\n  verify(callbackExecutor).execute(any(Runnable.class));\n  RetrofitError error=errorRef.get();\n  assertThat(error.getKind()).isEqualTo(RetrofitError.Kind.NETWORK);\n  assertThat(error.getCause()).hasMessage(\"Mock network error!\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 167,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 250,
        "startColumnNumber" : 4,
        "endLineNumber" : 250,
        "endColumnNumber" : 98
      },
      "nodeContext" : "AsyncExample mockService=mockRestAdapter.create(AsyncExample.class,new MockAsyncExample());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<retrofit.MockRestAdapterTest.AsyncExample>"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 250,
    "startColumnNumber" : 54,
    "endLineNumber" : 250,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ ]
}