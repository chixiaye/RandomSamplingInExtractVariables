{
  "id" : 484,
  "expression" : "it.next()",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/BlockingOperatorToIteratorTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "it.next()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 36,
      "startColumnNumber" : 28,
      "endLineNumber" : 36,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertEquals(\"one\",it.next())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(\"one\",it.next());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 448,
        "startLineNumber" : 30,
        "startColumnNumber" : 33,
        "endLineNumber" : 46,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Flowable<String> obs=Flowable.just(\"one\",\"two\",\"three\");\n  Iterator<String> it=obs.toBlocking().iterator();\n  assertEquals(true,it.hasNext());\n  assertEquals(\"one\",it.next());\n  assertEquals(true,it.hasNext());\n  assertEquals(\"two\",it.next());\n  assertEquals(true,it.hasNext());\n  assertEquals(\"three\",it.next());\n  assertEquals(false,it.hasNext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 488,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testToIterator(){\n  Flowable<String> obs=Flowable.just(\"one\",\"two\",\"three\");\n  Iterator<String> it=obs.toBlocking().iterator();\n  assertEquals(true,it.hasNext());\n  assertEquals(\"one\",it.next());\n  assertEquals(true,it.hasNext());\n  assertEquals(\"two\",it.next());\n  assertEquals(true,it.hasNext());\n  assertEquals(\"three\",it.next());\n  assertEquals(false,it.hasNext());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 83,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(\"one\",it.next());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "it.next()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 39,
      "startColumnNumber" : 28,
      "endLineNumber" : 39,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertEquals(\"two\",it.next())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(\"two\",it.next());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 448,
        "startLineNumber" : 30,
        "startColumnNumber" : 33,
        "endLineNumber" : 46,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Flowable<String> obs=Flowable.just(\"one\",\"two\",\"three\");\n  Iterator<String> it=obs.toBlocking().iterator();\n  assertEquals(true,it.hasNext());\n  assertEquals(\"one\",it.next());\n  assertEquals(true,it.hasNext());\n  assertEquals(\"two\",it.next());\n  assertEquals(true,it.hasNext());\n  assertEquals(\"three\",it.next());\n  assertEquals(false,it.hasNext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 488,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testToIterator(){\n  Flowable<String> obs=Flowable.just(\"one\",\"two\",\"three\");\n  Iterator<String> it=obs.toBlocking().iterator();\n  assertEquals(true,it.hasNext());\n  assertEquals(\"one\",it.next());\n  assertEquals(true,it.hasNext());\n  assertEquals(\"two\",it.next());\n  assertEquals(true,it.hasNext());\n  assertEquals(\"three\",it.next());\n  assertEquals(false,it.hasNext());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 83,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(\"two\",it.next());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "it.next()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 42,
      "startColumnNumber" : 30,
      "endLineNumber" : 42,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(\"three\",it.next())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertEquals(\"three\",it.next());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 448,
        "startLineNumber" : 30,
        "startColumnNumber" : 33,
        "endLineNumber" : 46,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Flowable<String> obs=Flowable.just(\"one\",\"two\",\"three\");\n  Iterator<String> it=obs.toBlocking().iterator();\n  assertEquals(true,it.hasNext());\n  assertEquals(\"one\",it.next());\n  assertEquals(true,it.hasNext());\n  assertEquals(\"two\",it.next());\n  assertEquals(true,it.hasNext());\n  assertEquals(\"three\",it.next());\n  assertEquals(false,it.hasNext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 488,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testToIterator(){\n  Flowable<String> obs=Flowable.just(\"one\",\"two\",\"three\");\n  Iterator<String> it=obs.toBlocking().iterator();\n  assertEquals(true,it.hasNext());\n  assertEquals(\"one\",it.next());\n  assertEquals(true,it.hasNext());\n  assertEquals(\"two\",it.next());\n  assertEquals(true,it.hasNext());\n  assertEquals(\"three\",it.next());\n  assertEquals(false,it.hasNext());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 83,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertEquals(\"three\",it.next());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 36,
    "startColumnNumber" : 28,
    "endLineNumber" : 36,
    "endColumnNumber" : 37
  }, {
    "charLength" : 9,
    "startLineNumber" : 39,
    "startColumnNumber" : 28,
    "endLineNumber" : 39,
    "endColumnNumber" : 37
  }, {
    "charLength" : 9,
    "startLineNumber" : 42,
    "startColumnNumber" : 30,
    "endLineNumber" : 42,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}