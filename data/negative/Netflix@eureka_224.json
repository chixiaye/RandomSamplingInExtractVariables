{
  "id" : 224,
  "expression" : "config",
  "projectName" : "Netflix@eureka",
  "commitID" : "c3164d48451a4a7290cc39e279169e748fa7a2b7",
  "filePath" : "eureka-client/src/main/java/com/netflix/appinfo/ApplicationInfoManager.java",
  "occurrences" : 24,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 60,
      "startColumnNumber" : 26,
      "endLineNumber" : 60,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 32
      },
      "nodeContext" : "this.config=config",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 33
      },
      "nodeContext" : "this.config=config;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 33
      },
      "nodeContext" : "this.config=config;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 66,
      "startColumnNumber" : 20,
      "endLineNumber" : 66,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 66,
        "startColumnNumber" : 20,
        "endLineNumber" : 66,
        "endColumnNumber" : 61
      },
      "nodeContext" : "config.getLeaseRenewalIntervalInSeconds()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 63,
        "startColumnNumber" : 49,
        "endLineNumber" : 66,
        "endColumnNumber" : 62
      },
      "nodeContext" : "LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 63,
        "startColumnNumber" : 49,
        "endLineNumber" : 68,
        "endColumnNumber" : 73
      },
      "nodeContext" : "LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 63,
        "startColumnNumber" : 30,
        "endLineNumber" : 68,
        "endColumnNumber" : 73
      },
      "nodeContext" : "leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 74
      },
      "nodeContext" : "LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 66,
        "startColumnNumber" : 20,
        "endLineNumber" : 66,
        "endColumnNumber" : 61
      },
      "nodeContext" : "config.getLeaseRenewalIntervalInSeconds()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 68,
      "startColumnNumber" : 28,
      "endLineNumber" : 68,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 68,
        "startColumnNumber" : 28,
        "endLineNumber" : 68,
        "endColumnNumber" : 72
      },
      "nodeContext" : "config.getLeaseExpirationDurationInSeconds()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 63,
        "startColumnNumber" : 49,
        "endLineNumber" : 68,
        "endColumnNumber" : 73
      },
      "nodeContext" : "LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 63,
        "startColumnNumber" : 30,
        "endLineNumber" : 68,
        "endColumnNumber" : 73
      },
      "nodeContext" : "leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 74
      },
      "nodeContext" : "LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 68,
        "startColumnNumber" : 28,
        "endLineNumber" : 68,
        "endColumnNumber" : 72
      },
      "nodeContext" : "config.getLeaseExpirationDurationInSeconds()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 74,
      "startColumnNumber" : 33,
      "endLineNumber" : 74,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 74,
        "startColumnNumber" : 33,
        "endLineNumber" : 74,
        "endColumnNumber" : 54
      },
      "nodeContext" : "config.getNamespace()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 55
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 58
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 51
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 47
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 389,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 440,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 50
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 71
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 55
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 58,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 67
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 746,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 71,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 55
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 75,
      "startColumnNumber" : 24,
      "endLineNumber" : 75,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 75,
        "startColumnNumber" : 24,
        "endLineNumber" : 75,
        "endColumnNumber" : 43
      },
      "nodeContext" : "config.getAppname()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 58
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 51
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 47
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 389,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 440,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 50
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 71
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 55
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 58,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 67
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 746,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 71,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 75,
        "startColumnNumber" : 24,
        "endLineNumber" : 75,
        "endColumnNumber" : 43
      },
      "nodeContext" : "config.getAppname()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 76,
      "startColumnNumber" : 31,
      "endLineNumber" : 76,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 76,
        "startColumnNumber" : 31,
        "endLineNumber" : 76,
        "endColumnNumber" : 57
      },
      "nodeContext" : "config.getDataCenterInfo()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 58
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 51
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 47
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 389,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 440,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 50
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 71
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 55
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 58,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 67
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 746,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 71,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 76,
        "startColumnNumber" : 31,
        "endLineNumber" : 76,
        "endColumnNumber" : 57
      },
      "nodeContext" : "config.getDataCenterInfo()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 77,
      "startColumnNumber" : 23,
      "endLineNumber" : 77,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 77,
        "startColumnNumber" : 23,
        "endLineNumber" : 77,
        "endColumnNumber" : 44
      },
      "nodeContext" : "config.getIpAddress()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 51
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 47
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 389,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 440,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 50
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 71
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 55
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 58,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 67
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 746,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 71,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 77,
        "startColumnNumber" : 23,
        "endLineNumber" : 77,
        "endColumnNumber" : 44
      },
      "nodeContext" : "config.getIpAddress()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 78,
      "startColumnNumber" : 25,
      "endLineNumber" : 78,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 78,
        "startColumnNumber" : 25,
        "endLineNumber" : 78,
        "endColumnNumber" : 50
      },
      "nodeContext" : "config.getHostName(false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 51
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 47
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 389,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 440,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 50
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 71
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 55
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 58,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 67
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 746,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 71,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 78,
        "startColumnNumber" : 25,
        "endLineNumber" : 78,
        "endColumnNumber" : 50
      },
      "nodeContext" : "config.getHostName(false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 79,
      "startColumnNumber" : 21,
      "endLineNumber" : 79,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 79,
        "startColumnNumber" : 21,
        "endLineNumber" : 79,
        "endColumnNumber" : 46
      },
      "nodeContext" : "config.getNonSecurePort()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 47
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 389,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 440,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 50
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 71
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 55
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 58,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 67
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 746,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 71,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 79,
        "startColumnNumber" : 21,
        "endLineNumber" : 79,
        "endColumnNumber" : 46
      },
      "nodeContext" : "config.getNonSecurePort()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 81,
      "startColumnNumber" : 20,
      "endLineNumber" : 81,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 81,
        "startColumnNumber" : 20,
        "endLineNumber" : 81,
        "endColumnNumber" : 51
      },
      "nodeContext" : "config.isNonSecurePortEnabled()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 389,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 440,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 50
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 71
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 55
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 58,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 67
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 746,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 71,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 81,
        "startColumnNumber" : 20,
        "endLineNumber" : 81,
        "endColumnNumber" : 51
      },
      "nodeContext" : "config.isNonSecurePortEnabled()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 82,
      "startColumnNumber" : 27,
      "endLineNumber" : 82,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 82,
        "startColumnNumber" : 27,
        "endLineNumber" : 82,
        "endColumnNumber" : 49
      },
      "nodeContext" : "config.getSecurePort()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 440,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 50
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 71
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 55
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 58,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 67
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 746,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 71,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 82,
        "startColumnNumber" : 27,
        "endLineNumber" : 82,
        "endColumnNumber" : 49
      },
      "nodeContext" : "config.getSecurePort()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 83,
      "startColumnNumber" : 41,
      "endLineNumber" : 83,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 83,
        "startColumnNumber" : 41,
        "endLineNumber" : 83,
        "endColumnNumber" : 70
      },
      "nodeContext" : "config.getSecurePortEnabled()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 71
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 55
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 58,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 67
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 746,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 71,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 83,
        "startColumnNumber" : 41,
        "endLineNumber" : 83,
        "endColumnNumber" : 70
      },
      "nodeContext" : "config.getSecurePortEnabled()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 84,
      "startColumnNumber" : 27,
      "endLineNumber" : 84,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 84,
        "startColumnNumber" : 27,
        "endLineNumber" : 84,
        "endColumnNumber" : 54
      },
      "nodeContext" : "config.getVirtualHostName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 55
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 58,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 67
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 746,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 71,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 84,
        "startColumnNumber" : 27,
        "endLineNumber" : 84,
        "endColumnNumber" : 54
      },
      "nodeContext" : "config.getVirtualHostName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 85,
      "startColumnNumber" : 33,
      "endLineNumber" : 85,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 85,
        "startColumnNumber" : 33,
        "endLineNumber" : 85,
        "endColumnNumber" : 66
      },
      "nodeContext" : "config.getSecureVirtualHostName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 67
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 746,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 71,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 85,
        "startColumnNumber" : 33,
        "endLineNumber" : 85,
        "endColumnNumber" : 66
      },
      "nodeContext" : "config.getSecureVirtualHostName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 86,
      "startColumnNumber" : 28,
      "endLineNumber" : 86,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 86,
        "startColumnNumber" : 28,
        "endLineNumber" : 86,
        "endColumnNumber" : 55
      },
      "nodeContext" : "config.getHomePageUrlPath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 746,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 71,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 86,
        "startColumnNumber" : 28,
        "endLineNumber" : 86,
        "endColumnNumber" : 55
      },
      "nodeContext" : "config.getHomePageUrlPath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 87,
      "startColumnNumber" : 28,
      "endLineNumber" : 87,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 87,
        "startColumnNumber" : 28,
        "endLineNumber" : 87,
        "endColumnNumber" : 51
      },
      "nodeContext" : "config.getHomePageUrl()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 746,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 71,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 87,
        "startColumnNumber" : 28,
        "endLineNumber" : 87,
        "endColumnNumber" : 51
      },
      "nodeContext" : "config.getHomePageUrl()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 88,
      "startColumnNumber" : 30,
      "endLineNumber" : 88,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 88,
        "startColumnNumber" : 30,
        "endLineNumber" : 88,
        "endColumnNumber" : 59
      },
      "nodeContext" : "config.getStatusPageUrlPath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 88,
        "startColumnNumber" : 30,
        "endLineNumber" : 88,
        "endColumnNumber" : 59
      },
      "nodeContext" : "config.getStatusPageUrlPath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 89,
      "startColumnNumber" : 30,
      "endLineNumber" : 89,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 89,
        "startColumnNumber" : 30,
        "endLineNumber" : 89,
        "endColumnNumber" : 55
      },
      "nodeContext" : "config.getStatusPageUrl()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 89,
        "startColumnNumber" : 30,
        "endLineNumber" : 89,
        "endColumnNumber" : 55
      },
      "nodeContext" : "config.getStatusPageUrl()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 90,
      "startColumnNumber" : 32,
      "endLineNumber" : 90,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 90,
        "startColumnNumber" : 32,
        "endLineNumber" : 90,
        "endColumnNumber" : 62
      },
      "nodeContext" : "config.getHealthCheckUrlPath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 90,
        "startColumnNumber" : 32,
        "endLineNumber" : 90,
        "endColumnNumber" : 62
      },
      "nodeContext" : "config.getHealthCheckUrlPath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 91,
      "startColumnNumber" : 32,
      "endLineNumber" : 91,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 91,
        "startColumnNumber" : 32,
        "endLineNumber" : 91,
        "endColumnNumber" : 58
      },
      "nodeContext" : "config.getHealthCheckUrl()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 91,
        "startColumnNumber" : 32,
        "endLineNumber" : 91,
        "endColumnNumber" : 58
      },
      "nodeContext" : "config.getHealthCheckUrl()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 92,
      "startColumnNumber" : 32,
      "endLineNumber" : 92,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 92,
        "startColumnNumber" : 32,
        "endLineNumber" : 92,
        "endColumnNumber" : 64
      },
      "nodeContext" : "config.getSecureHealthCheckUrl()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 92,
        "startColumnNumber" : 32,
        "endLineNumber" : 92,
        "endColumnNumber" : 64
      },
      "nodeContext" : "config.getSecureHealthCheckUrl()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 93,
      "startColumnNumber" : 24,
      "endLineNumber" : 93,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 93,
        "startColumnNumber" : 24,
        "endLineNumber" : 93,
        "endColumnNumber" : 43
      },
      "nodeContext" : "config.getASGName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 44
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 96,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 93,
        "startColumnNumber" : 24,
        "endLineNumber" : 93,
        "endColumnNumber" : 43
      },
      "nodeContext" : "config.getASGName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 96,
      "startColumnNumber" : 17,
      "endLineNumber" : 96,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 96,
        "startColumnNumber" : 17,
        "endLineNumber" : 96,
        "endColumnNumber" : 47
      },
      "nodeContext" : "config.isInstanceEnabledOnit()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 96,
        "startColumnNumber" : 16,
        "endLineNumber" : 96,
        "endColumnNumber" : 47
      },
      "nodeContext" : "!config.isInstanceEnabledOnit()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 575,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!config.isInstanceEnabledOnit()) {\n  InstanceStatus initialStatus=InstanceStatus.STARTING;\n  logger.info(\"Setting initial instance status as: \" + initialStatus);\n  builder.setStatus(initialStatus);\n}\n else {\n  logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 96,
        "startColumnNumber" : 16,
        "endLineNumber" : 96,
        "endColumnNumber" : 47
      },
      "nodeContext" : "!config.isInstanceEnabledOnit()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 107,
      "startColumnNumber" : 54,
      "endLineNumber" : 107,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 107,
        "startColumnNumber" : 54,
        "endLineNumber" : 107,
        "endColumnNumber" : 77
      },
      "nodeContext" : "config.getMetadataMap()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 107,
        "startColumnNumber" : 54,
        "endLineNumber" : 108,
        "endColumnNumber" : 31
      },
      "nodeContext" : "config.getMetadataMap().entrySet()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n  String key=mapEntry.getKey();\n  String value=mapEntry.getValue();\n  builder.add(key,value);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 40,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2987,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.config=config;\n  LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n  InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n  builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n  if (!config.isInstanceEnabledOnit()) {\n    InstanceStatus initialStatus=InstanceStatus.STARTING;\n    logger.info(\"Setting initial instance status as: \" + initialStatus);\n    builder.setStatus(initialStatus);\n  }\n else {\n    logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n  }\n  for (  Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n    String key=mapEntry.getKey();\n    String value=mapEntry.getValue();\n    builder.add(key,value);\n  }\n  instanceInfo=builder.build();\n  instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 241,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3003,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void initComponent(EurekaInstanceConfig config){\n  try {\n    this.config=config;\n    LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDurationInSeconds());\n    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder();\n    builder.setNamespace(config.getNamespace()).setAppName(config.getAppname()).setDataCenterInfo(config.getDataCenterInfo()).setIPAddr(config.getIpAddress()).setHostName(config.getHostName(false)).setPort(config.getNonSecurePort()).enablePort(PortType.UNSECURE,config.isNonSecurePortEnabled()).setSecurePort(config.getSecurePort()).enablePort(PortType.SECURE,config.getSecurePortEnabled()).setVIPAddress(config.getVirtualHostName()).setSecureVIPAddress(config.getSecureVirtualHostName()).setHomePageUrl(config.getHomePageUrlPath(),config.getHomePageUrl()).setStatusPageUrl(config.getStatusPageUrlPath(),config.getStatusPageUrl()).setHealthCheckUrls(config.getHealthCheckUrlPath(),config.getHealthCheckUrl(),config.getSecureHealthCheckUrl()).setASGName(config.getASGName());\n    if (!config.isInstanceEnabledOnit()) {\n      InstanceStatus initialStatus=InstanceStatus.STARTING;\n      logger.info(\"Setting initial instance status as: \" + initialStatus);\n      builder.setStatus(initialStatus);\n    }\n else {\n      logger.info(\"Setting initial instance status as: \" + InstanceStatus.UP + \". This may be too early for the instance to advertise itself as available. \"+ \"You would instead want to control this via a healthcheck handler.\");\n    }\n    for (    Map.Entry<String,String> mapEntry : config.getMetadataMap().entrySet()) {\n      String key=mapEntry.getKey();\n      String value=mapEntry.getValue();\n      builder.add(key,value);\n    }\n    instanceInfo=builder.build();\n    instanceInfo.setLeaseInfo(leaseInfoBuilder.build());\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize ApplicationInfoManager\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 107,
        "startColumnNumber" : 54,
        "endLineNumber" : 107,
        "endColumnNumber" : 77
      },
      "nodeContext" : "config.getMetadataMap()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.appinfo.EurekaInstanceConfig"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 60,
    "startColumnNumber" : 26,
    "endLineNumber" : 60,
    "endColumnNumber" : 32
  }, {
    "charLength" : 6,
    "startLineNumber" : 66,
    "startColumnNumber" : 20,
    "endLineNumber" : 66,
    "endColumnNumber" : 26
  }, {
    "charLength" : 6,
    "startLineNumber" : 68,
    "startColumnNumber" : 28,
    "endLineNumber" : 68,
    "endColumnNumber" : 34
  }, {
    "charLength" : 6,
    "startLineNumber" : 74,
    "startColumnNumber" : 33,
    "endLineNumber" : 74,
    "endColumnNumber" : 39
  }, {
    "charLength" : 6,
    "startLineNumber" : 75,
    "startColumnNumber" : 24,
    "endLineNumber" : 75,
    "endColumnNumber" : 30
  }, {
    "charLength" : 6,
    "startLineNumber" : 76,
    "startColumnNumber" : 31,
    "endLineNumber" : 76,
    "endColumnNumber" : 37
  }, {
    "charLength" : 6,
    "startLineNumber" : 77,
    "startColumnNumber" : 23,
    "endLineNumber" : 77,
    "endColumnNumber" : 29
  }, {
    "charLength" : 6,
    "startLineNumber" : 78,
    "startColumnNumber" : 25,
    "endLineNumber" : 78,
    "endColumnNumber" : 31
  }, {
    "charLength" : 6,
    "startLineNumber" : 79,
    "startColumnNumber" : 21,
    "endLineNumber" : 79,
    "endColumnNumber" : 27
  }, {
    "charLength" : 6,
    "startLineNumber" : 81,
    "startColumnNumber" : 20,
    "endLineNumber" : 81,
    "endColumnNumber" : 26
  }, {
    "charLength" : 6,
    "startLineNumber" : 82,
    "startColumnNumber" : 27,
    "endLineNumber" : 82,
    "endColumnNumber" : 33
  }, {
    "charLength" : 6,
    "startLineNumber" : 83,
    "startColumnNumber" : 41,
    "endLineNumber" : 83,
    "endColumnNumber" : 47
  }, {
    "charLength" : 6,
    "startLineNumber" : 84,
    "startColumnNumber" : 27,
    "endLineNumber" : 84,
    "endColumnNumber" : 33
  }, {
    "charLength" : 6,
    "startLineNumber" : 85,
    "startColumnNumber" : 33,
    "endLineNumber" : 85,
    "endColumnNumber" : 39
  }, {
    "charLength" : 6,
    "startLineNumber" : 86,
    "startColumnNumber" : 28,
    "endLineNumber" : 86,
    "endColumnNumber" : 34
  }, {
    "charLength" : 6,
    "startLineNumber" : 87,
    "startColumnNumber" : 28,
    "endLineNumber" : 87,
    "endColumnNumber" : 34
  }, {
    "charLength" : 6,
    "startLineNumber" : 88,
    "startColumnNumber" : 30,
    "endLineNumber" : 88,
    "endColumnNumber" : 36
  }, {
    "charLength" : 6,
    "startLineNumber" : 89,
    "startColumnNumber" : 30,
    "endLineNumber" : 89,
    "endColumnNumber" : 36
  }, {
    "charLength" : 6,
    "startLineNumber" : 90,
    "startColumnNumber" : 32,
    "endLineNumber" : 90,
    "endColumnNumber" : 38
  }, {
    "charLength" : 6,
    "startLineNumber" : 91,
    "startColumnNumber" : 32,
    "endLineNumber" : 91,
    "endColumnNumber" : 38
  }, {
    "charLength" : 6,
    "startLineNumber" : 92,
    "startColumnNumber" : 32,
    "endLineNumber" : 92,
    "endColumnNumber" : 38
  }, {
    "charLength" : 6,
    "startLineNumber" : 93,
    "startColumnNumber" : 24,
    "endLineNumber" : 93,
    "endColumnNumber" : 30
  }, {
    "charLength" : 6,
    "startLineNumber" : 96,
    "startColumnNumber" : 17,
    "endLineNumber" : 96,
    "endColumnNumber" : 23
  }, {
    "charLength" : 6,
    "startLineNumber" : 107,
    "startColumnNumber" : 54,
    "endLineNumber" : 107,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 17
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 17
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 17
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 11
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 12
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 12
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 13
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 13
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 14
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 14
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 14
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 15
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 17
  }, {
    "firstKey" : 3,
    "secondKey" : 23,
    "layout" : 17
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 16
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 16
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 16
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 11
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 11
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 12
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 12
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 13
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 13
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 13
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 14
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 16
  }, {
    "firstKey" : 4,
    "secondKey" : 23,
    "layout" : 16
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 15
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 15
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 15
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 10
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 10
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 11
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 11
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 12
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 12
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 12
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 13
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 15
  }, {
    "firstKey" : 5,
    "secondKey" : 23,
    "layout" : 15
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 14
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 14
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 14
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 10
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 10
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 12
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 14
  }, {
    "firstKey" : 6,
    "secondKey" : 23,
    "layout" : 14
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 13
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 13
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 13
  }, {
    "firstKey" : 7,
    "secondKey" : 23,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 12
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 12
  }, {
    "firstKey" : 8,
    "secondKey" : 23,
    "layout" : 12
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 11
  }, {
    "firstKey" : 9,
    "secondKey" : 23,
    "layout" : 11
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 10
  }, {
    "firstKey" : 10,
    "secondKey" : 23,
    "layout" : 10
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 22,
    "layout" : 3
  } ]
}