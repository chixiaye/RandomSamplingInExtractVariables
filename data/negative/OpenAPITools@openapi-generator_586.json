{
  "id" : 586,
  "expression" : "languageSpecificPrimitives.contains(inner)",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/CppPistacheServerCodegen.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "languageSpecificPrimitives.contains(inner)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 456,
      "startColumnNumber" : 17,
      "endLineNumber" : 456,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 456,
        "startColumnNumber" : 16,
        "endLineNumber" : 456,
        "endColumnNumber" : 59
      },
      "nodeContext" : "!languageSpecificPrimitives.contains(inner)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 456,
        "startColumnNumber" : 12,
        "endLineNumber" : 458,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!languageSpecificPrimitives.contains(inner)) {\n  inner=\"std::shared_ptr<\" + inner + \">\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 453,
        "startColumnNumber" : 48,
        "endLineNumber" : 460,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 489,
        "startLineNumber" : 453,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 668,
        "startLineNumber" : 450,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 894,
        "startLineNumber" : 444,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1403,
        "startLineNumber" : 430,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2367,
        "startLineNumber" : 408,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 224,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2592,
        "startLineNumber" : 402,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 249,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2813,
        "startLineNumber" : 396,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 274,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3024,
        "startLineNumber" : 390,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 296,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3247,
        "startLineNumber" : 384,
        "startColumnNumber" : 8,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 383,
        "startColumnNumber" : 43,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3343,
        "startLineNumber" : 382,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String toDefaultValue(Schema p){\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 335,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 456,
        "startColumnNumber" : 16,
        "endLineNumber" : 456,
        "endColumnNumber" : 59
      },
      "nodeContext" : "!languageSpecificPrimitives.contains(inner)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 456,
    "startColumnNumber" : 17,
    "endLineNumber" : 456,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}