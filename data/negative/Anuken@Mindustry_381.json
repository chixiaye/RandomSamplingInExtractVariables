{
  "id" : 381,
  "expression" : "group",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "ed93fa45d3518532cc0db2b857a2413a81430212",
  "filePath" : "core/src/mindustry/game/Waves.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "group",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 401,
      "startColumnNumber" : 12,
      "endLineNumber" : 401,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 401,
        "startColumnNumber" : 12,
        "endLineNumber" : 401,
        "endColumnNumber" : 23
      },
      "nodeContext" : "group.begin",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 401,
        "startColumnNumber" : 12,
        "endLineNumber" : 401,
        "endColumnNumber" : 32
      },
      "nodeContext" : "group.begin-=shift",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 401,
        "startColumnNumber" : 12,
        "endLineNumber" : 401,
        "endColumnNumber" : 33
      },
      "nodeContext" : "group.begin-=shift;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 400,
        "startColumnNumber" : 35,
        "endLineNumber" : 403,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  group.begin-=shift;\n  group.end-=shift;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 400,
        "startColumnNumber" : 8,
        "endLineNumber" : 403,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (SpawnGroup group : out) {\n  group.begin-=shift;\n  group.end-=shift;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5093,
        "startLineNumber" : 262,
        "startColumnNumber" : 71,
        "endLineNumber" : 406,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  UnitType[][] species={{dagger,mace,fortress,scepter,reign},{nova,pulsar,quasar,vela,corvus},{crawler,atrax,spiroct,arkyid,toxopid},{flare,horizon,rand.chance(0.2) && difficulty > 0.5 ? poly : zenith,rand.chance(0.5) ? quad : antumbra,rand.chance(0.1) ? quad : eclipse}};\n  Seq<SpawnGroup> out=new Seq<>();\n  int cap=150;\n  float shieldStart=30, shieldsPerWave=20 + difficulty * 30f;\n  float[] scaling={1,1,1.5f,3f,4f};\n  Intc createProgression=start -> {\n    UnitType[] curSpecies=Structs.random(species);\n    int curTier=0;\n    for (int i=start; i < cap; ) {\n      int f=i;\n      int next=rand.random(8,16) + curTier * 4;\n      float shieldAmount=Math.max((i - shieldStart) * shieldsPerWave,0);\n      int space=start == 0 ? 1 : rand.random(1,2);\n      int ctier=curTier;\n      out.add(new SpawnGroup(curSpecies[Math.min(curTier,curSpecies.length - 1)]){\n{\n          unitAmount=f == start ? 1 : 6 / (int)scaling[ctier];\n          begin=f;\n          end=f + next >= cap ? never : f + next;\n          max=14;\n          unitScaling=(difficulty < 0.4f ? rand.random(2f,4f) : rand.random(1f,3f)) * scaling[ctier];\n          shields=shieldAmount;\n          shieldScaling=shieldsPerWave;\n          spacing=space;\n        }\n      }\n);\n      out.add(new SpawnGroup(curSpecies[Math.min(curTier,curSpecies.length - 1)]){\n{\n          unitAmount=3 / (int)scaling[ctier];\n          begin=f + next - 1;\n          end=f + next + rand.random(6,10);\n          max=6;\n          unitScaling=rand.random(1f,2f);\n          spacing=rand.random(2,4);\n          shields=shieldAmount / 2f;\n          shieldScaling=shieldsPerWave;\n        }\n      }\n);\n      i+=next + 1;\n      if (curTier < 3 || rand.chance(0.05)) {\n        curTier++;\n      }\n      curTier=Math.min(curTier,3);\n      if (rand.chance(0.3)) {\n        curSpecies=Structs.random(species);\n      }\n    }\n  }\n;\n  createProgression.get(0);\n  int step=5 + rand.random(5);\n  while (step <= cap) {\n    createProgression.get(step);\n    step+=(int)(rand.random(15,30) * Mathf.lerp(1f,0.5f,difficulty));\n  }\n  int bossWave=(int)(rand.random(50,70) * Mathf.lerp(1f,0.6f,difficulty));\n  int bossSpacing=(int)(rand.random(25,40) * Mathf.lerp(1f,0.6f,difficulty));\n  int bossTier=difficulty < 0.5 ? 4 : 5;\n  out.add(new SpawnGroup(Structs.random(species)[bossTier]){\n{\n      unitAmount=1;\n      begin=bossWave;\n      spacing=bossSpacing;\n      end=never;\n      max=16;\n      unitScaling=bossSpacing;\n      shieldScaling=shieldsPerWave;\n      effect=StatusEffects.boss;\n    }\n  }\n);\n  out.add(new SpawnGroup(Structs.random(species)[bossTier]){\n{\n      unitAmount=1;\n      begin=bossWave + rand.random(3,5) * bossSpacing;\n      spacing=bossSpacing;\n      end=never;\n      max=16;\n      unitScaling=bossSpacing;\n      shieldScaling=shieldsPerWave;\n      effect=StatusEffects.boss;\n    }\n  }\n);\n  int finalBossStart=120 + rand.random(30);\n  out.add(new SpawnGroup(Structs.random(species)[bossTier]){\n{\n      unitAmount=1;\n      begin=finalBossStart;\n      spacing=bossSpacing / 2;\n      end=never;\n      unitScaling=bossSpacing;\n      shields=500;\n      shieldScaling=shieldsPerWave * 4;\n      effect=StatusEffects.boss;\n    }\n  }\n);\n  out.add(new SpawnGroup(Structs.random(species)[bossTier]){\n{\n      unitAmount=1;\n      begin=finalBossStart + 15;\n      spacing=bossSpacing / 2;\n      end=never;\n      unitScaling=bossSpacing;\n      shields=500;\n      shieldScaling=shieldsPerWave * 4;\n      effect=StatusEffects.boss;\n    }\n  }\n);\n  int shift=Math.max((int)(difficulty * 15 - 5),0);\n  for (  SpawnGroup group : out) {\n    group.begin-=shift;\n    group.end-=shift;\n  }\n  return out;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 750,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5160,
        "startLineNumber" : 262,
        "startColumnNumber" : 4,
        "endLineNumber" : 406,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static Seq<SpawnGroup> generate(Rand rand,float difficulty){\n  UnitType[][] species={{dagger,mace,fortress,scepter,reign},{nova,pulsar,quasar,vela,corvus},{crawler,atrax,spiroct,arkyid,toxopid},{flare,horizon,rand.chance(0.2) && difficulty > 0.5 ? poly : zenith,rand.chance(0.5) ? quad : antumbra,rand.chance(0.1) ? quad : eclipse}};\n  Seq<SpawnGroup> out=new Seq<>();\n  int cap=150;\n  float shieldStart=30, shieldsPerWave=20 + difficulty * 30f;\n  float[] scaling={1,1,1.5f,3f,4f};\n  Intc createProgression=start -> {\n    UnitType[] curSpecies=Structs.random(species);\n    int curTier=0;\n    for (int i=start; i < cap; ) {\n      int f=i;\n      int next=rand.random(8,16) + curTier * 4;\n      float shieldAmount=Math.max((i - shieldStart) * shieldsPerWave,0);\n      int space=start == 0 ? 1 : rand.random(1,2);\n      int ctier=curTier;\n      out.add(new SpawnGroup(curSpecies[Math.min(curTier,curSpecies.length - 1)]){\n{\n          unitAmount=f == start ? 1 : 6 / (int)scaling[ctier];\n          begin=f;\n          end=f + next >= cap ? never : f + next;\n          max=14;\n          unitScaling=(difficulty < 0.4f ? rand.random(2f,4f) : rand.random(1f,3f)) * scaling[ctier];\n          shields=shieldAmount;\n          shieldScaling=shieldsPerWave;\n          spacing=space;\n        }\n      }\n);\n      out.add(new SpawnGroup(curSpecies[Math.min(curTier,curSpecies.length - 1)]){\n{\n          unitAmount=3 / (int)scaling[ctier];\n          begin=f + next - 1;\n          end=f + next + rand.random(6,10);\n          max=6;\n          unitScaling=rand.random(1f,2f);\n          spacing=rand.random(2,4);\n          shields=shieldAmount / 2f;\n          shieldScaling=shieldsPerWave;\n        }\n      }\n);\n      i+=next + 1;\n      if (curTier < 3 || rand.chance(0.05)) {\n        curTier++;\n      }\n      curTier=Math.min(curTier,3);\n      if (rand.chance(0.3)) {\n        curSpecies=Structs.random(species);\n      }\n    }\n  }\n;\n  createProgression.get(0);\n  int step=5 + rand.random(5);\n  while (step <= cap) {\n    createProgression.get(step);\n    step+=(int)(rand.random(15,30) * Mathf.lerp(1f,0.5f,difficulty));\n  }\n  int bossWave=(int)(rand.random(50,70) * Mathf.lerp(1f,0.6f,difficulty));\n  int bossSpacing=(int)(rand.random(25,40) * Mathf.lerp(1f,0.6f,difficulty));\n  int bossTier=difficulty < 0.5 ? 4 : 5;\n  out.add(new SpawnGroup(Structs.random(species)[bossTier]){\n{\n      unitAmount=1;\n      begin=bossWave;\n      spacing=bossSpacing;\n      end=never;\n      max=16;\n      unitScaling=bossSpacing;\n      shieldScaling=shieldsPerWave;\n      effect=StatusEffects.boss;\n    }\n  }\n);\n  out.add(new SpawnGroup(Structs.random(species)[bossTier]){\n{\n      unitAmount=1;\n      begin=bossWave + rand.random(3,5) * bossSpacing;\n      spacing=bossSpacing;\n      end=never;\n      max=16;\n      unitScaling=bossSpacing;\n      shieldScaling=shieldsPerWave;\n      effect=StatusEffects.boss;\n    }\n  }\n);\n  int finalBossStart=120 + rand.random(30);\n  out.add(new SpawnGroup(Structs.random(species)[bossTier]){\n{\n      unitAmount=1;\n      begin=finalBossStart;\n      spacing=bossSpacing / 2;\n      end=never;\n      unitScaling=bossSpacing;\n      shields=500;\n      shieldScaling=shieldsPerWave * 4;\n      effect=StatusEffects.boss;\n    }\n  }\n);\n  out.add(new SpawnGroup(Structs.random(species)[bossTier]){\n{\n      unitAmount=1;\n      begin=finalBossStart + 15;\n      spacing=bossSpacing / 2;\n      end=never;\n      unitScaling=bossSpacing;\n      shields=500;\n      shieldScaling=shieldsPerWave * 4;\n      effect=StatusEffects.boss;\n    }\n  }\n);\n  int shift=Math.max((int)(difficulty * 15 - 5),0);\n  for (  SpawnGroup group : out) {\n    group.begin-=shift;\n    group.end-=shift;\n  }\n  return out;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 766,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 401,
        "startColumnNumber" : 12,
        "endLineNumber" : 401,
        "endColumnNumber" : 33
      },
      "nodeContext" : "group.begin-=shift;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.game.SpawnGroup"
  }, {
    "nodeContext" : "group",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 402,
      "startColumnNumber" : 12,
      "endLineNumber" : 402,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 402,
        "startColumnNumber" : 12,
        "endLineNumber" : 402,
        "endColumnNumber" : 21
      },
      "nodeContext" : "group.end",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 402,
        "startColumnNumber" : 12,
        "endLineNumber" : 402,
        "endColumnNumber" : 30
      },
      "nodeContext" : "group.end-=shift",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 402,
        "startColumnNumber" : 12,
        "endLineNumber" : 402,
        "endColumnNumber" : 31
      },
      "nodeContext" : "group.end-=shift;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 400,
        "startColumnNumber" : 35,
        "endLineNumber" : 403,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  group.begin-=shift;\n  group.end-=shift;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 400,
        "startColumnNumber" : 8,
        "endLineNumber" : 403,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (SpawnGroup group : out) {\n  group.begin-=shift;\n  group.end-=shift;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5093,
        "startLineNumber" : 262,
        "startColumnNumber" : 71,
        "endLineNumber" : 406,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  UnitType[][] species={{dagger,mace,fortress,scepter,reign},{nova,pulsar,quasar,vela,corvus},{crawler,atrax,spiroct,arkyid,toxopid},{flare,horizon,rand.chance(0.2) && difficulty > 0.5 ? poly : zenith,rand.chance(0.5) ? quad : antumbra,rand.chance(0.1) ? quad : eclipse}};\n  Seq<SpawnGroup> out=new Seq<>();\n  int cap=150;\n  float shieldStart=30, shieldsPerWave=20 + difficulty * 30f;\n  float[] scaling={1,1,1.5f,3f,4f};\n  Intc createProgression=start -> {\n    UnitType[] curSpecies=Structs.random(species);\n    int curTier=0;\n    for (int i=start; i < cap; ) {\n      int f=i;\n      int next=rand.random(8,16) + curTier * 4;\n      float shieldAmount=Math.max((i - shieldStart) * shieldsPerWave,0);\n      int space=start == 0 ? 1 : rand.random(1,2);\n      int ctier=curTier;\n      out.add(new SpawnGroup(curSpecies[Math.min(curTier,curSpecies.length - 1)]){\n{\n          unitAmount=f == start ? 1 : 6 / (int)scaling[ctier];\n          begin=f;\n          end=f + next >= cap ? never : f + next;\n          max=14;\n          unitScaling=(difficulty < 0.4f ? rand.random(2f,4f) : rand.random(1f,3f)) * scaling[ctier];\n          shields=shieldAmount;\n          shieldScaling=shieldsPerWave;\n          spacing=space;\n        }\n      }\n);\n      out.add(new SpawnGroup(curSpecies[Math.min(curTier,curSpecies.length - 1)]){\n{\n          unitAmount=3 / (int)scaling[ctier];\n          begin=f + next - 1;\n          end=f + next + rand.random(6,10);\n          max=6;\n          unitScaling=rand.random(1f,2f);\n          spacing=rand.random(2,4);\n          shields=shieldAmount / 2f;\n          shieldScaling=shieldsPerWave;\n        }\n      }\n);\n      i+=next + 1;\n      if (curTier < 3 || rand.chance(0.05)) {\n        curTier++;\n      }\n      curTier=Math.min(curTier,3);\n      if (rand.chance(0.3)) {\n        curSpecies=Structs.random(species);\n      }\n    }\n  }\n;\n  createProgression.get(0);\n  int step=5 + rand.random(5);\n  while (step <= cap) {\n    createProgression.get(step);\n    step+=(int)(rand.random(15,30) * Mathf.lerp(1f,0.5f,difficulty));\n  }\n  int bossWave=(int)(rand.random(50,70) * Mathf.lerp(1f,0.6f,difficulty));\n  int bossSpacing=(int)(rand.random(25,40) * Mathf.lerp(1f,0.6f,difficulty));\n  int bossTier=difficulty < 0.5 ? 4 : 5;\n  out.add(new SpawnGroup(Structs.random(species)[bossTier]){\n{\n      unitAmount=1;\n      begin=bossWave;\n      spacing=bossSpacing;\n      end=never;\n      max=16;\n      unitScaling=bossSpacing;\n      shieldScaling=shieldsPerWave;\n      effect=StatusEffects.boss;\n    }\n  }\n);\n  out.add(new SpawnGroup(Structs.random(species)[bossTier]){\n{\n      unitAmount=1;\n      begin=bossWave + rand.random(3,5) * bossSpacing;\n      spacing=bossSpacing;\n      end=never;\n      max=16;\n      unitScaling=bossSpacing;\n      shieldScaling=shieldsPerWave;\n      effect=StatusEffects.boss;\n    }\n  }\n);\n  int finalBossStart=120 + rand.random(30);\n  out.add(new SpawnGroup(Structs.random(species)[bossTier]){\n{\n      unitAmount=1;\n      begin=finalBossStart;\n      spacing=bossSpacing / 2;\n      end=never;\n      unitScaling=bossSpacing;\n      shields=500;\n      shieldScaling=shieldsPerWave * 4;\n      effect=StatusEffects.boss;\n    }\n  }\n);\n  out.add(new SpawnGroup(Structs.random(species)[bossTier]){\n{\n      unitAmount=1;\n      begin=finalBossStart + 15;\n      spacing=bossSpacing / 2;\n      end=never;\n      unitScaling=bossSpacing;\n      shields=500;\n      shieldScaling=shieldsPerWave * 4;\n      effect=StatusEffects.boss;\n    }\n  }\n);\n  int shift=Math.max((int)(difficulty * 15 - 5),0);\n  for (  SpawnGroup group : out) {\n    group.begin-=shift;\n    group.end-=shift;\n  }\n  return out;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 750,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5160,
        "startLineNumber" : 262,
        "startColumnNumber" : 4,
        "endLineNumber" : 406,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static Seq<SpawnGroup> generate(Rand rand,float difficulty){\n  UnitType[][] species={{dagger,mace,fortress,scepter,reign},{nova,pulsar,quasar,vela,corvus},{crawler,atrax,spiroct,arkyid,toxopid},{flare,horizon,rand.chance(0.2) && difficulty > 0.5 ? poly : zenith,rand.chance(0.5) ? quad : antumbra,rand.chance(0.1) ? quad : eclipse}};\n  Seq<SpawnGroup> out=new Seq<>();\n  int cap=150;\n  float shieldStart=30, shieldsPerWave=20 + difficulty * 30f;\n  float[] scaling={1,1,1.5f,3f,4f};\n  Intc createProgression=start -> {\n    UnitType[] curSpecies=Structs.random(species);\n    int curTier=0;\n    for (int i=start; i < cap; ) {\n      int f=i;\n      int next=rand.random(8,16) + curTier * 4;\n      float shieldAmount=Math.max((i - shieldStart) * shieldsPerWave,0);\n      int space=start == 0 ? 1 : rand.random(1,2);\n      int ctier=curTier;\n      out.add(new SpawnGroup(curSpecies[Math.min(curTier,curSpecies.length - 1)]){\n{\n          unitAmount=f == start ? 1 : 6 / (int)scaling[ctier];\n          begin=f;\n          end=f + next >= cap ? never : f + next;\n          max=14;\n          unitScaling=(difficulty < 0.4f ? rand.random(2f,4f) : rand.random(1f,3f)) * scaling[ctier];\n          shields=shieldAmount;\n          shieldScaling=shieldsPerWave;\n          spacing=space;\n        }\n      }\n);\n      out.add(new SpawnGroup(curSpecies[Math.min(curTier,curSpecies.length - 1)]){\n{\n          unitAmount=3 / (int)scaling[ctier];\n          begin=f + next - 1;\n          end=f + next + rand.random(6,10);\n          max=6;\n          unitScaling=rand.random(1f,2f);\n          spacing=rand.random(2,4);\n          shields=shieldAmount / 2f;\n          shieldScaling=shieldsPerWave;\n        }\n      }\n);\n      i+=next + 1;\n      if (curTier < 3 || rand.chance(0.05)) {\n        curTier++;\n      }\n      curTier=Math.min(curTier,3);\n      if (rand.chance(0.3)) {\n        curSpecies=Structs.random(species);\n      }\n    }\n  }\n;\n  createProgression.get(0);\n  int step=5 + rand.random(5);\n  while (step <= cap) {\n    createProgression.get(step);\n    step+=(int)(rand.random(15,30) * Mathf.lerp(1f,0.5f,difficulty));\n  }\n  int bossWave=(int)(rand.random(50,70) * Mathf.lerp(1f,0.6f,difficulty));\n  int bossSpacing=(int)(rand.random(25,40) * Mathf.lerp(1f,0.6f,difficulty));\n  int bossTier=difficulty < 0.5 ? 4 : 5;\n  out.add(new SpawnGroup(Structs.random(species)[bossTier]){\n{\n      unitAmount=1;\n      begin=bossWave;\n      spacing=bossSpacing;\n      end=never;\n      max=16;\n      unitScaling=bossSpacing;\n      shieldScaling=shieldsPerWave;\n      effect=StatusEffects.boss;\n    }\n  }\n);\n  out.add(new SpawnGroup(Structs.random(species)[bossTier]){\n{\n      unitAmount=1;\n      begin=bossWave + rand.random(3,5) * bossSpacing;\n      spacing=bossSpacing;\n      end=never;\n      max=16;\n      unitScaling=bossSpacing;\n      shieldScaling=shieldsPerWave;\n      effect=StatusEffects.boss;\n    }\n  }\n);\n  int finalBossStart=120 + rand.random(30);\n  out.add(new SpawnGroup(Structs.random(species)[bossTier]){\n{\n      unitAmount=1;\n      begin=finalBossStart;\n      spacing=bossSpacing / 2;\n      end=never;\n      unitScaling=bossSpacing;\n      shields=500;\n      shieldScaling=shieldsPerWave * 4;\n      effect=StatusEffects.boss;\n    }\n  }\n);\n  out.add(new SpawnGroup(Structs.random(species)[bossTier]){\n{\n      unitAmount=1;\n      begin=finalBossStart + 15;\n      spacing=bossSpacing / 2;\n      end=never;\n      unitScaling=bossSpacing;\n      shields=500;\n      shieldScaling=shieldsPerWave * 4;\n      effect=StatusEffects.boss;\n    }\n  }\n);\n  int shift=Math.max((int)(difficulty * 15 - 5),0);\n  for (  SpawnGroup group : out) {\n    group.begin-=shift;\n    group.end-=shift;\n  }\n  return out;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 766,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 402,
        "startColumnNumber" : 12,
        "endLineNumber" : 402,
        "endColumnNumber" : 31
      },
      "nodeContext" : "group.end-=shift;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.game.SpawnGroup"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 401,
    "startColumnNumber" : 12,
    "endLineNumber" : 401,
    "endColumnNumber" : 17
  }, {
    "charLength" : 5,
    "startLineNumber" : 402,
    "startColumnNumber" : 12,
    "endLineNumber" : 402,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}