{
  "id" : 201,
  "expression" : "LogicalTableScan",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/planner/plan/rules/logical/PushFilterIntoTableSourceScanRule.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "LogicalTableScan",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 105,
      "startColumnNumber" : 16,
      "endLineNumber" : 105,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 105,
        "startColumnNumber" : 16,
        "endLineNumber" : 105,
        "endColumnNumber" : 93
      },
      "nodeContext" : "LogicalTableScan.create(scan.getCluster(),tableSourceTable,scan.getHints())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 104,
        "startColumnNumber" : 25,
        "endLineNumber" : 105,
        "endColumnNumber" : 93
      },
      "nodeContext" : "newScan=LogicalTableScan.create(scan.getCluster(),tableSourceTable,scan.getHints())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 94
      },
      "nodeContext" : "LogicalTableScan newScan=LogicalTableScan.create(scan.getCluster(),tableSourceTable,scan.getHints());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2047,
        "startLineNumber" : 77,
        "startColumnNumber" : 49,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RelBuilder relBuilder=call.builder();\n  Tuple2<RexNode[],RexNode[]> extractedPredicates=extractPredicates(filter.getInput().getRowType().getFieldNames().toArray(new String[0]),filter.getCondition(),scan,relBuilder.getRexBuilder());\n  RexNode[] convertiblePredicates=extractedPredicates._1;\n  RexNode[] unconvertedPredicates=extractedPredicates._2;\n  if (convertiblePredicates.length == 0) {\n    return;\n  }\n  Tuple2<SupportsFilterPushDown.Result,TableSourceTable> scanAfterPushdownWithResult=resolveFiltersAndCreateTableSourceTable(convertiblePredicates,relOptTable.unwrap(TableSourceTable.class),scan,relBuilder);\n  SupportsFilterPushDown.Result result=scanAfterPushdownWithResult._1;\n  TableSourceTable tableSourceTable=scanAfterPushdownWithResult._2;\n  LogicalTableScan newScan=LogicalTableScan.create(scan.getCluster(),tableSourceTable,scan.getHints());\n  if (result.getRemainingFilters().isEmpty() && unconvertedPredicates.length == 0) {\n    call.transformTo(newScan);\n  }\n else {\n    RexNode remainingCondition=createRemainingCondition(relBuilder,result.getRemainingFilters(),unconvertedPredicates);\n    RexNode simplifiedRemainingCondition=FlinkRexUtil.simplify(relBuilder.getRexBuilder(),remainingCondition,filter.getCluster().getPlanner().getExecutor());\n    Filter newFilter=filter.copy(filter.getTraitSet(),newScan,simplifiedRemainingCondition);\n    call.transformTo(newFilter);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2224,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void pushFilterIntoScan(RelOptRuleCall call,Filter filter,LogicalTableScan scan,FlinkPreparingTableBase relOptTable){\n  RelBuilder relBuilder=call.builder();\n  Tuple2<RexNode[],RexNode[]> extractedPredicates=extractPredicates(filter.getInput().getRowType().getFieldNames().toArray(new String[0]),filter.getCondition(),scan,relBuilder.getRexBuilder());\n  RexNode[] convertiblePredicates=extractedPredicates._1;\n  RexNode[] unconvertedPredicates=extractedPredicates._2;\n  if (convertiblePredicates.length == 0) {\n    return;\n  }\n  Tuple2<SupportsFilterPushDown.Result,TableSourceTable> scanAfterPushdownWithResult=resolveFiltersAndCreateTableSourceTable(convertiblePredicates,relOptTable.unwrap(TableSourceTable.class),scan,relBuilder);\n  SupportsFilterPushDown.Result result=scanAfterPushdownWithResult._1;\n  TableSourceTable tableSourceTable=scanAfterPushdownWithResult._2;\n  LogicalTableScan newScan=LogicalTableScan.create(scan.getCluster(),tableSourceTable,scan.getHints());\n  if (result.getRemainingFilters().isEmpty() && unconvertedPredicates.length == 0) {\n    call.transformTo(newScan);\n  }\n else {\n    RexNode remainingCondition=createRemainingCondition(relBuilder,result.getRemainingFilters(),unconvertedPredicates);\n    RexNode simplifiedRemainingCondition=FlinkRexUtil.simplify(relBuilder.getRexBuilder(),remainingCondition,filter.getCluster().getPlanner().getExecutor());\n    Filter newFilter=filter.copy(filter.getTraitSet(),newScan,simplifiedRemainingCondition);\n    call.transformTo(newFilter);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 219,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 105,
        "startColumnNumber" : 16,
        "endLineNumber" : 105,
        "endColumnNumber" : 93
      },
      "nodeContext" : "LogicalTableScan.create(scan.getCluster(),tableSourceTable,scan.getHints())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.calcite.rel.logical.LogicalTableScan"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 105,
    "startColumnNumber" : 16,
    "endLineNumber" : 105,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}