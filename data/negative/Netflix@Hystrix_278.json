{
  "id" : 278,
  "expression" : "l1",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/test/java/com/netflix/hystrix/util/HystrixTimerTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "l1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 51,
      "startColumnNumber" : 31,
      "endLineNumber" : 51,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 34
      },
      "nodeContext" : "timer.addTimerListener(l1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 35
      },
      "nodeContext" : "timer.addTimerListener(l1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 650,
        "startLineNumber" : 48,
        "startColumnNumber" : 50,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HystrixTimer timer=HystrixTimer.getInstance();\n  TestListener l1=new TestListener(50,\"A\");\n  timer.addTimerListener(l1);\n  TestListener l2=new TestListener(50,\"B\");\n  timer.addTimerListener(l2);\n  try {\n    Thread.sleep(500);\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n  }\n  System.out.println(\"l1 ticks: \" + l1.tickCount.get());\n  System.out.println(\"l2 ticks: \" + l2.tickCount.get());\n  assertTrue(l1.tickCount.get() > 7);\n  assertTrue(l2.tickCount.get() > 7);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 706,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSingleCommandSingleInterval(){\n  HystrixTimer timer=HystrixTimer.getInstance();\n  TestListener l1=new TestListener(50,\"A\");\n  timer.addTimerListener(l1);\n  TestListener l2=new TestListener(50,\"B\");\n  timer.addTimerListener(l2);\n  try {\n    Thread.sleep(500);\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n  }\n  System.out.println(\"l1 ticks: \" + l1.tickCount.get());\n  System.out.println(\"l2 ticks: \" + l2.tickCount.get());\n  assertTrue(l1.tickCount.get() > 7);\n  assertTrue(l2.tickCount.get() > 7);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 35
      },
      "nodeContext" : "timer.addTimerListener(l1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.hystrix.util.HystrixTimerTest.TestListener"
  }, {
    "nodeContext" : "l1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 63,
      "startColumnNumber" : 42,
      "endLineNumber" : 63,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 63,
        "startColumnNumber" : 42,
        "endLineNumber" : 63,
        "endColumnNumber" : 54
      },
      "nodeContext" : "l1.tickCount",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 63,
        "startColumnNumber" : 42,
        "endLineNumber" : 63,
        "endColumnNumber" : 60
      },
      "nodeContext" : "l1.tickCount.get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 63,
        "startColumnNumber" : 27,
        "endLineNumber" : 63,
        "endColumnNumber" : 60
      },
      "nodeContext" : "\"l1 ticks: \" + l1.tickCount.get()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 61
      },
      "nodeContext" : "System.out.println(\"l1 ticks: \" + l1.tickCount.get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 62
      },
      "nodeContext" : "System.out.println(\"l1 ticks: \" + l1.tickCount.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 650,
        "startLineNumber" : 48,
        "startColumnNumber" : 50,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HystrixTimer timer=HystrixTimer.getInstance();\n  TestListener l1=new TestListener(50,\"A\");\n  timer.addTimerListener(l1);\n  TestListener l2=new TestListener(50,\"B\");\n  timer.addTimerListener(l2);\n  try {\n    Thread.sleep(500);\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n  }\n  System.out.println(\"l1 ticks: \" + l1.tickCount.get());\n  System.out.println(\"l2 ticks: \" + l2.tickCount.get());\n  assertTrue(l1.tickCount.get() > 7);\n  assertTrue(l2.tickCount.get() > 7);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 706,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSingleCommandSingleInterval(){\n  HystrixTimer timer=HystrixTimer.getInstance();\n  TestListener l1=new TestListener(50,\"A\");\n  timer.addTimerListener(l1);\n  TestListener l2=new TestListener(50,\"B\");\n  timer.addTimerListener(l2);\n  try {\n    Thread.sleep(500);\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n  }\n  System.out.println(\"l1 ticks: \" + l1.tickCount.get());\n  System.out.println(\"l2 ticks: \" + l2.tickCount.get());\n  assertTrue(l1.tickCount.get() > 7);\n  assertTrue(l2.tickCount.get() > 7);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 62
      },
      "nodeContext" : "System.out.println(\"l1 ticks: \" + l1.tickCount.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.netflix.hystrix.util.HystrixTimerTest.TestListener"
  }, {
    "nodeContext" : "l1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 65,
      "startColumnNumber" : 19,
      "endLineNumber" : 65,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 65,
        "startColumnNumber" : 19,
        "endLineNumber" : 65,
        "endColumnNumber" : 31
      },
      "nodeContext" : "l1.tickCount",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 65,
        "startColumnNumber" : 19,
        "endLineNumber" : 65,
        "endColumnNumber" : 37
      },
      "nodeContext" : "l1.tickCount.get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 65,
        "startColumnNumber" : 19,
        "endLineNumber" : 65,
        "endColumnNumber" : 41
      },
      "nodeContext" : "l1.tickCount.get() > 7",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 42
      },
      "nodeContext" : "assertTrue(l1.tickCount.get() > 7)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertTrue(l1.tickCount.get() > 7);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 650,
        "startLineNumber" : 48,
        "startColumnNumber" : 50,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HystrixTimer timer=HystrixTimer.getInstance();\n  TestListener l1=new TestListener(50,\"A\");\n  timer.addTimerListener(l1);\n  TestListener l2=new TestListener(50,\"B\");\n  timer.addTimerListener(l2);\n  try {\n    Thread.sleep(500);\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n  }\n  System.out.println(\"l1 ticks: \" + l1.tickCount.get());\n  System.out.println(\"l2 ticks: \" + l2.tickCount.get());\n  assertTrue(l1.tickCount.get() > 7);\n  assertTrue(l2.tickCount.get() > 7);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 706,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSingleCommandSingleInterval(){\n  HystrixTimer timer=HystrixTimer.getInstance();\n  TestListener l1=new TestListener(50,\"A\");\n  timer.addTimerListener(l1);\n  TestListener l2=new TestListener(50,\"B\");\n  timer.addTimerListener(l2);\n  try {\n    Thread.sleep(500);\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n  }\n  System.out.println(\"l1 ticks: \" + l1.tickCount.get());\n  System.out.println(\"l2 ticks: \" + l2.tickCount.get());\n  assertTrue(l1.tickCount.get() > 7);\n  assertTrue(l2.tickCount.get() > 7);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertTrue(l1.tickCount.get() > 7);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.netflix.hystrix.util.HystrixTimerTest.TestListener"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 51,
    "startColumnNumber" : 31,
    "endLineNumber" : 51,
    "endColumnNumber" : 33
  }, {
    "charLength" : 2,
    "startLineNumber" : 63,
    "startColumnNumber" : 42,
    "endLineNumber" : 63,
    "endColumnNumber" : 44
  }, {
    "charLength" : 2,
    "startLineNumber" : 65,
    "startColumnNumber" : 19,
    "endLineNumber" : 65,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  } ]
}