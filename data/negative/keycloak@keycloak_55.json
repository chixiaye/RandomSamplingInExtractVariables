{
  "id" : 55,
  "expression" : "2",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/distribution/downloads/src/main/java/CopyDependencies.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "2",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 15,
      "startColumnNumber" : 30,
      "endLineNumber" : 15,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 15,
        "startColumnNumber" : 25,
        "endLineNumber" : 15,
        "endColumnNumber" : 32
      },
      "nodeContext" : "args[2]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 15,
        "startColumnNumber" : 15,
        "endLineNumber" : 15,
        "endColumnNumber" : 32
      },
      "nodeContext" : "version=args[2]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 15,
        "startColumnNumber" : 8,
        "endLineNumber" : 15,
        "endColumnNumber" : 33
      },
      "nodeContext" : "String version=args[2];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1378,
        "startLineNumber" : 14,
        "startColumnNumber" : 62,
        "endLineNumber" : 47,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String version=args[2];\n  Path repository=new File(args[0]).toPath().resolve(\"org\").resolve(\"keycloak\");\n  Path targetRoot=new File(args[1]).toPath().resolve(version);\n  BufferedReader br=new BufferedReader(new InputStreamReader(CopyDependencies.class.getResourceAsStream(\"files\")));\n  Path target=targetRoot;\n  for (String l=br.readLine(); l != null; l=br.readLine()) {\n    if (l.startsWith(\"./\")) {\n      target=targetRoot.resolve(l.replace(\"./\",\"\").replace('/',File.separatorChar));\n      if (!target.toFile().isDirectory()) {\n        target.toFile().mkdirs();\n      }\n    }\n else     if (l.trim().length() > 0) {\n      String[] t=l.trim().split(\":\");\n      String artifactName=t[0];\n      String destName=t.length == 1 ? artifactName : t[1];\n      File artifactDir=repository.resolve(artifactName).resolve(version).toFile();\n      for (      File f : artifactDir.listFiles((file,name) -> name.contains(\".tar.gz\") || name.contains(\".zip\"))) {\n        Files.copy(f.toPath(),target.resolve(f.getName().replace(artifactName,destName)),StandardCopyOption.REPLACE_EXISTING);\n      }\n      System.out.println(artifactName);\n    }\n  }\n  br.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 235,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws IOException {\n  String version=args[2];\n  Path repository=new File(args[0]).toPath().resolve(\"org\").resolve(\"keycloak\");\n  Path targetRoot=new File(args[1]).toPath().resolve(version);\n  BufferedReader br=new BufferedReader(new InputStreamReader(CopyDependencies.class.getResourceAsStream(\"files\")));\n  Path target=targetRoot;\n  for (String l=br.readLine(); l != null; l=br.readLine()) {\n    if (l.startsWith(\"./\")) {\n      target=targetRoot.resolve(l.replace(\"./\",\"\").replace('/',File.separatorChar));\n      if (!target.toFile().isDirectory()) {\n        target.toFile().mkdirs();\n      }\n    }\n else     if (l.trim().length() > 0) {\n      String[] t=l.trim().split(\":\");\n      String artifactName=t[0];\n      String destName=t.length == 1 ? artifactName : t[1];\n      File artifactDir=repository.resolve(artifactName).resolve(version).toFile();\n      for (      File f : artifactDir.listFiles((file,name) -> name.contains(\".tar.gz\") || name.contains(\".zip\"))) {\n        Files.copy(f.toPath(),target.resolve(f.getName().replace(artifactName,destName)),StandardCopyOption.REPLACE_EXISTING);\n      }\n      System.out.println(artifactName);\n    }\n  }\n  br.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 248,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 15,
        "startColumnNumber" : 8,
        "endLineNumber" : 15,
        "endColumnNumber" : 33
      },
      "nodeContext" : "String version=args[2];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 15,
    "startColumnNumber" : 30,
    "endLineNumber" : 15,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}