{
  "id" : 211,
  "expression" : "new int[0]",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/math/EulerTotientFunctionWithSieve.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new int[0]",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 40,
      "startColumnNumber" : 27,
      "endLineNumber" : 40,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 40,
        "startColumnNumber" : 20,
        "endLineNumber" : 40,
        "endColumnNumber" : 38
      },
      "nodeContext" : "return new int[0];\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 40,
        "startColumnNumber" : 4,
        "endLineNumber" : 40,
        "endColumnNumber" : 38
      },
      "nodeContext" : "if (limit <= 2) return new int[0];\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 749,
        "startLineNumber" : 38,
        "startColumnNumber" : 40,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (limit <= 2)   return new int[0];\n  final int numPrimes=(int)(1.25506 * limit / Math.log((double)limit));\n  int[] primes=new int[numPrimes];\n  int index=0;\n  boolean[] isComposite=new boolean[limit];\n  final int sqrtLimit=(int)Math.sqrt(limit);\n  for (int i=2; i <= sqrtLimit; i++) {\n    if (!isComposite[i]) {\n      primes[index++]=i;\n      for (int j=i * i; j < limit; j+=i)       isComposite[j]=true;\n    }\n  }\n  for (int i=sqrtLimit + 1; i < limit; i++)   if (!isComposite[i])   primes[index++]=i;\n  return java.util.Arrays.copyOf(primes,index);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 787,
        "startLineNumber" : 38,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static int[] sieve(int limit){\n  if (limit <= 2)   return new int[0];\n  final int numPrimes=(int)(1.25506 * limit / Math.log((double)limit));\n  int[] primes=new int[numPrimes];\n  int index=0;\n  boolean[] isComposite=new boolean[limit];\n  final int sqrtLimit=(int)Math.sqrt(limit);\n  for (int i=2; i <= sqrtLimit; i++) {\n    if (!isComposite[i]) {\n      primes[index++]=i;\n      for (int j=i * i; j < limit; j+=i)       isComposite[j]=true;\n    }\n  }\n  for (int i=sqrtLimit + 1; i < limit; i++)   if (!isComposite[i])   primes[index++]=i;\n  return java.util.Arrays.copyOf(primes,index);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 157,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 40,
        "startColumnNumber" : 4,
        "endLineNumber" : 40,
        "endColumnNumber" : 38
      },
      "nodeContext" : "if (limit <= 2) return new int[0];\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int[]"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 40,
    "startColumnNumber" : 27,
    "endLineNumber" : 40,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}