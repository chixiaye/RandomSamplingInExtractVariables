{
  "id" : 132,
  "expression" : "appBufferMax + 50",
  "projectName" : "netty@netty",
  "commitID" : "43ae49ed786a6facff70a34a8fe59c3f8aa70ed4",
  "filePath" : "handler/src/test/java/io/netty/handler/ssl/OpenSslEngineTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "appBufferMax + 50",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 1190,
      "startColumnNumber" : 54,
      "endLineNumber" : 1190,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 1190,
        "startColumnNumber" : 34,
        "endLineNumber" : 1190,
        "endColumnNumber" : 72
      },
      "nodeContext" : "ByteBuffer.allocate(appBufferMax + 50)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 1190,
        "startColumnNumber" : 23,
        "endLineNumber" : 1190,
        "endColumnNumber" : 72
      },
      "nodeContext" : "clientIn=ByteBuffer.allocate(appBufferMax + 50)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 1190,
        "startColumnNumber" : 12,
        "endLineNumber" : 1190,
        "endColumnNumber" : 73
      },
      "nodeContext" : "ByteBuffer clientIn=ByteBuffer.allocate(appBufferMax + 50);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7280,
        "startLineNumber" : 1169,
        "startColumnNumber" : 12,
        "endLineNumber" : 1307,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assumeTrue(\"The diffie hellman cipher is not supported on your runtime.\",Arrays.asList(clientEngine.getSupportedCipherSuites()).contains(enabledCipher));\n  clientEngine.setEnabledCipherSuites(new String[]{enabledCipher});\n  serverEngine.setEnabledCipherSuites(new String[]{enabledCipher});\n  int appBufferMax=clientEngine.getSession().getApplicationBufferSize();\n  int netBufferMax=clientEngine.getSession().getPacketBufferSize();\n  ByteBuffer clientIn=ByteBuffer.allocate(appBufferMax + 50);\n  ByteBuffer serverIn=ByteBuffer.allocate(appBufferMax + 50);\n  ByteBuffer cTOs=ByteBuffer.allocate(netBufferMax);\n  ByteBuffer sTOc=ByteBuffer.allocate(netBufferMax);\n  ByteBuffer clientOut=ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes(CharsetUtil.US_ASCII));\n  ByteBuffer serverOut=ByteBuffer.wrap(\"Hello Client, I'm Server\".getBytes(CharsetUtil.US_ASCII));\n  boolean asserted=false;\n  for (int i=0; i < 1000; i++) {\n    clientEngine.wrap(clientOut,cTOs);\n    serverEngine.wrap(serverOut,sTOc);\n    cTOs.flip();\n    sTOc.flip();\n    runTasksIfNeeded(clientEngine);\n    runTasksIfNeeded(serverEngine);\n    clientEngine.unwrap(sTOc,clientIn);\n    serverEngine.unwrap(cTOs,serverIn);\n    runTasksIfNeeded(clientEngine);\n    runTasksIfNeeded(serverEngine);\n    if ((clientOut.limit() == serverIn.position()) && (serverOut.limit() == clientIn.position())) {\n      byte[] serverRandom=SSL.getServerRandom(unwrapEngine(serverEngine).sslPointer());\n      byte[] clientRandom=SSL.getClientRandom(unwrapEngine(clientEngine).sslPointer());\n      byte[] serverMasterKey=SSL.getMasterKey(unwrapEngine(serverEngine).sslPointer());\n      byte[] clientMasterKey=SSL.getMasterKey(unwrapEngine(clientEngine).sslPointer());\n      asserted=true;\n      assertArrayEquals(serverMasterKey,clientMasterKey);\n      cTOs.flip();\n      sTOc.flip();\n      int keySize=16;\n      int macSize=32;\n      int keyBlockSize=(2 * keySize) + (2 * macSize);\n      byte[] seed=new byte[serverRandom.length + clientRandom.length];\n      System.arraycopy(serverRandom,0,seed,0,serverRandom.length);\n      System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);\n      byte[] keyBlock=PseudoRandomFunction.hash(serverMasterKey,\"key expansion\".getBytes(CharsetUtil.US_ASCII),seed,keyBlockSize,\"HmacSha256\");\n      int offset=0;\n      byte[] clientWriteMac=Arrays.copyOfRange(keyBlock,offset,offset + macSize);\n      offset+=macSize;\n      byte[] serverWriteMac=Arrays.copyOfRange(keyBlock,offset,offset + macSize);\n      offset+=macSize;\n      byte[] clientWriteKey=Arrays.copyOfRange(keyBlock,offset,offset + keySize);\n      offset+=keySize;\n      byte[] serverWriteKey=Arrays.copyOfRange(keyBlock,offset,offset + keySize);\n      offset+=keySize;\n      cTOs.position(cTOs.position() + 5);\n      byte[] ciphertext=new byte[cTOs.remaining()];\n      cTOs.get(ciphertext);\n      byte[] clientWriteIV=Arrays.copyOfRange(ciphertext,0,16);\n      ciphertext=Arrays.copyOfRange(ciphertext,16,ciphertext.length);\n      SecretKeySpec secretKey=new SecretKeySpec(clientWriteKey,\"AES\");\n      final IvParameterSpec ivForCBC=new IvParameterSpec(clientWriteIV);\n      Cipher cipher=Cipher.getInstance(\"AES/CBC/NoPadding\");\n      cipher.init(Cipher.DECRYPT_MODE,secretKey,ivForCBC);\n      byte[] plaintext=cipher.doFinal(ciphertext);\n      assertTrue(new String(plaintext).startsWith(\"Hi Server, I'm Client\"));\n      break;\n    }\n else {\n      cTOs.compact();\n      sTOc.compact();\n    }\n  }\n  assertTrue(\"The assertions were never executed.\",asserted);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 562,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7435,
        "startLineNumber" : 1169,
        "startColumnNumber" : 8,
        "endLineNumber" : 1311,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  assumeTrue(\"The diffie hellman cipher is not supported on your runtime.\",Arrays.asList(clientEngine.getSupportedCipherSuites()).contains(enabledCipher));\n  clientEngine.setEnabledCipherSuites(new String[]{enabledCipher});\n  serverEngine.setEnabledCipherSuites(new String[]{enabledCipher});\n  int appBufferMax=clientEngine.getSession().getApplicationBufferSize();\n  int netBufferMax=clientEngine.getSession().getPacketBufferSize();\n  ByteBuffer clientIn=ByteBuffer.allocate(appBufferMax + 50);\n  ByteBuffer serverIn=ByteBuffer.allocate(appBufferMax + 50);\n  ByteBuffer cTOs=ByteBuffer.allocate(netBufferMax);\n  ByteBuffer sTOc=ByteBuffer.allocate(netBufferMax);\n  ByteBuffer clientOut=ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes(CharsetUtil.US_ASCII));\n  ByteBuffer serverOut=ByteBuffer.wrap(\"Hello Client, I'm Server\".getBytes(CharsetUtil.US_ASCII));\n  boolean asserted=false;\n  for (int i=0; i < 1000; i++) {\n    clientEngine.wrap(clientOut,cTOs);\n    serverEngine.wrap(serverOut,sTOc);\n    cTOs.flip();\n    sTOc.flip();\n    runTasksIfNeeded(clientEngine);\n    runTasksIfNeeded(serverEngine);\n    clientEngine.unwrap(sTOc,clientIn);\n    serverEngine.unwrap(cTOs,serverIn);\n    runTasksIfNeeded(clientEngine);\n    runTasksIfNeeded(serverEngine);\n    if ((clientOut.limit() == serverIn.position()) && (serverOut.limit() == clientIn.position())) {\n      byte[] serverRandom=SSL.getServerRandom(unwrapEngine(serverEngine).sslPointer());\n      byte[] clientRandom=SSL.getClientRandom(unwrapEngine(clientEngine).sslPointer());\n      byte[] serverMasterKey=SSL.getMasterKey(unwrapEngine(serverEngine).sslPointer());\n      byte[] clientMasterKey=SSL.getMasterKey(unwrapEngine(clientEngine).sslPointer());\n      asserted=true;\n      assertArrayEquals(serverMasterKey,clientMasterKey);\n      cTOs.flip();\n      sTOc.flip();\n      int keySize=16;\n      int macSize=32;\n      int keyBlockSize=(2 * keySize) + (2 * macSize);\n      byte[] seed=new byte[serverRandom.length + clientRandom.length];\n      System.arraycopy(serverRandom,0,seed,0,serverRandom.length);\n      System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);\n      byte[] keyBlock=PseudoRandomFunction.hash(serverMasterKey,\"key expansion\".getBytes(CharsetUtil.US_ASCII),seed,keyBlockSize,\"HmacSha256\");\n      int offset=0;\n      byte[] clientWriteMac=Arrays.copyOfRange(keyBlock,offset,offset + macSize);\n      offset+=macSize;\n      byte[] serverWriteMac=Arrays.copyOfRange(keyBlock,offset,offset + macSize);\n      offset+=macSize;\n      byte[] clientWriteKey=Arrays.copyOfRange(keyBlock,offset,offset + keySize);\n      offset+=keySize;\n      byte[] serverWriteKey=Arrays.copyOfRange(keyBlock,offset,offset + keySize);\n      offset+=keySize;\n      cTOs.position(cTOs.position() + 5);\n      byte[] ciphertext=new byte[cTOs.remaining()];\n      cTOs.get(ciphertext);\n      byte[] clientWriteIV=Arrays.copyOfRange(ciphertext,0,16);\n      ciphertext=Arrays.copyOfRange(ciphertext,16,ciphertext.length);\n      SecretKeySpec secretKey=new SecretKeySpec(clientWriteKey,\"AES\");\n      final IvParameterSpec ivForCBC=new IvParameterSpec(clientWriteIV);\n      Cipher cipher=Cipher.getInstance(\"AES/CBC/NoPadding\");\n      cipher.init(Cipher.DECRYPT_MODE,secretKey,ivForCBC);\n      byte[] plaintext=cipher.doFinal(ciphertext);\n      assertTrue(new String(plaintext).startsWith(\"Hi Server, I'm Client\"));\n      break;\n    }\n else {\n      cTOs.compact();\n      sTOc.compact();\n    }\n  }\n  assertTrue(\"The assertions were never executed.\",asserted);\n}\n  finally {\n  cleanupClientSslEngine(clientEngine);\n  cleanupServerSslEngine(serverEngine);\n  cert.delete();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 576,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8439,
        "startLineNumber" : 1149,
        "startColumnNumber" : 70,
        "endLineNumber" : 1312,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (protocolCipherCombo != ProtocolCipherCombo.tlsv12()) {\n    return;\n  }\n  SelfSignedCertificate cert=new SelfSignedCertificate();\n  serverSslCtx=wrapContext(SslContextBuilder.forServer(cert.key(),cert.cert()).protocols(protocols()).ciphers(ciphers()).sslProvider(SslProvider.OPENSSL).build());\n  final SSLEngine serverEngine=wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));\n  clientSslCtx=wrapContext(SslContextBuilder.forClient().trustManager(cert.certificate()).protocols(protocols()).ciphers(ciphers()).sslProvider(SslProvider.OPENSSL).build());\n  final SSLEngine clientEngine=wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));\n  final String enabledCipher=\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\";\n  try {\n    assumeTrue(\"The diffie hellman cipher is not supported on your runtime.\",Arrays.asList(clientEngine.getSupportedCipherSuites()).contains(enabledCipher));\n    clientEngine.setEnabledCipherSuites(new String[]{enabledCipher});\n    serverEngine.setEnabledCipherSuites(new String[]{enabledCipher});\n    int appBufferMax=clientEngine.getSession().getApplicationBufferSize();\n    int netBufferMax=clientEngine.getSession().getPacketBufferSize();\n    ByteBuffer clientIn=ByteBuffer.allocate(appBufferMax + 50);\n    ByteBuffer serverIn=ByteBuffer.allocate(appBufferMax + 50);\n    ByteBuffer cTOs=ByteBuffer.allocate(netBufferMax);\n    ByteBuffer sTOc=ByteBuffer.allocate(netBufferMax);\n    ByteBuffer clientOut=ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes(CharsetUtil.US_ASCII));\n    ByteBuffer serverOut=ByteBuffer.wrap(\"Hello Client, I'm Server\".getBytes(CharsetUtil.US_ASCII));\n    boolean asserted=false;\n    for (int i=0; i < 1000; i++) {\n      clientEngine.wrap(clientOut,cTOs);\n      serverEngine.wrap(serverOut,sTOc);\n      cTOs.flip();\n      sTOc.flip();\n      runTasksIfNeeded(clientEngine);\n      runTasksIfNeeded(serverEngine);\n      clientEngine.unwrap(sTOc,clientIn);\n      serverEngine.unwrap(cTOs,serverIn);\n      runTasksIfNeeded(clientEngine);\n      runTasksIfNeeded(serverEngine);\n      if ((clientOut.limit() == serverIn.position()) && (serverOut.limit() == clientIn.position())) {\n        byte[] serverRandom=SSL.getServerRandom(unwrapEngine(serverEngine).sslPointer());\n        byte[] clientRandom=SSL.getClientRandom(unwrapEngine(clientEngine).sslPointer());\n        byte[] serverMasterKey=SSL.getMasterKey(unwrapEngine(serverEngine).sslPointer());\n        byte[] clientMasterKey=SSL.getMasterKey(unwrapEngine(clientEngine).sslPointer());\n        asserted=true;\n        assertArrayEquals(serverMasterKey,clientMasterKey);\n        cTOs.flip();\n        sTOc.flip();\n        int keySize=16;\n        int macSize=32;\n        int keyBlockSize=(2 * keySize) + (2 * macSize);\n        byte[] seed=new byte[serverRandom.length + clientRandom.length];\n        System.arraycopy(serverRandom,0,seed,0,serverRandom.length);\n        System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);\n        byte[] keyBlock=PseudoRandomFunction.hash(serverMasterKey,\"key expansion\".getBytes(CharsetUtil.US_ASCII),seed,keyBlockSize,\"HmacSha256\");\n        int offset=0;\n        byte[] clientWriteMac=Arrays.copyOfRange(keyBlock,offset,offset + macSize);\n        offset+=macSize;\n        byte[] serverWriteMac=Arrays.copyOfRange(keyBlock,offset,offset + macSize);\n        offset+=macSize;\n        byte[] clientWriteKey=Arrays.copyOfRange(keyBlock,offset,offset + keySize);\n        offset+=keySize;\n        byte[] serverWriteKey=Arrays.copyOfRange(keyBlock,offset,offset + keySize);\n        offset+=keySize;\n        cTOs.position(cTOs.position() + 5);\n        byte[] ciphertext=new byte[cTOs.remaining()];\n        cTOs.get(ciphertext);\n        byte[] clientWriteIV=Arrays.copyOfRange(ciphertext,0,16);\n        ciphertext=Arrays.copyOfRange(ciphertext,16,ciphertext.length);\n        SecretKeySpec secretKey=new SecretKeySpec(clientWriteKey,\"AES\");\n        final IvParameterSpec ivForCBC=new IvParameterSpec(clientWriteIV);\n        Cipher cipher=Cipher.getInstance(\"AES/CBC/NoPadding\");\n        cipher.init(Cipher.DECRYPT_MODE,secretKey,ivForCBC);\n        byte[] plaintext=cipher.doFinal(ciphertext);\n        assertTrue(new String(plaintext).startsWith(\"Hi Server, I'm Client\"));\n        break;\n      }\n else {\n        cTOs.compact();\n        sTOc.compact();\n      }\n    }\n    assertTrue(\"The assertions were never executed.\",asserted);\n  }\n  finally {\n    cleanupClientSslEngine(clientEngine);\n    cleanupServerSslEngine(serverEngine);\n    cert.delete();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 685,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8516,
        "startLineNumber" : 1148,
        "startColumnNumber" : 4,
        "endLineNumber" : 1312,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testExtractMasterkeyWorksCorrectly() throws Exception {\n  if (protocolCipherCombo != ProtocolCipherCombo.tlsv12()) {\n    return;\n  }\n  SelfSignedCertificate cert=new SelfSignedCertificate();\n  serverSslCtx=wrapContext(SslContextBuilder.forServer(cert.key(),cert.cert()).protocols(protocols()).ciphers(ciphers()).sslProvider(SslProvider.OPENSSL).build());\n  final SSLEngine serverEngine=wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));\n  clientSslCtx=wrapContext(SslContextBuilder.forClient().trustManager(cert.certificate()).protocols(protocols()).ciphers(ciphers()).sslProvider(SslProvider.OPENSSL).build());\n  final SSLEngine clientEngine=wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));\n  final String enabledCipher=\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\";\n  try {\n    assumeTrue(\"The diffie hellman cipher is not supported on your runtime.\",Arrays.asList(clientEngine.getSupportedCipherSuites()).contains(enabledCipher));\n    clientEngine.setEnabledCipherSuites(new String[]{enabledCipher});\n    serverEngine.setEnabledCipherSuites(new String[]{enabledCipher});\n    int appBufferMax=clientEngine.getSession().getApplicationBufferSize();\n    int netBufferMax=clientEngine.getSession().getPacketBufferSize();\n    ByteBuffer clientIn=ByteBuffer.allocate(appBufferMax + 50);\n    ByteBuffer serverIn=ByteBuffer.allocate(appBufferMax + 50);\n    ByteBuffer cTOs=ByteBuffer.allocate(netBufferMax);\n    ByteBuffer sTOc=ByteBuffer.allocate(netBufferMax);\n    ByteBuffer clientOut=ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes(CharsetUtil.US_ASCII));\n    ByteBuffer serverOut=ByteBuffer.wrap(\"Hello Client, I'm Server\".getBytes(CharsetUtil.US_ASCII));\n    boolean asserted=false;\n    for (int i=0; i < 1000; i++) {\n      clientEngine.wrap(clientOut,cTOs);\n      serverEngine.wrap(serverOut,sTOc);\n      cTOs.flip();\n      sTOc.flip();\n      runTasksIfNeeded(clientEngine);\n      runTasksIfNeeded(serverEngine);\n      clientEngine.unwrap(sTOc,clientIn);\n      serverEngine.unwrap(cTOs,serverIn);\n      runTasksIfNeeded(clientEngine);\n      runTasksIfNeeded(serverEngine);\n      if ((clientOut.limit() == serverIn.position()) && (serverOut.limit() == clientIn.position())) {\n        byte[] serverRandom=SSL.getServerRandom(unwrapEngine(serverEngine).sslPointer());\n        byte[] clientRandom=SSL.getClientRandom(unwrapEngine(clientEngine).sslPointer());\n        byte[] serverMasterKey=SSL.getMasterKey(unwrapEngine(serverEngine).sslPointer());\n        byte[] clientMasterKey=SSL.getMasterKey(unwrapEngine(clientEngine).sslPointer());\n        asserted=true;\n        assertArrayEquals(serverMasterKey,clientMasterKey);\n        cTOs.flip();\n        sTOc.flip();\n        int keySize=16;\n        int macSize=32;\n        int keyBlockSize=(2 * keySize) + (2 * macSize);\n        byte[] seed=new byte[serverRandom.length + clientRandom.length];\n        System.arraycopy(serverRandom,0,seed,0,serverRandom.length);\n        System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);\n        byte[] keyBlock=PseudoRandomFunction.hash(serverMasterKey,\"key expansion\".getBytes(CharsetUtil.US_ASCII),seed,keyBlockSize,\"HmacSha256\");\n        int offset=0;\n        byte[] clientWriteMac=Arrays.copyOfRange(keyBlock,offset,offset + macSize);\n        offset+=macSize;\n        byte[] serverWriteMac=Arrays.copyOfRange(keyBlock,offset,offset + macSize);\n        offset+=macSize;\n        byte[] clientWriteKey=Arrays.copyOfRange(keyBlock,offset,offset + keySize);\n        offset+=keySize;\n        byte[] serverWriteKey=Arrays.copyOfRange(keyBlock,offset,offset + keySize);\n        offset+=keySize;\n        cTOs.position(cTOs.position() + 5);\n        byte[] ciphertext=new byte[cTOs.remaining()];\n        cTOs.get(ciphertext);\n        byte[] clientWriteIV=Arrays.copyOfRange(ciphertext,0,16);\n        ciphertext=Arrays.copyOfRange(ciphertext,16,ciphertext.length);\n        SecretKeySpec secretKey=new SecretKeySpec(clientWriteKey,\"AES\");\n        final IvParameterSpec ivForCBC=new IvParameterSpec(clientWriteIV);\n        Cipher cipher=Cipher.getInstance(\"AES/CBC/NoPadding\");\n        cipher.init(Cipher.DECRYPT_MODE,secretKey,ivForCBC);\n        byte[] plaintext=cipher.doFinal(ciphertext);\n        assertTrue(new String(plaintext).startsWith(\"Hi Server, I'm Client\"));\n        break;\n      }\n else {\n        cTOs.compact();\n        sTOc.compact();\n      }\n    }\n    assertTrue(\"The assertions were never executed.\",asserted);\n  }\n  finally {\n    cleanupClientSslEngine(clientEngine);\n    cleanupServerSslEngine(serverEngine);\n    cert.delete();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 693,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 1190,
        "startColumnNumber" : 12,
        "endLineNumber" : 1190,
        "endColumnNumber" : 73
      },
      "nodeContext" : "ByteBuffer clientIn=ByteBuffer.allocate(appBufferMax + 50);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "int"
  }, {
    "nodeContext" : "appBufferMax + 50",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 1191,
      "startColumnNumber" : 54,
      "endLineNumber" : 1191,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 1191,
        "startColumnNumber" : 34,
        "endLineNumber" : 1191,
        "endColumnNumber" : 72
      },
      "nodeContext" : "ByteBuffer.allocate(appBufferMax + 50)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 1191,
        "startColumnNumber" : 23,
        "endLineNumber" : 1191,
        "endColumnNumber" : 72
      },
      "nodeContext" : "serverIn=ByteBuffer.allocate(appBufferMax + 50)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 1191,
        "startColumnNumber" : 12,
        "endLineNumber" : 1191,
        "endColumnNumber" : 73
      },
      "nodeContext" : "ByteBuffer serverIn=ByteBuffer.allocate(appBufferMax + 50);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7280,
        "startLineNumber" : 1169,
        "startColumnNumber" : 12,
        "endLineNumber" : 1307,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assumeTrue(\"The diffie hellman cipher is not supported on your runtime.\",Arrays.asList(clientEngine.getSupportedCipherSuites()).contains(enabledCipher));\n  clientEngine.setEnabledCipherSuites(new String[]{enabledCipher});\n  serverEngine.setEnabledCipherSuites(new String[]{enabledCipher});\n  int appBufferMax=clientEngine.getSession().getApplicationBufferSize();\n  int netBufferMax=clientEngine.getSession().getPacketBufferSize();\n  ByteBuffer clientIn=ByteBuffer.allocate(appBufferMax + 50);\n  ByteBuffer serverIn=ByteBuffer.allocate(appBufferMax + 50);\n  ByteBuffer cTOs=ByteBuffer.allocate(netBufferMax);\n  ByteBuffer sTOc=ByteBuffer.allocate(netBufferMax);\n  ByteBuffer clientOut=ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes(CharsetUtil.US_ASCII));\n  ByteBuffer serverOut=ByteBuffer.wrap(\"Hello Client, I'm Server\".getBytes(CharsetUtil.US_ASCII));\n  boolean asserted=false;\n  for (int i=0; i < 1000; i++) {\n    clientEngine.wrap(clientOut,cTOs);\n    serverEngine.wrap(serverOut,sTOc);\n    cTOs.flip();\n    sTOc.flip();\n    runTasksIfNeeded(clientEngine);\n    runTasksIfNeeded(serverEngine);\n    clientEngine.unwrap(sTOc,clientIn);\n    serverEngine.unwrap(cTOs,serverIn);\n    runTasksIfNeeded(clientEngine);\n    runTasksIfNeeded(serverEngine);\n    if ((clientOut.limit() == serverIn.position()) && (serverOut.limit() == clientIn.position())) {\n      byte[] serverRandom=SSL.getServerRandom(unwrapEngine(serverEngine).sslPointer());\n      byte[] clientRandom=SSL.getClientRandom(unwrapEngine(clientEngine).sslPointer());\n      byte[] serverMasterKey=SSL.getMasterKey(unwrapEngine(serverEngine).sslPointer());\n      byte[] clientMasterKey=SSL.getMasterKey(unwrapEngine(clientEngine).sslPointer());\n      asserted=true;\n      assertArrayEquals(serverMasterKey,clientMasterKey);\n      cTOs.flip();\n      sTOc.flip();\n      int keySize=16;\n      int macSize=32;\n      int keyBlockSize=(2 * keySize) + (2 * macSize);\n      byte[] seed=new byte[serverRandom.length + clientRandom.length];\n      System.arraycopy(serverRandom,0,seed,0,serverRandom.length);\n      System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);\n      byte[] keyBlock=PseudoRandomFunction.hash(serverMasterKey,\"key expansion\".getBytes(CharsetUtil.US_ASCII),seed,keyBlockSize,\"HmacSha256\");\n      int offset=0;\n      byte[] clientWriteMac=Arrays.copyOfRange(keyBlock,offset,offset + macSize);\n      offset+=macSize;\n      byte[] serverWriteMac=Arrays.copyOfRange(keyBlock,offset,offset + macSize);\n      offset+=macSize;\n      byte[] clientWriteKey=Arrays.copyOfRange(keyBlock,offset,offset + keySize);\n      offset+=keySize;\n      byte[] serverWriteKey=Arrays.copyOfRange(keyBlock,offset,offset + keySize);\n      offset+=keySize;\n      cTOs.position(cTOs.position() + 5);\n      byte[] ciphertext=new byte[cTOs.remaining()];\n      cTOs.get(ciphertext);\n      byte[] clientWriteIV=Arrays.copyOfRange(ciphertext,0,16);\n      ciphertext=Arrays.copyOfRange(ciphertext,16,ciphertext.length);\n      SecretKeySpec secretKey=new SecretKeySpec(clientWriteKey,\"AES\");\n      final IvParameterSpec ivForCBC=new IvParameterSpec(clientWriteIV);\n      Cipher cipher=Cipher.getInstance(\"AES/CBC/NoPadding\");\n      cipher.init(Cipher.DECRYPT_MODE,secretKey,ivForCBC);\n      byte[] plaintext=cipher.doFinal(ciphertext);\n      assertTrue(new String(plaintext).startsWith(\"Hi Server, I'm Client\"));\n      break;\n    }\n else {\n      cTOs.compact();\n      sTOc.compact();\n    }\n  }\n  assertTrue(\"The assertions were never executed.\",asserted);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 562,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7435,
        "startLineNumber" : 1169,
        "startColumnNumber" : 8,
        "endLineNumber" : 1311,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  assumeTrue(\"The diffie hellman cipher is not supported on your runtime.\",Arrays.asList(clientEngine.getSupportedCipherSuites()).contains(enabledCipher));\n  clientEngine.setEnabledCipherSuites(new String[]{enabledCipher});\n  serverEngine.setEnabledCipherSuites(new String[]{enabledCipher});\n  int appBufferMax=clientEngine.getSession().getApplicationBufferSize();\n  int netBufferMax=clientEngine.getSession().getPacketBufferSize();\n  ByteBuffer clientIn=ByteBuffer.allocate(appBufferMax + 50);\n  ByteBuffer serverIn=ByteBuffer.allocate(appBufferMax + 50);\n  ByteBuffer cTOs=ByteBuffer.allocate(netBufferMax);\n  ByteBuffer sTOc=ByteBuffer.allocate(netBufferMax);\n  ByteBuffer clientOut=ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes(CharsetUtil.US_ASCII));\n  ByteBuffer serverOut=ByteBuffer.wrap(\"Hello Client, I'm Server\".getBytes(CharsetUtil.US_ASCII));\n  boolean asserted=false;\n  for (int i=0; i < 1000; i++) {\n    clientEngine.wrap(clientOut,cTOs);\n    serverEngine.wrap(serverOut,sTOc);\n    cTOs.flip();\n    sTOc.flip();\n    runTasksIfNeeded(clientEngine);\n    runTasksIfNeeded(serverEngine);\n    clientEngine.unwrap(sTOc,clientIn);\n    serverEngine.unwrap(cTOs,serverIn);\n    runTasksIfNeeded(clientEngine);\n    runTasksIfNeeded(serverEngine);\n    if ((clientOut.limit() == serverIn.position()) && (serverOut.limit() == clientIn.position())) {\n      byte[] serverRandom=SSL.getServerRandom(unwrapEngine(serverEngine).sslPointer());\n      byte[] clientRandom=SSL.getClientRandom(unwrapEngine(clientEngine).sslPointer());\n      byte[] serverMasterKey=SSL.getMasterKey(unwrapEngine(serverEngine).sslPointer());\n      byte[] clientMasterKey=SSL.getMasterKey(unwrapEngine(clientEngine).sslPointer());\n      asserted=true;\n      assertArrayEquals(serverMasterKey,clientMasterKey);\n      cTOs.flip();\n      sTOc.flip();\n      int keySize=16;\n      int macSize=32;\n      int keyBlockSize=(2 * keySize) + (2 * macSize);\n      byte[] seed=new byte[serverRandom.length + clientRandom.length];\n      System.arraycopy(serverRandom,0,seed,0,serverRandom.length);\n      System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);\n      byte[] keyBlock=PseudoRandomFunction.hash(serverMasterKey,\"key expansion\".getBytes(CharsetUtil.US_ASCII),seed,keyBlockSize,\"HmacSha256\");\n      int offset=0;\n      byte[] clientWriteMac=Arrays.copyOfRange(keyBlock,offset,offset + macSize);\n      offset+=macSize;\n      byte[] serverWriteMac=Arrays.copyOfRange(keyBlock,offset,offset + macSize);\n      offset+=macSize;\n      byte[] clientWriteKey=Arrays.copyOfRange(keyBlock,offset,offset + keySize);\n      offset+=keySize;\n      byte[] serverWriteKey=Arrays.copyOfRange(keyBlock,offset,offset + keySize);\n      offset+=keySize;\n      cTOs.position(cTOs.position() + 5);\n      byte[] ciphertext=new byte[cTOs.remaining()];\n      cTOs.get(ciphertext);\n      byte[] clientWriteIV=Arrays.copyOfRange(ciphertext,0,16);\n      ciphertext=Arrays.copyOfRange(ciphertext,16,ciphertext.length);\n      SecretKeySpec secretKey=new SecretKeySpec(clientWriteKey,\"AES\");\n      final IvParameterSpec ivForCBC=new IvParameterSpec(clientWriteIV);\n      Cipher cipher=Cipher.getInstance(\"AES/CBC/NoPadding\");\n      cipher.init(Cipher.DECRYPT_MODE,secretKey,ivForCBC);\n      byte[] plaintext=cipher.doFinal(ciphertext);\n      assertTrue(new String(plaintext).startsWith(\"Hi Server, I'm Client\"));\n      break;\n    }\n else {\n      cTOs.compact();\n      sTOc.compact();\n    }\n  }\n  assertTrue(\"The assertions were never executed.\",asserted);\n}\n  finally {\n  cleanupClientSslEngine(clientEngine);\n  cleanupServerSslEngine(serverEngine);\n  cert.delete();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 576,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8439,
        "startLineNumber" : 1149,
        "startColumnNumber" : 70,
        "endLineNumber" : 1312,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (protocolCipherCombo != ProtocolCipherCombo.tlsv12()) {\n    return;\n  }\n  SelfSignedCertificate cert=new SelfSignedCertificate();\n  serverSslCtx=wrapContext(SslContextBuilder.forServer(cert.key(),cert.cert()).protocols(protocols()).ciphers(ciphers()).sslProvider(SslProvider.OPENSSL).build());\n  final SSLEngine serverEngine=wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));\n  clientSslCtx=wrapContext(SslContextBuilder.forClient().trustManager(cert.certificate()).protocols(protocols()).ciphers(ciphers()).sslProvider(SslProvider.OPENSSL).build());\n  final SSLEngine clientEngine=wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));\n  final String enabledCipher=\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\";\n  try {\n    assumeTrue(\"The diffie hellman cipher is not supported on your runtime.\",Arrays.asList(clientEngine.getSupportedCipherSuites()).contains(enabledCipher));\n    clientEngine.setEnabledCipherSuites(new String[]{enabledCipher});\n    serverEngine.setEnabledCipherSuites(new String[]{enabledCipher});\n    int appBufferMax=clientEngine.getSession().getApplicationBufferSize();\n    int netBufferMax=clientEngine.getSession().getPacketBufferSize();\n    ByteBuffer clientIn=ByteBuffer.allocate(appBufferMax + 50);\n    ByteBuffer serverIn=ByteBuffer.allocate(appBufferMax + 50);\n    ByteBuffer cTOs=ByteBuffer.allocate(netBufferMax);\n    ByteBuffer sTOc=ByteBuffer.allocate(netBufferMax);\n    ByteBuffer clientOut=ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes(CharsetUtil.US_ASCII));\n    ByteBuffer serverOut=ByteBuffer.wrap(\"Hello Client, I'm Server\".getBytes(CharsetUtil.US_ASCII));\n    boolean asserted=false;\n    for (int i=0; i < 1000; i++) {\n      clientEngine.wrap(clientOut,cTOs);\n      serverEngine.wrap(serverOut,sTOc);\n      cTOs.flip();\n      sTOc.flip();\n      runTasksIfNeeded(clientEngine);\n      runTasksIfNeeded(serverEngine);\n      clientEngine.unwrap(sTOc,clientIn);\n      serverEngine.unwrap(cTOs,serverIn);\n      runTasksIfNeeded(clientEngine);\n      runTasksIfNeeded(serverEngine);\n      if ((clientOut.limit() == serverIn.position()) && (serverOut.limit() == clientIn.position())) {\n        byte[] serverRandom=SSL.getServerRandom(unwrapEngine(serverEngine).sslPointer());\n        byte[] clientRandom=SSL.getClientRandom(unwrapEngine(clientEngine).sslPointer());\n        byte[] serverMasterKey=SSL.getMasterKey(unwrapEngine(serverEngine).sslPointer());\n        byte[] clientMasterKey=SSL.getMasterKey(unwrapEngine(clientEngine).sslPointer());\n        asserted=true;\n        assertArrayEquals(serverMasterKey,clientMasterKey);\n        cTOs.flip();\n        sTOc.flip();\n        int keySize=16;\n        int macSize=32;\n        int keyBlockSize=(2 * keySize) + (2 * macSize);\n        byte[] seed=new byte[serverRandom.length + clientRandom.length];\n        System.arraycopy(serverRandom,0,seed,0,serverRandom.length);\n        System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);\n        byte[] keyBlock=PseudoRandomFunction.hash(serverMasterKey,\"key expansion\".getBytes(CharsetUtil.US_ASCII),seed,keyBlockSize,\"HmacSha256\");\n        int offset=0;\n        byte[] clientWriteMac=Arrays.copyOfRange(keyBlock,offset,offset + macSize);\n        offset+=macSize;\n        byte[] serverWriteMac=Arrays.copyOfRange(keyBlock,offset,offset + macSize);\n        offset+=macSize;\n        byte[] clientWriteKey=Arrays.copyOfRange(keyBlock,offset,offset + keySize);\n        offset+=keySize;\n        byte[] serverWriteKey=Arrays.copyOfRange(keyBlock,offset,offset + keySize);\n        offset+=keySize;\n        cTOs.position(cTOs.position() + 5);\n        byte[] ciphertext=new byte[cTOs.remaining()];\n        cTOs.get(ciphertext);\n        byte[] clientWriteIV=Arrays.copyOfRange(ciphertext,0,16);\n        ciphertext=Arrays.copyOfRange(ciphertext,16,ciphertext.length);\n        SecretKeySpec secretKey=new SecretKeySpec(clientWriteKey,\"AES\");\n        final IvParameterSpec ivForCBC=new IvParameterSpec(clientWriteIV);\n        Cipher cipher=Cipher.getInstance(\"AES/CBC/NoPadding\");\n        cipher.init(Cipher.DECRYPT_MODE,secretKey,ivForCBC);\n        byte[] plaintext=cipher.doFinal(ciphertext);\n        assertTrue(new String(plaintext).startsWith(\"Hi Server, I'm Client\"));\n        break;\n      }\n else {\n        cTOs.compact();\n        sTOc.compact();\n      }\n    }\n    assertTrue(\"The assertions were never executed.\",asserted);\n  }\n  finally {\n    cleanupClientSslEngine(clientEngine);\n    cleanupServerSslEngine(serverEngine);\n    cert.delete();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 685,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8516,
        "startLineNumber" : 1148,
        "startColumnNumber" : 4,
        "endLineNumber" : 1312,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testExtractMasterkeyWorksCorrectly() throws Exception {\n  if (protocolCipherCombo != ProtocolCipherCombo.tlsv12()) {\n    return;\n  }\n  SelfSignedCertificate cert=new SelfSignedCertificate();\n  serverSslCtx=wrapContext(SslContextBuilder.forServer(cert.key(),cert.cert()).protocols(protocols()).ciphers(ciphers()).sslProvider(SslProvider.OPENSSL).build());\n  final SSLEngine serverEngine=wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));\n  clientSslCtx=wrapContext(SslContextBuilder.forClient().trustManager(cert.certificate()).protocols(protocols()).ciphers(ciphers()).sslProvider(SslProvider.OPENSSL).build());\n  final SSLEngine clientEngine=wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));\n  final String enabledCipher=\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\";\n  try {\n    assumeTrue(\"The diffie hellman cipher is not supported on your runtime.\",Arrays.asList(clientEngine.getSupportedCipherSuites()).contains(enabledCipher));\n    clientEngine.setEnabledCipherSuites(new String[]{enabledCipher});\n    serverEngine.setEnabledCipherSuites(new String[]{enabledCipher});\n    int appBufferMax=clientEngine.getSession().getApplicationBufferSize();\n    int netBufferMax=clientEngine.getSession().getPacketBufferSize();\n    ByteBuffer clientIn=ByteBuffer.allocate(appBufferMax + 50);\n    ByteBuffer serverIn=ByteBuffer.allocate(appBufferMax + 50);\n    ByteBuffer cTOs=ByteBuffer.allocate(netBufferMax);\n    ByteBuffer sTOc=ByteBuffer.allocate(netBufferMax);\n    ByteBuffer clientOut=ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes(CharsetUtil.US_ASCII));\n    ByteBuffer serverOut=ByteBuffer.wrap(\"Hello Client, I'm Server\".getBytes(CharsetUtil.US_ASCII));\n    boolean asserted=false;\n    for (int i=0; i < 1000; i++) {\n      clientEngine.wrap(clientOut,cTOs);\n      serverEngine.wrap(serverOut,sTOc);\n      cTOs.flip();\n      sTOc.flip();\n      runTasksIfNeeded(clientEngine);\n      runTasksIfNeeded(serverEngine);\n      clientEngine.unwrap(sTOc,clientIn);\n      serverEngine.unwrap(cTOs,serverIn);\n      runTasksIfNeeded(clientEngine);\n      runTasksIfNeeded(serverEngine);\n      if ((clientOut.limit() == serverIn.position()) && (serverOut.limit() == clientIn.position())) {\n        byte[] serverRandom=SSL.getServerRandom(unwrapEngine(serverEngine).sslPointer());\n        byte[] clientRandom=SSL.getClientRandom(unwrapEngine(clientEngine).sslPointer());\n        byte[] serverMasterKey=SSL.getMasterKey(unwrapEngine(serverEngine).sslPointer());\n        byte[] clientMasterKey=SSL.getMasterKey(unwrapEngine(clientEngine).sslPointer());\n        asserted=true;\n        assertArrayEquals(serverMasterKey,clientMasterKey);\n        cTOs.flip();\n        sTOc.flip();\n        int keySize=16;\n        int macSize=32;\n        int keyBlockSize=(2 * keySize) + (2 * macSize);\n        byte[] seed=new byte[serverRandom.length + clientRandom.length];\n        System.arraycopy(serverRandom,0,seed,0,serverRandom.length);\n        System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);\n        byte[] keyBlock=PseudoRandomFunction.hash(serverMasterKey,\"key expansion\".getBytes(CharsetUtil.US_ASCII),seed,keyBlockSize,\"HmacSha256\");\n        int offset=0;\n        byte[] clientWriteMac=Arrays.copyOfRange(keyBlock,offset,offset + macSize);\n        offset+=macSize;\n        byte[] serverWriteMac=Arrays.copyOfRange(keyBlock,offset,offset + macSize);\n        offset+=macSize;\n        byte[] clientWriteKey=Arrays.copyOfRange(keyBlock,offset,offset + keySize);\n        offset+=keySize;\n        byte[] serverWriteKey=Arrays.copyOfRange(keyBlock,offset,offset + keySize);\n        offset+=keySize;\n        cTOs.position(cTOs.position() + 5);\n        byte[] ciphertext=new byte[cTOs.remaining()];\n        cTOs.get(ciphertext);\n        byte[] clientWriteIV=Arrays.copyOfRange(ciphertext,0,16);\n        ciphertext=Arrays.copyOfRange(ciphertext,16,ciphertext.length);\n        SecretKeySpec secretKey=new SecretKeySpec(clientWriteKey,\"AES\");\n        final IvParameterSpec ivForCBC=new IvParameterSpec(clientWriteIV);\n        Cipher cipher=Cipher.getInstance(\"AES/CBC/NoPadding\");\n        cipher.init(Cipher.DECRYPT_MODE,secretKey,ivForCBC);\n        byte[] plaintext=cipher.doFinal(ciphertext);\n        assertTrue(new String(plaintext).startsWith(\"Hi Server, I'm Client\"));\n        break;\n      }\n else {\n        cTOs.compact();\n        sTOc.compact();\n      }\n    }\n    assertTrue(\"The assertions were never executed.\",asserted);\n  }\n  finally {\n    cleanupClientSslEngine(clientEngine);\n    cleanupServerSslEngine(serverEngine);\n    cert.delete();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 693,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 1191,
        "startColumnNumber" : 12,
        "endLineNumber" : 1191,
        "endColumnNumber" : 73
      },
      "nodeContext" : "ByteBuffer serverIn=ByteBuffer.allocate(appBufferMax + 50);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 1190,
    "startColumnNumber" : 54,
    "endLineNumber" : 1190,
    "endColumnNumber" : 71
  }, {
    "charLength" : 17,
    "startLineNumber" : 1191,
    "startColumnNumber" : 54,
    "endLineNumber" : 1191,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}