{
  "id" : 395,
  "expression" : "channel",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/cli/src/main/java/hudson/cli/SSHCLI.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "channel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 111,
      "startColumnNumber" : 20,
      "endLineNumber" : 111,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 111,
        "startColumnNumber" : 20,
        "endLineNumber" : 111,
        "endColumnNumber" : 68
      },
      "nodeContext" : "channel.setIn(new NoCloseInputStream(System.in))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 111,
        "startColumnNumber" : 20,
        "endLineNumber" : 111,
        "endColumnNumber" : 69
      },
      "nodeContext" : "channel.setIn(new NoCloseInputStream(System.in));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 787,
        "startLineNumber" : 110,
        "startColumnNumber" : 92,
        "endLineNumber" : 126,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  channel.setIn(new NoCloseInputStream(System.in));\n  channel.setOut(new NoCloseOutputStream(System.out));\n  channel.setErr(new NoCloseOutputStream(System.err));\n  WaitableFuture wf=channel.open();\n  wf.await();\n  Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n  if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n    throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n  }\n  Integer exitStatus=channel.getExitStatus();\n  return exitStatus;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 110,
        "startColumnNumber" : 16,
        "endLineNumber" : 126,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try (ClientChannel channel=session.createExecChannel(command.toString())){\n  channel.setIn(new NoCloseInputStream(System.in));\n  channel.setOut(new NoCloseOutputStream(System.out));\n  channel.setErr(new NoCloseOutputStream(System.err));\n  WaitableFuture wf=channel.open();\n  wf.await();\n  Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n  if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n    throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n  }\n  Integer exitStatus=channel.getExitStatus();\n  return exitStatus;\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 98,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1187,
        "startLineNumber" : 103,
        "startColumnNumber" : 58,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (  KeyPair pair : provider.getKeys()) {\n    CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n    session.addPublicKeyIdentity(pair);\n  }\n  session.auth().verify(10000L);\n  try (ClientChannel channel=session.createExecChannel(command.toString())){\n    channel.setIn(new NoCloseInputStream(System.in));\n    channel.setOut(new NoCloseOutputStream(System.out));\n    channel.setErr(new NoCloseOutputStream(System.err));\n    WaitableFuture wf=channel.open();\n    wf.await();\n    Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n    if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n      throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n    }\n    Integer exitStatus=channel.getExitStatus();\n    return exitStatus;\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1290,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try (ClientSession session=cf.getSession()){\n  for (  KeyPair pair : provider.getKeys()) {\n    CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n    session.addPublicKeyIdentity(pair);\n  }\n  session.auth().verify(10000L);\n  try (ClientChannel channel=session.createExecChannel(command.toString())){\n    channel.setIn(new NoCloseInputStream(System.in));\n    channel.setOut(new NoCloseOutputStream(System.out));\n    channel.setErr(new NoCloseOutputStream(System.err));\n    WaitableFuture wf=channel.open();\n    wf.await();\n    Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n    if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n      throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n    }\n    Integer exitStatus=channel.getExitStatus();\n    return exitStatus;\n  }\n }\n  finally {\n  client.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 147,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1965,
        "startLineNumber" : 88,
        "startColumnNumber" : 63,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n    @Override public boolean verifyServerKey(    ClientSession clientSession,    SocketAddress remoteAddress,    PublicKey serverKey){\n      CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n      return !strictHostKey;\n    }\n  }\n,true);\n  client.setServerKeyVerifier(verifier);\n  client.start();\n  ConnectFuture cf=client.connect(user,sshHost,sshPort);\n  cf.await();\n  try (ClientSession session=cf.getSession()){\n    for (    KeyPair pair : provider.getKeys()) {\n      CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n      session.addPublicKeyIdentity(pair);\n    }\n    session.auth().verify(10000L);\n    try (ClientChannel channel=session.createExecChannel(command.toString())){\n      channel.setIn(new NoCloseInputStream(System.in));\n      channel.setOut(new NoCloseOutputStream(System.out));\n      channel.setErr(new NoCloseOutputStream(System.err));\n      WaitableFuture wf=channel.open();\n      wf.await();\n      Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n      if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n        throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n      }\n      Integer exitStatus=channel.getExitStatus();\n      return exitStatus;\n    }\n   }\n  finally {\n    client.stop();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2020,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (SshClient client=SshClient.setUpDefaultClient()){\n  KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n    @Override public boolean verifyServerKey(    ClientSession clientSession,    SocketAddress remoteAddress,    PublicKey serverKey){\n      CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n      return !strictHostKey;\n    }\n  }\n,true);\n  client.setServerKeyVerifier(verifier);\n  client.start();\n  ConnectFuture cf=client.connect(user,sshHost,sshPort);\n  cf.await();\n  try (ClientSession session=cf.getSession()){\n    for (    KeyPair pair : provider.getKeys()) {\n      CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n      session.addPublicKeyIdentity(pair);\n    }\n    session.auth().verify(10000L);\n    try (ClientChannel channel=session.createExecChannel(command.toString())){\n      channel.setIn(new NoCloseInputStream(System.in));\n      channel.setOut(new NoCloseOutputStream(System.out));\n      channel.setErr(new NoCloseOutputStream(System.err));\n      WaitableFuture wf=channel.open();\n      wf.await();\n      Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n      if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n        throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n      }\n      Integer exitStatus=channel.getExitStatus();\n      return exitStatus;\n    }\n   }\n  finally {\n    client.stop();\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 229,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3005,
        "startLineNumber" : 64,
        "startColumnNumber" : 157,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING);\n  URL url=new URL(jenkinsUrl + \"login\");\n  URLConnection conn=openConnection(url);\n  CLI.verifyJenkinsConnection(conn);\n  String endpointDescription=conn.getHeaderField(\"X-SSH-Endpoint\");\n  if (endpointDescription == null) {\n    CLI.LOGGER.warning(\"No header 'X-SSH-Endpoint' returned by Jenkins\");\n    return -1;\n  }\n  CLI.LOGGER.log(FINE,\"Connecting via SSH to: {0}\",endpointDescription);\n  int sshPort=Integer.parseInt(endpointDescription.split(\":\")[1]);\n  String sshHost=endpointDescription.split(\":\")[0];\n  StringBuilder command=new StringBuilder();\n  for (  String arg : args) {\n    command.append(QuotedStringTokenizer.quote(arg));\n    command.append(' ');\n  }\n  try (SshClient client=SshClient.setUpDefaultClient()){\n    KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n      @Override public boolean verifyServerKey(      ClientSession clientSession,      SocketAddress remoteAddress,      PublicKey serverKey){\n        CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n        return !strictHostKey;\n      }\n    }\n,true);\n    client.setServerKeyVerifier(verifier);\n    client.start();\n    ConnectFuture cf=client.connect(user,sshHost,sshPort);\n    cf.await();\n    try (ClientSession session=cf.getSession()){\n      for (      KeyPair pair : provider.getKeys()) {\n        CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n        session.addPublicKeyIdentity(pair);\n      }\n      session.auth().verify(10000L);\n      try (ClientChannel channel=session.createExecChannel(command.toString())){\n        channel.setIn(new NoCloseInputStream(System.in));\n        channel.setOut(new NoCloseOutputStream(System.out));\n        channel.setErr(new NoCloseOutputStream(System.err));\n        WaitableFuture wf=channel.open();\n        wf.await();\n        Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n        if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n          throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n        }\n        Integer exitStatus=channel.getExitStatus();\n        return exitStatus;\n      }\n     }\n  finally {\n      client.stop();\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 353,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3158,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static int sshConnection(String jenkinsUrl,String user,List<String> args,PrivateKeyProvider provider,final boolean strictHostKey) throws IOException {\n  Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING);\n  URL url=new URL(jenkinsUrl + \"login\");\n  URLConnection conn=openConnection(url);\n  CLI.verifyJenkinsConnection(conn);\n  String endpointDescription=conn.getHeaderField(\"X-SSH-Endpoint\");\n  if (endpointDescription == null) {\n    CLI.LOGGER.warning(\"No header 'X-SSH-Endpoint' returned by Jenkins\");\n    return -1;\n  }\n  CLI.LOGGER.log(FINE,\"Connecting via SSH to: {0}\",endpointDescription);\n  int sshPort=Integer.parseInt(endpointDescription.split(\":\")[1]);\n  String sshHost=endpointDescription.split(\":\")[0];\n  StringBuilder command=new StringBuilder();\n  for (  String arg : args) {\n    command.append(QuotedStringTokenizer.quote(arg));\n    command.append(' ');\n  }\n  try (SshClient client=SshClient.setUpDefaultClient()){\n    KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n      @Override public boolean verifyServerKey(      ClientSession clientSession,      SocketAddress remoteAddress,      PublicKey serverKey){\n        CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n        return !strictHostKey;\n      }\n    }\n,true);\n    client.setServerKeyVerifier(verifier);\n    client.start();\n    ConnectFuture cf=client.connect(user,sshHost,sshPort);\n    cf.await();\n    try (ClientSession session=cf.getSession()){\n      for (      KeyPair pair : provider.getKeys()) {\n        CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n        session.addPublicKeyIdentity(pair);\n      }\n      session.auth().verify(10000L);\n      try (ClientChannel channel=session.createExecChannel(command.toString())){\n        channel.setIn(new NoCloseInputStream(System.in));\n        channel.setOut(new NoCloseOutputStream(System.out));\n        channel.setErr(new NoCloseOutputStream(System.err));\n        WaitableFuture wf=channel.open();\n        wf.await();\n        Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n        if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n          throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n        }\n        Integer exitStatus=channel.getExitStatus();\n        return exitStatus;\n      }\n     }\n  finally {\n      client.stop();\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 382,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 111,
        "startColumnNumber" : 20,
        "endLineNumber" : 111,
        "endColumnNumber" : 69
      },
      "nodeContext" : "channel.setIn(new NoCloseInputStream(System.in));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "hudson.cli.ClientChannel"
  }, {
    "nodeContext" : "channel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 112,
      "startColumnNumber" : 20,
      "endLineNumber" : 112,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 112,
        "startColumnNumber" : 20,
        "endLineNumber" : 112,
        "endColumnNumber" : 71
      },
      "nodeContext" : "channel.setOut(new NoCloseOutputStream(System.out))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 112,
        "startColumnNumber" : 20,
        "endLineNumber" : 112,
        "endColumnNumber" : 72
      },
      "nodeContext" : "channel.setOut(new NoCloseOutputStream(System.out));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 787,
        "startLineNumber" : 110,
        "startColumnNumber" : 92,
        "endLineNumber" : 126,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  channel.setIn(new NoCloseInputStream(System.in));\n  channel.setOut(new NoCloseOutputStream(System.out));\n  channel.setErr(new NoCloseOutputStream(System.err));\n  WaitableFuture wf=channel.open();\n  wf.await();\n  Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n  if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n    throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n  }\n  Integer exitStatus=channel.getExitStatus();\n  return exitStatus;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 110,
        "startColumnNumber" : 16,
        "endLineNumber" : 126,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try (ClientChannel channel=session.createExecChannel(command.toString())){\n  channel.setIn(new NoCloseInputStream(System.in));\n  channel.setOut(new NoCloseOutputStream(System.out));\n  channel.setErr(new NoCloseOutputStream(System.err));\n  WaitableFuture wf=channel.open();\n  wf.await();\n  Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n  if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n    throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n  }\n  Integer exitStatus=channel.getExitStatus();\n  return exitStatus;\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 98,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1187,
        "startLineNumber" : 103,
        "startColumnNumber" : 58,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (  KeyPair pair : provider.getKeys()) {\n    CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n    session.addPublicKeyIdentity(pair);\n  }\n  session.auth().verify(10000L);\n  try (ClientChannel channel=session.createExecChannel(command.toString())){\n    channel.setIn(new NoCloseInputStream(System.in));\n    channel.setOut(new NoCloseOutputStream(System.out));\n    channel.setErr(new NoCloseOutputStream(System.err));\n    WaitableFuture wf=channel.open();\n    wf.await();\n    Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n    if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n      throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n    }\n    Integer exitStatus=channel.getExitStatus();\n    return exitStatus;\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1290,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try (ClientSession session=cf.getSession()){\n  for (  KeyPair pair : provider.getKeys()) {\n    CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n    session.addPublicKeyIdentity(pair);\n  }\n  session.auth().verify(10000L);\n  try (ClientChannel channel=session.createExecChannel(command.toString())){\n    channel.setIn(new NoCloseInputStream(System.in));\n    channel.setOut(new NoCloseOutputStream(System.out));\n    channel.setErr(new NoCloseOutputStream(System.err));\n    WaitableFuture wf=channel.open();\n    wf.await();\n    Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n    if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n      throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n    }\n    Integer exitStatus=channel.getExitStatus();\n    return exitStatus;\n  }\n }\n  finally {\n  client.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 147,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1965,
        "startLineNumber" : 88,
        "startColumnNumber" : 63,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n    @Override public boolean verifyServerKey(    ClientSession clientSession,    SocketAddress remoteAddress,    PublicKey serverKey){\n      CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n      return !strictHostKey;\n    }\n  }\n,true);\n  client.setServerKeyVerifier(verifier);\n  client.start();\n  ConnectFuture cf=client.connect(user,sshHost,sshPort);\n  cf.await();\n  try (ClientSession session=cf.getSession()){\n    for (    KeyPair pair : provider.getKeys()) {\n      CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n      session.addPublicKeyIdentity(pair);\n    }\n    session.auth().verify(10000L);\n    try (ClientChannel channel=session.createExecChannel(command.toString())){\n      channel.setIn(new NoCloseInputStream(System.in));\n      channel.setOut(new NoCloseOutputStream(System.out));\n      channel.setErr(new NoCloseOutputStream(System.err));\n      WaitableFuture wf=channel.open();\n      wf.await();\n      Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n      if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n        throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n      }\n      Integer exitStatus=channel.getExitStatus();\n      return exitStatus;\n    }\n   }\n  finally {\n    client.stop();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2020,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (SshClient client=SshClient.setUpDefaultClient()){\n  KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n    @Override public boolean verifyServerKey(    ClientSession clientSession,    SocketAddress remoteAddress,    PublicKey serverKey){\n      CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n      return !strictHostKey;\n    }\n  }\n,true);\n  client.setServerKeyVerifier(verifier);\n  client.start();\n  ConnectFuture cf=client.connect(user,sshHost,sshPort);\n  cf.await();\n  try (ClientSession session=cf.getSession()){\n    for (    KeyPair pair : provider.getKeys()) {\n      CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n      session.addPublicKeyIdentity(pair);\n    }\n    session.auth().verify(10000L);\n    try (ClientChannel channel=session.createExecChannel(command.toString())){\n      channel.setIn(new NoCloseInputStream(System.in));\n      channel.setOut(new NoCloseOutputStream(System.out));\n      channel.setErr(new NoCloseOutputStream(System.err));\n      WaitableFuture wf=channel.open();\n      wf.await();\n      Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n      if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n        throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n      }\n      Integer exitStatus=channel.getExitStatus();\n      return exitStatus;\n    }\n   }\n  finally {\n    client.stop();\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 229,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3005,
        "startLineNumber" : 64,
        "startColumnNumber" : 157,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING);\n  URL url=new URL(jenkinsUrl + \"login\");\n  URLConnection conn=openConnection(url);\n  CLI.verifyJenkinsConnection(conn);\n  String endpointDescription=conn.getHeaderField(\"X-SSH-Endpoint\");\n  if (endpointDescription == null) {\n    CLI.LOGGER.warning(\"No header 'X-SSH-Endpoint' returned by Jenkins\");\n    return -1;\n  }\n  CLI.LOGGER.log(FINE,\"Connecting via SSH to: {0}\",endpointDescription);\n  int sshPort=Integer.parseInt(endpointDescription.split(\":\")[1]);\n  String sshHost=endpointDescription.split(\":\")[0];\n  StringBuilder command=new StringBuilder();\n  for (  String arg : args) {\n    command.append(QuotedStringTokenizer.quote(arg));\n    command.append(' ');\n  }\n  try (SshClient client=SshClient.setUpDefaultClient()){\n    KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n      @Override public boolean verifyServerKey(      ClientSession clientSession,      SocketAddress remoteAddress,      PublicKey serverKey){\n        CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n        return !strictHostKey;\n      }\n    }\n,true);\n    client.setServerKeyVerifier(verifier);\n    client.start();\n    ConnectFuture cf=client.connect(user,sshHost,sshPort);\n    cf.await();\n    try (ClientSession session=cf.getSession()){\n      for (      KeyPair pair : provider.getKeys()) {\n        CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n        session.addPublicKeyIdentity(pair);\n      }\n      session.auth().verify(10000L);\n      try (ClientChannel channel=session.createExecChannel(command.toString())){\n        channel.setIn(new NoCloseInputStream(System.in));\n        channel.setOut(new NoCloseOutputStream(System.out));\n        channel.setErr(new NoCloseOutputStream(System.err));\n        WaitableFuture wf=channel.open();\n        wf.await();\n        Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n        if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n          throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n        }\n        Integer exitStatus=channel.getExitStatus();\n        return exitStatus;\n      }\n     }\n  finally {\n      client.stop();\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 353,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3158,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static int sshConnection(String jenkinsUrl,String user,List<String> args,PrivateKeyProvider provider,final boolean strictHostKey) throws IOException {\n  Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING);\n  URL url=new URL(jenkinsUrl + \"login\");\n  URLConnection conn=openConnection(url);\n  CLI.verifyJenkinsConnection(conn);\n  String endpointDescription=conn.getHeaderField(\"X-SSH-Endpoint\");\n  if (endpointDescription == null) {\n    CLI.LOGGER.warning(\"No header 'X-SSH-Endpoint' returned by Jenkins\");\n    return -1;\n  }\n  CLI.LOGGER.log(FINE,\"Connecting via SSH to: {0}\",endpointDescription);\n  int sshPort=Integer.parseInt(endpointDescription.split(\":\")[1]);\n  String sshHost=endpointDescription.split(\":\")[0];\n  StringBuilder command=new StringBuilder();\n  for (  String arg : args) {\n    command.append(QuotedStringTokenizer.quote(arg));\n    command.append(' ');\n  }\n  try (SshClient client=SshClient.setUpDefaultClient()){\n    KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n      @Override public boolean verifyServerKey(      ClientSession clientSession,      SocketAddress remoteAddress,      PublicKey serverKey){\n        CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n        return !strictHostKey;\n      }\n    }\n,true);\n    client.setServerKeyVerifier(verifier);\n    client.start();\n    ConnectFuture cf=client.connect(user,sshHost,sshPort);\n    cf.await();\n    try (ClientSession session=cf.getSession()){\n      for (      KeyPair pair : provider.getKeys()) {\n        CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n        session.addPublicKeyIdentity(pair);\n      }\n      session.auth().verify(10000L);\n      try (ClientChannel channel=session.createExecChannel(command.toString())){\n        channel.setIn(new NoCloseInputStream(System.in));\n        channel.setOut(new NoCloseOutputStream(System.out));\n        channel.setErr(new NoCloseOutputStream(System.err));\n        WaitableFuture wf=channel.open();\n        wf.await();\n        Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n        if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n          throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n        }\n        Integer exitStatus=channel.getExitStatus();\n        return exitStatus;\n      }\n     }\n  finally {\n      client.stop();\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 382,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 112,
        "startColumnNumber" : 20,
        "endLineNumber" : 112,
        "endColumnNumber" : 72
      },
      "nodeContext" : "channel.setOut(new NoCloseOutputStream(System.out));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "hudson.cli.ClientChannel"
  }, {
    "nodeContext" : "channel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 113,
      "startColumnNumber" : 20,
      "endLineNumber" : 113,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 113,
        "endColumnNumber" : 71
      },
      "nodeContext" : "channel.setErr(new NoCloseOutputStream(System.err))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 113,
        "endColumnNumber" : 72
      },
      "nodeContext" : "channel.setErr(new NoCloseOutputStream(System.err));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 787,
        "startLineNumber" : 110,
        "startColumnNumber" : 92,
        "endLineNumber" : 126,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  channel.setIn(new NoCloseInputStream(System.in));\n  channel.setOut(new NoCloseOutputStream(System.out));\n  channel.setErr(new NoCloseOutputStream(System.err));\n  WaitableFuture wf=channel.open();\n  wf.await();\n  Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n  if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n    throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n  }\n  Integer exitStatus=channel.getExitStatus();\n  return exitStatus;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 110,
        "startColumnNumber" : 16,
        "endLineNumber" : 126,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try (ClientChannel channel=session.createExecChannel(command.toString())){\n  channel.setIn(new NoCloseInputStream(System.in));\n  channel.setOut(new NoCloseOutputStream(System.out));\n  channel.setErr(new NoCloseOutputStream(System.err));\n  WaitableFuture wf=channel.open();\n  wf.await();\n  Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n  if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n    throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n  }\n  Integer exitStatus=channel.getExitStatus();\n  return exitStatus;\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 98,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1187,
        "startLineNumber" : 103,
        "startColumnNumber" : 58,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (  KeyPair pair : provider.getKeys()) {\n    CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n    session.addPublicKeyIdentity(pair);\n  }\n  session.auth().verify(10000L);\n  try (ClientChannel channel=session.createExecChannel(command.toString())){\n    channel.setIn(new NoCloseInputStream(System.in));\n    channel.setOut(new NoCloseOutputStream(System.out));\n    channel.setErr(new NoCloseOutputStream(System.err));\n    WaitableFuture wf=channel.open();\n    wf.await();\n    Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n    if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n      throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n    }\n    Integer exitStatus=channel.getExitStatus();\n    return exitStatus;\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1290,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try (ClientSession session=cf.getSession()){\n  for (  KeyPair pair : provider.getKeys()) {\n    CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n    session.addPublicKeyIdentity(pair);\n  }\n  session.auth().verify(10000L);\n  try (ClientChannel channel=session.createExecChannel(command.toString())){\n    channel.setIn(new NoCloseInputStream(System.in));\n    channel.setOut(new NoCloseOutputStream(System.out));\n    channel.setErr(new NoCloseOutputStream(System.err));\n    WaitableFuture wf=channel.open();\n    wf.await();\n    Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n    if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n      throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n    }\n    Integer exitStatus=channel.getExitStatus();\n    return exitStatus;\n  }\n }\n  finally {\n  client.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 147,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1965,
        "startLineNumber" : 88,
        "startColumnNumber" : 63,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n    @Override public boolean verifyServerKey(    ClientSession clientSession,    SocketAddress remoteAddress,    PublicKey serverKey){\n      CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n      return !strictHostKey;\n    }\n  }\n,true);\n  client.setServerKeyVerifier(verifier);\n  client.start();\n  ConnectFuture cf=client.connect(user,sshHost,sshPort);\n  cf.await();\n  try (ClientSession session=cf.getSession()){\n    for (    KeyPair pair : provider.getKeys()) {\n      CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n      session.addPublicKeyIdentity(pair);\n    }\n    session.auth().verify(10000L);\n    try (ClientChannel channel=session.createExecChannel(command.toString())){\n      channel.setIn(new NoCloseInputStream(System.in));\n      channel.setOut(new NoCloseOutputStream(System.out));\n      channel.setErr(new NoCloseOutputStream(System.err));\n      WaitableFuture wf=channel.open();\n      wf.await();\n      Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n      if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n        throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n      }\n      Integer exitStatus=channel.getExitStatus();\n      return exitStatus;\n    }\n   }\n  finally {\n    client.stop();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2020,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (SshClient client=SshClient.setUpDefaultClient()){\n  KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n    @Override public boolean verifyServerKey(    ClientSession clientSession,    SocketAddress remoteAddress,    PublicKey serverKey){\n      CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n      return !strictHostKey;\n    }\n  }\n,true);\n  client.setServerKeyVerifier(verifier);\n  client.start();\n  ConnectFuture cf=client.connect(user,sshHost,sshPort);\n  cf.await();\n  try (ClientSession session=cf.getSession()){\n    for (    KeyPair pair : provider.getKeys()) {\n      CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n      session.addPublicKeyIdentity(pair);\n    }\n    session.auth().verify(10000L);\n    try (ClientChannel channel=session.createExecChannel(command.toString())){\n      channel.setIn(new NoCloseInputStream(System.in));\n      channel.setOut(new NoCloseOutputStream(System.out));\n      channel.setErr(new NoCloseOutputStream(System.err));\n      WaitableFuture wf=channel.open();\n      wf.await();\n      Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n      if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n        throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n      }\n      Integer exitStatus=channel.getExitStatus();\n      return exitStatus;\n    }\n   }\n  finally {\n    client.stop();\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 229,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3005,
        "startLineNumber" : 64,
        "startColumnNumber" : 157,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING);\n  URL url=new URL(jenkinsUrl + \"login\");\n  URLConnection conn=openConnection(url);\n  CLI.verifyJenkinsConnection(conn);\n  String endpointDescription=conn.getHeaderField(\"X-SSH-Endpoint\");\n  if (endpointDescription == null) {\n    CLI.LOGGER.warning(\"No header 'X-SSH-Endpoint' returned by Jenkins\");\n    return -1;\n  }\n  CLI.LOGGER.log(FINE,\"Connecting via SSH to: {0}\",endpointDescription);\n  int sshPort=Integer.parseInt(endpointDescription.split(\":\")[1]);\n  String sshHost=endpointDescription.split(\":\")[0];\n  StringBuilder command=new StringBuilder();\n  for (  String arg : args) {\n    command.append(QuotedStringTokenizer.quote(arg));\n    command.append(' ');\n  }\n  try (SshClient client=SshClient.setUpDefaultClient()){\n    KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n      @Override public boolean verifyServerKey(      ClientSession clientSession,      SocketAddress remoteAddress,      PublicKey serverKey){\n        CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n        return !strictHostKey;\n      }\n    }\n,true);\n    client.setServerKeyVerifier(verifier);\n    client.start();\n    ConnectFuture cf=client.connect(user,sshHost,sshPort);\n    cf.await();\n    try (ClientSession session=cf.getSession()){\n      for (      KeyPair pair : provider.getKeys()) {\n        CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n        session.addPublicKeyIdentity(pair);\n      }\n      session.auth().verify(10000L);\n      try (ClientChannel channel=session.createExecChannel(command.toString())){\n        channel.setIn(new NoCloseInputStream(System.in));\n        channel.setOut(new NoCloseOutputStream(System.out));\n        channel.setErr(new NoCloseOutputStream(System.err));\n        WaitableFuture wf=channel.open();\n        wf.await();\n        Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n        if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n          throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n        }\n        Integer exitStatus=channel.getExitStatus();\n        return exitStatus;\n      }\n     }\n  finally {\n      client.stop();\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 353,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3158,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static int sshConnection(String jenkinsUrl,String user,List<String> args,PrivateKeyProvider provider,final boolean strictHostKey) throws IOException {\n  Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING);\n  URL url=new URL(jenkinsUrl + \"login\");\n  URLConnection conn=openConnection(url);\n  CLI.verifyJenkinsConnection(conn);\n  String endpointDescription=conn.getHeaderField(\"X-SSH-Endpoint\");\n  if (endpointDescription == null) {\n    CLI.LOGGER.warning(\"No header 'X-SSH-Endpoint' returned by Jenkins\");\n    return -1;\n  }\n  CLI.LOGGER.log(FINE,\"Connecting via SSH to: {0}\",endpointDescription);\n  int sshPort=Integer.parseInt(endpointDescription.split(\":\")[1]);\n  String sshHost=endpointDescription.split(\":\")[0];\n  StringBuilder command=new StringBuilder();\n  for (  String arg : args) {\n    command.append(QuotedStringTokenizer.quote(arg));\n    command.append(' ');\n  }\n  try (SshClient client=SshClient.setUpDefaultClient()){\n    KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n      @Override public boolean verifyServerKey(      ClientSession clientSession,      SocketAddress remoteAddress,      PublicKey serverKey){\n        CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n        return !strictHostKey;\n      }\n    }\n,true);\n    client.setServerKeyVerifier(verifier);\n    client.start();\n    ConnectFuture cf=client.connect(user,sshHost,sshPort);\n    cf.await();\n    try (ClientSession session=cf.getSession()){\n      for (      KeyPair pair : provider.getKeys()) {\n        CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n        session.addPublicKeyIdentity(pair);\n      }\n      session.auth().verify(10000L);\n      try (ClientChannel channel=session.createExecChannel(command.toString())){\n        channel.setIn(new NoCloseInputStream(System.in));\n        channel.setOut(new NoCloseOutputStream(System.out));\n        channel.setErr(new NoCloseOutputStream(System.err));\n        WaitableFuture wf=channel.open();\n        wf.await();\n        Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n        if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n          throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n        }\n        Integer exitStatus=channel.getExitStatus();\n        return exitStatus;\n      }\n     }\n  finally {\n      client.stop();\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 382,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 113,
        "endColumnNumber" : 72
      },
      "nodeContext" : "channel.setErr(new NoCloseOutputStream(System.err));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "hudson.cli.ClientChannel"
  }, {
    "nodeContext" : "channel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 114,
      "startColumnNumber" : 40,
      "endLineNumber" : 114,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 114,
        "startColumnNumber" : 40,
        "endLineNumber" : 114,
        "endColumnNumber" : 54
      },
      "nodeContext" : "channel.open()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 114,
        "startColumnNumber" : 35,
        "endLineNumber" : 114,
        "endColumnNumber" : 54
      },
      "nodeContext" : "wf=channel.open()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 114,
        "startColumnNumber" : 20,
        "endLineNumber" : 114,
        "endColumnNumber" : 55
      },
      "nodeContext" : "WaitableFuture wf=channel.open();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 787,
        "startLineNumber" : 110,
        "startColumnNumber" : 92,
        "endLineNumber" : 126,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  channel.setIn(new NoCloseInputStream(System.in));\n  channel.setOut(new NoCloseOutputStream(System.out));\n  channel.setErr(new NoCloseOutputStream(System.err));\n  WaitableFuture wf=channel.open();\n  wf.await();\n  Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n  if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n    throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n  }\n  Integer exitStatus=channel.getExitStatus();\n  return exitStatus;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 110,
        "startColumnNumber" : 16,
        "endLineNumber" : 126,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try (ClientChannel channel=session.createExecChannel(command.toString())){\n  channel.setIn(new NoCloseInputStream(System.in));\n  channel.setOut(new NoCloseOutputStream(System.out));\n  channel.setErr(new NoCloseOutputStream(System.err));\n  WaitableFuture wf=channel.open();\n  wf.await();\n  Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n  if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n    throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n  }\n  Integer exitStatus=channel.getExitStatus();\n  return exitStatus;\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 98,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1187,
        "startLineNumber" : 103,
        "startColumnNumber" : 58,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (  KeyPair pair : provider.getKeys()) {\n    CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n    session.addPublicKeyIdentity(pair);\n  }\n  session.auth().verify(10000L);\n  try (ClientChannel channel=session.createExecChannel(command.toString())){\n    channel.setIn(new NoCloseInputStream(System.in));\n    channel.setOut(new NoCloseOutputStream(System.out));\n    channel.setErr(new NoCloseOutputStream(System.err));\n    WaitableFuture wf=channel.open();\n    wf.await();\n    Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n    if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n      throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n    }\n    Integer exitStatus=channel.getExitStatus();\n    return exitStatus;\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1290,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try (ClientSession session=cf.getSession()){\n  for (  KeyPair pair : provider.getKeys()) {\n    CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n    session.addPublicKeyIdentity(pair);\n  }\n  session.auth().verify(10000L);\n  try (ClientChannel channel=session.createExecChannel(command.toString())){\n    channel.setIn(new NoCloseInputStream(System.in));\n    channel.setOut(new NoCloseOutputStream(System.out));\n    channel.setErr(new NoCloseOutputStream(System.err));\n    WaitableFuture wf=channel.open();\n    wf.await();\n    Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n    if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n      throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n    }\n    Integer exitStatus=channel.getExitStatus();\n    return exitStatus;\n  }\n }\n  finally {\n  client.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 147,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1965,
        "startLineNumber" : 88,
        "startColumnNumber" : 63,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n    @Override public boolean verifyServerKey(    ClientSession clientSession,    SocketAddress remoteAddress,    PublicKey serverKey){\n      CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n      return !strictHostKey;\n    }\n  }\n,true);\n  client.setServerKeyVerifier(verifier);\n  client.start();\n  ConnectFuture cf=client.connect(user,sshHost,sshPort);\n  cf.await();\n  try (ClientSession session=cf.getSession()){\n    for (    KeyPair pair : provider.getKeys()) {\n      CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n      session.addPublicKeyIdentity(pair);\n    }\n    session.auth().verify(10000L);\n    try (ClientChannel channel=session.createExecChannel(command.toString())){\n      channel.setIn(new NoCloseInputStream(System.in));\n      channel.setOut(new NoCloseOutputStream(System.out));\n      channel.setErr(new NoCloseOutputStream(System.err));\n      WaitableFuture wf=channel.open();\n      wf.await();\n      Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n      if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n        throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n      }\n      Integer exitStatus=channel.getExitStatus();\n      return exitStatus;\n    }\n   }\n  finally {\n    client.stop();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2020,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (SshClient client=SshClient.setUpDefaultClient()){\n  KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n    @Override public boolean verifyServerKey(    ClientSession clientSession,    SocketAddress remoteAddress,    PublicKey serverKey){\n      CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n      return !strictHostKey;\n    }\n  }\n,true);\n  client.setServerKeyVerifier(verifier);\n  client.start();\n  ConnectFuture cf=client.connect(user,sshHost,sshPort);\n  cf.await();\n  try (ClientSession session=cf.getSession()){\n    for (    KeyPair pair : provider.getKeys()) {\n      CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n      session.addPublicKeyIdentity(pair);\n    }\n    session.auth().verify(10000L);\n    try (ClientChannel channel=session.createExecChannel(command.toString())){\n      channel.setIn(new NoCloseInputStream(System.in));\n      channel.setOut(new NoCloseOutputStream(System.out));\n      channel.setErr(new NoCloseOutputStream(System.err));\n      WaitableFuture wf=channel.open();\n      wf.await();\n      Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n      if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n        throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n      }\n      Integer exitStatus=channel.getExitStatus();\n      return exitStatus;\n    }\n   }\n  finally {\n    client.stop();\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 229,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3005,
        "startLineNumber" : 64,
        "startColumnNumber" : 157,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING);\n  URL url=new URL(jenkinsUrl + \"login\");\n  URLConnection conn=openConnection(url);\n  CLI.verifyJenkinsConnection(conn);\n  String endpointDescription=conn.getHeaderField(\"X-SSH-Endpoint\");\n  if (endpointDescription == null) {\n    CLI.LOGGER.warning(\"No header 'X-SSH-Endpoint' returned by Jenkins\");\n    return -1;\n  }\n  CLI.LOGGER.log(FINE,\"Connecting via SSH to: {0}\",endpointDescription);\n  int sshPort=Integer.parseInt(endpointDescription.split(\":\")[1]);\n  String sshHost=endpointDescription.split(\":\")[0];\n  StringBuilder command=new StringBuilder();\n  for (  String arg : args) {\n    command.append(QuotedStringTokenizer.quote(arg));\n    command.append(' ');\n  }\n  try (SshClient client=SshClient.setUpDefaultClient()){\n    KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n      @Override public boolean verifyServerKey(      ClientSession clientSession,      SocketAddress remoteAddress,      PublicKey serverKey){\n        CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n        return !strictHostKey;\n      }\n    }\n,true);\n    client.setServerKeyVerifier(verifier);\n    client.start();\n    ConnectFuture cf=client.connect(user,sshHost,sshPort);\n    cf.await();\n    try (ClientSession session=cf.getSession()){\n      for (      KeyPair pair : provider.getKeys()) {\n        CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n        session.addPublicKeyIdentity(pair);\n      }\n      session.auth().verify(10000L);\n      try (ClientChannel channel=session.createExecChannel(command.toString())){\n        channel.setIn(new NoCloseInputStream(System.in));\n        channel.setOut(new NoCloseOutputStream(System.out));\n        channel.setErr(new NoCloseOutputStream(System.err));\n        WaitableFuture wf=channel.open();\n        wf.await();\n        Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n        if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n          throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n        }\n        Integer exitStatus=channel.getExitStatus();\n        return exitStatus;\n      }\n     }\n  finally {\n      client.stop();\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 353,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3158,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static int sshConnection(String jenkinsUrl,String user,List<String> args,PrivateKeyProvider provider,final boolean strictHostKey) throws IOException {\n  Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING);\n  URL url=new URL(jenkinsUrl + \"login\");\n  URLConnection conn=openConnection(url);\n  CLI.verifyJenkinsConnection(conn);\n  String endpointDescription=conn.getHeaderField(\"X-SSH-Endpoint\");\n  if (endpointDescription == null) {\n    CLI.LOGGER.warning(\"No header 'X-SSH-Endpoint' returned by Jenkins\");\n    return -1;\n  }\n  CLI.LOGGER.log(FINE,\"Connecting via SSH to: {0}\",endpointDescription);\n  int sshPort=Integer.parseInt(endpointDescription.split(\":\")[1]);\n  String sshHost=endpointDescription.split(\":\")[0];\n  StringBuilder command=new StringBuilder();\n  for (  String arg : args) {\n    command.append(QuotedStringTokenizer.quote(arg));\n    command.append(' ');\n  }\n  try (SshClient client=SshClient.setUpDefaultClient()){\n    KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n      @Override public boolean verifyServerKey(      ClientSession clientSession,      SocketAddress remoteAddress,      PublicKey serverKey){\n        CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n        return !strictHostKey;\n      }\n    }\n,true);\n    client.setServerKeyVerifier(verifier);\n    client.start();\n    ConnectFuture cf=client.connect(user,sshHost,sshPort);\n    cf.await();\n    try (ClientSession session=cf.getSession()){\n      for (      KeyPair pair : provider.getKeys()) {\n        CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n        session.addPublicKeyIdentity(pair);\n      }\n      session.auth().verify(10000L);\n      try (ClientChannel channel=session.createExecChannel(command.toString())){\n        channel.setIn(new NoCloseInputStream(System.in));\n        channel.setOut(new NoCloseOutputStream(System.out));\n        channel.setErr(new NoCloseOutputStream(System.err));\n        WaitableFuture wf=channel.open();\n        wf.await();\n        Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n        if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n          throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n        }\n        Integer exitStatus=channel.getExitStatus();\n        return exitStatus;\n      }\n     }\n  finally {\n      client.stop();\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 382,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 114,
        "startColumnNumber" : 20,
        "endLineNumber" : 114,
        "endColumnNumber" : 55
      },
      "nodeContext" : "WaitableFuture wf=channel.open();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "hudson.cli.ClientChannel"
  }, {
    "nodeContext" : "channel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 117,
      "startColumnNumber" : 55,
      "endLineNumber" : 117,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 117,
        "startColumnNumber" : 55,
        "endLineNumber" : 117,
        "endColumnNumber" : 128
      },
      "nodeContext" : "channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 117,
        "startColumnNumber" : 44,
        "endLineNumber" : 117,
        "endColumnNumber" : 128
      },
      "nodeContext" : "waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 117,
        "startColumnNumber" : 20,
        "endLineNumber" : 117,
        "endColumnNumber" : 129
      },
      "nodeContext" : "Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 787,
        "startLineNumber" : 110,
        "startColumnNumber" : 92,
        "endLineNumber" : 126,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  channel.setIn(new NoCloseInputStream(System.in));\n  channel.setOut(new NoCloseOutputStream(System.out));\n  channel.setErr(new NoCloseOutputStream(System.err));\n  WaitableFuture wf=channel.open();\n  wf.await();\n  Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n  if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n    throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n  }\n  Integer exitStatus=channel.getExitStatus();\n  return exitStatus;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 110,
        "startColumnNumber" : 16,
        "endLineNumber" : 126,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try (ClientChannel channel=session.createExecChannel(command.toString())){\n  channel.setIn(new NoCloseInputStream(System.in));\n  channel.setOut(new NoCloseOutputStream(System.out));\n  channel.setErr(new NoCloseOutputStream(System.err));\n  WaitableFuture wf=channel.open();\n  wf.await();\n  Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n  if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n    throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n  }\n  Integer exitStatus=channel.getExitStatus();\n  return exitStatus;\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 98,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1187,
        "startLineNumber" : 103,
        "startColumnNumber" : 58,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (  KeyPair pair : provider.getKeys()) {\n    CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n    session.addPublicKeyIdentity(pair);\n  }\n  session.auth().verify(10000L);\n  try (ClientChannel channel=session.createExecChannel(command.toString())){\n    channel.setIn(new NoCloseInputStream(System.in));\n    channel.setOut(new NoCloseOutputStream(System.out));\n    channel.setErr(new NoCloseOutputStream(System.err));\n    WaitableFuture wf=channel.open();\n    wf.await();\n    Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n    if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n      throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n    }\n    Integer exitStatus=channel.getExitStatus();\n    return exitStatus;\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1290,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try (ClientSession session=cf.getSession()){\n  for (  KeyPair pair : provider.getKeys()) {\n    CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n    session.addPublicKeyIdentity(pair);\n  }\n  session.auth().verify(10000L);\n  try (ClientChannel channel=session.createExecChannel(command.toString())){\n    channel.setIn(new NoCloseInputStream(System.in));\n    channel.setOut(new NoCloseOutputStream(System.out));\n    channel.setErr(new NoCloseOutputStream(System.err));\n    WaitableFuture wf=channel.open();\n    wf.await();\n    Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n    if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n      throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n    }\n    Integer exitStatus=channel.getExitStatus();\n    return exitStatus;\n  }\n }\n  finally {\n  client.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 147,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1965,
        "startLineNumber" : 88,
        "startColumnNumber" : 63,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n    @Override public boolean verifyServerKey(    ClientSession clientSession,    SocketAddress remoteAddress,    PublicKey serverKey){\n      CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n      return !strictHostKey;\n    }\n  }\n,true);\n  client.setServerKeyVerifier(verifier);\n  client.start();\n  ConnectFuture cf=client.connect(user,sshHost,sshPort);\n  cf.await();\n  try (ClientSession session=cf.getSession()){\n    for (    KeyPair pair : provider.getKeys()) {\n      CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n      session.addPublicKeyIdentity(pair);\n    }\n    session.auth().verify(10000L);\n    try (ClientChannel channel=session.createExecChannel(command.toString())){\n      channel.setIn(new NoCloseInputStream(System.in));\n      channel.setOut(new NoCloseOutputStream(System.out));\n      channel.setErr(new NoCloseOutputStream(System.err));\n      WaitableFuture wf=channel.open();\n      wf.await();\n      Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n      if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n        throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n      }\n      Integer exitStatus=channel.getExitStatus();\n      return exitStatus;\n    }\n   }\n  finally {\n    client.stop();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2020,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (SshClient client=SshClient.setUpDefaultClient()){\n  KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n    @Override public boolean verifyServerKey(    ClientSession clientSession,    SocketAddress remoteAddress,    PublicKey serverKey){\n      CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n      return !strictHostKey;\n    }\n  }\n,true);\n  client.setServerKeyVerifier(verifier);\n  client.start();\n  ConnectFuture cf=client.connect(user,sshHost,sshPort);\n  cf.await();\n  try (ClientSession session=cf.getSession()){\n    for (    KeyPair pair : provider.getKeys()) {\n      CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n      session.addPublicKeyIdentity(pair);\n    }\n    session.auth().verify(10000L);\n    try (ClientChannel channel=session.createExecChannel(command.toString())){\n      channel.setIn(new NoCloseInputStream(System.in));\n      channel.setOut(new NoCloseOutputStream(System.out));\n      channel.setErr(new NoCloseOutputStream(System.err));\n      WaitableFuture wf=channel.open();\n      wf.await();\n      Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n      if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n        throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n      }\n      Integer exitStatus=channel.getExitStatus();\n      return exitStatus;\n    }\n   }\n  finally {\n    client.stop();\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 229,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3005,
        "startLineNumber" : 64,
        "startColumnNumber" : 157,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING);\n  URL url=new URL(jenkinsUrl + \"login\");\n  URLConnection conn=openConnection(url);\n  CLI.verifyJenkinsConnection(conn);\n  String endpointDescription=conn.getHeaderField(\"X-SSH-Endpoint\");\n  if (endpointDescription == null) {\n    CLI.LOGGER.warning(\"No header 'X-SSH-Endpoint' returned by Jenkins\");\n    return -1;\n  }\n  CLI.LOGGER.log(FINE,\"Connecting via SSH to: {0}\",endpointDescription);\n  int sshPort=Integer.parseInt(endpointDescription.split(\":\")[1]);\n  String sshHost=endpointDescription.split(\":\")[0];\n  StringBuilder command=new StringBuilder();\n  for (  String arg : args) {\n    command.append(QuotedStringTokenizer.quote(arg));\n    command.append(' ');\n  }\n  try (SshClient client=SshClient.setUpDefaultClient()){\n    KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n      @Override public boolean verifyServerKey(      ClientSession clientSession,      SocketAddress remoteAddress,      PublicKey serverKey){\n        CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n        return !strictHostKey;\n      }\n    }\n,true);\n    client.setServerKeyVerifier(verifier);\n    client.start();\n    ConnectFuture cf=client.connect(user,sshHost,sshPort);\n    cf.await();\n    try (ClientSession session=cf.getSession()){\n      for (      KeyPair pair : provider.getKeys()) {\n        CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n        session.addPublicKeyIdentity(pair);\n      }\n      session.auth().verify(10000L);\n      try (ClientChannel channel=session.createExecChannel(command.toString())){\n        channel.setIn(new NoCloseInputStream(System.in));\n        channel.setOut(new NoCloseOutputStream(System.out));\n        channel.setErr(new NoCloseOutputStream(System.err));\n        WaitableFuture wf=channel.open();\n        wf.await();\n        Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n        if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n          throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n        }\n        Integer exitStatus=channel.getExitStatus();\n        return exitStatus;\n      }\n     }\n  finally {\n      client.stop();\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 353,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3158,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static int sshConnection(String jenkinsUrl,String user,List<String> args,PrivateKeyProvider provider,final boolean strictHostKey) throws IOException {\n  Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING);\n  URL url=new URL(jenkinsUrl + \"login\");\n  URLConnection conn=openConnection(url);\n  CLI.verifyJenkinsConnection(conn);\n  String endpointDescription=conn.getHeaderField(\"X-SSH-Endpoint\");\n  if (endpointDescription == null) {\n    CLI.LOGGER.warning(\"No header 'X-SSH-Endpoint' returned by Jenkins\");\n    return -1;\n  }\n  CLI.LOGGER.log(FINE,\"Connecting via SSH to: {0}\",endpointDescription);\n  int sshPort=Integer.parseInt(endpointDescription.split(\":\")[1]);\n  String sshHost=endpointDescription.split(\":\")[0];\n  StringBuilder command=new StringBuilder();\n  for (  String arg : args) {\n    command.append(QuotedStringTokenizer.quote(arg));\n    command.append(' ');\n  }\n  try (SshClient client=SshClient.setUpDefaultClient()){\n    KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n      @Override public boolean verifyServerKey(      ClientSession clientSession,      SocketAddress remoteAddress,      PublicKey serverKey){\n        CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n        return !strictHostKey;\n      }\n    }\n,true);\n    client.setServerKeyVerifier(verifier);\n    client.start();\n    ConnectFuture cf=client.connect(user,sshHost,sshPort);\n    cf.await();\n    try (ClientSession session=cf.getSession()){\n      for (      KeyPair pair : provider.getKeys()) {\n        CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n        session.addPublicKeyIdentity(pair);\n      }\n      session.auth().verify(10000L);\n      try (ClientChannel channel=session.createExecChannel(command.toString())){\n        channel.setIn(new NoCloseInputStream(System.in));\n        channel.setOut(new NoCloseOutputStream(System.out));\n        channel.setErr(new NoCloseOutputStream(System.err));\n        WaitableFuture wf=channel.open();\n        wf.await();\n        Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n        if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n          throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n        }\n        Integer exitStatus=channel.getExitStatus();\n        return exitStatus;\n      }\n     }\n  finally {\n      client.stop();\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 382,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 117,
        "startColumnNumber" : 20,
        "endLineNumber" : 117,
        "endColumnNumber" : 129
      },
      "nodeContext" : "Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "hudson.cli.ClientChannel"
  }, {
    "nodeContext" : "channel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 123,
      "startColumnNumber" : 41,
      "endLineNumber" : 123,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 123,
        "startColumnNumber" : 41,
        "endLineNumber" : 123,
        "endColumnNumber" : 64
      },
      "nodeContext" : "channel.getExitStatus()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 123,
        "startColumnNumber" : 28,
        "endLineNumber" : 123,
        "endColumnNumber" : 64
      },
      "nodeContext" : "exitStatus=channel.getExitStatus()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 123,
        "startColumnNumber" : 20,
        "endLineNumber" : 123,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Integer exitStatus=channel.getExitStatus();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 787,
        "startLineNumber" : 110,
        "startColumnNumber" : 92,
        "endLineNumber" : 126,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  channel.setIn(new NoCloseInputStream(System.in));\n  channel.setOut(new NoCloseOutputStream(System.out));\n  channel.setErr(new NoCloseOutputStream(System.err));\n  WaitableFuture wf=channel.open();\n  wf.await();\n  Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n  if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n    throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n  }\n  Integer exitStatus=channel.getExitStatus();\n  return exitStatus;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 110,
        "startColumnNumber" : 16,
        "endLineNumber" : 126,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try (ClientChannel channel=session.createExecChannel(command.toString())){\n  channel.setIn(new NoCloseInputStream(System.in));\n  channel.setOut(new NoCloseOutputStream(System.out));\n  channel.setErr(new NoCloseOutputStream(System.err));\n  WaitableFuture wf=channel.open();\n  wf.await();\n  Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n  if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n    throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n  }\n  Integer exitStatus=channel.getExitStatus();\n  return exitStatus;\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 98,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1187,
        "startLineNumber" : 103,
        "startColumnNumber" : 58,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (  KeyPair pair : provider.getKeys()) {\n    CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n    session.addPublicKeyIdentity(pair);\n  }\n  session.auth().verify(10000L);\n  try (ClientChannel channel=session.createExecChannel(command.toString())){\n    channel.setIn(new NoCloseInputStream(System.in));\n    channel.setOut(new NoCloseOutputStream(System.out));\n    channel.setErr(new NoCloseOutputStream(System.err));\n    WaitableFuture wf=channel.open();\n    wf.await();\n    Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n    if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n      throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n    }\n    Integer exitStatus=channel.getExitStatus();\n    return exitStatus;\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1290,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try (ClientSession session=cf.getSession()){\n  for (  KeyPair pair : provider.getKeys()) {\n    CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n    session.addPublicKeyIdentity(pair);\n  }\n  session.auth().verify(10000L);\n  try (ClientChannel channel=session.createExecChannel(command.toString())){\n    channel.setIn(new NoCloseInputStream(System.in));\n    channel.setOut(new NoCloseOutputStream(System.out));\n    channel.setErr(new NoCloseOutputStream(System.err));\n    WaitableFuture wf=channel.open();\n    wf.await();\n    Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n    if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n      throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n    }\n    Integer exitStatus=channel.getExitStatus();\n    return exitStatus;\n  }\n }\n  finally {\n  client.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 147,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1965,
        "startLineNumber" : 88,
        "startColumnNumber" : 63,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n    @Override public boolean verifyServerKey(    ClientSession clientSession,    SocketAddress remoteAddress,    PublicKey serverKey){\n      CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n      return !strictHostKey;\n    }\n  }\n,true);\n  client.setServerKeyVerifier(verifier);\n  client.start();\n  ConnectFuture cf=client.connect(user,sshHost,sshPort);\n  cf.await();\n  try (ClientSession session=cf.getSession()){\n    for (    KeyPair pair : provider.getKeys()) {\n      CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n      session.addPublicKeyIdentity(pair);\n    }\n    session.auth().verify(10000L);\n    try (ClientChannel channel=session.createExecChannel(command.toString())){\n      channel.setIn(new NoCloseInputStream(System.in));\n      channel.setOut(new NoCloseOutputStream(System.out));\n      channel.setErr(new NoCloseOutputStream(System.err));\n      WaitableFuture wf=channel.open();\n      wf.await();\n      Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n      if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n        throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n      }\n      Integer exitStatus=channel.getExitStatus();\n      return exitStatus;\n    }\n   }\n  finally {\n    client.stop();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2020,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (SshClient client=SshClient.setUpDefaultClient()){\n  KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n    @Override public boolean verifyServerKey(    ClientSession clientSession,    SocketAddress remoteAddress,    PublicKey serverKey){\n      CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n      return !strictHostKey;\n    }\n  }\n,true);\n  client.setServerKeyVerifier(verifier);\n  client.start();\n  ConnectFuture cf=client.connect(user,sshHost,sshPort);\n  cf.await();\n  try (ClientSession session=cf.getSession()){\n    for (    KeyPair pair : provider.getKeys()) {\n      CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n      session.addPublicKeyIdentity(pair);\n    }\n    session.auth().verify(10000L);\n    try (ClientChannel channel=session.createExecChannel(command.toString())){\n      channel.setIn(new NoCloseInputStream(System.in));\n      channel.setOut(new NoCloseOutputStream(System.out));\n      channel.setErr(new NoCloseOutputStream(System.err));\n      WaitableFuture wf=channel.open();\n      wf.await();\n      Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n      if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n        throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n      }\n      Integer exitStatus=channel.getExitStatus();\n      return exitStatus;\n    }\n   }\n  finally {\n    client.stop();\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 229,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3005,
        "startLineNumber" : 64,
        "startColumnNumber" : 157,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING);\n  URL url=new URL(jenkinsUrl + \"login\");\n  URLConnection conn=openConnection(url);\n  CLI.verifyJenkinsConnection(conn);\n  String endpointDescription=conn.getHeaderField(\"X-SSH-Endpoint\");\n  if (endpointDescription == null) {\n    CLI.LOGGER.warning(\"No header 'X-SSH-Endpoint' returned by Jenkins\");\n    return -1;\n  }\n  CLI.LOGGER.log(FINE,\"Connecting via SSH to: {0}\",endpointDescription);\n  int sshPort=Integer.parseInt(endpointDescription.split(\":\")[1]);\n  String sshHost=endpointDescription.split(\":\")[0];\n  StringBuilder command=new StringBuilder();\n  for (  String arg : args) {\n    command.append(QuotedStringTokenizer.quote(arg));\n    command.append(' ');\n  }\n  try (SshClient client=SshClient.setUpDefaultClient()){\n    KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n      @Override public boolean verifyServerKey(      ClientSession clientSession,      SocketAddress remoteAddress,      PublicKey serverKey){\n        CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n        return !strictHostKey;\n      }\n    }\n,true);\n    client.setServerKeyVerifier(verifier);\n    client.start();\n    ConnectFuture cf=client.connect(user,sshHost,sshPort);\n    cf.await();\n    try (ClientSession session=cf.getSession()){\n      for (      KeyPair pair : provider.getKeys()) {\n        CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n        session.addPublicKeyIdentity(pair);\n      }\n      session.auth().verify(10000L);\n      try (ClientChannel channel=session.createExecChannel(command.toString())){\n        channel.setIn(new NoCloseInputStream(System.in));\n        channel.setOut(new NoCloseOutputStream(System.out));\n        channel.setErr(new NoCloseOutputStream(System.err));\n        WaitableFuture wf=channel.open();\n        wf.await();\n        Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n        if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n          throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n        }\n        Integer exitStatus=channel.getExitStatus();\n        return exitStatus;\n      }\n     }\n  finally {\n      client.stop();\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 353,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3158,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static int sshConnection(String jenkinsUrl,String user,List<String> args,PrivateKeyProvider provider,final boolean strictHostKey) throws IOException {\n  Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING);\n  URL url=new URL(jenkinsUrl + \"login\");\n  URLConnection conn=openConnection(url);\n  CLI.verifyJenkinsConnection(conn);\n  String endpointDescription=conn.getHeaderField(\"X-SSH-Endpoint\");\n  if (endpointDescription == null) {\n    CLI.LOGGER.warning(\"No header 'X-SSH-Endpoint' returned by Jenkins\");\n    return -1;\n  }\n  CLI.LOGGER.log(FINE,\"Connecting via SSH to: {0}\",endpointDescription);\n  int sshPort=Integer.parseInt(endpointDescription.split(\":\")[1]);\n  String sshHost=endpointDescription.split(\":\")[0];\n  StringBuilder command=new StringBuilder();\n  for (  String arg : args) {\n    command.append(QuotedStringTokenizer.quote(arg));\n    command.append(' ');\n  }\n  try (SshClient client=SshClient.setUpDefaultClient()){\n    KnownHostsServerKeyVerifier verifier=new DefaultKnownHostsServerKeyVerifier(new ServerKeyVerifier(){\n      @Override public boolean verifyServerKey(      ClientSession clientSession,      SocketAddress remoteAddress,      PublicKey serverKey){\n        CLI.LOGGER.log(Level.WARNING,\"Unknown host key for {0}\",remoteAddress.toString());\n        return !strictHostKey;\n      }\n    }\n,true);\n    client.setServerKeyVerifier(verifier);\n    client.start();\n    ConnectFuture cf=client.connect(user,sshHost,sshPort);\n    cf.await();\n    try (ClientSession session=cf.getSession()){\n      for (      KeyPair pair : provider.getKeys()) {\n        CLI.LOGGER.log(FINE,\"Offering {0} private key\",pair.getPrivate().getAlgorithm());\n        session.addPublicKeyIdentity(pair);\n      }\n      session.auth().verify(10000L);\n      try (ClientChannel channel=session.createExecChannel(command.toString())){\n        channel.setIn(new NoCloseInputStream(System.in));\n        channel.setOut(new NoCloseOutputStream(System.out));\n        channel.setErr(new NoCloseOutputStream(System.err));\n        WaitableFuture wf=channel.open();\n        wf.await();\n        Set<ClientChannelEvent> waitMask=channel.waitFor(Collections.singletonList(ClientChannelEvent.CLOSED),0L);\n        if (waitMask.contains(ClientChannelEvent.TIMEOUT)) {\n          throw new SocketTimeoutException(\"Failed to retrieve command result in time: \" + command);\n        }\n        Integer exitStatus=channel.getExitStatus();\n        return exitStatus;\n      }\n     }\n  finally {\n      client.stop();\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 382,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 123,
        "startColumnNumber" : 20,
        "endLineNumber" : 123,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Integer exitStatus=channel.getExitStatus();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "hudson.cli.ClientChannel"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 111,
    "startColumnNumber" : 20,
    "endLineNumber" : 111,
    "endColumnNumber" : 27
  }, {
    "charLength" : 7,
    "startLineNumber" : 112,
    "startColumnNumber" : 20,
    "endLineNumber" : 112,
    "endColumnNumber" : 27
  }, {
    "charLength" : 7,
    "startLineNumber" : 113,
    "startColumnNumber" : 20,
    "endLineNumber" : 113,
    "endColumnNumber" : 27
  }, {
    "charLength" : 7,
    "startLineNumber" : 114,
    "startColumnNumber" : 40,
    "endLineNumber" : 114,
    "endColumnNumber" : 47
  }, {
    "charLength" : 7,
    "startLineNumber" : 117,
    "startColumnNumber" : 55,
    "endLineNumber" : 117,
    "endColumnNumber" : 62
  }, {
    "charLength" : 7,
    "startLineNumber" : 123,
    "startColumnNumber" : 41,
    "endLineNumber" : 123,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  } ]
}