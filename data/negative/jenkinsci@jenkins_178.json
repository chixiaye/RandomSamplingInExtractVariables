{
  "id" : 178,
  "expression" : "\"on some platforms where we fail to list any processes\"",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/test/java/hudson/util/ProcessTreeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"on some platforms where we fail to list any processes\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 55,
      "startLineNumber" : 33,
      "startColumnNumber" : 27,
      "endLineNumber" : 33,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 123
      },
      "nodeContext" : "Assume.assumeFalse(\"on some platforms where we fail to list any processes\",ProcessTree.get() == ProcessTree.DEFAULT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 124
      },
      "nodeContext" : "Assume.assumeFalse(\"on some platforms where we fail to list any processes\",ProcessTree.get() == ProcessTree.DEFAULT);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 536,
        "startLineNumber" : 32,
        "startColumnNumber" : 50,
        "endLineNumber" : 47,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assume.assumeFalse(\"on some platforms where we fail to list any processes\",ProcessTree.get() == ProcessTree.DEFAULT);\n  Tag t=channels.french.call(new MyCallable());\n  assertSame(t.p.getTree(),t.tree);\n  t.p.getEnvironmentVariables();\n  assertEquals(t.id,t.p.getPid());\n  t.p.act(new ProcessCallableImpl());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 582,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void remoting() throws Exception {\n  Assume.assumeFalse(\"on some platforms where we fail to list any processes\",ProcessTree.get() == ProcessTree.DEFAULT);\n  Tag t=channels.french.call(new MyCallable());\n  assertSame(t.p.getTree(),t.tree);\n  t.p.getEnvironmentVariables();\n  assertEquals(t.id,t.p.getPid());\n  t.p.act(new ProcessCallableImpl());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 71,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 124
      },
      "nodeContext" : "Assume.assumeFalse(\"on some platforms where we fail to list any processes\",ProcessTree.get() == ProcessTree.DEFAULT);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 10,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 55,
    "startLineNumber" : 33,
    "startColumnNumber" : 27,
    "endLineNumber" : 33,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}