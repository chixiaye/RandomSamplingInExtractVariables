{
  "id" : 358,
  "expression" : "\"private \" + InvocationHandler.class.getName() + \" handler;\"",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"private \" + InvocationHandler.class.getName() + \" handler;\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 60,
      "startLineNumber" : 221,
      "startColumnNumber" : 25,
      "endLineNumber" : 221,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 8,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 221,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 86
      },
      "nodeContext" : "ccp.addField(\"private \" + InvocationHandler.class.getName() + \" handler;\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 221,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 87
      },
      "nodeContext" : "ccp.addField(\"private \" + InvocationHandler.class.getName() + \" handler;\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3476,
        "startLineNumber" : 166,
        "startColumnNumber" : 12,
        "endLineNumber" : 240,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ccp=ClassGenerator.newInstance(cl);\n  Set<String> worked=new HashSet<>();\n  List<Method> methods=new ArrayList<>();\n  for (int i=0; i < ics.length; i++) {\n    if (!Modifier.isPublic(ics[i].getModifiers())) {\n      String npkg=ics[i].getPackage().getName();\n      if (pkg == null) {\n        pkg=npkg;\n      }\n else {\n        if (!pkg.equals(npkg)) {\n          throw new IllegalArgumentException(\"non-public interfaces from different packages\");\n        }\n      }\n    }\n    ccp.addInterface(ics[i]);\n    for (    Method method : ics[i].getMethods()) {\n      String desc=ReflectUtils.getDesc(method);\n      if (worked.contains(desc) || Modifier.isStatic(method.getModifiers())) {\n        continue;\n      }\n      if (ics[i].isInterface() && Modifier.isStatic(method.getModifiers())) {\n        continue;\n      }\n      worked.add(desc);\n      int ix=methods.size();\n      Class<?> rt=method.getReturnType();\n      Class<?>[] pts=method.getParameterTypes();\n      StringBuilder code=new StringBuilder(\"Object[] args = new Object[\").append(pts.length).append(\"];\");\n      for (int j=0; j < pts.length; j++) {\n        code.append(\" args[\").append(j).append(\"] = ($w)$\").append(j + 1).append(\";\");\n      }\n      code.append(\" Object ret = handler.invoke(this, methods[\").append(ix).append(\"], args);\");\n      if (!Void.TYPE.equals(rt)) {\n        code.append(\" return \").append(asArgument(rt,\"ret\")).append(\";\");\n      }\n      methods.add(method);\n      ccp.addMethod(method.getName(),method.getModifiers(),rt,pts,method.getExceptionTypes(),code.toString());\n    }\n  }\n  if (pkg == null) {\n    pkg=PACKAGE_NAME;\n  }\n  String pcn=pkg + \".proxy\" + id;\n  ccp.setClassName(pcn);\n  ccp.addField(\"public static java.lang.reflect.Method[] methods;\");\n  ccp.addField(\"private \" + InvocationHandler.class.getName() + \" handler;\");\n  ccp.addConstructor(Modifier.PUBLIC,new Class<?>[]{InvocationHandler.class},new Class<?>[0],\"handler=$1;\");\n  ccp.addDefaultConstructor();\n  Class<?> clazz=ccp.toClass();\n  clazz.getField(\"methods\").set(null,methods.toArray(new Method[0]));\n  String fcn=Proxy.class.getName() + id;\n  ccm=ClassGenerator.newInstance(cl);\n  ccm.setClassName(fcn);\n  ccm.addDefaultConstructor();\n  ccm.setSuperClass(Proxy.class);\n  ccm.addMethod(\"public Object newInstance(\" + InvocationHandler.class.getName() + \" h){ return new \"+ pcn+ \"($1); }\");\n  Class<?> pc=ccm.toClass();\n  proxy=(Proxy)pc.newInstance();\nsynchronized (classCache) {\n    classCache.put(key,new SoftReference<Class<?>>(pc));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 471,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4133,
        "startLineNumber" : 166,
        "startColumnNumber" : 8,
        "endLineNumber" : 260,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ccp=ClassGenerator.newInstance(cl);\n  Set<String> worked=new HashSet<>();\n  List<Method> methods=new ArrayList<>();\n  for (int i=0; i < ics.length; i++) {\n    if (!Modifier.isPublic(ics[i].getModifiers())) {\n      String npkg=ics[i].getPackage().getName();\n      if (pkg == null) {\n        pkg=npkg;\n      }\n else {\n        if (!pkg.equals(npkg)) {\n          throw new IllegalArgumentException(\"non-public interfaces from different packages\");\n        }\n      }\n    }\n    ccp.addInterface(ics[i]);\n    for (    Method method : ics[i].getMethods()) {\n      String desc=ReflectUtils.getDesc(method);\n      if (worked.contains(desc) || Modifier.isStatic(method.getModifiers())) {\n        continue;\n      }\n      if (ics[i].isInterface() && Modifier.isStatic(method.getModifiers())) {\n        continue;\n      }\n      worked.add(desc);\n      int ix=methods.size();\n      Class<?> rt=method.getReturnType();\n      Class<?>[] pts=method.getParameterTypes();\n      StringBuilder code=new StringBuilder(\"Object[] args = new Object[\").append(pts.length).append(\"];\");\n      for (int j=0; j < pts.length; j++) {\n        code.append(\" args[\").append(j).append(\"] = ($w)$\").append(j + 1).append(\";\");\n      }\n      code.append(\" Object ret = handler.invoke(this, methods[\").append(ix).append(\"], args);\");\n      if (!Void.TYPE.equals(rt)) {\n        code.append(\" return \").append(asArgument(rt,\"ret\")).append(\";\");\n      }\n      methods.add(method);\n      ccp.addMethod(method.getName(),method.getModifiers(),rt,pts,method.getExceptionTypes(),code.toString());\n    }\n  }\n  if (pkg == null) {\n    pkg=PACKAGE_NAME;\n  }\n  String pcn=pkg + \".proxy\" + id;\n  ccp.setClassName(pcn);\n  ccp.addField(\"public static java.lang.reflect.Method[] methods;\");\n  ccp.addField(\"private \" + InvocationHandler.class.getName() + \" handler;\");\n  ccp.addConstructor(Modifier.PUBLIC,new Class<?>[]{InvocationHandler.class},new Class<?>[0],\"handler=$1;\");\n  ccp.addDefaultConstructor();\n  Class<?> clazz=ccp.toClass();\n  clazz.getField(\"methods\").set(null,methods.toArray(new Method[0]));\n  String fcn=Proxy.class.getName() + id;\n  ccm=ClassGenerator.newInstance(cl);\n  ccm.setClassName(fcn);\n  ccm.addDefaultConstructor();\n  ccm.setSuperClass(Proxy.class);\n  ccm.addMethod(\"public Object newInstance(\" + InvocationHandler.class.getName() + \" h){ return new \"+ pcn+ \"($1); }\");\n  Class<?> pc=ccm.toClass();\n  proxy=(Proxy)pc.newInstance();\nsynchronized (classCache) {\n    classCache.put(key,new SoftReference<Class<?>>(pc));\n  }\n}\n catch (RuntimeException e) {\n  throw e;\n}\ncatch (Exception e) {\n  throw new RuntimeException(e.getMessage(),e);\n}\n finally {\n  if (ccp != null) {\n    ccp.release();\n  }\n  if (ccm != null) {\n    ccm.release();\n  }\nsynchronized (cache) {\n    if (proxy == null) {\n      cache.remove(key);\n    }\n else {\n      cache.put(key,new SoftReference<Proxy>(proxy));\n    }\n    cache.notifyAll();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 543,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7489,
        "startLineNumber" : 78,
        "startColumnNumber" : 66,
        "endLineNumber" : 262,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ics.length > MAX_PROXY_COUNT) {\n    throw new IllegalArgumentException(\"interface limit exceeded\");\n  }\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < ics.length; i++) {\n    String itf=ics[i].getName();\n    if (!ics[i].isInterface()) {\n      throw new RuntimeException(itf + \" is not a interface.\");\n    }\n    Class<?> tmp=null;\n    try {\n      tmp=Class.forName(itf,false,cl);\n    }\n catch (    ClassNotFoundException e) {\n    }\n    if (tmp != ics[i]) {\n      throw new IllegalArgumentException(ics[i] + \" is not visible from class loader\");\n    }\n    sb.append(itf).append(';');\n  }\n  String key=sb.toString();\n  final Map<String,Object> cache;\n  final Map<String,Object> classCache;\nsynchronized (PROXY_CACHE_MAP) {\n    cache=PROXY_CACHE_MAP.computeIfAbsent(cl,k -> new HashMap<>());\n    classCache=PROXY_CLASS_MAP.computeIfAbsent(cl,k -> new HashMap<>());\n  }\n  Proxy proxy=null;\nsynchronized (cache) {\n    do {\n      Object value=cache.get(key);\n      if (value instanceof Reference<?>) {\n        proxy=(Proxy)((Reference<?>)value).get();\n        if (proxy != null) {\n          return proxy;\n        }\n      }\n      Object clazzObj=classCache.get(key);\n      if (null == clazzObj || clazzObj instanceof Reference<?>) {\n        Class<?> clazz=null;\n        if (clazzObj instanceof Reference<?>) {\n          clazz=(Class<?>)((Reference<?>)clazzObj).get();\n        }\n        if (null == clazz) {\n          if (value == PENDING_GENERATION_MARKER) {\n            try {\n              cache.wait();\n            }\n catch (            InterruptedException e) {\n            }\n          }\n else {\n            cache.put(key,PENDING_GENERATION_MARKER);\n            break;\n          }\n        }\n else {\n          try {\n            proxy=(Proxy)clazz.newInstance();\n            return proxy;\n          }\n catch (          InstantiationException|IllegalAccessException e) {\n            throw new RuntimeException(e);\n          }\n finally {\n            if (null == proxy) {\n              cache.remove(key);\n            }\n else {\n              cache.put(key,new SoftReference<>(proxy));\n            }\n          }\n        }\n      }\n    }\n while (true);\n  }\n  long id=PROXY_CLASS_COUNTER.getAndIncrement();\n  String pkg=null;\n  ClassGenerator ccp=null, ccm=null;\n  try {\n    ccp=ClassGenerator.newInstance(cl);\n    Set<String> worked=new HashSet<>();\n    List<Method> methods=new ArrayList<>();\n    for (int i=0; i < ics.length; i++) {\n      if (!Modifier.isPublic(ics[i].getModifiers())) {\n        String npkg=ics[i].getPackage().getName();\n        if (pkg == null) {\n          pkg=npkg;\n        }\n else {\n          if (!pkg.equals(npkg)) {\n            throw new IllegalArgumentException(\"non-public interfaces from different packages\");\n          }\n        }\n      }\n      ccp.addInterface(ics[i]);\n      for (      Method method : ics[i].getMethods()) {\n        String desc=ReflectUtils.getDesc(method);\n        if (worked.contains(desc) || Modifier.isStatic(method.getModifiers())) {\n          continue;\n        }\n        if (ics[i].isInterface() && Modifier.isStatic(method.getModifiers())) {\n          continue;\n        }\n        worked.add(desc);\n        int ix=methods.size();\n        Class<?> rt=method.getReturnType();\n        Class<?>[] pts=method.getParameterTypes();\n        StringBuilder code=new StringBuilder(\"Object[] args = new Object[\").append(pts.length).append(\"];\");\n        for (int j=0; j < pts.length; j++) {\n          code.append(\" args[\").append(j).append(\"] = ($w)$\").append(j + 1).append(\";\");\n        }\n        code.append(\" Object ret = handler.invoke(this, methods[\").append(ix).append(\"], args);\");\n        if (!Void.TYPE.equals(rt)) {\n          code.append(\" return \").append(asArgument(rt,\"ret\")).append(\";\");\n        }\n        methods.add(method);\n        ccp.addMethod(method.getName(),method.getModifiers(),rt,pts,method.getExceptionTypes(),code.toString());\n      }\n    }\n    if (pkg == null) {\n      pkg=PACKAGE_NAME;\n    }\n    String pcn=pkg + \".proxy\" + id;\n    ccp.setClassName(pcn);\n    ccp.addField(\"public static java.lang.reflect.Method[] methods;\");\n    ccp.addField(\"private \" + InvocationHandler.class.getName() + \" handler;\");\n    ccp.addConstructor(Modifier.PUBLIC,new Class<?>[]{InvocationHandler.class},new Class<?>[0],\"handler=$1;\");\n    ccp.addDefaultConstructor();\n    Class<?> clazz=ccp.toClass();\n    clazz.getField(\"methods\").set(null,methods.toArray(new Method[0]));\n    String fcn=Proxy.class.getName() + id;\n    ccm=ClassGenerator.newInstance(cl);\n    ccm.setClassName(fcn);\n    ccm.addDefaultConstructor();\n    ccm.setSuperClass(Proxy.class);\n    ccm.addMethod(\"public Object newInstance(\" + InvocationHandler.class.getName() + \" h){ return new \"+ pcn+ \"($1); }\");\n    Class<?> pc=ccm.toClass();\n    proxy=(Proxy)pc.newInstance();\nsynchronized (classCache) {\n      classCache.put(key,new SoftReference<Class<?>>(pc));\n    }\n  }\n catch (  RuntimeException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new RuntimeException(e.getMessage(),e);\n  }\n finally {\n    if (ccp != null) {\n      ccp.release();\n    }\n    if (ccm != null) {\n      ccm.release();\n    }\nsynchronized (cache) {\n      if (proxy == null) {\n        cache.remove(key);\n      }\n else {\n        cache.put(key,new SoftReference<Proxy>(proxy));\n      }\n      cache.notifyAll();\n    }\n  }\n  return proxy;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 922,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7703,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 262,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Get proxy.\n * @param cl  class loader.\n * @param ics interface class array.\n * @return Proxy instance.\n */\npublic static Proxy getProxy(ClassLoader cl,Class<?>... ics){\n  if (ics.length > MAX_PROXY_COUNT) {\n    throw new IllegalArgumentException(\"interface limit exceeded\");\n  }\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < ics.length; i++) {\n    String itf=ics[i].getName();\n    if (!ics[i].isInterface()) {\n      throw new RuntimeException(itf + \" is not a interface.\");\n    }\n    Class<?> tmp=null;\n    try {\n      tmp=Class.forName(itf,false,cl);\n    }\n catch (    ClassNotFoundException e) {\n    }\n    if (tmp != ics[i]) {\n      throw new IllegalArgumentException(ics[i] + \" is not visible from class loader\");\n    }\n    sb.append(itf).append(';');\n  }\n  String key=sb.toString();\n  final Map<String,Object> cache;\n  final Map<String,Object> classCache;\nsynchronized (PROXY_CACHE_MAP) {\n    cache=PROXY_CACHE_MAP.computeIfAbsent(cl,k -> new HashMap<>());\n    classCache=PROXY_CLASS_MAP.computeIfAbsent(cl,k -> new HashMap<>());\n  }\n  Proxy proxy=null;\nsynchronized (cache) {\n    do {\n      Object value=cache.get(key);\n      if (value instanceof Reference<?>) {\n        proxy=(Proxy)((Reference<?>)value).get();\n        if (proxy != null) {\n          return proxy;\n        }\n      }\n      Object clazzObj=classCache.get(key);\n      if (null == clazzObj || clazzObj instanceof Reference<?>) {\n        Class<?> clazz=null;\n        if (clazzObj instanceof Reference<?>) {\n          clazz=(Class<?>)((Reference<?>)clazzObj).get();\n        }\n        if (null == clazz) {\n          if (value == PENDING_GENERATION_MARKER) {\n            try {\n              cache.wait();\n            }\n catch (            InterruptedException e) {\n            }\n          }\n else {\n            cache.put(key,PENDING_GENERATION_MARKER);\n            break;\n          }\n        }\n else {\n          try {\n            proxy=(Proxy)clazz.newInstance();\n            return proxy;\n          }\n catch (          InstantiationException|IllegalAccessException e) {\n            throw new RuntimeException(e);\n          }\n finally {\n            if (null == proxy) {\n              cache.remove(key);\n            }\n else {\n              cache.put(key,new SoftReference<>(proxy));\n            }\n          }\n        }\n      }\n    }\n while (true);\n  }\n  long id=PROXY_CLASS_COUNTER.getAndIncrement();\n  String pkg=null;\n  ClassGenerator ccp=null, ccm=null;\n  try {\n    ccp=ClassGenerator.newInstance(cl);\n    Set<String> worked=new HashSet<>();\n    List<Method> methods=new ArrayList<>();\n    for (int i=0; i < ics.length; i++) {\n      if (!Modifier.isPublic(ics[i].getModifiers())) {\n        String npkg=ics[i].getPackage().getName();\n        if (pkg == null) {\n          pkg=npkg;\n        }\n else {\n          if (!pkg.equals(npkg)) {\n            throw new IllegalArgumentException(\"non-public interfaces from different packages\");\n          }\n        }\n      }\n      ccp.addInterface(ics[i]);\n      for (      Method method : ics[i].getMethods()) {\n        String desc=ReflectUtils.getDesc(method);\n        if (worked.contains(desc) || Modifier.isStatic(method.getModifiers())) {\n          continue;\n        }\n        if (ics[i].isInterface() && Modifier.isStatic(method.getModifiers())) {\n          continue;\n        }\n        worked.add(desc);\n        int ix=methods.size();\n        Class<?> rt=method.getReturnType();\n        Class<?>[] pts=method.getParameterTypes();\n        StringBuilder code=new StringBuilder(\"Object[] args = new Object[\").append(pts.length).append(\"];\");\n        for (int j=0; j < pts.length; j++) {\n          code.append(\" args[\").append(j).append(\"] = ($w)$\").append(j + 1).append(\";\");\n        }\n        code.append(\" Object ret = handler.invoke(this, methods[\").append(ix).append(\"], args);\");\n        if (!Void.TYPE.equals(rt)) {\n          code.append(\" return \").append(asArgument(rt,\"ret\")).append(\";\");\n        }\n        methods.add(method);\n        ccp.addMethod(method.getName(),method.getModifiers(),rt,pts,method.getExceptionTypes(),code.toString());\n      }\n    }\n    if (pkg == null) {\n      pkg=PACKAGE_NAME;\n    }\n    String pcn=pkg + \".proxy\" + id;\n    ccp.setClassName(pcn);\n    ccp.addField(\"public static java.lang.reflect.Method[] methods;\");\n    ccp.addField(\"private \" + InvocationHandler.class.getName() + \" handler;\");\n    ccp.addConstructor(Modifier.PUBLIC,new Class<?>[]{InvocationHandler.class},new Class<?>[0],\"handler=$1;\");\n    ccp.addDefaultConstructor();\n    Class<?> clazz=ccp.toClass();\n    clazz.getField(\"methods\").set(null,methods.toArray(new Method[0]));\n    String fcn=Proxy.class.getName() + id;\n    ccm=ClassGenerator.newInstance(cl);\n    ccm.setClassName(fcn);\n    ccm.addDefaultConstructor();\n    ccm.setSuperClass(Proxy.class);\n    ccm.addMethod(\"public Object newInstance(\" + InvocationHandler.class.getName() + \" h){ return new \"+ pcn+ \"($1); }\");\n    Class<?> pc=ccm.toClass();\n    proxy=(Proxy)pc.newInstance();\nsynchronized (classCache) {\n      classCache.put(key,new SoftReference<Class<?>>(pc));\n    }\n  }\n catch (  RuntimeException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new RuntimeException(e.getMessage(),e);\n  }\n finally {\n    if (ccp != null) {\n      ccp.release();\n    }\n    if (ccm != null) {\n      ccm.release();\n    }\nsynchronized (cache) {\n      if (proxy == null) {\n        cache.remove(key);\n      }\n else {\n        cache.put(key,new SoftReference<Proxy>(proxy));\n      }\n      cache.notifyAll();\n    }\n  }\n  return proxy;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 939,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 221,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 87
      },
      "nodeContext" : "ccp.addField(\"private \" + InvocationHandler.class.getName() + \" handler;\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 60,
    "startLineNumber" : 221,
    "startColumnNumber" : 25,
    "endLineNumber" : 221,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ ]
}