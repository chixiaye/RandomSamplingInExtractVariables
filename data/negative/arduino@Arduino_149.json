{
  "id" : 149,
  "expression" : "new JButton(I18n.PROMPT_OK)",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/app/src/processing/app/EditorStatus.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new JButton(I18n.PROMPT_OK)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 314,
      "startColumnNumber" : 17,
      "endLineNumber" : 314,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 314,
        "startColumnNumber" : 6,
        "endLineNumber" : 314,
        "endColumnNumber" : 44
      },
      "nodeContext" : "okButton=new JButton(I18n.PROMPT_OK)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 314,
        "startColumnNumber" : 6,
        "endLineNumber" : 314,
        "endColumnNumber" : 45
      },
      "nodeContext" : "okButton=new JButton(I18n.PROMPT_OK);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 6803,
        "startLineNumber" : 312,
        "startColumnNumber" : 26,
        "endLineNumber" : 483,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  cancelButton=new JButton(I18n.PROMPT_CANCEL);\n  okButton=new JButton(I18n.PROMPT_OK);\n  cancelButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent e){\n      if (mode == EDIT) {\n        unedit();\n      }\n    }\n  }\n);\n  okButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent e){\n      if (mode == EDIT) {\n        String answer=editField.getText();\n        editor.getSketch().nameCode(answer);\n        unedit();\n      }\n    }\n  }\n);\n  if (OSUtils.isMacOS()) {\n    cancelButton.setBackground(bgcolor[EDIT]);\n    okButton.setBackground(bgcolor[EDIT]);\n  }\n  setLayout(null);\n  add(cancelButton);\n  add(okButton);\n  cancelButton.setVisible(false);\n  okButton.setVisible(false);\n  editField=new JTextField();\n  editField.addKeyListener(new KeyAdapter(){\n    public void keyPressed(    KeyEvent event){\n      if (event.getKeyChar() == KeyEvent.VK_ESCAPE) {\n        unedit();\n        event.consume();\n      }\n    }\n    public void keyTyped(    KeyEvent event){\n      int c=event.getKeyChar();\n      if (c == KeyEvent.VK_ENTER) {\n        String answer=editField.getText();\n        editor.getSketch().nameCode(answer);\n        unedit();\n        event.consume();\n      }\n else       if ((c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_RIGHT)|| (c == KeyEvent.VK_LEFT)|| (c == KeyEvent.VK_UP)|| (c == KeyEvent.VK_DOWN)|| (c == KeyEvent.VK_HOME)|| (c == KeyEvent.VK_END)|| (c == KeyEvent.VK_SHIFT)) {\n      }\n else       if (c == KeyEvent.VK_SPACE) {\n        String t=editField.getText();\n        int start=editField.getSelectionStart();\n        int end=editField.getSelectionEnd();\n        editField.setText(t.substring(0,start) + \"_\" + t.substring(end));\n        editField.setCaretPosition(start + 1);\n        event.consume();\n      }\n else       if ((c == '_') || (c == '.') || ((c >= 'A') && (c <= 'Z'))|| ((c >= 'a') && (c <= 'z'))) {\n      }\n else       if ((c >= '0') && (c <= '9')) {\n        if ((editField.getCaretPosition() == 0) || (editField.getSelectionStart() == 0)) {\n          event.consume();\n        }\n      }\n else {\n        event.consume();\n      }\n    }\n  }\n);\n  add(editField);\n  editField.setVisible(false);\n  progressBar=new JProgressBar(JScrollBar.HORIZONTAL);\n  progressBar.setIndeterminate(false);\n  if (OSUtils.isMacOS()) {\n  }\n  progressBar.setValue(0);\n  progressBar.setBorderPainted(true);\n  add(progressBar);\n  progressBar.setVisible(false);\n  copyErrorButton=new JButton(_(\"Copy error messages\"));\n  add(copyErrorButton);\n  copyErrorButton.setVisible(false);\n  copyErrorButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent e){\n      String message=\"\";\n      message+=_(\"Arduino: \") + BaseNoGui.VERSION_NAME + \" (\"+ System.getProperty(\"os.name\")+ \"), \";\n      message+=_(\"Board: \") + \"\\\"\" + Base.getBoardPreferences().get(\"name\")+ \"\\\"\\n\\n\";\n      message+=editor.console.consoleTextPane.getText().trim();\n      if ((Preferences.getBoolean(\"build.verbose\")) == false) {\n        message+=\"\\n\\n\";\n        message+=\"  \" + _(\"This report would have more information with\") + \"\\n\";\n        message+=\"  \\\"\" + _(\"Show verbose output during compilation\") + \"\\\"\\n\";\n        message+=\"  \" + _(\"enabled in File > Preferences.\") + \"\\n\";\n      }\n      Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();\n      StringSelection data=new StringSelection(message);\n      clipboard.setContents(data,null);\n      Clipboard unixclipboard=Toolkit.getDefaultToolkit().getSystemSelection();\n      if (unixclipboard != null)       unixclipboard.setContents(data,null);\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 603,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6825,
        "startLineNumber" : 312,
        "startColumnNumber" : 4,
        "endLineNumber" : 483,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (okButton == null) {\n  cancelButton=new JButton(I18n.PROMPT_CANCEL);\n  okButton=new JButton(I18n.PROMPT_OK);\n  cancelButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent e){\n      if (mode == EDIT) {\n        unedit();\n      }\n    }\n  }\n);\n  okButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent e){\n      if (mode == EDIT) {\n        String answer=editField.getText();\n        editor.getSketch().nameCode(answer);\n        unedit();\n      }\n    }\n  }\n);\n  if (OSUtils.isMacOS()) {\n    cancelButton.setBackground(bgcolor[EDIT]);\n    okButton.setBackground(bgcolor[EDIT]);\n  }\n  setLayout(null);\n  add(cancelButton);\n  add(okButton);\n  cancelButton.setVisible(false);\n  okButton.setVisible(false);\n  editField=new JTextField();\n  editField.addKeyListener(new KeyAdapter(){\n    public void keyPressed(    KeyEvent event){\n      if (event.getKeyChar() == KeyEvent.VK_ESCAPE) {\n        unedit();\n        event.consume();\n      }\n    }\n    public void keyTyped(    KeyEvent event){\n      int c=event.getKeyChar();\n      if (c == KeyEvent.VK_ENTER) {\n        String answer=editField.getText();\n        editor.getSketch().nameCode(answer);\n        unedit();\n        event.consume();\n      }\n else       if ((c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_RIGHT)|| (c == KeyEvent.VK_LEFT)|| (c == KeyEvent.VK_UP)|| (c == KeyEvent.VK_DOWN)|| (c == KeyEvent.VK_HOME)|| (c == KeyEvent.VK_END)|| (c == KeyEvent.VK_SHIFT)) {\n      }\n else       if (c == KeyEvent.VK_SPACE) {\n        String t=editField.getText();\n        int start=editField.getSelectionStart();\n        int end=editField.getSelectionEnd();\n        editField.setText(t.substring(0,start) + \"_\" + t.substring(end));\n        editField.setCaretPosition(start + 1);\n        event.consume();\n      }\n else       if ((c == '_') || (c == '.') || ((c >= 'A') && (c <= 'Z'))|| ((c >= 'a') && (c <= 'z'))) {\n      }\n else       if ((c >= '0') && (c <= '9')) {\n        if ((editField.getCaretPosition() == 0) || (editField.getSelectionStart() == 0)) {\n          event.consume();\n        }\n      }\n else {\n        event.consume();\n      }\n    }\n  }\n);\n  add(editField);\n  editField.setVisible(false);\n  progressBar=new JProgressBar(JScrollBar.HORIZONTAL);\n  progressBar.setIndeterminate(false);\n  if (OSUtils.isMacOS()) {\n  }\n  progressBar.setValue(0);\n  progressBar.setBorderPainted(true);\n  add(progressBar);\n  progressBar.setVisible(false);\n  copyErrorButton=new JButton(_(\"Copy error messages\"));\n  add(copyErrorButton);\n  copyErrorButton.setVisible(false);\n  copyErrorButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent e){\n      String message=\"\";\n      message+=_(\"Arduino: \") + BaseNoGui.VERSION_NAME + \" (\"+ System.getProperty(\"os.name\")+ \"), \";\n      message+=_(\"Board: \") + \"\\\"\" + Base.getBoardPreferences().get(\"name\")+ \"\\\"\\n\\n\";\n      message+=editor.console.consoleTextPane.getText().trim();\n      if ((Preferences.getBoolean(\"build.verbose\")) == false) {\n        message+=\"\\n\\n\";\n        message+=\"  \" + _(\"This report would have more information with\") + \"\\n\";\n        message+=\"  \\\"\" + _(\"Show verbose output during compilation\") + \"\\\"\\n\";\n        message+=\"  \" + _(\"enabled in File > Preferences.\") + \"\\n\";\n      }\n      Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();\n      StringSelection data=new StringSelection(message);\n      clipboard.setContents(data,null);\n      Clipboard unixclipboard=Toolkit.getDefaultToolkit().getSystemSelection();\n      if (unixclipboard != null)       unixclipboard.setContents(data,null);\n    }\n  }\n);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 607,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6835,
        "startLineNumber" : 311,
        "startColumnNumber" : 25,
        "endLineNumber" : 484,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (okButton == null) {\n    cancelButton=new JButton(I18n.PROMPT_CANCEL);\n    okButton=new JButton(I18n.PROMPT_OK);\n    cancelButton.addActionListener(new ActionListener(){\n      public void actionPerformed(      ActionEvent e){\n        if (mode == EDIT) {\n          unedit();\n        }\n      }\n    }\n);\n    okButton.addActionListener(new ActionListener(){\n      public void actionPerformed(      ActionEvent e){\n        if (mode == EDIT) {\n          String answer=editField.getText();\n          editor.getSketch().nameCode(answer);\n          unedit();\n        }\n      }\n    }\n);\n    if (OSUtils.isMacOS()) {\n      cancelButton.setBackground(bgcolor[EDIT]);\n      okButton.setBackground(bgcolor[EDIT]);\n    }\n    setLayout(null);\n    add(cancelButton);\n    add(okButton);\n    cancelButton.setVisible(false);\n    okButton.setVisible(false);\n    editField=new JTextField();\n    editField.addKeyListener(new KeyAdapter(){\n      public void keyPressed(      KeyEvent event){\n        if (event.getKeyChar() == KeyEvent.VK_ESCAPE) {\n          unedit();\n          event.consume();\n        }\n      }\n      public void keyTyped(      KeyEvent event){\n        int c=event.getKeyChar();\n        if (c == KeyEvent.VK_ENTER) {\n          String answer=editField.getText();\n          editor.getSketch().nameCode(answer);\n          unedit();\n          event.consume();\n        }\n else         if ((c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_RIGHT)|| (c == KeyEvent.VK_LEFT)|| (c == KeyEvent.VK_UP)|| (c == KeyEvent.VK_DOWN)|| (c == KeyEvent.VK_HOME)|| (c == KeyEvent.VK_END)|| (c == KeyEvent.VK_SHIFT)) {\n        }\n else         if (c == KeyEvent.VK_SPACE) {\n          String t=editField.getText();\n          int start=editField.getSelectionStart();\n          int end=editField.getSelectionEnd();\n          editField.setText(t.substring(0,start) + \"_\" + t.substring(end));\n          editField.setCaretPosition(start + 1);\n          event.consume();\n        }\n else         if ((c == '_') || (c == '.') || ((c >= 'A') && (c <= 'Z'))|| ((c >= 'a') && (c <= 'z'))) {\n        }\n else         if ((c >= '0') && (c <= '9')) {\n          if ((editField.getCaretPosition() == 0) || (editField.getSelectionStart() == 0)) {\n            event.consume();\n          }\n        }\n else {\n          event.consume();\n        }\n      }\n    }\n);\n    add(editField);\n    editField.setVisible(false);\n    progressBar=new JProgressBar(JScrollBar.HORIZONTAL);\n    progressBar.setIndeterminate(false);\n    if (OSUtils.isMacOS()) {\n    }\n    progressBar.setValue(0);\n    progressBar.setBorderPainted(true);\n    add(progressBar);\n    progressBar.setVisible(false);\n    copyErrorButton=new JButton(_(\"Copy error messages\"));\n    add(copyErrorButton);\n    copyErrorButton.setVisible(false);\n    copyErrorButton.addActionListener(new ActionListener(){\n      public void actionPerformed(      ActionEvent e){\n        String message=\"\";\n        message+=_(\"Arduino: \") + BaseNoGui.VERSION_NAME + \" (\"+ System.getProperty(\"os.name\")+ \"), \";\n        message+=_(\"Board: \") + \"\\\"\" + Base.getBoardPreferences().get(\"name\")+ \"\\\"\\n\\n\";\n        message+=editor.console.consoleTextPane.getText().trim();\n        if ((Preferences.getBoolean(\"build.verbose\")) == false) {\n          message+=\"\\n\\n\";\n          message+=\"  \" + _(\"This report would have more information with\") + \"\\n\";\n          message+=\"  \\\"\" + _(\"Show verbose output during compilation\") + \"\\\"\\n\";\n          message+=\"  \" + _(\"enabled in File > Preferences.\") + \"\\n\";\n        }\n        Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();\n        StringSelection data=new StringSelection(message);\n        clipboard.setContents(data,null);\n        Clipboard unixclipboard=Toolkit.getDefaultToolkit().getSystemSelection();\n        if (unixclipboard != null)         unixclipboard.setContents(data,null);\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 608,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6858,
        "startLineNumber" : 311,
        "startColumnNumber" : 2,
        "endLineNumber" : 484,
        "endColumnNumber" : 3
      },
      "nodeContext" : "protected void setup(){\n  if (okButton == null) {\n    cancelButton=new JButton(I18n.PROMPT_CANCEL);\n    okButton=new JButton(I18n.PROMPT_OK);\n    cancelButton.addActionListener(new ActionListener(){\n      public void actionPerformed(      ActionEvent e){\n        if (mode == EDIT) {\n          unedit();\n        }\n      }\n    }\n);\n    okButton.addActionListener(new ActionListener(){\n      public void actionPerformed(      ActionEvent e){\n        if (mode == EDIT) {\n          String answer=editField.getText();\n          editor.getSketch().nameCode(answer);\n          unedit();\n        }\n      }\n    }\n);\n    if (OSUtils.isMacOS()) {\n      cancelButton.setBackground(bgcolor[EDIT]);\n      okButton.setBackground(bgcolor[EDIT]);\n    }\n    setLayout(null);\n    add(cancelButton);\n    add(okButton);\n    cancelButton.setVisible(false);\n    okButton.setVisible(false);\n    editField=new JTextField();\n    editField.addKeyListener(new KeyAdapter(){\n      public void keyPressed(      KeyEvent event){\n        if (event.getKeyChar() == KeyEvent.VK_ESCAPE) {\n          unedit();\n          event.consume();\n        }\n      }\n      public void keyTyped(      KeyEvent event){\n        int c=event.getKeyChar();\n        if (c == KeyEvent.VK_ENTER) {\n          String answer=editField.getText();\n          editor.getSketch().nameCode(answer);\n          unedit();\n          event.consume();\n        }\n else         if ((c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_RIGHT)|| (c == KeyEvent.VK_LEFT)|| (c == KeyEvent.VK_UP)|| (c == KeyEvent.VK_DOWN)|| (c == KeyEvent.VK_HOME)|| (c == KeyEvent.VK_END)|| (c == KeyEvent.VK_SHIFT)) {\n        }\n else         if (c == KeyEvent.VK_SPACE) {\n          String t=editField.getText();\n          int start=editField.getSelectionStart();\n          int end=editField.getSelectionEnd();\n          editField.setText(t.substring(0,start) + \"_\" + t.substring(end));\n          editField.setCaretPosition(start + 1);\n          event.consume();\n        }\n else         if ((c == '_') || (c == '.') || ((c >= 'A') && (c <= 'Z'))|| ((c >= 'a') && (c <= 'z'))) {\n        }\n else         if ((c >= '0') && (c <= '9')) {\n          if ((editField.getCaretPosition() == 0) || (editField.getSelectionStart() == 0)) {\n            event.consume();\n          }\n        }\n else {\n          event.consume();\n        }\n      }\n    }\n);\n    add(editField);\n    editField.setVisible(false);\n    progressBar=new JProgressBar(JScrollBar.HORIZONTAL);\n    progressBar.setIndeterminate(false);\n    if (OSUtils.isMacOS()) {\n    }\n    progressBar.setValue(0);\n    progressBar.setBorderPainted(true);\n    add(progressBar);\n    progressBar.setVisible(false);\n    copyErrorButton=new JButton(_(\"Copy error messages\"));\n    add(copyErrorButton);\n    copyErrorButton.setVisible(false);\n    copyErrorButton.addActionListener(new ActionListener(){\n      public void actionPerformed(      ActionEvent e){\n        String message=\"\";\n        message+=_(\"Arduino: \") + BaseNoGui.VERSION_NAME + \" (\"+ System.getProperty(\"os.name\")+ \"), \";\n        message+=_(\"Board: \") + \"\\\"\" + Base.getBoardPreferences().get(\"name\")+ \"\\\"\\n\\n\";\n        message+=editor.console.consoleTextPane.getText().trim();\n        if ((Preferences.getBoolean(\"build.verbose\")) == false) {\n          message+=\"\\n\\n\";\n          message+=\"  \" + _(\"This report would have more information with\") + \"\\n\";\n          message+=\"  \\\"\" + _(\"Show verbose output during compilation\") + \"\\\"\\n\";\n          message+=\"  \" + _(\"enabled in File > Preferences.\") + \"\\n\";\n        }\n        Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();\n        StringSelection data=new StringSelection(message);\n        clipboard.setContents(data,null);\n        Clipboard unixclipboard=Toolkit.getDefaultToolkit().getSystemSelection();\n        if (unixclipboard != null)         unixclipboard.setContents(data,null);\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 612,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 314,
        "startColumnNumber" : 6,
        "endLineNumber" : 314,
        "endColumnNumber" : 45
      },
      "nodeContext" : "okButton=new JButton(I18n.PROMPT_OK);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "javax.swing.JButton"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 314,
    "startColumnNumber" : 17,
    "endLineNumber" : 314,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}