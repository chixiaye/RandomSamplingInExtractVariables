{
  "id" : 201,
  "expression" : "pattern.matcher(name)",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "/services/src/main/java/org/jd/gui/view/component/TypeReferencePage.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "pattern.matcher(name)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 80,
      "startColumnNumber" : 32,
      "endLineNumber" : 80,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 80,
        "startColumnNumber" : 32,
        "endLineNumber" : 80,
        "endColumnNumber" : 63
      },
      "nodeContext" : "pattern.matcher(name).matches()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 80,
        "startColumnNumber" : 28,
        "endLineNumber" : 82,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (pattern.matcher(name).matches()) {\n  ranges.add(new DocumentRange(hyperlink.startPosition,hyperlink.endPosition));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 430,
        "startLineNumber" : 76,
        "startColumnNumber" : 94,
        "endLineNumber" : 83,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  TypeHyperlinkData hyperlink=(TypeHyperlinkData)entry.getValue();\n  String name=getMostInnerTypeName(hyperlink.internalTypeName);\n  if (pattern.matcher(name).matches()) {\n    ranges.add(new DocumentRange(hyperlink.startPosition,hyperlink.endPosition));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 500,
        "startLineNumber" : 76,
        "startColumnNumber" : 24,
        "endLineNumber" : 83,
        "endColumnNumber" : 25
      },
      "nodeContext" : "for (Map.Entry<Integer,HyperlinkData> entry : hyperlinks.entrySet()) {\n  TypeHyperlinkData hyperlink=(TypeHyperlinkData)entry.getValue();\n  String name=getMostInnerTypeName(hyperlink.internalTypeName);\n  if (pattern.matcher(name).matches()) {\n    ranges.add(new DocumentRange(hyperlink.startPosition,hyperlink.endPosition));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 681,
        "startLineNumber" : 72,
        "startColumnNumber" : 100,
        "endLineNumber" : 84,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Pattern pattern=Pattern.compile(regexp + \".*\");\n  for (  Map.Entry<Integer,HyperlinkData> entry : hyperlinks.entrySet()) {\n    TypeHyperlinkData hyperlink=(TypeHyperlinkData)entry.getValue();\n    String name=getMostInnerTypeName(hyperlink.internalTypeName);\n    if (pattern.matcher(name).matches()) {\n      ranges.add(new DocumentRange(hyperlink.startPosition,hyperlink.endPosition));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 761,
        "startLineNumber" : 72,
        "startColumnNumber" : 20,
        "endLineNumber" : 84,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if ((highlightFlags.indexOf('t') != -1) && (highlightFlags.indexOf('r') != -1)) {\n  Pattern pattern=Pattern.compile(regexp + \".*\");\n  for (  Map.Entry<Integer,HyperlinkData> entry : hyperlinks.entrySet()) {\n    TypeHyperlinkData hyperlink=(TypeHyperlinkData)entry.getValue();\n    String name=getMostInnerTypeName(hyperlink.internalTypeName);\n    if (pattern.matcher(name).matches()) {\n      ranges.add(new DocumentRange(hyperlink.startPosition,hyperlink.endPosition));\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1326,
        "startLineNumber" : 59,
        "startColumnNumber" : 76,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String regexp=createRegExp(highlightPattern);\n  if (highlightFlags.indexOf('s') != -1) {\n    Pattern pattern=Pattern.compile(regexp);\n    Matcher matcher=pattern.matcher(textArea.getText());\n    while (matcher.find()) {\n      ranges.add(new DocumentRange(matcher.start(),matcher.end()));\n    }\n  }\n  if ((highlightFlags.indexOf('t') != -1) && (highlightFlags.indexOf('r') != -1)) {\n    Pattern pattern=Pattern.compile(regexp + \".*\");\n    for (    Map.Entry<Integer,HyperlinkData> entry : hyperlinks.entrySet()) {\n      TypeHyperlinkData hyperlink=(TypeHyperlinkData)entry.getValue();\n      String name=getMostInnerTypeName(hyperlink.internalTypeName);\n      if (pattern.matcher(name).matches()) {\n        ranges.add(new DocumentRange(hyperlink.startPosition,hyperlink.endPosition));\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1386,
        "startLineNumber" : 59,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if ((highlightFlags != null) && (highlightPattern != null)) {\n  String regexp=createRegExp(highlightPattern);\n  if (highlightFlags.indexOf('s') != -1) {\n    Pattern pattern=Pattern.compile(regexp);\n    Matcher matcher=pattern.matcher(textArea.getText());\n    while (matcher.find()) {\n      ranges.add(new DocumentRange(matcher.start(),matcher.end()));\n    }\n  }\n  if ((highlightFlags.indexOf('t') != -1) && (highlightFlags.indexOf('r') != -1)) {\n    Pattern pattern=Pattern.compile(regexp + \".*\");\n    for (    Map.Entry<Integer,HyperlinkData> entry : hyperlinks.entrySet()) {\n      TypeHyperlinkData hyperlink=(TypeHyperlinkData)entry.getValue();\n      String name=getMostInnerTypeName(hyperlink.internalTypeName);\n      if (pattern.matcher(name).matches()) {\n        ranges.add(new DocumentRange(hyperlink.startPosition,hyperlink.endPosition));\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 55,
        "startColumnNumber" : 19,
        "endLineNumber" : 86,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String highlightFlags=parameters.get(\"highlightFlags\");\n  String highlightPattern=parameters.get(\"highlightPattern\");\n  if ((highlightFlags != null) && (highlightPattern != null)) {\n    String regexp=createRegExp(highlightPattern);\n    if (highlightFlags.indexOf('s') != -1) {\n      Pattern pattern=Pattern.compile(regexp);\n      Matcher matcher=pattern.matcher(textArea.getText());\n      while (matcher.find()) {\n        ranges.add(new DocumentRange(matcher.start(),matcher.end()));\n      }\n    }\n    if ((highlightFlags.indexOf('t') != -1) && (highlightFlags.indexOf('r') != -1)) {\n      Pattern pattern=Pattern.compile(regexp + \".*\");\n      for (      Map.Entry<Integer,HyperlinkData> entry : hyperlinks.entrySet()) {\n        TypeHyperlinkData hyperlink=(TypeHyperlinkData)entry.getValue();\n        String name=getMostInnerTypeName(hyperlink.internalTypeName);\n        if (pattern.matcher(name).matches()) {\n          ranges.add(new DocumentRange(hyperlink.startPosition,hyperlink.endPosition));\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2077,
        "startLineNumber" : 44,
        "startColumnNumber" : 19,
        "endLineNumber" : 86,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (parameters.containsKey(\"position\")) {\n  String position=parameters.get(\"position\");\n  try {\n    int pos=Integer.parseInt(position);\n    if (textArea.getDocument().getLength() > pos) {\n      ranges.add(new DocumentRange(pos,pos));\n    }\n  }\n catch (  NumberFormatException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n else {\n  String highlightFlags=parameters.get(\"highlightFlags\");\n  String highlightPattern=parameters.get(\"highlightPattern\");\n  if ((highlightFlags != null) && (highlightPattern != null)) {\n    String regexp=createRegExp(highlightPattern);\n    if (highlightFlags.indexOf('s') != -1) {\n      Pattern pattern=Pattern.compile(regexp);\n      Matcher matcher=pattern.matcher(textArea.getText());\n      while (matcher.find()) {\n        ranges.add(new DocumentRange(matcher.start(),matcher.end()));\n      }\n    }\n    if ((highlightFlags.indexOf('t') != -1) && (highlightFlags.indexOf('r') != -1)) {\n      Pattern pattern=Pattern.compile(regexp + \".*\");\n      for (      Map.Entry<Integer,HyperlinkData> entry : hyperlinks.entrySet()) {\n        TypeHyperlinkData hyperlink=(TypeHyperlinkData)entry.getValue();\n        String name=getMostInnerTypeName(hyperlink.internalTypeName);\n        if (pattern.matcher(name).matches()) {\n          ranges.add(new DocumentRange(hyperlink.startPosition,hyperlink.endPosition));\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 227,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2468,
        "startLineNumber" : 35,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (parameters.containsKey(\"lineNumber\")) {\n  String lineNumber=parameters.get(\"lineNumber\");\n  try {\n    goToLineNumber(Integer.parseInt(lineNumber));\n    return true;\n  }\n catch (  NumberFormatException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n else if (parameters.containsKey(\"position\")) {\n  String position=parameters.get(\"position\");\n  try {\n    int pos=Integer.parseInt(position);\n    if (textArea.getDocument().getLength() > pos) {\n      ranges.add(new DocumentRange(pos,pos));\n    }\n  }\n catch (  NumberFormatException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n else {\n  String highlightFlags=parameters.get(\"highlightFlags\");\n  String highlightPattern=parameters.get(\"highlightPattern\");\n  if ((highlightFlags != null) && (highlightPattern != null)) {\n    String regexp=createRegExp(highlightPattern);\n    if (highlightFlags.indexOf('s') != -1) {\n      Pattern pattern=Pattern.compile(regexp);\n      Matcher matcher=pattern.matcher(textArea.getText());\n      while (matcher.find()) {\n        ranges.add(new DocumentRange(matcher.start(),matcher.end()));\n      }\n    }\n    if ((highlightFlags.indexOf('t') != -1) && (highlightFlags.indexOf('r') != -1)) {\n      Pattern pattern=Pattern.compile(regexp + \".*\");\n      for (      Map.Entry<Integer,HyperlinkData> entry : hyperlinks.entrySet()) {\n        TypeHyperlinkData hyperlink=(TypeHyperlinkData)entry.getValue();\n        String name=getMostInnerTypeName(hyperlink.internalTypeName);\n        if (pattern.matcher(name).matches()) {\n          ranges.add(new DocumentRange(hyperlink.startPosition,hyperlink.endPosition));\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 264,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2561,
        "startLineNumber" : 32,
        "startColumnNumber" : 27,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Map<String,String> parameters=parseQuery(query);\n  if (parameters.containsKey(\"lineNumber\")) {\n    String lineNumber=parameters.get(\"lineNumber\");\n    try {\n      goToLineNumber(Integer.parseInt(lineNumber));\n      return true;\n    }\n catch (    NumberFormatException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n else   if (parameters.containsKey(\"position\")) {\n    String position=parameters.get(\"position\");\n    try {\n      int pos=Integer.parseInt(position);\n      if (textArea.getDocument().getLength() > pos) {\n        ranges.add(new DocumentRange(pos,pos));\n      }\n    }\n catch (    NumberFormatException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n else {\n    String highlightFlags=parameters.get(\"highlightFlags\");\n    String highlightPattern=parameters.get(\"highlightPattern\");\n    if ((highlightFlags != null) && (highlightPattern != null)) {\n      String regexp=createRegExp(highlightPattern);\n      if (highlightFlags.indexOf('s') != -1) {\n        Pattern pattern=Pattern.compile(regexp);\n        Matcher matcher=pattern.matcher(textArea.getText());\n        while (matcher.find()) {\n          ranges.add(new DocumentRange(matcher.start(),matcher.end()));\n        }\n      }\n      if ((highlightFlags.indexOf('t') != -1) && (highlightFlags.indexOf('r') != -1)) {\n        Pattern pattern=Pattern.compile(regexp + \".*\");\n        for (        Map.Entry<Integer,HyperlinkData> entry : hyperlinks.entrySet()) {\n          TypeHyperlinkData hyperlink=(TypeHyperlinkData)entry.getValue();\n          String name=getMostInnerTypeName(hyperlink.internalTypeName);\n          if (pattern.matcher(name).matches()) {\n            ranges.add(new DocumentRange(hyperlink.startPosition,hyperlink.endPosition));\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2580,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (query != null) {\n  Map<String,String> parameters=parseQuery(query);\n  if (parameters.containsKey(\"lineNumber\")) {\n    String lineNumber=parameters.get(\"lineNumber\");\n    try {\n      goToLineNumber(Integer.parseInt(lineNumber));\n      return true;\n    }\n catch (    NumberFormatException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n else   if (parameters.containsKey(\"position\")) {\n    String position=parameters.get(\"position\");\n    try {\n      int pos=Integer.parseInt(position);\n      if (textArea.getDocument().getLength() > pos) {\n        ranges.add(new DocumentRange(pos,pos));\n      }\n    }\n catch (    NumberFormatException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n else {\n    String highlightFlags=parameters.get(\"highlightFlags\");\n    String highlightPattern=parameters.get(\"highlightPattern\");\n    if ((highlightFlags != null) && (highlightPattern != null)) {\n      String regexp=createRegExp(highlightPattern);\n      if (highlightFlags.indexOf('s') != -1) {\n        Pattern pattern=Pattern.compile(regexp);\n        Matcher matcher=pattern.matcher(textArea.getText());\n        while (matcher.find()) {\n          ranges.add(new DocumentRange(matcher.start(),matcher.end()));\n        }\n      }\n      if ((highlightFlags.indexOf('t') != -1) && (highlightFlags.indexOf('r') != -1)) {\n        Pattern pattern=Pattern.compile(regexp + \".*\");\n        for (        Map.Entry<Integer,HyperlinkData> entry : hyperlinks.entrySet()) {\n          TypeHyperlinkData hyperlink=(TypeHyperlinkData)entry.getValue();\n          String name=getMostInnerTypeName(hyperlink.internalTypeName);\n          if (pattern.matcher(name).matches()) {\n            ranges.add(new DocumentRange(hyperlink.startPosition,hyperlink.endPosition));\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 282,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3052,
        "startLineNumber" : 26,
        "startColumnNumber" : 36,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ArrayList<DocumentRange> ranges=new ArrayList<>();\n  String query=uri.getQuery();\n  Marker.clearMarkAllHighlights(textArea);\n  if (query != null) {\n    Map<String,String> parameters=parseQuery(query);\n    if (parameters.containsKey(\"lineNumber\")) {\n      String lineNumber=parameters.get(\"lineNumber\");\n      try {\n        goToLineNumber(Integer.parseInt(lineNumber));\n        return true;\n      }\n catch (      NumberFormatException e) {\n        assert ExceptionUtil.printStackTrace(e);\n      }\n    }\n else     if (parameters.containsKey(\"position\")) {\n      String position=parameters.get(\"position\");\n      try {\n        int pos=Integer.parseInt(position);\n        if (textArea.getDocument().getLength() > pos) {\n          ranges.add(new DocumentRange(pos,pos));\n        }\n      }\n catch (      NumberFormatException e) {\n        assert ExceptionUtil.printStackTrace(e);\n      }\n    }\n else {\n      String highlightFlags=parameters.get(\"highlightFlags\");\n      String highlightPattern=parameters.get(\"highlightPattern\");\n      if ((highlightFlags != null) && (highlightPattern != null)) {\n        String regexp=createRegExp(highlightPattern);\n        if (highlightFlags.indexOf('s') != -1) {\n          Pattern pattern=Pattern.compile(regexp);\n          Matcher matcher=pattern.matcher(textArea.getText());\n          while (matcher.find()) {\n            ranges.add(new DocumentRange(matcher.start(),matcher.end()));\n          }\n        }\n        if ((highlightFlags.indexOf('t') != -1) && (highlightFlags.indexOf('r') != -1)) {\n          Pattern pattern=Pattern.compile(regexp + \".*\");\n          for (          Map.Entry<Integer,HyperlinkData> entry : hyperlinks.entrySet()) {\n            TypeHyperlinkData hyperlink=(TypeHyperlinkData)entry.getValue();\n            String name=getMostInnerTypeName(hyperlink.internalTypeName);\n            if (pattern.matcher(name).matches()) {\n              ranges.add(new DocumentRange(hyperlink.startPosition,hyperlink.endPosition));\n            }\n          }\n        }\n      }\n    }\n  }\n  if ((ranges != null) && !ranges.isEmpty()) {\n    textArea.setMarkAllHighlightColor(SELECT_HIGHLIGHT_COLOR);\n    Marker.markAll(textArea,ranges);\n    ranges.sort(null);\n    setCaretPositionAndCenter(ranges.get(0));\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 344,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3084,
        "startLineNumber" : 26,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean openUri(URI uri){\n  ArrayList<DocumentRange> ranges=new ArrayList<>();\n  String query=uri.getQuery();\n  Marker.clearMarkAllHighlights(textArea);\n  if (query != null) {\n    Map<String,String> parameters=parseQuery(query);\n    if (parameters.containsKey(\"lineNumber\")) {\n      String lineNumber=parameters.get(\"lineNumber\");\n      try {\n        goToLineNumber(Integer.parseInt(lineNumber));\n        return true;\n      }\n catch (      NumberFormatException e) {\n        assert ExceptionUtil.printStackTrace(e);\n      }\n    }\n else     if (parameters.containsKey(\"position\")) {\n      String position=parameters.get(\"position\");\n      try {\n        int pos=Integer.parseInt(position);\n        if (textArea.getDocument().getLength() > pos) {\n          ranges.add(new DocumentRange(pos,pos));\n        }\n      }\n catch (      NumberFormatException e) {\n        assert ExceptionUtil.printStackTrace(e);\n      }\n    }\n else {\n      String highlightFlags=parameters.get(\"highlightFlags\");\n      String highlightPattern=parameters.get(\"highlightPattern\");\n      if ((highlightFlags != null) && (highlightPattern != null)) {\n        String regexp=createRegExp(highlightPattern);\n        if (highlightFlags.indexOf('s') != -1) {\n          Pattern pattern=Pattern.compile(regexp);\n          Matcher matcher=pattern.matcher(textArea.getText());\n          while (matcher.find()) {\n            ranges.add(new DocumentRange(matcher.start(),matcher.end()));\n          }\n        }\n        if ((highlightFlags.indexOf('t') != -1) && (highlightFlags.indexOf('r') != -1)) {\n          Pattern pattern=Pattern.compile(regexp + \".*\");\n          for (          Map.Entry<Integer,HyperlinkData> entry : hyperlinks.entrySet()) {\n            TypeHyperlinkData hyperlink=(TypeHyperlinkData)entry.getValue();\n            String name=getMostInnerTypeName(hyperlink.internalTypeName);\n            if (pattern.matcher(name).matches()) {\n              ranges.add(new DocumentRange(hyperlink.startPosition,hyperlink.endPosition));\n            }\n          }\n        }\n      }\n    }\n  }\n  if ((ranges != null) && !ranges.isEmpty()) {\n    textArea.setMarkAllHighlightColor(SELECT_HIGHLIGHT_COLOR);\n    Marker.markAll(textArea,ranges);\n    ranges.sort(null);\n    setCaretPositionAndCenter(ranges.get(0));\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 352,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 80,
        "startColumnNumber" : 32,
        "endLineNumber" : 80,
        "endColumnNumber" : 63
      },
      "nodeContext" : "pattern.matcher(name).matches()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "java.util.regex.Matcher"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 80,
    "startColumnNumber" : 32,
    "endLineNumber" : 80,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}