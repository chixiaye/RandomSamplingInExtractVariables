{
  "id" : 260,
  "expression" : "actual.getAllTables()",
  "projectName" : "apache@shardingsphere",
  "commitID" : "897bcea9f4b0f5e33eb545470f28a35d68fccf60",
  "filePath" : "/shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/statement/dal/OptimizeTableStatementContextTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "actual.getAllTables()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 47,
      "startColumnNumber" : 19,
      "endLineNumber" : 47,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 47,
        "startColumnNumber" : 19,
        "endLineNumber" : 47,
        "endColumnNumber" : 49
      },
      "nodeContext" : "actual.getAllTables().stream()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 47,
        "startColumnNumber" : 19,
        "endLineNumber" : 47,
        "endColumnNumber" : 109
      },
      "nodeContext" : "actual.getAllTables().stream().map(each -> each.getTableName().getIdentifier().getValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 47,
        "startColumnNumber" : 19,
        "endLineNumber" : 47,
        "endColumnNumber" : 138
      },
      "nodeContext" : "actual.getAllTables().stream().map(each -> each.getTableName().getIdentifier().getValue()).collect(Collectors.toList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 179
      },
      "nodeContext" : "assertThat(actual.getAllTables().stream().map(each -> each.getTableName().getIdentifier().getValue()).collect(Collectors.toList()),is(Collections.singletonList(\"tbl_1\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 180
      },
      "nodeContext" : "assertThat(actual.getAllTables().stream().map(each -> each.getTableName().getIdentifier().getValue()).collect(Collectors.toList()),is(Collections.singletonList(\"tbl_1\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 31,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 769,
        "startLineNumber" : 40,
        "startColumnNumber" : 36,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MySQLOptimizeTableStatement optimizeTableStatement=mock(MySQLOptimizeTableStatement.class);\n  Collection<SimpleTableSegment> tables=Collections.singletonList(new SimpleTableSegment(new TableNameSegment(0,0,new IdentifierValue(\"tbl_1\"))));\n  when(optimizeTableStatement.getTables()).thenReturn(tables);\n  OptimizeTableStatementContext actual=new OptimizeTableStatementContext(optimizeTableStatement);\n  assertThat(actual,instanceOf(CommonSQLStatementContext.class));\n  assertThat(actual.getSqlStatement(),is(optimizeTableStatement));\n  assertThat(actual.getAllTables().stream().map(each -> each.getTableName().getIdentifier().getValue()).collect(Collectors.toList()),is(Collections.singletonList(\"tbl_1\")));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 811,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void assertNewInstance(){\n  MySQLOptimizeTableStatement optimizeTableStatement=mock(MySQLOptimizeTableStatement.class);\n  Collection<SimpleTableSegment> tables=Collections.singletonList(new SimpleTableSegment(new TableNameSegment(0,0,new IdentifierValue(\"tbl_1\"))));\n  when(optimizeTableStatement.getTables()).thenReturn(tables);\n  OptimizeTableStatementContext actual=new OptimizeTableStatementContext(optimizeTableStatement);\n  assertThat(actual,instanceOf(CommonSQLStatementContext.class));\n  assertThat(actual.getSqlStatement(),is(optimizeTableStatement));\n  assertThat(actual.getAllTables().stream().map(each -> each.getTableName().getIdentifier().getValue()).collect(Collectors.toList()),is(Collections.singletonList(\"tbl_1\")));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 107,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 180
      },
      "nodeContext" : "assertThat(actual.getAllTables().stream().map(each -> each.getTableName().getIdentifier().getValue()).collect(Collectors.toList()),is(Collections.singletonList(\"tbl_1\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 31,
      "astHeight" : 9
    },
    "tokenLength" : 2,
    "type" : "java.util.Collection<org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.SimpleTableSegment>"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 47,
    "startColumnNumber" : 19,
    "endLineNumber" : 47,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}