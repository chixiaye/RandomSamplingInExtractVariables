{
  "id" : 161,
  "expression" : "\"Please ensure that the type '\"",
  "projectName" : "mockito@mockito",
  "commitID" : "0b883e189676b7362b39f7a3ec97af7005e024dd",
  "filePath" : "src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Please ensure that the type '\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 118,
      "startColumnNumber" : 39,
      "endLineNumber" : 118,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 118,
        "startColumnNumber" : 39,
        "endLineNumber" : 118,
        "endColumnNumber" : 125
      },
      "nodeContext" : "\"Please ensure that the type '\" + type.getSimpleName() + \"' has a no-arg constructor.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 118,
        "startColumnNumber" : 18,
        "endLineNumber" : 118,
        "endColumnNumber" : 126
      },
      "nodeContext" : "new MockitoException(\"Please ensure that the type '\" + type.getSimpleName() + \"' has a no-arg constructor.\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 118,
        "endColumnNumber" : 127
      },
      "nodeContext" : "throw new MockitoException(\"Please ensure that the type '\" + type.getSimpleName() + \"' has a no-arg constructor.\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 117,
        "startColumnNumber" : 42,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new MockitoException(\"Please ensure that the type '\" + type.getSimpleName() + \"' has a no-arg constructor.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 117,
        "startColumnNumber" : 10,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (NoSuchMethodException e) {\n  throw new MockitoException(\"Please ensure that the type '\" + type.getSimpleName() + \"' has a no-arg constructor.\");\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  constructor=type.getDeclaredConstructor();\n}\n catch (NoSuchMethodException e) {\n  throw new MockitoException(\"Please ensure that the type '\" + type.getSimpleName() + \"' has a no-arg constructor.\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2352,
        "startLineNumber" : 86,
        "startColumnNumber" : 93,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockSettings settings=withSettings().defaultAnswer(CALLS_REAL_METHODS).name(field.getName());\n  Class<?> type=field.getType();\n  if (type.isInterface()) {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n  int modifiers=type.getModifiers();\n  if (Modifier.isPrivate(modifiers) && Modifier.isAbstract(modifiers) && type.getEnclosingClass() != null) {\n    throw new MockitoException(join(\"@Spy annotation can't initialize private abstract inner classes.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + type.getEnclosingClass().getSimpleName() + \"'\",\"\",\"You should augment the visibility of this inner class\"));\n  }\n  if (!Modifier.isStatic(modifiers)) {\n    Class<?> enclosing=type.getEnclosingClass();\n    if (enclosing != null) {\n      if (!enclosing.isInstance(testInstance)) {\n        throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n      }\n      return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n    }\n  }\n  Constructor<?> constructor;\n  try {\n    constructor=type.getDeclaredConstructor();\n  }\n catch (  NoSuchMethodException e) {\n    throw new MockitoException(\"Please ensure that the type '\" + type.getSimpleName() + \"' has a no-arg constructor.\");\n  }\n  if (Modifier.isPrivate(constructor.getModifiers())) {\n    constructor.setAccessible(true);\n    return Mockito.mock(type,settings.spiedInstance(constructor.newInstance()));\n  }\n else {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2517,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Object newSpyInstance(Object testInstance,Field field) throws InstantiationException, IllegalAccessException, InvocationTargetException {\n  MockSettings settings=withSettings().defaultAnswer(CALLS_REAL_METHODS).name(field.getName());\n  Class<?> type=field.getType();\n  if (type.isInterface()) {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n  int modifiers=type.getModifiers();\n  if (Modifier.isPrivate(modifiers) && Modifier.isAbstract(modifiers) && type.getEnclosingClass() != null) {\n    throw new MockitoException(join(\"@Spy annotation can't initialize private abstract inner classes.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + type.getEnclosingClass().getSimpleName() + \"'\",\"\",\"You should augment the visibility of this inner class\"));\n  }\n  if (!Modifier.isStatic(modifiers)) {\n    Class<?> enclosing=type.getEnclosingClass();\n    if (enclosing != null) {\n      if (!enclosing.isInstance(testInstance)) {\n        throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n      }\n      return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n    }\n  }\n  Constructor<?> constructor;\n  try {\n    constructor=type.getDeclaredConstructor();\n  }\n catch (  NoSuchMethodException e) {\n    throw new MockitoException(\"Please ensure that the type '\" + type.getSimpleName() + \"' has a no-arg constructor.\");\n  }\n  if (Modifier.isPrivate(constructor.getModifiers())) {\n    constructor.setAccessible(true);\n    return Mockito.mock(type,settings.spiedInstance(constructor.newInstance()));\n  }\n else {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 118,
        "endColumnNumber" : 127
      },
      "nodeContext" : "throw new MockitoException(\"Please ensure that the type '\" + type.getSimpleName() + \"' has a no-arg constructor.\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 118,
    "startColumnNumber" : 39,
    "endLineNumber" : 118,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}