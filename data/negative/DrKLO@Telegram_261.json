{
  "id" : 261,
  "expression" : "scratch",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/android/exoplayer2/extractor/ogg/OggPageHeader.java",
  "occurrences" : 13,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "scratch",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 89,
      "startColumnNumber" : 4,
      "endLineNumber" : 89,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 19
      },
      "nodeContext" : "scratch.reset()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 20
      },
      "nodeContext" : "scratch.reset();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 88,
        "startColumnNumber" : 47,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2120,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks an Ogg page header and updates this  {@link OggPageHeader}.\n * @param input The {@link ExtractorInput} to read from.\n * @param quiet Whether to return {@code false} rather than throwing an exception if the headercannot be populated.\n * @return Whether the read was successful. The read fails if the end of the input is encounteredwithout reading data.\n * @throws IOException If reading data fails or the stream is invalid.\n * @throws InterruptedException If the thread is interrupted.\n */\npublic boolean populate(ExtractorInput input,boolean quiet) throws IOException, InterruptedException {\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 20
      },
      "nodeContext" : "scratch.reset();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "scratch",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 93,
      "startColumnNumber" : 44,
      "endLineNumber" : 93,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 93,
        "startColumnNumber" : 44,
        "endLineNumber" : 93,
        "endColumnNumber" : 56
      },
      "nodeContext" : "scratch.data",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 93,
        "startColumnNumber" : 28,
        "endLineNumber" : 93,
        "endColumnNumber" : 90
      },
      "nodeContext" : "input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 93,
        "startColumnNumber" : 27,
        "endLineNumber" : 93,
        "endColumnNumber" : 90
      },
      "nodeContext" : "!input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 90
      },
      "nodeContext" : "!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n  if (quiet) {\n    return false;\n  }\n else {\n    throw new EOFException();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 88,
        "startColumnNumber" : 47,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2120,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks an Ogg page header and updates this  {@link OggPageHeader}.\n * @param input The {@link ExtractorInput} to read from.\n * @param quiet Whether to return {@code false} rather than throwing an exception if the headercannot be populated.\n * @return Whether the read was successful. The read fails if the end of the input is encounteredwithout reading data.\n * @throws IOException If reading data fails or the stream is invalid.\n * @throws InterruptedException If the thread is interrupted.\n */\npublic boolean populate(ExtractorInput input,boolean quiet) throws IOException, InterruptedException {\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 90
      },
      "nodeContext" : "!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "scratch",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 100,
      "startColumnNumber" : 8,
      "endLineNumber" : 100,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 33
      },
      "nodeContext" : "scratch.readUnsignedInt()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 46
      },
      "nodeContext" : "scratch.readUnsignedInt() != TYPE_OGGS",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (scratch.readUnsignedInt() != TYPE_OGGS) {\n  if (quiet) {\n    return false;\n  }\n else {\n    throw new ParserException(\"expected OggS capture pattern at begin of page\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 88,
        "startColumnNumber" : 47,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2120,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks an Ogg page header and updates this  {@link OggPageHeader}.\n * @param input The {@link ExtractorInput} to read from.\n * @param quiet Whether to return {@code false} rather than throwing an exception if the headercannot be populated.\n * @return Whether the read was successful. The read fails if the end of the input is encounteredwithout reading data.\n * @throws IOException If reading data fails or the stream is invalid.\n * @throws InterruptedException If the thread is interrupted.\n */\npublic boolean populate(ExtractorInput input,boolean quiet) throws IOException, InterruptedException {\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 46
      },
      "nodeContext" : "scratch.readUnsignedInt() != TYPE_OGGS",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "scratch",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 108,
      "startColumnNumber" : 15,
      "endLineNumber" : 108,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 108,
        "startColumnNumber" : 15,
        "endLineNumber" : 108,
        "endColumnNumber" : 41
      },
      "nodeContext" : "scratch.readUnsignedByte()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 41
      },
      "nodeContext" : "revision=scratch.readUnsignedByte()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 42
      },
      "nodeContext" : "revision=scratch.readUnsignedByte();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 88,
        "startColumnNumber" : 47,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2120,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks an Ogg page header and updates this  {@link OggPageHeader}.\n * @param input The {@link ExtractorInput} to read from.\n * @param quiet Whether to return {@code false} rather than throwing an exception if the headercannot be populated.\n * @return Whether the read was successful. The read fails if the end of the input is encounteredwithout reading data.\n * @throws IOException If reading data fails or the stream is invalid.\n * @throws InterruptedException If the thread is interrupted.\n */\npublic boolean populate(ExtractorInput input,boolean quiet) throws IOException, InterruptedException {\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 42
      },
      "nodeContext" : "revision=scratch.readUnsignedByte();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "scratch",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 116,
      "startColumnNumber" : 11,
      "endLineNumber" : 116,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 116,
        "startColumnNumber" : 11,
        "endLineNumber" : 116,
        "endColumnNumber" : 37
      },
      "nodeContext" : "scratch.readUnsignedByte()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 116,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 37
      },
      "nodeContext" : "type=scratch.readUnsignedByte()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 116,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 38
      },
      "nodeContext" : "type=scratch.readUnsignedByte();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 88,
        "startColumnNumber" : 47,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2120,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks an Ogg page header and updates this  {@link OggPageHeader}.\n * @param input The {@link ExtractorInput} to read from.\n * @param quiet Whether to return {@code false} rather than throwing an exception if the headercannot be populated.\n * @return Whether the read was successful. The read fails if the end of the input is encounteredwithout reading data.\n * @throws IOException If reading data fails or the stream is invalid.\n * @throws InterruptedException If the thread is interrupted.\n */\npublic boolean populate(ExtractorInput input,boolean quiet) throws IOException, InterruptedException {\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 116,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 38
      },
      "nodeContext" : "type=scratch.readUnsignedByte();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "scratch",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 118,
      "startColumnNumber" : 22,
      "endLineNumber" : 118,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 118,
        "startColumnNumber" : 22,
        "endLineNumber" : 118,
        "endColumnNumber" : 52
      },
      "nodeContext" : "scratch.readLittleEndianLong()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 118,
        "startColumnNumber" : 4,
        "endLineNumber" : 118,
        "endColumnNumber" : 52
      },
      "nodeContext" : "granulePosition=scratch.readLittleEndianLong()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 118,
        "startColumnNumber" : 4,
        "endLineNumber" : 118,
        "endColumnNumber" : 53
      },
      "nodeContext" : "granulePosition=scratch.readLittleEndianLong();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 88,
        "startColumnNumber" : 47,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2120,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks an Ogg page header and updates this  {@link OggPageHeader}.\n * @param input The {@link ExtractorInput} to read from.\n * @param quiet Whether to return {@code false} rather than throwing an exception if the headercannot be populated.\n * @return Whether the read was successful. The read fails if the end of the input is encounteredwithout reading data.\n * @throws IOException If reading data fails or the stream is invalid.\n * @throws InterruptedException If the thread is interrupted.\n */\npublic boolean populate(ExtractorInput input,boolean quiet) throws IOException, InterruptedException {\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 118,
        "startColumnNumber" : 4,
        "endLineNumber" : 118,
        "endColumnNumber" : 53
      },
      "nodeContext" : "granulePosition=scratch.readLittleEndianLong();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "scratch",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 119,
      "startColumnNumber" : 25,
      "endLineNumber" : 119,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 119,
        "startColumnNumber" : 25,
        "endLineNumber" : 119,
        "endColumnNumber" : 62
      },
      "nodeContext" : "scratch.readLittleEndianUnsignedInt()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 62
      },
      "nodeContext" : "streamSerialNumber=scratch.readLittleEndianUnsignedInt()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 63
      },
      "nodeContext" : "streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 88,
        "startColumnNumber" : 47,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2120,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks an Ogg page header and updates this  {@link OggPageHeader}.\n * @param input The {@link ExtractorInput} to read from.\n * @param quiet Whether to return {@code false} rather than throwing an exception if the headercannot be populated.\n * @return Whether the read was successful. The read fails if the end of the input is encounteredwithout reading data.\n * @throws IOException If reading data fails or the stream is invalid.\n * @throws InterruptedException If the thread is interrupted.\n */\npublic boolean populate(ExtractorInput input,boolean quiet) throws IOException, InterruptedException {\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 63
      },
      "nodeContext" : "streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "scratch",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 120,
      "startColumnNumber" : 25,
      "endLineNumber" : 120,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 120,
        "startColumnNumber" : 25,
        "endLineNumber" : 120,
        "endColumnNumber" : 62
      },
      "nodeContext" : "scratch.readLittleEndianUnsignedInt()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pageSequenceNumber=scratch.readLittleEndianUnsignedInt()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 63
      },
      "nodeContext" : "pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 88,
        "startColumnNumber" : 47,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2120,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks an Ogg page header and updates this  {@link OggPageHeader}.\n * @param input The {@link ExtractorInput} to read from.\n * @param quiet Whether to return {@code false} rather than throwing an exception if the headercannot be populated.\n * @return Whether the read was successful. The read fails if the end of the input is encounteredwithout reading data.\n * @throws IOException If reading data fails or the stream is invalid.\n * @throws InterruptedException If the thread is interrupted.\n */\npublic boolean populate(ExtractorInput input,boolean quiet) throws IOException, InterruptedException {\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 63
      },
      "nodeContext" : "pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "scratch",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 121,
      "startColumnNumber" : 19,
      "endLineNumber" : 121,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 121,
        "startColumnNumber" : 19,
        "endLineNumber" : 121,
        "endColumnNumber" : 56
      },
      "nodeContext" : "scratch.readLittleEndianUnsignedInt()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 121,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 56
      },
      "nodeContext" : "pageChecksum=scratch.readLittleEndianUnsignedInt()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 121,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 57
      },
      "nodeContext" : "pageChecksum=scratch.readLittleEndianUnsignedInt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 88,
        "startColumnNumber" : 47,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2120,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks an Ogg page header and updates this  {@link OggPageHeader}.\n * @param input The {@link ExtractorInput} to read from.\n * @param quiet Whether to return {@code false} rather than throwing an exception if the headercannot be populated.\n * @return Whether the read was successful. The read fails if the end of the input is encounteredwithout reading data.\n * @throws IOException If reading data fails or the stream is invalid.\n * @throws InterruptedException If the thread is interrupted.\n */\npublic boolean populate(ExtractorInput input,boolean quiet) throws IOException, InterruptedException {\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 121,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 57
      },
      "nodeContext" : "pageChecksum=scratch.readLittleEndianUnsignedInt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "scratch",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 122,
      "startColumnNumber" : 23,
      "endLineNumber" : 122,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 122,
        "startColumnNumber" : 23,
        "endLineNumber" : 122,
        "endColumnNumber" : 49
      },
      "nodeContext" : "scratch.readUnsignedByte()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 49
      },
      "nodeContext" : "pageSegmentCount=scratch.readUnsignedByte()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 50
      },
      "nodeContext" : "pageSegmentCount=scratch.readUnsignedByte();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 88,
        "startColumnNumber" : 47,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2120,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks an Ogg page header and updates this  {@link OggPageHeader}.\n * @param input The {@link ExtractorInput} to read from.\n * @param quiet Whether to return {@code false} rather than throwing an exception if the headercannot be populated.\n * @return Whether the read was successful. The read fails if the end of the input is encounteredwithout reading data.\n * @throws IOException If reading data fails or the stream is invalid.\n * @throws InterruptedException If the thread is interrupted.\n */\npublic boolean populate(ExtractorInput input,boolean quiet) throws IOException, InterruptedException {\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 50
      },
      "nodeContext" : "pageSegmentCount=scratch.readUnsignedByte();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "scratch",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 126,
      "startColumnNumber" : 4,
      "endLineNumber" : 126,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 19
      },
      "nodeContext" : "scratch.reset()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 20
      },
      "nodeContext" : "scratch.reset();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 88,
        "startColumnNumber" : 47,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2120,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks an Ogg page header and updates this  {@link OggPageHeader}.\n * @param input The {@link ExtractorInput} to read from.\n * @param quiet Whether to return {@code false} rather than throwing an exception if the headercannot be populated.\n * @return Whether the read was successful. The read fails if the end of the input is encounteredwithout reading data.\n * @throws IOException If reading data fails or the stream is invalid.\n * @throws InterruptedException If the thread is interrupted.\n */\npublic boolean populate(ExtractorInput input,boolean quiet) throws IOException, InterruptedException {\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 20
      },
      "nodeContext" : "scratch.reset();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "scratch",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 127,
      "startColumnNumber" : 20,
      "endLineNumber" : 127,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 127,
        "startColumnNumber" : 20,
        "endLineNumber" : 127,
        "endColumnNumber" : 32
      },
      "nodeContext" : "scratch.data",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 54
      },
      "nodeContext" : "input.peekFully(scratch.data,0,pageSegmentCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 55
      },
      "nodeContext" : "input.peekFully(scratch.data,0,pageSegmentCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 88,
        "startColumnNumber" : 47,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2120,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks an Ogg page header and updates this  {@link OggPageHeader}.\n * @param input The {@link ExtractorInput} to read from.\n * @param quiet Whether to return {@code false} rather than throwing an exception if the headercannot be populated.\n * @return Whether the read was successful. The read fails if the end of the input is encounteredwithout reading data.\n * @throws IOException If reading data fails or the stream is invalid.\n * @throws InterruptedException If the thread is interrupted.\n */\npublic boolean populate(ExtractorInput input,boolean quiet) throws IOException, InterruptedException {\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 55
      },
      "nodeContext" : "input.peekFully(scratch.data,0,pageSegmentCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "scratch",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 129,
      "startColumnNumber" : 17,
      "endLineNumber" : 129,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 129,
        "startColumnNumber" : 17,
        "endLineNumber" : 129,
        "endColumnNumber" : 43
      },
      "nodeContext" : "scratch.readUnsignedByte()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 129,
        "startColumnNumber" : 6,
        "endLineNumber" : 129,
        "endColumnNumber" : 43
      },
      "nodeContext" : "laces[i]=scratch.readUnsignedByte()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 129,
        "startColumnNumber" : 6,
        "endLineNumber" : 129,
        "endColumnNumber" : 44
      },
      "nodeContext" : "laces[i]=scratch.readUnsignedByte();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 128,
        "startColumnNumber" : 47,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  laces[i]=scratch.readUnsignedByte();\n  bodySize+=laces[i];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 128,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < pageSegmentCount; i++) {\n  laces[i]=scratch.readUnsignedByte();\n  bodySize+=laces[i];\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 88,
        "startColumnNumber" : 47,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2120,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks an Ogg page header and updates this  {@link OggPageHeader}.\n * @param input The {@link ExtractorInput} to read from.\n * @param quiet Whether to return {@code false} rather than throwing an exception if the headercannot be populated.\n * @return Whether the read was successful. The read fails if the end of the input is encounteredwithout reading data.\n * @throws IOException If reading data fails or the stream is invalid.\n * @throws InterruptedException If the thread is interrupted.\n */\npublic boolean populate(ExtractorInput input,boolean quiet) throws IOException, InterruptedException {\n  scratch.reset();\n  reset();\n  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;\n  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new EOFException();\n    }\n  }\n  if (scratch.readUnsignedInt() != TYPE_OGGS) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"expected OggS capture pattern at begin of page\");\n    }\n  }\n  revision=scratch.readUnsignedByte();\n  if (revision != 0x00) {\n    if (quiet) {\n      return false;\n    }\n else {\n      throw new ParserException(\"unsupported bit stream revision\");\n    }\n  }\n  type=scratch.readUnsignedByte();\n  granulePosition=scratch.readLittleEndianLong();\n  streamSerialNumber=scratch.readLittleEndianUnsignedInt();\n  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();\n  pageChecksum=scratch.readLittleEndianUnsignedInt();\n  pageSegmentCount=scratch.readUnsignedByte();\n  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;\n  scratch.reset();\n  input.peekFully(scratch.data,0,pageSegmentCount);\n  for (int i=0; i < pageSegmentCount; i++) {\n    laces[i]=scratch.readUnsignedByte();\n    bodySize+=laces[i];\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 129,
        "startColumnNumber" : 6,
        "endLineNumber" : 129,
        "endColumnNumber" : 44
      },
      "nodeContext" : "laces[i]=scratch.readUnsignedByte();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 89,
    "startColumnNumber" : 4,
    "endLineNumber" : 89,
    "endColumnNumber" : 11
  }, {
    "charLength" : 7,
    "startLineNumber" : 93,
    "startColumnNumber" : 44,
    "endLineNumber" : 93,
    "endColumnNumber" : 51
  }, {
    "charLength" : 7,
    "startLineNumber" : 100,
    "startColumnNumber" : 8,
    "endLineNumber" : 100,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 108,
    "startColumnNumber" : 15,
    "endLineNumber" : 108,
    "endColumnNumber" : 22
  }, {
    "charLength" : 7,
    "startLineNumber" : 116,
    "startColumnNumber" : 11,
    "endLineNumber" : 116,
    "endColumnNumber" : 18
  }, {
    "charLength" : 7,
    "startLineNumber" : 118,
    "startColumnNumber" : 22,
    "endLineNumber" : 118,
    "endColumnNumber" : 29
  }, {
    "charLength" : 7,
    "startLineNumber" : 119,
    "startColumnNumber" : 25,
    "endLineNumber" : 119,
    "endColumnNumber" : 32
  }, {
    "charLength" : 7,
    "startLineNumber" : 120,
    "startColumnNumber" : 25,
    "endLineNumber" : 120,
    "endColumnNumber" : 32
  }, {
    "charLength" : 7,
    "startLineNumber" : 121,
    "startColumnNumber" : 19,
    "endLineNumber" : 121,
    "endColumnNumber" : 26
  }, {
    "charLength" : 7,
    "startLineNumber" : 122,
    "startColumnNumber" : 23,
    "endLineNumber" : 122,
    "endColumnNumber" : 30
  }, {
    "charLength" : 7,
    "startLineNumber" : 126,
    "startColumnNumber" : 4,
    "endLineNumber" : 126,
    "endColumnNumber" : 11
  }, {
    "charLength" : 7,
    "startLineNumber" : 127,
    "startColumnNumber" : 20,
    "endLineNumber" : 127,
    "endColumnNumber" : 27
  }, {
    "charLength" : 7,
    "startLineNumber" : 129,
    "startColumnNumber" : 17,
    "endLineNumber" : 129,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 5
  } ]
}