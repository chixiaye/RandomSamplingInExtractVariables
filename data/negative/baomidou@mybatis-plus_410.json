{
  "id" : 410,
  "expression" : "factory",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "7815611a659da4cc8d5443f5ef4c10ca0d937582",
  "filePath" : "/mybatis-plus-boot-starter/src/main/java/com/baomidou/mybatisplus/spring/boot/starter/MybatisPlusAutoConfiguration.java",
  "occurrences" : 13,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "factory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 114,
      "startColumnNumber" : 8,
      "endLineNumber" : 114,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 114,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 41
      },
      "nodeContext" : "factory.setDataSource(dataSource)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 114,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 42
      },
      "nodeContext" : "factory.setDataSource(dataSource);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3403,
        "startLineNumber" : 112,
        "startColumnNumber" : 87,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3526,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 114,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 42
      },
      "nodeContext" : "factory.setDataSource(dataSource);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean"
  }, {
    "nodeContext" : "factory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 115,
      "startColumnNumber" : 8,
      "endLineNumber" : 115,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 43
      },
      "nodeContext" : "factory.setVfs(SpringBootVFS.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 44
      },
      "nodeContext" : "factory.setVfs(SpringBootVFS.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3403,
        "startLineNumber" : 112,
        "startColumnNumber" : 87,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3526,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 44
      },
      "nodeContext" : "factory.setVfs(SpringBootVFS.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean"
  }, {
    "nodeContext" : "factory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 117,
      "startColumnNumber" : 12,
      "endLineNumber" : 117,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 117,
        "startColumnNumber" : 12,
        "endLineNumber" : 117,
        "endColumnNumber" : 107
      },
      "nodeContext" : "factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 117,
        "startColumnNumber" : 12,
        "endLineNumber" : 117,
        "endColumnNumber" : 108
      },
      "nodeContext" : "factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 116,
        "startColumnNumber" : 70,
        "endLineNumber" : 118,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.hasText(this.properties.getConfigLocation())) {\n  factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3403,
        "startLineNumber" : 112,
        "startColumnNumber" : 87,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3526,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 117,
        "startColumnNumber" : 12,
        "endLineNumber" : 117,
        "endColumnNumber" : 108
      },
      "nodeContext" : "factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean"
  }, {
    "nodeContext" : "factory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 129,
      "startColumnNumber" : 8,
      "endLineNumber" : 129,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 47
      },
      "nodeContext" : "factory.setConfiguration(configuration)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 48
      },
      "nodeContext" : "factory.setConfiguration(configuration);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3403,
        "startLineNumber" : 112,
        "startColumnNumber" : 87,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3526,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 48
      },
      "nodeContext" : "factory.setConfiguration(configuration);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean"
  }, {
    "nodeContext" : "factory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 131,
      "startColumnNumber" : 12,
      "endLineNumber" : 131,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 92
      },
      "nodeContext" : "factory.setConfigurationProperties(this.properties.getConfigurationProperties())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 93
      },
      "nodeContext" : "factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 130,
        "startColumnNumber" : 66,
        "endLineNumber" : 132,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 132,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (this.properties.getConfigurationProperties() != null) {\n  factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3403,
        "startLineNumber" : 112,
        "startColumnNumber" : 87,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3526,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 93
      },
      "nodeContext" : "factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean"
  }, {
    "nodeContext" : "factory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 134,
      "startColumnNumber" : 12,
      "endLineNumber" : 134,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 134,
        "startColumnNumber" : 12,
        "endLineNumber" : 134,
        "endColumnNumber" : 49
      },
      "nodeContext" : "factory.setPlugins(this.interceptors)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 134,
        "startColumnNumber" : 12,
        "endLineNumber" : 134,
        "endColumnNumber" : 50
      },
      "nodeContext" : "factory.setPlugins(this.interceptors);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 133,
        "startColumnNumber" : 53,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  factory.setPlugins(this.interceptors);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!ObjectUtils.isEmpty(this.interceptors)) {\n  factory.setPlugins(this.interceptors);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3403,
        "startLineNumber" : 112,
        "startColumnNumber" : 87,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3526,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 134,
        "startColumnNumber" : 12,
        "endLineNumber" : 134,
        "endColumnNumber" : 50
      },
      "nodeContext" : "factory.setPlugins(this.interceptors);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean"
  }, {
    "nodeContext" : "factory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 137,
      "startColumnNumber" : 12,
      "endLineNumber" : 137,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 137,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 66
      },
      "nodeContext" : "factory.setDatabaseIdProvider(this.databaseIdProvider)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 137,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 67
      },
      "nodeContext" : "factory.setDatabaseIdProvider(this.databaseIdProvider);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 136,
        "startColumnNumber" : 45,
        "endLineNumber" : 138,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  factory.setDatabaseIdProvider(this.databaseIdProvider);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 136,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (this.databaseIdProvider != null) {\n  factory.setDatabaseIdProvider(this.databaseIdProvider);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3403,
        "startLineNumber" : 112,
        "startColumnNumber" : 87,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3526,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 137,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 67
      },
      "nodeContext" : "factory.setDatabaseIdProvider(this.databaseIdProvider);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean"
  }, {
    "nodeContext" : "factory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 140,
      "startColumnNumber" : 12,
      "endLineNumber" : 140,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 140,
        "startColumnNumber" : 12,
        "endLineNumber" : 140,
        "endColumnNumber" : 82
      },
      "nodeContext" : "factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 140,
        "startColumnNumber" : 12,
        "endLineNumber" : 140,
        "endColumnNumber" : 83
      },
      "nodeContext" : "factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 139,
        "startColumnNumber" : 76,
        "endLineNumber" : 141,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 139,
        "startColumnNumber" : 8,
        "endLineNumber" : 141,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n  factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3403,
        "startLineNumber" : 112,
        "startColumnNumber" : 87,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3526,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 140,
        "startColumnNumber" : 12,
        "endLineNumber" : 140,
        "endColumnNumber" : 83
      },
      "nodeContext" : "factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean"
  }, {
    "nodeContext" : "factory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 144,
      "startColumnNumber" : 12,
      "endLineNumber" : 144,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 144,
        "startColumnNumber" : 12,
        "endLineNumber" : 144,
        "endColumnNumber" : 78
      },
      "nodeContext" : "factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 144,
        "startColumnNumber" : 12,
        "endLineNumber" : 144,
        "endColumnNumber" : 79
      },
      "nodeContext" : "factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 143,
        "startColumnNumber" : 74,
        "endLineNumber" : 145,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 145,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n  factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3403,
        "startLineNumber" : 112,
        "startColumnNumber" : 87,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3526,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 144,
        "startColumnNumber" : 12,
        "endLineNumber" : 144,
        "endColumnNumber" : 79
      },
      "nodeContext" : "factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean"
  }, {
    "nodeContext" : "factory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 147,
      "startColumnNumber" : 12,
      "endLineNumber" : 147,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 147,
        "startColumnNumber" : 12,
        "endLineNumber" : 147,
        "endColumnNumber" : 84
      },
      "nodeContext" : "factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 147,
        "startColumnNumber" : 12,
        "endLineNumber" : 147,
        "endColumnNumber" : 85
      },
      "nodeContext" : "factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 146,
        "startColumnNumber" : 77,
        "endLineNumber" : 148,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 146,
        "startColumnNumber" : 8,
        "endLineNumber" : 148,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n  factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3403,
        "startLineNumber" : 112,
        "startColumnNumber" : 87,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3526,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 147,
        "startColumnNumber" : 12,
        "endLineNumber" : 147,
        "endColumnNumber" : 85
      },
      "nodeContext" : "factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean"
  }, {
    "nodeContext" : "factory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 150,
      "startColumnNumber" : 12,
      "endLineNumber" : 150,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 150,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 80
      },
      "nodeContext" : "factory.setMapperLocations(this.properties.resolveMapperLocations())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 150,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 81
      },
      "nodeContext" : "factory.setMapperLocations(this.properties.resolveMapperLocations());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 149,
        "startColumnNumber" : 76,
        "endLineNumber" : 151,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  factory.setMapperLocations(this.properties.resolveMapperLocations());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 149,
        "startColumnNumber" : 8,
        "endLineNumber" : 151,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n  factory.setMapperLocations(this.properties.resolveMapperLocations());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3403,
        "startLineNumber" : 112,
        "startColumnNumber" : 87,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3526,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 150,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 81
      },
      "nodeContext" : "factory.setMapperLocations(this.properties.resolveMapperLocations());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean"
  }, {
    "nodeContext" : "factory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 176,
      "startColumnNumber" : 8,
      "endLineNumber" : 176,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 45
      },
      "nodeContext" : "factory.setGlobalConfig(globalConfig)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 46
      },
      "nodeContext" : "factory.setGlobalConfig(globalConfig);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3403,
        "startLineNumber" : 112,
        "startColumnNumber" : 87,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3526,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 46
      },
      "nodeContext" : "factory.setGlobalConfig(globalConfig);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean"
  }, {
    "nodeContext" : "factory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 177,
      "startColumnNumber" : 15,
      "endLineNumber" : 177,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 177,
        "startColumnNumber" : 15,
        "endLineNumber" : 177,
        "endColumnNumber" : 34
      },
      "nodeContext" : "factory.getObject()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 177,
        "endColumnNumber" : 35
      },
      "nodeContext" : "return factory.getObject();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3403,
        "startLineNumber" : 112,
        "startColumnNumber" : 87,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3526,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 177,
        "endColumnNumber" : 35
      },
      "nodeContext" : "return factory.getObject();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 114,
    "startColumnNumber" : 8,
    "endLineNumber" : 114,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 115,
    "startColumnNumber" : 8,
    "endLineNumber" : 115,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 117,
    "startColumnNumber" : 12,
    "endLineNumber" : 117,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 129,
    "startColumnNumber" : 8,
    "endLineNumber" : 129,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 131,
    "startColumnNumber" : 12,
    "endLineNumber" : 131,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 134,
    "startColumnNumber" : 12,
    "endLineNumber" : 134,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 137,
    "startColumnNumber" : 12,
    "endLineNumber" : 137,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 140,
    "startColumnNumber" : 12,
    "endLineNumber" : 140,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 144,
    "startColumnNumber" : 12,
    "endLineNumber" : 144,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 147,
    "startColumnNumber" : 12,
    "endLineNumber" : 147,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 150,
    "startColumnNumber" : 12,
    "endLineNumber" : 150,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 176,
    "startColumnNumber" : 8,
    "endLineNumber" : 176,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 177,
    "startColumnNumber" : 15,
    "endLineNumber" : 177,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 2
  } ]
}