{
  "id" : 234,
  "expression" : "functionAssignmentTailer.triggerReadToTheEndAndExit()",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/LeaderService.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "functionAssignmentTailer.triggerReadToTheEndAndExit()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 53,
      "startLineNumber" : 130,
      "startColumnNumber" : 16,
      "endLineNumber" : 130,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 130,
        "startColumnNumber" : 16,
        "endLineNumber" : 130,
        "endColumnNumber" : 75
      },
      "nodeContext" : "functionAssignmentTailer.triggerReadToTheEndAndExit().get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 130,
        "startColumnNumber" : 16,
        "endLineNumber" : 130,
        "endColumnNumber" : 76
      },
      "nodeContext" : "functionAssignmentTailer.triggerReadToTheEndAndExit().get();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2505,
        "startLineNumber" : 96,
        "startColumnNumber" : 16,
        "endLineNumber" : 137,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  functionMetaDataManager.getIsInitialized().get();\n  functionRuntimeManager.getIsInitialized().get();\n  Supplier<Boolean> checkIsStillLeader=() -> membershipManager.getLeader().getWorkerId().equals(workerConfig.getWorkerId());\n  Producer<byte[]> scheduleManagerExclusiveProducer=null;\n  Producer<byte[]> functionMetaDataManagerExclusiveProducer=null;\n  try {\n    scheduleManagerExclusiveProducer=schedulerManager.acquireExclusiveWrite(checkIsStillLeader);\n    functionMetaDataManagerExclusiveProducer=functionMetaDataManager.acquireExclusiveWrite(checkIsStillLeader);\n  }\n catch (  WorkerUtils.NotLeaderAnymore e) {\n    log.info(\"Worker {} is not leader anymore. Exiting becoming leader routine.\",consumer);\n    if (scheduleManagerExclusiveProducer != null) {\n      scheduleManagerExclusiveProducer.close();\n    }\n    if (functionMetaDataManagerExclusiveProducer != null) {\n      functionMetaDataManagerExclusiveProducer.close();\n    }\n    return;\n  }\n  schedulerManager.initialize(scheduleManagerExclusiveProducer);\n  functionAssignmentTailer.triggerReadToTheEndAndExit().get();\n  functionAssignmentTailer.close();\n  functionMetaDataManager.acquireLeadership(functionMetaDataManagerExclusiveProducer);\n  isLeader=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2681,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 140,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  functionMetaDataManager.getIsInitialized().get();\n  functionRuntimeManager.getIsInitialized().get();\n  Supplier<Boolean> checkIsStillLeader=() -> membershipManager.getLeader().getWorkerId().equals(workerConfig.getWorkerId());\n  Producer<byte[]> scheduleManagerExclusiveProducer=null;\n  Producer<byte[]> functionMetaDataManagerExclusiveProducer=null;\n  try {\n    scheduleManagerExclusiveProducer=schedulerManager.acquireExclusiveWrite(checkIsStillLeader);\n    functionMetaDataManagerExclusiveProducer=functionMetaDataManager.acquireExclusiveWrite(checkIsStillLeader);\n  }\n catch (  WorkerUtils.NotLeaderAnymore e) {\n    log.info(\"Worker {} is not leader anymore. Exiting becoming leader routine.\",consumer);\n    if (scheduleManagerExclusiveProducer != null) {\n      scheduleManagerExclusiveProducer.close();\n    }\n    if (functionMetaDataManagerExclusiveProducer != null) {\n      functionMetaDataManagerExclusiveProducer.close();\n    }\n    return;\n  }\n  schedulerManager.initialize(scheduleManagerExclusiveProducer);\n  functionAssignmentTailer.triggerReadToTheEndAndExit().get();\n  functionAssignmentTailer.close();\n  functionMetaDataManager.acquireLeadership(functionMetaDataManagerExclusiveProducer);\n  isLeader=true;\n}\n catch (Throwable th) {\n  log.error(\"Encountered error when initializing to become leader\",th);\n  errorNotifier.triggerError(th);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 143,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 2807,
        "startLineNumber" : 93,
        "startColumnNumber" : 28,
        "endLineNumber" : 141,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isLeader)   return;\n  log.info(\"Worker {} became the leader.\",consumerName);\n  try {\n    functionMetaDataManager.getIsInitialized().get();\n    functionRuntimeManager.getIsInitialized().get();\n    Supplier<Boolean> checkIsStillLeader=() -> membershipManager.getLeader().getWorkerId().equals(workerConfig.getWorkerId());\n    Producer<byte[]> scheduleManagerExclusiveProducer=null;\n    Producer<byte[]> functionMetaDataManagerExclusiveProducer=null;\n    try {\n      scheduleManagerExclusiveProducer=schedulerManager.acquireExclusiveWrite(checkIsStillLeader);\n      functionMetaDataManagerExclusiveProducer=functionMetaDataManager.acquireExclusiveWrite(checkIsStillLeader);\n    }\n catch (    WorkerUtils.NotLeaderAnymore e) {\n      log.info(\"Worker {} is not leader anymore. Exiting becoming leader routine.\",consumer);\n      if (scheduleManagerExclusiveProducer != null) {\n        scheduleManagerExclusiveProducer.close();\n      }\n      if (functionMetaDataManagerExclusiveProducer != null) {\n        functionMetaDataManagerExclusiveProducer.close();\n      }\n      return;\n    }\n    schedulerManager.initialize(scheduleManagerExclusiveProducer);\n    functionAssignmentTailer.triggerReadToTheEndAndExit().get();\n    functionAssignmentTailer.close();\n    functionMetaDataManager.acquireLeadership(functionMetaDataManagerExclusiveProducer);\n    isLeader=true;\n  }\n catch (  Throwable th) {\n    log.error(\"Encountered error when initializing to become leader\",th);\n    errorNotifier.triggerError(th);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2827,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 141,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (this) {\n  if (isLeader)   return;\n  log.info(\"Worker {} became the leader.\",consumerName);\n  try {\n    functionMetaDataManager.getIsInitialized().get();\n    functionRuntimeManager.getIsInitialized().get();\n    Supplier<Boolean> checkIsStillLeader=() -> membershipManager.getLeader().getWorkerId().equals(workerConfig.getWorkerId());\n    Producer<byte[]> scheduleManagerExclusiveProducer=null;\n    Producer<byte[]> functionMetaDataManagerExclusiveProducer=null;\n    try {\n      scheduleManagerExclusiveProducer=schedulerManager.acquireExclusiveWrite(checkIsStillLeader);\n      functionMetaDataManagerExclusiveProducer=functionMetaDataManager.acquireExclusiveWrite(checkIsStillLeader);\n    }\n catch (    WorkerUtils.NotLeaderAnymore e) {\n      log.info(\"Worker {} is not leader anymore. Exiting becoming leader routine.\",consumer);\n      if (scheduleManagerExclusiveProducer != null) {\n        scheduleManagerExclusiveProducer.close();\n      }\n      if (functionMetaDataManagerExclusiveProducer != null) {\n        functionMetaDataManagerExclusiveProducer.close();\n      }\n      return;\n    }\n    schedulerManager.initialize(scheduleManagerExclusiveProducer);\n    functionAssignmentTailer.triggerReadToTheEndAndExit().get();\n    functionAssignmentTailer.close();\n    functionMetaDataManager.acquireLeadership(functionMetaDataManagerExclusiveProducer);\n    isLeader=true;\n  }\n catch (  Throwable th) {\n    log.error(\"Encountered error when initializing to become leader\",th);\n    errorNotifier.triggerError(th);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2934,
        "startLineNumber" : 92,
        "startColumnNumber" : 68,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nsynchronized (this) {\n    if (isLeader)     return;\n    log.info(\"Worker {} became the leader.\",consumerName);\n    try {\n      functionMetaDataManager.getIsInitialized().get();\n      functionRuntimeManager.getIsInitialized().get();\n      Supplier<Boolean> checkIsStillLeader=() -> membershipManager.getLeader().getWorkerId().equals(workerConfig.getWorkerId());\n      Producer<byte[]> scheduleManagerExclusiveProducer=null;\n      Producer<byte[]> functionMetaDataManagerExclusiveProducer=null;\n      try {\n        scheduleManagerExclusiveProducer=schedulerManager.acquireExclusiveWrite(checkIsStillLeader);\n        functionMetaDataManagerExclusiveProducer=functionMetaDataManager.acquireExclusiveWrite(checkIsStillLeader);\n      }\n catch (      WorkerUtils.NotLeaderAnymore e) {\n        log.info(\"Worker {} is not leader anymore. Exiting becoming leader routine.\",consumer);\n        if (scheduleManagerExclusiveProducer != null) {\n          scheduleManagerExclusiveProducer.close();\n        }\n        if (functionMetaDataManagerExclusiveProducer != null) {\n          functionMetaDataManagerExclusiveProducer.close();\n        }\n        return;\n      }\n      schedulerManager.initialize(scheduleManagerExclusiveProducer);\n      functionAssignmentTailer.triggerReadToTheEndAndExit().get();\n      functionAssignmentTailer.close();\n      functionMetaDataManager.acquireLeadership(functionMetaDataManagerExclusiveProducer);\n      isLeader=true;\n    }\n catch (    Throwable th) {\n      log.error(\"Encountered error when initializing to become leader\",th);\n      errorNotifier.triggerError(th);\n    }\n  }\n  schedulerManager.schedule();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3012,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void becameActive(Consumer<?> consumer,int partitionId){\nsynchronized (this) {\n    if (isLeader)     return;\n    log.info(\"Worker {} became the leader.\",consumerName);\n    try {\n      functionMetaDataManager.getIsInitialized().get();\n      functionRuntimeManager.getIsInitialized().get();\n      Supplier<Boolean> checkIsStillLeader=() -> membershipManager.getLeader().getWorkerId().equals(workerConfig.getWorkerId());\n      Producer<byte[]> scheduleManagerExclusiveProducer=null;\n      Producer<byte[]> functionMetaDataManagerExclusiveProducer=null;\n      try {\n        scheduleManagerExclusiveProducer=schedulerManager.acquireExclusiveWrite(checkIsStillLeader);\n        functionMetaDataManagerExclusiveProducer=functionMetaDataManager.acquireExclusiveWrite(checkIsStillLeader);\n      }\n catch (      WorkerUtils.NotLeaderAnymore e) {\n        log.info(\"Worker {} is not leader anymore. Exiting becoming leader routine.\",consumer);\n        if (scheduleManagerExclusiveProducer != null) {\n          scheduleManagerExclusiveProducer.close();\n        }\n        if (functionMetaDataManagerExclusiveProducer != null) {\n          functionMetaDataManagerExclusiveProducer.close();\n        }\n        return;\n      }\n      schedulerManager.initialize(scheduleManagerExclusiveProducer);\n      functionAssignmentTailer.triggerReadToTheEndAndExit().get();\n      functionAssignmentTailer.close();\n      functionMetaDataManager.acquireLeadership(functionMetaDataManagerExclusiveProducer);\n      isLeader=true;\n    }\n catch (    Throwable th) {\n      log.error(\"Encountered error when initializing to become leader\",th);\n      errorNotifier.triggerError(th);\n    }\n  }\n  schedulerManager.schedule();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 175,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 130,
        "startColumnNumber" : 16,
        "endLineNumber" : 130,
        "endColumnNumber" : 76
      },
      "nodeContext" : "functionAssignmentTailer.triggerReadToTheEndAndExit().get();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.concurrent.CompletableFuture<java.lang.Void>"
  } ],
  "positionList" : [ {
    "charLength" : 53,
    "startLineNumber" : 130,
    "startColumnNumber" : 16,
    "endLineNumber" : 130,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ ]
}