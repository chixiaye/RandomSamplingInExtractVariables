{
  "id" : 501,
  "expression" : "JavaConverters",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/server/CheckpointBench.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "JavaConverters",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 106,
      "startColumnNumber" : 12,
      "endLineNumber" : 106,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 106,
        "startColumnNumber" : 12,
        "endLineNumber" : 106,
        "endColumnNumber" : 68
      },
      "nodeContext" : "JavaConverters.seqAsJavaList(brokerProperties.logDirs())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 106,
        "startColumnNumber" : 12,
        "endLineNumber" : 106,
        "endColumnNumber" : 77
      },
      "nodeContext" : "JavaConverters.seqAsJavaList(brokerProperties.logDirs()).stream()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 106,
        "startColumnNumber" : 12,
        "endLineNumber" : 106,
        "endColumnNumber" : 92
      },
      "nodeContext" : "JavaConverters.seqAsJavaList(brokerProperties.logDirs()).stream().map(File::new)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 106,
        "startColumnNumber" : 12,
        "endLineNumber" : 106,
        "endColumnNumber" : 121
      },
      "nodeContext" : "JavaConverters.seqAsJavaList(brokerProperties.logDirs()).stream().map(File::new).collect(Collectors.toList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 105,
        "startColumnNumber" : 25,
        "endLineNumber" : 106,
        "endColumnNumber" : 121
      },
      "nodeContext" : "files=JavaConverters.seqAsJavaList(brokerProperties.logDirs()).stream().map(File::new).collect(Collectors.toList())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 122
      },
      "nodeContext" : "final List<File> files=JavaConverters.seqAsJavaList(brokerProperties.logDirs()).stream().map(File::new).collect(Collectors.toList());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2870,
        "startLineNumber" : 96,
        "startColumnNumber" : 24,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.scheduler=new KafkaScheduler(1,\"scheduler-thread\",true);\n  this.brokerProperties=KafkaConfig.fromProps(TestUtils.createBrokerConfig(0,TestUtils.MockZkConnect(),true,true,9092,Option.empty(),Option.empty(),Option.empty(),true,false,0,false,0,false,0,Option.empty(),1,true,1,(short)1));\n  this.metrics=new Metrics();\n  this.time=new MockTime();\n  this.failureChannel=new LogDirFailureChannel(brokerProperties.logDirs().size());\n  final List<File> files=JavaConverters.seqAsJavaList(brokerProperties.logDirs()).stream().map(File::new).collect(Collectors.toList());\n  this.logManager=TestUtils.createLogManager(JavaConverters.asScalaBuffer(files),LogConfig.apply(),new MockConfigRepository(),CleanerConfig.apply(1,4 * 1024 * 1024L,0.9d,1024 * 1024,32 * 1024 * 1024,Double.MAX_VALUE,15 * 1000,true,\"MD5\"),time,ApiVersion.latestVersion());\n  scheduler.startup();\n  final BrokerTopicStats brokerTopicStats=new BrokerTopicStats();\n  final MetadataCache metadataCache=MetadataCache.zkMetadataCache(this.brokerProperties.brokerId());\n  this.quotaManagers=QuotaFactory.instantiate(this.brokerProperties,this.metrics,this.time,\"\");\n  this.alterIsrManager=TestUtils.createAlterIsrManager();\n  this.replicaManager=new ReplicaManagerBuilder().setConfig(brokerProperties).setMetrics(metrics).setTime(time).setScheduler(scheduler).setLogManager(logManager).setQuotaManagers(quotaManagers).setBrokerTopicStats(brokerTopicStats).setMetadataCache(metadataCache).setLogDirFailureChannel(failureChannel).setAlterIsrManager(alterIsrManager).build();\n  replicaManager.startup();\n  List<TopicPartition> topicPartitions=new ArrayList<>();\n  for (int topicNum=0; topicNum < numTopics; topicNum++) {\n    final String topicName=this.topicName + \"-\" + topicNum;\n    for (int partitionNum=0; partitionNum < numPartitions; partitionNum++) {\n      topicPartitions.add(new TopicPartition(topicName,partitionNum));\n    }\n  }\n  OffsetCheckpoints checkpoints=(logDir,topicPartition) -> Option.apply(0L);\n  for (  TopicPartition topicPartition : topicPartitions) {\n    final Partition partition=this.replicaManager.createPartition(topicPartition);\n    partition.createLogIfNotExists(true,false,checkpoints,Option.apply(Uuid.randomUuid()));\n  }\n  replicaManager.checkpointHighWatermarks();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2951,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"deprecation\") @Setup(Level.Trial) public void setup(){\n  this.scheduler=new KafkaScheduler(1,\"scheduler-thread\",true);\n  this.brokerProperties=KafkaConfig.fromProps(TestUtils.createBrokerConfig(0,TestUtils.MockZkConnect(),true,true,9092,Option.empty(),Option.empty(),Option.empty(),true,false,0,false,0,false,0,Option.empty(),1,true,1,(short)1));\n  this.metrics=new Metrics();\n  this.time=new MockTime();\n  this.failureChannel=new LogDirFailureChannel(brokerProperties.logDirs().size());\n  final List<File> files=JavaConverters.seqAsJavaList(brokerProperties.logDirs()).stream().map(File::new).collect(Collectors.toList());\n  this.logManager=TestUtils.createLogManager(JavaConverters.asScalaBuffer(files),LogConfig.apply(),new MockConfigRepository(),CleanerConfig.apply(1,4 * 1024 * 1024L,0.9d,1024 * 1024,32 * 1024 * 1024,Double.MAX_VALUE,15 * 1000,true,\"MD5\"),time,ApiVersion.latestVersion());\n  scheduler.startup();\n  final BrokerTopicStats brokerTopicStats=new BrokerTopicStats();\n  final MetadataCache metadataCache=MetadataCache.zkMetadataCache(this.brokerProperties.brokerId());\n  this.quotaManagers=QuotaFactory.instantiate(this.brokerProperties,this.metrics,this.time,\"\");\n  this.alterIsrManager=TestUtils.createAlterIsrManager();\n  this.replicaManager=new ReplicaManagerBuilder().setConfig(brokerProperties).setMetrics(metrics).setTime(time).setScheduler(scheduler).setLogManager(logManager).setQuotaManagers(quotaManagers).setBrokerTopicStats(brokerTopicStats).setMetadataCache(metadataCache).setLogDirFailureChannel(failureChannel).setAlterIsrManager(alterIsrManager).build();\n  replicaManager.startup();\n  List<TopicPartition> topicPartitions=new ArrayList<>();\n  for (int topicNum=0; topicNum < numTopics; topicNum++) {\n    final String topicName=this.topicName + \"-\" + topicNum;\n    for (int partitionNum=0; partitionNum < numPartitions; partitionNum++) {\n      topicPartitions.add(new TopicPartition(topicName,partitionNum));\n    }\n  }\n  OffsetCheckpoints checkpoints=(logDir,topicPartition) -> Option.apply(0L);\n  for (  TopicPartition topicPartition : topicPartitions) {\n    final Partition partition=this.replicaManager.createPartition(topicPartition);\n    partition.createLogIfNotExists(true,false,checkpoints,Option.apply(Uuid.randomUuid()));\n  }\n  replicaManager.checkpointHighWatermarks();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 373,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 106,
        "startColumnNumber" : 12,
        "endLineNumber" : 106,
        "endColumnNumber" : 121
      },
      "nodeContext" : "JavaConverters.seqAsJavaList(brokerProperties.logDirs()).stream().map(File::new).collect(Collectors.toList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "JavaConverters",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 107,
      "startColumnNumber" : 53,
      "endLineNumber" : 107,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 107,
        "startColumnNumber" : 53,
        "endLineNumber" : 107,
        "endColumnNumber" : 88
      },
      "nodeContext" : "JavaConverters.asScalaBuffer(files)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 329,
        "startLineNumber" : 107,
        "startColumnNumber" : 26,
        "endLineNumber" : 110,
        "endColumnNumber" : 100
      },
      "nodeContext" : "TestUtils.createLogManager(JavaConverters.asScalaBuffer(files),LogConfig.apply(),new MockConfigRepository(),CleanerConfig.apply(1,4 * 1024 * 1024L,0.9d,1024 * 1024,32 * 1024 * 1024,Double.MAX_VALUE,15 * 1000,true,\"MD5\"),time,ApiVersion.latestVersion())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 41,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 347,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 100
      },
      "nodeContext" : "this.logManager=TestUtils.createLogManager(JavaConverters.asScalaBuffer(files),LogConfig.apply(),new MockConfigRepository(),CleanerConfig.apply(1,4 * 1024 * 1024L,0.9d,1024 * 1024,32 * 1024 * 1024,Double.MAX_VALUE,15 * 1000,true,\"MD5\"),time,ApiVersion.latestVersion())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 45,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 348,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 101
      },
      "nodeContext" : "this.logManager=TestUtils.createLogManager(JavaConverters.asScalaBuffer(files),LogConfig.apply(),new MockConfigRepository(),CleanerConfig.apply(1,4 * 1024 * 1024L,0.9d,1024 * 1024,32 * 1024 * 1024,Double.MAX_VALUE,15 * 1000,true,\"MD5\"),time,ApiVersion.latestVersion());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 46,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2870,
        "startLineNumber" : 96,
        "startColumnNumber" : 24,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.scheduler=new KafkaScheduler(1,\"scheduler-thread\",true);\n  this.brokerProperties=KafkaConfig.fromProps(TestUtils.createBrokerConfig(0,TestUtils.MockZkConnect(),true,true,9092,Option.empty(),Option.empty(),Option.empty(),true,false,0,false,0,false,0,Option.empty(),1,true,1,(short)1));\n  this.metrics=new Metrics();\n  this.time=new MockTime();\n  this.failureChannel=new LogDirFailureChannel(brokerProperties.logDirs().size());\n  final List<File> files=JavaConverters.seqAsJavaList(brokerProperties.logDirs()).stream().map(File::new).collect(Collectors.toList());\n  this.logManager=TestUtils.createLogManager(JavaConverters.asScalaBuffer(files),LogConfig.apply(),new MockConfigRepository(),CleanerConfig.apply(1,4 * 1024 * 1024L,0.9d,1024 * 1024,32 * 1024 * 1024,Double.MAX_VALUE,15 * 1000,true,\"MD5\"),time,ApiVersion.latestVersion());\n  scheduler.startup();\n  final BrokerTopicStats brokerTopicStats=new BrokerTopicStats();\n  final MetadataCache metadataCache=MetadataCache.zkMetadataCache(this.brokerProperties.brokerId());\n  this.quotaManagers=QuotaFactory.instantiate(this.brokerProperties,this.metrics,this.time,\"\");\n  this.alterIsrManager=TestUtils.createAlterIsrManager();\n  this.replicaManager=new ReplicaManagerBuilder().setConfig(brokerProperties).setMetrics(metrics).setTime(time).setScheduler(scheduler).setLogManager(logManager).setQuotaManagers(quotaManagers).setBrokerTopicStats(brokerTopicStats).setMetadataCache(metadataCache).setLogDirFailureChannel(failureChannel).setAlterIsrManager(alterIsrManager).build();\n  replicaManager.startup();\n  List<TopicPartition> topicPartitions=new ArrayList<>();\n  for (int topicNum=0; topicNum < numTopics; topicNum++) {\n    final String topicName=this.topicName + \"-\" + topicNum;\n    for (int partitionNum=0; partitionNum < numPartitions; partitionNum++) {\n      topicPartitions.add(new TopicPartition(topicName,partitionNum));\n    }\n  }\n  OffsetCheckpoints checkpoints=(logDir,topicPartition) -> Option.apply(0L);\n  for (  TopicPartition topicPartition : topicPartitions) {\n    final Partition partition=this.replicaManager.createPartition(topicPartition);\n    partition.createLogIfNotExists(true,false,checkpoints,Option.apply(Uuid.randomUuid()));\n  }\n  replicaManager.checkpointHighWatermarks();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2951,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"deprecation\") @Setup(Level.Trial) public void setup(){\n  this.scheduler=new KafkaScheduler(1,\"scheduler-thread\",true);\n  this.brokerProperties=KafkaConfig.fromProps(TestUtils.createBrokerConfig(0,TestUtils.MockZkConnect(),true,true,9092,Option.empty(),Option.empty(),Option.empty(),true,false,0,false,0,false,0,Option.empty(),1,true,1,(short)1));\n  this.metrics=new Metrics();\n  this.time=new MockTime();\n  this.failureChannel=new LogDirFailureChannel(brokerProperties.logDirs().size());\n  final List<File> files=JavaConverters.seqAsJavaList(brokerProperties.logDirs()).stream().map(File::new).collect(Collectors.toList());\n  this.logManager=TestUtils.createLogManager(JavaConverters.asScalaBuffer(files),LogConfig.apply(),new MockConfigRepository(),CleanerConfig.apply(1,4 * 1024 * 1024L,0.9d,1024 * 1024,32 * 1024 * 1024,Double.MAX_VALUE,15 * 1000,true,\"MD5\"),time,ApiVersion.latestVersion());\n  scheduler.startup();\n  final BrokerTopicStats brokerTopicStats=new BrokerTopicStats();\n  final MetadataCache metadataCache=MetadataCache.zkMetadataCache(this.brokerProperties.brokerId());\n  this.quotaManagers=QuotaFactory.instantiate(this.brokerProperties,this.metrics,this.time,\"\");\n  this.alterIsrManager=TestUtils.createAlterIsrManager();\n  this.replicaManager=new ReplicaManagerBuilder().setConfig(brokerProperties).setMetrics(metrics).setTime(time).setScheduler(scheduler).setLogManager(logManager).setQuotaManagers(quotaManagers).setBrokerTopicStats(brokerTopicStats).setMetadataCache(metadataCache).setLogDirFailureChannel(failureChannel).setAlterIsrManager(alterIsrManager).build();\n  replicaManager.startup();\n  List<TopicPartition> topicPartitions=new ArrayList<>();\n  for (int topicNum=0; topicNum < numTopics; topicNum++) {\n    final String topicName=this.topicName + \"-\" + topicNum;\n    for (int partitionNum=0; partitionNum < numPartitions; partitionNum++) {\n      topicPartitions.add(new TopicPartition(topicName,partitionNum));\n    }\n  }\n  OffsetCheckpoints checkpoints=(logDir,topicPartition) -> Option.apply(0L);\n  for (  TopicPartition topicPartition : topicPartitions) {\n    final Partition partition=this.replicaManager.createPartition(topicPartition);\n    partition.createLogIfNotExists(true,false,checkpoints,Option.apply(Uuid.randomUuid()));\n  }\n  replicaManager.checkpointHighWatermarks();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 373,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 107,
        "startColumnNumber" : 53,
        "endLineNumber" : 107,
        "endColumnNumber" : 88
      },
      "nodeContext" : "JavaConverters.asScalaBuffer(files)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 106,
    "startColumnNumber" : 12,
    "endLineNumber" : 106,
    "endColumnNumber" : 26
  }, {
    "charLength" : 14,
    "startLineNumber" : 107,
    "startColumnNumber" : 53,
    "endLineNumber" : 107,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}