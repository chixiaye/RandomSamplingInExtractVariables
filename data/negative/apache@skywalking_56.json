{
  "id" : 56,
  "expression" : "new ThreadPoolExecutor.CallerRunsPolicy()",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new ThreadPoolExecutor.CallerRunsPolicy()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 135,
      "startColumnNumber" : 42,
      "endLineNumber" : 135,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 5,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 383,
        "startLineNumber" : 131,
        "startColumnNumber" : 19,
        "endLineNumber" : 136,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 394,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 136,
        "endColumnNumber" : 9
      },
      "nodeContext" : "executor=new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 395,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 136,
        "endColumnNumber" : 10
      },
      "nodeContext" : "executor=new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3545,
        "startLineNumber" : 70,
        "startColumnNumber" : 94,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.config=config;\n  Properties properties=new Properties();\n  properties.putAll(config.getKafkaConsumerConfig());\n  properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId());\n  properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers());\n  AdminClient adminClient=AdminClient.create(properties);\n  Set<String> missedTopics=adminClient.describeTopics(Lists.newArrayList(config.getTopicNameOfManagements(),config.getTopicNameOfMetrics(),config.getTopicNameOfProfiling(),config.getTopicNameOfTracingSegments(),config.getTopicNameOfMeters())).values().entrySet().stream().map(entry -> {\n    try {\n      entry.getValue().get();\n      return null;\n    }\n catch (    InterruptedException|ExecutionException e) {\n    }\n    return entry.getKey();\n  }\n).filter(Objects::nonNull).collect(Collectors.toSet());\n  if (!missedTopics.isEmpty()) {\n    log.info(\"Topics\" + missedTopics.toString() + \" not exist.\");\n    List<NewTopic> newTopicList=missedTopics.stream().map(topic -> new NewTopic(topic,config.getPartitions(),(short)config.getReplicationFactor())).collect(Collectors.toList());\n    try {\n      adminClient.createTopics(newTopicList).all().get();\n    }\n catch (    Exception e) {\n      throw new ModuleStartException(\"Failed to create Kafka Topics\" + missedTopics + \".\",e);\n    }\n  }\n  if (config.isSharding() && StringUtil.isNotEmpty(config.getConsumePartitions())) {\n    isSharding=true;\n  }\n else {\n    isSharding=false;\n  }\n  if (config.getKafkaHandlerThreadPoolSize() > 0) {\n    threadPoolSize=config.getKafkaHandlerThreadPoolSize();\n  }\n  if (config.getKafkaHandlerThreadPoolQueueSize() > 0) {\n    threadPoolQueueSize=config.getKafkaHandlerThreadPoolQueueSize();\n  }\n  enableKafkaMessageAutoCommit=(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);\n  consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer());\n  executor=new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3635,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public KafkaFetcherHandlerRegister(KafkaFetcherConfig config) throws ModuleStartException {\n  this.config=config;\n  Properties properties=new Properties();\n  properties.putAll(config.getKafkaConsumerConfig());\n  properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId());\n  properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers());\n  AdminClient adminClient=AdminClient.create(properties);\n  Set<String> missedTopics=adminClient.describeTopics(Lists.newArrayList(config.getTopicNameOfManagements(),config.getTopicNameOfMetrics(),config.getTopicNameOfProfiling(),config.getTopicNameOfTracingSegments(),config.getTopicNameOfMeters())).values().entrySet().stream().map(entry -> {\n    try {\n      entry.getValue().get();\n      return null;\n    }\n catch (    InterruptedException|ExecutionException e) {\n    }\n    return entry.getKey();\n  }\n).filter(Objects::nonNull).collect(Collectors.toSet());\n  if (!missedTopics.isEmpty()) {\n    log.info(\"Topics\" + missedTopics.toString() + \" not exist.\");\n    List<NewTopic> newTopicList=missedTopics.stream().map(topic -> new NewTopic(topic,config.getPartitions(),(short)config.getReplicationFactor())).collect(Collectors.toList());\n    try {\n      adminClient.createTopics(newTopicList).all().get();\n    }\n catch (    Exception e) {\n      throw new ModuleStartException(\"Failed to create Kafka Topics\" + missedTopics + \".\",e);\n    }\n  }\n  if (config.isSharding() && StringUtil.isNotEmpty(config.getConsumePartitions())) {\n    isSharding=true;\n  }\n else {\n    isSharding=false;\n  }\n  if (config.getKafkaHandlerThreadPoolSize() > 0) {\n    threadPoolSize=config.getKafkaHandlerThreadPoolSize();\n  }\n  if (config.getKafkaHandlerThreadPoolQueueSize() > 0) {\n    threadPoolQueueSize=config.getKafkaHandlerThreadPoolQueueSize();\n  }\n  enableKafkaMessageAutoCommit=(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);\n  consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer());\n  executor=new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 307,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 383,
        "startLineNumber" : 131,
        "startColumnNumber" : 19,
        "endLineNumber" : 136,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 22,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy"
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 135,
    "startColumnNumber" : 42,
    "endLineNumber" : 135,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ ]
}