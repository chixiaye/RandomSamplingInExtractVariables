{
  "id" : 433,
  "expression" : "Collections",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsAssignmentScaleTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Collections",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 157,
      "startColumnNumber" : 12,
      "endLineNumber" : 157,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 157,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Collections.singletonList(Node.noNode())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 155,
        "startColumnNumber" : 40,
        "endLineNumber" : 161,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new Cluster(\"cluster\",Collections.singletonList(Node.noNode()),partitionInfos,emptySet(),emptySet())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 155,
        "startColumnNumber" : 22,
        "endLineNumber" : 161,
        "endColumnNumber" : 9
      },
      "nodeContext" : "clusterMetadata=new Cluster(\"cluster\",Collections.singletonList(Node.noNode()),partitionInfos,emptySet(),emptySet())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 155,
        "startColumnNumber" : 8,
        "endLineNumber" : 161,
        "endColumnNumber" : 10
      },
      "nodeContext" : "final Cluster clusterMetadata=new Cluster(\"cluster\",Collections.singletonList(Node.noNode()),partitionInfos,emptySet(),emptySet());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5836,
        "startLineNumber" : 142,
        "startColumnNumber" : 91,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<String> topic=singletonList(\"topic\");\n  final Map<TopicPartition,Long> changelogEndOffsets=new HashMap<>();\n  for (int p=0; p < numPartitions; ++p) {\n    changelogEndOffsets.put(new TopicPartition(APPLICATION_ID + \"-store-changelog\",p),100_000L);\n  }\n  final List<PartitionInfo> partitionInfos=new ArrayList<>();\n  for (int p=0; p < numPartitions; ++p) {\n    partitionInfos.add(new PartitionInfo(\"topic\",p,Node.noNode(),new Node[0],new Node[0]));\n  }\n  final Cluster clusterMetadata=new Cluster(\"cluster\",Collections.singletonList(Node.noNode()),partitionInfos,emptySet(),emptySet());\n  final Map<String,Object> configMap=new HashMap<>();\n  configMap.put(StreamsConfig.APPLICATION_ID_CONFIG,APPLICATION_ID);\n  configMap.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,\"localhost:8080\");\n  final InternalTopologyBuilder builder=new InternalTopologyBuilder();\n  builder.addSource(null,\"source\",null,null,null,\"topic\");\n  builder.addProcessor(\"processor\",new MockApiProcessorSupplier<>(),\"source\");\n  builder.addStateStore(new MockKeyValueStoreBuilder(\"store\",false),\"processor\");\n  final TopologyMetadata topologyMetadata=new TopologyMetadata(builder,new StreamsConfig(configMap));\n  topologyMetadata.buildAndRewriteTopology();\n  final Consumer<byte[],byte[]> mainConsumer=EasyMock.createNiceMock(Consumer.class);\n  final TaskManager taskManager=EasyMock.createNiceMock(TaskManager.class);\n  expect(taskManager.topologyMetadata()).andStubReturn(topologyMetadata);\n  expect(mainConsumer.committed(new HashSet<>())).andStubReturn(Collections.emptyMap());\n  final AdminClient adminClient=createMockAdminClientForAssignor(changelogEndOffsets);\n  final ReferenceContainer referenceContainer=new ReferenceContainer();\n  referenceContainer.mainConsumer=mainConsumer;\n  referenceContainer.adminClient=adminClient;\n  referenceContainer.taskManager=taskManager;\n  referenceContainer.streamsMetadataState=EasyMock.createNiceMock(StreamsMetadataState.class);\n  referenceContainer.time=new MockTime();\n  configMap.put(InternalConfig.REFERENCE_CONTAINER_PARTITION_ASSIGNOR,referenceContainer);\n  configMap.put(InternalConfig.INTERNAL_TASK_ASSIGNOR_CLASS,taskAssignor.getName());\n  configMap.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG,numStandbys);\n  final MockInternalTopicManager mockInternalTopicManager=new MockInternalTopicManager(new MockTime(),new StreamsConfig(configMap),new MockClientSupplier().restoreConsumer,false);\n  EasyMock.replay(taskManager,adminClient,mainConsumer);\n  final StreamsPartitionAssignor partitionAssignor=new StreamsPartitionAssignor();\n  partitionAssignor.configure(configMap);\n  partitionAssignor.setInternalTopicManager(mockInternalTopicManager);\n  final Map<String,Subscription> subscriptions=new HashMap<>();\n  for (int client=0; client < numClients; ++client) {\n    for (int i=0; i < numThreadsPerClient; ++i) {\n      subscriptions.put(getConsumerName(i,client),new Subscription(topic,getInfo(uuidForInt(client),EMPTY_TASKS,EMPTY_TASKS).encode()));\n    }\n  }\n  final long firstAssignmentStartMs=System.currentTimeMillis();\n  final Map<String,Assignment> firstAssignments=partitionAssignor.assign(clusterMetadata,new GroupSubscription(subscriptions)).groupAssignment();\n  final long firstAssignmentEndMs=System.currentTimeMillis();\n  final long firstAssignmentDuration=firstAssignmentEndMs - firstAssignmentStartMs;\n  if (firstAssignmentDuration > MAX_ASSIGNMENT_DURATION) {\n    throw new AssertionError(\"The first assignment took too long to complete at \" + firstAssignmentDuration + \"ms.\");\n  }\n else {\n    log.info(\"First assignment took {}ms.\",firstAssignmentDuration);\n  }\n  for (int client=0; client < numClients; ++client) {\n    for (int i=0; i < numThreadsPerClient; ++i) {\n      final String consumer=getConsumerName(i,client);\n      final Assignment assignment=firstAssignments.get(consumer);\n      final AssignmentInfo info=AssignmentInfo.decode(assignment.userData());\n      subscriptions.put(consumer,new Subscription(topic,getInfo(uuidForInt(client),new HashSet<>(info.activeTasks()),info.standbyTasks().keySet()).encode(),assignment.partitions()));\n    }\n  }\n  final long secondAssignmentStartMs=System.currentTimeMillis();\n  final Map<String,Assignment> secondAssignments=partitionAssignor.assign(clusterMetadata,new GroupSubscription(subscriptions)).groupAssignment();\n  final long secondAssignmentEndMs=System.currentTimeMillis();\n  final long secondAssignmentDuration=secondAssignmentEndMs - secondAssignmentStartMs;\n  if (secondAssignmentDuration > MAX_ASSIGNMENT_DURATION) {\n    throw new AssertionError(\"The second assignment took too long to complete at \" + secondAssignmentDuration + \"ms.\");\n  }\n else {\n    log.info(\"Second assignment took {}ms.\",secondAssignmentDuration);\n  }\n  assertThat(secondAssignments.size(),is(numClients * numThreadsPerClient));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 682,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6188,
        "startLineNumber" : 138,
        "startColumnNumber" : 4,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void completeLargeAssignment(final int numPartitions,final int numClients,final int numThreadsPerClient,final int numStandbys,final Class<? extends TaskAssignor> taskAssignor){\n  final List<String> topic=singletonList(\"topic\");\n  final Map<TopicPartition,Long> changelogEndOffsets=new HashMap<>();\n  for (int p=0; p < numPartitions; ++p) {\n    changelogEndOffsets.put(new TopicPartition(APPLICATION_ID + \"-store-changelog\",p),100_000L);\n  }\n  final List<PartitionInfo> partitionInfos=new ArrayList<>();\n  for (int p=0; p < numPartitions; ++p) {\n    partitionInfos.add(new PartitionInfo(\"topic\",p,Node.noNode(),new Node[0],new Node[0]));\n  }\n  final Cluster clusterMetadata=new Cluster(\"cluster\",Collections.singletonList(Node.noNode()),partitionInfos,emptySet(),emptySet());\n  final Map<String,Object> configMap=new HashMap<>();\n  configMap.put(StreamsConfig.APPLICATION_ID_CONFIG,APPLICATION_ID);\n  configMap.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,\"localhost:8080\");\n  final InternalTopologyBuilder builder=new InternalTopologyBuilder();\n  builder.addSource(null,\"source\",null,null,null,\"topic\");\n  builder.addProcessor(\"processor\",new MockApiProcessorSupplier<>(),\"source\");\n  builder.addStateStore(new MockKeyValueStoreBuilder(\"store\",false),\"processor\");\n  final TopologyMetadata topologyMetadata=new TopologyMetadata(builder,new StreamsConfig(configMap));\n  topologyMetadata.buildAndRewriteTopology();\n  final Consumer<byte[],byte[]> mainConsumer=EasyMock.createNiceMock(Consumer.class);\n  final TaskManager taskManager=EasyMock.createNiceMock(TaskManager.class);\n  expect(taskManager.topologyMetadata()).andStubReturn(topologyMetadata);\n  expect(mainConsumer.committed(new HashSet<>())).andStubReturn(Collections.emptyMap());\n  final AdminClient adminClient=createMockAdminClientForAssignor(changelogEndOffsets);\n  final ReferenceContainer referenceContainer=new ReferenceContainer();\n  referenceContainer.mainConsumer=mainConsumer;\n  referenceContainer.adminClient=adminClient;\n  referenceContainer.taskManager=taskManager;\n  referenceContainer.streamsMetadataState=EasyMock.createNiceMock(StreamsMetadataState.class);\n  referenceContainer.time=new MockTime();\n  configMap.put(InternalConfig.REFERENCE_CONTAINER_PARTITION_ASSIGNOR,referenceContainer);\n  configMap.put(InternalConfig.INTERNAL_TASK_ASSIGNOR_CLASS,taskAssignor.getName());\n  configMap.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG,numStandbys);\n  final MockInternalTopicManager mockInternalTopicManager=new MockInternalTopicManager(new MockTime(),new StreamsConfig(configMap),new MockClientSupplier().restoreConsumer,false);\n  EasyMock.replay(taskManager,adminClient,mainConsumer);\n  final StreamsPartitionAssignor partitionAssignor=new StreamsPartitionAssignor();\n  partitionAssignor.configure(configMap);\n  partitionAssignor.setInternalTopicManager(mockInternalTopicManager);\n  final Map<String,Subscription> subscriptions=new HashMap<>();\n  for (int client=0; client < numClients; ++client) {\n    for (int i=0; i < numThreadsPerClient; ++i) {\n      subscriptions.put(getConsumerName(i,client),new Subscription(topic,getInfo(uuidForInt(client),EMPTY_TASKS,EMPTY_TASKS).encode()));\n    }\n  }\n  final long firstAssignmentStartMs=System.currentTimeMillis();\n  final Map<String,Assignment> firstAssignments=partitionAssignor.assign(clusterMetadata,new GroupSubscription(subscriptions)).groupAssignment();\n  final long firstAssignmentEndMs=System.currentTimeMillis();\n  final long firstAssignmentDuration=firstAssignmentEndMs - firstAssignmentStartMs;\n  if (firstAssignmentDuration > MAX_ASSIGNMENT_DURATION) {\n    throw new AssertionError(\"The first assignment took too long to complete at \" + firstAssignmentDuration + \"ms.\");\n  }\n else {\n    log.info(\"First assignment took {}ms.\",firstAssignmentDuration);\n  }\n  for (int client=0; client < numClients; ++client) {\n    for (int i=0; i < numThreadsPerClient; ++i) {\n      final String consumer=getConsumerName(i,client);\n      final Assignment assignment=firstAssignments.get(consumer);\n      final AssignmentInfo info=AssignmentInfo.decode(assignment.userData());\n      subscriptions.put(consumer,new Subscription(topic,getInfo(uuidForInt(client),new HashSet<>(info.activeTasks()),info.standbyTasks().keySet()).encode(),assignment.partitions()));\n    }\n  }\n  final long secondAssignmentStartMs=System.currentTimeMillis();\n  final Map<String,Assignment> secondAssignments=partitionAssignor.assign(clusterMetadata,new GroupSubscription(subscriptions)).groupAssignment();\n  final long secondAssignmentEndMs=System.currentTimeMillis();\n  final long secondAssignmentDuration=secondAssignmentEndMs - secondAssignmentStartMs;\n  if (secondAssignmentDuration > MAX_ASSIGNMENT_DURATION) {\n    throw new AssertionError(\"The second assignment took too long to complete at \" + secondAssignmentDuration + \"ms.\");\n  }\n else {\n    log.info(\"Second assignment took {}ms.\",secondAssignmentDuration);\n  }\n  assertThat(secondAssignments.size(),is(numClients * numThreadsPerClient));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 711,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 157,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Collections.singletonList(Node.noNode())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Collections"
  }, {
    "nodeContext" : "Collections",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 175,
      "startColumnNumber" : 70,
      "endLineNumber" : 175,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 175,
        "startColumnNumber" : 70,
        "endLineNumber" : 175,
        "endColumnNumber" : 92
      },
      "nodeContext" : "Collections.emptyMap()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 175,
        "endColumnNumber" : 93
      },
      "nodeContext" : "expect(mainConsumer.committed(new HashSet<>())).andStubReturn(Collections.emptyMap())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 175,
        "endColumnNumber" : 94
      },
      "nodeContext" : "expect(mainConsumer.committed(new HashSet<>())).andStubReturn(Collections.emptyMap());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5836,
        "startLineNumber" : 142,
        "startColumnNumber" : 91,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<String> topic=singletonList(\"topic\");\n  final Map<TopicPartition,Long> changelogEndOffsets=new HashMap<>();\n  for (int p=0; p < numPartitions; ++p) {\n    changelogEndOffsets.put(new TopicPartition(APPLICATION_ID + \"-store-changelog\",p),100_000L);\n  }\n  final List<PartitionInfo> partitionInfos=new ArrayList<>();\n  for (int p=0; p < numPartitions; ++p) {\n    partitionInfos.add(new PartitionInfo(\"topic\",p,Node.noNode(),new Node[0],new Node[0]));\n  }\n  final Cluster clusterMetadata=new Cluster(\"cluster\",Collections.singletonList(Node.noNode()),partitionInfos,emptySet(),emptySet());\n  final Map<String,Object> configMap=new HashMap<>();\n  configMap.put(StreamsConfig.APPLICATION_ID_CONFIG,APPLICATION_ID);\n  configMap.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,\"localhost:8080\");\n  final InternalTopologyBuilder builder=new InternalTopologyBuilder();\n  builder.addSource(null,\"source\",null,null,null,\"topic\");\n  builder.addProcessor(\"processor\",new MockApiProcessorSupplier<>(),\"source\");\n  builder.addStateStore(new MockKeyValueStoreBuilder(\"store\",false),\"processor\");\n  final TopologyMetadata topologyMetadata=new TopologyMetadata(builder,new StreamsConfig(configMap));\n  topologyMetadata.buildAndRewriteTopology();\n  final Consumer<byte[],byte[]> mainConsumer=EasyMock.createNiceMock(Consumer.class);\n  final TaskManager taskManager=EasyMock.createNiceMock(TaskManager.class);\n  expect(taskManager.topologyMetadata()).andStubReturn(topologyMetadata);\n  expect(mainConsumer.committed(new HashSet<>())).andStubReturn(Collections.emptyMap());\n  final AdminClient adminClient=createMockAdminClientForAssignor(changelogEndOffsets);\n  final ReferenceContainer referenceContainer=new ReferenceContainer();\n  referenceContainer.mainConsumer=mainConsumer;\n  referenceContainer.adminClient=adminClient;\n  referenceContainer.taskManager=taskManager;\n  referenceContainer.streamsMetadataState=EasyMock.createNiceMock(StreamsMetadataState.class);\n  referenceContainer.time=new MockTime();\n  configMap.put(InternalConfig.REFERENCE_CONTAINER_PARTITION_ASSIGNOR,referenceContainer);\n  configMap.put(InternalConfig.INTERNAL_TASK_ASSIGNOR_CLASS,taskAssignor.getName());\n  configMap.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG,numStandbys);\n  final MockInternalTopicManager mockInternalTopicManager=new MockInternalTopicManager(new MockTime(),new StreamsConfig(configMap),new MockClientSupplier().restoreConsumer,false);\n  EasyMock.replay(taskManager,adminClient,mainConsumer);\n  final StreamsPartitionAssignor partitionAssignor=new StreamsPartitionAssignor();\n  partitionAssignor.configure(configMap);\n  partitionAssignor.setInternalTopicManager(mockInternalTopicManager);\n  final Map<String,Subscription> subscriptions=new HashMap<>();\n  for (int client=0; client < numClients; ++client) {\n    for (int i=0; i < numThreadsPerClient; ++i) {\n      subscriptions.put(getConsumerName(i,client),new Subscription(topic,getInfo(uuidForInt(client),EMPTY_TASKS,EMPTY_TASKS).encode()));\n    }\n  }\n  final long firstAssignmentStartMs=System.currentTimeMillis();\n  final Map<String,Assignment> firstAssignments=partitionAssignor.assign(clusterMetadata,new GroupSubscription(subscriptions)).groupAssignment();\n  final long firstAssignmentEndMs=System.currentTimeMillis();\n  final long firstAssignmentDuration=firstAssignmentEndMs - firstAssignmentStartMs;\n  if (firstAssignmentDuration > MAX_ASSIGNMENT_DURATION) {\n    throw new AssertionError(\"The first assignment took too long to complete at \" + firstAssignmentDuration + \"ms.\");\n  }\n else {\n    log.info(\"First assignment took {}ms.\",firstAssignmentDuration);\n  }\n  for (int client=0; client < numClients; ++client) {\n    for (int i=0; i < numThreadsPerClient; ++i) {\n      final String consumer=getConsumerName(i,client);\n      final Assignment assignment=firstAssignments.get(consumer);\n      final AssignmentInfo info=AssignmentInfo.decode(assignment.userData());\n      subscriptions.put(consumer,new Subscription(topic,getInfo(uuidForInt(client),new HashSet<>(info.activeTasks()),info.standbyTasks().keySet()).encode(),assignment.partitions()));\n    }\n  }\n  final long secondAssignmentStartMs=System.currentTimeMillis();\n  final Map<String,Assignment> secondAssignments=partitionAssignor.assign(clusterMetadata,new GroupSubscription(subscriptions)).groupAssignment();\n  final long secondAssignmentEndMs=System.currentTimeMillis();\n  final long secondAssignmentDuration=secondAssignmentEndMs - secondAssignmentStartMs;\n  if (secondAssignmentDuration > MAX_ASSIGNMENT_DURATION) {\n    throw new AssertionError(\"The second assignment took too long to complete at \" + secondAssignmentDuration + \"ms.\");\n  }\n else {\n    log.info(\"Second assignment took {}ms.\",secondAssignmentDuration);\n  }\n  assertThat(secondAssignments.size(),is(numClients * numThreadsPerClient));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 682,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6188,
        "startLineNumber" : 138,
        "startColumnNumber" : 4,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void completeLargeAssignment(final int numPartitions,final int numClients,final int numThreadsPerClient,final int numStandbys,final Class<? extends TaskAssignor> taskAssignor){\n  final List<String> topic=singletonList(\"topic\");\n  final Map<TopicPartition,Long> changelogEndOffsets=new HashMap<>();\n  for (int p=0; p < numPartitions; ++p) {\n    changelogEndOffsets.put(new TopicPartition(APPLICATION_ID + \"-store-changelog\",p),100_000L);\n  }\n  final List<PartitionInfo> partitionInfos=new ArrayList<>();\n  for (int p=0; p < numPartitions; ++p) {\n    partitionInfos.add(new PartitionInfo(\"topic\",p,Node.noNode(),new Node[0],new Node[0]));\n  }\n  final Cluster clusterMetadata=new Cluster(\"cluster\",Collections.singletonList(Node.noNode()),partitionInfos,emptySet(),emptySet());\n  final Map<String,Object> configMap=new HashMap<>();\n  configMap.put(StreamsConfig.APPLICATION_ID_CONFIG,APPLICATION_ID);\n  configMap.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,\"localhost:8080\");\n  final InternalTopologyBuilder builder=new InternalTopologyBuilder();\n  builder.addSource(null,\"source\",null,null,null,\"topic\");\n  builder.addProcessor(\"processor\",new MockApiProcessorSupplier<>(),\"source\");\n  builder.addStateStore(new MockKeyValueStoreBuilder(\"store\",false),\"processor\");\n  final TopologyMetadata topologyMetadata=new TopologyMetadata(builder,new StreamsConfig(configMap));\n  topologyMetadata.buildAndRewriteTopology();\n  final Consumer<byte[],byte[]> mainConsumer=EasyMock.createNiceMock(Consumer.class);\n  final TaskManager taskManager=EasyMock.createNiceMock(TaskManager.class);\n  expect(taskManager.topologyMetadata()).andStubReturn(topologyMetadata);\n  expect(mainConsumer.committed(new HashSet<>())).andStubReturn(Collections.emptyMap());\n  final AdminClient adminClient=createMockAdminClientForAssignor(changelogEndOffsets);\n  final ReferenceContainer referenceContainer=new ReferenceContainer();\n  referenceContainer.mainConsumer=mainConsumer;\n  referenceContainer.adminClient=adminClient;\n  referenceContainer.taskManager=taskManager;\n  referenceContainer.streamsMetadataState=EasyMock.createNiceMock(StreamsMetadataState.class);\n  referenceContainer.time=new MockTime();\n  configMap.put(InternalConfig.REFERENCE_CONTAINER_PARTITION_ASSIGNOR,referenceContainer);\n  configMap.put(InternalConfig.INTERNAL_TASK_ASSIGNOR_CLASS,taskAssignor.getName());\n  configMap.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG,numStandbys);\n  final MockInternalTopicManager mockInternalTopicManager=new MockInternalTopicManager(new MockTime(),new StreamsConfig(configMap),new MockClientSupplier().restoreConsumer,false);\n  EasyMock.replay(taskManager,adminClient,mainConsumer);\n  final StreamsPartitionAssignor partitionAssignor=new StreamsPartitionAssignor();\n  partitionAssignor.configure(configMap);\n  partitionAssignor.setInternalTopicManager(mockInternalTopicManager);\n  final Map<String,Subscription> subscriptions=new HashMap<>();\n  for (int client=0; client < numClients; ++client) {\n    for (int i=0; i < numThreadsPerClient; ++i) {\n      subscriptions.put(getConsumerName(i,client),new Subscription(topic,getInfo(uuidForInt(client),EMPTY_TASKS,EMPTY_TASKS).encode()));\n    }\n  }\n  final long firstAssignmentStartMs=System.currentTimeMillis();\n  final Map<String,Assignment> firstAssignments=partitionAssignor.assign(clusterMetadata,new GroupSubscription(subscriptions)).groupAssignment();\n  final long firstAssignmentEndMs=System.currentTimeMillis();\n  final long firstAssignmentDuration=firstAssignmentEndMs - firstAssignmentStartMs;\n  if (firstAssignmentDuration > MAX_ASSIGNMENT_DURATION) {\n    throw new AssertionError(\"The first assignment took too long to complete at \" + firstAssignmentDuration + \"ms.\");\n  }\n else {\n    log.info(\"First assignment took {}ms.\",firstAssignmentDuration);\n  }\n  for (int client=0; client < numClients; ++client) {\n    for (int i=0; i < numThreadsPerClient; ++i) {\n      final String consumer=getConsumerName(i,client);\n      final Assignment assignment=firstAssignments.get(consumer);\n      final AssignmentInfo info=AssignmentInfo.decode(assignment.userData());\n      subscriptions.put(consumer,new Subscription(topic,getInfo(uuidForInt(client),new HashSet<>(info.activeTasks()),info.standbyTasks().keySet()).encode(),assignment.partitions()));\n    }\n  }\n  final long secondAssignmentStartMs=System.currentTimeMillis();\n  final Map<String,Assignment> secondAssignments=partitionAssignor.assign(clusterMetadata,new GroupSubscription(subscriptions)).groupAssignment();\n  final long secondAssignmentEndMs=System.currentTimeMillis();\n  final long secondAssignmentDuration=secondAssignmentEndMs - secondAssignmentStartMs;\n  if (secondAssignmentDuration > MAX_ASSIGNMENT_DURATION) {\n    throw new AssertionError(\"The second assignment took too long to complete at \" + secondAssignmentDuration + \"ms.\");\n  }\n else {\n    log.info(\"Second assignment took {}ms.\",secondAssignmentDuration);\n  }\n  assertThat(secondAssignments.size(),is(numClients * numThreadsPerClient));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 711,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 175,
        "endColumnNumber" : 94
      },
      "nodeContext" : "expect(mainConsumer.committed(new HashSet<>())).andStubReturn(Collections.emptyMap());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.util.Collections"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 157,
    "startColumnNumber" : 12,
    "endLineNumber" : 157,
    "endColumnNumber" : 23
  }, {
    "charLength" : 11,
    "startLineNumber" : 175,
    "startColumnNumber" : 70,
    "endLineNumber" : 175,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}