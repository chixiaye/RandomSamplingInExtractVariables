{
  "id" : 267,
  "expression" : "new URI(\"unix:///var/run/docker.sock\")",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/server/test/org/openqa/selenium/docker/BootstrapTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new URI(\"unix:///var/run/docker.sock\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 91,
      "startColumnNumber" : 111,
      "endLineNumber" : 91,
      "endColumnNumber" : 149
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 91,
        "startColumnNumber" : 74,
        "endLineNumber" : 91,
        "endColumnNumber" : 150
      },
      "nodeContext" : "ClientConfig.defaultConfig().baseUri(new URI(\"unix:///var/run/docker.sock\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 91,
        "startColumnNumber" : 24,
        "endLineNumber" : 91,
        "endColumnNumber" : 151
      },
      "nodeContext" : "HttpClient.Factory.create(\"reactor\").createClient(ClientConfig.defaultConfig().baseUri(new URI(\"unix:///var/run/docker.sock\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 91,
        "startColumnNumber" : 15,
        "endLineNumber" : 91,
        "endColumnNumber" : 151
      },
      "nodeContext" : "client=HttpClient.Factory.create(\"reactor\").createClient(ClientConfig.defaultConfig().baseUri(new URI(\"unix:///var/run/docker.sock\")))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 152
      },
      "nodeContext" : "HttpClient client=HttpClient.Factory.create(\"reactor\").createClient(ClientConfig.defaultConfig().baseUri(new URI(\"unix:///var/run/docker.sock\")));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 87,
        "startColumnNumber" : 85,
        "endLineNumber" : 94,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assumeThat(Paths.get(\"/var/run/docker.sock\")).exists();\n  HttpClient client=HttpClient.Factory.create(\"reactor\").createClient(ClientConfig.defaultConfig().baseUri(new URI(\"unix:///var/run/docker.sock\")));\n  HttpResponse res=client.execute(new HttpRequest(GET,\"/version\"));\n  assertThat(res.getStatus()).isEqualTo(HTTP_OK);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 606,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 94,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test @Ignore(\"Need to check that the docker daemon is running without using our http stack\") public void shouldBeAbleToConnectToRunningDockerServer() throws URISyntaxException {\n  assumeThat(Paths.get(\"/var/run/docker.sock\")).exists();\n  HttpClient client=HttpClient.Factory.create(\"reactor\").createClient(ClientConfig.defaultConfig().baseUri(new URI(\"unix:///var/run/docker.sock\")));\n  HttpResponse res=client.execute(new HttpRequest(GET,\"/version\"));\n  assertThat(res.getStatus()).isEqualTo(HTTP_OK);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 65,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 152
      },
      "nodeContext" : "HttpClient client=HttpClient.Factory.create(\"reactor\").createClient(ClientConfig.defaultConfig().baseUri(new URI(\"unix:///var/run/docker.sock\")));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    },
    "tokenLength" : 4,
    "type" : "java.net.URI"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 91,
    "startColumnNumber" : 111,
    "endLineNumber" : 91,
    "endColumnNumber" : 149
  } ],
  "layoutRelationDataList" : [ ]
}