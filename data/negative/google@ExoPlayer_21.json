{
  "id" : 21,
  "expression" : "file.getParentFile()",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/testutils/src/main/java/com/google/android/exoplayer2/testutil/DumpFileAsserts.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "file.getParentFile()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 170,
      "startColumnNumber" : 35,
      "endLineNumber" : 170,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 170,
        "startColumnNumber" : 6,
        "endLineNumber" : 170,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Assertions.checkStateNotNull(file.getParentFile())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 170,
        "startColumnNumber" : 6,
        "endLineNumber" : 170,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Assertions.checkStateNotNull(file.getParentFile()).mkdirs()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 170,
        "startColumnNumber" : 6,
        "endLineNumber" : 170,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Assertions.checkStateNotNull(file.getParentFile()).mkdirs();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 400,
        "startLineNumber" : 164,
        "startColumnNumber" : 11,
        "endLineNumber" : 174,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File file=DUMP_FILE_ACTION == WRITE_TO_LOCAL ? new File(StandardSystemProperty.USER_DIR.value(),assetDirectory) : context.getExternalFilesDir(null);\n  file=new File(file,dumpFile);\n  Assertions.checkStateNotNull(file.getParentFile()).mkdirs();\n  PrintWriter out=new PrintWriter(file);\n  out.print(actual);\n  out.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 867,
        "startLineNumber" : 153,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (DUMP_FILE_ACTION == COMPARE_WITH_EXISTING) {\n  String expected;\n  try {\n    expected=TestUtil.getString(context,dumpFile);\n  }\n catch (  FileNotFoundException e) {\n    throw new IOException(\"Dump file not found. \" + DUMP_UPDATE_INSTRUCTIONS,e);\n  }\n  assertWithMessage(\"Actual data doesn't match dump file: %s\\n%s\",dumpFile,DUMP_UPDATE_INSTRUCTIONS).that(actual).isEqualTo(expected);\n}\n else {\n  File file=DUMP_FILE_ACTION == WRITE_TO_LOCAL ? new File(StandardSystemProperty.USER_DIR.value(),assetDirectory) : context.getExternalFilesDir(null);\n  file=new File(file,dumpFile);\n  Assertions.checkStateNotNull(file.getParentFile()).mkdirs();\n  PrintWriter out=new PrintWriter(file);\n  out.print(actual);\n  out.close();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 877,
        "startLineNumber" : 152,
        "startColumnNumber" : 97,
        "endLineNumber" : 175,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (DUMP_FILE_ACTION == COMPARE_WITH_EXISTING) {\n    String expected;\n    try {\n      expected=TestUtil.getString(context,dumpFile);\n    }\n catch (    FileNotFoundException e) {\n      throw new IOException(\"Dump file not found. \" + DUMP_UPDATE_INSTRUCTIONS,e);\n    }\n    assertWithMessage(\"Actual data doesn't match dump file: %s\\n%s\",dumpFile,DUMP_UPDATE_INSTRUCTIONS).that(actual).isEqualTo(expected);\n  }\n else {\n    File file=DUMP_FILE_ACTION == WRITE_TO_LOCAL ? new File(StandardSystemProperty.USER_DIR.value(),assetDirectory) : context.getExternalFilesDir(null);\n    file=new File(file,dumpFile);\n    Assertions.checkStateNotNull(file.getParentFile()).mkdirs();\n    PrintWriter out=new PrintWriter(file);\n    out.print(actual);\n    out.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1934,
        "startLineNumber" : 135,
        "startColumnNumber" : 2,
        "endLineNumber" : 175,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Asserts that  {@code actual} is equal to the contents of {@code dumpFile} in {@code assetDirectory}. <p>If the assertion fails because of an intended change in the output or a new dump file needs to be created, set  {@link #DUMP_FILE_ACTION} to {@link #WRITE_TO_LOCAL} for local tests and to{@link #WRITE_TO_DEVICE} for instrumentation tests, and run the test again. Instead ofassertion,  {@code actual} will be written to {@code dumpFile}. For instrumentation tests, this new dump file needs to be copied to the project asset folder manually.\n * @param context A context.\n * @param actual The actual data.\n * @param assetDirectory The directory of the assets relative to the project working directory.Only used when  {@link #DUMP_FILE_ACTION} is set to {@link #WRITE_TO_LOCAL}.\n * @param dumpFile The file path of the dump file in the assets directory.\n */\npublic static void assertOutput(Context context,String actual,String assetDirectory,String dumpFile) throws IOException {\n  if (DUMP_FILE_ACTION == COMPARE_WITH_EXISTING) {\n    String expected;\n    try {\n      expected=TestUtil.getString(context,dumpFile);\n    }\n catch (    FileNotFoundException e) {\n      throw new IOException(\"Dump file not found. \" + DUMP_UPDATE_INSTRUCTIONS,e);\n    }\n    assertWithMessage(\"Actual data doesn't match dump file: %s\\n%s\",dumpFile,DUMP_UPDATE_INSTRUCTIONS).that(actual).isEqualTo(expected);\n  }\n else {\n    File file=DUMP_FILE_ACTION == WRITE_TO_LOCAL ? new File(StandardSystemProperty.USER_DIR.value(),assetDirectory) : context.getExternalFilesDir(null);\n    file=new File(file,dumpFile);\n    Assertions.checkStateNotNull(file.getParentFile()).mkdirs();\n    PrintWriter out=new PrintWriter(file);\n    out.print(actual);\n    out.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 129,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 170,
        "startColumnNumber" : 6,
        "endLineNumber" : 170,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Assertions.checkStateNotNull(file.getParentFile()).mkdirs();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.io.File"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 170,
    "startColumnNumber" : 35,
    "endLineNumber" : 170,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}