{
  "id" : 457,
  "expression" : "0.98",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-examples/src/main/java/com/netflix/hystrix/examples/demo/GetPaymentInformationCommand.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0.98",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 50,
      "startColumnNumber" : 28,
      "endLineNumber" : 50,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 50,
        "endColumnNumber" : 32
      },
      "nodeContext" : "Math.random() > 0.98",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 246,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Math.random() > 0.98) {\n  try {\n    Thread.sleep((int)(Math.random() * 100) + 25);\n  }\n catch (  InterruptedException e) {\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 36,
        "startColumnNumber" : 39,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    Thread.sleep((int)(Math.random() * 20) + 5);\n  }\n catch (  InterruptedException e) {\n  }\n  if (Math.random() > 0.9999) {\n    throw new RuntimeException(\"random failure loading payment information over network\");\n  }\n  if (Math.random() > 0.98) {\n    try {\n      Thread.sleep((int)(Math.random() * 100) + 25);\n    }\n catch (    InterruptedException e) {\n    }\n  }\n  return new PaymentInformation(user,\"4444888833337777\",12,15);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 956,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected PaymentInformation run(){\n  try {\n    Thread.sleep((int)(Math.random() * 20) + 5);\n  }\n catch (  InterruptedException e) {\n  }\n  if (Math.random() > 0.9999) {\n    throw new RuntimeException(\"random failure loading payment information over network\");\n  }\n  if (Math.random() > 0.98) {\n    try {\n      Thread.sleep((int)(Math.random() * 100) + 25);\n    }\n catch (    InterruptedException e) {\n    }\n  }\n  return new PaymentInformation(user,\"4444888833337777\",12,15);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 79,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 50,
        "endColumnNumber" : 32
      },
      "nodeContext" : "Math.random() > 0.98",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 50,
    "startColumnNumber" : 28,
    "endLineNumber" : 50,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}