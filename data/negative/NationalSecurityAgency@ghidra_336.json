{
  "id" : 336,
  "expression" : "\"unsupported instruction type: \" + type.name()",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/BytePatterns/src/main/java/ghidra/bitpatterns/info/InstructionSequence.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"unsupported instruction type: \" + type.name()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 46,
      "startLineNumber" : 261,
      "startColumnNumber" : 6,
      "endLineNumber" : 261,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 260,
        "startColumnNumber" : 11,
        "endLineNumber" : 261,
        "endColumnNumber" : 53
      },
      "nodeContext" : "new IllegalArgumentException(\"unsupported instruction type: \" + type.name())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 260,
        "startColumnNumber" : 5,
        "endLineNumber" : 261,
        "endColumnNumber" : 54
      },
      "nodeContext" : "throw new IllegalArgumentException(\"unsupported instruction type: \" + type.name());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1229,
        "startLineNumber" : 228,
        "startColumnNumber" : 3,
        "endLineNumber" : 262,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (type) {\ncase FIRST:  InstructionSequence currentSeq=fInfo.getFirstInst();\nif (currentSeq.getInstructions()[0] != null && (fInfo.getFirstBytes() != null)) {\n  instSeqs.add(currentSeq);\n}\nbreak;\ncase PRE:currentSeq=fInfo.getPreInst();\nif (currentSeq.getInstructions()[0] != null && (fInfo.getPreBytes() != null)) {\ninstSeqs.add(currentSeq);\n}\nbreak;\ncase RETURN:List<InstructionSequence> currentSeqs=fInfo.getReturnInst();\nList<String> currentBytes=fInfo.getReturnBytes();\nif (currentSeqs.size() != currentBytes.size()) {\ncontinue;\n}\nfor (int i=0, numSeqs=currentSeqs.size(); i < numSeqs; ++i) {\nif (currentSeqs.get(i).getInstructions()[0] != null && currentBytes.get(i).getBytes() != null) {\ninstSeqs.add(currentSeqs.get(i));\n}\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"unsupported instruction type: \" + type.name());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 155,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1340,
        "startLineNumber" : 224,
        "startColumnNumber" : 63,
        "endLineNumber" : 263,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (regFilter != null && !regFilter.allows(fInfo.getContextRegisters())) {\n    continue;\n  }\nswitch (type) {\ncase FIRST:    InstructionSequence currentSeq=fInfo.getFirstInst();\n  if (currentSeq.getInstructions()[0] != null && (fInfo.getFirstBytes() != null)) {\n    instSeqs.add(currentSeq);\n  }\nbreak;\ncase PRE:currentSeq=fInfo.getPreInst();\nif (currentSeq.getInstructions()[0] != null && (fInfo.getPreBytes() != null)) {\ninstSeqs.add(currentSeq);\n}\nbreak;\ncase RETURN:List<InstructionSequence> currentSeqs=fInfo.getReturnInst();\nList<String> currentBytes=fInfo.getReturnBytes();\nif (currentSeqs.size() != currentBytes.size()) {\ncontinue;\n}\nfor (int i=0, numSeqs=currentSeqs.size(); i < numSeqs; ++i) {\nif (currentSeqs.get(i).getInstructions()[0] != null && currentBytes.get(i).getBytes() != null) {\ninstSeqs.add(currentSeqs.get(i));\n}\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"unsupported instruction type: \" + type.name());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1401,
        "startLineNumber" : 224,
        "startColumnNumber" : 2,
        "endLineNumber" : 263,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (FunctionBitPatternInfo fInfo : fsReader.getFInfoList()) {\n  if (regFilter != null && !regFilter.allows(fInfo.getContextRegisters())) {\n    continue;\n  }\nswitch (type) {\ncase FIRST:    InstructionSequence currentSeq=fInfo.getFirstInst();\n  if (currentSeq.getInstructions()[0] != null && (fInfo.getFirstBytes() != null)) {\n    instSeqs.add(currentSeq);\n  }\nbreak;\ncase PRE:currentSeq=fInfo.getPreInst();\nif (currentSeq.getInstructions()[0] != null && (fInfo.getPreBytes() != null)) {\ninstSeqs.add(currentSeq);\n}\nbreak;\ncase RETURN:List<InstructionSequence> currentSeqs=fInfo.getReturnInst();\nList<String> currentBytes=fInfo.getReturnBytes();\nif (currentSeqs.size() != currentBytes.size()) {\ncontinue;\n}\nfor (int i=0, numSeqs=currentSeqs.size(); i < numSeqs; ++i) {\nif (currentSeqs.get(i).getInstructions()[0] != null && currentBytes.get(i).getBytes() != null) {\ninstSeqs.add(currentSeqs.get(i));\n}\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"unsupported instruction type: \" + type.name());\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1508,
        "startLineNumber" : 222,
        "startColumnNumber" : 54,
        "endLineNumber" : 265,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<InstructionSequence> instSeqs=new ArrayList<InstructionSequence>();\n  for (  FunctionBitPatternInfo fInfo : fsReader.getFInfoList()) {\n    if (regFilter != null && !regFilter.allows(fInfo.getContextRegisters())) {\n      continue;\n    }\nswitch (type) {\ncase FIRST:      InstructionSequence currentSeq=fInfo.getFirstInst();\n    if (currentSeq.getInstructions()[0] != null && (fInfo.getFirstBytes() != null)) {\n      instSeqs.add(currentSeq);\n    }\n  break;\ncase PRE:currentSeq=fInfo.getPreInst();\nif (currentSeq.getInstructions()[0] != null && (fInfo.getPreBytes() != null)) {\ninstSeqs.add(currentSeq);\n}\nbreak;\ncase RETURN:List<InstructionSequence> currentSeqs=fInfo.getReturnInst();\nList<String> currentBytes=fInfo.getReturnBytes();\nif (currentSeqs.size() != currentBytes.size()) {\ncontinue;\n}\nfor (int i=0, numSeqs=currentSeqs.size(); i < numSeqs; ++i) {\nif (currentSeqs.get(i).getInstructions()[0] != null && currentBytes.get(i).getBytes() != null) {\ninstSeqs.add(currentSeqs.get(i));\n}\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"unsupported instruction type: \" + type.name());\n}\n}\nreturn instSeqs;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1993,
        "startLineNumber" : 214,
        "startColumnNumber" : 1,
        "endLineNumber" : 265,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Get the list of all  {@link InstructionSequence}s of a given type which pass a given  {@link ContextRegisterFilter}\n * @param fsReader populated {@link FileBitPatternInfoReader} \n * @param type desired type of sequence\n * @param regFilter filter that returned {@link InstructionSequence}s must pass\n * @return sequences\n */\npublic static List<InstructionSequence> getInstSeqs(FileBitPatternInfoReader fsReader,PatternType type,ContextRegisterFilter regFilter){\n  List<InstructionSequence> instSeqs=new ArrayList<InstructionSequence>();\n  for (  FunctionBitPatternInfo fInfo : fsReader.getFInfoList()) {\n    if (regFilter != null && !regFilter.allows(fInfo.getContextRegisters())) {\n      continue;\n    }\nswitch (type) {\ncase FIRST:      InstructionSequence currentSeq=fInfo.getFirstInst();\n    if (currentSeq.getInstructions()[0] != null && (fInfo.getFirstBytes() != null)) {\n      instSeqs.add(currentSeq);\n    }\n  break;\ncase PRE:currentSeq=fInfo.getPreInst();\nif (currentSeq.getInstructions()[0] != null && (fInfo.getPreBytes() != null)) {\ninstSeqs.add(currentSeq);\n}\nbreak;\ncase RETURN:List<InstructionSequence> currentSeqs=fInfo.getReturnInst();\nList<String> currentBytes=fInfo.getReturnBytes();\nif (currentSeqs.size() != currentBytes.size()) {\ncontinue;\n}\nfor (int i=0, numSeqs=currentSeqs.size(); i < numSeqs; ++i) {\nif (currentSeqs.get(i).getInstructions()[0] != null && currentBytes.get(i).getBytes() != null) {\ninstSeqs.add(currentSeqs.get(i));\n}\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"unsupported instruction type: \" + type.name());\n}\n}\nreturn instSeqs;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 217,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 260,
        "startColumnNumber" : 11,
        "endLineNumber" : 261,
        "endColumnNumber" : 53
      },
      "nodeContext" : "new IllegalArgumentException(\"unsupported instruction type: \" + type.name())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 6,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 46,
    "startLineNumber" : 261,
    "startColumnNumber" : 6,
    "endLineNumber" : 261,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}