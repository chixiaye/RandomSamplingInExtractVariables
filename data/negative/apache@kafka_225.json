{
  "id" : 225,
  "expression" : "!value.isDirty() && dirtyKeys.contains(key)",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/main/java/org/apache/kafka/streams/state/internals/NamedCache.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!value.isDirty() && dirtyKeys.contains(key)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 43,
      "startLineNumber" : 158,
      "startColumnNumber" : 12,
      "endLineNumber" : 158,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 344,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!value.isDirty() && dirtyKeys.contains(key)) {\n  throw new IllegalStateException(String.format(\"Attempting to put a clean entry for key [%s] into NamedCache [%s] when it already contains a dirty entry for the same key\",key,name));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 977,
        "startLineNumber" : 157,
        "startColumnNumber" : 70,
        "endLineNumber" : 185,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!value.isDirty() && dirtyKeys.contains(key)) {\n    throw new IllegalStateException(String.format(\"Attempting to put a clean entry for key [%s] into NamedCache [%s] when it already contains a dirty entry for the same key\",key,name));\n  }\n  LRUNode node=cache.get(key);\n  if (node != null) {\n    numOverwrites++;\n    currentSizeBytes-=node.size();\n    node.update(value);\n    updateLRU(node);\n  }\n else {\n    node=new LRUNode(key,value);\n    putHead(node);\n    cache.put(key,node);\n  }\n  if (value.isDirty()) {\n    dirtyKeys.remove(key);\n    dirtyKeys.add(key);\n  }\n  currentSizeBytes+=node.size();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1043,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 185,
        "endColumnNumber" : 5
      },
      "nodeContext" : "synchronized void put(final Bytes key,final LRUCacheEntry value){\n  if (!value.isDirty() && dirtyKeys.contains(key)) {\n    throw new IllegalStateException(String.format(\"Attempting to put a clean entry for key [%s] into NamedCache [%s] when it already contains a dirty entry for the same key\",key,name));\n  }\n  LRUNode node=cache.get(key);\n  if (node != null) {\n    numOverwrites++;\n    currentSizeBytes-=node.size();\n    node.update(value);\n    updateLRU(node);\n  }\n else {\n    node=new LRUNode(key,value);\n    putHead(node);\n    cache.put(key,node);\n  }\n  if (value.isDirty()) {\n    dirtyKeys.remove(key);\n    dirtyKeys.add(key);\n  }\n  currentSizeBytes+=node.size();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 344,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!value.isDirty() && dirtyKeys.contains(key)) {\n  throw new IllegalStateException(String.format(\"Attempting to put a clean entry for key [%s] into NamedCache [%s] when it already contains a dirty entry for the same key\",key,name));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 43,
    "startLineNumber" : 158,
    "startColumnNumber" : 12,
    "endLineNumber" : 158,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}