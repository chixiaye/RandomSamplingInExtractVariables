{
  "id" : 235,
  "expression" : "\"  +++ Test expects too many misreads by %d images\\n\"",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"  +++ Test expects too many misreads by %d images\\n\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 53,
      "startLineNumber" : 226,
      "startColumnNumber" : 24,
      "endLineNumber" : 226,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 226,
        "startColumnNumber" : 6,
        "endLineNumber" : 226,
        "endColumnNumber" : 110
      },
      "nodeContext" : "System.out.printf(\"  +++ Test expects too many misreads by %d images\\n\",totalMaxMisread - totalMisread)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 226,
        "startColumnNumber" : 6,
        "endLineNumber" : 226,
        "endColumnNumber" : 111
      },
      "nodeContext" : "System.out.printf(\"  +++ Test expects too many misreads by %d images\\n\",totalMaxMisread - totalMisread);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 225,
        "startColumnNumber" : 40,
        "endLineNumber" : 227,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  System.out.printf(\"  +++ Test expects too many misreads by %d images\\n\",totalMaxMisread - totalMisread);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 225,
        "startColumnNumber" : 4,
        "endLineNumber" : 229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (totalMisread < totalMaxMisread) {\n  System.out.printf(\"  +++ Test expects too many misreads by %d images\\n\",totalMaxMisread - totalMisread);\n}\n else if (totalMisread > totalMaxMisread) {\n  System.out.printf(\"  --- Test had too many misreads by %d images\\n\",totalMisread - totalMaxMisread);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5588,
        "startLineNumber" : 126,
        "startColumnNumber" : 96,
        "endLineNumber" : 250,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertFalse(testResults.isEmpty());\n  File[] imageFiles=getImageFiles();\n  int testCount=testResults.size();\n  int[] passedCounts=new int[testCount];\n  int[] misreadCounts=new int[testCount];\n  int[] tryHarderCounts=new int[testCount];\n  int[] tryHaderMisreadCounts=new int[testCount];\n  for (  File testImage : imageFiles) {\n    System.out.printf(\"Starting %s\\n\",testImage.getAbsolutePath());\n    BufferedImage image=ImageIO.read(testImage);\n    String testImageFileName=testImage.getName();\n    String fileBaseName=testImageFileName.substring(0,testImageFileName.indexOf('.'));\n    File expectedTextFile=new File(testBase,fileBaseName + \".txt\");\n    String expectedText;\n    if (expectedTextFile.exists()) {\n      expectedText=readFileAsString(expectedTextFile,UTF8);\n    }\n else {\n      expectedTextFile=new File(testBase,fileBaseName + \".bin\");\n      assertTrue(expectedTextFile.exists());\n      expectedText=readFileAsString(expectedTextFile,ISO88591);\n    }\n    File expectedMetadataFile=new File(testBase,fileBaseName + \".metadata.txt\");\n    Properties expectedMetadata=new Properties();\n    if (expectedMetadataFile.exists()) {\n      InputStream expectedStream=new FileInputStream(expectedMetadataFile);\n      try {\n        expectedMetadata.load(expectedStream);\n      }\n  finally {\n        expectedStream.close();\n      }\n    }\n    for (int x=0; x < testCount; x++) {\n      float rotation=testResults.get(x).getRotation();\n      BufferedImage rotatedImage=rotateImage(image,rotation);\n      LuminanceSource source=new BufferedImageLuminanceSource(rotatedImage);\n      BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));\n      try {\n        if (decode(bitmap,rotation,expectedText,expectedMetadata,false)) {\n          passedCounts[x]++;\n        }\n else {\n          misreadCounts[x]++;\n        }\n      }\n catch (      ReaderException re) {\n      }\n      try {\n        if (decode(bitmap,rotation,expectedText,expectedMetadata,true)) {\n          tryHarderCounts[x]++;\n        }\n else {\n          tryHaderMisreadCounts[x]++;\n        }\n      }\n catch (      ReaderException re) {\n      }\n    }\n  }\n  int totalFound=0;\n  int totalMustPass=0;\n  int totalMisread=0;\n  int totalMaxMisread=0;\n  for (int x=0; x < testResults.size(); x++) {\n    TestResult testResult=testResults.get(x);\n    System.out.printf(\"Rotation %d degrees:\\n\",(int)testResult.getRotation());\n    System.out.printf(\"  %d of %d images passed (%d required)\\n\",passedCounts[x],imageFiles.length,testResult.getMustPassCount());\n    int failed=imageFiles.length - passedCounts[x];\n    System.out.printf(\"    %d failed due to misreads, %d not detected\\n\",misreadCounts[x],failed - misreadCounts[x]);\n    System.out.printf(\"  %d of %d images passed with try harder (%d required)\\n\",tryHarderCounts[x],imageFiles.length,testResult.getTryHarderCount());\n    failed=imageFiles.length - tryHarderCounts[x];\n    System.out.printf(\"    %d failed due to misreads, %d not detected\\n\",tryHaderMisreadCounts[x],failed - tryHaderMisreadCounts[x]);\n    totalFound+=passedCounts[x] + tryHarderCounts[x];\n    totalMustPass+=testResult.getMustPassCount() + testResult.getTryHarderCount();\n    totalMisread+=misreadCounts[x] + tryHaderMisreadCounts[x];\n    totalMaxMisread+=testResult.getMaxMisreads() + testResult.getMaxTryHarderMisreads();\n  }\n  int totalTests=imageFiles.length * testCount * 2;\n  System.out.printf(\"TOTALS:\\nDecoded %d images out of %d (%d%%, %d required)\\n\",totalFound,totalTests,totalFound * 100 / totalTests,totalMustPass);\n  if (totalFound > totalMustPass) {\n    System.out.printf(\"  +++ Test too lax by %d images\\n\",totalFound - totalMustPass);\n  }\n else   if (totalFound < totalMustPass) {\n    System.out.printf(\"  --- Test failed by %d images\\n\",totalMustPass - totalFound);\n  }\n  if (totalMisread < totalMaxMisread) {\n    System.out.printf(\"  +++ Test expects too many misreads by %d images\\n\",totalMaxMisread - totalMisread);\n  }\n else   if (totalMisread > totalMaxMisread) {\n    System.out.printf(\"  --- Test had too many misreads by %d images\\n\",totalMisread - totalMaxMisread);\n  }\n  System.out.flush();\n  if (assertOnFailure) {\n    for (int x=0; x < testCount; x++) {\n      TestResult testResult=testResults.get(x);\n      String label=\"Rotation \" + testResult.getRotation() + \" degrees: Too many images failed\";\n      assertTrue(label,passedCounts[x] >= testResult.getMustPassCount());\n      assertTrue(\"Try harder, \" + label,tryHarderCounts[x] >= testResult.getTryHarderCount());\n      label=\"Rotation \" + testResult.getRotation() + \" degrees: Too many images misread\";\n      assertTrue(label,misreadCounts[x] <= testResult.getMaxMisreads());\n      assertTrue(\"Try harder, \" + label,tryHaderMisreadCounts[x] <= testResult.getMaxTryHarderMisreads());\n    }\n  }\n  return new SummaryResults(totalFound,totalMustPass,totalTests);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 689,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5682,
        "startLineNumber" : 126,
        "startColumnNumber" : 2,
        "endLineNumber" : 250,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public SummaryResults testBlackBoxCountingResults(boolean assertOnFailure) throws IOException {\n  assertFalse(testResults.isEmpty());\n  File[] imageFiles=getImageFiles();\n  int testCount=testResults.size();\n  int[] passedCounts=new int[testCount];\n  int[] misreadCounts=new int[testCount];\n  int[] tryHarderCounts=new int[testCount];\n  int[] tryHaderMisreadCounts=new int[testCount];\n  for (  File testImage : imageFiles) {\n    System.out.printf(\"Starting %s\\n\",testImage.getAbsolutePath());\n    BufferedImage image=ImageIO.read(testImage);\n    String testImageFileName=testImage.getName();\n    String fileBaseName=testImageFileName.substring(0,testImageFileName.indexOf('.'));\n    File expectedTextFile=new File(testBase,fileBaseName + \".txt\");\n    String expectedText;\n    if (expectedTextFile.exists()) {\n      expectedText=readFileAsString(expectedTextFile,UTF8);\n    }\n else {\n      expectedTextFile=new File(testBase,fileBaseName + \".bin\");\n      assertTrue(expectedTextFile.exists());\n      expectedText=readFileAsString(expectedTextFile,ISO88591);\n    }\n    File expectedMetadataFile=new File(testBase,fileBaseName + \".metadata.txt\");\n    Properties expectedMetadata=new Properties();\n    if (expectedMetadataFile.exists()) {\n      InputStream expectedStream=new FileInputStream(expectedMetadataFile);\n      try {\n        expectedMetadata.load(expectedStream);\n      }\n  finally {\n        expectedStream.close();\n      }\n    }\n    for (int x=0; x < testCount; x++) {\n      float rotation=testResults.get(x).getRotation();\n      BufferedImage rotatedImage=rotateImage(image,rotation);\n      LuminanceSource source=new BufferedImageLuminanceSource(rotatedImage);\n      BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));\n      try {\n        if (decode(bitmap,rotation,expectedText,expectedMetadata,false)) {\n          passedCounts[x]++;\n        }\n else {\n          misreadCounts[x]++;\n        }\n      }\n catch (      ReaderException re) {\n      }\n      try {\n        if (decode(bitmap,rotation,expectedText,expectedMetadata,true)) {\n          tryHarderCounts[x]++;\n        }\n else {\n          tryHaderMisreadCounts[x]++;\n        }\n      }\n catch (      ReaderException re) {\n      }\n    }\n  }\n  int totalFound=0;\n  int totalMustPass=0;\n  int totalMisread=0;\n  int totalMaxMisread=0;\n  for (int x=0; x < testResults.size(); x++) {\n    TestResult testResult=testResults.get(x);\n    System.out.printf(\"Rotation %d degrees:\\n\",(int)testResult.getRotation());\n    System.out.printf(\"  %d of %d images passed (%d required)\\n\",passedCounts[x],imageFiles.length,testResult.getMustPassCount());\n    int failed=imageFiles.length - passedCounts[x];\n    System.out.printf(\"    %d failed due to misreads, %d not detected\\n\",misreadCounts[x],failed - misreadCounts[x]);\n    System.out.printf(\"  %d of %d images passed with try harder (%d required)\\n\",tryHarderCounts[x],imageFiles.length,testResult.getTryHarderCount());\n    failed=imageFiles.length - tryHarderCounts[x];\n    System.out.printf(\"    %d failed due to misreads, %d not detected\\n\",tryHaderMisreadCounts[x],failed - tryHaderMisreadCounts[x]);\n    totalFound+=passedCounts[x] + tryHarderCounts[x];\n    totalMustPass+=testResult.getMustPassCount() + testResult.getTryHarderCount();\n    totalMisread+=misreadCounts[x] + tryHaderMisreadCounts[x];\n    totalMaxMisread+=testResult.getMaxMisreads() + testResult.getMaxTryHarderMisreads();\n  }\n  int totalTests=imageFiles.length * testCount * 2;\n  System.out.printf(\"TOTALS:\\nDecoded %d images out of %d (%d%%, %d required)\\n\",totalFound,totalTests,totalFound * 100 / totalTests,totalMustPass);\n  if (totalFound > totalMustPass) {\n    System.out.printf(\"  +++ Test too lax by %d images\\n\",totalFound - totalMustPass);\n  }\n else   if (totalFound < totalMustPass) {\n    System.out.printf(\"  --- Test failed by %d images\\n\",totalMustPass - totalFound);\n  }\n  if (totalMisread < totalMaxMisread) {\n    System.out.printf(\"  +++ Test expects too many misreads by %d images\\n\",totalMaxMisread - totalMisread);\n  }\n else   if (totalMisread > totalMaxMisread) {\n    System.out.printf(\"  --- Test had too many misreads by %d images\\n\",totalMisread - totalMaxMisread);\n  }\n  System.out.flush();\n  if (assertOnFailure) {\n    for (int x=0; x < testCount; x++) {\n      TestResult testResult=testResults.get(x);\n      String label=\"Rotation \" + testResult.getRotation() + \" degrees: Too many images failed\";\n      assertTrue(label,passedCounts[x] >= testResult.getMustPassCount());\n      assertTrue(\"Try harder, \" + label,tryHarderCounts[x] >= testResult.getTryHarderCount());\n      label=\"Rotation \" + testResult.getRotation() + \" degrees: Too many images misread\";\n      assertTrue(label,misreadCounts[x] <= testResult.getMaxMisreads());\n      assertTrue(\"Try harder, \" + label,tryHaderMisreadCounts[x] <= testResult.getMaxTryHarderMisreads());\n    }\n  }\n  return new SummaryResults(totalFound,totalMustPass,totalTests);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 699,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 226,
        "startColumnNumber" : 6,
        "endLineNumber" : 226,
        "endColumnNumber" : 111
      },
      "nodeContext" : "System.out.printf(\"  +++ Test expects too many misreads by %d images\\n\",totalMaxMisread - totalMisread);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 10,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 53,
    "startLineNumber" : 226,
    "startColumnNumber" : 24,
    "endLineNumber" : 226,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ ]
}