{
  "id" : 256,
  "expression" : "strongRefCache",
  "projectName" : "airbnb@lottie-android",
  "commitID" : "54c2775bf2c8b67c8d24840424c13968255caea7",
  "filePath" : "lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "strongRefCache",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 319,
      "startColumnNumber" : 15,
      "endLineNumber" : 319,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 319,
        "startColumnNumber" : 15,
        "endLineNumber" : 319,
        "endColumnNumber" : 56
      },
      "nodeContext" : "strongRefCache.containsKey(animationName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 319,
        "startColumnNumber" : 11,
        "endLineNumber" : 322,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (strongRefCache.containsKey(animationName)) {\n  setComposition(strongRefCache.get(animationName));\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 388,
        "startLineNumber" : 312,
        "startColumnNumber" : 4,
        "endLineNumber" : 322,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (weakRefCache.containsKey(animationName)) {\n  WeakReference<LottieComposition> compRef=weakRefCache.get(animationName);\n  LottieComposition ref=compRef.get();\n  if (ref != null) {\n    setComposition(ref);\n    return;\n  }\n}\n else if (strongRefCache.containsKey(animationName)) {\n  setComposition(strongRefCache.get(animationName));\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1109,
        "startLineNumber" : 310,
        "startColumnNumber" : 124,
        "endLineNumber" : 339,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.animationName=animationName;\n  if (weakRefCache.containsKey(animationName)) {\n    WeakReference<LottieComposition> compRef=weakRefCache.get(animationName);\n    LottieComposition ref=compRef.get();\n    if (ref != null) {\n      setComposition(ref);\n      return;\n    }\n  }\n else   if (strongRefCache.containsKey(animationName)) {\n    setComposition(strongRefCache.get(animationName));\n    return;\n  }\n  this.animationName=animationName;\n  lottieDrawable.cancelAnimation();\n  cancelLoaderTask();\n  compositionLoader=LottieComposition.Factory.fromAssetFileName(getContext(),animationName,new OnCompositionLoadedListener(){\n    @Override public void onCompositionLoaded(    LottieComposition composition){\n      if (cacheStrategy == CacheStrategy.Strong) {\n        strongRefCache.put(animationName,composition);\n      }\n else       if (cacheStrategy == CacheStrategy.Weak) {\n        weakRefCache.put(animationName,new WeakReference<>(composition));\n      }\n      setComposition(composition);\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1627,
        "startLineNumber" : 302,
        "startColumnNumber" : 2,
        "endLineNumber" : 339,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Sets the animation from a file in the assets directory. This will load and deserialize the file asynchronously. <p> You may also specify a cache strategy. Specifying  {@link CacheStrategy#Strong} will hold astrong reference to the composition once it is loaded and deserialized.  {@link CacheStrategy#Weak} will hold a weak reference to said composition.\n */\n@SuppressWarnings(\"WeakerAccess\") public void setAnimation(final String animationName,final CacheStrategy cacheStrategy){\n  this.animationName=animationName;\n  if (weakRefCache.containsKey(animationName)) {\n    WeakReference<LottieComposition> compRef=weakRefCache.get(animationName);\n    LottieComposition ref=compRef.get();\n    if (ref != null) {\n      setComposition(ref);\n      return;\n    }\n  }\n else   if (strongRefCache.containsKey(animationName)) {\n    setComposition(strongRefCache.get(animationName));\n    return;\n  }\n  this.animationName=animationName;\n  lottieDrawable.cancelAnimation();\n  cancelLoaderTask();\n  compositionLoader=LottieComposition.Factory.fromAssetFileName(getContext(),animationName,new OnCompositionLoadedListener(){\n    @Override public void onCompositionLoaded(    LottieComposition composition){\n      if (cacheStrategy == CacheStrategy.Strong) {\n        strongRefCache.put(animationName,composition);\n      }\n else       if (cacheStrategy == CacheStrategy.Weak) {\n        weakRefCache.put(animationName,new WeakReference<>(composition));\n      }\n      setComposition(composition);\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 319,
        "startColumnNumber" : 15,
        "endLineNumber" : 319,
        "endColumnNumber" : 56
      },
      "nodeContext" : "strongRefCache.containsKey(animationName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,com.airbnb.lottie.LottieComposition>"
  }, {
    "nodeContext" : "strongRefCache",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 320,
      "startColumnNumber" : 21,
      "endLineNumber" : 320,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 320,
        "startColumnNumber" : 21,
        "endLineNumber" : 320,
        "endColumnNumber" : 54
      },
      "nodeContext" : "strongRefCache.get(animationName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 320,
        "endColumnNumber" : 55
      },
      "nodeContext" : "setComposition(strongRefCache.get(animationName))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 320,
        "endColumnNumber" : 56
      },
      "nodeContext" : "setComposition(strongRefCache.get(animationName));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 319,
        "startColumnNumber" : 58,
        "endLineNumber" : 322,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  setComposition(strongRefCache.get(animationName));\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 319,
        "startColumnNumber" : 11,
        "endLineNumber" : 322,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (strongRefCache.containsKey(animationName)) {\n  setComposition(strongRefCache.get(animationName));\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 388,
        "startLineNumber" : 312,
        "startColumnNumber" : 4,
        "endLineNumber" : 322,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (weakRefCache.containsKey(animationName)) {\n  WeakReference<LottieComposition> compRef=weakRefCache.get(animationName);\n  LottieComposition ref=compRef.get();\n  if (ref != null) {\n    setComposition(ref);\n    return;\n  }\n}\n else if (strongRefCache.containsKey(animationName)) {\n  setComposition(strongRefCache.get(animationName));\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1109,
        "startLineNumber" : 310,
        "startColumnNumber" : 124,
        "endLineNumber" : 339,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.animationName=animationName;\n  if (weakRefCache.containsKey(animationName)) {\n    WeakReference<LottieComposition> compRef=weakRefCache.get(animationName);\n    LottieComposition ref=compRef.get();\n    if (ref != null) {\n      setComposition(ref);\n      return;\n    }\n  }\n else   if (strongRefCache.containsKey(animationName)) {\n    setComposition(strongRefCache.get(animationName));\n    return;\n  }\n  this.animationName=animationName;\n  lottieDrawable.cancelAnimation();\n  cancelLoaderTask();\n  compositionLoader=LottieComposition.Factory.fromAssetFileName(getContext(),animationName,new OnCompositionLoadedListener(){\n    @Override public void onCompositionLoaded(    LottieComposition composition){\n      if (cacheStrategy == CacheStrategy.Strong) {\n        strongRefCache.put(animationName,composition);\n      }\n else       if (cacheStrategy == CacheStrategy.Weak) {\n        weakRefCache.put(animationName,new WeakReference<>(composition));\n      }\n      setComposition(composition);\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1627,
        "startLineNumber" : 302,
        "startColumnNumber" : 2,
        "endLineNumber" : 339,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Sets the animation from a file in the assets directory. This will load and deserialize the file asynchronously. <p> You may also specify a cache strategy. Specifying  {@link CacheStrategy#Strong} will hold astrong reference to the composition once it is loaded and deserialized.  {@link CacheStrategy#Weak} will hold a weak reference to said composition.\n */\n@SuppressWarnings(\"WeakerAccess\") public void setAnimation(final String animationName,final CacheStrategy cacheStrategy){\n  this.animationName=animationName;\n  if (weakRefCache.containsKey(animationName)) {\n    WeakReference<LottieComposition> compRef=weakRefCache.get(animationName);\n    LottieComposition ref=compRef.get();\n    if (ref != null) {\n      setComposition(ref);\n      return;\n    }\n  }\n else   if (strongRefCache.containsKey(animationName)) {\n    setComposition(strongRefCache.get(animationName));\n    return;\n  }\n  this.animationName=animationName;\n  lottieDrawable.cancelAnimation();\n  cancelLoaderTask();\n  compositionLoader=LottieComposition.Factory.fromAssetFileName(getContext(),animationName,new OnCompositionLoadedListener(){\n    @Override public void onCompositionLoaded(    LottieComposition composition){\n      if (cacheStrategy == CacheStrategy.Strong) {\n        strongRefCache.put(animationName,composition);\n      }\n else       if (cacheStrategy == CacheStrategy.Weak) {\n        weakRefCache.put(animationName,new WeakReference<>(composition));\n      }\n      setComposition(composition);\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 320,
        "endColumnNumber" : 56
      },
      "nodeContext" : "setComposition(strongRefCache.get(animationName));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,com.airbnb.lottie.LottieComposition>"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 319,
    "startColumnNumber" : 15,
    "endLineNumber" : 319,
    "endColumnNumber" : 29
  }, {
    "charLength" : 14,
    "startLineNumber" : 320,
    "startColumnNumber" : 21,
    "endLineNumber" : 320,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}