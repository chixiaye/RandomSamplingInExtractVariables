{
  "id" : 269,
  "expression" : "session",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/plan/MySQLPlanJSON.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "session",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 50,
      "startColumnNumber" : 32,
      "endLineNumber" : 50,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 50,
        "startColumnNumber" : 32,
        "endLineNumber" : 50,
        "endColumnNumber" : 55
      },
      "nodeContext" : "session.getDataSource()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SuperConstructorInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 50,
        "startColumnNumber" : 14,
        "endLineNumber" : 50,
        "endColumnNumber" : 55
      },
      "nodeContext" : "(MySQLDataSource)session.getDataSource()",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 64
      },
      "nodeContext" : "super((MySQLDataSource)session.getDataSource(),query);\n",
      "nodeType" : "SuperConstructorInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2268,
        "startLineNumber" : 49,
        "startColumnNumber" : 80,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  super((MySQLDataSource)session.getDataSource(),query);\n  if (!SQLUtils.getFirstKeyword(SQLUtils.getDialectFromObject(dataSource),query).toUpperCase().equals(\"SELECT\")) {\n    throw new DBCException(\"Only SELECT statements could produce execution plan\");\n  }\n  try (JDBCPreparedStatement dbStat=session.prepareStatement(getPlanQueryString())){\n    try (JDBCResultSet dbResult=dbStat.executeQuery()){\n      List<MySQLPlanNodeJSON> nodes=new ArrayList<>();\n      dbResult.next();\n      String jsonPlan=dbResult.getString(1);\n      JsonObject planObject=gson.fromJson(jsonPlan,JsonObject.class);\n      JsonObject queryBlock=planObject.getAsJsonObject(\"query_block\");\n      MySQLPlanNodeJSON rootNode=new MySQLPlanNodeJSON(null,\"select\",queryBlock);\n      if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n        throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n      }\n      nodes.add(rootNode);\n      rootNodes=nodes;\n    }\n   }\n catch (  SQLException e) {\n    throw new DBCException(e,session.getExecutionContext());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2344,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public MySQLPlanJSON(JDBCSession session,String query) throws DBCException {\n  super((MySQLDataSource)session.getDataSource(),query);\n  if (!SQLUtils.getFirstKeyword(SQLUtils.getDialectFromObject(dataSource),query).toUpperCase().equals(\"SELECT\")) {\n    throw new DBCException(\"Only SELECT statements could produce execution plan\");\n  }\n  try (JDBCPreparedStatement dbStat=session.prepareStatement(getPlanQueryString())){\n    try (JDBCResultSet dbResult=dbStat.executeQuery()){\n      List<MySQLPlanNodeJSON> nodes=new ArrayList<>();\n      dbResult.next();\n      String jsonPlan=dbResult.getString(1);\n      JsonObject planObject=gson.fromJson(jsonPlan,JsonObject.class);\n      JsonObject queryBlock=planObject.getAsJsonObject(\"query_block\");\n      MySQLPlanNodeJSON rootNode=new MySQLPlanNodeJSON(null,\"select\",queryBlock);\n      if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n        throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n      }\n      nodes.add(rootNode);\n      rootNodes=nodes;\n    }\n   }\n catch (  SQLException e) {\n    throw new DBCException(e,session.getExecutionContext());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 64
      },
      "nodeContext" : "super((MySQLDataSource)session.getDataSource(),query);\n",
      "nodeType" : "SuperConstructorInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.model.exec.jdbc.JDBCSession"
  }, {
    "nodeContext" : "session",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 55,
      "startColumnNumber" : 44,
      "endLineNumber" : 55,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 55,
        "startColumnNumber" : 44,
        "endLineNumber" : 55,
        "endColumnNumber" : 90
      },
      "nodeContext" : "session.prepareStatement(getPlanQueryString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 55,
        "startColumnNumber" : 35,
        "endLineNumber" : 55,
        "endColumnNumber" : 90
      },
      "nodeContext" : "dbStat=session.prepareStatement(getPlanQueryString())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 55,
        "startColumnNumber" : 13,
        "endLineNumber" : 55,
        "endColumnNumber" : 90
      },
      "nodeContext" : "JDBCPreparedStatement dbStat=session.prepareStatement(getPlanQueryString())",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1963,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (JDBCPreparedStatement dbStat=session.prepareStatement(getPlanQueryString())){\n  try (JDBCResultSet dbResult=dbStat.executeQuery()){\n    List<MySQLPlanNodeJSON> nodes=new ArrayList<>();\n    dbResult.next();\n    String jsonPlan=dbResult.getString(1);\n    JsonObject planObject=gson.fromJson(jsonPlan,JsonObject.class);\n    JsonObject queryBlock=planObject.getAsJsonObject(\"query_block\");\n    MySQLPlanNodeJSON rootNode=new MySQLPlanNodeJSON(null,\"select\",queryBlock);\n    if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n      throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n    }\n    nodes.add(rootNode);\n    rootNodes=nodes;\n  }\n }\n catch (SQLException e) {\n  throw new DBCException(e,session.getExecutionContext());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 127,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2268,
        "startLineNumber" : 49,
        "startColumnNumber" : 80,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  super((MySQLDataSource)session.getDataSource(),query);\n  if (!SQLUtils.getFirstKeyword(SQLUtils.getDialectFromObject(dataSource),query).toUpperCase().equals(\"SELECT\")) {\n    throw new DBCException(\"Only SELECT statements could produce execution plan\");\n  }\n  try (JDBCPreparedStatement dbStat=session.prepareStatement(getPlanQueryString())){\n    try (JDBCResultSet dbResult=dbStat.executeQuery()){\n      List<MySQLPlanNodeJSON> nodes=new ArrayList<>();\n      dbResult.next();\n      String jsonPlan=dbResult.getString(1);\n      JsonObject planObject=gson.fromJson(jsonPlan,JsonObject.class);\n      JsonObject queryBlock=planObject.getAsJsonObject(\"query_block\");\n      MySQLPlanNodeJSON rootNode=new MySQLPlanNodeJSON(null,\"select\",queryBlock);\n      if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n        throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n      }\n      nodes.add(rootNode);\n      rootNodes=nodes;\n    }\n   }\n catch (  SQLException e) {\n    throw new DBCException(e,session.getExecutionContext());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2344,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public MySQLPlanJSON(JDBCSession session,String query) throws DBCException {\n  super((MySQLDataSource)session.getDataSource(),query);\n  if (!SQLUtils.getFirstKeyword(SQLUtils.getDialectFromObject(dataSource),query).toUpperCase().equals(\"SELECT\")) {\n    throw new DBCException(\"Only SELECT statements could produce execution plan\");\n  }\n  try (JDBCPreparedStatement dbStat=session.prepareStatement(getPlanQueryString())){\n    try (JDBCResultSet dbResult=dbStat.executeQuery()){\n      List<MySQLPlanNodeJSON> nodes=new ArrayList<>();\n      dbResult.next();\n      String jsonPlan=dbResult.getString(1);\n      JsonObject planObject=gson.fromJson(jsonPlan,JsonObject.class);\n      JsonObject queryBlock=planObject.getAsJsonObject(\"query_block\");\n      MySQLPlanNodeJSON rootNode=new MySQLPlanNodeJSON(null,\"select\",queryBlock);\n      if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n        throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n      }\n      nodes.add(rootNode);\n      rootNodes=nodes;\n    }\n   }\n catch (  SQLException e) {\n    throw new DBCException(e,session.getExecutionContext());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 55,
        "startColumnNumber" : 13,
        "endLineNumber" : 55,
        "endColumnNumber" : 90
      },
      "nodeContext" : "JDBCPreparedStatement dbStat=session.prepareStatement(getPlanQueryString())",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.model.exec.jdbc.JDBCSession"
  }, {
    "nodeContext" : "session",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 96,
      "startColumnNumber" : 38,
      "endLineNumber" : 96,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 96,
        "startColumnNumber" : 38,
        "endLineNumber" : 96,
        "endColumnNumber" : 67
      },
      "nodeContext" : "session.getExecutionContext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 96,
        "startColumnNumber" : 18,
        "endLineNumber" : 96,
        "endColumnNumber" : 68
      },
      "nodeContext" : "new DBCException(e,session.getExecutionContext())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 69
      },
      "nodeContext" : "throw new DBCException(e,session.getExecutionContext());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 95,
        "startColumnNumber" : 33,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new DBCException(e,session.getExecutionContext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 95,
        "startColumnNumber" : 10,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (SQLException e) {\n  throw new DBCException(e,session.getExecutionContext());\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1963,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (JDBCPreparedStatement dbStat=session.prepareStatement(getPlanQueryString())){\n  try (JDBCResultSet dbResult=dbStat.executeQuery()){\n    List<MySQLPlanNodeJSON> nodes=new ArrayList<>();\n    dbResult.next();\n    String jsonPlan=dbResult.getString(1);\n    JsonObject planObject=gson.fromJson(jsonPlan,JsonObject.class);\n    JsonObject queryBlock=planObject.getAsJsonObject(\"query_block\");\n    MySQLPlanNodeJSON rootNode=new MySQLPlanNodeJSON(null,\"select\",queryBlock);\n    if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n      throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n    }\n    nodes.add(rootNode);\n    rootNodes=nodes;\n  }\n }\n catch (SQLException e) {\n  throw new DBCException(e,session.getExecutionContext());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 127,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2268,
        "startLineNumber" : 49,
        "startColumnNumber" : 80,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  super((MySQLDataSource)session.getDataSource(),query);\n  if (!SQLUtils.getFirstKeyword(SQLUtils.getDialectFromObject(dataSource),query).toUpperCase().equals(\"SELECT\")) {\n    throw new DBCException(\"Only SELECT statements could produce execution plan\");\n  }\n  try (JDBCPreparedStatement dbStat=session.prepareStatement(getPlanQueryString())){\n    try (JDBCResultSet dbResult=dbStat.executeQuery()){\n      List<MySQLPlanNodeJSON> nodes=new ArrayList<>();\n      dbResult.next();\n      String jsonPlan=dbResult.getString(1);\n      JsonObject planObject=gson.fromJson(jsonPlan,JsonObject.class);\n      JsonObject queryBlock=planObject.getAsJsonObject(\"query_block\");\n      MySQLPlanNodeJSON rootNode=new MySQLPlanNodeJSON(null,\"select\",queryBlock);\n      if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n        throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n      }\n      nodes.add(rootNode);\n      rootNodes=nodes;\n    }\n   }\n catch (  SQLException e) {\n    throw new DBCException(e,session.getExecutionContext());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2344,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public MySQLPlanJSON(JDBCSession session,String query) throws DBCException {\n  super((MySQLDataSource)session.getDataSource(),query);\n  if (!SQLUtils.getFirstKeyword(SQLUtils.getDialectFromObject(dataSource),query).toUpperCase().equals(\"SELECT\")) {\n    throw new DBCException(\"Only SELECT statements could produce execution plan\");\n  }\n  try (JDBCPreparedStatement dbStat=session.prepareStatement(getPlanQueryString())){\n    try (JDBCResultSet dbResult=dbStat.executeQuery()){\n      List<MySQLPlanNodeJSON> nodes=new ArrayList<>();\n      dbResult.next();\n      String jsonPlan=dbResult.getString(1);\n      JsonObject planObject=gson.fromJson(jsonPlan,JsonObject.class);\n      JsonObject queryBlock=planObject.getAsJsonObject(\"query_block\");\n      MySQLPlanNodeJSON rootNode=new MySQLPlanNodeJSON(null,\"select\",queryBlock);\n      if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n        throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n      }\n      nodes.add(rootNode);\n      rootNodes=nodes;\n    }\n   }\n catch (  SQLException e) {\n    throw new DBCException(e,session.getExecutionContext());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 69
      },
      "nodeContext" : "throw new DBCException(e,session.getExecutionContext());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.model.exec.jdbc.JDBCSession"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 50,
    "startColumnNumber" : 32,
    "endLineNumber" : 50,
    "endColumnNumber" : 39
  }, {
    "charLength" : 7,
    "startLineNumber" : 55,
    "startColumnNumber" : 44,
    "endLineNumber" : 55,
    "endColumnNumber" : 51
  }, {
    "charLength" : 7,
    "startLineNumber" : 96,
    "startColumnNumber" : 38,
    "endLineNumber" : 96,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  } ]
}