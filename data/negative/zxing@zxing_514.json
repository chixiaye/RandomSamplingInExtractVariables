{
  "id" : 514,
  "expression" : "false",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/oned/Code128Reader.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 176,
      "startColumnNumber" : 22,
      "endLineNumber" : 176,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 176,
        "startColumnNumber" : 12,
        "endLineNumber" : 176,
        "endColumnNumber" : 27
      },
      "nodeContext" : "isWhite=false",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 176,
        "startColumnNumber" : 4,
        "endLineNumber" : 176,
        "endColumnNumber" : 28
      },
      "nodeContext" : "boolean isWhite=false;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1664,
        "startLineNumber" : 169,
        "startColumnNumber" : 79,
        "endLineNumber" : 214,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int width=row.getSize();\n  int rowOffset=row.getNextSet(0);\n  int counterPosition=0;\n  int[] counters=new int[6];\n  int patternStart=rowOffset;\n  boolean isWhite=false;\n  int patternLength=counters.length;\n  for (int i=rowOffset; i < width; i++) {\n    if (row.get(i) ^ isWhite) {\n      counters[counterPosition]++;\n    }\n else {\n      if (counterPosition == patternLength - 1) {\n        int bestVariance=MAX_AVG_VARIANCE;\n        int bestMatch=-1;\n        for (int startCode=CODE_START_A; startCode <= CODE_START_C; startCode++) {\n          int variance=patternMatchVariance(counters,CODE_PATTERNS[startCode],MAX_INDIVIDUAL_VARIANCE);\n          if (variance < bestVariance) {\n            bestVariance=variance;\n            bestMatch=startCode;\n          }\n        }\n        if (bestMatch >= 0) {\n          if (row.isRange(Math.max(0,patternStart - (i - patternStart) / 2),patternStart,false)) {\n            return new int[]{patternStart,i,bestMatch};\n          }\n        }\n        patternStart+=counters[0] + counters[1];\n        System.arraycopy(counters,2,counters,0,patternLength - 2);\n        counters[patternLength - 2]=0;\n        counters[patternLength - 1]=0;\n        counterPosition--;\n      }\n else {\n        counterPosition++;\n      }\n      counters[counterPosition]=1;\n      isWhite=!isWhite;\n    }\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 221,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1741,
        "startLineNumber" : 169,
        "startColumnNumber" : 2,
        "endLineNumber" : 214,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static int[] findStartPattern(BitArray row) throws NotFoundException {\n  int width=row.getSize();\n  int rowOffset=row.getNextSet(0);\n  int counterPosition=0;\n  int[] counters=new int[6];\n  int patternStart=rowOffset;\n  boolean isWhite=false;\n  int patternLength=counters.length;\n  for (int i=rowOffset; i < width; i++) {\n    if (row.get(i) ^ isWhite) {\n      counters[counterPosition]++;\n    }\n else {\n      if (counterPosition == patternLength - 1) {\n        int bestVariance=MAX_AVG_VARIANCE;\n        int bestMatch=-1;\n        for (int startCode=CODE_START_A; startCode <= CODE_START_C; startCode++) {\n          int variance=patternMatchVariance(counters,CODE_PATTERNS[startCode],MAX_INDIVIDUAL_VARIANCE);\n          if (variance < bestVariance) {\n            bestVariance=variance;\n            bestMatch=startCode;\n          }\n        }\n        if (bestMatch >= 0) {\n          if (row.isRange(Math.max(0,patternStart - (i - patternStart) / 2),patternStart,false)) {\n            return new int[]{patternStart,i,bestMatch};\n          }\n        }\n        patternStart+=counters[0] + counters[1];\n        System.arraycopy(counters,2,counters,0,patternLength - 2);\n        counters[patternLength - 2]=0;\n        counters[patternLength - 1]=0;\n        counterPosition--;\n      }\n else {\n        counterPosition++;\n      }\n      counters[counterPosition]=1;\n      isWhite=!isWhite;\n    }\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 234,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 176,
        "startColumnNumber" : 4,
        "endLineNumber" : 176,
        "endColumnNumber" : 28
      },
      "nodeContext" : "boolean isWhite=false;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 197,
      "startColumnNumber" : 16,
      "endLineNumber" : 197,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 196,
        "startColumnNumber" : 16,
        "endLineNumber" : 197,
        "endColumnNumber" : 22
      },
      "nodeContext" : "row.isRange(Math.max(0,patternStart - (i - patternStart) / 2),patternStart,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 196,
        "startColumnNumber" : 12,
        "endLineNumber" : 199,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (row.isRange(Math.max(0,patternStart - (i - patternStart) / 2),patternStart,false)) {\n  return new int[]{patternStart,i,bestMatch};\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 303,
        "startLineNumber" : 194,
        "startColumnNumber" : 30,
        "endLineNumber" : 200,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (row.isRange(Math.max(0,patternStart - (i - patternStart) / 2),patternStart,false)) {\n    return new int[]{patternStart,i,bestMatch};\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 323,
        "startLineNumber" : 194,
        "startColumnNumber" : 10,
        "endLineNumber" : 200,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (bestMatch >= 0) {\n  if (row.isRange(Math.max(0,patternStart - (i - patternStart) / 2),patternStart,false)) {\n    return new int[]{patternStart,i,bestMatch};\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1038,
        "startLineNumber" : 183,
        "startColumnNumber" : 50,
        "endLineNumber" : 206,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int bestVariance=MAX_AVG_VARIANCE;\n  int bestMatch=-1;\n  for (int startCode=CODE_START_A; startCode <= CODE_START_C; startCode++) {\n    int variance=patternMatchVariance(counters,CODE_PATTERNS[startCode],MAX_INDIVIDUAL_VARIANCE);\n    if (variance < bestVariance) {\n      bestVariance=variance;\n      bestMatch=startCode;\n    }\n  }\n  if (bestMatch >= 0) {\n    if (row.isRange(Math.max(0,patternStart - (i - patternStart) / 2),patternStart,false)) {\n      return new int[]{patternStart,i,bestMatch};\n    }\n  }\n  patternStart+=counters[0] + counters[1];\n  System.arraycopy(counters,2,counters,0,patternLength - 2);\n  counters[patternLength - 2]=0;\n  counters[patternLength - 1]=0;\n  counterPosition--;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1128,
        "startLineNumber" : 183,
        "startColumnNumber" : 8,
        "endLineNumber" : 208,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (counterPosition == patternLength - 1) {\n  int bestVariance=MAX_AVG_VARIANCE;\n  int bestMatch=-1;\n  for (int startCode=CODE_START_A; startCode <= CODE_START_C; startCode++) {\n    int variance=patternMatchVariance(counters,CODE_PATTERNS[startCode],MAX_INDIVIDUAL_VARIANCE);\n    if (variance < bestVariance) {\n      bestVariance=variance;\n      bestMatch=startCode;\n    }\n  }\n  if (bestMatch >= 0) {\n    if (row.isRange(Math.max(0,patternStart - (i - patternStart) / 2),patternStart,false)) {\n      return new int[]{patternStart,i,bestMatch};\n    }\n  }\n  patternStart+=counters[0] + counters[1];\n  System.arraycopy(counters,2,counters,0,patternLength - 2);\n  counters[patternLength - 2]=0;\n  counters[patternLength - 1]=0;\n  counterPosition--;\n}\n else {\n  counterPosition++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1217,
        "startLineNumber" : 182,
        "startColumnNumber" : 13,
        "endLineNumber" : 211,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (counterPosition == patternLength - 1) {\n    int bestVariance=MAX_AVG_VARIANCE;\n    int bestMatch=-1;\n    for (int startCode=CODE_START_A; startCode <= CODE_START_C; startCode++) {\n      int variance=patternMatchVariance(counters,CODE_PATTERNS[startCode],MAX_INDIVIDUAL_VARIANCE);\n      if (variance < bestVariance) {\n        bestVariance=variance;\n        bestMatch=startCode;\n      }\n    }\n    if (bestMatch >= 0) {\n      if (row.isRange(Math.max(0,patternStart - (i - patternStart) / 2),patternStart,false)) {\n        return new int[]{patternStart,i,bestMatch};\n      }\n    }\n    patternStart+=counters[0] + counters[1];\n    System.arraycopy(counters,2,counters,0,patternLength - 2);\n    counters[patternLength - 2]=0;\n    counters[patternLength - 1]=0;\n    counterPosition--;\n  }\n else {\n    counterPosition++;\n  }\n  counters[counterPosition]=1;\n  isWhite=!isWhite;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 143,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1297,
        "startLineNumber" : 180,
        "startColumnNumber" : 6,
        "endLineNumber" : 211,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (row.get(i) ^ isWhite) {\n  counters[counterPosition]++;\n}\n else {\n  if (counterPosition == patternLength - 1) {\n    int bestVariance=MAX_AVG_VARIANCE;\n    int bestMatch=-1;\n    for (int startCode=CODE_START_A; startCode <= CODE_START_C; startCode++) {\n      int variance=patternMatchVariance(counters,CODE_PATTERNS[startCode],MAX_INDIVIDUAL_VARIANCE);\n      if (variance < bestVariance) {\n        bestVariance=variance;\n        bestMatch=startCode;\n      }\n    }\n    if (bestMatch >= 0) {\n      if (row.isRange(Math.max(0,patternStart - (i - patternStart) / 2),patternStart,false)) {\n        return new int[]{patternStart,i,bestMatch};\n      }\n    }\n    patternStart+=counters[0] + counters[1];\n    System.arraycopy(counters,2,counters,0,patternLength - 2);\n    counters[patternLength - 2]=0;\n    counters[patternLength - 1]=0;\n    counterPosition--;\n  }\n else {\n    counterPosition++;\n  }\n  counters[counterPosition]=1;\n  isWhite=!isWhite;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 156,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1313,
        "startLineNumber" : 179,
        "startColumnNumber" : 44,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (row.get(i) ^ isWhite) {\n    counters[counterPosition]++;\n  }\n else {\n    if (counterPosition == patternLength - 1) {\n      int bestVariance=MAX_AVG_VARIANCE;\n      int bestMatch=-1;\n      for (int startCode=CODE_START_A; startCode <= CODE_START_C; startCode++) {\n        int variance=patternMatchVariance(counters,CODE_PATTERNS[startCode],MAX_INDIVIDUAL_VARIANCE);\n        if (variance < bestVariance) {\n          bestVariance=variance;\n          bestMatch=startCode;\n        }\n      }\n      if (bestMatch >= 0) {\n        if (row.isRange(Math.max(0,patternStart - (i - patternStart) / 2),patternStart,false)) {\n          return new int[]{patternStart,i,bestMatch};\n        }\n      }\n      patternStart+=counters[0] + counters[1];\n      System.arraycopy(counters,2,counters,0,patternLength - 2);\n      counters[patternLength - 2]=0;\n      counters[patternLength - 1]=0;\n      counterPosition--;\n    }\n else {\n      counterPosition++;\n    }\n    counters[counterPosition]=1;\n    isWhite=!isWhite;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1353,
        "startLineNumber" : 179,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=rowOffset; i < width; i++) {\n  if (row.get(i) ^ isWhite) {\n    counters[counterPosition]++;\n  }\n else {\n    if (counterPosition == patternLength - 1) {\n      int bestVariance=MAX_AVG_VARIANCE;\n      int bestMatch=-1;\n      for (int startCode=CODE_START_A; startCode <= CODE_START_C; startCode++) {\n        int variance=patternMatchVariance(counters,CODE_PATTERNS[startCode],MAX_INDIVIDUAL_VARIANCE);\n        if (variance < bestVariance) {\n          bestVariance=variance;\n          bestMatch=startCode;\n        }\n      }\n      if (bestMatch >= 0) {\n        if (row.isRange(Math.max(0,patternStart - (i - patternStart) / 2),patternStart,false)) {\n          return new int[]{patternStart,i,bestMatch};\n        }\n      }\n      patternStart+=counters[0] + counters[1];\n      System.arraycopy(counters,2,counters,0,patternLength - 2);\n      counters[patternLength - 2]=0;\n      counters[patternLength - 1]=0;\n      counterPosition--;\n    }\n else {\n      counterPosition++;\n    }\n    counters[counterPosition]=1;\n    isWhite=!isWhite;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 168,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1664,
        "startLineNumber" : 169,
        "startColumnNumber" : 79,
        "endLineNumber" : 214,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int width=row.getSize();\n  int rowOffset=row.getNextSet(0);\n  int counterPosition=0;\n  int[] counters=new int[6];\n  int patternStart=rowOffset;\n  boolean isWhite=false;\n  int patternLength=counters.length;\n  for (int i=rowOffset; i < width; i++) {\n    if (row.get(i) ^ isWhite) {\n      counters[counterPosition]++;\n    }\n else {\n      if (counterPosition == patternLength - 1) {\n        int bestVariance=MAX_AVG_VARIANCE;\n        int bestMatch=-1;\n        for (int startCode=CODE_START_A; startCode <= CODE_START_C; startCode++) {\n          int variance=patternMatchVariance(counters,CODE_PATTERNS[startCode],MAX_INDIVIDUAL_VARIANCE);\n          if (variance < bestVariance) {\n            bestVariance=variance;\n            bestMatch=startCode;\n          }\n        }\n        if (bestMatch >= 0) {\n          if (row.isRange(Math.max(0,patternStart - (i - patternStart) / 2),patternStart,false)) {\n            return new int[]{patternStart,i,bestMatch};\n          }\n        }\n        patternStart+=counters[0] + counters[1];\n        System.arraycopy(counters,2,counters,0,patternLength - 2);\n        counters[patternLength - 2]=0;\n        counters[patternLength - 1]=0;\n        counterPosition--;\n      }\n else {\n        counterPosition++;\n      }\n      counters[counterPosition]=1;\n      isWhite=!isWhite;\n    }\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 221,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1741,
        "startLineNumber" : 169,
        "startColumnNumber" : 2,
        "endLineNumber" : 214,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static int[] findStartPattern(BitArray row) throws NotFoundException {\n  int width=row.getSize();\n  int rowOffset=row.getNextSet(0);\n  int counterPosition=0;\n  int[] counters=new int[6];\n  int patternStart=rowOffset;\n  boolean isWhite=false;\n  int patternLength=counters.length;\n  for (int i=rowOffset; i < width; i++) {\n    if (row.get(i) ^ isWhite) {\n      counters[counterPosition]++;\n    }\n else {\n      if (counterPosition == patternLength - 1) {\n        int bestVariance=MAX_AVG_VARIANCE;\n        int bestMatch=-1;\n        for (int startCode=CODE_START_A; startCode <= CODE_START_C; startCode++) {\n          int variance=patternMatchVariance(counters,CODE_PATTERNS[startCode],MAX_INDIVIDUAL_VARIANCE);\n          if (variance < bestVariance) {\n            bestVariance=variance;\n            bestMatch=startCode;\n          }\n        }\n        if (bestMatch >= 0) {\n          if (row.isRange(Math.max(0,patternStart - (i - patternStart) / 2),patternStart,false)) {\n            return new int[]{patternStart,i,bestMatch};\n          }\n        }\n        patternStart+=counters[0] + counters[1];\n        System.arraycopy(counters,2,counters,0,patternLength - 2);\n        counters[patternLength - 2]=0;\n        counters[patternLength - 1]=0;\n        counterPosition--;\n      }\n else {\n        counterPosition++;\n      }\n      counters[counterPosition]=1;\n      isWhite=!isWhite;\n    }\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 234,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 196,
        "startColumnNumber" : 16,
        "endLineNumber" : 197,
        "endColumnNumber" : 22
      },
      "nodeContext" : "row.isRange(Math.max(0,patternStart - (i - patternStart) / 2),patternStart,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 176,
    "startColumnNumber" : 22,
    "endLineNumber" : 176,
    "endColumnNumber" : 27
  }, {
    "charLength" : 5,
    "startLineNumber" : 197,
    "startColumnNumber" : 16,
    "endLineNumber" : 197,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 10
  } ]
}