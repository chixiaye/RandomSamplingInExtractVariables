{
  "id" : 407,
  "expression" : "0D",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-web/src/test/java/org/springframework/http/converter/json/JsonbHttpMessageConverterTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0D",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 97,
      "startColumnNumber" : 37,
      "endLineNumber" : 97,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 97,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(42D,n.doubleValue(),0D)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 97,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertEquals(42D,n.doubleValue(),0D);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1037,
        "startLineNumber" : 87,
        "startColumnNumber" : 46,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String body=\"{\\\"bytes\\\":[1,2],\\\"array\\\":[\\\"Foo\\\",\\\"Bar\\\"],\" + \"\\\"number\\\":42,\\\"string\\\":\\\"Foo\\\",\\\"bool\\\":true,\\\"fraction\\\":42.0}\";\n  MockHttpInputMessage inputMessage=new MockHttpInputMessage(body.getBytes(\"UTF-8\"));\n  inputMessage.getHeaders().setContentType(new MediaType(\"application\",\"json\"));\n  HashMap<String,Object> result=(HashMap<String,Object>)this.converter.read(HashMap.class,inputMessage);\n  assertEquals(\"Foo\",result.get(\"string\"));\n  Number n=(Number)result.get(\"number\");\n  assertEquals(42,n.longValue());\n  n=(Number)result.get(\"fraction\");\n  assertEquals(42D,n.doubleValue(),0D);\n  List<String> array=new ArrayList<>();\n  array.add(\"Foo\");\n  array.add(\"Bar\");\n  assertEquals(array,result.get(\"array\"));\n  assertEquals(Boolean.TRUE,result.get(\"bool\"));\n  byte[] bytes=new byte[2];\n  List<Number> resultBytes=(ArrayList<Number>)result.get(\"bytes\");\n  for (int i=0; i < 2; i++) {\n    bytes[i]=resultBytes.get(i).byteValue();\n  }\n  assertArrayEquals(new byte[]{0x1,0x2},bytes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 207,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1121,
        "startLineNumber" : 85,
        "startColumnNumber" : 1,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test @SuppressWarnings(\"unchecked\") public void readUntyped() throws IOException {\n  String body=\"{\\\"bytes\\\":[1,2],\\\"array\\\":[\\\"Foo\\\",\\\"Bar\\\"],\" + \"\\\"number\\\":42,\\\"string\\\":\\\"Foo\\\",\\\"bool\\\":true,\\\"fraction\\\":42.0}\";\n  MockHttpInputMessage inputMessage=new MockHttpInputMessage(body.getBytes(\"UTF-8\"));\n  inputMessage.getHeaders().setContentType(new MediaType(\"application\",\"json\"));\n  HashMap<String,Object> result=(HashMap<String,Object>)this.converter.read(HashMap.class,inputMessage);\n  assertEquals(\"Foo\",result.get(\"string\"));\n  Number n=(Number)result.get(\"number\");\n  assertEquals(42,n.longValue());\n  n=(Number)result.get(\"fraction\");\n  assertEquals(42D,n.doubleValue(),0D);\n  List<String> array=new ArrayList<>();\n  array.add(\"Foo\");\n  array.add(\"Bar\");\n  assertEquals(array,result.get(\"array\"));\n  assertEquals(Boolean.TRUE,result.get(\"bool\"));\n  byte[] bytes=new byte[2];\n  List<Number> resultBytes=(ArrayList<Number>)result.get(\"bytes\");\n  for (int i=0; i < 2; i++) {\n    bytes[i]=resultBytes.get(i).byteValue();\n  }\n  assertArrayEquals(new byte[]{0x1,0x2},bytes);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 218,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 97,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertEquals(42D,n.doubleValue(),0D);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 97,
    "startColumnNumber" : 37,
    "endLineNumber" : 97,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}