{
  "id" : 209,
  "expression" : "commonName",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/build/android/ziputils/ZipInTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "commonName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 275,
      "startColumnNumber" : 22,
      "endLineNumber" : 275,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.FieldAccess,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 275,
        "startColumnNumber" : 22,
        "endLineNumber" : 275,
        "endColumnNumber" : 48
      },
      "nodeContext" : "commonName.getBytes(UTF_8)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 275,
        "startColumnNumber" : 22,
        "endLineNumber" : 275,
        "endColumnNumber" : 55
      },
      "nodeContext" : "commonName.getBytes(UTF_8).length",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 275,
        "startColumnNumber" : 8,
        "endLineNumber" : 275,
        "endColumnNumber" : 55
      },
      "nodeContext" : "filenameLen=commonName.getBytes(UTF_8).length",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 275,
        "startColumnNumber" : 4,
        "endLineNumber" : 275,
        "endColumnNumber" : 56
      },
      "nodeContext" : "int filenameLen=commonName.getBytes(UTF_8).length;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2003,
        "startLineNumber" : 267,
        "startColumnNumber" : 54,
        "endLineNumber" : 318,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filename=\"test.zip\";\n  ByteBuffer buffer;\n  int offset;\n  ZipIn zipIn;\n  String subcase;\n  subcase=\" EOCD extra data, \";\n  String commonName=\"thisIsNotNormal.txt\";\n  int filenameLen=commonName.getBytes(UTF_8).length;\n  int count=ENTRY_COUNT;\n  int dirEntry=ZipInputStream.CENHDR;\n  int before=count;\n  int between=0;\n  int after=20;\n  int eocd=ZipInputStream.ENDHDR;\n  int total=before + (count * (dirEntry + filenameLen)) + ((count - 1) * between)+ after+ eocd;\n  byte[] bytes=new byte[total];\n  offset=before;\n  for (int i=0; i < count; i++) {\n    if (i > 0) {\n      offset+=between;\n    }\n    buffer=ByteBuffer.wrap(bytes,offset,bytes.length - offset);\n    DirectoryEntry.view(buffer,commonName,null,null).set(CENHOW,(short)8).set(CENSIZ,before).set(CENLEN,2 * before).set(CENOFF,i);\n    offset+=dirEntry + filenameLen;\n  }\n  offset+=after;\n  buffer=ByteBuffer.wrap(bytes,offset,bytes.length - offset);\n  EndOfCentralDirectory.view(buffer,null).set(ENDOFF,before).set(ENDSIZ,offset - before - after).set(ENDTOT,(short)count).set(ENDSUB,(short)count);\n  fileSystem.addFile(filename,bytes);\n  zipIn=newZipIn(filename);\n  CentralDirectory result=zipIn.centralDirectory();\n  assertWithMessage(subcase + \"found\").that(result).isNotNull();\n  List<DirectoryEntry> list=result.list();\n  assertWithMessage(subcase + \"size\").that(list.size()).isEqualTo(count);\n  for (int i=0; i < list.size(); i++) {\n    assertWithMessage(subcase + \"offset check[\" + i+ \"]\").that(list.get(i).get(CENOFF)).isEqualTo(i);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 321,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2129,
        "startLineNumber" : 263,
        "startColumnNumber" : 2,
        "endLineNumber" : 318,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Test of centralDirectory method, of class ZipIn.\n */\n@Test public void testCentralDirectory() throws Exception {\n  String filename=\"test.zip\";\n  ByteBuffer buffer;\n  int offset;\n  ZipIn zipIn;\n  String subcase;\n  subcase=\" EOCD extra data, \";\n  String commonName=\"thisIsNotNormal.txt\";\n  int filenameLen=commonName.getBytes(UTF_8).length;\n  int count=ENTRY_COUNT;\n  int dirEntry=ZipInputStream.CENHDR;\n  int before=count;\n  int between=0;\n  int after=20;\n  int eocd=ZipInputStream.ENDHDR;\n  int total=before + (count * (dirEntry + filenameLen)) + ((count - 1) * between)+ after+ eocd;\n  byte[] bytes=new byte[total];\n  offset=before;\n  for (int i=0; i < count; i++) {\n    if (i > 0) {\n      offset+=between;\n    }\n    buffer=ByteBuffer.wrap(bytes,offset,bytes.length - offset);\n    DirectoryEntry.view(buffer,commonName,null,null).set(CENHOW,(short)8).set(CENSIZ,before).set(CENLEN,2 * before).set(CENOFF,i);\n    offset+=dirEntry + filenameLen;\n  }\n  offset+=after;\n  buffer=ByteBuffer.wrap(bytes,offset,bytes.length - offset);\n  EndOfCentralDirectory.view(buffer,null).set(ENDOFF,before).set(ENDSIZ,offset - before - after).set(ENDTOT,(short)count).set(ENDSUB,(short)count);\n  fileSystem.addFile(filename,bytes);\n  zipIn=newZipIn(filename);\n  CentralDirectory result=zipIn.centralDirectory();\n  assertWithMessage(subcase + \"found\").that(result).isNotNull();\n  List<DirectoryEntry> list=result.list();\n  assertWithMessage(subcase + \"size\").that(list.size()).isEqualTo(count);\n  for (int i=0; i < list.size(); i++) {\n    assertWithMessage(subcase + \"offset check[\" + i+ \"]\").that(list.get(i).get(CENOFF)).isEqualTo(i);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 330,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 275,
        "startColumnNumber" : 4,
        "endLineNumber" : 275,
        "endColumnNumber" : 56
      },
      "nodeContext" : "int filenameLen=commonName.getBytes(UTF_8).length;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "commonName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 291,
      "startColumnNumber" : 34,
      "endLineNumber" : 291,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 291,
        "endColumnNumber" : 57
      },
      "nodeContext" : "DirectoryEntry.view(buffer,commonName,null,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 292,
        "endColumnNumber" : 33
      },
      "nodeContext" : "DirectoryEntry.view(buffer,commonName,null,null).set(CENHOW,(short)8)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 293,
        "endColumnNumber" : 30
      },
      "nodeContext" : "DirectoryEntry.view(buffer,commonName,null,null).set(CENHOW,(short)8).set(CENSIZ,before)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 294,
        "endColumnNumber" : 34
      },
      "nodeContext" : "DirectoryEntry.view(buffer,commonName,null,null).set(CENHOW,(short)8).set(CENSIZ,before).set(CENLEN,2 * before)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 295,
        "endColumnNumber" : 25
      },
      "nodeContext" : "DirectoryEntry.view(buffer,commonName,null,null).set(CENHOW,(short)8).set(CENSIZ,before).set(CENLEN,2 * before).set(CENOFF,i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 295,
        "endColumnNumber" : 26
      },
      "nodeContext" : "DirectoryEntry.view(buffer,commonName,null,null).set(CENHOW,(short)8).set(CENSIZ,before).set(CENLEN,2 * before).set(CENOFF,i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 515,
        "startLineNumber" : 286,
        "startColumnNumber" : 36,
        "endLineNumber" : 298,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (i > 0) {\n    offset+=between;\n  }\n  buffer=ByteBuffer.wrap(bytes,offset,bytes.length - offset);\n  DirectoryEntry.view(buffer,commonName,null,null).set(CENHOW,(short)8).set(CENSIZ,before).set(CENLEN,2 * before).set(CENOFF,i);\n  offset+=dirEntry + filenameLen;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 547,
        "startLineNumber" : 286,
        "startColumnNumber" : 4,
        "endLineNumber" : 298,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < count; i++) {\n  if (i > 0) {\n    offset+=between;\n  }\n  buffer=ByteBuffer.wrap(bytes,offset,bytes.length - offset);\n  DirectoryEntry.view(buffer,commonName,null,null).set(CENHOW,(short)8).set(CENSIZ,before).set(CENLEN,2 * before).set(CENOFF,i);\n  offset+=dirEntry + filenameLen;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 68,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2003,
        "startLineNumber" : 267,
        "startColumnNumber" : 54,
        "endLineNumber" : 318,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filename=\"test.zip\";\n  ByteBuffer buffer;\n  int offset;\n  ZipIn zipIn;\n  String subcase;\n  subcase=\" EOCD extra data, \";\n  String commonName=\"thisIsNotNormal.txt\";\n  int filenameLen=commonName.getBytes(UTF_8).length;\n  int count=ENTRY_COUNT;\n  int dirEntry=ZipInputStream.CENHDR;\n  int before=count;\n  int between=0;\n  int after=20;\n  int eocd=ZipInputStream.ENDHDR;\n  int total=before + (count * (dirEntry + filenameLen)) + ((count - 1) * between)+ after+ eocd;\n  byte[] bytes=new byte[total];\n  offset=before;\n  for (int i=0; i < count; i++) {\n    if (i > 0) {\n      offset+=between;\n    }\n    buffer=ByteBuffer.wrap(bytes,offset,bytes.length - offset);\n    DirectoryEntry.view(buffer,commonName,null,null).set(CENHOW,(short)8).set(CENSIZ,before).set(CENLEN,2 * before).set(CENOFF,i);\n    offset+=dirEntry + filenameLen;\n  }\n  offset+=after;\n  buffer=ByteBuffer.wrap(bytes,offset,bytes.length - offset);\n  EndOfCentralDirectory.view(buffer,null).set(ENDOFF,before).set(ENDSIZ,offset - before - after).set(ENDTOT,(short)count).set(ENDSUB,(short)count);\n  fileSystem.addFile(filename,bytes);\n  zipIn=newZipIn(filename);\n  CentralDirectory result=zipIn.centralDirectory();\n  assertWithMessage(subcase + \"found\").that(result).isNotNull();\n  List<DirectoryEntry> list=result.list();\n  assertWithMessage(subcase + \"size\").that(list.size()).isEqualTo(count);\n  for (int i=0; i < list.size(); i++) {\n    assertWithMessage(subcase + \"offset check[\" + i+ \"]\").that(list.get(i).get(CENOFF)).isEqualTo(i);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 321,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2129,
        "startLineNumber" : 263,
        "startColumnNumber" : 2,
        "endLineNumber" : 318,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Test of centralDirectory method, of class ZipIn.\n */\n@Test public void testCentralDirectory() throws Exception {\n  String filename=\"test.zip\";\n  ByteBuffer buffer;\n  int offset;\n  ZipIn zipIn;\n  String subcase;\n  subcase=\" EOCD extra data, \";\n  String commonName=\"thisIsNotNormal.txt\";\n  int filenameLen=commonName.getBytes(UTF_8).length;\n  int count=ENTRY_COUNT;\n  int dirEntry=ZipInputStream.CENHDR;\n  int before=count;\n  int between=0;\n  int after=20;\n  int eocd=ZipInputStream.ENDHDR;\n  int total=before + (count * (dirEntry + filenameLen)) + ((count - 1) * between)+ after+ eocd;\n  byte[] bytes=new byte[total];\n  offset=before;\n  for (int i=0; i < count; i++) {\n    if (i > 0) {\n      offset+=between;\n    }\n    buffer=ByteBuffer.wrap(bytes,offset,bytes.length - offset);\n    DirectoryEntry.view(buffer,commonName,null,null).set(CENHOW,(short)8).set(CENSIZ,before).set(CENLEN,2 * before).set(CENOFF,i);\n    offset+=dirEntry + filenameLen;\n  }\n  offset+=after;\n  buffer=ByteBuffer.wrap(bytes,offset,bytes.length - offset);\n  EndOfCentralDirectory.view(buffer,null).set(ENDOFF,before).set(ENDSIZ,offset - before - after).set(ENDTOT,(short)count).set(ENDSUB,(short)count);\n  fileSystem.addFile(filename,bytes);\n  zipIn=newZipIn(filename);\n  CentralDirectory result=zipIn.centralDirectory();\n  assertWithMessage(subcase + \"found\").that(result).isNotNull();\n  List<DirectoryEntry> list=result.list();\n  assertWithMessage(subcase + \"size\").that(list.size()).isEqualTo(count);\n  for (int i=0; i < list.size(); i++) {\n    assertWithMessage(subcase + \"offset check[\" + i+ \"]\").that(list.get(i).get(CENOFF)).isEqualTo(i);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 330,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 291,
        "endColumnNumber" : 57
      },
      "nodeContext" : "DirectoryEntry.view(buffer,commonName,null,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 275,
    "startColumnNumber" : 22,
    "endLineNumber" : 275,
    "endColumnNumber" : 32
  }, {
    "charLength" : 10,
    "startLineNumber" : 291,
    "startColumnNumber" : 34,
    "endLineNumber" : 291,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  } ]
}