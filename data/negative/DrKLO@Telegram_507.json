{
  "id" : 507,
  "expression" : "i < tags.size()",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/android/exoplayer2/text/subrip/SubripDecoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < tags.size()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 125,
      "startColumnNumber" : 22,
      "endLineNumber" : 125,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 125,
        "startColumnNumber" : 6,
        "endLineNumber" : 132,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < tags.size(); i++) {\n  String tag=tags.get(i);\n  if (tag.matches(SUBRIP_ALIGNMENT_TAG)) {\n    alignmentTag=tag;\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1671,
        "startLineNumber" : 80,
        "startColumnNumber" : 58,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (currentLine.length() == 0) {\n    continue;\n  }\n  try {\n    Integer.parseInt(currentLine);\n  }\n catch (  NumberFormatException e) {\n    Log.w(TAG,\"Skipping invalid index: \" + currentLine);\n    continue;\n  }\n  currentLine=subripData.readLine();\n  if (currentLine == null) {\n    Log.w(TAG,\"Unexpected end\");\n    break;\n  }\n  Matcher matcher=SUBRIP_TIMING_LINE.matcher(currentLine);\n  if (matcher.matches()) {\n    cueTimesUs.add(parseTimecode(matcher,1));\n    cueTimesUs.add(parseTimecode(matcher,6));\n  }\n else {\n    Log.w(TAG,\"Skipping invalid timing: \" + currentLine);\n    continue;\n  }\n  textBuilder.setLength(0);\n  tags.clear();\n  currentLine=subripData.readLine();\n  while (!TextUtils.isEmpty(currentLine)) {\n    if (textBuilder.length() > 0) {\n      textBuilder.append(\"<br>\");\n    }\n    textBuilder.append(processLine(currentLine,tags));\n    currentLine=subripData.readLine();\n  }\n  Spanned text=Html.fromHtml(textBuilder.toString());\n  @Nullable String alignmentTag=null;\n  for (int i=0; i < tags.size(); i++) {\n    String tag=tags.get(i);\n    if (tag.matches(SUBRIP_ALIGNMENT_TAG)) {\n      alignmentTag=tag;\n      break;\n    }\n  }\n  cues.add(buildCue(text,alignmentTag));\n  cues.add(Cue.EMPTY);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1725,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while ((currentLine=subripData.readLine()) != null) {\n  if (currentLine.length() == 0) {\n    continue;\n  }\n  try {\n    Integer.parseInt(currentLine);\n  }\n catch (  NumberFormatException e) {\n    Log.w(TAG,\"Skipping invalid index: \" + currentLine);\n    continue;\n  }\n  currentLine=subripData.readLine();\n  if (currentLine == null) {\n    Log.w(TAG,\"Unexpected end\");\n    break;\n  }\n  Matcher matcher=SUBRIP_TIMING_LINE.matcher(currentLine);\n  if (matcher.matches()) {\n    cueTimesUs.add(parseTimecode(matcher,1));\n    cueTimesUs.add(parseTimecode(matcher,6));\n  }\n else {\n    Log.w(TAG,\"Skipping invalid timing: \" + currentLine);\n    continue;\n  }\n  textBuilder.setLength(0);\n  tags.clear();\n  currentLine=subripData.readLine();\n  while (!TextUtils.isEmpty(currentLine)) {\n    if (textBuilder.length() > 0) {\n      textBuilder.append(\"<br>\");\n    }\n    textBuilder.append(processLine(currentLine,tags));\n    currentLine=subripData.readLine();\n  }\n  Spanned text=Html.fromHtml(textBuilder.toString());\n  @Nullable String alignmentTag=null;\n  for (int i=0; i < tags.size(); i++) {\n    String tag=tags.get(i);\n    if (tag.matches(SUBRIP_ALIGNMENT_TAG)) {\n      alignmentTag=tag;\n      break;\n    }\n  }\n  cues.add(buildCue(text,alignmentTag));\n  cues.add(Cue.EMPTY);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 214,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2116,
        "startLineNumber" : 74,
        "startColumnNumber" : 69,
        "endLineNumber" : 141,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ArrayList<Cue> cues=new ArrayList<>();\n  LongArray cueTimesUs=new LongArray();\n  ParsableByteArray subripData=new ParsableByteArray(bytes,length);\n  @Nullable String currentLine;\n  while ((currentLine=subripData.readLine()) != null) {\n    if (currentLine.length() == 0) {\n      continue;\n    }\n    try {\n      Integer.parseInt(currentLine);\n    }\n catch (    NumberFormatException e) {\n      Log.w(TAG,\"Skipping invalid index: \" + currentLine);\n      continue;\n    }\n    currentLine=subripData.readLine();\n    if (currentLine == null) {\n      Log.w(TAG,\"Unexpected end\");\n      break;\n    }\n    Matcher matcher=SUBRIP_TIMING_LINE.matcher(currentLine);\n    if (matcher.matches()) {\n      cueTimesUs.add(parseTimecode(matcher,1));\n      cueTimesUs.add(parseTimecode(matcher,6));\n    }\n else {\n      Log.w(TAG,\"Skipping invalid timing: \" + currentLine);\n      continue;\n    }\n    textBuilder.setLength(0);\n    tags.clear();\n    currentLine=subripData.readLine();\n    while (!TextUtils.isEmpty(currentLine)) {\n      if (textBuilder.length() > 0) {\n        textBuilder.append(\"<br>\");\n      }\n      textBuilder.append(processLine(currentLine,tags));\n      currentLine=subripData.readLine();\n    }\n    Spanned text=Html.fromHtml(textBuilder.toString());\n    @Nullable String alignmentTag=null;\n    for (int i=0; i < tags.size(); i++) {\n      String tag=tags.get(i);\n      if (tag.matches(SUBRIP_ALIGNMENT_TAG)) {\n        alignmentTag=tag;\n        break;\n      }\n    }\n    cues.add(buildCue(text,alignmentTag));\n    cues.add(Cue.EMPTY);\n  }\n  Cue[] cuesArray=new Cue[cues.size()];\n  cues.toArray(cuesArray);\n  long[] cueTimesUsArray=cueTimesUs.toArray();\n  return new SubripSubtitle(cuesArray,cueTimesUsArray);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2195,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override protected Subtitle decode(byte[] bytes,int length,boolean reset){\n  ArrayList<Cue> cues=new ArrayList<>();\n  LongArray cueTimesUs=new LongArray();\n  ParsableByteArray subripData=new ParsableByteArray(bytes,length);\n  @Nullable String currentLine;\n  while ((currentLine=subripData.readLine()) != null) {\n    if (currentLine.length() == 0) {\n      continue;\n    }\n    try {\n      Integer.parseInt(currentLine);\n    }\n catch (    NumberFormatException e) {\n      Log.w(TAG,\"Skipping invalid index: \" + currentLine);\n      continue;\n    }\n    currentLine=subripData.readLine();\n    if (currentLine == null) {\n      Log.w(TAG,\"Unexpected end\");\n      break;\n    }\n    Matcher matcher=SUBRIP_TIMING_LINE.matcher(currentLine);\n    if (matcher.matches()) {\n      cueTimesUs.add(parseTimecode(matcher,1));\n      cueTimesUs.add(parseTimecode(matcher,6));\n    }\n else {\n      Log.w(TAG,\"Skipping invalid timing: \" + currentLine);\n      continue;\n    }\n    textBuilder.setLength(0);\n    tags.clear();\n    currentLine=subripData.readLine();\n    while (!TextUtils.isEmpty(currentLine)) {\n      if (textBuilder.length() > 0) {\n        textBuilder.append(\"<br>\");\n      }\n      textBuilder.append(processLine(currentLine,tags));\n      currentLine=subripData.readLine();\n    }\n    Spanned text=Html.fromHtml(textBuilder.toString());\n    @Nullable String alignmentTag=null;\n    for (int i=0; i < tags.size(); i++) {\n      String tag=tags.get(i);\n      if (tag.matches(SUBRIP_ALIGNMENT_TAG)) {\n        alignmentTag=tag;\n        break;\n      }\n    }\n    cues.add(buildCue(text,alignmentTag));\n    cues.add(Cue.EMPTY);\n  }\n  Cue[] cuesArray=new Cue[cues.size()];\n  cues.toArray(cuesArray);\n  long[] cueTimesUsArray=cueTimesUs.toArray();\n  return new SubripSubtitle(cuesArray,cueTimesUsArray);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 305,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 125,
        "startColumnNumber" : 6,
        "endLineNumber" : 132,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < tags.size(); i++) {\n  String tag=tags.get(i);\n  if (tag.matches(SUBRIP_ALIGNMENT_TAG)) {\n    alignmentTag=tag;\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 125,
    "startColumnNumber" : 22,
    "endLineNumber" : 125,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}