{
  "id" : 418,
  "expression" : "Drawable.class",
  "projectName" : "bumptech@glide",
  "commitID" : "7d9c28ec2763e973775abd5c3e3c971728a48a56",
  "filePath" : "/library/src/androidTest/java/com/bumptech/glide/request/target/ImageViewTargetTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Drawable.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 78,
      "startColumnNumber" : 34,
      "endLineNumber" : 78,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 78,
        "startColumnNumber" : 30,
        "endLineNumber" : 78,
        "endColumnNumber" : 49
      },
      "nodeContext" : "any(Drawable.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 78,
        "startColumnNumber" : 9,
        "endLineNumber" : 78,
        "endColumnNumber" : 62
      },
      "nodeContext" : "animation.transition(any(Drawable.class),eq(target))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 63
      },
      "nodeContext" : "when(animation.transition(any(Drawable.class),eq(target)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 81
      },
      "nodeContext" : "when(animation.transition(any(Drawable.class),eq(target))).thenReturn(false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 82
      },
      "nodeContext" : "when(animation.transition(any(Drawable.class),eq(target))).thenReturn(false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 299,
        "startLineNumber" : 76,
        "startColumnNumber" : 81,
        "endLineNumber" : 83,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Transition<Drawable> animation=mock(Transition.class);\n  when(animation.transition(any(Drawable.class),eq(target))).thenReturn(false);\n  Drawable resource=new ColorDrawable(Color.GRAY);\n  target.onResourceReady(resource,animation);\n  assertEquals(resource,target.resource);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 83,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSetsDrawableOnViewInOnResourceReadyWhenAnimationReturnsFalse(){\n  Transition<Drawable> animation=mock(Transition.class);\n  when(animation.transition(any(Drawable.class),eq(target))).thenReturn(false);\n  Drawable resource=new ColorDrawable(Color.GRAY);\n  target.onResourceReady(resource,animation);\n  assertEquals(resource,target.resource);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 61,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 82
      },
      "nodeContext" : "when(animation.transition(any(Drawable.class),eq(target))).thenReturn(false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<com.bumptech.glide.request.target.Drawable>"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 78,
    "startColumnNumber" : 34,
    "endLineNumber" : 78,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}