{
  "id" : 236,
  "expression" : "\"Our error should have been delivered to the handler\"",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/schedulers/SchedulerTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Our error should have been delivered to the handler\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 53,
      "startLineNumber" : 56,
      "startColumnNumber" : 25,
      "endLineNumber" : 56,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 56,
        "endColumnNumber" : 93
      },
      "nodeContext" : "assertEquals(\"Our error should have been delivered to the handler\",error,cause)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 56,
        "endColumnNumber" : 94
      },
      "nodeContext" : "assertEquals(\"Our error should have been delivered to the handler\",error,cause);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 946,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  CapturingUncaughtExceptionHandler handler=new CapturingUncaughtExceptionHandler();\n  Thread.setDefaultUncaughtExceptionHandler(handler);\n  IllegalStateException error=new IllegalStateException(\"Should be delivered to handler\");\n  Flowable.error(error).subscribeOn(scheduler).subscribe();\n  if (!handler.completed.await(3,TimeUnit.SECONDS)) {\n    fail(\"timed out\");\n  }\n  assertEquals(\"Should have received exactly 1 exception\",1,handler.count);\n  Throwable cause=handler.caught;\n  while (cause != null) {\n    if (error.equals(cause))     break;\n    if (cause == cause.getCause())     break;\n    cause=cause.getCause();\n  }\n  assertEquals(\"Our error should have been delivered to the handler\",error,cause);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1044,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  CapturingUncaughtExceptionHandler handler=new CapturingUncaughtExceptionHandler();\n  Thread.setDefaultUncaughtExceptionHandler(handler);\n  IllegalStateException error=new IllegalStateException(\"Should be delivered to handler\");\n  Flowable.error(error).subscribeOn(scheduler).subscribe();\n  if (!handler.completed.await(3,TimeUnit.SECONDS)) {\n    fail(\"timed out\");\n  }\n  assertEquals(\"Should have received exactly 1 exception\",1,handler.count);\n  Throwable cause=handler.caught;\n  while (cause != null) {\n    if (error.equals(cause))     break;\n    if (cause == cause.getCause())     break;\n    cause=cause.getCause();\n  }\n  assertEquals(\"Our error should have been delivered to the handler\",error,cause);\n}\n  finally {\n  Thread.setDefaultUncaughtExceptionHandler(originalHandler);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 102,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1166,
        "startLineNumber" : 35,
        "startColumnNumber" : 110,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Thread.UncaughtExceptionHandler originalHandler=Thread.getDefaultUncaughtExceptionHandler();\n  try {\n    CapturingUncaughtExceptionHandler handler=new CapturingUncaughtExceptionHandler();\n    Thread.setDefaultUncaughtExceptionHandler(handler);\n    IllegalStateException error=new IllegalStateException(\"Should be delivered to handler\");\n    Flowable.error(error).subscribeOn(scheduler).subscribe();\n    if (!handler.completed.await(3,TimeUnit.SECONDS)) {\n      fail(\"timed out\");\n    }\n    assertEquals(\"Should have received exactly 1 exception\",1,handler.count);\n    Throwable cause=handler.caught;\n    while (cause != null) {\n      if (error.equals(cause))       break;\n      if (cause == cause.getCause())       break;\n      cause=cause.getCause();\n    }\n    assertEquals(\"Our error should have been delivered to the handler\",error,cause);\n  }\n  finally {\n    Thread.setDefaultUncaughtExceptionHandler(originalHandler);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1631,
        "startLineNumber" : 28,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verifies that the given Scheduler delivers unhandled errors to its executing thread's {@link java.lang.Thread.UncaughtExceptionHandler}. <p> Schedulers which execute on a separate thread from their calling thread should exhibit this behavior. Schedulers which execute on their calling thread may not.\n */\nstatic void testUnhandledErrorIsDeliveredToThreadHandler(Scheduler scheduler) throws InterruptedException {\n  Thread.UncaughtExceptionHandler originalHandler=Thread.getDefaultUncaughtExceptionHandler();\n  try {\n    CapturingUncaughtExceptionHandler handler=new CapturingUncaughtExceptionHandler();\n    Thread.setDefaultUncaughtExceptionHandler(handler);\n    IllegalStateException error=new IllegalStateException(\"Should be delivered to handler\");\n    Flowable.error(error).subscribeOn(scheduler).subscribe();\n    if (!handler.completed.await(3,TimeUnit.SECONDS)) {\n      fail(\"timed out\");\n    }\n    assertEquals(\"Should have received exactly 1 exception\",1,handler.count);\n    Throwable cause=handler.caught;\n    while (cause != null) {\n      if (error.equals(cause))       break;\n      if (cause == cause.getCause())       break;\n      cause=cause.getCause();\n    }\n    assertEquals(\"Our error should have been delivered to the handler\",error,cause);\n  }\n  finally {\n    Thread.setDefaultUncaughtExceptionHandler(originalHandler);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 56,
        "endColumnNumber" : 94
      },
      "nodeContext" : "assertEquals(\"Our error should have been delivered to the handler\",error,cause);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 9,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 53,
    "startLineNumber" : 56,
    "startColumnNumber" : 25,
    "endLineNumber" : 56,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ ]
}