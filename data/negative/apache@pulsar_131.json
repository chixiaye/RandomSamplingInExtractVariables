{
  "id" : 131,
  "expression" : "10",
  "projectName" : "apache@pulsar",
  "commitID" : "403b57a8bc56e1715b08d974847c82242729bb34",
  "filePath" : "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "10",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 974,
      "startColumnNumber" : 28,
      "endLineNumber" : 974,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 974,
        "startColumnNumber" : 24,
        "endLineNumber" : 974,
        "endColumnNumber" : 30
      },
      "nodeContext" : "i < 10",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 974,
        "startColumnNumber" : 8,
        "endLineNumber" : 977,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 10; i++) {\n  String message=\"message-\" + i;\n  producer.send(message.getBytes());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9359,
        "startLineNumber" : 883,
        "startColumnNumber" : 87,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String namespace=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + namespace+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + namespace+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(namespace)),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 897,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9492,
        "startLineNumber" : 882,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"topicNamesForAllTypes\") public void partitionedTopics(String topicType,String topicName) throws Exception {\n  final String namespace=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + namespace+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + namespace+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(namespace)),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 916,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 974,
        "startColumnNumber" : 24,
        "endLineNumber" : 974,
        "endColumnNumber" : 30
      },
      "nodeContext" : "i < 10",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "10",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 989,
      "startColumnNumber" : 76,
      "endLineNumber" : 989,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 989,
        "startColumnNumber" : 12,
        "endLineNumber" : 989,
        "endColumnNumber" : 79
      },
      "nodeContext" : "assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 989,
        "startColumnNumber" : 12,
        "endLineNumber" : 989,
        "endColumnNumber" : 80
      },
      "nodeContext" : "assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 985,
        "startColumnNumber" : 26,
        "endLineNumber" : 990,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n  assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n  assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 383,
        "startLineNumber" : 985,
        "startColumnNumber" : 8,
        "endLineNumber" : 990,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isPersistent) {\n  assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n  assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n  assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9359,
        "startLineNumber" : 883,
        "startColumnNumber" : 87,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String namespace=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + namespace+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + namespace+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(namespace)),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 897,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9492,
        "startLineNumber" : 882,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"topicNamesForAllTypes\") public void partitionedTopics(String topicType,String topicName) throws Exception {\n  final String namespace=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + namespace+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + namespace+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(namespace)),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 916,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 989,
        "startColumnNumber" : 12,
        "endLineNumber" : 989,
        "endColumnNumber" : 80
      },
      "nodeContext" : "assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 974,
    "startColumnNumber" : 28,
    "endLineNumber" : 974,
    "endColumnNumber" : 30
  }, {
    "charLength" : 2,
    "startLineNumber" : 989,
    "startColumnNumber" : 76,
    "endLineNumber" : 989,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}