{
  "id" : 390,
  "expression" : "Math.min(entry.getValue().v,clip)",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/codegen/model/ElementFrequenciesVisitor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math.min(entry.getValue().v,clip)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 134,
      "startColumnNumber" : 24,
      "endLineNumber" : 134,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 134,
        "startColumnNumber" : 3,
        "endLineNumber" : 134,
        "endColumnNumber" : 58
      },
      "nodeContext" : "entry.getValue().v=Math.min(entry.getValue().v,clip)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 134,
        "startColumnNumber" : 3,
        "endLineNumber" : 134,
        "endColumnNumber" : 59
      },
      "nodeContext" : "entry.getValue().v=Math.min(entry.getValue().v,clip);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 133,
        "startColumnNumber" : 64,
        "endLineNumber" : 135,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  entry.getValue().v=Math.min(entry.getValue().v,clip);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 135,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Map.Entry<String,MutableInt> entry : result.entrySet()) {\n  entry.getValue().v=Math.min(entry.getValue().v,clip);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 537,
        "startLineNumber" : 119,
        "startColumnNumber" : 112,
        "endLineNumber" : 138,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  FrequencySet<String> result=new FrequencySet<String>();\n  for (  Map.Entry<String,MutableInt> entry : a.entrySet()) {\n    for (int i=0; i < entry.getValue().v; i++) {\n      result.add(entry.getKey());\n    }\n  }\n  for (  Map.Entry<String,MutableInt> entry : b.entrySet()) {\n    for (int i=0; i < entry.getValue().v; i++) {\n      result.add(entry.getKey());\n    }\n  }\n  for (  Map.Entry<String,MutableInt> entry : result.entrySet()) {\n    entry.getValue().v=Math.min(entry.getValue().v,clip);\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1166,
        "startLineNumber" : 107,
        "startColumnNumber" : 1,
        "endLineNumber" : 138,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Generate a frequency set as the union of two input sets, with the values clipped to a specified maximum value. If an element is contained in both sets, the value for the output, prior to clipping, will be the sum of the two input values.\n * @param a The first set.\n * @param b The second set.\n * @param clip The maximum value to allow for any output.\n * @return The sum of the two sets, with the individual elements clippedto the maximum value given by  {@code clip}.\n */\nprotected static FrequencySet<String> combineAndClip(FrequencySet<String> a,FrequencySet<String> b,int clip){\n  FrequencySet<String> result=new FrequencySet<String>();\n  for (  Map.Entry<String,MutableInt> entry : a.entrySet()) {\n    for (int i=0; i < entry.getValue().v; i++) {\n      result.add(entry.getKey());\n    }\n  }\n  for (  Map.Entry<String,MutableInt> entry : b.entrySet()) {\n    for (int i=0; i < entry.getValue().v; i++) {\n      result.add(entry.getKey());\n    }\n  }\n  for (  Map.Entry<String,MutableInt> entry : result.entrySet()) {\n    entry.getValue().v=Math.min(entry.getValue().v,clip);\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 134,
        "startColumnNumber" : 3,
        "endLineNumber" : 134,
        "endColumnNumber" : 59
      },
      "nodeContext" : "entry.getValue().v=Math.min(entry.getValue().v,clip);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 134,
    "startColumnNumber" : 24,
    "endLineNumber" : 134,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}