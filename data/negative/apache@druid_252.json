{
  "id" : 252,
  "expression" : "specs",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/test/java/org/apache/druid/metadata/SQLMetadataSupervisorManagerTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "specs",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 237,
      "startColumnNumber" : 27,
      "endLineNumber" : 237,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 237,
        "startColumnNumber" : 27,
        "endLineNumber" : 237,
        "endColumnNumber" : 39
      },
      "nodeContext" : "specs.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 237,
        "startColumnNumber" : 4,
        "endLineNumber" : 237,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assert.assertEquals(2,specs.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 237,
        "startColumnNumber" : 4,
        "endLineNumber" : 237,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Assert.assertEquals(2,specs.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1171,
        "startLineNumber" : 223,
        "startColumnNumber" : 2,
        "endLineNumber" : 244,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String supervisor1=\"test-supervisor-1\";\n  final String supervisor2=\"test-supervisor-2\";\n  final Map<String,String> data1rev1=ImmutableMap.of(\"key1-1\",\"value1-1-1\",\"key1-2\",\"value1-2-1\");\n  final Map<String,String> data1rev2=ImmutableMap.of(\"key1-1\",\"value1-1-2\",\"key1-2\",\"value1-2-2\");\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev1));\n  supervisorManager.insert(supervisor2,new BadSupervisorSpec(supervisor2,supervisor2));\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev2));\n  final Map<String,List<VersionedSupervisorSpec>> allSpecs=supervisorManager.getAll();\n  Assert.assertEquals(2,allSpecs.size());\n  List<VersionedSupervisorSpec> specs=allSpecs.get(supervisor1);\n  Assert.assertEquals(2,specs.size());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev2),specs.get(0).getSpec());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev1),specs.get(1).getSpec());\n  specs=allSpecs.get(supervisor2);\n  Assert.assertEquals(1,specs.size());\n  Assert.assertNull(specs.get(0).getSpec());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1225,
        "startLineNumber" : 221,
        "startColumnNumber" : 2,
        "endLineNumber" : 244,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSkipDeserializingBadSpecs(){\n  final String supervisor1=\"test-supervisor-1\";\n  final String supervisor2=\"test-supervisor-2\";\n  final Map<String,String> data1rev1=ImmutableMap.of(\"key1-1\",\"value1-1-1\",\"key1-2\",\"value1-2-1\");\n  final Map<String,String> data1rev2=ImmutableMap.of(\"key1-1\",\"value1-1-2\",\"key1-2\",\"value1-2-2\");\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev1));\n  supervisorManager.insert(supervisor2,new BadSupervisorSpec(supervisor2,supervisor2));\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev2));\n  final Map<String,List<VersionedSupervisorSpec>> allSpecs=supervisorManager.getAll();\n  Assert.assertEquals(2,allSpecs.size());\n  List<VersionedSupervisorSpec> specs=allSpecs.get(supervisor1);\n  Assert.assertEquals(2,specs.size());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev2),specs.get(0).getSpec());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev1),specs.get(1).getSpec());\n  specs=allSpecs.get(supervisor2);\n  Assert.assertEquals(1,specs.size());\n  Assert.assertNull(specs.get(0).getSpec());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 187,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 237,
        "startColumnNumber" : 4,
        "endLineNumber" : 237,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Assert.assertEquals(2,specs.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.indexing.overlord.supervisor.VersionedSupervisorSpec>"
  }, {
    "nodeContext" : "specs",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 238,
      "startColumnNumber" : 72,
      "endLineNumber" : 238,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 238,
        "startColumnNumber" : 72,
        "endLineNumber" : 238,
        "endColumnNumber" : 84
      },
      "nodeContext" : "specs.get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 238,
        "startColumnNumber" : 72,
        "endLineNumber" : 238,
        "endColumnNumber" : 94
      },
      "nodeContext" : "specs.get(0).getSpec()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 238,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 95
      },
      "nodeContext" : "Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev2),specs.get(0).getSpec())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 238,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 96
      },
      "nodeContext" : "Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev2),specs.get(0).getSpec());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1171,
        "startLineNumber" : 223,
        "startColumnNumber" : 2,
        "endLineNumber" : 244,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String supervisor1=\"test-supervisor-1\";\n  final String supervisor2=\"test-supervisor-2\";\n  final Map<String,String> data1rev1=ImmutableMap.of(\"key1-1\",\"value1-1-1\",\"key1-2\",\"value1-2-1\");\n  final Map<String,String> data1rev2=ImmutableMap.of(\"key1-1\",\"value1-1-2\",\"key1-2\",\"value1-2-2\");\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev1));\n  supervisorManager.insert(supervisor2,new BadSupervisorSpec(supervisor2,supervisor2));\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev2));\n  final Map<String,List<VersionedSupervisorSpec>> allSpecs=supervisorManager.getAll();\n  Assert.assertEquals(2,allSpecs.size());\n  List<VersionedSupervisorSpec> specs=allSpecs.get(supervisor1);\n  Assert.assertEquals(2,specs.size());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev2),specs.get(0).getSpec());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev1),specs.get(1).getSpec());\n  specs=allSpecs.get(supervisor2);\n  Assert.assertEquals(1,specs.size());\n  Assert.assertNull(specs.get(0).getSpec());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1225,
        "startLineNumber" : 221,
        "startColumnNumber" : 2,
        "endLineNumber" : 244,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSkipDeserializingBadSpecs(){\n  final String supervisor1=\"test-supervisor-1\";\n  final String supervisor2=\"test-supervisor-2\";\n  final Map<String,String> data1rev1=ImmutableMap.of(\"key1-1\",\"value1-1-1\",\"key1-2\",\"value1-2-1\");\n  final Map<String,String> data1rev2=ImmutableMap.of(\"key1-1\",\"value1-1-2\",\"key1-2\",\"value1-2-2\");\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev1));\n  supervisorManager.insert(supervisor2,new BadSupervisorSpec(supervisor2,supervisor2));\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev2));\n  final Map<String,List<VersionedSupervisorSpec>> allSpecs=supervisorManager.getAll();\n  Assert.assertEquals(2,allSpecs.size());\n  List<VersionedSupervisorSpec> specs=allSpecs.get(supervisor1);\n  Assert.assertEquals(2,specs.size());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev2),specs.get(0).getSpec());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev1),specs.get(1).getSpec());\n  specs=allSpecs.get(supervisor2);\n  Assert.assertEquals(1,specs.size());\n  Assert.assertNull(specs.get(0).getSpec());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 187,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 238,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 96
      },
      "nodeContext" : "Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev2),specs.get(0).getSpec());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.indexing.overlord.supervisor.VersionedSupervisorSpec>"
  }, {
    "nodeContext" : "specs",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 239,
      "startColumnNumber" : 72,
      "endLineNumber" : 239,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 239,
        "startColumnNumber" : 72,
        "endLineNumber" : 239,
        "endColumnNumber" : 84
      },
      "nodeContext" : "specs.get(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 239,
        "startColumnNumber" : 72,
        "endLineNumber" : 239,
        "endColumnNumber" : 94
      },
      "nodeContext" : "specs.get(1).getSpec()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 239,
        "startColumnNumber" : 4,
        "endLineNumber" : 239,
        "endColumnNumber" : 95
      },
      "nodeContext" : "Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev1),specs.get(1).getSpec())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 239,
        "startColumnNumber" : 4,
        "endLineNumber" : 239,
        "endColumnNumber" : 96
      },
      "nodeContext" : "Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev1),specs.get(1).getSpec());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1171,
        "startLineNumber" : 223,
        "startColumnNumber" : 2,
        "endLineNumber" : 244,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String supervisor1=\"test-supervisor-1\";\n  final String supervisor2=\"test-supervisor-2\";\n  final Map<String,String> data1rev1=ImmutableMap.of(\"key1-1\",\"value1-1-1\",\"key1-2\",\"value1-2-1\");\n  final Map<String,String> data1rev2=ImmutableMap.of(\"key1-1\",\"value1-1-2\",\"key1-2\",\"value1-2-2\");\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev1));\n  supervisorManager.insert(supervisor2,new BadSupervisorSpec(supervisor2,supervisor2));\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev2));\n  final Map<String,List<VersionedSupervisorSpec>> allSpecs=supervisorManager.getAll();\n  Assert.assertEquals(2,allSpecs.size());\n  List<VersionedSupervisorSpec> specs=allSpecs.get(supervisor1);\n  Assert.assertEquals(2,specs.size());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev2),specs.get(0).getSpec());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev1),specs.get(1).getSpec());\n  specs=allSpecs.get(supervisor2);\n  Assert.assertEquals(1,specs.size());\n  Assert.assertNull(specs.get(0).getSpec());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1225,
        "startLineNumber" : 221,
        "startColumnNumber" : 2,
        "endLineNumber" : 244,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSkipDeserializingBadSpecs(){\n  final String supervisor1=\"test-supervisor-1\";\n  final String supervisor2=\"test-supervisor-2\";\n  final Map<String,String> data1rev1=ImmutableMap.of(\"key1-1\",\"value1-1-1\",\"key1-2\",\"value1-2-1\");\n  final Map<String,String> data1rev2=ImmutableMap.of(\"key1-1\",\"value1-1-2\",\"key1-2\",\"value1-2-2\");\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev1));\n  supervisorManager.insert(supervisor2,new BadSupervisorSpec(supervisor2,supervisor2));\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev2));\n  final Map<String,List<VersionedSupervisorSpec>> allSpecs=supervisorManager.getAll();\n  Assert.assertEquals(2,allSpecs.size());\n  List<VersionedSupervisorSpec> specs=allSpecs.get(supervisor1);\n  Assert.assertEquals(2,specs.size());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev2),specs.get(0).getSpec());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev1),specs.get(1).getSpec());\n  specs=allSpecs.get(supervisor2);\n  Assert.assertEquals(1,specs.size());\n  Assert.assertNull(specs.get(0).getSpec());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 187,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 239,
        "startColumnNumber" : 4,
        "endLineNumber" : 239,
        "endColumnNumber" : 96
      },
      "nodeContext" : "Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev1),specs.get(1).getSpec());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.indexing.overlord.supervisor.VersionedSupervisorSpec>"
  }, {
    "nodeContext" : "specs",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 242,
      "startColumnNumber" : 27,
      "endLineNumber" : 242,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 242,
        "startColumnNumber" : 27,
        "endLineNumber" : 242,
        "endColumnNumber" : 39
      },
      "nodeContext" : "specs.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 242,
        "startColumnNumber" : 4,
        "endLineNumber" : 242,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assert.assertEquals(1,specs.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 242,
        "startColumnNumber" : 4,
        "endLineNumber" : 242,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Assert.assertEquals(1,specs.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1171,
        "startLineNumber" : 223,
        "startColumnNumber" : 2,
        "endLineNumber" : 244,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String supervisor1=\"test-supervisor-1\";\n  final String supervisor2=\"test-supervisor-2\";\n  final Map<String,String> data1rev1=ImmutableMap.of(\"key1-1\",\"value1-1-1\",\"key1-2\",\"value1-2-1\");\n  final Map<String,String> data1rev2=ImmutableMap.of(\"key1-1\",\"value1-1-2\",\"key1-2\",\"value1-2-2\");\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev1));\n  supervisorManager.insert(supervisor2,new BadSupervisorSpec(supervisor2,supervisor2));\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev2));\n  final Map<String,List<VersionedSupervisorSpec>> allSpecs=supervisorManager.getAll();\n  Assert.assertEquals(2,allSpecs.size());\n  List<VersionedSupervisorSpec> specs=allSpecs.get(supervisor1);\n  Assert.assertEquals(2,specs.size());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev2),specs.get(0).getSpec());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev1),specs.get(1).getSpec());\n  specs=allSpecs.get(supervisor2);\n  Assert.assertEquals(1,specs.size());\n  Assert.assertNull(specs.get(0).getSpec());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1225,
        "startLineNumber" : 221,
        "startColumnNumber" : 2,
        "endLineNumber" : 244,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSkipDeserializingBadSpecs(){\n  final String supervisor1=\"test-supervisor-1\";\n  final String supervisor2=\"test-supervisor-2\";\n  final Map<String,String> data1rev1=ImmutableMap.of(\"key1-1\",\"value1-1-1\",\"key1-2\",\"value1-2-1\");\n  final Map<String,String> data1rev2=ImmutableMap.of(\"key1-1\",\"value1-1-2\",\"key1-2\",\"value1-2-2\");\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev1));\n  supervisorManager.insert(supervisor2,new BadSupervisorSpec(supervisor2,supervisor2));\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev2));\n  final Map<String,List<VersionedSupervisorSpec>> allSpecs=supervisorManager.getAll();\n  Assert.assertEquals(2,allSpecs.size());\n  List<VersionedSupervisorSpec> specs=allSpecs.get(supervisor1);\n  Assert.assertEquals(2,specs.size());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev2),specs.get(0).getSpec());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev1),specs.get(1).getSpec());\n  specs=allSpecs.get(supervisor2);\n  Assert.assertEquals(1,specs.size());\n  Assert.assertNull(specs.get(0).getSpec());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 187,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 242,
        "startColumnNumber" : 4,
        "endLineNumber" : 242,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Assert.assertEquals(1,specs.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.indexing.overlord.supervisor.VersionedSupervisorSpec>"
  }, {
    "nodeContext" : "specs",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 243,
      "startColumnNumber" : 22,
      "endLineNumber" : 243,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 243,
        "startColumnNumber" : 22,
        "endLineNumber" : 243,
        "endColumnNumber" : 34
      },
      "nodeContext" : "specs.get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 243,
        "startColumnNumber" : 22,
        "endLineNumber" : 243,
        "endColumnNumber" : 44
      },
      "nodeContext" : "specs.get(0).getSpec()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 243,
        "startColumnNumber" : 4,
        "endLineNumber" : 243,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Assert.assertNull(specs.get(0).getSpec())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 243,
        "startColumnNumber" : 4,
        "endLineNumber" : 243,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Assert.assertNull(specs.get(0).getSpec());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1171,
        "startLineNumber" : 223,
        "startColumnNumber" : 2,
        "endLineNumber" : 244,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String supervisor1=\"test-supervisor-1\";\n  final String supervisor2=\"test-supervisor-2\";\n  final Map<String,String> data1rev1=ImmutableMap.of(\"key1-1\",\"value1-1-1\",\"key1-2\",\"value1-2-1\");\n  final Map<String,String> data1rev2=ImmutableMap.of(\"key1-1\",\"value1-1-2\",\"key1-2\",\"value1-2-2\");\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev1));\n  supervisorManager.insert(supervisor2,new BadSupervisorSpec(supervisor2,supervisor2));\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev2));\n  final Map<String,List<VersionedSupervisorSpec>> allSpecs=supervisorManager.getAll();\n  Assert.assertEquals(2,allSpecs.size());\n  List<VersionedSupervisorSpec> specs=allSpecs.get(supervisor1);\n  Assert.assertEquals(2,specs.size());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev2),specs.get(0).getSpec());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev1),specs.get(1).getSpec());\n  specs=allSpecs.get(supervisor2);\n  Assert.assertEquals(1,specs.size());\n  Assert.assertNull(specs.get(0).getSpec());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1225,
        "startLineNumber" : 221,
        "startColumnNumber" : 2,
        "endLineNumber" : 244,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSkipDeserializingBadSpecs(){\n  final String supervisor1=\"test-supervisor-1\";\n  final String supervisor2=\"test-supervisor-2\";\n  final Map<String,String> data1rev1=ImmutableMap.of(\"key1-1\",\"value1-1-1\",\"key1-2\",\"value1-2-1\");\n  final Map<String,String> data1rev2=ImmutableMap.of(\"key1-1\",\"value1-1-2\",\"key1-2\",\"value1-2-2\");\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev1));\n  supervisorManager.insert(supervisor2,new BadSupervisorSpec(supervisor2,supervisor2));\n  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev2));\n  final Map<String,List<VersionedSupervisorSpec>> allSpecs=supervisorManager.getAll();\n  Assert.assertEquals(2,allSpecs.size());\n  List<VersionedSupervisorSpec> specs=allSpecs.get(supervisor1);\n  Assert.assertEquals(2,specs.size());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev2),specs.get(0).getSpec());\n  Assert.assertEquals(new TestSupervisorSpec(supervisor1,data1rev1),specs.get(1).getSpec());\n  specs=allSpecs.get(supervisor2);\n  Assert.assertEquals(1,specs.size());\n  Assert.assertNull(specs.get(0).getSpec());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 187,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 243,
        "startColumnNumber" : 4,
        "endLineNumber" : 243,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Assert.assertNull(specs.get(0).getSpec());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.indexing.overlord.supervisor.VersionedSupervisorSpec>"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 237,
    "startColumnNumber" : 27,
    "endLineNumber" : 237,
    "endColumnNumber" : 32
  }, {
    "charLength" : 5,
    "startLineNumber" : 238,
    "startColumnNumber" : 72,
    "endLineNumber" : 238,
    "endColumnNumber" : 77
  }, {
    "charLength" : 5,
    "startLineNumber" : 239,
    "startColumnNumber" : 72,
    "endLineNumber" : 239,
    "endColumnNumber" : 77
  }, {
    "charLength" : 5,
    "startLineNumber" : 242,
    "startColumnNumber" : 27,
    "endLineNumber" : 242,
    "endColumnNumber" : 32
  }, {
    "charLength" : 5,
    "startLineNumber" : 243,
    "startColumnNumber" : 22,
    "endLineNumber" : 243,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  } ]
}