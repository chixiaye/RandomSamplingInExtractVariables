{
  "id" : 131,
  "expression" : "methodName",
  "projectName" : "alibaba@fastjson",
  "commitID" : "aaaa4d567086879de49e13fb6d002efaf5bc85ad",
  "filePath" : "src/main/java/com/alibaba/fastjson/util/TypeUtils.java",
  "occurrences" : 16,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 931,
      "startColumnNumber" : 16,
      "endLineNumber" : 931,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 931,
        "startColumnNumber" : 16,
        "endLineNumber" : 931,
        "endColumnNumber" : 44
      },
      "nodeContext" : "methodName.startsWith(\"get\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 931,
        "startColumnNumber" : 12,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\")) {\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 931,
        "startColumnNumber" : 16,
        "endLineNumber" : 931,
        "endColumnNumber" : 44
      },
      "nodeContext" : "methodName.startsWith(\"get\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 932,
      "startColumnNumber" : 20,
      "endLineNumber" : 932,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 932,
        "startColumnNumber" : 20,
        "endLineNumber" : 932,
        "endColumnNumber" : 39
      },
      "nodeContext" : "methodName.length()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 932,
        "startColumnNumber" : 20,
        "endLineNumber" : 932,
        "endColumnNumber" : 43
      },
      "nodeContext" : "methodName.length() < 4",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 932,
        "startColumnNumber" : 16,
        "endLineNumber" : 934,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (methodName.length() < 4) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 931,
        "startColumnNumber" : 46,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 931,
        "startColumnNumber" : 12,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\")) {\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 932,
        "startColumnNumber" : 20,
        "endLineNumber" : 932,
        "endColumnNumber" : 43
      },
      "nodeContext" : "methodName.length() < 4",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 936,
      "startColumnNumber" : 20,
      "endLineNumber" : 936,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 936,
        "startColumnNumber" : 20,
        "endLineNumber" : 936,
        "endColumnNumber" : 49
      },
      "nodeContext" : "methodName.equals(\"getClass\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 936,
        "startColumnNumber" : 16,
        "endLineNumber" : 938,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (methodName.equals(\"getClass\")) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 931,
        "startColumnNumber" : 46,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 931,
        "startColumnNumber" : 12,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\")) {\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 936,
        "startColumnNumber" : 20,
        "endLineNumber" : 936,
        "endColumnNumber" : 49
      },
      "nodeContext" : "methodName.equals(\"getClass\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 940,
      "startColumnNumber" : 26,
      "endLineNumber" : 940,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 940,
        "startColumnNumber" : 26,
        "endLineNumber" : 940,
        "endColumnNumber" : 46
      },
      "nodeContext" : "methodName.charAt(3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 940,
        "startColumnNumber" : 21,
        "endLineNumber" : 940,
        "endColumnNumber" : 46
      },
      "nodeContext" : "c3=methodName.charAt(3)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 940,
        "startColumnNumber" : 16,
        "endLineNumber" : 940,
        "endColumnNumber" : 47
      },
      "nodeContext" : "char c3=methodName.charAt(3);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 931,
        "startColumnNumber" : 46,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 931,
        "startColumnNumber" : 12,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\")) {\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 940,
        "startColumnNumber" : 16,
        "endLineNumber" : 940,
        "endColumnNumber" : 47
      },
      "nodeContext" : "char c3=methodName.charAt(3);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 944,
      "startColumnNumber" : 57,
      "endLineNumber" : 944,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 944,
        "startColumnNumber" : 57,
        "endLineNumber" : 944,
        "endColumnNumber" : 77
      },
      "nodeContext" : "methodName.charAt(3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 944,
        "startColumnNumber" : 35,
        "endLineNumber" : 944,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Character.toLowerCase(methodName.charAt(3))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 944,
        "startColumnNumber" : 35,
        "endLineNumber" : 944,
        "endColumnNumber" : 104
      },
      "nodeContext" : "Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 944,
        "startColumnNumber" : 20,
        "endLineNumber" : 944,
        "endColumnNumber" : 104
      },
      "nodeContext" : "propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 944,
        "startColumnNumber" : 20,
        "endLineNumber" : 944,
        "endColumnNumber" : 105
      },
      "nodeContext" : "propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 943,
        "startColumnNumber" : 47,
        "endLineNumber" : 945,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 419,
        "startLineNumber" : 943,
        "startColumnNumber" : 16,
        "endLineNumber" : 951,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (Character.isUpperCase(c3)) {\n  propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n}\n else if (c3 == '_') {\n  propertyName=methodName.substring(4);\n}\n else if (c3 == 'f') {\n  propertyName=methodName.substring(3);\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 931,
        "startColumnNumber" : 46,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 931,
        "startColumnNumber" : 12,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\")) {\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 944,
        "startColumnNumber" : 20,
        "endLineNumber" : 944,
        "endColumnNumber" : 105
      },
      "nodeContext" : "propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 944,
      "startColumnNumber" : 81,
      "endLineNumber" : 944,
      "endColumnNumber" : 91
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 944,
        "startColumnNumber" : 81,
        "endLineNumber" : 944,
        "endColumnNumber" : 104
      },
      "nodeContext" : "methodName.substring(4)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 944,
        "startColumnNumber" : 35,
        "endLineNumber" : 944,
        "endColumnNumber" : 104
      },
      "nodeContext" : "Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 944,
        "startColumnNumber" : 20,
        "endLineNumber" : 944,
        "endColumnNumber" : 104
      },
      "nodeContext" : "propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 944,
        "startColumnNumber" : 20,
        "endLineNumber" : 944,
        "endColumnNumber" : 105
      },
      "nodeContext" : "propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 943,
        "startColumnNumber" : 47,
        "endLineNumber" : 945,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 419,
        "startLineNumber" : 943,
        "startColumnNumber" : 16,
        "endLineNumber" : 951,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (Character.isUpperCase(c3)) {\n  propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n}\n else if (c3 == '_') {\n  propertyName=methodName.substring(4);\n}\n else if (c3 == 'f') {\n  propertyName=methodName.substring(3);\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 931,
        "startColumnNumber" : 46,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 931,
        "startColumnNumber" : 12,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\")) {\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 944,
        "startColumnNumber" : 20,
        "endLineNumber" : 944,
        "endColumnNumber" : 105
      },
      "nodeContext" : "propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 946,
      "startColumnNumber" : 35,
      "endLineNumber" : 946,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 946,
        "startColumnNumber" : 35,
        "endLineNumber" : 946,
        "endColumnNumber" : 58
      },
      "nodeContext" : "methodName.substring(4)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 946,
        "startColumnNumber" : 20,
        "endLineNumber" : 946,
        "endColumnNumber" : 58
      },
      "nodeContext" : "propertyName=methodName.substring(4)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 946,
        "startColumnNumber" : 20,
        "endLineNumber" : 946,
        "endColumnNumber" : 59
      },
      "nodeContext" : "propertyName=methodName.substring(4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 945,
        "startColumnNumber" : 38,
        "endLineNumber" : 947,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  propertyName=methodName.substring(4);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 945,
        "startColumnNumber" : 23,
        "endLineNumber" : 951,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (c3 == '_') {\n  propertyName=methodName.substring(4);\n}\n else if (c3 == 'f') {\n  propertyName=methodName.substring(3);\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 419,
        "startLineNumber" : 943,
        "startColumnNumber" : 16,
        "endLineNumber" : 951,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (Character.isUpperCase(c3)) {\n  propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n}\n else if (c3 == '_') {\n  propertyName=methodName.substring(4);\n}\n else if (c3 == 'f') {\n  propertyName=methodName.substring(3);\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 931,
        "startColumnNumber" : 46,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 931,
        "startColumnNumber" : 12,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\")) {\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 946,
        "startColumnNumber" : 20,
        "endLineNumber" : 946,
        "endColumnNumber" : 59
      },
      "nodeContext" : "propertyName=methodName.substring(4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 948,
      "startColumnNumber" : 35,
      "endLineNumber" : 948,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 948,
        "startColumnNumber" : 35,
        "endLineNumber" : 948,
        "endColumnNumber" : 58
      },
      "nodeContext" : "methodName.substring(3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 948,
        "startColumnNumber" : 20,
        "endLineNumber" : 948,
        "endColumnNumber" : 58
      },
      "nodeContext" : "propertyName=methodName.substring(3)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 948,
        "startColumnNumber" : 20,
        "endLineNumber" : 948,
        "endColumnNumber" : 59
      },
      "nodeContext" : "propertyName=methodName.substring(3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 947,
        "startColumnNumber" : 38,
        "endLineNumber" : 949,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  propertyName=methodName.substring(3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 947,
        "startColumnNumber" : 23,
        "endLineNumber" : 951,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (c3 == 'f') {\n  propertyName=methodName.substring(3);\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 945,
        "startColumnNumber" : 23,
        "endLineNumber" : 951,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (c3 == '_') {\n  propertyName=methodName.substring(4);\n}\n else if (c3 == 'f') {\n  propertyName=methodName.substring(3);\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 419,
        "startLineNumber" : 943,
        "startColumnNumber" : 16,
        "endLineNumber" : 951,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (Character.isUpperCase(c3)) {\n  propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n}\n else if (c3 == '_') {\n  propertyName=methodName.substring(4);\n}\n else if (c3 == 'f') {\n  propertyName=methodName.substring(3);\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 931,
        "startColumnNumber" : 46,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 931,
        "startColumnNumber" : 12,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\")) {\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 948,
        "startColumnNumber" : 20,
        "endLineNumber" : 948,
        "endColumnNumber" : 59
      },
      "nodeContext" : "propertyName=methodName.substring(3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 961,
      "startColumnNumber" : 57,
      "endLineNumber" : 961,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 961,
        "startColumnNumber" : 57,
        "endLineNumber" : 961,
        "endColumnNumber" : 80
      },
      "nodeContext" : "methodName.substring(3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 961,
        "startColumnNumber" : 28,
        "endLineNumber" : 961,
        "endColumnNumber" : 81
      },
      "nodeContext" : "ParserConfig.getField(clazz,methodName.substring(3))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 961,
        "startColumnNumber" : 20,
        "endLineNumber" : 961,
        "endColumnNumber" : 81
      },
      "nodeContext" : "field=ParserConfig.getField(clazz,methodName.substring(3))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 961,
        "startColumnNumber" : 20,
        "endLineNumber" : 961,
        "endColumnNumber" : 82
      },
      "nodeContext" : "field=ParserConfig.getField(clazz,methodName.substring(3));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 960,
        "startColumnNumber" : 35,
        "endLineNumber" : 962,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  field=ParserConfig.getField(clazz,methodName.substring(3));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 960,
        "startColumnNumber" : 16,
        "endLineNumber" : 962,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (field == null) {\n  field=ParserConfig.getField(clazz,methodName.substring(3));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 931,
        "startColumnNumber" : 46,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 931,
        "startColumnNumber" : 12,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\")) {\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 961,
        "startColumnNumber" : 20,
        "endLineNumber" : 961,
        "endColumnNumber" : 82
      },
      "nodeContext" : "field=ParserConfig.getField(clazz,methodName.substring(3));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 995,
      "startColumnNumber" : 16,
      "endLineNumber" : 995,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 995,
        "startColumnNumber" : 16,
        "endLineNumber" : 995,
        "endColumnNumber" : 43
      },
      "nodeContext" : "methodName.startsWith(\"is\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 995,
        "startColumnNumber" : 12,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"is\")) {\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 174,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 995,
        "startColumnNumber" : 16,
        "endLineNumber" : 995,
        "endColumnNumber" : 43
      },
      "nodeContext" : "methodName.startsWith(\"is\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 996,
      "startColumnNumber" : 20,
      "endLineNumber" : 996,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 996,
        "startColumnNumber" : 20,
        "endLineNumber" : 996,
        "endColumnNumber" : 39
      },
      "nodeContext" : "methodName.length()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 996,
        "startColumnNumber" : 20,
        "endLineNumber" : 996,
        "endColumnNumber" : 43
      },
      "nodeContext" : "methodName.length() < 3",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 996,
        "startColumnNumber" : 16,
        "endLineNumber" : 998,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (methodName.length() < 3) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 995,
        "startColumnNumber" : 45,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 995,
        "startColumnNumber" : 12,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"is\")) {\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 174,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 996,
        "startColumnNumber" : 20,
        "endLineNumber" : 996,
        "endColumnNumber" : 43
      },
      "nodeContext" : "methodName.length() < 3",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 1000,
      "startColumnNumber" : 26,
      "endLineNumber" : 1000,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 1000,
        "startColumnNumber" : 26,
        "endLineNumber" : 1000,
        "endColumnNumber" : 46
      },
      "nodeContext" : "methodName.charAt(2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1000,
        "startColumnNumber" : 21,
        "endLineNumber" : 1000,
        "endColumnNumber" : 46
      },
      "nodeContext" : "c2=methodName.charAt(2)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 1000,
        "startColumnNumber" : 16,
        "endLineNumber" : 1000,
        "endColumnNumber" : 47
      },
      "nodeContext" : "char c2=methodName.charAt(2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 995,
        "startColumnNumber" : 45,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 995,
        "startColumnNumber" : 12,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"is\")) {\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 174,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 1000,
        "startColumnNumber" : 16,
        "endLineNumber" : 1000,
        "endColumnNumber" : 47
      },
      "nodeContext" : "char c2=methodName.charAt(2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 1004,
      "startColumnNumber" : 57,
      "endLineNumber" : 1004,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 1004,
        "startColumnNumber" : 57,
        "endLineNumber" : 1004,
        "endColumnNumber" : 77
      },
      "nodeContext" : "methodName.charAt(2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 1004,
        "startColumnNumber" : 35,
        "endLineNumber" : 1004,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Character.toLowerCase(methodName.charAt(2))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 1004,
        "startColumnNumber" : 35,
        "endLineNumber" : 1004,
        "endColumnNumber" : 104
      },
      "nodeContext" : "Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 1004,
        "startColumnNumber" : 20,
        "endLineNumber" : 1004,
        "endColumnNumber" : 104
      },
      "nodeContext" : "propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 1004,
        "startColumnNumber" : 20,
        "endLineNumber" : 1004,
        "endColumnNumber" : 105
      },
      "nodeContext" : "propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 1003,
        "startColumnNumber" : 47,
        "endLineNumber" : 1005,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 419,
        "startLineNumber" : 1003,
        "startColumnNumber" : 16,
        "endLineNumber" : 1011,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (Character.isUpperCase(c2)) {\n  propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n}\n else if (c2 == '_') {\n  propertyName=methodName.substring(3);\n}\n else if (c2 == 'f') {\n  propertyName=methodName.substring(2);\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 995,
        "startColumnNumber" : 45,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 995,
        "startColumnNumber" : 12,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"is\")) {\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 174,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 1004,
        "startColumnNumber" : 20,
        "endLineNumber" : 1004,
        "endColumnNumber" : 105
      },
      "nodeContext" : "propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 1004,
      "startColumnNumber" : 81,
      "endLineNumber" : 1004,
      "endColumnNumber" : 91
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 1004,
        "startColumnNumber" : 81,
        "endLineNumber" : 1004,
        "endColumnNumber" : 104
      },
      "nodeContext" : "methodName.substring(3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 1004,
        "startColumnNumber" : 35,
        "endLineNumber" : 1004,
        "endColumnNumber" : 104
      },
      "nodeContext" : "Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 1004,
        "startColumnNumber" : 20,
        "endLineNumber" : 1004,
        "endColumnNumber" : 104
      },
      "nodeContext" : "propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 1004,
        "startColumnNumber" : 20,
        "endLineNumber" : 1004,
        "endColumnNumber" : 105
      },
      "nodeContext" : "propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 1003,
        "startColumnNumber" : 47,
        "endLineNumber" : 1005,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 419,
        "startLineNumber" : 1003,
        "startColumnNumber" : 16,
        "endLineNumber" : 1011,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (Character.isUpperCase(c2)) {\n  propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n}\n else if (c2 == '_') {\n  propertyName=methodName.substring(3);\n}\n else if (c2 == 'f') {\n  propertyName=methodName.substring(2);\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 995,
        "startColumnNumber" : 45,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 995,
        "startColumnNumber" : 12,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"is\")) {\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 174,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 1004,
        "startColumnNumber" : 20,
        "endLineNumber" : 1004,
        "endColumnNumber" : 105
      },
      "nodeContext" : "propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 1006,
      "startColumnNumber" : 35,
      "endLineNumber" : 1006,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 1006,
        "startColumnNumber" : 35,
        "endLineNumber" : 1006,
        "endColumnNumber" : 58
      },
      "nodeContext" : "methodName.substring(3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 1006,
        "startColumnNumber" : 20,
        "endLineNumber" : 1006,
        "endColumnNumber" : 58
      },
      "nodeContext" : "propertyName=methodName.substring(3)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 1006,
        "startColumnNumber" : 20,
        "endLineNumber" : 1006,
        "endColumnNumber" : 59
      },
      "nodeContext" : "propertyName=methodName.substring(3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 1005,
        "startColumnNumber" : 38,
        "endLineNumber" : 1007,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  propertyName=methodName.substring(3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 1005,
        "startColumnNumber" : 23,
        "endLineNumber" : 1011,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (c2 == '_') {\n  propertyName=methodName.substring(3);\n}\n else if (c2 == 'f') {\n  propertyName=methodName.substring(2);\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 419,
        "startLineNumber" : 1003,
        "startColumnNumber" : 16,
        "endLineNumber" : 1011,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (Character.isUpperCase(c2)) {\n  propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n}\n else if (c2 == '_') {\n  propertyName=methodName.substring(3);\n}\n else if (c2 == 'f') {\n  propertyName=methodName.substring(2);\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 995,
        "startColumnNumber" : 45,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 995,
        "startColumnNumber" : 12,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"is\")) {\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 174,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 1006,
        "startColumnNumber" : 20,
        "endLineNumber" : 1006,
        "endColumnNumber" : 59
      },
      "nodeContext" : "propertyName=methodName.substring(3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 1008,
      "startColumnNumber" : 35,
      "endLineNumber" : 1008,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 1008,
        "startColumnNumber" : 35,
        "endLineNumber" : 1008,
        "endColumnNumber" : 58
      },
      "nodeContext" : "methodName.substring(2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 1008,
        "startColumnNumber" : 20,
        "endLineNumber" : 1008,
        "endColumnNumber" : 58
      },
      "nodeContext" : "propertyName=methodName.substring(2)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 1008,
        "startColumnNumber" : 20,
        "endLineNumber" : 1008,
        "endColumnNumber" : 59
      },
      "nodeContext" : "propertyName=methodName.substring(2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 1007,
        "startColumnNumber" : 38,
        "endLineNumber" : 1009,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  propertyName=methodName.substring(2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 1007,
        "startColumnNumber" : 23,
        "endLineNumber" : 1011,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (c2 == 'f') {\n  propertyName=methodName.substring(2);\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 1005,
        "startColumnNumber" : 23,
        "endLineNumber" : 1011,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (c2 == '_') {\n  propertyName=methodName.substring(3);\n}\n else if (c2 == 'f') {\n  propertyName=methodName.substring(2);\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 419,
        "startLineNumber" : 1003,
        "startColumnNumber" : 16,
        "endLineNumber" : 1011,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (Character.isUpperCase(c2)) {\n  propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n}\n else if (c2 == '_') {\n  propertyName=methodName.substring(3);\n}\n else if (c2 == 'f') {\n  propertyName=methodName.substring(2);\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 995,
        "startColumnNumber" : 45,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 995,
        "startColumnNumber" : 12,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"is\")) {\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 174,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 1008,
        "startColumnNumber" : 20,
        "endLineNumber" : 1008,
        "endColumnNumber" : 59
      },
      "nodeContext" : "propertyName=methodName.substring(2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 931,
    "startColumnNumber" : 16,
    "endLineNumber" : 931,
    "endColumnNumber" : 26
  }, {
    "charLength" : 10,
    "startLineNumber" : 932,
    "startColumnNumber" : 20,
    "endLineNumber" : 932,
    "endColumnNumber" : 30
  }, {
    "charLength" : 10,
    "startLineNumber" : 936,
    "startColumnNumber" : 20,
    "endLineNumber" : 936,
    "endColumnNumber" : 30
  }, {
    "charLength" : 10,
    "startLineNumber" : 940,
    "startColumnNumber" : 26,
    "endLineNumber" : 940,
    "endColumnNumber" : 36
  }, {
    "charLength" : 10,
    "startLineNumber" : 944,
    "startColumnNumber" : 57,
    "endLineNumber" : 944,
    "endColumnNumber" : 67
  }, {
    "charLength" : 10,
    "startLineNumber" : 944,
    "startColumnNumber" : 81,
    "endLineNumber" : 944,
    "endColumnNumber" : 91
  }, {
    "charLength" : 10,
    "startLineNumber" : 946,
    "startColumnNumber" : 35,
    "endLineNumber" : 946,
    "endColumnNumber" : 45
  }, {
    "charLength" : 10,
    "startLineNumber" : 948,
    "startColumnNumber" : 35,
    "endLineNumber" : 948,
    "endColumnNumber" : 45
  }, {
    "charLength" : 10,
    "startLineNumber" : 961,
    "startColumnNumber" : 57,
    "endLineNumber" : 961,
    "endColumnNumber" : 67
  }, {
    "charLength" : 10,
    "startLineNumber" : 995,
    "startColumnNumber" : 16,
    "endLineNumber" : 995,
    "endColumnNumber" : 26
  }, {
    "charLength" : 10,
    "startLineNumber" : 996,
    "startColumnNumber" : 20,
    "endLineNumber" : 996,
    "endColumnNumber" : 30
  }, {
    "charLength" : 10,
    "startLineNumber" : 1000,
    "startColumnNumber" : 26,
    "endLineNumber" : 1000,
    "endColumnNumber" : 36
  }, {
    "charLength" : 10,
    "startLineNumber" : 1004,
    "startColumnNumber" : 57,
    "endLineNumber" : 1004,
    "endColumnNumber" : 67
  }, {
    "charLength" : 10,
    "startLineNumber" : 1004,
    "startColumnNumber" : 81,
    "endLineNumber" : 1004,
    "endColumnNumber" : 91
  }, {
    "charLength" : 10,
    "startLineNumber" : 1006,
    "startColumnNumber" : 35,
    "endLineNumber" : 1006,
    "endColumnNumber" : 45
  }, {
    "charLength" : 10,
    "startLineNumber" : 1008,
    "startColumnNumber" : 35,
    "endLineNumber" : 1008,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 5
  } ]
}