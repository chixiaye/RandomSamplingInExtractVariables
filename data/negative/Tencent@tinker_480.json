{
  "id" : 480,
  "expression" : "document.getElementsByTagName(TAG_ISSUE)",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/patch/Configuration.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "document.getElementsByTagName(TAG_ISSUE)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 415,
      "startColumnNumber" : 30,
      "endLineNumber" : 415,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 415,
        "startColumnNumber" : 21,
        "endLineNumber" : 415,
        "endColumnNumber" : 70
      },
      "nodeContext" : "issues=document.getElementsByTagName(TAG_ISSUE)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 415,
        "startColumnNumber" : 12,
        "endLineNumber" : 415,
        "endColumnNumber" : 71
      },
      "nodeContext" : "NodeList issues=document.getElementsByTagName(TAG_ISSUE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2276,
        "startLineNumber" : 399,
        "startColumnNumber" : 12,
        "endLineNumber" : 445,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n  input=new BufferedInputStream(new FileInputStream(xmlConfigFile));\n  InputSource source=new InputSource(input);\n  factory.setNamespaceAware(false);\n  factory.setValidating(false);\n  DocumentBuilder builder=factory.newDocumentBuilder();\n  builder.setEntityResolver(new EntityResolver(){\n    @Override public InputSource resolveEntity(    String publicId,    String systemId) throws SAXException, IOException {\n      return new InputSource();\n    }\n  }\n);\n  Document document=builder.parse(source);\n  NodeList issues=document.getElementsByTagName(TAG_ISSUE);\n  for (int i=0, count=issues.getLength(); i < count; i++) {\n    Node node=issues.item(i);\n    Element element=(Element)node;\n    String id=element.getAttribute(ATTR_ID);\n    if (id.length() == 0) {\n      System.err.println(\"Invalid config file: Missing required issue id attribute\");\n      continue;\n    }\n    if (id.equals(PROPERTY_ISSUE)) {\n      readPropertyFromXml(node);\n    }\n else     if (id.equals(DEX_ISSUE)) {\n      readDexPatternsFromXml(node);\n    }\n else     if (id.equals(SO_ISSUE)) {\n      readLibPatternsFromXml(node);\n    }\n else     if (id.equals(RES_ISSUE)) {\n      readResPatternsFromXml(node);\n    }\n else     if (id.equals(PACKAGE_CONFIG_ISSUE)) {\n      readPackageConfigFromXml(node);\n    }\n else     if (id.equals(SIGN_ISSUE)) {\n      if (mUseSignAPk) {\n        readSignFromXml(node);\n      }\n    }\n else     if (id.equals(ARKHOT_ISSUE)) {\n      readArkHotPropertyFromXml(node);\n    }\n else {\n      System.err.println(\"unknown issue \" + id);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 238,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2342,
        "startLineNumber" : 399,
        "startColumnNumber" : 8,
        "endLineNumber" : 447,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n  input=new BufferedInputStream(new FileInputStream(xmlConfigFile));\n  InputSource source=new InputSource(input);\n  factory.setNamespaceAware(false);\n  factory.setValidating(false);\n  DocumentBuilder builder=factory.newDocumentBuilder();\n  builder.setEntityResolver(new EntityResolver(){\n    @Override public InputSource resolveEntity(    String publicId,    String systemId) throws SAXException, IOException {\n      return new InputSource();\n    }\n  }\n);\n  Document document=builder.parse(source);\n  NodeList issues=document.getElementsByTagName(TAG_ISSUE);\n  for (int i=0, count=issues.getLength(); i < count; i++) {\n    Node node=issues.item(i);\n    Element element=(Element)node;\n    String id=element.getAttribute(ATTR_ID);\n    if (id.length() == 0) {\n      System.err.println(\"Invalid config file: Missing required issue id attribute\");\n      continue;\n    }\n    if (id.equals(PROPERTY_ISSUE)) {\n      readPropertyFromXml(node);\n    }\n else     if (id.equals(DEX_ISSUE)) {\n      readDexPatternsFromXml(node);\n    }\n else     if (id.equals(SO_ISSUE)) {\n      readLibPatternsFromXml(node);\n    }\n else     if (id.equals(RES_ISSUE)) {\n      readResPatternsFromXml(node);\n    }\n else     if (id.equals(PACKAGE_CONFIG_ISSUE)) {\n      readPackageConfigFromXml(node);\n    }\n else     if (id.equals(SIGN_ISSUE)) {\n      if (mUseSignAPk) {\n        readSignFromXml(node);\n      }\n    }\n else     if (id.equals(ARKHOT_ISSUE)) {\n      readArkHotPropertyFromXml(node);\n    }\n else {\n      System.err.println(\"unknown issue \" + id);\n    }\n  }\n}\n  finally {\n  IOHelper.closeQuietly(input);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 245,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2559,
        "startLineNumber" : 392,
        "startColumnNumber" : 71,
        "endLineNumber" : 448,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!xmlConfigFile.exists()) {\n    return;\n  }\n  System.out.printf(\"reading config file, %s\\n\",xmlConfigFile.getAbsolutePath());\n  BufferedInputStream input=null;\n  try {\n    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n    input=new BufferedInputStream(new FileInputStream(xmlConfigFile));\n    InputSource source=new InputSource(input);\n    factory.setNamespaceAware(false);\n    factory.setValidating(false);\n    DocumentBuilder builder=factory.newDocumentBuilder();\n    builder.setEntityResolver(new EntityResolver(){\n      @Override public InputSource resolveEntity(      String publicId,      String systemId) throws SAXException, IOException {\n        return new InputSource();\n      }\n    }\n);\n    Document document=builder.parse(source);\n    NodeList issues=document.getElementsByTagName(TAG_ISSUE);\n    for (int i=0, count=issues.getLength(); i < count; i++) {\n      Node node=issues.item(i);\n      Element element=(Element)node;\n      String id=element.getAttribute(ATTR_ID);\n      if (id.length() == 0) {\n        System.err.println(\"Invalid config file: Missing required issue id attribute\");\n        continue;\n      }\n      if (id.equals(PROPERTY_ISSUE)) {\n        readPropertyFromXml(node);\n      }\n else       if (id.equals(DEX_ISSUE)) {\n        readDexPatternsFromXml(node);\n      }\n else       if (id.equals(SO_ISSUE)) {\n        readLibPatternsFromXml(node);\n      }\n else       if (id.equals(RES_ISSUE)) {\n        readResPatternsFromXml(node);\n      }\n else       if (id.equals(PACKAGE_CONFIG_ISSUE)) {\n        readPackageConfigFromXml(node);\n      }\n else       if (id.equals(SIGN_ISSUE)) {\n        if (mUseSignAPk) {\n          readSignFromXml(node);\n        }\n      }\n else       if (id.equals(ARKHOT_ISSUE)) {\n        readArkHotPropertyFromXml(node);\n      }\n else {\n        System.err.println(\"unknown issue \" + id);\n      }\n    }\n  }\n  finally {\n    IOHelper.closeQuietly(input);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 269,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2712,
        "startLineNumber" : 388,
        "startColumnNumber" : 4,
        "endLineNumber" : 448,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * read args from xml\n */\nvoid readXmlConfig(File xmlConfigFile) throws IOException, ParserConfigurationException, SAXException {\n  if (!xmlConfigFile.exists()) {\n    return;\n  }\n  System.out.printf(\"reading config file, %s\\n\",xmlConfigFile.getAbsolutePath());\n  BufferedInputStream input=null;\n  try {\n    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n    input=new BufferedInputStream(new FileInputStream(xmlConfigFile));\n    InputSource source=new InputSource(input);\n    factory.setNamespaceAware(false);\n    factory.setValidating(false);\n    DocumentBuilder builder=factory.newDocumentBuilder();\n    builder.setEntityResolver(new EntityResolver(){\n      @Override public InputSource resolveEntity(      String publicId,      String systemId) throws SAXException, IOException {\n        return new InputSource();\n      }\n    }\n);\n    Document document=builder.parse(source);\n    NodeList issues=document.getElementsByTagName(TAG_ISSUE);\n    for (int i=0, count=issues.getLength(); i < count; i++) {\n      Node node=issues.item(i);\n      Element element=(Element)node;\n      String id=element.getAttribute(ATTR_ID);\n      if (id.length() == 0) {\n        System.err.println(\"Invalid config file: Missing required issue id attribute\");\n        continue;\n      }\n      if (id.equals(PROPERTY_ISSUE)) {\n        readPropertyFromXml(node);\n      }\n else       if (id.equals(DEX_ISSUE)) {\n        readDexPatternsFromXml(node);\n      }\n else       if (id.equals(SO_ISSUE)) {\n        readLibPatternsFromXml(node);\n      }\n else       if (id.equals(RES_ISSUE)) {\n        readResPatternsFromXml(node);\n      }\n else       if (id.equals(PACKAGE_CONFIG_ISSUE)) {\n        readPackageConfigFromXml(node);\n      }\n else       if (id.equals(SIGN_ISSUE)) {\n        if (mUseSignAPk) {\n          readSignFromXml(node);\n        }\n      }\n else       if (id.equals(ARKHOT_ISSUE)) {\n        readArkHotPropertyFromXml(node);\n      }\n else {\n        System.err.println(\"unknown issue \" + id);\n      }\n    }\n  }\n  finally {\n    IOHelper.closeQuietly(input);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 283,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 415,
        "startColumnNumber" : 12,
        "endLineNumber" : 415,
        "endColumnNumber" : 71
      },
      "nodeContext" : "NodeList issues=document.getElementsByTagName(TAG_ISSUE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "org.w3c.dom.NodeList"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 415,
    "startColumnNumber" : 30,
    "endLineNumber" : 415,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}