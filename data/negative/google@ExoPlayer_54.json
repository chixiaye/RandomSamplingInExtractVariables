{
  "id" : 54,
  "expression" : "new FileInputStream(baseName)",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/common/src/main/java/com/google/android/exoplayer2/util/AtomicFile.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new FileInputStream(baseName)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 147,
      "startColumnNumber" : 11,
      "endLineNumber" : 147,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 41
      },
      "nodeContext" : "return new FileInputStream(baseName);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 145,
        "startColumnNumber" : 61,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  restoreBackup();\n  return new FileInputStream(baseName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 590,
        "startLineNumber" : 137,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Open the atomic file for reading. If there previously was an incomplete write, this will roll back to the last good data before opening for read. <p>Note that if another thread is currently performing a write, this will incorrectly consider it to be in the state of a bad write and roll back, causing the new data currently being written to be dropped. You must do your own threading protection for access to AtomicFile.\n */\npublic InputStream openRead() throws FileNotFoundException {\n  restoreBackup();\n  return new FileInputStream(baseName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 17,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 41
      },
      "nodeContext" : "return new FileInputStream(baseName);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.io.FileInputStream"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 147,
    "startColumnNumber" : 11,
    "endLineNumber" : 147,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}