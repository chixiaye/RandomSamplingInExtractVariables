{
  "id" : 330,
  "expression" : "new GridData(GridData.FILL_BOTH)",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.core/src/org/jkiss/dbeaver/ui/preferences/PrefPageConnectionTypes.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new GridData(GridData.FILL_BOTH)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 85,
      "startColumnNumber" : 36,
      "endLineNumber" : 85,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 69
      },
      "nodeContext" : "typeTable.setLayoutData(new GridData(GridData.FILL_BOTH))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 70
      },
      "nodeContext" : "typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3473,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  typeTable=new Table(composite,SWT.SINGLE | SWT.BORDER);\n  typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n  UIUtils.createTableColumn(typeTable,SWT.LEFT,CoreMessages.pref_page_connection_types_label_table_column_name);\n  UIUtils.createTableColumn(typeTable,SWT.LEFT,CoreMessages.pref_page_connection_types_label_table_column_description);\n  typeTable.setHeaderVisible(true);\n  typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n  typeTable.addSelectionListener(new SelectionAdapter(){\n    @Override public void widgetSelected(    SelectionEvent e){\n      showSelectedType(getSelectedType());\n    }\n  }\n);\n  ToolBar toolbar=new ToolBar(composite,SWT.FLAT | SWT.HORIZONTAL);\n  final ToolItem newButton=new ToolItem(toolbar,SWT.NONE);\n  newButton.setImage(DBeaverIcons.getImage(UIIcon.ROW_ADD));\n  deleteButton=new ToolItem(toolbar,SWT.NONE);\n  deleteButton.setImage(DBeaverIcons.getImage(UIIcon.ROW_DELETE));\n  newButton.addSelectionListener(new SelectionAdapter(){\n    @Override public void widgetSelected(    SelectionEvent e){\n      String name;\n      for (int i=1; ; i++) {\n        name=\"Type\" + i;\n        boolean hasName=false;\n        for (        DBPConnectionType type : changedInfo.keySet()) {\n          if (type.getName().equals(name)) {\n            hasName=true;\n            break;\n          }\n        }\n        if (!hasName) {\n          break;\n        }\n      }\n      DBPConnectionType newType=new DBPConnectionType(name.toLowerCase(),name,\"255,255,255\",\"New type\",true,false,true);\n      addTypeToTable(newType,newType);\n      typeTable.select(typeTable.getItemCount() - 1);\n      typeTable.showSelection();\n      showSelectedType(newType);\n    }\n  }\n);\n  this.deleteButton.addSelectionListener(new SelectionAdapter(){\n    @Override public void widgetSelected(    SelectionEvent e){\n      DBPConnectionType connectionType=getSelectedType();\n      if (!UIUtils.confirmAction(getShell(),CoreMessages.pref_page_connection_types_label_delete_connection_type,NLS.bind(CoreMessages.pref_page_connection_types_label_delete_connection_type_description,connectionType.getName(),DBPConnectionType.DEFAULT_TYPE.getName()))) {\n        return;\n      }\n      changedInfo.remove(connectionType);\n      int index=typeTable.getSelectionIndex();\n      typeTable.remove(index);\n      if (index > 0)       index--;\n      typeTable.select(index);\n      showSelectedType(getSelectedType());\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 343,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9239,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 266,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Composite composite=UIUtils.createComposite(parent,1);\n{\n    typeTable=new Table(composite,SWT.SINGLE | SWT.BORDER);\n    typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n    UIUtils.createTableColumn(typeTable,SWT.LEFT,CoreMessages.pref_page_connection_types_label_table_column_name);\n    UIUtils.createTableColumn(typeTable,SWT.LEFT,CoreMessages.pref_page_connection_types_label_table_column_description);\n    typeTable.setHeaderVisible(true);\n    typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n    typeTable.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        showSelectedType(getSelectedType());\n      }\n    }\n);\n    ToolBar toolbar=new ToolBar(composite,SWT.FLAT | SWT.HORIZONTAL);\n    final ToolItem newButton=new ToolItem(toolbar,SWT.NONE);\n    newButton.setImage(DBeaverIcons.getImage(UIIcon.ROW_ADD));\n    deleteButton=new ToolItem(toolbar,SWT.NONE);\n    deleteButton.setImage(DBeaverIcons.getImage(UIIcon.ROW_DELETE));\n    newButton.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        String name;\n        for (int i=1; ; i++) {\n          name=\"Type\" + i;\n          boolean hasName=false;\n          for (          DBPConnectionType type : changedInfo.keySet()) {\n            if (type.getName().equals(name)) {\n              hasName=true;\n              break;\n            }\n          }\n          if (!hasName) {\n            break;\n          }\n        }\n        DBPConnectionType newType=new DBPConnectionType(name.toLowerCase(),name,\"255,255,255\",\"New type\",true,false,true);\n        addTypeToTable(newType,newType);\n        typeTable.select(typeTable.getItemCount() - 1);\n        typeTable.showSelection();\n        showSelectedType(newType);\n      }\n    }\n);\n    this.deleteButton.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        DBPConnectionType connectionType=getSelectedType();\n        if (!UIUtils.confirmAction(getShell(),CoreMessages.pref_page_connection_types_label_delete_connection_type,NLS.bind(CoreMessages.pref_page_connection_types_label_delete_connection_type_description,connectionType.getName(),DBPConnectionType.DEFAULT_TYPE.getName()))) {\n          return;\n        }\n        changedInfo.remove(connectionType);\n        int index=typeTable.getSelectionIndex();\n        typeTable.remove(index);\n        if (index > 0)         index--;\n        typeTable.select(index);\n        showSelectedType(getSelectedType());\n      }\n    }\n);\n  }\n{\n    Group groupSettings=UIUtils.createControlGroup(composite,CoreMessages.pref_page_connection_types_group_settings,2,GridData.VERTICAL_ALIGN_BEGINNING,300);\n    groupSettings.setLayoutData(new GridData(GridData.FILL_BOTH));\n    typeId=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_id,null);\n    typeId.addModifyListener(e -> {\n      getSelectedType().setId(typeId.getText());\n      updateTableInfo();\n    }\n);\n    typeName=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_name,null);\n    typeName.addModifyListener(e -> {\n      getSelectedType().setName(typeName.getText());\n      updateTableInfo();\n    }\n);\n    typeDescription=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_description,null);\n    typeDescription.addModifyListener(e -> {\n      getSelectedType().setDescription(typeDescription.getText());\n      updateTableInfo();\n    }\n);\n{\n      UIUtils.createControlLabel(groupSettings,CoreMessages.pref_page_connection_types_label_color);\n      colorPicker=new ColorSelector(groupSettings);\n      colorPicker.addListener(event -> {\n        getSelectedType().setColor(StringConverter.asString(colorPicker.getColorValue()));\n        updateTableInfo();\n      }\n);\n    }\n    autocommitCheck=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_auto_commit_by_default,null,false,2);\n    autocommitCheck.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setAutocommit(autocommitCheck.getSelection());\n      }\n    }\n);\n    confirmCheck=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_confirm_sql_execution,null,false,2);\n    confirmCheck.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setConfirmExecute(confirmCheck.getSelection());\n      }\n    }\n);\n    confirmDataChange=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_confirm_data_change,CoreMessages.pref_page_connection_types_label_confirm_data_change_tip,false,2);\n    confirmDataChange.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setConfirmDataChange(confirmDataChange.getSelection());\n      }\n    }\n);\n    Button epButton=UIUtils.createDialogButton(groupSettings,\"Edit permissions ...\",new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        EditConnectionPermissionsDialog dialog=new EditConnectionPermissionsDialog(getShell(),getSelectedType().getModifyPermission());\n        if (dialog.open() == IDialogConstants.OK_ID) {\n          getSelectedType().setModifyPermissions(dialog.getAccessRestrictions());\n        }\n      }\n    }\n);\n    GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);\n    gd.horizontalSpan=2;\n    epButton.setLayoutData(gd);\n  }\n  performDefaults();\n  return composite;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 715,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9314,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 266,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected Control createContents(final Composite parent){\n  Composite composite=UIUtils.createComposite(parent,1);\n{\n    typeTable=new Table(composite,SWT.SINGLE | SWT.BORDER);\n    typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n    UIUtils.createTableColumn(typeTable,SWT.LEFT,CoreMessages.pref_page_connection_types_label_table_column_name);\n    UIUtils.createTableColumn(typeTable,SWT.LEFT,CoreMessages.pref_page_connection_types_label_table_column_description);\n    typeTable.setHeaderVisible(true);\n    typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n    typeTable.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        showSelectedType(getSelectedType());\n      }\n    }\n);\n    ToolBar toolbar=new ToolBar(composite,SWT.FLAT | SWT.HORIZONTAL);\n    final ToolItem newButton=new ToolItem(toolbar,SWT.NONE);\n    newButton.setImage(DBeaverIcons.getImage(UIIcon.ROW_ADD));\n    deleteButton=new ToolItem(toolbar,SWT.NONE);\n    deleteButton.setImage(DBeaverIcons.getImage(UIIcon.ROW_DELETE));\n    newButton.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        String name;\n        for (int i=1; ; i++) {\n          name=\"Type\" + i;\n          boolean hasName=false;\n          for (          DBPConnectionType type : changedInfo.keySet()) {\n            if (type.getName().equals(name)) {\n              hasName=true;\n              break;\n            }\n          }\n          if (!hasName) {\n            break;\n          }\n        }\n        DBPConnectionType newType=new DBPConnectionType(name.toLowerCase(),name,\"255,255,255\",\"New type\",true,false,true);\n        addTypeToTable(newType,newType);\n        typeTable.select(typeTable.getItemCount() - 1);\n        typeTable.showSelection();\n        showSelectedType(newType);\n      }\n    }\n);\n    this.deleteButton.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        DBPConnectionType connectionType=getSelectedType();\n        if (!UIUtils.confirmAction(getShell(),CoreMessages.pref_page_connection_types_label_delete_connection_type,NLS.bind(CoreMessages.pref_page_connection_types_label_delete_connection_type_description,connectionType.getName(),DBPConnectionType.DEFAULT_TYPE.getName()))) {\n          return;\n        }\n        changedInfo.remove(connectionType);\n        int index=typeTable.getSelectionIndex();\n        typeTable.remove(index);\n        if (index > 0)         index--;\n        typeTable.select(index);\n        showSelectedType(getSelectedType());\n      }\n    }\n);\n  }\n{\n    Group groupSettings=UIUtils.createControlGroup(composite,CoreMessages.pref_page_connection_types_group_settings,2,GridData.VERTICAL_ALIGN_BEGINNING,300);\n    groupSettings.setLayoutData(new GridData(GridData.FILL_BOTH));\n    typeId=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_id,null);\n    typeId.addModifyListener(e -> {\n      getSelectedType().setId(typeId.getText());\n      updateTableInfo();\n    }\n);\n    typeName=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_name,null);\n    typeName.addModifyListener(e -> {\n      getSelectedType().setName(typeName.getText());\n      updateTableInfo();\n    }\n);\n    typeDescription=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_description,null);\n    typeDescription.addModifyListener(e -> {\n      getSelectedType().setDescription(typeDescription.getText());\n      updateTableInfo();\n    }\n);\n{\n      UIUtils.createControlLabel(groupSettings,CoreMessages.pref_page_connection_types_label_color);\n      colorPicker=new ColorSelector(groupSettings);\n      colorPicker.addListener(event -> {\n        getSelectedType().setColor(StringConverter.asString(colorPicker.getColorValue()));\n        updateTableInfo();\n      }\n);\n    }\n    autocommitCheck=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_auto_commit_by_default,null,false,2);\n    autocommitCheck.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setAutocommit(autocommitCheck.getSelection());\n      }\n    }\n);\n    confirmCheck=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_confirm_sql_execution,null,false,2);\n    confirmCheck.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setConfirmExecute(confirmCheck.getSelection());\n      }\n    }\n);\n    confirmDataChange=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_confirm_data_change,CoreMessages.pref_page_connection_types_label_confirm_data_change_tip,false,2);\n    confirmDataChange.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setConfirmDataChange(confirmDataChange.getSelection());\n      }\n    }\n);\n    Button epButton=UIUtils.createDialogButton(groupSettings,\"Edit permissions ...\",new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        EditConnectionPermissionsDialog dialog=new EditConnectionPermissionsDialog(getShell(),getSelectedType().getModifyPermission());\n        if (dialog.open() == IDialogConstants.OK_ID) {\n          getSelectedType().setModifyPermissions(dialog.getAccessRestrictions());\n        }\n      }\n    }\n);\n    GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);\n    gd.horizontalSpan=2;\n    epButton.setLayoutData(gd);\n  }\n  performDefaults();\n  return composite;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 727,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 70
      },
      "nodeContext" : "typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "org.jkiss.dbeaver.ui.preferences.GridData"
  }, {
    "nodeContext" : "new GridData(GridData.FILL_BOTH)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 89,
      "startColumnNumber" : 36,
      "endLineNumber" : 89,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 89,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 69
      },
      "nodeContext" : "typeTable.setLayoutData(new GridData(GridData.FILL_BOTH))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 89,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 70
      },
      "nodeContext" : "typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3473,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  typeTable=new Table(composite,SWT.SINGLE | SWT.BORDER);\n  typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n  UIUtils.createTableColumn(typeTable,SWT.LEFT,CoreMessages.pref_page_connection_types_label_table_column_name);\n  UIUtils.createTableColumn(typeTable,SWT.LEFT,CoreMessages.pref_page_connection_types_label_table_column_description);\n  typeTable.setHeaderVisible(true);\n  typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n  typeTable.addSelectionListener(new SelectionAdapter(){\n    @Override public void widgetSelected(    SelectionEvent e){\n      showSelectedType(getSelectedType());\n    }\n  }\n);\n  ToolBar toolbar=new ToolBar(composite,SWT.FLAT | SWT.HORIZONTAL);\n  final ToolItem newButton=new ToolItem(toolbar,SWT.NONE);\n  newButton.setImage(DBeaverIcons.getImage(UIIcon.ROW_ADD));\n  deleteButton=new ToolItem(toolbar,SWT.NONE);\n  deleteButton.setImage(DBeaverIcons.getImage(UIIcon.ROW_DELETE));\n  newButton.addSelectionListener(new SelectionAdapter(){\n    @Override public void widgetSelected(    SelectionEvent e){\n      String name;\n      for (int i=1; ; i++) {\n        name=\"Type\" + i;\n        boolean hasName=false;\n        for (        DBPConnectionType type : changedInfo.keySet()) {\n          if (type.getName().equals(name)) {\n            hasName=true;\n            break;\n          }\n        }\n        if (!hasName) {\n          break;\n        }\n      }\n      DBPConnectionType newType=new DBPConnectionType(name.toLowerCase(),name,\"255,255,255\",\"New type\",true,false,true);\n      addTypeToTable(newType,newType);\n      typeTable.select(typeTable.getItemCount() - 1);\n      typeTable.showSelection();\n      showSelectedType(newType);\n    }\n  }\n);\n  this.deleteButton.addSelectionListener(new SelectionAdapter(){\n    @Override public void widgetSelected(    SelectionEvent e){\n      DBPConnectionType connectionType=getSelectedType();\n      if (!UIUtils.confirmAction(getShell(),CoreMessages.pref_page_connection_types_label_delete_connection_type,NLS.bind(CoreMessages.pref_page_connection_types_label_delete_connection_type_description,connectionType.getName(),DBPConnectionType.DEFAULT_TYPE.getName()))) {\n        return;\n      }\n      changedInfo.remove(connectionType);\n      int index=typeTable.getSelectionIndex();\n      typeTable.remove(index);\n      if (index > 0)       index--;\n      typeTable.select(index);\n      showSelectedType(getSelectedType());\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 343,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9239,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 266,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Composite composite=UIUtils.createComposite(parent,1);\n{\n    typeTable=new Table(composite,SWT.SINGLE | SWT.BORDER);\n    typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n    UIUtils.createTableColumn(typeTable,SWT.LEFT,CoreMessages.pref_page_connection_types_label_table_column_name);\n    UIUtils.createTableColumn(typeTable,SWT.LEFT,CoreMessages.pref_page_connection_types_label_table_column_description);\n    typeTable.setHeaderVisible(true);\n    typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n    typeTable.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        showSelectedType(getSelectedType());\n      }\n    }\n);\n    ToolBar toolbar=new ToolBar(composite,SWT.FLAT | SWT.HORIZONTAL);\n    final ToolItem newButton=new ToolItem(toolbar,SWT.NONE);\n    newButton.setImage(DBeaverIcons.getImage(UIIcon.ROW_ADD));\n    deleteButton=new ToolItem(toolbar,SWT.NONE);\n    deleteButton.setImage(DBeaverIcons.getImage(UIIcon.ROW_DELETE));\n    newButton.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        String name;\n        for (int i=1; ; i++) {\n          name=\"Type\" + i;\n          boolean hasName=false;\n          for (          DBPConnectionType type : changedInfo.keySet()) {\n            if (type.getName().equals(name)) {\n              hasName=true;\n              break;\n            }\n          }\n          if (!hasName) {\n            break;\n          }\n        }\n        DBPConnectionType newType=new DBPConnectionType(name.toLowerCase(),name,\"255,255,255\",\"New type\",true,false,true);\n        addTypeToTable(newType,newType);\n        typeTable.select(typeTable.getItemCount() - 1);\n        typeTable.showSelection();\n        showSelectedType(newType);\n      }\n    }\n);\n    this.deleteButton.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        DBPConnectionType connectionType=getSelectedType();\n        if (!UIUtils.confirmAction(getShell(),CoreMessages.pref_page_connection_types_label_delete_connection_type,NLS.bind(CoreMessages.pref_page_connection_types_label_delete_connection_type_description,connectionType.getName(),DBPConnectionType.DEFAULT_TYPE.getName()))) {\n          return;\n        }\n        changedInfo.remove(connectionType);\n        int index=typeTable.getSelectionIndex();\n        typeTable.remove(index);\n        if (index > 0)         index--;\n        typeTable.select(index);\n        showSelectedType(getSelectedType());\n      }\n    }\n);\n  }\n{\n    Group groupSettings=UIUtils.createControlGroup(composite,CoreMessages.pref_page_connection_types_group_settings,2,GridData.VERTICAL_ALIGN_BEGINNING,300);\n    groupSettings.setLayoutData(new GridData(GridData.FILL_BOTH));\n    typeId=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_id,null);\n    typeId.addModifyListener(e -> {\n      getSelectedType().setId(typeId.getText());\n      updateTableInfo();\n    }\n);\n    typeName=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_name,null);\n    typeName.addModifyListener(e -> {\n      getSelectedType().setName(typeName.getText());\n      updateTableInfo();\n    }\n);\n    typeDescription=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_description,null);\n    typeDescription.addModifyListener(e -> {\n      getSelectedType().setDescription(typeDescription.getText());\n      updateTableInfo();\n    }\n);\n{\n      UIUtils.createControlLabel(groupSettings,CoreMessages.pref_page_connection_types_label_color);\n      colorPicker=new ColorSelector(groupSettings);\n      colorPicker.addListener(event -> {\n        getSelectedType().setColor(StringConverter.asString(colorPicker.getColorValue()));\n        updateTableInfo();\n      }\n);\n    }\n    autocommitCheck=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_auto_commit_by_default,null,false,2);\n    autocommitCheck.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setAutocommit(autocommitCheck.getSelection());\n      }\n    }\n);\n    confirmCheck=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_confirm_sql_execution,null,false,2);\n    confirmCheck.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setConfirmExecute(confirmCheck.getSelection());\n      }\n    }\n);\n    confirmDataChange=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_confirm_data_change,CoreMessages.pref_page_connection_types_label_confirm_data_change_tip,false,2);\n    confirmDataChange.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setConfirmDataChange(confirmDataChange.getSelection());\n      }\n    }\n);\n    Button epButton=UIUtils.createDialogButton(groupSettings,\"Edit permissions ...\",new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        EditConnectionPermissionsDialog dialog=new EditConnectionPermissionsDialog(getShell(),getSelectedType().getModifyPermission());\n        if (dialog.open() == IDialogConstants.OK_ID) {\n          getSelectedType().setModifyPermissions(dialog.getAccessRestrictions());\n        }\n      }\n    }\n);\n    GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);\n    gd.horizontalSpan=2;\n    epButton.setLayoutData(gd);\n  }\n  performDefaults();\n  return composite;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 715,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9314,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 266,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected Control createContents(final Composite parent){\n  Composite composite=UIUtils.createComposite(parent,1);\n{\n    typeTable=new Table(composite,SWT.SINGLE | SWT.BORDER);\n    typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n    UIUtils.createTableColumn(typeTable,SWT.LEFT,CoreMessages.pref_page_connection_types_label_table_column_name);\n    UIUtils.createTableColumn(typeTable,SWT.LEFT,CoreMessages.pref_page_connection_types_label_table_column_description);\n    typeTable.setHeaderVisible(true);\n    typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n    typeTable.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        showSelectedType(getSelectedType());\n      }\n    }\n);\n    ToolBar toolbar=new ToolBar(composite,SWT.FLAT | SWT.HORIZONTAL);\n    final ToolItem newButton=new ToolItem(toolbar,SWT.NONE);\n    newButton.setImage(DBeaverIcons.getImage(UIIcon.ROW_ADD));\n    deleteButton=new ToolItem(toolbar,SWT.NONE);\n    deleteButton.setImage(DBeaverIcons.getImage(UIIcon.ROW_DELETE));\n    newButton.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        String name;\n        for (int i=1; ; i++) {\n          name=\"Type\" + i;\n          boolean hasName=false;\n          for (          DBPConnectionType type : changedInfo.keySet()) {\n            if (type.getName().equals(name)) {\n              hasName=true;\n              break;\n            }\n          }\n          if (!hasName) {\n            break;\n          }\n        }\n        DBPConnectionType newType=new DBPConnectionType(name.toLowerCase(),name,\"255,255,255\",\"New type\",true,false,true);\n        addTypeToTable(newType,newType);\n        typeTable.select(typeTable.getItemCount() - 1);\n        typeTable.showSelection();\n        showSelectedType(newType);\n      }\n    }\n);\n    this.deleteButton.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        DBPConnectionType connectionType=getSelectedType();\n        if (!UIUtils.confirmAction(getShell(),CoreMessages.pref_page_connection_types_label_delete_connection_type,NLS.bind(CoreMessages.pref_page_connection_types_label_delete_connection_type_description,connectionType.getName(),DBPConnectionType.DEFAULT_TYPE.getName()))) {\n          return;\n        }\n        changedInfo.remove(connectionType);\n        int index=typeTable.getSelectionIndex();\n        typeTable.remove(index);\n        if (index > 0)         index--;\n        typeTable.select(index);\n        showSelectedType(getSelectedType());\n      }\n    }\n);\n  }\n{\n    Group groupSettings=UIUtils.createControlGroup(composite,CoreMessages.pref_page_connection_types_group_settings,2,GridData.VERTICAL_ALIGN_BEGINNING,300);\n    groupSettings.setLayoutData(new GridData(GridData.FILL_BOTH));\n    typeId=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_id,null);\n    typeId.addModifyListener(e -> {\n      getSelectedType().setId(typeId.getText());\n      updateTableInfo();\n    }\n);\n    typeName=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_name,null);\n    typeName.addModifyListener(e -> {\n      getSelectedType().setName(typeName.getText());\n      updateTableInfo();\n    }\n);\n    typeDescription=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_description,null);\n    typeDescription.addModifyListener(e -> {\n      getSelectedType().setDescription(typeDescription.getText());\n      updateTableInfo();\n    }\n);\n{\n      UIUtils.createControlLabel(groupSettings,CoreMessages.pref_page_connection_types_label_color);\n      colorPicker=new ColorSelector(groupSettings);\n      colorPicker.addListener(event -> {\n        getSelectedType().setColor(StringConverter.asString(colorPicker.getColorValue()));\n        updateTableInfo();\n      }\n);\n    }\n    autocommitCheck=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_auto_commit_by_default,null,false,2);\n    autocommitCheck.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setAutocommit(autocommitCheck.getSelection());\n      }\n    }\n);\n    confirmCheck=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_confirm_sql_execution,null,false,2);\n    confirmCheck.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setConfirmExecute(confirmCheck.getSelection());\n      }\n    }\n);\n    confirmDataChange=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_confirm_data_change,CoreMessages.pref_page_connection_types_label_confirm_data_change_tip,false,2);\n    confirmDataChange.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setConfirmDataChange(confirmDataChange.getSelection());\n      }\n    }\n);\n    Button epButton=UIUtils.createDialogButton(groupSettings,\"Edit permissions ...\",new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        EditConnectionPermissionsDialog dialog=new EditConnectionPermissionsDialog(getShell(),getSelectedType().getModifyPermission());\n        if (dialog.open() == IDialogConstants.OK_ID) {\n          getSelectedType().setModifyPermissions(dialog.getAccessRestrictions());\n        }\n      }\n    }\n);\n    GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);\n    gd.horizontalSpan=2;\n    epButton.setLayoutData(gd);\n  }\n  performDefaults();\n  return composite;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 727,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 89,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 70
      },
      "nodeContext" : "typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "org.jkiss.dbeaver.ui.preferences.GridData"
  }, {
    "nodeContext" : "new GridData(GridData.FILL_BOTH)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 160,
      "startColumnNumber" : 40,
      "endLineNumber" : 160,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 160,
        "startColumnNumber" : 12,
        "endLineNumber" : 160,
        "endColumnNumber" : 73
      },
      "nodeContext" : "groupSettings.setLayoutData(new GridData(GridData.FILL_BOTH))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 160,
        "startColumnNumber" : 12,
        "endLineNumber" : 160,
        "endColumnNumber" : 74
      },
      "nodeContext" : "groupSettings.setLayoutData(new GridData(GridData.FILL_BOTH));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5618,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 261,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Group groupSettings=UIUtils.createControlGroup(composite,CoreMessages.pref_page_connection_types_group_settings,2,GridData.VERTICAL_ALIGN_BEGINNING,300);\n  groupSettings.setLayoutData(new GridData(GridData.FILL_BOTH));\n  typeId=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_id,null);\n  typeId.addModifyListener(e -> {\n    getSelectedType().setId(typeId.getText());\n    updateTableInfo();\n  }\n);\n  typeName=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_name,null);\n  typeName.addModifyListener(e -> {\n    getSelectedType().setName(typeName.getText());\n    updateTableInfo();\n  }\n);\n  typeDescription=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_description,null);\n  typeDescription.addModifyListener(e -> {\n    getSelectedType().setDescription(typeDescription.getText());\n    updateTableInfo();\n  }\n);\n{\n    UIUtils.createControlLabel(groupSettings,CoreMessages.pref_page_connection_types_label_color);\n    colorPicker=new ColorSelector(groupSettings);\n    colorPicker.addListener(event -> {\n      getSelectedType().setColor(StringConverter.asString(colorPicker.getColorValue()));\n      updateTableInfo();\n    }\n);\n  }\n  autocommitCheck=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_auto_commit_by_default,null,false,2);\n  autocommitCheck.addSelectionListener(new SelectionAdapter(){\n    @Override public void widgetSelected(    SelectionEvent e){\n      getSelectedType().setAutocommit(autocommitCheck.getSelection());\n    }\n  }\n);\n  confirmCheck=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_confirm_sql_execution,null,false,2);\n  confirmCheck.addSelectionListener(new SelectionAdapter(){\n    @Override public void widgetSelected(    SelectionEvent e){\n      getSelectedType().setConfirmExecute(confirmCheck.getSelection());\n    }\n  }\n);\n  confirmDataChange=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_confirm_data_change,CoreMessages.pref_page_connection_types_label_confirm_data_change_tip,false,2);\n  confirmDataChange.addSelectionListener(new SelectionAdapter(){\n    @Override public void widgetSelected(    SelectionEvent e){\n      getSelectedType().setConfirmDataChange(confirmDataChange.getSelection());\n    }\n  }\n);\n  Button epButton=UIUtils.createDialogButton(groupSettings,\"Edit permissions ...\",new SelectionAdapter(){\n    @Override public void widgetSelected(    SelectionEvent e){\n      EditConnectionPermissionsDialog dialog=new EditConnectionPermissionsDialog(getShell(),getSelectedType().getModifyPermission());\n      if (dialog.open() == IDialogConstants.OK_ID) {\n        getSelectedType().setModifyPermissions(dialog.getAccessRestrictions());\n      }\n    }\n  }\n);\n  GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);\n  gd.horizontalSpan=2;\n  epButton.setLayoutData(gd);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 356,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9239,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 266,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Composite composite=UIUtils.createComposite(parent,1);\n{\n    typeTable=new Table(composite,SWT.SINGLE | SWT.BORDER);\n    typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n    UIUtils.createTableColumn(typeTable,SWT.LEFT,CoreMessages.pref_page_connection_types_label_table_column_name);\n    UIUtils.createTableColumn(typeTable,SWT.LEFT,CoreMessages.pref_page_connection_types_label_table_column_description);\n    typeTable.setHeaderVisible(true);\n    typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n    typeTable.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        showSelectedType(getSelectedType());\n      }\n    }\n);\n    ToolBar toolbar=new ToolBar(composite,SWT.FLAT | SWT.HORIZONTAL);\n    final ToolItem newButton=new ToolItem(toolbar,SWT.NONE);\n    newButton.setImage(DBeaverIcons.getImage(UIIcon.ROW_ADD));\n    deleteButton=new ToolItem(toolbar,SWT.NONE);\n    deleteButton.setImage(DBeaverIcons.getImage(UIIcon.ROW_DELETE));\n    newButton.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        String name;\n        for (int i=1; ; i++) {\n          name=\"Type\" + i;\n          boolean hasName=false;\n          for (          DBPConnectionType type : changedInfo.keySet()) {\n            if (type.getName().equals(name)) {\n              hasName=true;\n              break;\n            }\n          }\n          if (!hasName) {\n            break;\n          }\n        }\n        DBPConnectionType newType=new DBPConnectionType(name.toLowerCase(),name,\"255,255,255\",\"New type\",true,false,true);\n        addTypeToTable(newType,newType);\n        typeTable.select(typeTable.getItemCount() - 1);\n        typeTable.showSelection();\n        showSelectedType(newType);\n      }\n    }\n);\n    this.deleteButton.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        DBPConnectionType connectionType=getSelectedType();\n        if (!UIUtils.confirmAction(getShell(),CoreMessages.pref_page_connection_types_label_delete_connection_type,NLS.bind(CoreMessages.pref_page_connection_types_label_delete_connection_type_description,connectionType.getName(),DBPConnectionType.DEFAULT_TYPE.getName()))) {\n          return;\n        }\n        changedInfo.remove(connectionType);\n        int index=typeTable.getSelectionIndex();\n        typeTable.remove(index);\n        if (index > 0)         index--;\n        typeTable.select(index);\n        showSelectedType(getSelectedType());\n      }\n    }\n);\n  }\n{\n    Group groupSettings=UIUtils.createControlGroup(composite,CoreMessages.pref_page_connection_types_group_settings,2,GridData.VERTICAL_ALIGN_BEGINNING,300);\n    groupSettings.setLayoutData(new GridData(GridData.FILL_BOTH));\n    typeId=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_id,null);\n    typeId.addModifyListener(e -> {\n      getSelectedType().setId(typeId.getText());\n      updateTableInfo();\n    }\n);\n    typeName=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_name,null);\n    typeName.addModifyListener(e -> {\n      getSelectedType().setName(typeName.getText());\n      updateTableInfo();\n    }\n);\n    typeDescription=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_description,null);\n    typeDescription.addModifyListener(e -> {\n      getSelectedType().setDescription(typeDescription.getText());\n      updateTableInfo();\n    }\n);\n{\n      UIUtils.createControlLabel(groupSettings,CoreMessages.pref_page_connection_types_label_color);\n      colorPicker=new ColorSelector(groupSettings);\n      colorPicker.addListener(event -> {\n        getSelectedType().setColor(StringConverter.asString(colorPicker.getColorValue()));\n        updateTableInfo();\n      }\n);\n    }\n    autocommitCheck=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_auto_commit_by_default,null,false,2);\n    autocommitCheck.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setAutocommit(autocommitCheck.getSelection());\n      }\n    }\n);\n    confirmCheck=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_confirm_sql_execution,null,false,2);\n    confirmCheck.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setConfirmExecute(confirmCheck.getSelection());\n      }\n    }\n);\n    confirmDataChange=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_confirm_data_change,CoreMessages.pref_page_connection_types_label_confirm_data_change_tip,false,2);\n    confirmDataChange.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setConfirmDataChange(confirmDataChange.getSelection());\n      }\n    }\n);\n    Button epButton=UIUtils.createDialogButton(groupSettings,\"Edit permissions ...\",new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        EditConnectionPermissionsDialog dialog=new EditConnectionPermissionsDialog(getShell(),getSelectedType().getModifyPermission());\n        if (dialog.open() == IDialogConstants.OK_ID) {\n          getSelectedType().setModifyPermissions(dialog.getAccessRestrictions());\n        }\n      }\n    }\n);\n    GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);\n    gd.horizontalSpan=2;\n    epButton.setLayoutData(gd);\n  }\n  performDefaults();\n  return composite;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 715,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9314,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 266,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected Control createContents(final Composite parent){\n  Composite composite=UIUtils.createComposite(parent,1);\n{\n    typeTable=new Table(composite,SWT.SINGLE | SWT.BORDER);\n    typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n    UIUtils.createTableColumn(typeTable,SWT.LEFT,CoreMessages.pref_page_connection_types_label_table_column_name);\n    UIUtils.createTableColumn(typeTable,SWT.LEFT,CoreMessages.pref_page_connection_types_label_table_column_description);\n    typeTable.setHeaderVisible(true);\n    typeTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n    typeTable.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        showSelectedType(getSelectedType());\n      }\n    }\n);\n    ToolBar toolbar=new ToolBar(composite,SWT.FLAT | SWT.HORIZONTAL);\n    final ToolItem newButton=new ToolItem(toolbar,SWT.NONE);\n    newButton.setImage(DBeaverIcons.getImage(UIIcon.ROW_ADD));\n    deleteButton=new ToolItem(toolbar,SWT.NONE);\n    deleteButton.setImage(DBeaverIcons.getImage(UIIcon.ROW_DELETE));\n    newButton.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        String name;\n        for (int i=1; ; i++) {\n          name=\"Type\" + i;\n          boolean hasName=false;\n          for (          DBPConnectionType type : changedInfo.keySet()) {\n            if (type.getName().equals(name)) {\n              hasName=true;\n              break;\n            }\n          }\n          if (!hasName) {\n            break;\n          }\n        }\n        DBPConnectionType newType=new DBPConnectionType(name.toLowerCase(),name,\"255,255,255\",\"New type\",true,false,true);\n        addTypeToTable(newType,newType);\n        typeTable.select(typeTable.getItemCount() - 1);\n        typeTable.showSelection();\n        showSelectedType(newType);\n      }\n    }\n);\n    this.deleteButton.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        DBPConnectionType connectionType=getSelectedType();\n        if (!UIUtils.confirmAction(getShell(),CoreMessages.pref_page_connection_types_label_delete_connection_type,NLS.bind(CoreMessages.pref_page_connection_types_label_delete_connection_type_description,connectionType.getName(),DBPConnectionType.DEFAULT_TYPE.getName()))) {\n          return;\n        }\n        changedInfo.remove(connectionType);\n        int index=typeTable.getSelectionIndex();\n        typeTable.remove(index);\n        if (index > 0)         index--;\n        typeTable.select(index);\n        showSelectedType(getSelectedType());\n      }\n    }\n);\n  }\n{\n    Group groupSettings=UIUtils.createControlGroup(composite,CoreMessages.pref_page_connection_types_group_settings,2,GridData.VERTICAL_ALIGN_BEGINNING,300);\n    groupSettings.setLayoutData(new GridData(GridData.FILL_BOTH));\n    typeId=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_id,null);\n    typeId.addModifyListener(e -> {\n      getSelectedType().setId(typeId.getText());\n      updateTableInfo();\n    }\n);\n    typeName=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_name,null);\n    typeName.addModifyListener(e -> {\n      getSelectedType().setName(typeName.getText());\n      updateTableInfo();\n    }\n);\n    typeDescription=UIUtils.createLabelText(groupSettings,CoreMessages.pref_page_connection_types_label_description,null);\n    typeDescription.addModifyListener(e -> {\n      getSelectedType().setDescription(typeDescription.getText());\n      updateTableInfo();\n    }\n);\n{\n      UIUtils.createControlLabel(groupSettings,CoreMessages.pref_page_connection_types_label_color);\n      colorPicker=new ColorSelector(groupSettings);\n      colorPicker.addListener(event -> {\n        getSelectedType().setColor(StringConverter.asString(colorPicker.getColorValue()));\n        updateTableInfo();\n      }\n);\n    }\n    autocommitCheck=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_auto_commit_by_default,null,false,2);\n    autocommitCheck.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setAutocommit(autocommitCheck.getSelection());\n      }\n    }\n);\n    confirmCheck=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_confirm_sql_execution,null,false,2);\n    confirmCheck.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setConfirmExecute(confirmCheck.getSelection());\n      }\n    }\n);\n    confirmDataChange=UIUtils.createCheckbox(groupSettings,CoreMessages.pref_page_connection_types_label_confirm_data_change,CoreMessages.pref_page_connection_types_label_confirm_data_change_tip,false,2);\n    confirmDataChange.addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        getSelectedType().setConfirmDataChange(confirmDataChange.getSelection());\n      }\n    }\n);\n    Button epButton=UIUtils.createDialogButton(groupSettings,\"Edit permissions ...\",new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        EditConnectionPermissionsDialog dialog=new EditConnectionPermissionsDialog(getShell(),getSelectedType().getModifyPermission());\n        if (dialog.open() == IDialogConstants.OK_ID) {\n          getSelectedType().setModifyPermissions(dialog.getAccessRestrictions());\n        }\n      }\n    }\n);\n    GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);\n    gd.horizontalSpan=2;\n    epButton.setLayoutData(gd);\n  }\n  performDefaults();\n  return composite;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 727,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 160,
        "startColumnNumber" : 12,
        "endLineNumber" : 160,
        "endColumnNumber" : 74
      },
      "nodeContext" : "groupSettings.setLayoutData(new GridData(GridData.FILL_BOTH));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "org.jkiss.dbeaver.ui.preferences.GridData"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 85,
    "startColumnNumber" : 36,
    "endLineNumber" : 85,
    "endColumnNumber" : 68
  }, {
    "charLength" : 32,
    "startLineNumber" : 89,
    "startColumnNumber" : 36,
    "endLineNumber" : 89,
    "endColumnNumber" : 68
  }, {
    "charLength" : 32,
    "startLineNumber" : 160,
    "startColumnNumber" : 40,
    "endLineNumber" : 160,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}