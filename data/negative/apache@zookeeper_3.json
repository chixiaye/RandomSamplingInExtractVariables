{
  "id" : 3,
  "expression" : "errorLine",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/jute/compiler/generated/TokenMgrError.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "errorLine",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 117,
      "startColumnNumber" : 11,
      "endLineNumber" : 117,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 116,
        "startColumnNumber" : 13,
        "endLineNumber" : 120,
        "endColumnNumber" : 55
      },
      "nodeContext" : "\"Lexical error at line \" + errorLine + \", column \"+ errorColumn+ \".  Encountered: \"+ (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar+ \"), \")+ \"after : \\\"\"+ addEscapes(errorAfter)+ \"\\\"\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 31,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 116,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 56
      },
      "nodeContext" : "(\"Lexical error at line \" + errorLine + \", column \"+ errorColumn+ \".  Encountered: \"+ (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar+ \"), \")+ \"after : \\\"\"+ addEscapes(errorAfter)+ \"\\\"\")",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 32,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 116,
        "startColumnNumber" : 6,
        "endLineNumber" : 120,
        "endColumnNumber" : 57
      },
      "nodeContext" : "return (\"Lexical error at line \" + errorLine + \", column \"+ errorColumn+ \".  Encountered: \"+ (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar+ \"), \")+ \"after : \\\"\"+ addEscapes(errorAfter)+ \"\\\"\");\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 33,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 305,
        "startLineNumber" : 115,
        "startColumnNumber" : 136,
        "endLineNumber" : 121,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  return (\"Lexical error at line \" + errorLine + \", column \"+ errorColumn+ \".  Encountered: \"+ (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar+ \"), \")+ \"after : \\\"\"+ addEscapes(errorAfter)+ \"\\\"\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1039,
        "startLineNumber" : 103,
        "startColumnNumber" : 3,
        "endLineNumber" : 121,
        "endColumnNumber" : 4
      },
      "nodeContext" : "/** \n * Returns a detailed message for the Error when it is thrown by the token manager to indicate a lexical error. Parameters :  EOFSeen     : indicates if EOF caused the lexicl error curLexState : lexical state in which this error occured errorLine   : line number when the error occured errorColumn : column number when the error occured errorAfter  : prefix that was seen before this error occured curchar     : the offending character Note: You can customize the lexical error message by modifying this method.\n */\nprotected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){\n  return (\"Lexical error at line \" + errorLine + \", column \"+ errorColumn+ \".  Encountered: \"+ (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar+ \"), \")+ \"after : \\\"\"+ addEscapes(errorAfter)+ \"\\\"\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 60,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 116,
        "startColumnNumber" : 13,
        "endLineNumber" : 120,
        "endColumnNumber" : 55
      },
      "nodeContext" : "\"Lexical error at line \" + errorLine + \", column \"+ errorColumn+ \".  Encountered: \"+ (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar+ \"), \")+ \"after : \\\"\"+ addEscapes(errorAfter)+ \"\\\"\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 31,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 117,
    "startColumnNumber" : 11,
    "endLineNumber" : 117,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ ]
}