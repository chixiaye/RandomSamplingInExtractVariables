{
  "id" : 506,
  "expression" : "new Integer[3]",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/flowable/FlowableWindowTests.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Integer[3]",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 48,
      "startColumnNumber" : 47,
      "endLineNumber" : 48,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 48,
        "startColumnNumber" : 26,
        "endLineNumber" : 48,
        "endColumnNumber" : 62
      },
      "nodeContext" : "lists.get(0).toArray(new Integer[3])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertArrayEquals(lists.get(0).toArray(new Integer[3]),new Integer[]{1,2,3})",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertArrayEquals(lists.get(0).toArray(new Integer[3]),new Integer[]{1,2,3});\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 884,
        "startLineNumber" : 28,
        "startColumnNumber" : 29,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ArrayList<List<Integer>> lists=new ArrayList<List<Integer>>();\n  Flowable.concat(Flowable.just(1,2,3,4,5,6).window(3).map(new Function<Flowable<Integer>,Flowable<List<Integer>>>(){\n    @Override public Flowable<List<Integer>> apply(    Flowable<Integer> xs){\n      return xs.toList();\n    }\n  }\n)).toBlocking().forEach(new Consumer<List<Integer>>(){\n    @Override public void accept(    List<Integer> xs){\n      lists.add(xs);\n    }\n  }\n);\n  assertArrayEquals(lists.get(0).toArray(new Integer[3]),new Integer[]{1,2,3});\n  assertArrayEquals(lists.get(1).toArray(new Integer[3]),new Integer[]{4,5,6});\n  assertEquals(2,lists.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWindow(){\n  final ArrayList<List<Integer>> lists=new ArrayList<List<Integer>>();\n  Flowable.concat(Flowable.just(1,2,3,4,5,6).window(3).map(new Function<Flowable<Integer>,Flowable<List<Integer>>>(){\n    @Override public Flowable<List<Integer>> apply(    Flowable<Integer> xs){\n      return xs.toList();\n    }\n  }\n)).toBlocking().forEach(new Consumer<List<Integer>>(){\n    @Override public void accept(    List<Integer> xs){\n      lists.add(xs);\n    }\n  }\n);\n  assertArrayEquals(lists.get(0).toArray(new Integer[3]),new Integer[]{1,2,3});\n  assertArrayEquals(lists.get(1).toArray(new Integer[3]),new Integer[]{4,5,6});\n  assertEquals(2,lists.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 177,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertArrayEquals(lists.get(0).toArray(new Integer[3]),new Integer[]{1,2,3});\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "java.lang.Integer[]"
  }, {
    "nodeContext" : "new Integer[3]",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 49,
      "startColumnNumber" : 47,
      "endLineNumber" : 49,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 49,
        "startColumnNumber" : 26,
        "endLineNumber" : 49,
        "endColumnNumber" : 62
      },
      "nodeContext" : "lists.get(1).toArray(new Integer[3])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertArrayEquals(lists.get(1).toArray(new Integer[3]),new Integer[]{4,5,6})",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertArrayEquals(lists.get(1).toArray(new Integer[3]),new Integer[]{4,5,6});\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 884,
        "startLineNumber" : 28,
        "startColumnNumber" : 29,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ArrayList<List<Integer>> lists=new ArrayList<List<Integer>>();\n  Flowable.concat(Flowable.just(1,2,3,4,5,6).window(3).map(new Function<Flowable<Integer>,Flowable<List<Integer>>>(){\n    @Override public Flowable<List<Integer>> apply(    Flowable<Integer> xs){\n      return xs.toList();\n    }\n  }\n)).toBlocking().forEach(new Consumer<List<Integer>>(){\n    @Override public void accept(    List<Integer> xs){\n      lists.add(xs);\n    }\n  }\n);\n  assertArrayEquals(lists.get(0).toArray(new Integer[3]),new Integer[]{1,2,3});\n  assertArrayEquals(lists.get(1).toArray(new Integer[3]),new Integer[]{4,5,6});\n  assertEquals(2,lists.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWindow(){\n  final ArrayList<List<Integer>> lists=new ArrayList<List<Integer>>();\n  Flowable.concat(Flowable.just(1,2,3,4,5,6).window(3).map(new Function<Flowable<Integer>,Flowable<List<Integer>>>(){\n    @Override public Flowable<List<Integer>> apply(    Flowable<Integer> xs){\n      return xs.toList();\n    }\n  }\n)).toBlocking().forEach(new Consumer<List<Integer>>(){\n    @Override public void accept(    List<Integer> xs){\n      lists.add(xs);\n    }\n  }\n);\n  assertArrayEquals(lists.get(0).toArray(new Integer[3]),new Integer[]{1,2,3});\n  assertArrayEquals(lists.get(1).toArray(new Integer[3]),new Integer[]{4,5,6});\n  assertEquals(2,lists.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 177,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertArrayEquals(lists.get(1).toArray(new Integer[3]),new Integer[]{4,5,6});\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "java.lang.Integer[]"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 48,
    "startColumnNumber" : 47,
    "endLineNumber" : 48,
    "endColumnNumber" : 61
  }, {
    "charLength" : 14,
    "startLineNumber" : 49,
    "startColumnNumber" : 47,
    "endLineNumber" : 49,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}