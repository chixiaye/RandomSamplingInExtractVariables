{
  "id" : 79,
  "expression" : "TextStyle",
  "projectName" : "termux@termux-app",
  "commitID" : "36cc010a87c1cbc96f504540f1418c3c5fde96e5",
  "filePath" : "app/src/main/java/com/termux/view/TerminalRenderer.java",
  "occurrences" : 12,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TextStyle",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 169,
      "startColumnNumber" : 18,
      "endLineNumber" : 169,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 169,
        "startColumnNumber" : 18,
        "endLineNumber" : 169,
        "endColumnNumber" : 54
      },
      "nodeContext" : "TextStyle.decodeForeColor(textStyle)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 169,
        "startColumnNumber" : 6,
        "endLineNumber" : 169,
        "endColumnNumber" : 54
      },
      "nodeContext" : "foreColor=TextStyle.decodeForeColor(textStyle)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 169,
        "startColumnNumber" : 2,
        "endLineNumber" : 169,
        "endColumnNumber" : 55
      },
      "nodeContext" : "int foreColor=TextStyle.decodeForeColor(textStyle);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 169,
        "startColumnNumber" : 2,
        "endLineNumber" : 169,
        "endColumnNumber" : 55
      },
      "nodeContext" : "int foreColor=TextStyle.decodeForeColor(textStyle);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.termux.terminal.TextStyle"
  }, {
    "nodeContext" : "TextStyle",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 170,
      "startColumnNumber" : 18,
      "endLineNumber" : 170,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 170,
        "startColumnNumber" : 18,
        "endLineNumber" : 170,
        "endColumnNumber" : 54
      },
      "nodeContext" : "TextStyle.decodeBackColor(textStyle)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 170,
        "startColumnNumber" : 6,
        "endLineNumber" : 170,
        "endColumnNumber" : 54
      },
      "nodeContext" : "backColor=TextStyle.decodeBackColor(textStyle)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 170,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 55
      },
      "nodeContext" : "int backColor=TextStyle.decodeBackColor(textStyle);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 170,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 55
      },
      "nodeContext" : "int backColor=TextStyle.decodeBackColor(textStyle);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.termux.terminal.TextStyle"
  }, {
    "nodeContext" : "TextStyle",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 171,
      "startColumnNumber" : 21,
      "endLineNumber" : 171,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 171,
        "startColumnNumber" : 21,
        "endLineNumber" : 171,
        "endColumnNumber" : 54
      },
      "nodeContext" : "TextStyle.decodeEffect(textStyle)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 171,
        "startColumnNumber" : 12,
        "endLineNumber" : 171,
        "endColumnNumber" : 54
      },
      "nodeContext" : "effect=TextStyle.decodeEffect(textStyle)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 171,
        "startColumnNumber" : 2,
        "endLineNumber" : 171,
        "endColumnNumber" : 55
      },
      "nodeContext" : "final int effect=TextStyle.decodeEffect(textStyle);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 171,
        "startColumnNumber" : 2,
        "endLineNumber" : 171,
        "endColumnNumber" : 55
      },
      "nodeContext" : "final int effect=TextStyle.decodeEffect(textStyle);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.termux.terminal.TextStyle"
  }, {
    "nodeContext" : "TextStyle",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 186,
      "startColumnNumber" : 55,
      "endLineNumber" : 186,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 186,
        "startColumnNumber" : 55,
        "endLineNumber" : 186,
        "endColumnNumber" : 92
      },
      "nodeContext" : "TextStyle.CHARACTER_ATTRIBUTE_INVERSE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 186,
        "startColumnNumber" : 54,
        "endLineNumber" : 186,
        "endColumnNumber" : 93
      },
      "nodeContext" : "(TextStyle.CHARACTER_ATTRIBUTE_INVERSE)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 186,
        "startColumnNumber" : 45,
        "endLineNumber" : 186,
        "endColumnNumber" : 93
      },
      "nodeContext" : "effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 186,
        "startColumnNumber" : 44,
        "endLineNumber" : 186,
        "endColumnNumber" : 94
      },
      "nodeContext" : "(effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 186,
        "startColumnNumber" : 44,
        "endLineNumber" : 186,
        "endColumnNumber" : 99
      },
      "nodeContext" : "(effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 186,
        "startColumnNumber" : 29,
        "endLineNumber" : 186,
        "endColumnNumber" : 99
      },
      "nodeContext" : "reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 186,
        "startColumnNumber" : 10,
        "endLineNumber" : 186,
        "endColumnNumber" : 99
      },
      "nodeContext" : "reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 186,
        "startColumnNumber" : 2,
        "endLineNumber" : 186,
        "endColumnNumber" : 100
      },
      "nodeContext" : "boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 186,
        "startColumnNumber" : 2,
        "endLineNumber" : 186,
        "endColumnNumber" : 100
      },
      "nodeContext" : "boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "com.termux.terminal.TextStyle"
  }, {
    "nodeContext" : "TextStyle",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 194,
      "startColumnNumber" : 19,
      "endLineNumber" : 194,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 194,
        "startColumnNumber" : 19,
        "endLineNumber" : 194,
        "endColumnNumber" : 51
      },
      "nodeContext" : "TextStyle.COLOR_INDEX_BACKGROUND",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 194,
        "startColumnNumber" : 6,
        "endLineNumber" : 194,
        "endColumnNumber" : 51
      },
      "nodeContext" : "backColor != TextStyle.COLOR_INDEX_BACKGROUND",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 198,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n  mTextPaint.setColor(palette[backColor]);\n  canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 194,
        "startColumnNumber" : 6,
        "endLineNumber" : 194,
        "endColumnNumber" : 51
      },
      "nodeContext" : "backColor != TextStyle.COLOR_INDEX_BACKGROUND",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.termux.terminal.TextStyle"
  }, {
    "nodeContext" : "TextStyle",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 200,
      "startColumnNumber" : 16,
      "endLineNumber" : 200,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 200,
        "startColumnNumber" : 16,
        "endLineNumber" : 200,
        "endColumnNumber" : 55
      },
      "nodeContext" : "TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 200,
        "startColumnNumber" : 7,
        "endLineNumber" : 200,
        "endColumnNumber" : 55
      },
      "nodeContext" : "effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 200,
        "startColumnNumber" : 6,
        "endLineNumber" : 200,
        "endColumnNumber" : 56
      },
      "nodeContext" : "(effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 200,
        "startColumnNumber" : 6,
        "endLineNumber" : 200,
        "endColumnNumber" : 61
      },
      "nodeContext" : "(effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 200,
        "startColumnNumber" : 2,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 215,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 200,
        "startColumnNumber" : 6,
        "endLineNumber" : 200,
        "endColumnNumber" : 61
      },
      "nodeContext" : "(effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.termux.terminal.TextStyle"
  }, {
    "nodeContext" : "TextStyle",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 202,
      "startColumnNumber" : 35,
      "endLineNumber" : 202,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 202,
        "startColumnNumber" : 35,
        "endLineNumber" : 202,
        "endColumnNumber" : 69
      },
      "nodeContext" : "TextStyle.CHARACTER_ATTRIBUTE_BOLD",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 202,
        "startColumnNumber" : 35,
        "endLineNumber" : 202,
        "endColumnNumber" : 107
      },
      "nodeContext" : "TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 202,
        "startColumnNumber" : 34,
        "endLineNumber" : 202,
        "endColumnNumber" : 108
      },
      "nodeContext" : "(TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 202,
        "startColumnNumber" : 25,
        "endLineNumber" : 202,
        "endColumnNumber" : 108
      },
      "nodeContext" : "effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 202,
        "startColumnNumber" : 24,
        "endLineNumber" : 202,
        "endColumnNumber" : 109
      },
      "nodeContext" : "(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 202,
        "startColumnNumber" : 24,
        "endLineNumber" : 202,
        "endColumnNumber" : 114
      },
      "nodeContext" : "(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 202,
        "startColumnNumber" : 17,
        "endLineNumber" : 202,
        "endColumnNumber" : 114
      },
      "nodeContext" : "bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 202,
        "startColumnNumber" : 3,
        "endLineNumber" : 202,
        "endColumnNumber" : 115
      },
      "nodeContext" : "final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 200,
        "startColumnNumber" : 63,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 200,
        "startColumnNumber" : 2,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 215,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 202,
        "startColumnNumber" : 3,
        "endLineNumber" : 202,
        "endColumnNumber" : 115
      },
      "nodeContext" : "final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "com.termux.terminal.TextStyle"
  }, {
    "nodeContext" : "TextStyle",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 202,
      "startColumnNumber" : 72,
      "endLineNumber" : 202,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 202,
        "startColumnNumber" : 72,
        "endLineNumber" : 202,
        "endColumnNumber" : 107
      },
      "nodeContext" : "TextStyle.CHARACTER_ATTRIBUTE_BLINK",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 202,
        "startColumnNumber" : 35,
        "endLineNumber" : 202,
        "endColumnNumber" : 107
      },
      "nodeContext" : "TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 202,
        "startColumnNumber" : 34,
        "endLineNumber" : 202,
        "endColumnNumber" : 108
      },
      "nodeContext" : "(TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 202,
        "startColumnNumber" : 25,
        "endLineNumber" : 202,
        "endColumnNumber" : 108
      },
      "nodeContext" : "effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 202,
        "startColumnNumber" : 24,
        "endLineNumber" : 202,
        "endColumnNumber" : 109
      },
      "nodeContext" : "(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 202,
        "startColumnNumber" : 24,
        "endLineNumber" : 202,
        "endColumnNumber" : 114
      },
      "nodeContext" : "(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 202,
        "startColumnNumber" : 17,
        "endLineNumber" : 202,
        "endColumnNumber" : 114
      },
      "nodeContext" : "bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 202,
        "startColumnNumber" : 3,
        "endLineNumber" : 202,
        "endColumnNumber" : 115
      },
      "nodeContext" : "final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 200,
        "startColumnNumber" : 63,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 200,
        "startColumnNumber" : 2,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 215,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 202,
        "startColumnNumber" : 3,
        "endLineNumber" : 202,
        "endColumnNumber" : 115
      },
      "nodeContext" : "final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "com.termux.terminal.TextStyle"
  }, {
    "nodeContext" : "TextStyle",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 203,
      "startColumnNumber" : 39,
      "endLineNumber" : 203,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 203,
        "startColumnNumber" : 39,
        "endLineNumber" : 203,
        "endColumnNumber" : 78
      },
      "nodeContext" : "TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 203,
        "startColumnNumber" : 30,
        "endLineNumber" : 203,
        "endColumnNumber" : 78
      },
      "nodeContext" : "effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 203,
        "startColumnNumber" : 29,
        "endLineNumber" : 203,
        "endColumnNumber" : 79
      },
      "nodeContext" : "(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 203,
        "startColumnNumber" : 29,
        "endLineNumber" : 203,
        "endColumnNumber" : 84
      },
      "nodeContext" : "(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 203,
        "startColumnNumber" : 17,
        "endLineNumber" : 203,
        "endColumnNumber" : 84
      },
      "nodeContext" : "underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 203,
        "startColumnNumber" : 3,
        "endLineNumber" : 203,
        "endColumnNumber" : 85
      },
      "nodeContext" : "final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 200,
        "startColumnNumber" : 63,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 200,
        "startColumnNumber" : 2,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 215,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 203,
        "startColumnNumber" : 3,
        "endLineNumber" : 203,
        "endColumnNumber" : 85
      },
      "nodeContext" : "final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "com.termux.terminal.TextStyle"
  }, {
    "nodeContext" : "TextStyle",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 204,
      "startColumnNumber" : 36,
      "endLineNumber" : 204,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 204,
        "startColumnNumber" : 36,
        "endLineNumber" : 204,
        "endColumnNumber" : 72
      },
      "nodeContext" : "TextStyle.CHARACTER_ATTRIBUTE_ITALIC",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 204,
        "startColumnNumber" : 27,
        "endLineNumber" : 204,
        "endColumnNumber" : 72
      },
      "nodeContext" : "effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 204,
        "startColumnNumber" : 26,
        "endLineNumber" : 204,
        "endColumnNumber" : 73
      },
      "nodeContext" : "(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 204,
        "startColumnNumber" : 26,
        "endLineNumber" : 204,
        "endColumnNumber" : 78
      },
      "nodeContext" : "(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 204,
        "startColumnNumber" : 17,
        "endLineNumber" : 204,
        "endColumnNumber" : 78
      },
      "nodeContext" : "italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 204,
        "startColumnNumber" : 3,
        "endLineNumber" : 204,
        "endColumnNumber" : 79
      },
      "nodeContext" : "final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 200,
        "startColumnNumber" : 63,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 200,
        "startColumnNumber" : 2,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 215,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 204,
        "startColumnNumber" : 3,
        "endLineNumber" : 204,
        "endColumnNumber" : 79
      },
      "nodeContext" : "final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "com.termux.terminal.TextStyle"
  }, {
    "nodeContext" : "TextStyle",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 205,
      "startColumnNumber" : 43,
      "endLineNumber" : 205,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 205,
        "startColumnNumber" : 43,
        "endLineNumber" : 205,
        "endColumnNumber" : 86
      },
      "nodeContext" : "TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 205,
        "startColumnNumber" : 34,
        "endLineNumber" : 205,
        "endColumnNumber" : 86
      },
      "nodeContext" : "effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 205,
        "startColumnNumber" : 33,
        "endLineNumber" : 205,
        "endColumnNumber" : 87
      },
      "nodeContext" : "(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 205,
        "startColumnNumber" : 33,
        "endLineNumber" : 205,
        "endColumnNumber" : 92
      },
      "nodeContext" : "(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 205,
        "startColumnNumber" : 17,
        "endLineNumber" : 205,
        "endColumnNumber" : 92
      },
      "nodeContext" : "strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 205,
        "startColumnNumber" : 3,
        "endLineNumber" : 205,
        "endColumnNumber" : 93
      },
      "nodeContext" : "final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 200,
        "startColumnNumber" : 63,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 200,
        "startColumnNumber" : 2,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 215,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 205,
        "startColumnNumber" : 3,
        "endLineNumber" : 205,
        "endColumnNumber" : 93
      },
      "nodeContext" : "final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "com.termux.terminal.TextStyle"
  }, {
    "nodeContext" : "TextStyle",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 206,
      "startColumnNumber" : 33,
      "endLineNumber" : 206,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 206,
        "startColumnNumber" : 33,
        "endLineNumber" : 206,
        "endColumnNumber" : 66
      },
      "nodeContext" : "TextStyle.CHARACTER_ATTRIBUTE_DIM",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 206,
        "startColumnNumber" : 24,
        "endLineNumber" : 206,
        "endColumnNumber" : 66
      },
      "nodeContext" : "effect & TextStyle.CHARACTER_ATTRIBUTE_DIM",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 206,
        "startColumnNumber" : 23,
        "endLineNumber" : 206,
        "endColumnNumber" : 67
      },
      "nodeContext" : "(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 206,
        "startColumnNumber" : 23,
        "endLineNumber" : 206,
        "endColumnNumber" : 72
      },
      "nodeContext" : "(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 206,
        "startColumnNumber" : 17,
        "endLineNumber" : 206,
        "endColumnNumber" : 72
      },
      "nodeContext" : "dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 206,
        "startColumnNumber" : 3,
        "endLineNumber" : 206,
        "endColumnNumber" : 73
      },
      "nodeContext" : "final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 200,
        "startColumnNumber" : 63,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 200,
        "startColumnNumber" : 2,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n  int foreColorARGB=palette[actualForeColor];\n  if (dim) {\n    int red=(0xFF & (foreColorARGB >> 16));\n    int green=(0xFF & (foreColorARGB >> 8));\n    int blue=(0xFF & foreColorARGB);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColorARGB);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 215,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 206,
        "startColumnNumber" : 3,
        "endLineNumber" : 206,
        "endColumnNumber" : 73
      },
      "nodeContext" : "final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "com.termux.terminal.TextStyle"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 169,
    "startColumnNumber" : 18,
    "endLineNumber" : 169,
    "endColumnNumber" : 27
  }, {
    "charLength" : 9,
    "startLineNumber" : 170,
    "startColumnNumber" : 18,
    "endLineNumber" : 170,
    "endColumnNumber" : 27
  }, {
    "charLength" : 9,
    "startLineNumber" : 171,
    "startColumnNumber" : 21,
    "endLineNumber" : 171,
    "endColumnNumber" : 30
  }, {
    "charLength" : 9,
    "startLineNumber" : 186,
    "startColumnNumber" : 55,
    "endLineNumber" : 186,
    "endColumnNumber" : 64
  }, {
    "charLength" : 9,
    "startLineNumber" : 194,
    "startColumnNumber" : 19,
    "endLineNumber" : 194,
    "endColumnNumber" : 28
  }, {
    "charLength" : 9,
    "startLineNumber" : 200,
    "startColumnNumber" : 16,
    "endLineNumber" : 200,
    "endColumnNumber" : 25
  }, {
    "charLength" : 9,
    "startLineNumber" : 202,
    "startColumnNumber" : 35,
    "endLineNumber" : 202,
    "endColumnNumber" : 44
  }, {
    "charLength" : 9,
    "startLineNumber" : 202,
    "startColumnNumber" : 72,
    "endLineNumber" : 202,
    "endColumnNumber" : 81
  }, {
    "charLength" : 9,
    "startLineNumber" : 203,
    "startColumnNumber" : 39,
    "endLineNumber" : 203,
    "endColumnNumber" : 48
  }, {
    "charLength" : 9,
    "startLineNumber" : 204,
    "startColumnNumber" : 36,
    "endLineNumber" : 204,
    "endColumnNumber" : 45
  }, {
    "charLength" : 9,
    "startLineNumber" : 205,
    "startColumnNumber" : 43,
    "endLineNumber" : 205,
    "endColumnNumber" : 52
  }, {
    "charLength" : 9,
    "startLineNumber" : 206,
    "startColumnNumber" : 33,
    "endLineNumber" : 206,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 6
  } ]
}