{
  "id" : 342,
  "expression" : "matches",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "matches",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 41,
      "startColumnNumber" : 11,
      "endLineNumber" : 41,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 19
      },
      "nodeContext" : "return matches;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 262,
        "startLineNumber" : 28,
        "startColumnNumber" : 66,
        "endLineNumber" : 42,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int N=n + m, matches=0;\n  int[] visited=new int[n];\n  int[] next=new int[N];\n  Arrays.fill(next,FREE);\n  for (int i=0; i < n; i++) {\n    matches+=augment(graph,visited,next,i);\n    visitToken++;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 600,
        "startLineNumber" : 22,
        "startColumnNumber" : 2,
        "endLineNumber" : 42,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This function counts what the Maximum Cardinality Bipartite Matching (MCBM) is a bipartite graph where the nodes [0,n) are in the left set and [n, n+m) in right set\n * @param graph - An adjacency list representing an undirected bipartite graph.\n */\npublic static int mcbm(List<List<Integer>> graph,int n,int m){\n  int N=n + m, matches=0;\n  int[] visited=new int[n];\n  int[] next=new int[N];\n  Arrays.fill(next,FREE);\n  for (int i=0; i < n; i++) {\n    matches+=augment(graph,visited,next,i);\n    visitToken++;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 19
      },
      "nodeContext" : "return matches;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 41,
    "startColumnNumber" : 11,
    "endLineNumber" : 41,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ ]
}