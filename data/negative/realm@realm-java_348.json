{
  "id" : 348,
  "expression" : "\"LinkingObject field should not be added to metadata\"",
  "projectName" : "realm@realm-java",
  "commitID" : "58e5ae6faf0df2f8cb62c279688dd0fdf666d6ef",
  "filePath" : "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"LinkingObject field should not be added to metadata\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 53,
      "startLineNumber" : 772,
      "startColumnNumber" : 55,
      "endLineNumber" : 772,
      "endColumnNumber" : 108
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 772,
        "startColumnNumber" : 26,
        "endLineNumber" : 772,
        "endColumnNumber" : 109
      },
      "nodeContext" : "new IllegalArgumentException(\"LinkingObject field should not be added to metadata\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 772,
        "startColumnNumber" : 20,
        "endLineNumber" : 772,
        "endColumnNumber" : 110
      },
      "nodeContext" : "throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2843,
        "startLineNumber" : 741,
        "startColumnNumber" : 12,
        "endLineNumber" : 795,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (fieldType) {\ncase NOTYPE:{\n    break;\n  }\ncase OBJECT:{\n  String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n  String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n  writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n  break;\n}\ncase LIST:{\nString genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\nString internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\nwriter.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\nbreak;\n}\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 189,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3006,
        "startLineNumber" : 737,
        "startColumnNumber" : 61,
        "endLineNumber" : 796,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String fieldName=field.getInternalFieldName();\n  Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n      break;\n    }\ncase OBJECT:{\n    String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase LIST:{\n  String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n  String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n  writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n  break;\n}\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3059,
        "startLineNumber" : 737,
        "startColumnNumber" : 8,
        "endLineNumber" : 796,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (RealmFieldElement field : metadata.getFields()) {\n  String fieldName=field.getInternalFieldName();\n  Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n      break;\n    }\ncase OBJECT:{\n    String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase LIST:{\n  String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n  String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n  writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n  break;\n}\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 216,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4511,
        "startLineNumber" : 721,
        "startColumnNumber" : 90,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4597,
        "startLineNumber" : 721,
        "startColumnNumber" : 4,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void emitCreateExpectedObjectSchemaInfo(JavaWriter writer) throws IOException {\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 328,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 772,
        "startColumnNumber" : 20,
        "endLineNumber" : 772,
        "endColumnNumber" : 110
      },
      "nodeContext" : "throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 8,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 53,
    "startLineNumber" : 772,
    "startColumnNumber" : 55,
    "endLineNumber" : 772,
    "endColumnNumber" : 108
  } ],
  "layoutRelationDataList" : [ ]
}