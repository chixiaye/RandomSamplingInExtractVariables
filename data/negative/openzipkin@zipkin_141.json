{
  "id" : 141,
  "expression" : "Collections",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin/src/test/java/zipkin/internal/NodeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Collections",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 68,
      "startColumnNumber" : 4,
      "endLineNumber" : 68,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 68,
        "endColumnNumber" : 29
      },
      "nodeContext" : "Collections.shuffle(copy)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 68,
        "endColumnNumber" : 30
      },
      "nodeContext" : "Collections.shuffle(copy);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 63,
        "startColumnNumber" : 36,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Span> copy=new ArrayList<>(TestObjects.TRACE);\n  Collections.shuffle(copy);\n  Node<Span> root=Node.constructTree(copy);\n  assertThat(root.value()).isEqualTo(TestObjects.TRACE.get(0));\n  assertThat(root.children()).extracting(Node::value).containsExactly(TestObjects.TRACE.get(1));\n  Node<Span> child=root.children().iterator().next();\n  assertThat(child.children()).extracting(Node::value).containsExactly(TestObjects.TRACE.get(2));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 769,
        "startLineNumber" : 59,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Makes sure that the trace tree is constructed based on parent-child, not by parameter order.\n */\n@Test public void constructsTraceTree(){\n  List<Span> copy=new ArrayList<>(TestObjects.TRACE);\n  Collections.shuffle(copy);\n  Node<Span> root=Node.constructTree(copy);\n  assertThat(root.value()).isEqualTo(TestObjects.TRACE.get(0));\n  assertThat(root.children()).extracting(Node::value).containsExactly(TestObjects.TRACE.get(1));\n  Node<Span> child=root.children().iterator().next();\n  assertThat(child.children()).extracting(Node::value).containsExactly(TestObjects.TRACE.get(2));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 107,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 68,
        "endColumnNumber" : 30
      },
      "nodeContext" : "Collections.shuffle(copy);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Collections"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 68,
    "startColumnNumber" : 4,
    "endLineNumber" : 68,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ ]
}