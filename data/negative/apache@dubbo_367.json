{
  "id" : 367,
  "expression" : "BeanUtils",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AbstractAnnotationBeanPostProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BeanUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 231,
      "startColumnNumber" : 48,
      "endLineNumber" : 231,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 231,
        "startColumnNumber" : 48,
        "endLineNumber" : 231,
        "endColumnNumber" : 105
      },
      "nodeContext" : "BeanUtils.findPropertyForMethod(bridgedMethod,beanClass)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 231,
        "startColumnNumber" : 43,
        "endLineNumber" : 231,
        "endColumnNumber" : 105
      },
      "nodeContext" : "pd=BeanUtils.findPropertyForMethod(bridgedMethod,beanClass)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 231,
        "startColumnNumber" : 24,
        "endLineNumber" : 231,
        "endColumnNumber" : 106
      },
      "nodeContext" : "PropertyDescriptor pd=BeanUtils.findPropertyForMethod(bridgedMethod,beanClass);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 776,
        "startLineNumber" : 224,
        "startColumnNumber" : 114,
        "endLineNumber" : 233,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (Modifier.isStatic(method.getModifiers())) {\n    throw new IllegalStateException(\"When using @\" + annotationType.getName() + \" to inject interface proxy, it is not supported on static methods: \"+ method);\n  }\n  if (method.getParameterTypes().length != 1) {\n    throw new IllegalStateException(\"When using @\" + annotationType.getName() + \" to inject interface proxy, the method must have only one parameter: \"+ method);\n  }\n  PropertyDescriptor pd=BeanUtils.findPropertyForMethod(bridgedMethod,beanClass);\n  elements.add(new AnnotatedMethodElement(method,pd,attributes));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 870,
        "startLineNumber" : 224,
        "startColumnNumber" : 20,
        "endLineNumber" : 233,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (attributes != null && method.equals(ClassUtils.getMostSpecificMethod(method,beanClass))) {\n  if (Modifier.isStatic(method.getModifiers())) {\n    throw new IllegalStateException(\"When using @\" + annotationType.getName() + \" to inject interface proxy, it is not supported on static methods: \"+ method);\n  }\n  if (method.getParameterTypes().length != 1) {\n    throw new IllegalStateException(\"When using @\" + annotationType.getName() + \" to inject interface proxy, the method must have only one parameter: \"+ method);\n  }\n  PropertyDescriptor pd=BeanUtils.findPropertyForMethod(bridgedMethod,beanClass);\n  elements.add(new AnnotatedMethodElement(method,pd,attributes));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 73,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1052,
        "startLineNumber" : 220,
        "startColumnNumber" : 88,
        "endLineNumber" : 234,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  AnnotationAttributes attributes=getAnnotationAttributes(bridgedMethod,annotationType,getEnvironment(),true,true);\n  if (attributes != null && method.equals(ClassUtils.getMostSpecificMethod(method,beanClass))) {\n    if (Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalStateException(\"When using @\" + annotationType.getName() + \" to inject interface proxy, it is not supported on static methods: \"+ method);\n    }\n    if (method.getParameterTypes().length != 1) {\n      throw new IllegalStateException(\"When using @\" + annotationType.getName() + \" to inject interface proxy, the method must have only one parameter: \"+ method);\n    }\n    PropertyDescriptor pd=BeanUtils.findPropertyForMethod(bridgedMethod,beanClass);\n    elements.add(new AnnotatedMethodElement(method,pd,attributes));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1124,
        "startLineNumber" : 220,
        "startColumnNumber" : 16,
        "endLineNumber" : 234,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (Class<? extends Annotation> annotationType : getAnnotationTypes()) {\n  AnnotationAttributes attributes=getAnnotationAttributes(bridgedMethod,annotationType,getEnvironment(),true,true);\n  if (attributes != null && method.equals(ClassUtils.getMostSpecificMethod(method,beanClass))) {\n    if (Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalStateException(\"When using @\" + annotationType.getName() + \" to inject interface proxy, it is not supported on static methods: \"+ method);\n    }\n    if (method.getParameterTypes().length != 1) {\n      throw new IllegalStateException(\"When using @\" + annotationType.getName() + \" to inject interface proxy, the method must have only one parameter: \"+ method);\n    }\n    PropertyDescriptor pd=BeanUtils.findPropertyForMethod(bridgedMethod,beanClass);\n    elements.add(new AnnotatedMethodElement(method,pd,attributes));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 98,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1531,
        "startLineNumber" : 207,
        "startColumnNumber" : 102,
        "endLineNumber" : 235,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Method bridgedMethod=findBridgedMethod(method);\n  if (!isVisibilityBridgeMethodPair(method,bridgedMethod)) {\n    return;\n  }\n  if (method.getAnnotation(Bean.class) != null) {\n    return;\n  }\n  for (  Class<? extends Annotation> annotationType : getAnnotationTypes()) {\n    AnnotationAttributes attributes=getAnnotationAttributes(bridgedMethod,annotationType,getEnvironment(),true,true);\n    if (attributes != null && method.equals(ClassUtils.getMostSpecificMethod(method,beanClass))) {\n      if (Modifier.isStatic(method.getModifiers())) {\n        throw new IllegalStateException(\"When using @\" + annotationType.getName() + \" to inject interface proxy, it is not supported on static methods: \"+ method);\n      }\n      if (method.getParameterTypes().length != 1) {\n        throw new IllegalStateException(\"When using @\" + annotationType.getName() + \" to inject interface proxy, the method must have only one parameter: \"+ method);\n      }\n      PropertyDescriptor pd=BeanUtils.findPropertyForMethod(bridgedMethod,beanClass);\n      elements.add(new AnnotatedMethodElement(method,pd,attributes));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1643,
        "startLineNumber" : 206,
        "startColumnNumber" : 12,
        "endLineNumber" : 235,
        "endColumnNumber" : 13
      },
      "nodeContext" : "@Override public void doWith(Method method) throws IllegalArgumentException, IllegalAccessException {\n  Method bridgedMethod=findBridgedMethod(method);\n  if (!isVisibilityBridgeMethodPair(method,bridgedMethod)) {\n    return;\n  }\n  if (method.getAnnotation(Bean.class) != null) {\n    return;\n  }\n  for (  Class<? extends Annotation> annotationType : getAnnotationTypes()) {\n    AnnotationAttributes attributes=getAnnotationAttributes(bridgedMethod,annotationType,getEnvironment(),true,true);\n    if (attributes != null && method.equals(ClassUtils.getMostSpecificMethod(method,beanClass))) {\n      if (Modifier.isStatic(method.getModifiers())) {\n        throw new IllegalStateException(\"When using @\" + annotationType.getName() + \" to inject interface proxy, it is not supported on static methods: \"+ method);\n      }\n      if (method.getParameterTypes().length != 1) {\n        throw new IllegalStateException(\"When using @\" + annotationType.getName() + \" to inject interface proxy, the method must have only one parameter: \"+ method);\n      }\n      PropertyDescriptor pd=BeanUtils.findPropertyForMethod(bridgedMethod,beanClass);\n      elements.add(new AnnotatedMethodElement(method,pd,attributes));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 140,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 231,
        "startColumnNumber" : 24,
        "endLineNumber" : 231,
        "endColumnNumber" : 106
      },
      "nodeContext" : "PropertyDescriptor pd=BeanUtils.findPropertyForMethod(bridgedMethod,beanClass);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 231,
    "startColumnNumber" : 48,
    "endLineNumber" : 231,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}