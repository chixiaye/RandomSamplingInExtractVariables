{
  "id" : 222,
  "expression" : "categorizeMutableRealmIntegerField(field)",
  "projectName" : "realm@realm-java",
  "commitID" : "f089a8789312e0cacad5621a4de6677936635d57",
  "filePath" : "realm/realm-annotations-processor/src/main/java/io/realm/processor/ClassMetaData.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "categorizeMutableRealmIntegerField(field)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 559,
      "startColumnNumber" : 17,
      "endLineNumber" : 559,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 559,
        "startColumnNumber" : 16,
        "endLineNumber" : 559,
        "endColumnNumber" : 58
      },
      "nodeContext" : "!categorizeMutableRealmIntegerField(field)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 559,
        "startColumnNumber" : 12,
        "endLineNumber" : 559,
        "endColumnNumber" : 77
      },
      "nodeContext" : "if (!categorizeMutableRealmIntegerField(field)) {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 558,
        "startColumnNumber" : 48,
        "endLineNumber" : 560,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!categorizeMutableRealmIntegerField(field)) {\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 558,
        "startColumnNumber" : 8,
        "endLineNumber" : 560,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Utils.isMutableRealmInteger(field)) {\n  if (!categorizeMutableRealmIntegerField(field)) {\n    return false;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3394,
        "startLineNumber" : 495,
        "startColumnNumber" : 53,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  VariableElement fieldRef=(VariableElement)element;\n  if (fieldRef.getModifiers().contains(Modifier.STATIC)) {\n    return true;\n  }\n  if (fieldRef.getAnnotation(Ignore.class) != null || fieldRef.getModifiers().contains(Modifier.TRANSIENT)) {\n    return true;\n  }\n  String internalFieldName=getInternalFieldName(fieldRef,defaultFieldNameFormatter);\n  RealmFieldElement field=new RealmFieldElement(fieldRef,internalFieldName);\n  if (field.getAnnotation(Index.class) != null) {\n    if (!categorizeIndexField(element,field)) {\n      return false;\n    }\n  }\n  if (Utils.isRealmList(field)) {\n    boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n    final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n    boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n    if (hasRequiredAnnotation && containsRealmModelClasses) {\n      Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n      return false;\n    }\n    if (!hasRequiredAnnotation) {\n      if (!containsRealmModelClasses) {\n        nullableValueListFields.add(field);\n      }\n    }\n  }\n else   if (isRequiredField(field)) {\n    if (!checkBasicRequiredAnnotationUsage(element,field)) {\n      return false;\n    }\n  }\n else {\n    if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n      nullableFields.add(field);\n    }\n  }\n  if (field.getAnnotation(PrimaryKey.class) != null) {\n    if (!categorizePrimaryKeyField(field)) {\n      return false;\n    }\n  }\n  if (field.getAnnotation(LinkingObjects.class) != null) {\n    return categorizeBacklinkField(field);\n  }\n  if (Utils.isMutableRealmInteger(field)) {\n    if (!categorizeMutableRealmIntegerField(field)) {\n      return false;\n    }\n  }\n  fields.add(field);\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3443,
        "startLineNumber" : 495,
        "startColumnNumber" : 4,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean categorizeField(Element element){\n  VariableElement fieldRef=(VariableElement)element;\n  if (fieldRef.getModifiers().contains(Modifier.STATIC)) {\n    return true;\n  }\n  if (fieldRef.getAnnotation(Ignore.class) != null || fieldRef.getModifiers().contains(Modifier.TRANSIENT)) {\n    return true;\n  }\n  String internalFieldName=getInternalFieldName(fieldRef,defaultFieldNameFormatter);\n  RealmFieldElement field=new RealmFieldElement(fieldRef,internalFieldName);\n  if (field.getAnnotation(Index.class) != null) {\n    if (!categorizeIndexField(element,field)) {\n      return false;\n    }\n  }\n  if (Utils.isRealmList(field)) {\n    boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n    final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n    boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n    if (hasRequiredAnnotation && containsRealmModelClasses) {\n      Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n      return false;\n    }\n    if (!hasRequiredAnnotation) {\n      if (!containsRealmModelClasses) {\n        nullableValueListFields.add(field);\n      }\n    }\n  }\n else   if (isRequiredField(field)) {\n    if (!checkBasicRequiredAnnotationUsage(element,field)) {\n      return false;\n    }\n  }\n else {\n    if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n      nullableFields.add(field);\n    }\n  }\n  if (field.getAnnotation(PrimaryKey.class) != null) {\n    if (!categorizePrimaryKeyField(field)) {\n      return false;\n    }\n  }\n  if (field.getAnnotation(LinkingObjects.class) != null) {\n    return categorizeBacklinkField(field);\n  }\n  if (Utils.isMutableRealmInteger(field)) {\n    if (!categorizeMutableRealmIntegerField(field)) {\n      return false;\n    }\n  }\n  fields.add(field);\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 249,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 559,
        "startColumnNumber" : 12,
        "endLineNumber" : 559,
        "endColumnNumber" : 77
      },
      "nodeContext" : "if (!categorizeMutableRealmIntegerField(field)) {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 559,
    "startColumnNumber" : 17,
    "endLineNumber" : 559,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}