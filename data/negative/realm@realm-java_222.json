{
  "id" : 222,
  "expression" : "resolvedSyncRealmUrl",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "resolvedSyncRealmUrl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 304,
      "startColumnNumber" : 43,
      "endLineNumber" : 304,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 304,
        "startColumnNumber" : 35,
        "endLineNumber" : 304,
        "endColumnNumber" : 64
      },
      "nodeContext" : "new URI(resolvedSyncRealmUrl)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 304,
        "startColumnNumber" : 16,
        "endLineNumber" : 304,
        "endColumnNumber" : 64
      },
      "nodeContext" : "resolvedRealmURI=new URI(resolvedSyncRealmUrl)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 304,
        "startColumnNumber" : 16,
        "endLineNumber" : 304,
        "endColumnNumber" : 65
      },
      "nodeContext" : "resolvedRealmURI=new URI(resolvedSyncRealmUrl);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 302,
        "startColumnNumber" : 16,
        "endLineNumber" : 305,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  resolvedSyncRealmUrl=syncRealmAuthUrl + urlPrefix.substring(1);\n  resolvedRealmURI=new URI(resolvedSyncRealmUrl);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 306,
        "startLineNumber" : 302,
        "startColumnNumber" : 12,
        "endLineNumber" : 307,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  resolvedSyncRealmUrl=syncRealmAuthUrl + urlPrefix.substring(1);\n  resolvedRealmURI=new URI(resolvedSyncRealmUrl);\n}\n catch (URISyntaxException e) {\n  RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3338,
        "startLineNumber" : 285,
        "startColumnNumber" : 34,
        "endLineNumber" : 351,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String resolvedSyncRealmUrl=nativeCreateAndSetSyncConfig(appPtr,nativePtr,syncRealmUrl,syncRealmAuthUrl,syncUserIdentifier,syncRefreshToken,syncAccessToken,deviceId,sessionStopPolicy,urlPrefix,customAuthorizationHeaderName,customHeaders,clientResyncMode,encodedPartitionValue,syncService);\n  try {\n    resolvedSyncRealmUrl=syncRealmAuthUrl + urlPrefix.substring(1);\n    resolvedRealmURI=new URI(resolvedSyncRealmUrl);\n  }\n catch (  URISyntaxException e) {\n    RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n  }\n  ProxySelector proxySelector=ProxySelector.getDefault();\n  if (resolvedRealmURI != null && proxySelector != null) {\n    URI websocketUrl=null;\n    try {\n      websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"));\n    }\n catch (    URISyntaxException e) {\n      RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n    }\n    List<java.net.Proxy> proxies=proxySelector.select(websocketUrl);\n    if (proxies != null && !proxies.isEmpty()) {\n      java.net.Proxy proxy=proxies.get(0);\n      if (proxy.type() != java.net.Proxy.Type.DIRECT) {\n        byte proxyType=-1;\nswitch (proxy.type()) {\ncase HTTP:          proxyType=PROXYCONFIG_TYPE_VALUE_HTTP;\n        break;\ndefault:    }\n    if (proxy.type() == java.net.Proxy.Type.HTTP) {\n      java.net.SocketAddress address=proxy.address();\n      if (address instanceof java.net.InetSocketAddress) {\n        java.net.InetSocketAddress inetAddress=(java.net.InetSocketAddress)address;\n        nativeSetSyncConfigProxySettings(nativePtr,proxyType,inetAddress.getHostString(),inetAddress.getPort());\n      }\n else {\n        RealmLog.error(\"Unsupported proxy socket address type: \" + address.getClass().getName());\n      }\n    }\n else {\n      RealmLog.error(\"SOCKS proxies are not supported.\");\n    }\n  }\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3364,
        "startLineNumber" : 285,
        "startColumnNumber" : 8,
        "endLineNumber" : 351,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (syncRealmUrl != null) {\n  String resolvedSyncRealmUrl=nativeCreateAndSetSyncConfig(appPtr,nativePtr,syncRealmUrl,syncRealmAuthUrl,syncUserIdentifier,syncRefreshToken,syncAccessToken,deviceId,sessionStopPolicy,urlPrefix,customAuthorizationHeaderName,customHeaders,clientResyncMode,encodedPartitionValue,syncService);\n  try {\n    resolvedSyncRealmUrl=syncRealmAuthUrl + urlPrefix.substring(1);\n    resolvedRealmURI=new URI(resolvedSyncRealmUrl);\n  }\n catch (  URISyntaxException e) {\n    RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n  }\n  ProxySelector proxySelector=ProxySelector.getDefault();\n  if (resolvedRealmURI != null && proxySelector != null) {\n    URI websocketUrl=null;\n    try {\n      websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"));\n    }\n catch (    URISyntaxException e) {\n      RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n    }\n    List<java.net.Proxy> proxies=proxySelector.select(websocketUrl);\n    if (proxies != null && !proxies.isEmpty()) {\n      java.net.Proxy proxy=proxies.get(0);\n      if (proxy.type() != java.net.Proxy.Type.DIRECT) {\n        byte proxyType=-1;\nswitch (proxy.type()) {\ncase HTTP:          proxyType=PROXYCONFIG_TYPE_VALUE_HTTP;\n        break;\ndefault:    }\n    if (proxy.type() == java.net.Proxy.Type.HTTP) {\n      java.net.SocketAddress address=proxy.address();\n      if (address instanceof java.net.InetSocketAddress) {\n        java.net.InetSocketAddress inetAddress=(java.net.InetSocketAddress)address;\n        nativeSetSyncConfigProxySettings(nativePtr,proxyType,inetAddress.getHostString(),inetAddress.getPort());\n      }\n else {\n        RealmLog.error(\"Unsupported proxy socket address type: \" + address.getClass().getName());\n      }\n    }\n else {\n      RealmLog.error(\"SOCKS proxies are not supported.\");\n    }\n  }\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 260,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7334,
        "startLineNumber" : 207,
        "startColumnNumber" : 97,
        "endLineNumber" : 353,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.realmConfiguration=config;\n  this.nativePtr=nativeCreate(config.getPath(),fifoFallbackDir,true,config.getMaxNumberOfActiveVersions());\n  NativeContext.dummyContext.addReference(this);\n  int j=0;\n  Object[] syncConfigurationOptions=ObjectServerFacade.getSyncFacadeIfPossible().getSyncConfigurationOptions(realmConfiguration);\n  String syncUserIdentifier=(String)syncConfigurationOptions[j++];\n  String syncRealmUrl=(String)syncConfigurationOptions[j++];\n  String syncRealmAuthUrl=(String)syncConfigurationOptions[j++];\n  String syncRefreshToken=(String)syncConfigurationOptions[j++];\n  String syncAccessToken=(String)syncConfigurationOptions[j++];\n  String deviceId=(String)syncConfigurationOptions[j++];\n  Byte sessionStopPolicy=(Byte)syncConfigurationOptions[j++];\n  String urlPrefix=(String)(syncConfigurationOptions[j++]);\n  String customAuthorizationHeaderName=(String)(syncConfigurationOptions[j++]);\n  Map<String,String> customHeadersMap=(Map<String,String>)(syncConfigurationOptions[j++]);\n  Byte clientResyncMode=(Byte)syncConfigurationOptions[j++];\n  String encodedPartitionValue=(String)syncConfigurationOptions[j++];\n  Object syncService=syncConfigurationOptions[j++];\n  Long appPtr=(Long)syncConfigurationOptions[j++];\n  String[] customHeaders=new String[customHeadersMap != null ? customHeadersMap.size() * 2 : 0];\n  if (customHeadersMap != null) {\n    int i=0;\n    for (    Map.Entry<String,String> entry : customHeadersMap.entrySet()) {\n      customHeaders[i]=entry.getKey();\n      customHeaders[i + 1]=entry.getValue();\n      i=i + 2;\n    }\n  }\n  byte[] key=config.getEncryptionKey();\n  if (key != null) {\n    nativeSetEncryptionKey(nativePtr,key);\n  }\n  nativeSetInMemory(nativePtr,config.getDurability() == Durability.MEM_ONLY);\n  nativeEnableChangeNotification(nativePtr,autoUpdateNotification);\n  SchemaMode schemaMode=SchemaMode.SCHEMA_MODE_MANUAL;\n  if (config.isRecoveryConfiguration()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_IMMUTABLE;\n  }\n else   if (config.isReadOnly()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_READONLY;\n  }\n else   if (syncRealmUrl != null) {\n    schemaMode=SchemaMode.SCHEMA_MODE_ADDITIVE_DISCOVERED;\n  }\n else   if (config.shouldDeleteRealmIfMigrationNeeded()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_RESET_FILE;\n  }\n  final long schemaVersion=config.getSchemaVersion();\n  final long nativeSchemaPtr=schemaInfo == null ? 0 : schemaInfo.getNativePtr();\n  this.migrationCallback=migrationCallback;\n  nativeSetSchemaConfig(nativePtr,schemaMode.getNativeValue(),schemaVersion,nativeSchemaPtr,migrationCallback);\n  this.compactOnLaunchCallback=config.getCompactOnLaunchCallback();\n  if (compactOnLaunchCallback != null) {\n    nativeSetCompactOnLaunchCallback(nativePtr,compactOnLaunchCallback);\n  }\n  this.initializationCallback=initializationCallback;\n  if (initializationCallback != null) {\n    nativeSetInitializationCallback(nativePtr,initializationCallback);\n  }\n  URI resolvedRealmURI=null;\n  if (syncRealmUrl != null) {\n    String resolvedSyncRealmUrl=nativeCreateAndSetSyncConfig(appPtr,nativePtr,syncRealmUrl,syncRealmAuthUrl,syncUserIdentifier,syncRefreshToken,syncAccessToken,deviceId,sessionStopPolicy,urlPrefix,customAuthorizationHeaderName,customHeaders,clientResyncMode,encodedPartitionValue,syncService);\n    try {\n      resolvedSyncRealmUrl=syncRealmAuthUrl + urlPrefix.substring(1);\n      resolvedRealmURI=new URI(resolvedSyncRealmUrl);\n    }\n catch (    URISyntaxException e) {\n      RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n    }\n    ProxySelector proxySelector=ProxySelector.getDefault();\n    if (resolvedRealmURI != null && proxySelector != null) {\n      URI websocketUrl=null;\n      try {\n        websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"));\n      }\n catch (      URISyntaxException e) {\n        RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n      }\n      List<java.net.Proxy> proxies=proxySelector.select(websocketUrl);\n      if (proxies != null && !proxies.isEmpty()) {\n        java.net.Proxy proxy=proxies.get(0);\n        if (proxy.type() != java.net.Proxy.Type.DIRECT) {\n          byte proxyType=-1;\nswitch (proxy.type()) {\ncase HTTP:            proxyType=PROXYCONFIG_TYPE_VALUE_HTTP;\n          break;\ndefault:      }\n      if (proxy.type() == java.net.Proxy.Type.HTTP) {\n        java.net.SocketAddress address=proxy.address();\n        if (address instanceof java.net.InetSocketAddress) {\n          java.net.InetSocketAddress inetAddress=(java.net.InetSocketAddress)address;\n          nativeSetSyncConfigProxySettings(nativePtr,proxyType,inetAddress.getHostString(),inetAddress.getPort());\n        }\n else {\n          RealmLog.error(\"Unsupported proxy socket address type: \" + address.getClass().getName());\n        }\n      }\n else {\n        RealmLog.error(\"SOCKS proxies are not supported.\");\n      }\n    }\n  }\n}\n}\nthis.resolvedRealmURI=resolvedRealmURI;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 727,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7742,
        "startLineNumber" : 202,
        "startColumnNumber" : 4,
        "endLineNumber" : 353,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private OsRealmConfig(final RealmConfiguration config,String fifoFallbackDir,boolean autoUpdateNotification,@Nullable OsSchemaInfo schemaInfo,@Nullable OsSharedRealm.MigrationCallback migrationCallback,@Nullable OsSharedRealm.InitializationCallback initializationCallback){\n  this.realmConfiguration=config;\n  this.nativePtr=nativeCreate(config.getPath(),fifoFallbackDir,true,config.getMaxNumberOfActiveVersions());\n  NativeContext.dummyContext.addReference(this);\n  int j=0;\n  Object[] syncConfigurationOptions=ObjectServerFacade.getSyncFacadeIfPossible().getSyncConfigurationOptions(realmConfiguration);\n  String syncUserIdentifier=(String)syncConfigurationOptions[j++];\n  String syncRealmUrl=(String)syncConfigurationOptions[j++];\n  String syncRealmAuthUrl=(String)syncConfigurationOptions[j++];\n  String syncRefreshToken=(String)syncConfigurationOptions[j++];\n  String syncAccessToken=(String)syncConfigurationOptions[j++];\n  String deviceId=(String)syncConfigurationOptions[j++];\n  Byte sessionStopPolicy=(Byte)syncConfigurationOptions[j++];\n  String urlPrefix=(String)(syncConfigurationOptions[j++]);\n  String customAuthorizationHeaderName=(String)(syncConfigurationOptions[j++]);\n  Map<String,String> customHeadersMap=(Map<String,String>)(syncConfigurationOptions[j++]);\n  Byte clientResyncMode=(Byte)syncConfigurationOptions[j++];\n  String encodedPartitionValue=(String)syncConfigurationOptions[j++];\n  Object syncService=syncConfigurationOptions[j++];\n  Long appPtr=(Long)syncConfigurationOptions[j++];\n  String[] customHeaders=new String[customHeadersMap != null ? customHeadersMap.size() * 2 : 0];\n  if (customHeadersMap != null) {\n    int i=0;\n    for (    Map.Entry<String,String> entry : customHeadersMap.entrySet()) {\n      customHeaders[i]=entry.getKey();\n      customHeaders[i + 1]=entry.getValue();\n      i=i + 2;\n    }\n  }\n  byte[] key=config.getEncryptionKey();\n  if (key != null) {\n    nativeSetEncryptionKey(nativePtr,key);\n  }\n  nativeSetInMemory(nativePtr,config.getDurability() == Durability.MEM_ONLY);\n  nativeEnableChangeNotification(nativePtr,autoUpdateNotification);\n  SchemaMode schemaMode=SchemaMode.SCHEMA_MODE_MANUAL;\n  if (config.isRecoveryConfiguration()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_IMMUTABLE;\n  }\n else   if (config.isReadOnly()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_READONLY;\n  }\n else   if (syncRealmUrl != null) {\n    schemaMode=SchemaMode.SCHEMA_MODE_ADDITIVE_DISCOVERED;\n  }\n else   if (config.shouldDeleteRealmIfMigrationNeeded()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_RESET_FILE;\n  }\n  final long schemaVersion=config.getSchemaVersion();\n  final long nativeSchemaPtr=schemaInfo == null ? 0 : schemaInfo.getNativePtr();\n  this.migrationCallback=migrationCallback;\n  nativeSetSchemaConfig(nativePtr,schemaMode.getNativeValue(),schemaVersion,nativeSchemaPtr,migrationCallback);\n  this.compactOnLaunchCallback=config.getCompactOnLaunchCallback();\n  if (compactOnLaunchCallback != null) {\n    nativeSetCompactOnLaunchCallback(nativePtr,compactOnLaunchCallback);\n  }\n  this.initializationCallback=initializationCallback;\n  if (initializationCallback != null) {\n    nativeSetInitializationCallback(nativePtr,initializationCallback);\n  }\n  URI resolvedRealmURI=null;\n  if (syncRealmUrl != null) {\n    String resolvedSyncRealmUrl=nativeCreateAndSetSyncConfig(appPtr,nativePtr,syncRealmUrl,syncRealmAuthUrl,syncUserIdentifier,syncRefreshToken,syncAccessToken,deviceId,sessionStopPolicy,urlPrefix,customAuthorizationHeaderName,customHeaders,clientResyncMode,encodedPartitionValue,syncService);\n    try {\n      resolvedSyncRealmUrl=syncRealmAuthUrl + urlPrefix.substring(1);\n      resolvedRealmURI=new URI(resolvedSyncRealmUrl);\n    }\n catch (    URISyntaxException e) {\n      RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n    }\n    ProxySelector proxySelector=ProxySelector.getDefault();\n    if (resolvedRealmURI != null && proxySelector != null) {\n      URI websocketUrl=null;\n      try {\n        websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"));\n      }\n catch (      URISyntaxException e) {\n        RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n      }\n      List<java.net.Proxy> proxies=proxySelector.select(websocketUrl);\n      if (proxies != null && !proxies.isEmpty()) {\n        java.net.Proxy proxy=proxies.get(0);\n        if (proxy.type() != java.net.Proxy.Type.DIRECT) {\n          byte proxyType=-1;\nswitch (proxy.type()) {\ncase HTTP:            proxyType=PROXYCONFIG_TYPE_VALUE_HTTP;\n          break;\ndefault:      }\n      if (proxy.type() == java.net.Proxy.Type.HTTP) {\n        java.net.SocketAddress address=proxy.address();\n        if (address instanceof java.net.InetSocketAddress) {\n          java.net.InetSocketAddress inetAddress=(java.net.InetSocketAddress)address;\n          nativeSetSyncConfigProxySettings(nativePtr,proxyType,inetAddress.getHostString(),inetAddress.getPort());\n        }\n else {\n          RealmLog.error(\"Unsupported proxy socket address type: \" + address.getClass().getName());\n        }\n      }\n else {\n        RealmLog.error(\"SOCKS proxies are not supported.\");\n      }\n    }\n  }\n}\n}\nthis.resolvedRealmURI=resolvedRealmURI;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 764,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 304,
        "startColumnNumber" : 16,
        "endLineNumber" : 304,
        "endColumnNumber" : 65
      },
      "nodeContext" : "resolvedRealmURI=new URI(resolvedSyncRealmUrl);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "resolvedSyncRealmUrl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 315,
      "startColumnNumber" : 43,
      "endLineNumber" : 315,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 315,
        "startColumnNumber" : 43,
        "endLineNumber" : 315,
        "endColumnNumber" : 90
      },
      "nodeContext" : "resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 315,
        "startColumnNumber" : 35,
        "endLineNumber" : 315,
        "endColumnNumber" : 91
      },
      "nodeContext" : "new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 315,
        "startColumnNumber" : 20,
        "endLineNumber" : 315,
        "endColumnNumber" : 91
      },
      "nodeContext" : "websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 315,
        "startColumnNumber" : 20,
        "endLineNumber" : 315,
        "endColumnNumber" : 92
      },
      "nodeContext" : "websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 313,
        "startColumnNumber" : 20,
        "endLineNumber" : 316,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 456,
        "startLineNumber" : 313,
        "startColumnNumber" : 16,
        "endLineNumber" : 319,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"));\n}\n catch (URISyntaxException e) {\n  RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2153,
        "startLineNumber" : 311,
        "startColumnNumber" : 67,
        "endLineNumber" : 349,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  URI websocketUrl=null;\n  try {\n    websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"));\n  }\n catch (  URISyntaxException e) {\n    RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n  }\n  List<java.net.Proxy> proxies=proxySelector.select(websocketUrl);\n  if (proxies != null && !proxies.isEmpty()) {\n    java.net.Proxy proxy=proxies.get(0);\n    if (proxy.type() != java.net.Proxy.Type.DIRECT) {\n      byte proxyType=-1;\nswitch (proxy.type()) {\ncase HTTP:        proxyType=PROXYCONFIG_TYPE_VALUE_HTTP;\n      break;\ndefault:  }\n  if (proxy.type() == java.net.Proxy.Type.HTTP) {\n    java.net.SocketAddress address=proxy.address();\n    if (address instanceof java.net.InetSocketAddress) {\n      java.net.InetSocketAddress inetAddress=(java.net.InetSocketAddress)address;\n      nativeSetSyncConfigProxySettings(nativePtr,proxyType,inetAddress.getHostString(),inetAddress.getPort());\n    }\n else {\n      RealmLog.error(\"Unsupported proxy socket address type: \" + address.getClass().getName());\n    }\n  }\n else {\n    RealmLog.error(\"SOCKS proxies are not supported.\");\n  }\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2208,
        "startLineNumber" : 311,
        "startColumnNumber" : 12,
        "endLineNumber" : 349,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (resolvedRealmURI != null && proxySelector != null) {\n  URI websocketUrl=null;\n  try {\n    websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"));\n  }\n catch (  URISyntaxException e) {\n    RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n  }\n  List<java.net.Proxy> proxies=proxySelector.select(websocketUrl);\n  if (proxies != null && !proxies.isEmpty()) {\n    java.net.Proxy proxy=proxies.get(0);\n    if (proxy.type() != java.net.Proxy.Type.DIRECT) {\n      byte proxyType=-1;\nswitch (proxy.type()) {\ncase HTTP:        proxyType=PROXYCONFIG_TYPE_VALUE_HTTP;\n      break;\ndefault:  }\n  if (proxy.type() == java.net.Proxy.Type.HTTP) {\n    java.net.SocketAddress address=proxy.address();\n    if (address instanceof java.net.InetSocketAddress) {\n      java.net.InetSocketAddress inetAddress=(java.net.InetSocketAddress)address;\n      nativeSetSyncConfigProxySettings(nativePtr,proxyType,inetAddress.getHostString(),inetAddress.getPort());\n    }\n else {\n      RealmLog.error(\"Unsupported proxy socket address type: \" + address.getClass().getName());\n    }\n  }\n else {\n    RealmLog.error(\"SOCKS proxies are not supported.\");\n  }\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3338,
        "startLineNumber" : 285,
        "startColumnNumber" : 34,
        "endLineNumber" : 351,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String resolvedSyncRealmUrl=nativeCreateAndSetSyncConfig(appPtr,nativePtr,syncRealmUrl,syncRealmAuthUrl,syncUserIdentifier,syncRefreshToken,syncAccessToken,deviceId,sessionStopPolicy,urlPrefix,customAuthorizationHeaderName,customHeaders,clientResyncMode,encodedPartitionValue,syncService);\n  try {\n    resolvedSyncRealmUrl=syncRealmAuthUrl + urlPrefix.substring(1);\n    resolvedRealmURI=new URI(resolvedSyncRealmUrl);\n  }\n catch (  URISyntaxException e) {\n    RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n  }\n  ProxySelector proxySelector=ProxySelector.getDefault();\n  if (resolvedRealmURI != null && proxySelector != null) {\n    URI websocketUrl=null;\n    try {\n      websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"));\n    }\n catch (    URISyntaxException e) {\n      RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n    }\n    List<java.net.Proxy> proxies=proxySelector.select(websocketUrl);\n    if (proxies != null && !proxies.isEmpty()) {\n      java.net.Proxy proxy=proxies.get(0);\n      if (proxy.type() != java.net.Proxy.Type.DIRECT) {\n        byte proxyType=-1;\nswitch (proxy.type()) {\ncase HTTP:          proxyType=PROXYCONFIG_TYPE_VALUE_HTTP;\n        break;\ndefault:    }\n    if (proxy.type() == java.net.Proxy.Type.HTTP) {\n      java.net.SocketAddress address=proxy.address();\n      if (address instanceof java.net.InetSocketAddress) {\n        java.net.InetSocketAddress inetAddress=(java.net.InetSocketAddress)address;\n        nativeSetSyncConfigProxySettings(nativePtr,proxyType,inetAddress.getHostString(),inetAddress.getPort());\n      }\n else {\n        RealmLog.error(\"Unsupported proxy socket address type: \" + address.getClass().getName());\n      }\n    }\n else {\n      RealmLog.error(\"SOCKS proxies are not supported.\");\n    }\n  }\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3364,
        "startLineNumber" : 285,
        "startColumnNumber" : 8,
        "endLineNumber" : 351,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (syncRealmUrl != null) {\n  String resolvedSyncRealmUrl=nativeCreateAndSetSyncConfig(appPtr,nativePtr,syncRealmUrl,syncRealmAuthUrl,syncUserIdentifier,syncRefreshToken,syncAccessToken,deviceId,sessionStopPolicy,urlPrefix,customAuthorizationHeaderName,customHeaders,clientResyncMode,encodedPartitionValue,syncService);\n  try {\n    resolvedSyncRealmUrl=syncRealmAuthUrl + urlPrefix.substring(1);\n    resolvedRealmURI=new URI(resolvedSyncRealmUrl);\n  }\n catch (  URISyntaxException e) {\n    RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n  }\n  ProxySelector proxySelector=ProxySelector.getDefault();\n  if (resolvedRealmURI != null && proxySelector != null) {\n    URI websocketUrl=null;\n    try {\n      websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"));\n    }\n catch (    URISyntaxException e) {\n      RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n    }\n    List<java.net.Proxy> proxies=proxySelector.select(websocketUrl);\n    if (proxies != null && !proxies.isEmpty()) {\n      java.net.Proxy proxy=proxies.get(0);\n      if (proxy.type() != java.net.Proxy.Type.DIRECT) {\n        byte proxyType=-1;\nswitch (proxy.type()) {\ncase HTTP:          proxyType=PROXYCONFIG_TYPE_VALUE_HTTP;\n        break;\ndefault:    }\n    if (proxy.type() == java.net.Proxy.Type.HTTP) {\n      java.net.SocketAddress address=proxy.address();\n      if (address instanceof java.net.InetSocketAddress) {\n        java.net.InetSocketAddress inetAddress=(java.net.InetSocketAddress)address;\n        nativeSetSyncConfigProxySettings(nativePtr,proxyType,inetAddress.getHostString(),inetAddress.getPort());\n      }\n else {\n        RealmLog.error(\"Unsupported proxy socket address type: \" + address.getClass().getName());\n      }\n    }\n else {\n      RealmLog.error(\"SOCKS proxies are not supported.\");\n    }\n  }\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 260,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7334,
        "startLineNumber" : 207,
        "startColumnNumber" : 97,
        "endLineNumber" : 353,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.realmConfiguration=config;\n  this.nativePtr=nativeCreate(config.getPath(),fifoFallbackDir,true,config.getMaxNumberOfActiveVersions());\n  NativeContext.dummyContext.addReference(this);\n  int j=0;\n  Object[] syncConfigurationOptions=ObjectServerFacade.getSyncFacadeIfPossible().getSyncConfigurationOptions(realmConfiguration);\n  String syncUserIdentifier=(String)syncConfigurationOptions[j++];\n  String syncRealmUrl=(String)syncConfigurationOptions[j++];\n  String syncRealmAuthUrl=(String)syncConfigurationOptions[j++];\n  String syncRefreshToken=(String)syncConfigurationOptions[j++];\n  String syncAccessToken=(String)syncConfigurationOptions[j++];\n  String deviceId=(String)syncConfigurationOptions[j++];\n  Byte sessionStopPolicy=(Byte)syncConfigurationOptions[j++];\n  String urlPrefix=(String)(syncConfigurationOptions[j++]);\n  String customAuthorizationHeaderName=(String)(syncConfigurationOptions[j++]);\n  Map<String,String> customHeadersMap=(Map<String,String>)(syncConfigurationOptions[j++]);\n  Byte clientResyncMode=(Byte)syncConfigurationOptions[j++];\n  String encodedPartitionValue=(String)syncConfigurationOptions[j++];\n  Object syncService=syncConfigurationOptions[j++];\n  Long appPtr=(Long)syncConfigurationOptions[j++];\n  String[] customHeaders=new String[customHeadersMap != null ? customHeadersMap.size() * 2 : 0];\n  if (customHeadersMap != null) {\n    int i=0;\n    for (    Map.Entry<String,String> entry : customHeadersMap.entrySet()) {\n      customHeaders[i]=entry.getKey();\n      customHeaders[i + 1]=entry.getValue();\n      i=i + 2;\n    }\n  }\n  byte[] key=config.getEncryptionKey();\n  if (key != null) {\n    nativeSetEncryptionKey(nativePtr,key);\n  }\n  nativeSetInMemory(nativePtr,config.getDurability() == Durability.MEM_ONLY);\n  nativeEnableChangeNotification(nativePtr,autoUpdateNotification);\n  SchemaMode schemaMode=SchemaMode.SCHEMA_MODE_MANUAL;\n  if (config.isRecoveryConfiguration()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_IMMUTABLE;\n  }\n else   if (config.isReadOnly()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_READONLY;\n  }\n else   if (syncRealmUrl != null) {\n    schemaMode=SchemaMode.SCHEMA_MODE_ADDITIVE_DISCOVERED;\n  }\n else   if (config.shouldDeleteRealmIfMigrationNeeded()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_RESET_FILE;\n  }\n  final long schemaVersion=config.getSchemaVersion();\n  final long nativeSchemaPtr=schemaInfo == null ? 0 : schemaInfo.getNativePtr();\n  this.migrationCallback=migrationCallback;\n  nativeSetSchemaConfig(nativePtr,schemaMode.getNativeValue(),schemaVersion,nativeSchemaPtr,migrationCallback);\n  this.compactOnLaunchCallback=config.getCompactOnLaunchCallback();\n  if (compactOnLaunchCallback != null) {\n    nativeSetCompactOnLaunchCallback(nativePtr,compactOnLaunchCallback);\n  }\n  this.initializationCallback=initializationCallback;\n  if (initializationCallback != null) {\n    nativeSetInitializationCallback(nativePtr,initializationCallback);\n  }\n  URI resolvedRealmURI=null;\n  if (syncRealmUrl != null) {\n    String resolvedSyncRealmUrl=nativeCreateAndSetSyncConfig(appPtr,nativePtr,syncRealmUrl,syncRealmAuthUrl,syncUserIdentifier,syncRefreshToken,syncAccessToken,deviceId,sessionStopPolicy,urlPrefix,customAuthorizationHeaderName,customHeaders,clientResyncMode,encodedPartitionValue,syncService);\n    try {\n      resolvedSyncRealmUrl=syncRealmAuthUrl + urlPrefix.substring(1);\n      resolvedRealmURI=new URI(resolvedSyncRealmUrl);\n    }\n catch (    URISyntaxException e) {\n      RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n    }\n    ProxySelector proxySelector=ProxySelector.getDefault();\n    if (resolvedRealmURI != null && proxySelector != null) {\n      URI websocketUrl=null;\n      try {\n        websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"));\n      }\n catch (      URISyntaxException e) {\n        RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n      }\n      List<java.net.Proxy> proxies=proxySelector.select(websocketUrl);\n      if (proxies != null && !proxies.isEmpty()) {\n        java.net.Proxy proxy=proxies.get(0);\n        if (proxy.type() != java.net.Proxy.Type.DIRECT) {\n          byte proxyType=-1;\nswitch (proxy.type()) {\ncase HTTP:            proxyType=PROXYCONFIG_TYPE_VALUE_HTTP;\n          break;\ndefault:      }\n      if (proxy.type() == java.net.Proxy.Type.HTTP) {\n        java.net.SocketAddress address=proxy.address();\n        if (address instanceof java.net.InetSocketAddress) {\n          java.net.InetSocketAddress inetAddress=(java.net.InetSocketAddress)address;\n          nativeSetSyncConfigProxySettings(nativePtr,proxyType,inetAddress.getHostString(),inetAddress.getPort());\n        }\n else {\n          RealmLog.error(\"Unsupported proxy socket address type: \" + address.getClass().getName());\n        }\n      }\n else {\n        RealmLog.error(\"SOCKS proxies are not supported.\");\n      }\n    }\n  }\n}\n}\nthis.resolvedRealmURI=resolvedRealmURI;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 727,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7742,
        "startLineNumber" : 202,
        "startColumnNumber" : 4,
        "endLineNumber" : 353,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private OsRealmConfig(final RealmConfiguration config,String fifoFallbackDir,boolean autoUpdateNotification,@Nullable OsSchemaInfo schemaInfo,@Nullable OsSharedRealm.MigrationCallback migrationCallback,@Nullable OsSharedRealm.InitializationCallback initializationCallback){\n  this.realmConfiguration=config;\n  this.nativePtr=nativeCreate(config.getPath(),fifoFallbackDir,true,config.getMaxNumberOfActiveVersions());\n  NativeContext.dummyContext.addReference(this);\n  int j=0;\n  Object[] syncConfigurationOptions=ObjectServerFacade.getSyncFacadeIfPossible().getSyncConfigurationOptions(realmConfiguration);\n  String syncUserIdentifier=(String)syncConfigurationOptions[j++];\n  String syncRealmUrl=(String)syncConfigurationOptions[j++];\n  String syncRealmAuthUrl=(String)syncConfigurationOptions[j++];\n  String syncRefreshToken=(String)syncConfigurationOptions[j++];\n  String syncAccessToken=(String)syncConfigurationOptions[j++];\n  String deviceId=(String)syncConfigurationOptions[j++];\n  Byte sessionStopPolicy=(Byte)syncConfigurationOptions[j++];\n  String urlPrefix=(String)(syncConfigurationOptions[j++]);\n  String customAuthorizationHeaderName=(String)(syncConfigurationOptions[j++]);\n  Map<String,String> customHeadersMap=(Map<String,String>)(syncConfigurationOptions[j++]);\n  Byte clientResyncMode=(Byte)syncConfigurationOptions[j++];\n  String encodedPartitionValue=(String)syncConfigurationOptions[j++];\n  Object syncService=syncConfigurationOptions[j++];\n  Long appPtr=(Long)syncConfigurationOptions[j++];\n  String[] customHeaders=new String[customHeadersMap != null ? customHeadersMap.size() * 2 : 0];\n  if (customHeadersMap != null) {\n    int i=0;\n    for (    Map.Entry<String,String> entry : customHeadersMap.entrySet()) {\n      customHeaders[i]=entry.getKey();\n      customHeaders[i + 1]=entry.getValue();\n      i=i + 2;\n    }\n  }\n  byte[] key=config.getEncryptionKey();\n  if (key != null) {\n    nativeSetEncryptionKey(nativePtr,key);\n  }\n  nativeSetInMemory(nativePtr,config.getDurability() == Durability.MEM_ONLY);\n  nativeEnableChangeNotification(nativePtr,autoUpdateNotification);\n  SchemaMode schemaMode=SchemaMode.SCHEMA_MODE_MANUAL;\n  if (config.isRecoveryConfiguration()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_IMMUTABLE;\n  }\n else   if (config.isReadOnly()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_READONLY;\n  }\n else   if (syncRealmUrl != null) {\n    schemaMode=SchemaMode.SCHEMA_MODE_ADDITIVE_DISCOVERED;\n  }\n else   if (config.shouldDeleteRealmIfMigrationNeeded()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_RESET_FILE;\n  }\n  final long schemaVersion=config.getSchemaVersion();\n  final long nativeSchemaPtr=schemaInfo == null ? 0 : schemaInfo.getNativePtr();\n  this.migrationCallback=migrationCallback;\n  nativeSetSchemaConfig(nativePtr,schemaMode.getNativeValue(),schemaVersion,nativeSchemaPtr,migrationCallback);\n  this.compactOnLaunchCallback=config.getCompactOnLaunchCallback();\n  if (compactOnLaunchCallback != null) {\n    nativeSetCompactOnLaunchCallback(nativePtr,compactOnLaunchCallback);\n  }\n  this.initializationCallback=initializationCallback;\n  if (initializationCallback != null) {\n    nativeSetInitializationCallback(nativePtr,initializationCallback);\n  }\n  URI resolvedRealmURI=null;\n  if (syncRealmUrl != null) {\n    String resolvedSyncRealmUrl=nativeCreateAndSetSyncConfig(appPtr,nativePtr,syncRealmUrl,syncRealmAuthUrl,syncUserIdentifier,syncRefreshToken,syncAccessToken,deviceId,sessionStopPolicy,urlPrefix,customAuthorizationHeaderName,customHeaders,clientResyncMode,encodedPartitionValue,syncService);\n    try {\n      resolvedSyncRealmUrl=syncRealmAuthUrl + urlPrefix.substring(1);\n      resolvedRealmURI=new URI(resolvedSyncRealmUrl);\n    }\n catch (    URISyntaxException e) {\n      RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n    }\n    ProxySelector proxySelector=ProxySelector.getDefault();\n    if (resolvedRealmURI != null && proxySelector != null) {\n      URI websocketUrl=null;\n      try {\n        websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"));\n      }\n catch (      URISyntaxException e) {\n        RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n      }\n      List<java.net.Proxy> proxies=proxySelector.select(websocketUrl);\n      if (proxies != null && !proxies.isEmpty()) {\n        java.net.Proxy proxy=proxies.get(0);\n        if (proxy.type() != java.net.Proxy.Type.DIRECT) {\n          byte proxyType=-1;\nswitch (proxy.type()) {\ncase HTTP:            proxyType=PROXYCONFIG_TYPE_VALUE_HTTP;\n          break;\ndefault:      }\n      if (proxy.type() == java.net.Proxy.Type.HTTP) {\n        java.net.SocketAddress address=proxy.address();\n        if (address instanceof java.net.InetSocketAddress) {\n          java.net.InetSocketAddress inetAddress=(java.net.InetSocketAddress)address;\n          nativeSetSyncConfigProxySettings(nativePtr,proxyType,inetAddress.getHostString(),inetAddress.getPort());\n        }\n else {\n          RealmLog.error(\"Unsupported proxy socket address type: \" + address.getClass().getName());\n        }\n      }\n else {\n        RealmLog.error(\"SOCKS proxies are not supported.\");\n      }\n    }\n  }\n}\n}\nthis.resolvedRealmURI=resolvedRealmURI;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 764,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 315,
        "startColumnNumber" : 20,
        "endLineNumber" : 315,
        "endColumnNumber" : 92
      },
      "nodeContext" : "websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 304,
    "startColumnNumber" : 43,
    "endLineNumber" : 304,
    "endColumnNumber" : 63
  }, {
    "charLength" : 20,
    "startLineNumber" : 315,
    "startColumnNumber" : 43,
    "endLineNumber" : 315,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  } ]
}