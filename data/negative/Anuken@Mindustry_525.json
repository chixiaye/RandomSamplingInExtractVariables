{
  "id" : 525,
  "expression" : "timerStep",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "8dd66fb94231a7d9b5c9c86a34f778fb4a9c4b1c",
  "filePath" : "core/src/mindustry/ai/BaseAI.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "timerStep",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 138,
      "startColumnNumber" : 64,
      "endLineNumber" : 138,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 138,
        "startColumnNumber" : 54,
        "endLineNumber" : 138,
        "endColumnNumber" : 121
      },
      "nodeContext" : "timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 138,
        "startColumnNumber" : 11,
        "endLineNumber" : 138,
        "endColumnNumber" : 121
      },
      "nodeContext" : "totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1550,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n  if (!triedWalls) {\n    tryWalls();\n    triedWalls=true;\n  }\n  for (int i=0; i < attempts; i++) {\n    int range=150;\n    Position pos=randomPosition();\n    if (pos == null)     return;\n    Tmp.v1.rnd(Mathf.random(range));\n    int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n    Tile tile=world.tiles.getc(wx,wy);\n    if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n      continue;\n    }\n    Seq<BasePart> parts=null;\n    if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n      parts=Vars.bases.forResource(tile.drop());\n    }\n else     if (Mathf.chance(emptyChance)) {\n      parts=Vars.bases.parts;\n    }\n    if (parts != null) {\n      BasePart part=parts.random();\n      if (tryPlace(part,tile.x,tile.y)) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 221,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4750,
        "startLineNumber" : 55,
        "startColumnNumber" : 24,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (data.team.rules().aiCoreSpawn && timer.get(timerSpawn,60 * 2.5f) && data.hasCore()) {\n    CoreBlock block=(CoreBlock)data.core().block;\n    int coreUnits=Groups.unit.count(u -> u.team == data.team && u.type == block.unitType);\n    if (!state.isEditor() && coreUnits < data.cores.size) {\n      Unit unit=block.unitType.create(data.team);\n      unit.set(data.cores.random());\n      unit.add();\n      Fx.spawn.at(unit);\n    }\n  }\n  if (!calculating && (timer.get(timerRefreshPath,3f * Time.toMinutes) || !startedCalculating) && data.hasCore()) {\n    calculating=true;\n    startedCalculating=true;\n    calcPath.clear();\n  }\n  if (calculating && calcCount >= world.width() * world.height()) {\n    calculating=false;\n    calcCount=0;\n    calcPath.clear();\n    totalCalcs++;\n  }\n  if (calculating) {\n    if (calcTile == null) {\n      Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n      if (calcTile == null) {\n        calculating=false;\n      }\n    }\n else {\n      var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n      int[][] weights=field.weights;\n      for (int i=0; i < pathStep; i++) {\n        int minCost=Integer.MAX_VALUE;\n        int cx=calcTile.x, cy=calcTile.y;\n        boolean foundAny=false;\n        for (        Point2 p : Geometry.d4) {\n          int nx=cx + p.x, ny=cy + p.y;\n          Tile other=world.tile(nx,ny);\n          if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n            minCost=weights[nx][ny];\n            calcTile=other;\n            foundAny=true;\n          }\n        }\n        if (!foundAny) {\n          calcCount=Integer.MAX_VALUE;\n          break;\n        }\n        calcPath.add(calcTile.pos());\n        if (calcTile.build instanceof         CoreBuild b && b.team == state.rules.defaultTeam) {\n          calculating=false;\n          calcCount=0;\n          path.clear();\n          path.addAll(calcPath);\n          calcPath.clear();\n          calcTile=null;\n          totalCalcs++;\n          break;\n        }\n        calcCount++;\n      }\n    }\n  }\n  if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n    if (!triedWalls) {\n      tryWalls();\n      triedWalls=true;\n    }\n    for (int i=0; i < attempts; i++) {\n      int range=150;\n      Position pos=randomPosition();\n      if (pos == null)       return;\n      Tmp.v1.rnd(Mathf.random(range));\n      int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n      Tile tile=world.tiles.getc(wx,wy);\n      if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n        continue;\n      }\n      Seq<BasePart> parts=null;\n      if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n        parts=Vars.bases.forResource(tile.drop());\n      }\n else       if (Mathf.chance(emptyChance)) {\n        parts=Vars.bases.parts;\n      }\n      if (parts != null) {\n        BasePart part=parts.random();\n        if (tryPlace(part,tile.x,tile.y)) {\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 634,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4770,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void update(){\n  if (data.team.rules().aiCoreSpawn && timer.get(timerSpawn,60 * 2.5f) && data.hasCore()) {\n    CoreBlock block=(CoreBlock)data.core().block;\n    int coreUnits=Groups.unit.count(u -> u.team == data.team && u.type == block.unitType);\n    if (!state.isEditor() && coreUnits < data.cores.size) {\n      Unit unit=block.unitType.create(data.team);\n      unit.set(data.cores.random());\n      unit.add();\n      Fx.spawn.at(unit);\n    }\n  }\n  if (!calculating && (timer.get(timerRefreshPath,3f * Time.toMinutes) || !startedCalculating) && data.hasCore()) {\n    calculating=true;\n    startedCalculating=true;\n    calcPath.clear();\n  }\n  if (calculating && calcCount >= world.width() * world.height()) {\n    calculating=false;\n    calcCount=0;\n    calcPath.clear();\n    totalCalcs++;\n  }\n  if (calculating) {\n    if (calcTile == null) {\n      Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n      if (calcTile == null) {\n        calculating=false;\n      }\n    }\n else {\n      var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n      int[][] weights=field.weights;\n      for (int i=0; i < pathStep; i++) {\n        int minCost=Integer.MAX_VALUE;\n        int cx=calcTile.x, cy=calcTile.y;\n        boolean foundAny=false;\n        for (        Point2 p : Geometry.d4) {\n          int nx=cx + p.x, ny=cy + p.y;\n          Tile other=world.tile(nx,ny);\n          if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n            minCost=weights[nx][ny];\n            calcTile=other;\n            foundAny=true;\n          }\n        }\n        if (!foundAny) {\n          calcCount=Integer.MAX_VALUE;\n          break;\n        }\n        calcPath.add(calcTile.pos());\n        if (calcTile.build instanceof         CoreBuild b && b.team == state.rules.defaultTeam) {\n          calculating=false;\n          calcCount=0;\n          path.clear();\n          path.addAll(calcPath);\n          calcPath.clear();\n          calcTile=null;\n          totalCalcs++;\n          break;\n        }\n        calcCount++;\n      }\n    }\n  }\n  if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n    if (!triedWalls) {\n      tryWalls();\n      triedWalls=true;\n    }\n    for (int i=0; i < attempts; i++) {\n      int range=150;\n      Position pos=randomPosition();\n      if (pos == null)       return;\n      Tmp.v1.rnd(Mathf.random(range));\n      int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n      Tile tile=world.tiles.getc(wx,wy);\n      if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n        continue;\n      }\n      Seq<BasePart> parts=null;\n      if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n        parts=Vars.bases.forResource(tile.drop());\n      }\n else       if (Mathf.chance(emptyChance)) {\n        parts=Vars.bases.parts;\n      }\n      if (parts != null) {\n        BasePart part=parts.random();\n        if (tryPlace(part,tile.x,tile.y)) {\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 638,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 138,
        "startColumnNumber" : 11,
        "endLineNumber" : 138,
        "endColumnNumber" : 121
      },
      "nodeContext" : "totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 26,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 138,
    "startColumnNumber" : 64,
    "endLineNumber" : 138,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ ]
}