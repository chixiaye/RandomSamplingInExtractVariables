{
  "id" : 61,
  "expression" : "\"Files moved.\"",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/android/src/mindustry/android/AndroidLauncher.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Files moved.\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 186,
      "startColumnNumber" : 29,
      "endLineNumber" : 186,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 186,
        "startColumnNumber" : 20,
        "endLineNumber" : 186,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Log.info(\"Files moved.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 186,
        "startColumnNumber" : 20,
        "endLineNumber" : 186,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Log.info(\"Files moved.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 525,
        "startLineNumber" : 177,
        "startColumnNumber" : 19,
        "endLineNumber" : 187,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Fi src=Core.files.absolute(Core.files.getLocalStoragePath());\n  for (  Fi fi : src.list()) {\n    fi.copyTo(data);\n  }\n  Core.files.local(\"files_moved\").writeString(\"files moved to \" + data);\n  Core.files.local(\"files_moved_103\").writeString(\"files moved again\");\n  Log.info(\"Files moved.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 660,
        "startLineNumber" : 177,
        "startColumnNumber" : 16,
        "endLineNumber" : 190,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  Fi src=Core.files.absolute(Core.files.getLocalStoragePath());\n  for (  Fi fi : src.list()) {\n    fi.copyTo(data);\n  }\n  Core.files.local(\"files_moved\").writeString(\"files moved to \" + data);\n  Core.files.local(\"files_moved_103\").writeString(\"files moved again\");\n  Log.info(\"Files moved.\");\n}\n catch (Throwable t) {\n  Log.err(\"Failed to move files!\");\n  t.printStackTrace();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 174,
        "startColumnNumber" : 57,
        "endLineNumber" : 191,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Log.info(\"Moving files to external storage...\");\n  try {\n    Fi src=Core.files.absolute(Core.files.getLocalStoragePath());\n    for (    Fi fi : src.list()) {\n      fi.copyTo(data);\n    }\n    Core.files.local(\"files_moved\").writeString(\"files moved to \" + data);\n    Core.files.local(\"files_moved_103\").writeString(\"files moved again\");\n    Log.info(\"Files moved.\");\n  }\n catch (  Throwable t) {\n    Log.err(\"Failed to move files!\");\n    t.printStackTrace();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 803,
        "startLineNumber" : 174,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!Core.files.local(\"files_moved\").exists()) {\n  Log.info(\"Moving files to external storage...\");\n  try {\n    Fi src=Core.files.absolute(Core.files.getLocalStoragePath());\n    for (    Fi fi : src.list()) {\n      fi.copyTo(data);\n    }\n    Core.files.local(\"files_moved\").writeString(\"files moved to \" + data);\n    Core.files.local(\"files_moved_103\").writeString(\"files moved again\");\n    Log.info(\"Files moved.\");\n  }\n catch (  Throwable t) {\n    Log.err(\"Failed to move files!\");\n    t.printStackTrace();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1096,
        "startLineNumber" : 168,
        "startColumnNumber" : 11,
        "endLineNumber" : 192,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Fi data=Core.files.absolute(getContext().getExternalFilesDir(null).getAbsolutePath());\n  Core.settings.setDataDirectory(data);\n  if (!Core.files.local(\"files_moved\").exists()) {\n    Log.info(\"Moving files to external storage...\");\n    try {\n      Fi src=Core.files.absolute(Core.files.getLocalStoragePath());\n      for (      Fi fi : src.list()) {\n        fi.copyTo(data);\n      }\n      Core.files.local(\"files_moved\").writeString(\"files moved to \" + data);\n      Core.files.local(\"files_moved_103\").writeString(\"files moved again\");\n      Log.info(\"Files moved.\");\n    }\n catch (    Throwable t) {\n      Log.err(\"Failed to move files!\");\n      t.printStackTrace();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1192,
        "startLineNumber" : 168,
        "startColumnNumber" : 8,
        "endLineNumber" : 195,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Fi data=Core.files.absolute(getContext().getExternalFilesDir(null).getAbsolutePath());\n  Core.settings.setDataDirectory(data);\n  if (!Core.files.local(\"files_moved\").exists()) {\n    Log.info(\"Moving files to external storage...\");\n    try {\n      Fi src=Core.files.absolute(Core.files.getLocalStoragePath());\n      for (      Fi fi : src.list()) {\n        fi.copyTo(data);\n      }\n      Core.files.local(\"files_moved\").writeString(\"files moved to \" + data);\n      Core.files.local(\"files_moved_103\").writeString(\"files moved again\");\n      Log.info(\"Files moved.\");\n    }\n catch (    Throwable t) {\n      Log.err(\"Failed to move files!\");\n      t.printStackTrace();\n    }\n  }\n}\n catch (Exception e) {\n  Log.err(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7027,
        "startLineNumber" : 37,
        "startColumnNumber" : 54,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  UncaughtExceptionHandler handler=Thread.getDefaultUncaughtExceptionHandler();\n  Thread.setDefaultUncaughtExceptionHandler((thread,error) -> {\n    CrashSender.log(error);\n    if (handler != null) {\n      handler.uncaughtException(thread,error);\n    }\n else {\n      error.printStackTrace();\n      Log.err(error);\n      System.exit(1);\n    }\n  }\n);\n  super.onCreate(savedInstanceState);\n  if (doubleScaleTablets && isTablet(this.getContext())) {\n    Scl.setAddition(0.5f);\n  }\n  initialize(new ClientLauncher(){\n    @Override public void hide(){\n      moveTaskToBack(true);\n    }\n    @Override public rhino.Context getScriptContext(){\n      return AndroidRhinoContext.enter(getContext().getCacheDir());\n    }\n    @Override public void shareFile(    Fi file){\n    }\n    @Override public Class<?> loadJar(    Fi jar,    String mainClass) throws Exception {\n      DexClassLoader loader=new DexClassLoader(jar.file().getPath(),getFilesDir().getPath(),null,getClassLoader());\n      return Class.forName(mainClass,true,loader);\n    }\n    @Override public void showFileChooser(    boolean open,    String title,    String extension,    Cons<Fi> cons){\n      showFileChooser(open,title,cons,extension);\n    }\n    void showFileChooser(    boolean open,    String title,    Cons<Fi> cons,    String... extensions){\n      String extension=extensions[0];\n      if (VERSION.SDK_INT >= VERSION_CODES.Q) {\n        Intent intent=new Intent(open ? Intent.ACTION_OPEN_DOCUMENT : Intent.ACTION_CREATE_DOCUMENT);\n        intent.addCategory(Intent.CATEGORY_OPENABLE);\n        intent.setType(extension.equals(\"zip\") && !open && extensions.length == 1 ? \"application/zip\" : \"*/*\");\n        addResultListener(i -> startActivityForResult(intent,i),(code,in) -> {\n          if (code == Activity.RESULT_OK && in != null && in.getData() != null) {\n            Uri uri=in.getData();\n            if (uri.getPath().contains(\"(invalid)\"))             return;\n            Core.app.post(() -> Core.app.post(() -> cons.get(new Fi(uri.getPath()){\n              @Override public InputStream read(){\n                try {\n                  return getContentResolver().openInputStream(uri);\n                }\n catch (                IOException e) {\n                  throw new ArcRuntimeException(e);\n                }\n              }\n              @Override public OutputStream write(              boolean append){\n                try {\n                  return getContentResolver().openOutputStream(uri);\n                }\n catch (                IOException e) {\n                  throw new ArcRuntimeException(e);\n                }\n              }\n            }\n)));\n          }\n        }\n);\n      }\n else       if (VERSION.SDK_INT >= VERSION_CODES.M && !(checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED && checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED)) {\n        chooser=new FileChooser(title,file -> Structs.contains(extensions,file.extension().toLowerCase()),open,file -> {\n          if (!open) {\n            cons.get(file.parent().child(file.nameWithoutExtension() + \".\" + extension));\n          }\n else {\n            cons.get(file);\n          }\n        }\n);\n        ArrayList<String> perms=new ArrayList<>();\n        if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n          perms.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);\n        }\n        if (checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n          perms.add(Manifest.permission.READ_EXTERNAL_STORAGE);\n        }\n        requestPermissions(perms.toArray(new String[0]),PERMISSION_REQUEST_CODE);\n      }\n else {\n        if (open) {\n          new FileChooser(title,file -> Structs.contains(extensions,file.extension().toLowerCase()),true,cons).show();\n        }\n else {\n          super.showFileChooser(open,\"@open\",extension,cons);\n        }\n      }\n    }\n    @Override public void showMultiFileChooser(    Cons<Fi> cons,    String... extensions){\n      showFileChooser(true,\"@open\",cons,extensions);\n    }\n    @Override public void beginForceLandscape(){\n      setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);\n    }\n    @Override public void endForceLandscape(){\n      setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_USER);\n    }\n  }\n,new AndroidApplicationConfiguration(){\n{\n      useImmersiveMode=true;\n      hideStatusBar=true;\n    }\n  }\n);\n  checkFiles(getIntent());\n  try {\n    Fi data=Core.files.absolute(getContext().getExternalFilesDir(null).getAbsolutePath());\n    Core.settings.setDataDirectory(data);\n    if (!Core.files.local(\"files_moved\").exists()) {\n      Log.info(\"Moving files to external storage...\");\n      try {\n        Fi src=Core.files.absolute(Core.files.getLocalStoragePath());\n        for (        Fi fi : src.list()) {\n          fi.copyTo(data);\n        }\n        Core.files.local(\"files_moved\").writeString(\"files moved to \" + data);\n        Core.files.local(\"files_moved_103\").writeString(\"files moved again\");\n        Log.info(\"Files moved.\");\n      }\n catch (      Throwable t) {\n        Log.err(\"Failed to move files!\");\n        t.printStackTrace();\n      }\n    }\n  }\n catch (  Exception e) {\n    Log.err(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 786,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7091,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void onCreate(Bundle savedInstanceState){\n  UncaughtExceptionHandler handler=Thread.getDefaultUncaughtExceptionHandler();\n  Thread.setDefaultUncaughtExceptionHandler((thread,error) -> {\n    CrashSender.log(error);\n    if (handler != null) {\n      handler.uncaughtException(thread,error);\n    }\n else {\n      error.printStackTrace();\n      Log.err(error);\n      System.exit(1);\n    }\n  }\n);\n  super.onCreate(savedInstanceState);\n  if (doubleScaleTablets && isTablet(this.getContext())) {\n    Scl.setAddition(0.5f);\n  }\n  initialize(new ClientLauncher(){\n    @Override public void hide(){\n      moveTaskToBack(true);\n    }\n    @Override public rhino.Context getScriptContext(){\n      return AndroidRhinoContext.enter(getContext().getCacheDir());\n    }\n    @Override public void shareFile(    Fi file){\n    }\n    @Override public Class<?> loadJar(    Fi jar,    String mainClass) throws Exception {\n      DexClassLoader loader=new DexClassLoader(jar.file().getPath(),getFilesDir().getPath(),null,getClassLoader());\n      return Class.forName(mainClass,true,loader);\n    }\n    @Override public void showFileChooser(    boolean open,    String title,    String extension,    Cons<Fi> cons){\n      showFileChooser(open,title,cons,extension);\n    }\n    void showFileChooser(    boolean open,    String title,    Cons<Fi> cons,    String... extensions){\n      String extension=extensions[0];\n      if (VERSION.SDK_INT >= VERSION_CODES.Q) {\n        Intent intent=new Intent(open ? Intent.ACTION_OPEN_DOCUMENT : Intent.ACTION_CREATE_DOCUMENT);\n        intent.addCategory(Intent.CATEGORY_OPENABLE);\n        intent.setType(extension.equals(\"zip\") && !open && extensions.length == 1 ? \"application/zip\" : \"*/*\");\n        addResultListener(i -> startActivityForResult(intent,i),(code,in) -> {\n          if (code == Activity.RESULT_OK && in != null && in.getData() != null) {\n            Uri uri=in.getData();\n            if (uri.getPath().contains(\"(invalid)\"))             return;\n            Core.app.post(() -> Core.app.post(() -> cons.get(new Fi(uri.getPath()){\n              @Override public InputStream read(){\n                try {\n                  return getContentResolver().openInputStream(uri);\n                }\n catch (                IOException e) {\n                  throw new ArcRuntimeException(e);\n                }\n              }\n              @Override public OutputStream write(              boolean append){\n                try {\n                  return getContentResolver().openOutputStream(uri);\n                }\n catch (                IOException e) {\n                  throw new ArcRuntimeException(e);\n                }\n              }\n            }\n)));\n          }\n        }\n);\n      }\n else       if (VERSION.SDK_INT >= VERSION_CODES.M && !(checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED && checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED)) {\n        chooser=new FileChooser(title,file -> Structs.contains(extensions,file.extension().toLowerCase()),open,file -> {\n          if (!open) {\n            cons.get(file.parent().child(file.nameWithoutExtension() + \".\" + extension));\n          }\n else {\n            cons.get(file);\n          }\n        }\n);\n        ArrayList<String> perms=new ArrayList<>();\n        if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n          perms.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);\n        }\n        if (checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n          perms.add(Manifest.permission.READ_EXTERNAL_STORAGE);\n        }\n        requestPermissions(perms.toArray(new String[0]),PERMISSION_REQUEST_CODE);\n      }\n else {\n        if (open) {\n          new FileChooser(title,file -> Structs.contains(extensions,file.extension().toLowerCase()),true,cons).show();\n        }\n else {\n          super.showFileChooser(open,\"@open\",extension,cons);\n        }\n      }\n    }\n    @Override public void showMultiFileChooser(    Cons<Fi> cons,    String... extensions){\n      showFileChooser(true,\"@open\",cons,extensions);\n    }\n    @Override public void beginForceLandscape(){\n      setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);\n    }\n    @Override public void endForceLandscape(){\n      setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_USER);\n    }\n  }\n,new AndroidApplicationConfiguration(){\n{\n      useImmersiveMode=true;\n      hideStatusBar=true;\n    }\n  }\n);\n  checkFiles(getIntent());\n  try {\n    Fi data=Core.files.absolute(getContext().getExternalFilesDir(null).getAbsolutePath());\n    Core.settings.setDataDirectory(data);\n    if (!Core.files.local(\"files_moved\").exists()) {\n      Log.info(\"Moving files to external storage...\");\n      try {\n        Fi src=Core.files.absolute(Core.files.getLocalStoragePath());\n        for (        Fi fi : src.list()) {\n          fi.copyTo(data);\n        }\n        Core.files.local(\"files_moved\").writeString(\"files moved to \" + data);\n        Core.files.local(\"files_moved_103\").writeString(\"files moved again\");\n        Log.info(\"Files moved.\");\n      }\n catch (      Throwable t) {\n        Log.err(\"Failed to move files!\");\n        t.printStackTrace();\n      }\n    }\n  }\n catch (  Exception e) {\n    Log.err(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 796,
      "astHeight" : 33
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 186,
        "startColumnNumber" : 20,
        "endLineNumber" : 186,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Log.info(\"Files moved.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 186,
    "startColumnNumber" : 29,
    "endLineNumber" : 186,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}