{
  "id" : 106,
  "expression" : "-1",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/Components/GroupedPhotosListView.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 239,
      "startColumnNumber" : 93,
      "endLineNumber" : 239,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 239,
        "startColumnNumber" : 52,
        "endLineNumber" : 239,
        "endColumnNumber" : 95
      },
      "nodeContext" : "currentObjects.indexOf(currentObject) == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 239,
        "startColumnNumber" : 16,
        "endLineNumber" : 239,
        "endColumnNumber" : 95
      },
      "nodeContext" : "newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1284,
        "startLineNumber" : 239,
        "startColumnNumber" : 12,
        "endLineNumber" : 263,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1) {\n  changed=true;\n}\n else {\n  int newImageIndex=currentObjects.indexOf(currentObject);\n  if (currentImage != newImageIndex && newImageIndex != -1) {\n    boolean animate=animateAllLine;\n    if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n      animate=true;\n      animateToItemFast=true;\n    }\n    if (animate) {\n      nextImage=animateToItem=newImageIndex;\n      animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n      moving=true;\n      animateAllLine=false;\n      lastUpdateTime=System.currentTimeMillis();\n      invalidate();\n    }\n else {\n      fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n      currentImage=newImageIndex;\n      moving=false;\n    }\n    drawDx=0;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1308,
        "startLineNumber" : 238,
        "startColumnNumber" : 22,
        "endLineNumber" : 264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1) {\n    changed=true;\n  }\n else {\n    int newImageIndex=currentObjects.indexOf(currentObject);\n    if (currentImage != newImageIndex && newImageIndex != -1) {\n      boolean animate=animateAllLine;\n      if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n        animate=true;\n        animateToItemFast=true;\n      }\n      if (animate) {\n        nextImage=animateToItem=newImageIndex;\n        animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n        moving=true;\n        animateAllLine=false;\n        lastUpdateTime=System.currentTimeMillis();\n        invalidate();\n      }\n else {\n        fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n        currentImage=newImageIndex;\n        moving=false;\n      }\n      drawDx=0;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1322,
        "startLineNumber" : 238,
        "startColumnNumber" : 8,
        "endLineNumber" : 264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!changed) {\n  if (newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1) {\n    changed=true;\n  }\n else {\n    int newImageIndex=currentObjects.indexOf(currentObject);\n    if (currentImage != newImageIndex && newImageIndex != -1) {\n      boolean animate=animateAllLine;\n      if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n        animate=true;\n        animateToItemFast=true;\n      }\n      if (animate) {\n        nextImage=animateToItem=newImageIndex;\n        animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n        moving=true;\n        animateAllLine=false;\n        lastUpdateTime=System.currentTimeMillis();\n        invalidate();\n      }\n else {\n        fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n        currentImage=newImageIndex;\n        moving=false;\n      }\n      drawDx=0;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 138,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 10976,
        "startLineNumber" : 100,
        "startColumnNumber" : 27,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ignoreChanges) {\n    ignoreChanges=false;\n    return;\n  }\n  int currentIndex=delegate.getCurrentIndex();\n  ArrayList<ImageLocation> imagesArrLocations=delegate.getImagesArrLocations();\n  ArrayList<MessageObject> imagesArr=delegate.getImagesArr();\n  List<TLRPC.PageBlock> pageBlockArr=delegate.getPageBlockArr();\n  int slideshowMessageId=delegate.getSlideshowMessageId();\n  int currentAccount=delegate.getCurrentAccount();\n  hasPhotos=false;\n  boolean changed=false;\n  int newCount=0;\n  Object currentObject=null;\n  if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n    ImageLocation location=imagesArrLocations.get(currentIndex);\n    newCount=imagesArrLocations.size();\n    currentObject=location;\n    hasPhotos=true;\n  }\n else   if (imagesArr != null && !imagesArr.isEmpty()) {\n    MessageObject messageObject=imagesArr.get(currentIndex);\n    currentObject=messageObject;\n    if (messageObject.getGroupIdForUse() != currentGroupId) {\n      changed=true;\n      currentGroupId=messageObject.getGroupIdForUse();\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      int max=Math.min(currentIndex + 10,imagesArr.size());\n      for (int a=currentIndex; a < max; a++) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      int min=Math.max(currentIndex - 10,0);\n      for (int a=currentIndex - 1; a >= min; a--) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n else   if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n    TLRPC.PageBlock pageBlock=pageBlockArr.get(currentIndex);\n    currentObject=pageBlock;\n    if (pageBlock.groupId != currentGroupId) {\n      changed=true;\n      currentGroupId=pageBlock.groupId;\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      for (int a=currentIndex - 1; a >= 0; a--) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n  if (currentObject == null) {\n    return;\n  }\n  if (animationsEnabled) {\n    if (!hasPhotos) {\n      if (showAnimator != null) {\n        showAnimator.cancel();\n        showAnimator=null;\n      }\n      if (drawAlpha > 0f && currentPhotos.size() > 1) {\n        if (hideAnimator == null) {\n          hideAnimator=ValueAnimator.ofFloat(drawAlpha,0f);\n          hideAnimator.setDuration((long)(200 * drawAlpha));\n          hideAnimator.addListener(new AnimatorListenerAdapter(){\n            @Override public void onAnimationEnd(            Animator animation){\n              if (hideAnimator == animation) {\n                hideAnimator=null;\n                fillList();\n              }\n            }\n          }\n);\n          hideAnimator.addUpdateListener(a -> {\n            drawAlpha=(float)a.getAnimatedValue();\n            invalidate();\n          }\n);\n          hideAnimator.start();\n        }\n        return;\n      }\n    }\n else {\n      if (hideAnimator != null) {\n        final Animator a=hideAnimator;\n        hideAnimator=null;\n        a.cancel();\n      }\n      if (drawAlpha < 1f && showAnimator == null) {\n        showAnimator=ValueAnimator.ofFloat(drawAlpha,1f);\n        showAnimator.setDuration((long)(200 * (1f - drawAlpha)));\n        showAnimator.addListener(new AnimatorListenerAdapter(){\n          @Override public void onAnimationStart(          Animator animation){\n            if (delegate != null) {\n              delegate.onShowAnimationStart();\n            }\n          }\n          @Override public void onAnimationEnd(          Animator animation){\n            if (showAnimator == animation) {\n              showAnimator=null;\n            }\n          }\n        }\n);\n        showAnimator.addUpdateListener(a -> {\n          drawAlpha=(float)a.getAnimatedValue();\n          invalidate();\n        }\n);\n      }\n    }\n  }\n  if (!changed) {\n    if (newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1) {\n      changed=true;\n    }\n else {\n      int newImageIndex=currentObjects.indexOf(currentObject);\n      if (currentImage != newImageIndex && newImageIndex != -1) {\n        boolean animate=animateAllLine;\n        if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n          animate=true;\n          animateToItemFast=true;\n        }\n        if (animate) {\n          nextImage=animateToItem=newImageIndex;\n          animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n          moving=true;\n          animateAllLine=false;\n          lastUpdateTime=System.currentTimeMillis();\n          invalidate();\n        }\n else {\n          fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n          currentImage=newImageIndex;\n          moving=false;\n        }\n        drawDx=0;\n      }\n    }\n  }\n  if (changed) {\n    int oldCount=currentPhotos.size();\n    animateAllLine=false;\n    currentPhotos.clear();\n    currentObjects.clear();\n    if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n      currentObjects.addAll(imagesArrLocations);\n      currentPhotos.addAll(imagesArrLocations);\n      currentImage=currentIndex;\n      animateToItem=-1;\n      animateToItemFast=false;\n    }\n else     if (imagesArr != null && !imagesArr.isEmpty()) {\n      if (currentGroupId != 0 || slideshowMessageId != 0) {\n        int max=Math.min(currentIndex + 10,imagesArr.size());\n        for (int a=currentIndex; a < max; a++) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        int min=Math.max(currentIndex - 10,0);\n        for (int a=currentIndex - 1; a >= min; a--) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n else     if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n      if (currentGroupId != 0) {\n        for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        for (int a=currentIndex - 1; a >= 0; a--) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n    if (currentPhotos.size() == 1) {\n      currentPhotos.clear();\n      currentObjects.clear();\n    }\n    if (currentPhotos.size() != oldCount) {\n      requestLayout();\n    }\n    fillImages(false,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1168,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10999,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void fillList(){\n  if (ignoreChanges) {\n    ignoreChanges=false;\n    return;\n  }\n  int currentIndex=delegate.getCurrentIndex();\n  ArrayList<ImageLocation> imagesArrLocations=delegate.getImagesArrLocations();\n  ArrayList<MessageObject> imagesArr=delegate.getImagesArr();\n  List<TLRPC.PageBlock> pageBlockArr=delegate.getPageBlockArr();\n  int slideshowMessageId=delegate.getSlideshowMessageId();\n  int currentAccount=delegate.getCurrentAccount();\n  hasPhotos=false;\n  boolean changed=false;\n  int newCount=0;\n  Object currentObject=null;\n  if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n    ImageLocation location=imagesArrLocations.get(currentIndex);\n    newCount=imagesArrLocations.size();\n    currentObject=location;\n    hasPhotos=true;\n  }\n else   if (imagesArr != null && !imagesArr.isEmpty()) {\n    MessageObject messageObject=imagesArr.get(currentIndex);\n    currentObject=messageObject;\n    if (messageObject.getGroupIdForUse() != currentGroupId) {\n      changed=true;\n      currentGroupId=messageObject.getGroupIdForUse();\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      int max=Math.min(currentIndex + 10,imagesArr.size());\n      for (int a=currentIndex; a < max; a++) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      int min=Math.max(currentIndex - 10,0);\n      for (int a=currentIndex - 1; a >= min; a--) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n else   if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n    TLRPC.PageBlock pageBlock=pageBlockArr.get(currentIndex);\n    currentObject=pageBlock;\n    if (pageBlock.groupId != currentGroupId) {\n      changed=true;\n      currentGroupId=pageBlock.groupId;\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      for (int a=currentIndex - 1; a >= 0; a--) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n  if (currentObject == null) {\n    return;\n  }\n  if (animationsEnabled) {\n    if (!hasPhotos) {\n      if (showAnimator != null) {\n        showAnimator.cancel();\n        showAnimator=null;\n      }\n      if (drawAlpha > 0f && currentPhotos.size() > 1) {\n        if (hideAnimator == null) {\n          hideAnimator=ValueAnimator.ofFloat(drawAlpha,0f);\n          hideAnimator.setDuration((long)(200 * drawAlpha));\n          hideAnimator.addListener(new AnimatorListenerAdapter(){\n            @Override public void onAnimationEnd(            Animator animation){\n              if (hideAnimator == animation) {\n                hideAnimator=null;\n                fillList();\n              }\n            }\n          }\n);\n          hideAnimator.addUpdateListener(a -> {\n            drawAlpha=(float)a.getAnimatedValue();\n            invalidate();\n          }\n);\n          hideAnimator.start();\n        }\n        return;\n      }\n    }\n else {\n      if (hideAnimator != null) {\n        final Animator a=hideAnimator;\n        hideAnimator=null;\n        a.cancel();\n      }\n      if (drawAlpha < 1f && showAnimator == null) {\n        showAnimator=ValueAnimator.ofFloat(drawAlpha,1f);\n        showAnimator.setDuration((long)(200 * (1f - drawAlpha)));\n        showAnimator.addListener(new AnimatorListenerAdapter(){\n          @Override public void onAnimationStart(          Animator animation){\n            if (delegate != null) {\n              delegate.onShowAnimationStart();\n            }\n          }\n          @Override public void onAnimationEnd(          Animator animation){\n            if (showAnimator == animation) {\n              showAnimator=null;\n            }\n          }\n        }\n);\n        showAnimator.addUpdateListener(a -> {\n          drawAlpha=(float)a.getAnimatedValue();\n          invalidate();\n        }\n);\n      }\n    }\n  }\n  if (!changed) {\n    if (newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1) {\n      changed=true;\n    }\n else {\n      int newImageIndex=currentObjects.indexOf(currentObject);\n      if (currentImage != newImageIndex && newImageIndex != -1) {\n        boolean animate=animateAllLine;\n        if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n          animate=true;\n          animateToItemFast=true;\n        }\n        if (animate) {\n          nextImage=animateToItem=newImageIndex;\n          animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n          moving=true;\n          animateAllLine=false;\n          lastUpdateTime=System.currentTimeMillis();\n          invalidate();\n        }\n else {\n          fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n          currentImage=newImageIndex;\n          moving=false;\n        }\n        drawDx=0;\n      }\n    }\n  }\n  if (changed) {\n    int oldCount=currentPhotos.size();\n    animateAllLine=false;\n    currentPhotos.clear();\n    currentObjects.clear();\n    if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n      currentObjects.addAll(imagesArrLocations);\n      currentPhotos.addAll(imagesArrLocations);\n      currentImage=currentIndex;\n      animateToItem=-1;\n      animateToItemFast=false;\n    }\n else     if (imagesArr != null && !imagesArr.isEmpty()) {\n      if (currentGroupId != 0 || slideshowMessageId != 0) {\n        int max=Math.min(currentIndex + 10,imagesArr.size());\n        for (int a=currentIndex; a < max; a++) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        int min=Math.max(currentIndex - 10,0);\n        for (int a=currentIndex - 1; a >= min; a--) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n else     if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n      if (currentGroupId != 0) {\n        for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        for (int a=currentIndex - 1; a >= 0; a--) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n    if (currentPhotos.size() == 1) {\n      currentPhotos.clear();\n      currentObjects.clear();\n    }\n    if (currentPhotos.size() != oldCount) {\n      requestLayout();\n    }\n    fillImages(false,0);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1172,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 239,
        "startColumnNumber" : 16,
        "endLineNumber" : 239,
        "endColumnNumber" : 95
      },
      "nodeContext" : "newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 243,
      "startColumnNumber" : 70,
      "endLineNumber" : 243,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 243,
        "startColumnNumber" : 53,
        "endLineNumber" : 243,
        "endColumnNumber" : 72
      },
      "nodeContext" : "newImageIndex != -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 243,
        "startColumnNumber" : 20,
        "endLineNumber" : 243,
        "endColumnNumber" : 72
      },
      "nodeContext" : "currentImage != newImageIndex && newImageIndex != -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1039,
        "startLineNumber" : 243,
        "startColumnNumber" : 16,
        "endLineNumber" : 262,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (currentImage != newImageIndex && newImageIndex != -1) {\n  boolean animate=animateAllLine;\n  if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n    animate=true;\n    animateToItemFast=true;\n  }\n  if (animate) {\n    nextImage=animateToItem=newImageIndex;\n    animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n    moving=true;\n    animateAllLine=false;\n    lastUpdateTime=System.currentTimeMillis();\n    invalidate();\n  }\n else {\n    fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n    currentImage=newImageIndex;\n    moving=false;\n  }\n  drawDx=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1146,
        "startLineNumber" : 241,
        "startColumnNumber" : 19,
        "endLineNumber" : 263,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int newImageIndex=currentObjects.indexOf(currentObject);\n  if (currentImage != newImageIndex && newImageIndex != -1) {\n    boolean animate=animateAllLine;\n    if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n      animate=true;\n      animateToItemFast=true;\n    }\n    if (animate) {\n      nextImage=animateToItem=newImageIndex;\n      animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n      moving=true;\n      animateAllLine=false;\n      lastUpdateTime=System.currentTimeMillis();\n      invalidate();\n    }\n else {\n      fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n      currentImage=newImageIndex;\n      moving=false;\n    }\n    drawDx=0;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1284,
        "startLineNumber" : 239,
        "startColumnNumber" : 12,
        "endLineNumber" : 263,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1) {\n  changed=true;\n}\n else {\n  int newImageIndex=currentObjects.indexOf(currentObject);\n  if (currentImage != newImageIndex && newImageIndex != -1) {\n    boolean animate=animateAllLine;\n    if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n      animate=true;\n      animateToItemFast=true;\n    }\n    if (animate) {\n      nextImage=animateToItem=newImageIndex;\n      animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n      moving=true;\n      animateAllLine=false;\n      lastUpdateTime=System.currentTimeMillis();\n      invalidate();\n    }\n else {\n      fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n      currentImage=newImageIndex;\n      moving=false;\n    }\n    drawDx=0;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1308,
        "startLineNumber" : 238,
        "startColumnNumber" : 22,
        "endLineNumber" : 264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1) {\n    changed=true;\n  }\n else {\n    int newImageIndex=currentObjects.indexOf(currentObject);\n    if (currentImage != newImageIndex && newImageIndex != -1) {\n      boolean animate=animateAllLine;\n      if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n        animate=true;\n        animateToItemFast=true;\n      }\n      if (animate) {\n        nextImage=animateToItem=newImageIndex;\n        animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n        moving=true;\n        animateAllLine=false;\n        lastUpdateTime=System.currentTimeMillis();\n        invalidate();\n      }\n else {\n        fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n        currentImage=newImageIndex;\n        moving=false;\n      }\n      drawDx=0;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1322,
        "startLineNumber" : 238,
        "startColumnNumber" : 8,
        "endLineNumber" : 264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!changed) {\n  if (newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1) {\n    changed=true;\n  }\n else {\n    int newImageIndex=currentObjects.indexOf(currentObject);\n    if (currentImage != newImageIndex && newImageIndex != -1) {\n      boolean animate=animateAllLine;\n      if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n        animate=true;\n        animateToItemFast=true;\n      }\n      if (animate) {\n        nextImage=animateToItem=newImageIndex;\n        animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n        moving=true;\n        animateAllLine=false;\n        lastUpdateTime=System.currentTimeMillis();\n        invalidate();\n      }\n else {\n        fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n        currentImage=newImageIndex;\n        moving=false;\n      }\n      drawDx=0;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 138,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 10976,
        "startLineNumber" : 100,
        "startColumnNumber" : 27,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ignoreChanges) {\n    ignoreChanges=false;\n    return;\n  }\n  int currentIndex=delegate.getCurrentIndex();\n  ArrayList<ImageLocation> imagesArrLocations=delegate.getImagesArrLocations();\n  ArrayList<MessageObject> imagesArr=delegate.getImagesArr();\n  List<TLRPC.PageBlock> pageBlockArr=delegate.getPageBlockArr();\n  int slideshowMessageId=delegate.getSlideshowMessageId();\n  int currentAccount=delegate.getCurrentAccount();\n  hasPhotos=false;\n  boolean changed=false;\n  int newCount=0;\n  Object currentObject=null;\n  if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n    ImageLocation location=imagesArrLocations.get(currentIndex);\n    newCount=imagesArrLocations.size();\n    currentObject=location;\n    hasPhotos=true;\n  }\n else   if (imagesArr != null && !imagesArr.isEmpty()) {\n    MessageObject messageObject=imagesArr.get(currentIndex);\n    currentObject=messageObject;\n    if (messageObject.getGroupIdForUse() != currentGroupId) {\n      changed=true;\n      currentGroupId=messageObject.getGroupIdForUse();\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      int max=Math.min(currentIndex + 10,imagesArr.size());\n      for (int a=currentIndex; a < max; a++) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      int min=Math.max(currentIndex - 10,0);\n      for (int a=currentIndex - 1; a >= min; a--) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n else   if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n    TLRPC.PageBlock pageBlock=pageBlockArr.get(currentIndex);\n    currentObject=pageBlock;\n    if (pageBlock.groupId != currentGroupId) {\n      changed=true;\n      currentGroupId=pageBlock.groupId;\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      for (int a=currentIndex - 1; a >= 0; a--) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n  if (currentObject == null) {\n    return;\n  }\n  if (animationsEnabled) {\n    if (!hasPhotos) {\n      if (showAnimator != null) {\n        showAnimator.cancel();\n        showAnimator=null;\n      }\n      if (drawAlpha > 0f && currentPhotos.size() > 1) {\n        if (hideAnimator == null) {\n          hideAnimator=ValueAnimator.ofFloat(drawAlpha,0f);\n          hideAnimator.setDuration((long)(200 * drawAlpha));\n          hideAnimator.addListener(new AnimatorListenerAdapter(){\n            @Override public void onAnimationEnd(            Animator animation){\n              if (hideAnimator == animation) {\n                hideAnimator=null;\n                fillList();\n              }\n            }\n          }\n);\n          hideAnimator.addUpdateListener(a -> {\n            drawAlpha=(float)a.getAnimatedValue();\n            invalidate();\n          }\n);\n          hideAnimator.start();\n        }\n        return;\n      }\n    }\n else {\n      if (hideAnimator != null) {\n        final Animator a=hideAnimator;\n        hideAnimator=null;\n        a.cancel();\n      }\n      if (drawAlpha < 1f && showAnimator == null) {\n        showAnimator=ValueAnimator.ofFloat(drawAlpha,1f);\n        showAnimator.setDuration((long)(200 * (1f - drawAlpha)));\n        showAnimator.addListener(new AnimatorListenerAdapter(){\n          @Override public void onAnimationStart(          Animator animation){\n            if (delegate != null) {\n              delegate.onShowAnimationStart();\n            }\n          }\n          @Override public void onAnimationEnd(          Animator animation){\n            if (showAnimator == animation) {\n              showAnimator=null;\n            }\n          }\n        }\n);\n        showAnimator.addUpdateListener(a -> {\n          drawAlpha=(float)a.getAnimatedValue();\n          invalidate();\n        }\n);\n      }\n    }\n  }\n  if (!changed) {\n    if (newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1) {\n      changed=true;\n    }\n else {\n      int newImageIndex=currentObjects.indexOf(currentObject);\n      if (currentImage != newImageIndex && newImageIndex != -1) {\n        boolean animate=animateAllLine;\n        if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n          animate=true;\n          animateToItemFast=true;\n        }\n        if (animate) {\n          nextImage=animateToItem=newImageIndex;\n          animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n          moving=true;\n          animateAllLine=false;\n          lastUpdateTime=System.currentTimeMillis();\n          invalidate();\n        }\n else {\n          fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n          currentImage=newImageIndex;\n          moving=false;\n        }\n        drawDx=0;\n      }\n    }\n  }\n  if (changed) {\n    int oldCount=currentPhotos.size();\n    animateAllLine=false;\n    currentPhotos.clear();\n    currentObjects.clear();\n    if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n      currentObjects.addAll(imagesArrLocations);\n      currentPhotos.addAll(imagesArrLocations);\n      currentImage=currentIndex;\n      animateToItem=-1;\n      animateToItemFast=false;\n    }\n else     if (imagesArr != null && !imagesArr.isEmpty()) {\n      if (currentGroupId != 0 || slideshowMessageId != 0) {\n        int max=Math.min(currentIndex + 10,imagesArr.size());\n        for (int a=currentIndex; a < max; a++) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        int min=Math.max(currentIndex - 10,0);\n        for (int a=currentIndex - 1; a >= min; a--) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n else     if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n      if (currentGroupId != 0) {\n        for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        for (int a=currentIndex - 1; a >= 0; a--) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n    if (currentPhotos.size() == 1) {\n      currentPhotos.clear();\n      currentObjects.clear();\n    }\n    if (currentPhotos.size() != oldCount) {\n      requestLayout();\n    }\n    fillImages(false,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1168,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10999,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void fillList(){\n  if (ignoreChanges) {\n    ignoreChanges=false;\n    return;\n  }\n  int currentIndex=delegate.getCurrentIndex();\n  ArrayList<ImageLocation> imagesArrLocations=delegate.getImagesArrLocations();\n  ArrayList<MessageObject> imagesArr=delegate.getImagesArr();\n  List<TLRPC.PageBlock> pageBlockArr=delegate.getPageBlockArr();\n  int slideshowMessageId=delegate.getSlideshowMessageId();\n  int currentAccount=delegate.getCurrentAccount();\n  hasPhotos=false;\n  boolean changed=false;\n  int newCount=0;\n  Object currentObject=null;\n  if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n    ImageLocation location=imagesArrLocations.get(currentIndex);\n    newCount=imagesArrLocations.size();\n    currentObject=location;\n    hasPhotos=true;\n  }\n else   if (imagesArr != null && !imagesArr.isEmpty()) {\n    MessageObject messageObject=imagesArr.get(currentIndex);\n    currentObject=messageObject;\n    if (messageObject.getGroupIdForUse() != currentGroupId) {\n      changed=true;\n      currentGroupId=messageObject.getGroupIdForUse();\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      int max=Math.min(currentIndex + 10,imagesArr.size());\n      for (int a=currentIndex; a < max; a++) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      int min=Math.max(currentIndex - 10,0);\n      for (int a=currentIndex - 1; a >= min; a--) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n else   if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n    TLRPC.PageBlock pageBlock=pageBlockArr.get(currentIndex);\n    currentObject=pageBlock;\n    if (pageBlock.groupId != currentGroupId) {\n      changed=true;\n      currentGroupId=pageBlock.groupId;\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      for (int a=currentIndex - 1; a >= 0; a--) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n  if (currentObject == null) {\n    return;\n  }\n  if (animationsEnabled) {\n    if (!hasPhotos) {\n      if (showAnimator != null) {\n        showAnimator.cancel();\n        showAnimator=null;\n      }\n      if (drawAlpha > 0f && currentPhotos.size() > 1) {\n        if (hideAnimator == null) {\n          hideAnimator=ValueAnimator.ofFloat(drawAlpha,0f);\n          hideAnimator.setDuration((long)(200 * drawAlpha));\n          hideAnimator.addListener(new AnimatorListenerAdapter(){\n            @Override public void onAnimationEnd(            Animator animation){\n              if (hideAnimator == animation) {\n                hideAnimator=null;\n                fillList();\n              }\n            }\n          }\n);\n          hideAnimator.addUpdateListener(a -> {\n            drawAlpha=(float)a.getAnimatedValue();\n            invalidate();\n          }\n);\n          hideAnimator.start();\n        }\n        return;\n      }\n    }\n else {\n      if (hideAnimator != null) {\n        final Animator a=hideAnimator;\n        hideAnimator=null;\n        a.cancel();\n      }\n      if (drawAlpha < 1f && showAnimator == null) {\n        showAnimator=ValueAnimator.ofFloat(drawAlpha,1f);\n        showAnimator.setDuration((long)(200 * (1f - drawAlpha)));\n        showAnimator.addListener(new AnimatorListenerAdapter(){\n          @Override public void onAnimationStart(          Animator animation){\n            if (delegate != null) {\n              delegate.onShowAnimationStart();\n            }\n          }\n          @Override public void onAnimationEnd(          Animator animation){\n            if (showAnimator == animation) {\n              showAnimator=null;\n            }\n          }\n        }\n);\n        showAnimator.addUpdateListener(a -> {\n          drawAlpha=(float)a.getAnimatedValue();\n          invalidate();\n        }\n);\n      }\n    }\n  }\n  if (!changed) {\n    if (newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1) {\n      changed=true;\n    }\n else {\n      int newImageIndex=currentObjects.indexOf(currentObject);\n      if (currentImage != newImageIndex && newImageIndex != -1) {\n        boolean animate=animateAllLine;\n        if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n          animate=true;\n          animateToItemFast=true;\n        }\n        if (animate) {\n          nextImage=animateToItem=newImageIndex;\n          animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n          moving=true;\n          animateAllLine=false;\n          lastUpdateTime=System.currentTimeMillis();\n          invalidate();\n        }\n else {\n          fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n          currentImage=newImageIndex;\n          moving=false;\n        }\n        drawDx=0;\n      }\n    }\n  }\n  if (changed) {\n    int oldCount=currentPhotos.size();\n    animateAllLine=false;\n    currentPhotos.clear();\n    currentObjects.clear();\n    if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n      currentObjects.addAll(imagesArrLocations);\n      currentPhotos.addAll(imagesArrLocations);\n      currentImage=currentIndex;\n      animateToItem=-1;\n      animateToItemFast=false;\n    }\n else     if (imagesArr != null && !imagesArr.isEmpty()) {\n      if (currentGroupId != 0 || slideshowMessageId != 0) {\n        int max=Math.min(currentIndex + 10,imagesArr.size());\n        for (int a=currentIndex; a < max; a++) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        int min=Math.max(currentIndex - 10,0);\n        for (int a=currentIndex - 1; a >= min; a--) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n else     if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n      if (currentGroupId != 0) {\n        for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        for (int a=currentIndex - 1; a >= 0; a--) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n    if (currentPhotos.size() == 1) {\n      currentPhotos.clear();\n      currentObjects.clear();\n    }\n    if (currentPhotos.size() != oldCount) {\n      requestLayout();\n    }\n    fillImages(false,0);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1172,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 243,
        "startColumnNumber" : 20,
        "endLineNumber" : 243,
        "endColumnNumber" : 72
      },
      "nodeContext" : "currentImage != newImageIndex && newImageIndex != -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 274,
      "startColumnNumber" : 32,
      "endLineNumber" : 274,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 274,
        "startColumnNumber" : 16,
        "endLineNumber" : 274,
        "endColumnNumber" : 34
      },
      "nodeContext" : "animateToItem=-1",
      "nodeType" : "Assignment",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 274,
        "startColumnNumber" : 16,
        "endLineNumber" : 274,
        "endColumnNumber" : 35
      },
      "nodeContext" : "animateToItem=-1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 256,
        "startLineNumber" : 270,
        "startColumnNumber" : 77,
        "endLineNumber" : 276,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  currentObjects.addAll(imagesArrLocations);\n  currentPhotos.addAll(imagesArrLocations);\n  currentImage=currentIndex;\n  animateToItem=-1;\n  animateToItemFast=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3240,
        "startLineNumber" : 270,
        "startColumnNumber" : 12,
        "endLineNumber" : 328,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n  currentObjects.addAll(imagesArrLocations);\n  currentPhotos.addAll(imagesArrLocations);\n  currentImage=currentIndex;\n  animateToItem=-1;\n  animateToItemFast=false;\n}\n else if (imagesArr != null && !imagesArr.isEmpty()) {\n  if (currentGroupId != 0 || slideshowMessageId != 0) {\n    int max=Math.min(currentIndex + 10,imagesArr.size());\n    for (int a=currentIndex; a < max; a++) {\n      MessageObject object=imagesArr.get(a);\n      if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n        currentObjects.add(object);\n        currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n      }\n else {\n        break;\n      }\n    }\n    currentImage=0;\n    animateToItem=-1;\n    animateToItemFast=false;\n    int min=Math.max(currentIndex - 10,0);\n    for (int a=currentIndex - 1; a >= min; a--) {\n      MessageObject object=imagesArr.get(a);\n      if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n        currentObjects.add(0,object);\n        currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n        currentImage++;\n      }\n else {\n        break;\n      }\n    }\n  }\n}\n else if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n  if (currentGroupId != 0) {\n    for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n      TLRPC.PageBlock object=pageBlockArr.get(a);\n      if (object.groupId == currentGroupId) {\n        currentObjects.add(object);\n        currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n      }\n else {\n        break;\n      }\n    }\n    currentImage=0;\n    animateToItem=-1;\n    animateToItemFast=false;\n    for (int a=currentIndex - 1; a >= 0; a--) {\n      TLRPC.PageBlock object=pageBlockArr.get(a);\n      if (object.groupId == currentGroupId) {\n        currentObjects.add(0,object);\n        currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n        currentImage++;\n      }\n else {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 350,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3691,
        "startLineNumber" : 265,
        "startColumnNumber" : 21,
        "endLineNumber" : 337,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int oldCount=currentPhotos.size();\n  animateAllLine=false;\n  currentPhotos.clear();\n  currentObjects.clear();\n  if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n    currentObjects.addAll(imagesArrLocations);\n    currentPhotos.addAll(imagesArrLocations);\n    currentImage=currentIndex;\n    animateToItem=-1;\n    animateToItemFast=false;\n  }\n else   if (imagesArr != null && !imagesArr.isEmpty()) {\n    if (currentGroupId != 0 || slideshowMessageId != 0) {\n      int max=Math.min(currentIndex + 10,imagesArr.size());\n      for (int a=currentIndex; a < max; a++) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          currentObjects.add(object);\n          currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n        }\n else {\n          break;\n        }\n      }\n      currentImage=0;\n      animateToItem=-1;\n      animateToItemFast=false;\n      int min=Math.max(currentIndex - 10,0);\n      for (int a=currentIndex - 1; a >= min; a--) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          currentObjects.add(0,object);\n          currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n          currentImage++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n else   if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n    if (currentGroupId != 0) {\n      for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          currentObjects.add(object);\n          currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n        }\n else {\n          break;\n        }\n      }\n      currentImage=0;\n      animateToItem=-1;\n      animateToItemFast=false;\n      for (int a=currentIndex - 1; a >= 0; a--) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          currentObjects.add(0,object);\n          currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n          currentImage++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n  if (currentPhotos.size() == 1) {\n    currentPhotos.clear();\n    currentObjects.clear();\n  }\n  if (currentPhotos.size() != oldCount) {\n    requestLayout();\n  }\n  fillImages(false,0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3704,
        "startLineNumber" : 265,
        "startColumnNumber" : 8,
        "endLineNumber" : 337,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (changed) {\n  int oldCount=currentPhotos.size();\n  animateAllLine=false;\n  currentPhotos.clear();\n  currentObjects.clear();\n  if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n    currentObjects.addAll(imagesArrLocations);\n    currentPhotos.addAll(imagesArrLocations);\n    currentImage=currentIndex;\n    animateToItem=-1;\n    animateToItemFast=false;\n  }\n else   if (imagesArr != null && !imagesArr.isEmpty()) {\n    if (currentGroupId != 0 || slideshowMessageId != 0) {\n      int max=Math.min(currentIndex + 10,imagesArr.size());\n      for (int a=currentIndex; a < max; a++) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          currentObjects.add(object);\n          currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n        }\n else {\n          break;\n        }\n      }\n      currentImage=0;\n      animateToItem=-1;\n      animateToItemFast=false;\n      int min=Math.max(currentIndex - 10,0);\n      for (int a=currentIndex - 1; a >= min; a--) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          currentObjects.add(0,object);\n          currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n          currentImage++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n else   if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n    if (currentGroupId != 0) {\n      for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          currentObjects.add(object);\n          currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n        }\n else {\n          break;\n        }\n      }\n      currentImage=0;\n      animateToItem=-1;\n      animateToItemFast=false;\n      for (int a=currentIndex - 1; a >= 0; a--) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          currentObjects.add(0,object);\n          currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n          currentImage++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n  if (currentPhotos.size() == 1) {\n    currentPhotos.clear();\n    currentObjects.clear();\n  }\n  if (currentPhotos.size() != oldCount) {\n    requestLayout();\n  }\n  fillImages(false,0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 402,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 10976,
        "startLineNumber" : 100,
        "startColumnNumber" : 27,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ignoreChanges) {\n    ignoreChanges=false;\n    return;\n  }\n  int currentIndex=delegate.getCurrentIndex();\n  ArrayList<ImageLocation> imagesArrLocations=delegate.getImagesArrLocations();\n  ArrayList<MessageObject> imagesArr=delegate.getImagesArr();\n  List<TLRPC.PageBlock> pageBlockArr=delegate.getPageBlockArr();\n  int slideshowMessageId=delegate.getSlideshowMessageId();\n  int currentAccount=delegate.getCurrentAccount();\n  hasPhotos=false;\n  boolean changed=false;\n  int newCount=0;\n  Object currentObject=null;\n  if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n    ImageLocation location=imagesArrLocations.get(currentIndex);\n    newCount=imagesArrLocations.size();\n    currentObject=location;\n    hasPhotos=true;\n  }\n else   if (imagesArr != null && !imagesArr.isEmpty()) {\n    MessageObject messageObject=imagesArr.get(currentIndex);\n    currentObject=messageObject;\n    if (messageObject.getGroupIdForUse() != currentGroupId) {\n      changed=true;\n      currentGroupId=messageObject.getGroupIdForUse();\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      int max=Math.min(currentIndex + 10,imagesArr.size());\n      for (int a=currentIndex; a < max; a++) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      int min=Math.max(currentIndex - 10,0);\n      for (int a=currentIndex - 1; a >= min; a--) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n else   if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n    TLRPC.PageBlock pageBlock=pageBlockArr.get(currentIndex);\n    currentObject=pageBlock;\n    if (pageBlock.groupId != currentGroupId) {\n      changed=true;\n      currentGroupId=pageBlock.groupId;\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      for (int a=currentIndex - 1; a >= 0; a--) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n  if (currentObject == null) {\n    return;\n  }\n  if (animationsEnabled) {\n    if (!hasPhotos) {\n      if (showAnimator != null) {\n        showAnimator.cancel();\n        showAnimator=null;\n      }\n      if (drawAlpha > 0f && currentPhotos.size() > 1) {\n        if (hideAnimator == null) {\n          hideAnimator=ValueAnimator.ofFloat(drawAlpha,0f);\n          hideAnimator.setDuration((long)(200 * drawAlpha));\n          hideAnimator.addListener(new AnimatorListenerAdapter(){\n            @Override public void onAnimationEnd(            Animator animation){\n              if (hideAnimator == animation) {\n                hideAnimator=null;\n                fillList();\n              }\n            }\n          }\n);\n          hideAnimator.addUpdateListener(a -> {\n            drawAlpha=(float)a.getAnimatedValue();\n            invalidate();\n          }\n);\n          hideAnimator.start();\n        }\n        return;\n      }\n    }\n else {\n      if (hideAnimator != null) {\n        final Animator a=hideAnimator;\n        hideAnimator=null;\n        a.cancel();\n      }\n      if (drawAlpha < 1f && showAnimator == null) {\n        showAnimator=ValueAnimator.ofFloat(drawAlpha,1f);\n        showAnimator.setDuration((long)(200 * (1f - drawAlpha)));\n        showAnimator.addListener(new AnimatorListenerAdapter(){\n          @Override public void onAnimationStart(          Animator animation){\n            if (delegate != null) {\n              delegate.onShowAnimationStart();\n            }\n          }\n          @Override public void onAnimationEnd(          Animator animation){\n            if (showAnimator == animation) {\n              showAnimator=null;\n            }\n          }\n        }\n);\n        showAnimator.addUpdateListener(a -> {\n          drawAlpha=(float)a.getAnimatedValue();\n          invalidate();\n        }\n);\n      }\n    }\n  }\n  if (!changed) {\n    if (newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1) {\n      changed=true;\n    }\n else {\n      int newImageIndex=currentObjects.indexOf(currentObject);\n      if (currentImage != newImageIndex && newImageIndex != -1) {\n        boolean animate=animateAllLine;\n        if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n          animate=true;\n          animateToItemFast=true;\n        }\n        if (animate) {\n          nextImage=animateToItem=newImageIndex;\n          animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n          moving=true;\n          animateAllLine=false;\n          lastUpdateTime=System.currentTimeMillis();\n          invalidate();\n        }\n else {\n          fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n          currentImage=newImageIndex;\n          moving=false;\n        }\n        drawDx=0;\n      }\n    }\n  }\n  if (changed) {\n    int oldCount=currentPhotos.size();\n    animateAllLine=false;\n    currentPhotos.clear();\n    currentObjects.clear();\n    if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n      currentObjects.addAll(imagesArrLocations);\n      currentPhotos.addAll(imagesArrLocations);\n      currentImage=currentIndex;\n      animateToItem=-1;\n      animateToItemFast=false;\n    }\n else     if (imagesArr != null && !imagesArr.isEmpty()) {\n      if (currentGroupId != 0 || slideshowMessageId != 0) {\n        int max=Math.min(currentIndex + 10,imagesArr.size());\n        for (int a=currentIndex; a < max; a++) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        int min=Math.max(currentIndex - 10,0);\n        for (int a=currentIndex - 1; a >= min; a--) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n else     if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n      if (currentGroupId != 0) {\n        for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        for (int a=currentIndex - 1; a >= 0; a--) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n    if (currentPhotos.size() == 1) {\n      currentPhotos.clear();\n      currentObjects.clear();\n    }\n    if (currentPhotos.size() != oldCount) {\n      requestLayout();\n    }\n    fillImages(false,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1168,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10999,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void fillList(){\n  if (ignoreChanges) {\n    ignoreChanges=false;\n    return;\n  }\n  int currentIndex=delegate.getCurrentIndex();\n  ArrayList<ImageLocation> imagesArrLocations=delegate.getImagesArrLocations();\n  ArrayList<MessageObject> imagesArr=delegate.getImagesArr();\n  List<TLRPC.PageBlock> pageBlockArr=delegate.getPageBlockArr();\n  int slideshowMessageId=delegate.getSlideshowMessageId();\n  int currentAccount=delegate.getCurrentAccount();\n  hasPhotos=false;\n  boolean changed=false;\n  int newCount=0;\n  Object currentObject=null;\n  if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n    ImageLocation location=imagesArrLocations.get(currentIndex);\n    newCount=imagesArrLocations.size();\n    currentObject=location;\n    hasPhotos=true;\n  }\n else   if (imagesArr != null && !imagesArr.isEmpty()) {\n    MessageObject messageObject=imagesArr.get(currentIndex);\n    currentObject=messageObject;\n    if (messageObject.getGroupIdForUse() != currentGroupId) {\n      changed=true;\n      currentGroupId=messageObject.getGroupIdForUse();\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      int max=Math.min(currentIndex + 10,imagesArr.size());\n      for (int a=currentIndex; a < max; a++) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      int min=Math.max(currentIndex - 10,0);\n      for (int a=currentIndex - 1; a >= min; a--) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n else   if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n    TLRPC.PageBlock pageBlock=pageBlockArr.get(currentIndex);\n    currentObject=pageBlock;\n    if (pageBlock.groupId != currentGroupId) {\n      changed=true;\n      currentGroupId=pageBlock.groupId;\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      for (int a=currentIndex - 1; a >= 0; a--) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n  if (currentObject == null) {\n    return;\n  }\n  if (animationsEnabled) {\n    if (!hasPhotos) {\n      if (showAnimator != null) {\n        showAnimator.cancel();\n        showAnimator=null;\n      }\n      if (drawAlpha > 0f && currentPhotos.size() > 1) {\n        if (hideAnimator == null) {\n          hideAnimator=ValueAnimator.ofFloat(drawAlpha,0f);\n          hideAnimator.setDuration((long)(200 * drawAlpha));\n          hideAnimator.addListener(new AnimatorListenerAdapter(){\n            @Override public void onAnimationEnd(            Animator animation){\n              if (hideAnimator == animation) {\n                hideAnimator=null;\n                fillList();\n              }\n            }\n          }\n);\n          hideAnimator.addUpdateListener(a -> {\n            drawAlpha=(float)a.getAnimatedValue();\n            invalidate();\n          }\n);\n          hideAnimator.start();\n        }\n        return;\n      }\n    }\n else {\n      if (hideAnimator != null) {\n        final Animator a=hideAnimator;\n        hideAnimator=null;\n        a.cancel();\n      }\n      if (drawAlpha < 1f && showAnimator == null) {\n        showAnimator=ValueAnimator.ofFloat(drawAlpha,1f);\n        showAnimator.setDuration((long)(200 * (1f - drawAlpha)));\n        showAnimator.addListener(new AnimatorListenerAdapter(){\n          @Override public void onAnimationStart(          Animator animation){\n            if (delegate != null) {\n              delegate.onShowAnimationStart();\n            }\n          }\n          @Override public void onAnimationEnd(          Animator animation){\n            if (showAnimator == animation) {\n              showAnimator=null;\n            }\n          }\n        }\n);\n        showAnimator.addUpdateListener(a -> {\n          drawAlpha=(float)a.getAnimatedValue();\n          invalidate();\n        }\n);\n      }\n    }\n  }\n  if (!changed) {\n    if (newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1) {\n      changed=true;\n    }\n else {\n      int newImageIndex=currentObjects.indexOf(currentObject);\n      if (currentImage != newImageIndex && newImageIndex != -1) {\n        boolean animate=animateAllLine;\n        if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n          animate=true;\n          animateToItemFast=true;\n        }\n        if (animate) {\n          nextImage=animateToItem=newImageIndex;\n          animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n          moving=true;\n          animateAllLine=false;\n          lastUpdateTime=System.currentTimeMillis();\n          invalidate();\n        }\n else {\n          fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n          currentImage=newImageIndex;\n          moving=false;\n        }\n        drawDx=0;\n      }\n    }\n  }\n  if (changed) {\n    int oldCount=currentPhotos.size();\n    animateAllLine=false;\n    currentPhotos.clear();\n    currentObjects.clear();\n    if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n      currentObjects.addAll(imagesArrLocations);\n      currentPhotos.addAll(imagesArrLocations);\n      currentImage=currentIndex;\n      animateToItem=-1;\n      animateToItemFast=false;\n    }\n else     if (imagesArr != null && !imagesArr.isEmpty()) {\n      if (currentGroupId != 0 || slideshowMessageId != 0) {\n        int max=Math.min(currentIndex + 10,imagesArr.size());\n        for (int a=currentIndex; a < max; a++) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        int min=Math.max(currentIndex - 10,0);\n        for (int a=currentIndex - 1; a >= min; a--) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n else     if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n      if (currentGroupId != 0) {\n        for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        for (int a=currentIndex - 1; a >= 0; a--) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n    if (currentPhotos.size() == 1) {\n      currentPhotos.clear();\n      currentObjects.clear();\n    }\n    if (currentPhotos.size() != oldCount) {\n      requestLayout();\n    }\n    fillImages(false,0);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1172,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 274,
        "startColumnNumber" : 16,
        "endLineNumber" : 274,
        "endColumnNumber" : 35
      },
      "nodeContext" : "animateToItem=-1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 289,
      "startColumnNumber" : 36,
      "endLineNumber" : 289,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 289,
        "startColumnNumber" : 20,
        "endLineNumber" : 289,
        "endColumnNumber" : 38
      },
      "nodeContext" : "animateToItem=-1",
      "nodeType" : "Assignment",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 289,
        "startColumnNumber" : 20,
        "endLineNumber" : 289,
        "endColumnNumber" : 39
      },
      "nodeContext" : "animateToItem=-1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1484,
        "startLineNumber" : 277,
        "startColumnNumber" : 68,
        "endLineNumber" : 302,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int max=Math.min(currentIndex + 10,imagesArr.size());\n  for (int a=currentIndex; a < max; a++) {\n    MessageObject object=imagesArr.get(a);\n    if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n      currentObjects.add(object);\n      currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n    }\n else {\n      break;\n    }\n  }\n  currentImage=0;\n  animateToItem=-1;\n  animateToItemFast=false;\n  int min=Math.max(currentIndex - 10,0);\n  for (int a=currentIndex - 1; a >= min; a--) {\n    MessageObject object=imagesArr.get(a);\n    if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n      currentObjects.add(0,object);\n      currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n      currentImage++;\n    }\n else {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1536,
        "startLineNumber" : 277,
        "startColumnNumber" : 16,
        "endLineNumber" : 302,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (currentGroupId != 0 || slideshowMessageId != 0) {\n  int max=Math.min(currentIndex + 10,imagesArr.size());\n  for (int a=currentIndex; a < max; a++) {\n    MessageObject object=imagesArr.get(a);\n    if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n      currentObjects.add(object);\n      currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n    }\n else {\n      break;\n    }\n  }\n  currentImage=0;\n  animateToItem=-1;\n  animateToItemFast=false;\n  int min=Math.max(currentIndex - 10,0);\n  for (int a=currentIndex - 1; a >= min; a--) {\n    MessageObject object=imagesArr.get(a);\n    if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n      currentObjects.add(0,object);\n      currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n      currentImage++;\n    }\n else {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 167,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1568,
        "startLineNumber" : 276,
        "startColumnNumber" : 66,
        "endLineNumber" : 303,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (currentGroupId != 0 || slideshowMessageId != 0) {\n    int max=Math.min(currentIndex + 10,imagesArr.size());\n    for (int a=currentIndex; a < max; a++) {\n      MessageObject object=imagesArr.get(a);\n      if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n        currentObjects.add(object);\n        currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n      }\n else {\n        break;\n      }\n    }\n    currentImage=0;\n    animateToItem=-1;\n    animateToItemFast=false;\n    int min=Math.max(currentIndex - 10,0);\n    for (int a=currentIndex - 1; a >= min; a--) {\n      MessageObject object=imagesArr.get(a);\n      if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n        currentObjects.add(0,object);\n        currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n        currentImage++;\n      }\n else {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2913,
        "startLineNumber" : 276,
        "startColumnNumber" : 19,
        "endLineNumber" : 328,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (imagesArr != null && !imagesArr.isEmpty()) {\n  if (currentGroupId != 0 || slideshowMessageId != 0) {\n    int max=Math.min(currentIndex + 10,imagesArr.size());\n    for (int a=currentIndex; a < max; a++) {\n      MessageObject object=imagesArr.get(a);\n      if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n        currentObjects.add(object);\n        currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n      }\n else {\n        break;\n      }\n    }\n    currentImage=0;\n    animateToItem=-1;\n    animateToItemFast=false;\n    int min=Math.max(currentIndex - 10,0);\n    for (int a=currentIndex - 1; a >= min; a--) {\n      MessageObject object=imagesArr.get(a);\n      if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n        currentObjects.add(0,object);\n        currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n        currentImage++;\n      }\n else {\n        break;\n      }\n    }\n  }\n}\n else if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n  if (currentGroupId != 0) {\n    for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n      TLRPC.PageBlock object=pageBlockArr.get(a);\n      if (object.groupId == currentGroupId) {\n        currentObjects.add(object);\n        currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n      }\n else {\n        break;\n      }\n    }\n    currentImage=0;\n    animateToItem=-1;\n    animateToItemFast=false;\n    for (int a=currentIndex - 1; a >= 0; a--) {\n      TLRPC.PageBlock object=pageBlockArr.get(a);\n      if (object.groupId == currentGroupId) {\n        currentObjects.add(0,object);\n        currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n        currentImage++;\n      }\n else {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 317,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3240,
        "startLineNumber" : 270,
        "startColumnNumber" : 12,
        "endLineNumber" : 328,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n  currentObjects.addAll(imagesArrLocations);\n  currentPhotos.addAll(imagesArrLocations);\n  currentImage=currentIndex;\n  animateToItem=-1;\n  animateToItemFast=false;\n}\n else if (imagesArr != null && !imagesArr.isEmpty()) {\n  if (currentGroupId != 0 || slideshowMessageId != 0) {\n    int max=Math.min(currentIndex + 10,imagesArr.size());\n    for (int a=currentIndex; a < max; a++) {\n      MessageObject object=imagesArr.get(a);\n      if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n        currentObjects.add(object);\n        currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n      }\n else {\n        break;\n      }\n    }\n    currentImage=0;\n    animateToItem=-1;\n    animateToItemFast=false;\n    int min=Math.max(currentIndex - 10,0);\n    for (int a=currentIndex - 1; a >= min; a--) {\n      MessageObject object=imagesArr.get(a);\n      if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n        currentObjects.add(0,object);\n        currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n        currentImage++;\n      }\n else {\n        break;\n      }\n    }\n  }\n}\n else if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n  if (currentGroupId != 0) {\n    for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n      TLRPC.PageBlock object=pageBlockArr.get(a);\n      if (object.groupId == currentGroupId) {\n        currentObjects.add(object);\n        currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n      }\n else {\n        break;\n      }\n    }\n    currentImage=0;\n    animateToItem=-1;\n    animateToItemFast=false;\n    for (int a=currentIndex - 1; a >= 0; a--) {\n      TLRPC.PageBlock object=pageBlockArr.get(a);\n      if (object.groupId == currentGroupId) {\n        currentObjects.add(0,object);\n        currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n        currentImage++;\n      }\n else {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 350,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3691,
        "startLineNumber" : 265,
        "startColumnNumber" : 21,
        "endLineNumber" : 337,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int oldCount=currentPhotos.size();\n  animateAllLine=false;\n  currentPhotos.clear();\n  currentObjects.clear();\n  if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n    currentObjects.addAll(imagesArrLocations);\n    currentPhotos.addAll(imagesArrLocations);\n    currentImage=currentIndex;\n    animateToItem=-1;\n    animateToItemFast=false;\n  }\n else   if (imagesArr != null && !imagesArr.isEmpty()) {\n    if (currentGroupId != 0 || slideshowMessageId != 0) {\n      int max=Math.min(currentIndex + 10,imagesArr.size());\n      for (int a=currentIndex; a < max; a++) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          currentObjects.add(object);\n          currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n        }\n else {\n          break;\n        }\n      }\n      currentImage=0;\n      animateToItem=-1;\n      animateToItemFast=false;\n      int min=Math.max(currentIndex - 10,0);\n      for (int a=currentIndex - 1; a >= min; a--) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          currentObjects.add(0,object);\n          currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n          currentImage++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n else   if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n    if (currentGroupId != 0) {\n      for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          currentObjects.add(object);\n          currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n        }\n else {\n          break;\n        }\n      }\n      currentImage=0;\n      animateToItem=-1;\n      animateToItemFast=false;\n      for (int a=currentIndex - 1; a >= 0; a--) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          currentObjects.add(0,object);\n          currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n          currentImage++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n  if (currentPhotos.size() == 1) {\n    currentPhotos.clear();\n    currentObjects.clear();\n  }\n  if (currentPhotos.size() != oldCount) {\n    requestLayout();\n  }\n  fillImages(false,0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3704,
        "startLineNumber" : 265,
        "startColumnNumber" : 8,
        "endLineNumber" : 337,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (changed) {\n  int oldCount=currentPhotos.size();\n  animateAllLine=false;\n  currentPhotos.clear();\n  currentObjects.clear();\n  if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n    currentObjects.addAll(imagesArrLocations);\n    currentPhotos.addAll(imagesArrLocations);\n    currentImage=currentIndex;\n    animateToItem=-1;\n    animateToItemFast=false;\n  }\n else   if (imagesArr != null && !imagesArr.isEmpty()) {\n    if (currentGroupId != 0 || slideshowMessageId != 0) {\n      int max=Math.min(currentIndex + 10,imagesArr.size());\n      for (int a=currentIndex; a < max; a++) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          currentObjects.add(object);\n          currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n        }\n else {\n          break;\n        }\n      }\n      currentImage=0;\n      animateToItem=-1;\n      animateToItemFast=false;\n      int min=Math.max(currentIndex - 10,0);\n      for (int a=currentIndex - 1; a >= min; a--) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          currentObjects.add(0,object);\n          currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n          currentImage++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n else   if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n    if (currentGroupId != 0) {\n      for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          currentObjects.add(object);\n          currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n        }\n else {\n          break;\n        }\n      }\n      currentImage=0;\n      animateToItem=-1;\n      animateToItemFast=false;\n      for (int a=currentIndex - 1; a >= 0; a--) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          currentObjects.add(0,object);\n          currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n          currentImage++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n  if (currentPhotos.size() == 1) {\n    currentPhotos.clear();\n    currentObjects.clear();\n  }\n  if (currentPhotos.size() != oldCount) {\n    requestLayout();\n  }\n  fillImages(false,0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 402,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 10976,
        "startLineNumber" : 100,
        "startColumnNumber" : 27,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ignoreChanges) {\n    ignoreChanges=false;\n    return;\n  }\n  int currentIndex=delegate.getCurrentIndex();\n  ArrayList<ImageLocation> imagesArrLocations=delegate.getImagesArrLocations();\n  ArrayList<MessageObject> imagesArr=delegate.getImagesArr();\n  List<TLRPC.PageBlock> pageBlockArr=delegate.getPageBlockArr();\n  int slideshowMessageId=delegate.getSlideshowMessageId();\n  int currentAccount=delegate.getCurrentAccount();\n  hasPhotos=false;\n  boolean changed=false;\n  int newCount=0;\n  Object currentObject=null;\n  if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n    ImageLocation location=imagesArrLocations.get(currentIndex);\n    newCount=imagesArrLocations.size();\n    currentObject=location;\n    hasPhotos=true;\n  }\n else   if (imagesArr != null && !imagesArr.isEmpty()) {\n    MessageObject messageObject=imagesArr.get(currentIndex);\n    currentObject=messageObject;\n    if (messageObject.getGroupIdForUse() != currentGroupId) {\n      changed=true;\n      currentGroupId=messageObject.getGroupIdForUse();\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      int max=Math.min(currentIndex + 10,imagesArr.size());\n      for (int a=currentIndex; a < max; a++) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      int min=Math.max(currentIndex - 10,0);\n      for (int a=currentIndex - 1; a >= min; a--) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n else   if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n    TLRPC.PageBlock pageBlock=pageBlockArr.get(currentIndex);\n    currentObject=pageBlock;\n    if (pageBlock.groupId != currentGroupId) {\n      changed=true;\n      currentGroupId=pageBlock.groupId;\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      for (int a=currentIndex - 1; a >= 0; a--) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n  if (currentObject == null) {\n    return;\n  }\n  if (animationsEnabled) {\n    if (!hasPhotos) {\n      if (showAnimator != null) {\n        showAnimator.cancel();\n        showAnimator=null;\n      }\n      if (drawAlpha > 0f && currentPhotos.size() > 1) {\n        if (hideAnimator == null) {\n          hideAnimator=ValueAnimator.ofFloat(drawAlpha,0f);\n          hideAnimator.setDuration((long)(200 * drawAlpha));\n          hideAnimator.addListener(new AnimatorListenerAdapter(){\n            @Override public void onAnimationEnd(            Animator animation){\n              if (hideAnimator == animation) {\n                hideAnimator=null;\n                fillList();\n              }\n            }\n          }\n);\n          hideAnimator.addUpdateListener(a -> {\n            drawAlpha=(float)a.getAnimatedValue();\n            invalidate();\n          }\n);\n          hideAnimator.start();\n        }\n        return;\n      }\n    }\n else {\n      if (hideAnimator != null) {\n        final Animator a=hideAnimator;\n        hideAnimator=null;\n        a.cancel();\n      }\n      if (drawAlpha < 1f && showAnimator == null) {\n        showAnimator=ValueAnimator.ofFloat(drawAlpha,1f);\n        showAnimator.setDuration((long)(200 * (1f - drawAlpha)));\n        showAnimator.addListener(new AnimatorListenerAdapter(){\n          @Override public void onAnimationStart(          Animator animation){\n            if (delegate != null) {\n              delegate.onShowAnimationStart();\n            }\n          }\n          @Override public void onAnimationEnd(          Animator animation){\n            if (showAnimator == animation) {\n              showAnimator=null;\n            }\n          }\n        }\n);\n        showAnimator.addUpdateListener(a -> {\n          drawAlpha=(float)a.getAnimatedValue();\n          invalidate();\n        }\n);\n      }\n    }\n  }\n  if (!changed) {\n    if (newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1) {\n      changed=true;\n    }\n else {\n      int newImageIndex=currentObjects.indexOf(currentObject);\n      if (currentImage != newImageIndex && newImageIndex != -1) {\n        boolean animate=animateAllLine;\n        if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n          animate=true;\n          animateToItemFast=true;\n        }\n        if (animate) {\n          nextImage=animateToItem=newImageIndex;\n          animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n          moving=true;\n          animateAllLine=false;\n          lastUpdateTime=System.currentTimeMillis();\n          invalidate();\n        }\n else {\n          fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n          currentImage=newImageIndex;\n          moving=false;\n        }\n        drawDx=0;\n      }\n    }\n  }\n  if (changed) {\n    int oldCount=currentPhotos.size();\n    animateAllLine=false;\n    currentPhotos.clear();\n    currentObjects.clear();\n    if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n      currentObjects.addAll(imagesArrLocations);\n      currentPhotos.addAll(imagesArrLocations);\n      currentImage=currentIndex;\n      animateToItem=-1;\n      animateToItemFast=false;\n    }\n else     if (imagesArr != null && !imagesArr.isEmpty()) {\n      if (currentGroupId != 0 || slideshowMessageId != 0) {\n        int max=Math.min(currentIndex + 10,imagesArr.size());\n        for (int a=currentIndex; a < max; a++) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        int min=Math.max(currentIndex - 10,0);\n        for (int a=currentIndex - 1; a >= min; a--) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n else     if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n      if (currentGroupId != 0) {\n        for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        for (int a=currentIndex - 1; a >= 0; a--) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n    if (currentPhotos.size() == 1) {\n      currentPhotos.clear();\n      currentObjects.clear();\n    }\n    if (currentPhotos.size() != oldCount) {\n      requestLayout();\n    }\n    fillImages(false,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1168,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10999,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void fillList(){\n  if (ignoreChanges) {\n    ignoreChanges=false;\n    return;\n  }\n  int currentIndex=delegate.getCurrentIndex();\n  ArrayList<ImageLocation> imagesArrLocations=delegate.getImagesArrLocations();\n  ArrayList<MessageObject> imagesArr=delegate.getImagesArr();\n  List<TLRPC.PageBlock> pageBlockArr=delegate.getPageBlockArr();\n  int slideshowMessageId=delegate.getSlideshowMessageId();\n  int currentAccount=delegate.getCurrentAccount();\n  hasPhotos=false;\n  boolean changed=false;\n  int newCount=0;\n  Object currentObject=null;\n  if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n    ImageLocation location=imagesArrLocations.get(currentIndex);\n    newCount=imagesArrLocations.size();\n    currentObject=location;\n    hasPhotos=true;\n  }\n else   if (imagesArr != null && !imagesArr.isEmpty()) {\n    MessageObject messageObject=imagesArr.get(currentIndex);\n    currentObject=messageObject;\n    if (messageObject.getGroupIdForUse() != currentGroupId) {\n      changed=true;\n      currentGroupId=messageObject.getGroupIdForUse();\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      int max=Math.min(currentIndex + 10,imagesArr.size());\n      for (int a=currentIndex; a < max; a++) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      int min=Math.max(currentIndex - 10,0);\n      for (int a=currentIndex - 1; a >= min; a--) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n else   if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n    TLRPC.PageBlock pageBlock=pageBlockArr.get(currentIndex);\n    currentObject=pageBlock;\n    if (pageBlock.groupId != currentGroupId) {\n      changed=true;\n      currentGroupId=pageBlock.groupId;\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      for (int a=currentIndex - 1; a >= 0; a--) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n  if (currentObject == null) {\n    return;\n  }\n  if (animationsEnabled) {\n    if (!hasPhotos) {\n      if (showAnimator != null) {\n        showAnimator.cancel();\n        showAnimator=null;\n      }\n      if (drawAlpha > 0f && currentPhotos.size() > 1) {\n        if (hideAnimator == null) {\n          hideAnimator=ValueAnimator.ofFloat(drawAlpha,0f);\n          hideAnimator.setDuration((long)(200 * drawAlpha));\n          hideAnimator.addListener(new AnimatorListenerAdapter(){\n            @Override public void onAnimationEnd(            Animator animation){\n              if (hideAnimator == animation) {\n                hideAnimator=null;\n                fillList();\n              }\n            }\n          }\n);\n          hideAnimator.addUpdateListener(a -> {\n            drawAlpha=(float)a.getAnimatedValue();\n            invalidate();\n          }\n);\n          hideAnimator.start();\n        }\n        return;\n      }\n    }\n else {\n      if (hideAnimator != null) {\n        final Animator a=hideAnimator;\n        hideAnimator=null;\n        a.cancel();\n      }\n      if (drawAlpha < 1f && showAnimator == null) {\n        showAnimator=ValueAnimator.ofFloat(drawAlpha,1f);\n        showAnimator.setDuration((long)(200 * (1f - drawAlpha)));\n        showAnimator.addListener(new AnimatorListenerAdapter(){\n          @Override public void onAnimationStart(          Animator animation){\n            if (delegate != null) {\n              delegate.onShowAnimationStart();\n            }\n          }\n          @Override public void onAnimationEnd(          Animator animation){\n            if (showAnimator == animation) {\n              showAnimator=null;\n            }\n          }\n        }\n);\n        showAnimator.addUpdateListener(a -> {\n          drawAlpha=(float)a.getAnimatedValue();\n          invalidate();\n        }\n);\n      }\n    }\n  }\n  if (!changed) {\n    if (newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1) {\n      changed=true;\n    }\n else {\n      int newImageIndex=currentObjects.indexOf(currentObject);\n      if (currentImage != newImageIndex && newImageIndex != -1) {\n        boolean animate=animateAllLine;\n        if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n          animate=true;\n          animateToItemFast=true;\n        }\n        if (animate) {\n          nextImage=animateToItem=newImageIndex;\n          animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n          moving=true;\n          animateAllLine=false;\n          lastUpdateTime=System.currentTimeMillis();\n          invalidate();\n        }\n else {\n          fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n          currentImage=newImageIndex;\n          moving=false;\n        }\n        drawDx=0;\n      }\n    }\n  }\n  if (changed) {\n    int oldCount=currentPhotos.size();\n    animateAllLine=false;\n    currentPhotos.clear();\n    currentObjects.clear();\n    if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n      currentObjects.addAll(imagesArrLocations);\n      currentPhotos.addAll(imagesArrLocations);\n      currentImage=currentIndex;\n      animateToItem=-1;\n      animateToItemFast=false;\n    }\n else     if (imagesArr != null && !imagesArr.isEmpty()) {\n      if (currentGroupId != 0 || slideshowMessageId != 0) {\n        int max=Math.min(currentIndex + 10,imagesArr.size());\n        for (int a=currentIndex; a < max; a++) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        int min=Math.max(currentIndex - 10,0);\n        for (int a=currentIndex - 1; a >= min; a--) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n else     if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n      if (currentGroupId != 0) {\n        for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        for (int a=currentIndex - 1; a >= 0; a--) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n    if (currentPhotos.size() == 1) {\n      currentPhotos.clear();\n      currentObjects.clear();\n    }\n    if (currentPhotos.size() != oldCount) {\n      requestLayout();\n    }\n    fillImages(false,0);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1172,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 289,
        "startColumnNumber" : 20,
        "endLineNumber" : 289,
        "endColumnNumber" : 39
      },
      "nodeContext" : "animateToItem=-1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 315,
      "startColumnNumber" : 36,
      "endLineNumber" : 315,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 315,
        "startColumnNumber" : 20,
        "endLineNumber" : 315,
        "endColumnNumber" : 38
      },
      "nodeContext" : "animateToItem=-1",
      "nodeType" : "Assignment",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 315,
        "startColumnNumber" : 20,
        "endLineNumber" : 315,
        "endColumnNumber" : 39
      },
      "nodeContext" : "animateToItem=-1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1182,
        "startLineNumber" : 304,
        "startColumnNumber" : 41,
        "endLineNumber" : 327,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n    TLRPC.PageBlock object=pageBlockArr.get(a);\n    if (object.groupId == currentGroupId) {\n      currentObjects.add(object);\n      currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n    }\n else {\n      break;\n    }\n  }\n  currentImage=0;\n  animateToItem=-1;\n  animateToItemFast=false;\n  for (int a=currentIndex - 1; a >= 0; a--) {\n    TLRPC.PageBlock object=pageBlockArr.get(a);\n    if (object.groupId == currentGroupId) {\n      currentObjects.add(0,object);\n      currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n      currentImage++;\n    }\n else {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1207,
        "startLineNumber" : 304,
        "startColumnNumber" : 16,
        "endLineNumber" : 327,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (currentGroupId != 0) {\n  for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n    TLRPC.PageBlock object=pageBlockArr.get(a);\n    if (object.groupId == currentGroupId) {\n      currentObjects.add(object);\n      currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n    }\n else {\n      break;\n    }\n  }\n  currentImage=0;\n  animateToItem=-1;\n  animateToItemFast=false;\n  for (int a=currentIndex - 1; a >= 0; a--) {\n    TLRPC.PageBlock object=pageBlockArr.get(a);\n    if (object.groupId == currentGroupId) {\n      currentObjects.add(0,object);\n      currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n      currentImage++;\n    }\n else {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1239,
        "startLineNumber" : 303,
        "startColumnNumber" : 72,
        "endLineNumber" : 328,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (currentGroupId != 0) {\n    for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n      TLRPC.PageBlock object=pageBlockArr.get(a);\n      if (object.groupId == currentGroupId) {\n        currentObjects.add(object);\n        currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n      }\n else {\n        break;\n      }\n    }\n    currentImage=0;\n    animateToItem=-1;\n    animateToItemFast=false;\n    for (int a=currentIndex - 1; a >= 0; a--) {\n      TLRPC.PageBlock object=pageBlockArr.get(a);\n      if (object.groupId == currentGroupId) {\n        currentObjects.add(0,object);\n        currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n        currentImage++;\n      }\n else {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 131,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1292,
        "startLineNumber" : 303,
        "startColumnNumber" : 19,
        "endLineNumber" : 328,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n  if (currentGroupId != 0) {\n    for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n      TLRPC.PageBlock object=pageBlockArr.get(a);\n      if (object.groupId == currentGroupId) {\n        currentObjects.add(object);\n        currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n      }\n else {\n        break;\n      }\n    }\n    currentImage=0;\n    animateToItem=-1;\n    animateToItemFast=false;\n    for (int a=currentIndex - 1; a >= 0; a--) {\n      TLRPC.PageBlock object=pageBlockArr.get(a);\n      if (object.groupId == currentGroupId) {\n        currentObjects.add(0,object);\n        currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n        currentImage++;\n      }\n else {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 140,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2913,
        "startLineNumber" : 276,
        "startColumnNumber" : 19,
        "endLineNumber" : 328,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (imagesArr != null && !imagesArr.isEmpty()) {\n  if (currentGroupId != 0 || slideshowMessageId != 0) {\n    int max=Math.min(currentIndex + 10,imagesArr.size());\n    for (int a=currentIndex; a < max; a++) {\n      MessageObject object=imagesArr.get(a);\n      if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n        currentObjects.add(object);\n        currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n      }\n else {\n        break;\n      }\n    }\n    currentImage=0;\n    animateToItem=-1;\n    animateToItemFast=false;\n    int min=Math.max(currentIndex - 10,0);\n    for (int a=currentIndex - 1; a >= min; a--) {\n      MessageObject object=imagesArr.get(a);\n      if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n        currentObjects.add(0,object);\n        currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n        currentImage++;\n      }\n else {\n        break;\n      }\n    }\n  }\n}\n else if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n  if (currentGroupId != 0) {\n    for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n      TLRPC.PageBlock object=pageBlockArr.get(a);\n      if (object.groupId == currentGroupId) {\n        currentObjects.add(object);\n        currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n      }\n else {\n        break;\n      }\n    }\n    currentImage=0;\n    animateToItem=-1;\n    animateToItemFast=false;\n    for (int a=currentIndex - 1; a >= 0; a--) {\n      TLRPC.PageBlock object=pageBlockArr.get(a);\n      if (object.groupId == currentGroupId) {\n        currentObjects.add(0,object);\n        currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n        currentImage++;\n      }\n else {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 317,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3240,
        "startLineNumber" : 270,
        "startColumnNumber" : 12,
        "endLineNumber" : 328,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n  currentObjects.addAll(imagesArrLocations);\n  currentPhotos.addAll(imagesArrLocations);\n  currentImage=currentIndex;\n  animateToItem=-1;\n  animateToItemFast=false;\n}\n else if (imagesArr != null && !imagesArr.isEmpty()) {\n  if (currentGroupId != 0 || slideshowMessageId != 0) {\n    int max=Math.min(currentIndex + 10,imagesArr.size());\n    for (int a=currentIndex; a < max; a++) {\n      MessageObject object=imagesArr.get(a);\n      if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n        currentObjects.add(object);\n        currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n      }\n else {\n        break;\n      }\n    }\n    currentImage=0;\n    animateToItem=-1;\n    animateToItemFast=false;\n    int min=Math.max(currentIndex - 10,0);\n    for (int a=currentIndex - 1; a >= min; a--) {\n      MessageObject object=imagesArr.get(a);\n      if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n        currentObjects.add(0,object);\n        currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n        currentImage++;\n      }\n else {\n        break;\n      }\n    }\n  }\n}\n else if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n  if (currentGroupId != 0) {\n    for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n      TLRPC.PageBlock object=pageBlockArr.get(a);\n      if (object.groupId == currentGroupId) {\n        currentObjects.add(object);\n        currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n      }\n else {\n        break;\n      }\n    }\n    currentImage=0;\n    animateToItem=-1;\n    animateToItemFast=false;\n    for (int a=currentIndex - 1; a >= 0; a--) {\n      TLRPC.PageBlock object=pageBlockArr.get(a);\n      if (object.groupId == currentGroupId) {\n        currentObjects.add(0,object);\n        currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n        currentImage++;\n      }\n else {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 350,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3691,
        "startLineNumber" : 265,
        "startColumnNumber" : 21,
        "endLineNumber" : 337,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int oldCount=currentPhotos.size();\n  animateAllLine=false;\n  currentPhotos.clear();\n  currentObjects.clear();\n  if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n    currentObjects.addAll(imagesArrLocations);\n    currentPhotos.addAll(imagesArrLocations);\n    currentImage=currentIndex;\n    animateToItem=-1;\n    animateToItemFast=false;\n  }\n else   if (imagesArr != null && !imagesArr.isEmpty()) {\n    if (currentGroupId != 0 || slideshowMessageId != 0) {\n      int max=Math.min(currentIndex + 10,imagesArr.size());\n      for (int a=currentIndex; a < max; a++) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          currentObjects.add(object);\n          currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n        }\n else {\n          break;\n        }\n      }\n      currentImage=0;\n      animateToItem=-1;\n      animateToItemFast=false;\n      int min=Math.max(currentIndex - 10,0);\n      for (int a=currentIndex - 1; a >= min; a--) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          currentObjects.add(0,object);\n          currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n          currentImage++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n else   if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n    if (currentGroupId != 0) {\n      for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          currentObjects.add(object);\n          currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n        }\n else {\n          break;\n        }\n      }\n      currentImage=0;\n      animateToItem=-1;\n      animateToItemFast=false;\n      for (int a=currentIndex - 1; a >= 0; a--) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          currentObjects.add(0,object);\n          currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n          currentImage++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n  if (currentPhotos.size() == 1) {\n    currentPhotos.clear();\n    currentObjects.clear();\n  }\n  if (currentPhotos.size() != oldCount) {\n    requestLayout();\n  }\n  fillImages(false,0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3704,
        "startLineNumber" : 265,
        "startColumnNumber" : 8,
        "endLineNumber" : 337,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (changed) {\n  int oldCount=currentPhotos.size();\n  animateAllLine=false;\n  currentPhotos.clear();\n  currentObjects.clear();\n  if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n    currentObjects.addAll(imagesArrLocations);\n    currentPhotos.addAll(imagesArrLocations);\n    currentImage=currentIndex;\n    animateToItem=-1;\n    animateToItemFast=false;\n  }\n else   if (imagesArr != null && !imagesArr.isEmpty()) {\n    if (currentGroupId != 0 || slideshowMessageId != 0) {\n      int max=Math.min(currentIndex + 10,imagesArr.size());\n      for (int a=currentIndex; a < max; a++) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          currentObjects.add(object);\n          currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n        }\n else {\n          break;\n        }\n      }\n      currentImage=0;\n      animateToItem=-1;\n      animateToItemFast=false;\n      int min=Math.max(currentIndex - 10,0);\n      for (int a=currentIndex - 1; a >= min; a--) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          currentObjects.add(0,object);\n          currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n          currentImage++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n else   if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n    if (currentGroupId != 0) {\n      for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          currentObjects.add(object);\n          currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n        }\n else {\n          break;\n        }\n      }\n      currentImage=0;\n      animateToItem=-1;\n      animateToItemFast=false;\n      for (int a=currentIndex - 1; a >= 0; a--) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          currentObjects.add(0,object);\n          currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n          currentImage++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n  if (currentPhotos.size() == 1) {\n    currentPhotos.clear();\n    currentObjects.clear();\n  }\n  if (currentPhotos.size() != oldCount) {\n    requestLayout();\n  }\n  fillImages(false,0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 402,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 10976,
        "startLineNumber" : 100,
        "startColumnNumber" : 27,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ignoreChanges) {\n    ignoreChanges=false;\n    return;\n  }\n  int currentIndex=delegate.getCurrentIndex();\n  ArrayList<ImageLocation> imagesArrLocations=delegate.getImagesArrLocations();\n  ArrayList<MessageObject> imagesArr=delegate.getImagesArr();\n  List<TLRPC.PageBlock> pageBlockArr=delegate.getPageBlockArr();\n  int slideshowMessageId=delegate.getSlideshowMessageId();\n  int currentAccount=delegate.getCurrentAccount();\n  hasPhotos=false;\n  boolean changed=false;\n  int newCount=0;\n  Object currentObject=null;\n  if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n    ImageLocation location=imagesArrLocations.get(currentIndex);\n    newCount=imagesArrLocations.size();\n    currentObject=location;\n    hasPhotos=true;\n  }\n else   if (imagesArr != null && !imagesArr.isEmpty()) {\n    MessageObject messageObject=imagesArr.get(currentIndex);\n    currentObject=messageObject;\n    if (messageObject.getGroupIdForUse() != currentGroupId) {\n      changed=true;\n      currentGroupId=messageObject.getGroupIdForUse();\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      int max=Math.min(currentIndex + 10,imagesArr.size());\n      for (int a=currentIndex; a < max; a++) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      int min=Math.max(currentIndex - 10,0);\n      for (int a=currentIndex - 1; a >= min; a--) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n else   if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n    TLRPC.PageBlock pageBlock=pageBlockArr.get(currentIndex);\n    currentObject=pageBlock;\n    if (pageBlock.groupId != currentGroupId) {\n      changed=true;\n      currentGroupId=pageBlock.groupId;\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      for (int a=currentIndex - 1; a >= 0; a--) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n  if (currentObject == null) {\n    return;\n  }\n  if (animationsEnabled) {\n    if (!hasPhotos) {\n      if (showAnimator != null) {\n        showAnimator.cancel();\n        showAnimator=null;\n      }\n      if (drawAlpha > 0f && currentPhotos.size() > 1) {\n        if (hideAnimator == null) {\n          hideAnimator=ValueAnimator.ofFloat(drawAlpha,0f);\n          hideAnimator.setDuration((long)(200 * drawAlpha));\n          hideAnimator.addListener(new AnimatorListenerAdapter(){\n            @Override public void onAnimationEnd(            Animator animation){\n              if (hideAnimator == animation) {\n                hideAnimator=null;\n                fillList();\n              }\n            }\n          }\n);\n          hideAnimator.addUpdateListener(a -> {\n            drawAlpha=(float)a.getAnimatedValue();\n            invalidate();\n          }\n);\n          hideAnimator.start();\n        }\n        return;\n      }\n    }\n else {\n      if (hideAnimator != null) {\n        final Animator a=hideAnimator;\n        hideAnimator=null;\n        a.cancel();\n      }\n      if (drawAlpha < 1f && showAnimator == null) {\n        showAnimator=ValueAnimator.ofFloat(drawAlpha,1f);\n        showAnimator.setDuration((long)(200 * (1f - drawAlpha)));\n        showAnimator.addListener(new AnimatorListenerAdapter(){\n          @Override public void onAnimationStart(          Animator animation){\n            if (delegate != null) {\n              delegate.onShowAnimationStart();\n            }\n          }\n          @Override public void onAnimationEnd(          Animator animation){\n            if (showAnimator == animation) {\n              showAnimator=null;\n            }\n          }\n        }\n);\n        showAnimator.addUpdateListener(a -> {\n          drawAlpha=(float)a.getAnimatedValue();\n          invalidate();\n        }\n);\n      }\n    }\n  }\n  if (!changed) {\n    if (newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1) {\n      changed=true;\n    }\n else {\n      int newImageIndex=currentObjects.indexOf(currentObject);\n      if (currentImage != newImageIndex && newImageIndex != -1) {\n        boolean animate=animateAllLine;\n        if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n          animate=true;\n          animateToItemFast=true;\n        }\n        if (animate) {\n          nextImage=animateToItem=newImageIndex;\n          animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n          moving=true;\n          animateAllLine=false;\n          lastUpdateTime=System.currentTimeMillis();\n          invalidate();\n        }\n else {\n          fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n          currentImage=newImageIndex;\n          moving=false;\n        }\n        drawDx=0;\n      }\n    }\n  }\n  if (changed) {\n    int oldCount=currentPhotos.size();\n    animateAllLine=false;\n    currentPhotos.clear();\n    currentObjects.clear();\n    if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n      currentObjects.addAll(imagesArrLocations);\n      currentPhotos.addAll(imagesArrLocations);\n      currentImage=currentIndex;\n      animateToItem=-1;\n      animateToItemFast=false;\n    }\n else     if (imagesArr != null && !imagesArr.isEmpty()) {\n      if (currentGroupId != 0 || slideshowMessageId != 0) {\n        int max=Math.min(currentIndex + 10,imagesArr.size());\n        for (int a=currentIndex; a < max; a++) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        int min=Math.max(currentIndex - 10,0);\n        for (int a=currentIndex - 1; a >= min; a--) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n else     if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n      if (currentGroupId != 0) {\n        for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        for (int a=currentIndex - 1; a >= 0; a--) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n    if (currentPhotos.size() == 1) {\n      currentPhotos.clear();\n      currentObjects.clear();\n    }\n    if (currentPhotos.size() != oldCount) {\n      requestLayout();\n    }\n    fillImages(false,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1168,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10999,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void fillList(){\n  if (ignoreChanges) {\n    ignoreChanges=false;\n    return;\n  }\n  int currentIndex=delegate.getCurrentIndex();\n  ArrayList<ImageLocation> imagesArrLocations=delegate.getImagesArrLocations();\n  ArrayList<MessageObject> imagesArr=delegate.getImagesArr();\n  List<TLRPC.PageBlock> pageBlockArr=delegate.getPageBlockArr();\n  int slideshowMessageId=delegate.getSlideshowMessageId();\n  int currentAccount=delegate.getCurrentAccount();\n  hasPhotos=false;\n  boolean changed=false;\n  int newCount=0;\n  Object currentObject=null;\n  if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n    ImageLocation location=imagesArrLocations.get(currentIndex);\n    newCount=imagesArrLocations.size();\n    currentObject=location;\n    hasPhotos=true;\n  }\n else   if (imagesArr != null && !imagesArr.isEmpty()) {\n    MessageObject messageObject=imagesArr.get(currentIndex);\n    currentObject=messageObject;\n    if (messageObject.getGroupIdForUse() != currentGroupId) {\n      changed=true;\n      currentGroupId=messageObject.getGroupIdForUse();\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      int max=Math.min(currentIndex + 10,imagesArr.size());\n      for (int a=currentIndex; a < max; a++) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      int min=Math.max(currentIndex - 10,0);\n      for (int a=currentIndex - 1; a >= min; a--) {\n        MessageObject object=imagesArr.get(a);\n        if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n else   if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n    TLRPC.PageBlock pageBlock=pageBlockArr.get(currentIndex);\n    currentObject=pageBlock;\n    if (pageBlock.groupId != currentGroupId) {\n      changed=true;\n      currentGroupId=pageBlock.groupId;\n    }\n    if (currentGroupId != 0) {\n      hasPhotos=true;\n      for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n      for (int a=currentIndex - 1; a >= 0; a--) {\n        TLRPC.PageBlock object=pageBlockArr.get(a);\n        if (object.groupId == currentGroupId) {\n          newCount++;\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n  if (currentObject == null) {\n    return;\n  }\n  if (animationsEnabled) {\n    if (!hasPhotos) {\n      if (showAnimator != null) {\n        showAnimator.cancel();\n        showAnimator=null;\n      }\n      if (drawAlpha > 0f && currentPhotos.size() > 1) {\n        if (hideAnimator == null) {\n          hideAnimator=ValueAnimator.ofFloat(drawAlpha,0f);\n          hideAnimator.setDuration((long)(200 * drawAlpha));\n          hideAnimator.addListener(new AnimatorListenerAdapter(){\n            @Override public void onAnimationEnd(            Animator animation){\n              if (hideAnimator == animation) {\n                hideAnimator=null;\n                fillList();\n              }\n            }\n          }\n);\n          hideAnimator.addUpdateListener(a -> {\n            drawAlpha=(float)a.getAnimatedValue();\n            invalidate();\n          }\n);\n          hideAnimator.start();\n        }\n        return;\n      }\n    }\n else {\n      if (hideAnimator != null) {\n        final Animator a=hideAnimator;\n        hideAnimator=null;\n        a.cancel();\n      }\n      if (drawAlpha < 1f && showAnimator == null) {\n        showAnimator=ValueAnimator.ofFloat(drawAlpha,1f);\n        showAnimator.setDuration((long)(200 * (1f - drawAlpha)));\n        showAnimator.addListener(new AnimatorListenerAdapter(){\n          @Override public void onAnimationStart(          Animator animation){\n            if (delegate != null) {\n              delegate.onShowAnimationStart();\n            }\n          }\n          @Override public void onAnimationEnd(          Animator animation){\n            if (showAnimator == animation) {\n              showAnimator=null;\n            }\n          }\n        }\n);\n        showAnimator.addUpdateListener(a -> {\n          drawAlpha=(float)a.getAnimatedValue();\n          invalidate();\n        }\n);\n      }\n    }\n  }\n  if (!changed) {\n    if (newCount != currentPhotos.size() || currentObjects.indexOf(currentObject) == -1) {\n      changed=true;\n    }\n else {\n      int newImageIndex=currentObjects.indexOf(currentObject);\n      if (currentImage != newImageIndex && newImageIndex != -1) {\n        boolean animate=animateAllLine;\n        if (!animate && !moving && (newImageIndex == currentImage - 1 || newImageIndex == currentImage + 1)) {\n          animate=true;\n          animateToItemFast=true;\n        }\n        if (animate) {\n          nextImage=animateToItem=newImageIndex;\n          animateToDX=(currentImage - newImageIndex) * (itemWidth + itemSpacing);\n          moving=true;\n          animateAllLine=false;\n          lastUpdateTime=System.currentTimeMillis();\n          invalidate();\n        }\n else {\n          fillImages(true,(currentImage - newImageIndex) * (itemWidth + itemSpacing));\n          currentImage=newImageIndex;\n          moving=false;\n        }\n        drawDx=0;\n      }\n    }\n  }\n  if (changed) {\n    int oldCount=currentPhotos.size();\n    animateAllLine=false;\n    currentPhotos.clear();\n    currentObjects.clear();\n    if (imagesArrLocations != null && !imagesArrLocations.isEmpty()) {\n      currentObjects.addAll(imagesArrLocations);\n      currentPhotos.addAll(imagesArrLocations);\n      currentImage=currentIndex;\n      animateToItem=-1;\n      animateToItemFast=false;\n    }\n else     if (imagesArr != null && !imagesArr.isEmpty()) {\n      if (currentGroupId != 0 || slideshowMessageId != 0) {\n        int max=Math.min(currentIndex + 10,imagesArr.size());\n        for (int a=currentIndex; a < max; a++) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        int min=Math.max(currentIndex - 10,0);\n        for (int a=currentIndex - 1; a >= min; a--) {\n          MessageObject object=imagesArr.get(a);\n          if (slideshowMessageId != 0 || object.getGroupIdForUse() == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs,56,true),object.photoThumbsObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n else     if (pageBlockArr != null && !pageBlockArr.isEmpty()) {\n      if (currentGroupId != 0) {\n        for (int a=currentIndex, size=pageBlockArr.size(); a < size; a++) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(object);\n            currentPhotos.add(ImageLocation.getForObject(object.thumb,object.thumbObject));\n          }\n else {\n            break;\n          }\n        }\n        currentImage=0;\n        animateToItem=-1;\n        animateToItemFast=false;\n        for (int a=currentIndex - 1; a >= 0; a--) {\n          TLRPC.PageBlock object=pageBlockArr.get(a);\n          if (object.groupId == currentGroupId) {\n            currentObjects.add(0,object);\n            currentPhotos.add(0,ImageLocation.getForObject(object.thumb,object.thumbObject));\n            currentImage++;\n          }\n else {\n            break;\n          }\n        }\n      }\n    }\n    if (currentPhotos.size() == 1) {\n      currentPhotos.clear();\n      currentObjects.clear();\n    }\n    if (currentPhotos.size() != oldCount) {\n      requestLayout();\n    }\n    fillImages(false,0);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1172,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 315,
        "startColumnNumber" : 20,
        "endLineNumber" : 315,
        "endColumnNumber" : 39
      },
      "nodeContext" : "animateToItem=-1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 239,
    "startColumnNumber" : 93,
    "endLineNumber" : 239,
    "endColumnNumber" : 95
  }, {
    "charLength" : 2,
    "startLineNumber" : 243,
    "startColumnNumber" : 70,
    "endLineNumber" : 243,
    "endColumnNumber" : 72
  }, {
    "charLength" : 2,
    "startLineNumber" : 274,
    "startColumnNumber" : 32,
    "endLineNumber" : 274,
    "endColumnNumber" : 34
  }, {
    "charLength" : 2,
    "startLineNumber" : 289,
    "startColumnNumber" : 36,
    "endLineNumber" : 289,
    "endColumnNumber" : 38
  }, {
    "charLength" : 2,
    "startLineNumber" : 315,
    "startColumnNumber" : 36,
    "endLineNumber" : 315,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 6
  } ]
}