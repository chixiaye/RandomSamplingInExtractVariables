{
  "id" : 239,
  "expression" : "entries",
  "projectName" : "Blankj@AndroidUtilCode",
  "commitID" : "b0f09e2df62a8b5e40c07016bf0588e3d1eb4151",
  "filePath" : "/utilcode/src/main/java/com/blankj/utilcode/util/ZipUtils.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "entries",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 298,
      "startColumnNumber" : 15,
      "endLineNumber" : 298,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 298,
        "startColumnNumber" : 15,
        "endLineNumber" : 298,
        "endColumnNumber" : 40
      },
      "nodeContext" : "entries.hasMoreElements()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1305,
        "startLineNumber" : 298,
        "startColumnNumber" : 8,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (entries.hasMoreElements()) {\n  ZipEntry entry=((ZipEntry)entries.nextElement());\n  String entryName=entry.getName();\n  if (StringUtils.isEmpty(keyword) || FileUtils.getFileName(entryName).toLowerCase().contains(keyword.toLowerCase())) {\n    String filePath=destDir + File.separator + entryName;\n    File file=new File(filePath);\n    files.add(file);\n    if (entry.isDirectory()) {\n      if (!FileUtils.createOrExistsDir(file))       return null;\n    }\n else {\n      if (!FileUtils.createOrExistsFile(file))       return null;\n      InputStream in=null;\n      OutputStream out=null;\n      try {\n        in=new BufferedInputStream(zf.getInputStream(entry));\n        out=new BufferedOutputStream(new FileOutputStream(file));\n        byte buffer[]=new byte[KB];\n        int len;\n        while ((len=in.read(buffer)) != -1) {\n          out.write(buffer,0,len);\n        }\n      }\n  finally {\n        CloseUtils.closeIO(in,out);\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 164,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1540,
        "startLineNumber" : 293,
        "startColumnNumber" : 31,
        "endLineNumber" : 326,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (zipFile == null || destDir == null)   return null;\n  List<File> files=new ArrayList<>();\n  ZipFile zf=new ZipFile(zipFile);\n  Enumeration<?> entries=zf.entries();\n  while (entries.hasMoreElements()) {\n    ZipEntry entry=((ZipEntry)entries.nextElement());\n    String entryName=entry.getName();\n    if (StringUtils.isEmpty(keyword) || FileUtils.getFileName(entryName).toLowerCase().contains(keyword.toLowerCase())) {\n      String filePath=destDir + File.separator + entryName;\n      File file=new File(filePath);\n      files.add(file);\n      if (entry.isDirectory()) {\n        if (!FileUtils.createOrExistsDir(file))         return null;\n      }\n else {\n        if (!FileUtils.createOrExistsFile(file))         return null;\n        InputStream in=null;\n        OutputStream out=null;\n        try {\n          in=new BufferedInputStream(zf.getInputStream(entry));\n          out=new BufferedOutputStream(new FileOutputStream(file));\n          byte buffer[]=new byte[KB];\n          int len;\n          while ((len=in.read(buffer)) != -1) {\n            out.write(buffer,0,len);\n          }\n        }\n  finally {\n          CloseUtils.closeIO(in,out);\n        }\n      }\n    }\n  }\n  return files;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1862,
        "startLineNumber" : 283,
        "startColumnNumber" : 4,
        "endLineNumber" : 326,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * 解压带有关键字的文件\n * @param zipFile 待解压文件\n * @param destDir 目标目录\n * @param keyword 关键字\n * @return 返回带有关键字的文件链表\n * @throws IOException IO错误时抛出\n */\npublic static List<File> unzipFileByKeyword(final File zipFile,final File destDir,final String keyword) throws IOException {\n  if (zipFile == null || destDir == null)   return null;\n  List<File> files=new ArrayList<>();\n  ZipFile zf=new ZipFile(zipFile);\n  Enumeration<?> entries=zf.entries();\n  while (entries.hasMoreElements()) {\n    ZipEntry entry=((ZipEntry)entries.nextElement());\n    String entryName=entry.getName();\n    if (StringUtils.isEmpty(keyword) || FileUtils.getFileName(entryName).toLowerCase().contains(keyword.toLowerCase())) {\n      String filePath=destDir + File.separator + entryName;\n      File file=new File(filePath);\n      files.add(file);\n      if (entry.isDirectory()) {\n        if (!FileUtils.createOrExistsDir(file))         return null;\n      }\n else {\n        if (!FileUtils.createOrExistsFile(file))         return null;\n        InputStream in=null;\n        OutputStream out=null;\n        try {\n          in=new BufferedInputStream(zf.getInputStream(entry));\n          out=new BufferedOutputStream(new FileOutputStream(file));\n          byte buffer[]=new byte[KB];\n          int len;\n          while ((len=in.read(buffer)) != -1) {\n            out.write(buffer,0,len);\n          }\n        }\n  finally {\n          CloseUtils.closeIO(in,out);\n        }\n      }\n    }\n  }\n  return files;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 235,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 298,
        "startColumnNumber" : 15,
        "endLineNumber" : 298,
        "endColumnNumber" : 40
      },
      "nodeContext" : "entries.hasMoreElements()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Enumeration<>"
  }, {
    "nodeContext" : "entries",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 299,
      "startColumnNumber" : 41,
      "endLineNumber" : 299,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 299,
        "startColumnNumber" : 41,
        "endLineNumber" : 299,
        "endColumnNumber" : 62
      },
      "nodeContext" : "entries.nextElement()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 299,
        "startColumnNumber" : 30,
        "endLineNumber" : 299,
        "endColumnNumber" : 62
      },
      "nodeContext" : "(ZipEntry)entries.nextElement()",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 299,
        "startColumnNumber" : 29,
        "endLineNumber" : 299,
        "endColumnNumber" : 63
      },
      "nodeContext" : "((ZipEntry)entries.nextElement())",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 299,
        "startColumnNumber" : 21,
        "endLineNumber" : 299,
        "endColumnNumber" : 63
      },
      "nodeContext" : "entry=((ZipEntry)entries.nextElement())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 299,
        "startColumnNumber" : 12,
        "endLineNumber" : 299,
        "endColumnNumber" : 64
      },
      "nodeContext" : "ZipEntry entry=((ZipEntry)entries.nextElement());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1271,
        "startLineNumber" : 298,
        "startColumnNumber" : 42,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ZipEntry entry=((ZipEntry)entries.nextElement());\n  String entryName=entry.getName();\n  if (StringUtils.isEmpty(keyword) || FileUtils.getFileName(entryName).toLowerCase().contains(keyword.toLowerCase())) {\n    String filePath=destDir + File.separator + entryName;\n    File file=new File(filePath);\n    files.add(file);\n    if (entry.isDirectory()) {\n      if (!FileUtils.createOrExistsDir(file))       return null;\n    }\n else {\n      if (!FileUtils.createOrExistsFile(file))       return null;\n      InputStream in=null;\n      OutputStream out=null;\n      try {\n        in=new BufferedInputStream(zf.getInputStream(entry));\n        out=new BufferedOutputStream(new FileOutputStream(file));\n        byte buffer[]=new byte[KB];\n        int len;\n        while ((len=in.read(buffer)) != -1) {\n          out.write(buffer,0,len);\n        }\n      }\n  finally {\n        CloseUtils.closeIO(in,out);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1305,
        "startLineNumber" : 298,
        "startColumnNumber" : 8,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (entries.hasMoreElements()) {\n  ZipEntry entry=((ZipEntry)entries.nextElement());\n  String entryName=entry.getName();\n  if (StringUtils.isEmpty(keyword) || FileUtils.getFileName(entryName).toLowerCase().contains(keyword.toLowerCase())) {\n    String filePath=destDir + File.separator + entryName;\n    File file=new File(filePath);\n    files.add(file);\n    if (entry.isDirectory()) {\n      if (!FileUtils.createOrExistsDir(file))       return null;\n    }\n else {\n      if (!FileUtils.createOrExistsFile(file))       return null;\n      InputStream in=null;\n      OutputStream out=null;\n      try {\n        in=new BufferedInputStream(zf.getInputStream(entry));\n        out=new BufferedOutputStream(new FileOutputStream(file));\n        byte buffer[]=new byte[KB];\n        int len;\n        while ((len=in.read(buffer)) != -1) {\n          out.write(buffer,0,len);\n        }\n      }\n  finally {\n        CloseUtils.closeIO(in,out);\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 164,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1540,
        "startLineNumber" : 293,
        "startColumnNumber" : 31,
        "endLineNumber" : 326,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (zipFile == null || destDir == null)   return null;\n  List<File> files=new ArrayList<>();\n  ZipFile zf=new ZipFile(zipFile);\n  Enumeration<?> entries=zf.entries();\n  while (entries.hasMoreElements()) {\n    ZipEntry entry=((ZipEntry)entries.nextElement());\n    String entryName=entry.getName();\n    if (StringUtils.isEmpty(keyword) || FileUtils.getFileName(entryName).toLowerCase().contains(keyword.toLowerCase())) {\n      String filePath=destDir + File.separator + entryName;\n      File file=new File(filePath);\n      files.add(file);\n      if (entry.isDirectory()) {\n        if (!FileUtils.createOrExistsDir(file))         return null;\n      }\n else {\n        if (!FileUtils.createOrExistsFile(file))         return null;\n        InputStream in=null;\n        OutputStream out=null;\n        try {\n          in=new BufferedInputStream(zf.getInputStream(entry));\n          out=new BufferedOutputStream(new FileOutputStream(file));\n          byte buffer[]=new byte[KB];\n          int len;\n          while ((len=in.read(buffer)) != -1) {\n            out.write(buffer,0,len);\n          }\n        }\n  finally {\n          CloseUtils.closeIO(in,out);\n        }\n      }\n    }\n  }\n  return files;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1862,
        "startLineNumber" : 283,
        "startColumnNumber" : 4,
        "endLineNumber" : 326,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * 解压带有关键字的文件\n * @param zipFile 待解压文件\n * @param destDir 目标目录\n * @param keyword 关键字\n * @return 返回带有关键字的文件链表\n * @throws IOException IO错误时抛出\n */\npublic static List<File> unzipFileByKeyword(final File zipFile,final File destDir,final String keyword) throws IOException {\n  if (zipFile == null || destDir == null)   return null;\n  List<File> files=new ArrayList<>();\n  ZipFile zf=new ZipFile(zipFile);\n  Enumeration<?> entries=zf.entries();\n  while (entries.hasMoreElements()) {\n    ZipEntry entry=((ZipEntry)entries.nextElement());\n    String entryName=entry.getName();\n    if (StringUtils.isEmpty(keyword) || FileUtils.getFileName(entryName).toLowerCase().contains(keyword.toLowerCase())) {\n      String filePath=destDir + File.separator + entryName;\n      File file=new File(filePath);\n      files.add(file);\n      if (entry.isDirectory()) {\n        if (!FileUtils.createOrExistsDir(file))         return null;\n      }\n else {\n        if (!FileUtils.createOrExistsFile(file))         return null;\n        InputStream in=null;\n        OutputStream out=null;\n        try {\n          in=new BufferedInputStream(zf.getInputStream(entry));\n          out=new BufferedOutputStream(new FileOutputStream(file));\n          byte buffer[]=new byte[KB];\n          int len;\n          while ((len=in.read(buffer)) != -1) {\n            out.write(buffer,0,len);\n          }\n        }\n  finally {\n          CloseUtils.closeIO(in,out);\n        }\n      }\n    }\n  }\n  return files;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 235,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 299,
        "startColumnNumber" : 12,
        "endLineNumber" : 299,
        "endColumnNumber" : 64
      },
      "nodeContext" : "ZipEntry entry=((ZipEntry)entries.nextElement());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.Enumeration<>"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 298,
    "startColumnNumber" : 15,
    "endLineNumber" : 298,
    "endColumnNumber" : 22
  }, {
    "charLength" : 7,
    "startLineNumber" : 299,
    "startColumnNumber" : 41,
    "endLineNumber" : 299,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  } ]
}