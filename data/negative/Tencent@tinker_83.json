{
  "id" : 83,
  "expression" : "newClassesDescToCheck",
  "projectName" : "Tencent@tinker",
  "commitID" : "8be71815d8bfacae6ba0ccba43244b52c18d1c86",
  "filePath" : "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/ExcludedClassModifiedChecker.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "newClassesDescToCheck",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 160,
      "startColumnNumber" : 28,
      "endLineNumber" : 160,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 160,
        "startColumnNumber" : 28,
        "endLineNumber" : 160,
        "endColumnNumber" : 57
      },
      "nodeContext" : "newClassesDescToCheck.clear()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 160,
        "startColumnNumber" : 28,
        "endLineNumber" : 160,
        "endColumnNumber" : 58
      },
      "nodeContext" : "newClassesDescToCheck.clear();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 721,
        "startLineNumber" : 159,
        "startColumnNumber" : 44,
        "endLineNumber" : 171,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  newClassesDescToCheck.clear();\n  for (  ClassDef classDef : newDex.classDefs()) {\n    String desc=newDex.typeNames().get(classDef.typeIndex);\n    if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n      newClassesDescToCheck.add(desc);\n    }\n  }\n  if (!newClassesDescToCheck.isEmpty()) {\n    stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 741,
        "startLineNumber" : 159,
        "startColumnNumber" : 24,
        "endLineNumber" : 171,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (newDex != null) {\n  newClassesDescToCheck.clear();\n  for (  ClassDef classDef : newDex.classDefs()) {\n    String desc=newDex.typeNames().get(classDef.typeIndex);\n    if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n      newClassesDescToCheck.add(desc);\n    }\n  }\n  if (!newClassesDescToCheck.isEmpty()) {\n    stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n    break;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2063,
        "startLineNumber" : 135,
        "startColumnNumber" : 27,
        "endLineNumber" : 174,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n  for (  String patternStr : config.mDexLoaderPattern) {\n    patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n  }\n  if (oldDex != null) {\n    oldClassesDescToCheck.clear();\n    for (    ClassDef classDef : oldDex.classDefs()) {\n      String desc=oldDex.typeNames().get(classDef.typeIndex);\n      if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n        oldClassesDescToCheck.add(desc);\n      }\n    }\n    if (!oldClassesDescToCheck.isEmpty()) {\n      stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n      break;\n    }\n  }\n  if (newDex != null) {\n    newClassesDescToCheck.clear();\n    for (    ClassDef classDef : newDex.classDefs()) {\n      String desc=newDex.typeNames().get(classDef.typeIndex);\n      if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n        newClassesDescToCheck.add(desc);\n      }\n    }\n    if (!newClassesDescToCheck.isEmpty()) {\n      stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n      break;\n    }\n  }\n  stmCode=STMCODE_END;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4493,
        "startLineNumber" : 100,
        "startColumnNumber" : 20,
        "endLineNumber" : 174,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isPrimaryDex) {\n  if (oldFile == null) {\n    stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n  }\n else   if (newFile == null) {\n    stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n  }\n else {\n    dexCmptor.startCheck(oldDex,newDex);\n    deletedClassInfos=dexCmptor.getDeletedClassInfos();\n    addedClassInfos=dexCmptor.getAddedClassInfos();\n    changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n    if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n      stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n    }\n else {\n      if (addedClassInfos.isEmpty()) {\n        ArrayList<String> removeClasses=new ArrayList<>();\n        for (        String classname : changedClassInfosMap.keySet()) {\n          if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n            Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n            removeClasses.add(classname);\n          }\n        }\n        changedClassInfosMap.keySet().removeAll(removeClasses);\n        if (changedClassInfosMap.isEmpty()) {\n          stmCode=STMCODE_END;\n        }\n else {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n        }\n      }\n else {\n        stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n      }\n    }\n  }\n}\n else {\n  Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n  for (  String patternStr : config.mDexLoaderPattern) {\n    patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n  }\n  if (oldDex != null) {\n    oldClassesDescToCheck.clear();\n    for (    ClassDef classDef : oldDex.classDefs()) {\n      String desc=oldDex.typeNames().get(classDef.typeIndex);\n      if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n        oldClassesDescToCheck.add(desc);\n      }\n    }\n    if (!oldClassesDescToCheck.isEmpty()) {\n      stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n      break;\n    }\n  }\n  if (newDex != null) {\n    newClassesDescToCheck.clear();\n    for (    ClassDef classDef : newDex.classDefs()) {\n      String desc=newDex.typeNames().get(classDef.typeIndex);\n      if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n        newClassesDescToCheck.add(desc);\n      }\n    }\n    if (!newClassesDescToCheck.isEmpty()) {\n      stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n      break;\n    }\n  }\n  stmCode=STMCODE_END;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 285,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 4657,
        "startLineNumber" : 97,
        "startColumnNumber" : 36,
        "endLineNumber" : 176,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n  if (isPrimaryDex) {\n    if (oldFile == null) {\n      stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n    }\n else     if (newFile == null) {\n      stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n    }\n else {\n      dexCmptor.startCheck(oldDex,newDex);\n      deletedClassInfos=dexCmptor.getDeletedClassInfos();\n      addedClassInfos=dexCmptor.getAddedClassInfos();\n      changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n      if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n        stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n      }\n else {\n        if (addedClassInfos.isEmpty()) {\n          ArrayList<String> removeClasses=new ArrayList<>();\n          for (          String classname : changedClassInfosMap.keySet()) {\n            if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n              Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n              removeClasses.add(classname);\n            }\n          }\n          changedClassInfosMap.keySet().removeAll(removeClasses);\n          if (changedClassInfosMap.isEmpty()) {\n            stmCode=STMCODE_END;\n          }\n else {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n          }\n        }\n else {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n        }\n      }\n    }\n  }\n else {\n    Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n    for (    String patternStr : config.mDexLoaderPattern) {\n      patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n    }\n    if (oldDex != null) {\n      oldClassesDescToCheck.clear();\n      for (      ClassDef classDef : oldDex.classDefs()) {\n        String desc=oldDex.typeNames().get(classDef.typeIndex);\n        if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n          oldClassesDescToCheck.add(desc);\n        }\n      }\n      if (!oldClassesDescToCheck.isEmpty()) {\n        stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n        break;\n      }\n    }\n    if (newDex != null) {\n      newClassesDescToCheck.clear();\n      for (      ClassDef classDef : newDex.classDefs()) {\n        String desc=newDex.typeNames().get(classDef.typeIndex);\n        if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n          newClassesDescToCheck.add(desc);\n        }\n      }\n      if (!newClassesDescToCheck.isEmpty()) {\n        stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n        break;\n      }\n    }\n    stmCode=STMCODE_END;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8031,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (stmCode) {\ncase STMCODE_START:{\n    boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n    if (isPrimaryDex) {\n      if (oldFile == null) {\n        stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n      }\n else       if (newFile == null) {\n        stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n      }\n else {\n        dexCmptor.startCheck(oldDex,newDex);\n        deletedClassInfos=dexCmptor.getDeletedClassInfos();\n        addedClassInfos=dexCmptor.getAddedClassInfos();\n        changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n        if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n        }\n else {\n          if (addedClassInfos.isEmpty()) {\n            ArrayList<String> removeClasses=new ArrayList<>();\n            for (            String classname : changedClassInfosMap.keySet()) {\n              if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                removeClasses.add(classname);\n              }\n            }\n            changedClassInfosMap.keySet().removeAll(removeClasses);\n            if (changedClassInfosMap.isEmpty()) {\n              stmCode=STMCODE_END;\n            }\n else {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n            }\n          }\n else {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n          }\n        }\n      }\n    }\n else {\n      Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n      for (      String patternStr : config.mDexLoaderPattern) {\n        patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n      }\n      if (oldDex != null) {\n        oldClassesDescToCheck.clear();\n        for (        ClassDef classDef : oldDex.classDefs()) {\n          String desc=oldDex.typeNames().get(classDef.typeIndex);\n          if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n            oldClassesDescToCheck.add(desc);\n          }\n        }\n        if (!oldClassesDescToCheck.isEmpty()) {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n          break;\n        }\n      }\n      if (newDex != null) {\n        newClassesDescToCheck.clear();\n        for (        ClassDef classDef : newDex.classDefs()) {\n          String desc=newDex.typeNames().get(classDef.typeIndex);\n          if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n            newClassesDescToCheck.add(desc);\n          }\n        }\n        if (!newClassesDescToCheck.isEmpty()) {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n          break;\n        }\n      }\n      stmCode=STMCODE_END;\n    }\n    break;\n  }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n  throw new TinkerPatchException(\"old primary dex is missing.\");\n}\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\nthrow new TinkerPatchException(\"new primary dex is missing.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\nthrow new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 439,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 8055,
        "startLineNumber" : 81,
        "startColumnNumber" : 39,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (stmCode) {\ncase STMCODE_START:{\n      boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n      if (isPrimaryDex) {\n        if (oldFile == null) {\n          stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n        }\n else         if (newFile == null) {\n          stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n        }\n else {\n          dexCmptor.startCheck(oldDex,newDex);\n          deletedClassInfos=dexCmptor.getDeletedClassInfos();\n          addedClassInfos=dexCmptor.getAddedClassInfos();\n          changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n          if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n          }\n else {\n            if (addedClassInfos.isEmpty()) {\n              ArrayList<String> removeClasses=new ArrayList<>();\n              for (              String classname : changedClassInfosMap.keySet()) {\n                if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                  Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                  removeClasses.add(classname);\n                }\n              }\n              changedClassInfosMap.keySet().removeAll(removeClasses);\n              if (changedClassInfosMap.isEmpty()) {\n                stmCode=STMCODE_END;\n              }\n else {\n                stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n              }\n            }\n else {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n            }\n          }\n        }\n      }\n else {\n        Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n        for (        String patternStr : config.mDexLoaderPattern) {\n          patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n        }\n        if (oldDex != null) {\n          oldClassesDescToCheck.clear();\n          for (          ClassDef classDef : oldDex.classDefs()) {\n            String desc=oldDex.typeNames().get(classDef.typeIndex);\n            if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n              oldClassesDescToCheck.add(desc);\n            }\n          }\n          if (!oldClassesDescToCheck.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n            break;\n          }\n        }\n        if (newDex != null) {\n          newClassesDescToCheck.clear();\n          for (          ClassDef classDef : newDex.classDefs()) {\n            String desc=newDex.typeNames().get(classDef.typeIndex);\n            if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n              newClassesDescToCheck.add(desc);\n            }\n          }\n          if (!newClassesDescToCheck.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n            break;\n          }\n        }\n        stmCode=STMCODE_END;\n      }\n      break;\n    }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n    throw new TinkerPatchException(\"old primary dex is missing.\");\n  }\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\n  throw new TinkerPatchException(\"new primary dex is missing.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\nthrow new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 440,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8086,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (stmCode != STMCODE_END) {\nswitch (stmCode) {\ncase STMCODE_START:{\n      boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n      if (isPrimaryDex) {\n        if (oldFile == null) {\n          stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n        }\n else         if (newFile == null) {\n          stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n        }\n else {\n          dexCmptor.startCheck(oldDex,newDex);\n          deletedClassInfos=dexCmptor.getDeletedClassInfos();\n          addedClassInfos=dexCmptor.getAddedClassInfos();\n          changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n          if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n          }\n else {\n            if (addedClassInfos.isEmpty()) {\n              ArrayList<String> removeClasses=new ArrayList<>();\n              for (              String classname : changedClassInfosMap.keySet()) {\n                if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                  Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                  removeClasses.add(classname);\n                }\n              }\n              changedClassInfosMap.keySet().removeAll(removeClasses);\n              if (changedClassInfosMap.isEmpty()) {\n                stmCode=STMCODE_END;\n              }\n else {\n                stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n              }\n            }\n else {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n            }\n          }\n        }\n      }\n else {\n        Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n        for (        String patternStr : config.mDexLoaderPattern) {\n          patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n        }\n        if (oldDex != null) {\n          oldClassesDescToCheck.clear();\n          for (          ClassDef classDef : oldDex.classDefs()) {\n            String desc=oldDex.typeNames().get(classDef.typeIndex);\n            if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n              oldClassesDescToCheck.add(desc);\n            }\n          }\n          if (!oldClassesDescToCheck.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n            break;\n          }\n        }\n        if (newDex != null) {\n          newClassesDescToCheck.clear();\n          for (          ClassDef classDef : newDex.classDefs()) {\n            String desc=newDex.typeNames().get(classDef.typeIndex);\n            if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n              newClassesDescToCheck.add(desc);\n            }\n          }\n          if (!newClassesDescToCheck.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n            break;\n          }\n        }\n        stmCode=STMCODE_END;\n      }\n      break;\n    }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n    throw new TinkerPatchException(\"old primary dex is missing.\");\n  }\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\n  throw new TinkerPatchException(\"new primary dex is missing.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\nthrow new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 444,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8408,
        "startLineNumber" : 71,
        "startColumnNumber" : 125,
        "endLineNumber" : 223,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (oldFile == null && newFile == null) {\n    throw new TinkerPatchException(\"both oldFile and newFile are null.\");\n  }\n  oldDex=(oldFile != null ? new Dex(oldFile) : null);\n  newDex=(newFile != null ? new Dex(newFile) : null);\n  int stmCode=STMCODE_START;\n  while (stmCode != STMCODE_END) {\nswitch (stmCode) {\ncase STMCODE_START:{\n        boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n        if (isPrimaryDex) {\n          if (oldFile == null) {\n            stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n          }\n else           if (newFile == null) {\n            stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n          }\n else {\n            dexCmptor.startCheck(oldDex,newDex);\n            deletedClassInfos=dexCmptor.getDeletedClassInfos();\n            addedClassInfos=dexCmptor.getAddedClassInfos();\n            changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n            if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n            }\n else {\n              if (addedClassInfos.isEmpty()) {\n                ArrayList<String> removeClasses=new ArrayList<>();\n                for (                String classname : changedClassInfosMap.keySet()) {\n                  if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                    Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                    removeClasses.add(classname);\n                  }\n                }\n                changedClassInfosMap.keySet().removeAll(removeClasses);\n                if (changedClassInfosMap.isEmpty()) {\n                  stmCode=STMCODE_END;\n                }\n else {\n                  stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n                }\n              }\n else {\n                stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n              }\n            }\n          }\n        }\n else {\n          Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n          for (          String patternStr : config.mDexLoaderPattern) {\n            patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n          }\n          if (oldDex != null) {\n            oldClassesDescToCheck.clear();\n            for (            ClassDef classDef : oldDex.classDefs()) {\n              String desc=oldDex.typeNames().get(classDef.typeIndex);\n              if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n                oldClassesDescToCheck.add(desc);\n              }\n            }\n            if (!oldClassesDescToCheck.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n              break;\n            }\n          }\n          if (newDex != null) {\n            newClassesDescToCheck.clear();\n            for (            ClassDef classDef : newDex.classDefs()) {\n              String desc=newDex.typeNames().get(classDef.typeIndex);\n              if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n                newClassesDescToCheck.add(desc);\n              }\n            }\n            if (!newClassesDescToCheck.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n              break;\n            }\n          }\n          stmCode=STMCODE_END;\n        }\n        break;\n      }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n      throw new TinkerPatchException(\"old primary dex is missing.\");\n    }\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\n    throw new TinkerPatchException(\"new primary dex is missing.\");\n  }\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\n  throw new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 490,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8529,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 223,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void checkIfExcludedClassWasModifiedInNewDex(File oldFile,File newFile) throws IOException, TinkerPatchException {\n  if (oldFile == null && newFile == null) {\n    throw new TinkerPatchException(\"both oldFile and newFile are null.\");\n  }\n  oldDex=(oldFile != null ? new Dex(oldFile) : null);\n  newDex=(newFile != null ? new Dex(newFile) : null);\n  int stmCode=STMCODE_START;\n  while (stmCode != STMCODE_END) {\nswitch (stmCode) {\ncase STMCODE_START:{\n        boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n        if (isPrimaryDex) {\n          if (oldFile == null) {\n            stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n          }\n else           if (newFile == null) {\n            stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n          }\n else {\n            dexCmptor.startCheck(oldDex,newDex);\n            deletedClassInfos=dexCmptor.getDeletedClassInfos();\n            addedClassInfos=dexCmptor.getAddedClassInfos();\n            changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n            if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n            }\n else {\n              if (addedClassInfos.isEmpty()) {\n                ArrayList<String> removeClasses=new ArrayList<>();\n                for (                String classname : changedClassInfosMap.keySet()) {\n                  if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                    Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                    removeClasses.add(classname);\n                  }\n                }\n                changedClassInfosMap.keySet().removeAll(removeClasses);\n                if (changedClassInfosMap.isEmpty()) {\n                  stmCode=STMCODE_END;\n                }\n else {\n                  stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n                }\n              }\n else {\n                stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n              }\n            }\n          }\n        }\n else {\n          Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n          for (          String patternStr : config.mDexLoaderPattern) {\n            patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n          }\n          if (oldDex != null) {\n            oldClassesDescToCheck.clear();\n            for (            ClassDef classDef : oldDex.classDefs()) {\n              String desc=oldDex.typeNames().get(classDef.typeIndex);\n              if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n                oldClassesDescToCheck.add(desc);\n              }\n            }\n            if (!oldClassesDescToCheck.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n              break;\n            }\n          }\n          if (newDex != null) {\n            newClassesDescToCheck.clear();\n            for (            ClassDef classDef : newDex.classDefs()) {\n              String desc=newDex.typeNames().get(classDef.typeIndex);\n              if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n                newClassesDescToCheck.add(desc);\n              }\n            }\n            if (!newClassesDescToCheck.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n              break;\n            }\n          }\n          stmCode=STMCODE_END;\n        }\n        break;\n      }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n      throw new TinkerPatchException(\"old primary dex is missing.\");\n    }\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\n    throw new TinkerPatchException(\"new primary dex is missing.\");\n  }\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\n  throw new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 506,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 160,
        "startColumnNumber" : 28,
        "endLineNumber" : 160,
        "endColumnNumber" : 58
      },
      "nodeContext" : "newClassesDescToCheck.clear();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<java.lang.String>"
  }, {
    "nodeContext" : "newClassesDescToCheck",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 164,
      "startColumnNumber" : 36,
      "endLineNumber" : 164,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 164,
        "startColumnNumber" : 36,
        "endLineNumber" : 164,
        "endColumnNumber" : 67
      },
      "nodeContext" : "newClassesDescToCheck.add(desc)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 164,
        "startColumnNumber" : 36,
        "endLineNumber" : 164,
        "endColumnNumber" : 68
      },
      "nodeContext" : "newClassesDescToCheck.add(desc);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 163,
        "startColumnNumber" : 101,
        "endLineNumber" : 165,
        "endColumnNumber" : 33
      },
      "nodeContext" : "{\n  newClassesDescToCheck.add(desc);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 163,
        "startColumnNumber" : 32,
        "endLineNumber" : 165,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n  newClassesDescToCheck.add(desc);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 327,
        "startLineNumber" : 161,
        "startColumnNumber" : 73,
        "endLineNumber" : 166,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  String desc=newDex.typeNames().get(classDef.typeIndex);\n  if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n    newClassesDescToCheck.add(desc);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 372,
        "startLineNumber" : 161,
        "startColumnNumber" : 28,
        "endLineNumber" : 166,
        "endColumnNumber" : 29
      },
      "nodeContext" : "for (ClassDef classDef : newDex.classDefs()) {\n  String desc=newDex.typeNames().get(classDef.typeIndex);\n  if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n    newClassesDescToCheck.add(desc);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 721,
        "startLineNumber" : 159,
        "startColumnNumber" : 44,
        "endLineNumber" : 171,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  newClassesDescToCheck.clear();\n  for (  ClassDef classDef : newDex.classDefs()) {\n    String desc=newDex.typeNames().get(classDef.typeIndex);\n    if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n      newClassesDescToCheck.add(desc);\n    }\n  }\n  if (!newClassesDescToCheck.isEmpty()) {\n    stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 741,
        "startLineNumber" : 159,
        "startColumnNumber" : 24,
        "endLineNumber" : 171,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (newDex != null) {\n  newClassesDescToCheck.clear();\n  for (  ClassDef classDef : newDex.classDefs()) {\n    String desc=newDex.typeNames().get(classDef.typeIndex);\n    if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n      newClassesDescToCheck.add(desc);\n    }\n  }\n  if (!newClassesDescToCheck.isEmpty()) {\n    stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n    break;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2063,
        "startLineNumber" : 135,
        "startColumnNumber" : 27,
        "endLineNumber" : 174,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n  for (  String patternStr : config.mDexLoaderPattern) {\n    patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n  }\n  if (oldDex != null) {\n    oldClassesDescToCheck.clear();\n    for (    ClassDef classDef : oldDex.classDefs()) {\n      String desc=oldDex.typeNames().get(classDef.typeIndex);\n      if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n        oldClassesDescToCheck.add(desc);\n      }\n    }\n    if (!oldClassesDescToCheck.isEmpty()) {\n      stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n      break;\n    }\n  }\n  if (newDex != null) {\n    newClassesDescToCheck.clear();\n    for (    ClassDef classDef : newDex.classDefs()) {\n      String desc=newDex.typeNames().get(classDef.typeIndex);\n      if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n        newClassesDescToCheck.add(desc);\n      }\n    }\n    if (!newClassesDescToCheck.isEmpty()) {\n      stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n      break;\n    }\n  }\n  stmCode=STMCODE_END;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4493,
        "startLineNumber" : 100,
        "startColumnNumber" : 20,
        "endLineNumber" : 174,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isPrimaryDex) {\n  if (oldFile == null) {\n    stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n  }\n else   if (newFile == null) {\n    stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n  }\n else {\n    dexCmptor.startCheck(oldDex,newDex);\n    deletedClassInfos=dexCmptor.getDeletedClassInfos();\n    addedClassInfos=dexCmptor.getAddedClassInfos();\n    changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n    if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n      stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n    }\n else {\n      if (addedClassInfos.isEmpty()) {\n        ArrayList<String> removeClasses=new ArrayList<>();\n        for (        String classname : changedClassInfosMap.keySet()) {\n          if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n            Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n            removeClasses.add(classname);\n          }\n        }\n        changedClassInfosMap.keySet().removeAll(removeClasses);\n        if (changedClassInfosMap.isEmpty()) {\n          stmCode=STMCODE_END;\n        }\n else {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n        }\n      }\n else {\n        stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n      }\n    }\n  }\n}\n else {\n  Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n  for (  String patternStr : config.mDexLoaderPattern) {\n    patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n  }\n  if (oldDex != null) {\n    oldClassesDescToCheck.clear();\n    for (    ClassDef classDef : oldDex.classDefs()) {\n      String desc=oldDex.typeNames().get(classDef.typeIndex);\n      if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n        oldClassesDescToCheck.add(desc);\n      }\n    }\n    if (!oldClassesDescToCheck.isEmpty()) {\n      stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n      break;\n    }\n  }\n  if (newDex != null) {\n    newClassesDescToCheck.clear();\n    for (    ClassDef classDef : newDex.classDefs()) {\n      String desc=newDex.typeNames().get(classDef.typeIndex);\n      if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n        newClassesDescToCheck.add(desc);\n      }\n    }\n    if (!newClassesDescToCheck.isEmpty()) {\n      stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n      break;\n    }\n  }\n  stmCode=STMCODE_END;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 285,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 4657,
        "startLineNumber" : 97,
        "startColumnNumber" : 36,
        "endLineNumber" : 176,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n  if (isPrimaryDex) {\n    if (oldFile == null) {\n      stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n    }\n else     if (newFile == null) {\n      stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n    }\n else {\n      dexCmptor.startCheck(oldDex,newDex);\n      deletedClassInfos=dexCmptor.getDeletedClassInfos();\n      addedClassInfos=dexCmptor.getAddedClassInfos();\n      changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n      if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n        stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n      }\n else {\n        if (addedClassInfos.isEmpty()) {\n          ArrayList<String> removeClasses=new ArrayList<>();\n          for (          String classname : changedClassInfosMap.keySet()) {\n            if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n              Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n              removeClasses.add(classname);\n            }\n          }\n          changedClassInfosMap.keySet().removeAll(removeClasses);\n          if (changedClassInfosMap.isEmpty()) {\n            stmCode=STMCODE_END;\n          }\n else {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n          }\n        }\n else {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n        }\n      }\n    }\n  }\n else {\n    Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n    for (    String patternStr : config.mDexLoaderPattern) {\n      patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n    }\n    if (oldDex != null) {\n      oldClassesDescToCheck.clear();\n      for (      ClassDef classDef : oldDex.classDefs()) {\n        String desc=oldDex.typeNames().get(classDef.typeIndex);\n        if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n          oldClassesDescToCheck.add(desc);\n        }\n      }\n      if (!oldClassesDescToCheck.isEmpty()) {\n        stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n        break;\n      }\n    }\n    if (newDex != null) {\n      newClassesDescToCheck.clear();\n      for (      ClassDef classDef : newDex.classDefs()) {\n        String desc=newDex.typeNames().get(classDef.typeIndex);\n        if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n          newClassesDescToCheck.add(desc);\n        }\n      }\n      if (!newClassesDescToCheck.isEmpty()) {\n        stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n        break;\n      }\n    }\n    stmCode=STMCODE_END;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8031,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (stmCode) {\ncase STMCODE_START:{\n    boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n    if (isPrimaryDex) {\n      if (oldFile == null) {\n        stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n      }\n else       if (newFile == null) {\n        stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n      }\n else {\n        dexCmptor.startCheck(oldDex,newDex);\n        deletedClassInfos=dexCmptor.getDeletedClassInfos();\n        addedClassInfos=dexCmptor.getAddedClassInfos();\n        changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n        if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n        }\n else {\n          if (addedClassInfos.isEmpty()) {\n            ArrayList<String> removeClasses=new ArrayList<>();\n            for (            String classname : changedClassInfosMap.keySet()) {\n              if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                removeClasses.add(classname);\n              }\n            }\n            changedClassInfosMap.keySet().removeAll(removeClasses);\n            if (changedClassInfosMap.isEmpty()) {\n              stmCode=STMCODE_END;\n            }\n else {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n            }\n          }\n else {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n          }\n        }\n      }\n    }\n else {\n      Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n      for (      String patternStr : config.mDexLoaderPattern) {\n        patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n      }\n      if (oldDex != null) {\n        oldClassesDescToCheck.clear();\n        for (        ClassDef classDef : oldDex.classDefs()) {\n          String desc=oldDex.typeNames().get(classDef.typeIndex);\n          if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n            oldClassesDescToCheck.add(desc);\n          }\n        }\n        if (!oldClassesDescToCheck.isEmpty()) {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n          break;\n        }\n      }\n      if (newDex != null) {\n        newClassesDescToCheck.clear();\n        for (        ClassDef classDef : newDex.classDefs()) {\n          String desc=newDex.typeNames().get(classDef.typeIndex);\n          if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n            newClassesDescToCheck.add(desc);\n          }\n        }\n        if (!newClassesDescToCheck.isEmpty()) {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n          break;\n        }\n      }\n      stmCode=STMCODE_END;\n    }\n    break;\n  }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n  throw new TinkerPatchException(\"old primary dex is missing.\");\n}\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\nthrow new TinkerPatchException(\"new primary dex is missing.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\nthrow new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 439,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 8055,
        "startLineNumber" : 81,
        "startColumnNumber" : 39,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (stmCode) {\ncase STMCODE_START:{\n      boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n      if (isPrimaryDex) {\n        if (oldFile == null) {\n          stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n        }\n else         if (newFile == null) {\n          stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n        }\n else {\n          dexCmptor.startCheck(oldDex,newDex);\n          deletedClassInfos=dexCmptor.getDeletedClassInfos();\n          addedClassInfos=dexCmptor.getAddedClassInfos();\n          changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n          if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n          }\n else {\n            if (addedClassInfos.isEmpty()) {\n              ArrayList<String> removeClasses=new ArrayList<>();\n              for (              String classname : changedClassInfosMap.keySet()) {\n                if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                  Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                  removeClasses.add(classname);\n                }\n              }\n              changedClassInfosMap.keySet().removeAll(removeClasses);\n              if (changedClassInfosMap.isEmpty()) {\n                stmCode=STMCODE_END;\n              }\n else {\n                stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n              }\n            }\n else {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n            }\n          }\n        }\n      }\n else {\n        Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n        for (        String patternStr : config.mDexLoaderPattern) {\n          patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n        }\n        if (oldDex != null) {\n          oldClassesDescToCheck.clear();\n          for (          ClassDef classDef : oldDex.classDefs()) {\n            String desc=oldDex.typeNames().get(classDef.typeIndex);\n            if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n              oldClassesDescToCheck.add(desc);\n            }\n          }\n          if (!oldClassesDescToCheck.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n            break;\n          }\n        }\n        if (newDex != null) {\n          newClassesDescToCheck.clear();\n          for (          ClassDef classDef : newDex.classDefs()) {\n            String desc=newDex.typeNames().get(classDef.typeIndex);\n            if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n              newClassesDescToCheck.add(desc);\n            }\n          }\n          if (!newClassesDescToCheck.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n            break;\n          }\n        }\n        stmCode=STMCODE_END;\n      }\n      break;\n    }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n    throw new TinkerPatchException(\"old primary dex is missing.\");\n  }\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\n  throw new TinkerPatchException(\"new primary dex is missing.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\nthrow new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 440,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8086,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (stmCode != STMCODE_END) {\nswitch (stmCode) {\ncase STMCODE_START:{\n      boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n      if (isPrimaryDex) {\n        if (oldFile == null) {\n          stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n        }\n else         if (newFile == null) {\n          stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n        }\n else {\n          dexCmptor.startCheck(oldDex,newDex);\n          deletedClassInfos=dexCmptor.getDeletedClassInfos();\n          addedClassInfos=dexCmptor.getAddedClassInfos();\n          changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n          if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n          }\n else {\n            if (addedClassInfos.isEmpty()) {\n              ArrayList<String> removeClasses=new ArrayList<>();\n              for (              String classname : changedClassInfosMap.keySet()) {\n                if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                  Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                  removeClasses.add(classname);\n                }\n              }\n              changedClassInfosMap.keySet().removeAll(removeClasses);\n              if (changedClassInfosMap.isEmpty()) {\n                stmCode=STMCODE_END;\n              }\n else {\n                stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n              }\n            }\n else {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n            }\n          }\n        }\n      }\n else {\n        Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n        for (        String patternStr : config.mDexLoaderPattern) {\n          patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n        }\n        if (oldDex != null) {\n          oldClassesDescToCheck.clear();\n          for (          ClassDef classDef : oldDex.classDefs()) {\n            String desc=oldDex.typeNames().get(classDef.typeIndex);\n            if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n              oldClassesDescToCheck.add(desc);\n            }\n          }\n          if (!oldClassesDescToCheck.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n            break;\n          }\n        }\n        if (newDex != null) {\n          newClassesDescToCheck.clear();\n          for (          ClassDef classDef : newDex.classDefs()) {\n            String desc=newDex.typeNames().get(classDef.typeIndex);\n            if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n              newClassesDescToCheck.add(desc);\n            }\n          }\n          if (!newClassesDescToCheck.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n            break;\n          }\n        }\n        stmCode=STMCODE_END;\n      }\n      break;\n    }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n    throw new TinkerPatchException(\"old primary dex is missing.\");\n  }\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\n  throw new TinkerPatchException(\"new primary dex is missing.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\nthrow new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 444,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8408,
        "startLineNumber" : 71,
        "startColumnNumber" : 125,
        "endLineNumber" : 223,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (oldFile == null && newFile == null) {\n    throw new TinkerPatchException(\"both oldFile and newFile are null.\");\n  }\n  oldDex=(oldFile != null ? new Dex(oldFile) : null);\n  newDex=(newFile != null ? new Dex(newFile) : null);\n  int stmCode=STMCODE_START;\n  while (stmCode != STMCODE_END) {\nswitch (stmCode) {\ncase STMCODE_START:{\n        boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n        if (isPrimaryDex) {\n          if (oldFile == null) {\n            stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n          }\n else           if (newFile == null) {\n            stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n          }\n else {\n            dexCmptor.startCheck(oldDex,newDex);\n            deletedClassInfos=dexCmptor.getDeletedClassInfos();\n            addedClassInfos=dexCmptor.getAddedClassInfos();\n            changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n            if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n            }\n else {\n              if (addedClassInfos.isEmpty()) {\n                ArrayList<String> removeClasses=new ArrayList<>();\n                for (                String classname : changedClassInfosMap.keySet()) {\n                  if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                    Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                    removeClasses.add(classname);\n                  }\n                }\n                changedClassInfosMap.keySet().removeAll(removeClasses);\n                if (changedClassInfosMap.isEmpty()) {\n                  stmCode=STMCODE_END;\n                }\n else {\n                  stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n                }\n              }\n else {\n                stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n              }\n            }\n          }\n        }\n else {\n          Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n          for (          String patternStr : config.mDexLoaderPattern) {\n            patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n          }\n          if (oldDex != null) {\n            oldClassesDescToCheck.clear();\n            for (            ClassDef classDef : oldDex.classDefs()) {\n              String desc=oldDex.typeNames().get(classDef.typeIndex);\n              if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n                oldClassesDescToCheck.add(desc);\n              }\n            }\n            if (!oldClassesDescToCheck.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n              break;\n            }\n          }\n          if (newDex != null) {\n            newClassesDescToCheck.clear();\n            for (            ClassDef classDef : newDex.classDefs()) {\n              String desc=newDex.typeNames().get(classDef.typeIndex);\n              if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n                newClassesDescToCheck.add(desc);\n              }\n            }\n            if (!newClassesDescToCheck.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n              break;\n            }\n          }\n          stmCode=STMCODE_END;\n        }\n        break;\n      }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n      throw new TinkerPatchException(\"old primary dex is missing.\");\n    }\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\n    throw new TinkerPatchException(\"new primary dex is missing.\");\n  }\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\n  throw new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 490,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8529,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 223,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void checkIfExcludedClassWasModifiedInNewDex(File oldFile,File newFile) throws IOException, TinkerPatchException {\n  if (oldFile == null && newFile == null) {\n    throw new TinkerPatchException(\"both oldFile and newFile are null.\");\n  }\n  oldDex=(oldFile != null ? new Dex(oldFile) : null);\n  newDex=(newFile != null ? new Dex(newFile) : null);\n  int stmCode=STMCODE_START;\n  while (stmCode != STMCODE_END) {\nswitch (stmCode) {\ncase STMCODE_START:{\n        boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n        if (isPrimaryDex) {\n          if (oldFile == null) {\n            stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n          }\n else           if (newFile == null) {\n            stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n          }\n else {\n            dexCmptor.startCheck(oldDex,newDex);\n            deletedClassInfos=dexCmptor.getDeletedClassInfos();\n            addedClassInfos=dexCmptor.getAddedClassInfos();\n            changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n            if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n            }\n else {\n              if (addedClassInfos.isEmpty()) {\n                ArrayList<String> removeClasses=new ArrayList<>();\n                for (                String classname : changedClassInfosMap.keySet()) {\n                  if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                    Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                    removeClasses.add(classname);\n                  }\n                }\n                changedClassInfosMap.keySet().removeAll(removeClasses);\n                if (changedClassInfosMap.isEmpty()) {\n                  stmCode=STMCODE_END;\n                }\n else {\n                  stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n                }\n              }\n else {\n                stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n              }\n            }\n          }\n        }\n else {\n          Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n          for (          String patternStr : config.mDexLoaderPattern) {\n            patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n          }\n          if (oldDex != null) {\n            oldClassesDescToCheck.clear();\n            for (            ClassDef classDef : oldDex.classDefs()) {\n              String desc=oldDex.typeNames().get(classDef.typeIndex);\n              if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n                oldClassesDescToCheck.add(desc);\n              }\n            }\n            if (!oldClassesDescToCheck.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n              break;\n            }\n          }\n          if (newDex != null) {\n            newClassesDescToCheck.clear();\n            for (            ClassDef classDef : newDex.classDefs()) {\n              String desc=newDex.typeNames().get(classDef.typeIndex);\n              if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n                newClassesDescToCheck.add(desc);\n              }\n            }\n            if (!newClassesDescToCheck.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n              break;\n            }\n          }\n          stmCode=STMCODE_END;\n        }\n        break;\n      }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n      throw new TinkerPatchException(\"old primary dex is missing.\");\n    }\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\n    throw new TinkerPatchException(\"new primary dex is missing.\");\n  }\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\n  throw new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 506,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 164,
        "startColumnNumber" : 36,
        "endLineNumber" : 164,
        "endColumnNumber" : 68
      },
      "nodeContext" : "newClassesDescToCheck.add(desc);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<java.lang.String>"
  }, {
    "nodeContext" : "newClassesDescToCheck",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 167,
      "startColumnNumber" : 33,
      "endLineNumber" : 167,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 167,
        "startColumnNumber" : 33,
        "endLineNumber" : 167,
        "endColumnNumber" : 64
      },
      "nodeContext" : "newClassesDescToCheck.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 167,
        "startColumnNumber" : 32,
        "endLineNumber" : 167,
        "endColumnNumber" : 64
      },
      "nodeContext" : "!newClassesDescToCheck.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 167,
        "startColumnNumber" : 28,
        "endLineNumber" : 170,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (!newClassesDescToCheck.isEmpty()) {\n  stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 721,
        "startLineNumber" : 159,
        "startColumnNumber" : 44,
        "endLineNumber" : 171,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  newClassesDescToCheck.clear();\n  for (  ClassDef classDef : newDex.classDefs()) {\n    String desc=newDex.typeNames().get(classDef.typeIndex);\n    if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n      newClassesDescToCheck.add(desc);\n    }\n  }\n  if (!newClassesDescToCheck.isEmpty()) {\n    stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 741,
        "startLineNumber" : 159,
        "startColumnNumber" : 24,
        "endLineNumber" : 171,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (newDex != null) {\n  newClassesDescToCheck.clear();\n  for (  ClassDef classDef : newDex.classDefs()) {\n    String desc=newDex.typeNames().get(classDef.typeIndex);\n    if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n      newClassesDescToCheck.add(desc);\n    }\n  }\n  if (!newClassesDescToCheck.isEmpty()) {\n    stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n    break;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2063,
        "startLineNumber" : 135,
        "startColumnNumber" : 27,
        "endLineNumber" : 174,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n  for (  String patternStr : config.mDexLoaderPattern) {\n    patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n  }\n  if (oldDex != null) {\n    oldClassesDescToCheck.clear();\n    for (    ClassDef classDef : oldDex.classDefs()) {\n      String desc=oldDex.typeNames().get(classDef.typeIndex);\n      if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n        oldClassesDescToCheck.add(desc);\n      }\n    }\n    if (!oldClassesDescToCheck.isEmpty()) {\n      stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n      break;\n    }\n  }\n  if (newDex != null) {\n    newClassesDescToCheck.clear();\n    for (    ClassDef classDef : newDex.classDefs()) {\n      String desc=newDex.typeNames().get(classDef.typeIndex);\n      if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n        newClassesDescToCheck.add(desc);\n      }\n    }\n    if (!newClassesDescToCheck.isEmpty()) {\n      stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n      break;\n    }\n  }\n  stmCode=STMCODE_END;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4493,
        "startLineNumber" : 100,
        "startColumnNumber" : 20,
        "endLineNumber" : 174,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isPrimaryDex) {\n  if (oldFile == null) {\n    stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n  }\n else   if (newFile == null) {\n    stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n  }\n else {\n    dexCmptor.startCheck(oldDex,newDex);\n    deletedClassInfos=dexCmptor.getDeletedClassInfos();\n    addedClassInfos=dexCmptor.getAddedClassInfos();\n    changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n    if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n      stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n    }\n else {\n      if (addedClassInfos.isEmpty()) {\n        ArrayList<String> removeClasses=new ArrayList<>();\n        for (        String classname : changedClassInfosMap.keySet()) {\n          if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n            Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n            removeClasses.add(classname);\n          }\n        }\n        changedClassInfosMap.keySet().removeAll(removeClasses);\n        if (changedClassInfosMap.isEmpty()) {\n          stmCode=STMCODE_END;\n        }\n else {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n        }\n      }\n else {\n        stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n      }\n    }\n  }\n}\n else {\n  Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n  for (  String patternStr : config.mDexLoaderPattern) {\n    patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n  }\n  if (oldDex != null) {\n    oldClassesDescToCheck.clear();\n    for (    ClassDef classDef : oldDex.classDefs()) {\n      String desc=oldDex.typeNames().get(classDef.typeIndex);\n      if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n        oldClassesDescToCheck.add(desc);\n      }\n    }\n    if (!oldClassesDescToCheck.isEmpty()) {\n      stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n      break;\n    }\n  }\n  if (newDex != null) {\n    newClassesDescToCheck.clear();\n    for (    ClassDef classDef : newDex.classDefs()) {\n      String desc=newDex.typeNames().get(classDef.typeIndex);\n      if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n        newClassesDescToCheck.add(desc);\n      }\n    }\n    if (!newClassesDescToCheck.isEmpty()) {\n      stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n      break;\n    }\n  }\n  stmCode=STMCODE_END;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 285,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 4657,
        "startLineNumber" : 97,
        "startColumnNumber" : 36,
        "endLineNumber" : 176,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n  if (isPrimaryDex) {\n    if (oldFile == null) {\n      stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n    }\n else     if (newFile == null) {\n      stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n    }\n else {\n      dexCmptor.startCheck(oldDex,newDex);\n      deletedClassInfos=dexCmptor.getDeletedClassInfos();\n      addedClassInfos=dexCmptor.getAddedClassInfos();\n      changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n      if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n        stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n      }\n else {\n        if (addedClassInfos.isEmpty()) {\n          ArrayList<String> removeClasses=new ArrayList<>();\n          for (          String classname : changedClassInfosMap.keySet()) {\n            if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n              Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n              removeClasses.add(classname);\n            }\n          }\n          changedClassInfosMap.keySet().removeAll(removeClasses);\n          if (changedClassInfosMap.isEmpty()) {\n            stmCode=STMCODE_END;\n          }\n else {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n          }\n        }\n else {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n        }\n      }\n    }\n  }\n else {\n    Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n    for (    String patternStr : config.mDexLoaderPattern) {\n      patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n    }\n    if (oldDex != null) {\n      oldClassesDescToCheck.clear();\n      for (      ClassDef classDef : oldDex.classDefs()) {\n        String desc=oldDex.typeNames().get(classDef.typeIndex);\n        if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n          oldClassesDescToCheck.add(desc);\n        }\n      }\n      if (!oldClassesDescToCheck.isEmpty()) {\n        stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n        break;\n      }\n    }\n    if (newDex != null) {\n      newClassesDescToCheck.clear();\n      for (      ClassDef classDef : newDex.classDefs()) {\n        String desc=newDex.typeNames().get(classDef.typeIndex);\n        if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n          newClassesDescToCheck.add(desc);\n        }\n      }\n      if (!newClassesDescToCheck.isEmpty()) {\n        stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n        break;\n      }\n    }\n    stmCode=STMCODE_END;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8031,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (stmCode) {\ncase STMCODE_START:{\n    boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n    if (isPrimaryDex) {\n      if (oldFile == null) {\n        stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n      }\n else       if (newFile == null) {\n        stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n      }\n else {\n        dexCmptor.startCheck(oldDex,newDex);\n        deletedClassInfos=dexCmptor.getDeletedClassInfos();\n        addedClassInfos=dexCmptor.getAddedClassInfos();\n        changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n        if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n        }\n else {\n          if (addedClassInfos.isEmpty()) {\n            ArrayList<String> removeClasses=new ArrayList<>();\n            for (            String classname : changedClassInfosMap.keySet()) {\n              if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                removeClasses.add(classname);\n              }\n            }\n            changedClassInfosMap.keySet().removeAll(removeClasses);\n            if (changedClassInfosMap.isEmpty()) {\n              stmCode=STMCODE_END;\n            }\n else {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n            }\n          }\n else {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n          }\n        }\n      }\n    }\n else {\n      Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n      for (      String patternStr : config.mDexLoaderPattern) {\n        patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n      }\n      if (oldDex != null) {\n        oldClassesDescToCheck.clear();\n        for (        ClassDef classDef : oldDex.classDefs()) {\n          String desc=oldDex.typeNames().get(classDef.typeIndex);\n          if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n            oldClassesDescToCheck.add(desc);\n          }\n        }\n        if (!oldClassesDescToCheck.isEmpty()) {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n          break;\n        }\n      }\n      if (newDex != null) {\n        newClassesDescToCheck.clear();\n        for (        ClassDef classDef : newDex.classDefs()) {\n          String desc=newDex.typeNames().get(classDef.typeIndex);\n          if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n            newClassesDescToCheck.add(desc);\n          }\n        }\n        if (!newClassesDescToCheck.isEmpty()) {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n          break;\n        }\n      }\n      stmCode=STMCODE_END;\n    }\n    break;\n  }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n  throw new TinkerPatchException(\"old primary dex is missing.\");\n}\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\nthrow new TinkerPatchException(\"new primary dex is missing.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\nthrow new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 439,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 8055,
        "startLineNumber" : 81,
        "startColumnNumber" : 39,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (stmCode) {\ncase STMCODE_START:{\n      boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n      if (isPrimaryDex) {\n        if (oldFile == null) {\n          stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n        }\n else         if (newFile == null) {\n          stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n        }\n else {\n          dexCmptor.startCheck(oldDex,newDex);\n          deletedClassInfos=dexCmptor.getDeletedClassInfos();\n          addedClassInfos=dexCmptor.getAddedClassInfos();\n          changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n          if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n          }\n else {\n            if (addedClassInfos.isEmpty()) {\n              ArrayList<String> removeClasses=new ArrayList<>();\n              for (              String classname : changedClassInfosMap.keySet()) {\n                if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                  Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                  removeClasses.add(classname);\n                }\n              }\n              changedClassInfosMap.keySet().removeAll(removeClasses);\n              if (changedClassInfosMap.isEmpty()) {\n                stmCode=STMCODE_END;\n              }\n else {\n                stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n              }\n            }\n else {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n            }\n          }\n        }\n      }\n else {\n        Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n        for (        String patternStr : config.mDexLoaderPattern) {\n          patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n        }\n        if (oldDex != null) {\n          oldClassesDescToCheck.clear();\n          for (          ClassDef classDef : oldDex.classDefs()) {\n            String desc=oldDex.typeNames().get(classDef.typeIndex);\n            if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n              oldClassesDescToCheck.add(desc);\n            }\n          }\n          if (!oldClassesDescToCheck.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n            break;\n          }\n        }\n        if (newDex != null) {\n          newClassesDescToCheck.clear();\n          for (          ClassDef classDef : newDex.classDefs()) {\n            String desc=newDex.typeNames().get(classDef.typeIndex);\n            if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n              newClassesDescToCheck.add(desc);\n            }\n          }\n          if (!newClassesDescToCheck.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n            break;\n          }\n        }\n        stmCode=STMCODE_END;\n      }\n      break;\n    }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n    throw new TinkerPatchException(\"old primary dex is missing.\");\n  }\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\n  throw new TinkerPatchException(\"new primary dex is missing.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\nthrow new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 440,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8086,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (stmCode != STMCODE_END) {\nswitch (stmCode) {\ncase STMCODE_START:{\n      boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n      if (isPrimaryDex) {\n        if (oldFile == null) {\n          stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n        }\n else         if (newFile == null) {\n          stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n        }\n else {\n          dexCmptor.startCheck(oldDex,newDex);\n          deletedClassInfos=dexCmptor.getDeletedClassInfos();\n          addedClassInfos=dexCmptor.getAddedClassInfos();\n          changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n          if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n          }\n else {\n            if (addedClassInfos.isEmpty()) {\n              ArrayList<String> removeClasses=new ArrayList<>();\n              for (              String classname : changedClassInfosMap.keySet()) {\n                if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                  Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                  removeClasses.add(classname);\n                }\n              }\n              changedClassInfosMap.keySet().removeAll(removeClasses);\n              if (changedClassInfosMap.isEmpty()) {\n                stmCode=STMCODE_END;\n              }\n else {\n                stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n              }\n            }\n else {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n            }\n          }\n        }\n      }\n else {\n        Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n        for (        String patternStr : config.mDexLoaderPattern) {\n          patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n        }\n        if (oldDex != null) {\n          oldClassesDescToCheck.clear();\n          for (          ClassDef classDef : oldDex.classDefs()) {\n            String desc=oldDex.typeNames().get(classDef.typeIndex);\n            if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n              oldClassesDescToCheck.add(desc);\n            }\n          }\n          if (!oldClassesDescToCheck.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n            break;\n          }\n        }\n        if (newDex != null) {\n          newClassesDescToCheck.clear();\n          for (          ClassDef classDef : newDex.classDefs()) {\n            String desc=newDex.typeNames().get(classDef.typeIndex);\n            if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n              newClassesDescToCheck.add(desc);\n            }\n          }\n          if (!newClassesDescToCheck.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n            break;\n          }\n        }\n        stmCode=STMCODE_END;\n      }\n      break;\n    }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n    throw new TinkerPatchException(\"old primary dex is missing.\");\n  }\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\n  throw new TinkerPatchException(\"new primary dex is missing.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\nthrow new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 444,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8408,
        "startLineNumber" : 71,
        "startColumnNumber" : 125,
        "endLineNumber" : 223,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (oldFile == null && newFile == null) {\n    throw new TinkerPatchException(\"both oldFile and newFile are null.\");\n  }\n  oldDex=(oldFile != null ? new Dex(oldFile) : null);\n  newDex=(newFile != null ? new Dex(newFile) : null);\n  int stmCode=STMCODE_START;\n  while (stmCode != STMCODE_END) {\nswitch (stmCode) {\ncase STMCODE_START:{\n        boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n        if (isPrimaryDex) {\n          if (oldFile == null) {\n            stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n          }\n else           if (newFile == null) {\n            stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n          }\n else {\n            dexCmptor.startCheck(oldDex,newDex);\n            deletedClassInfos=dexCmptor.getDeletedClassInfos();\n            addedClassInfos=dexCmptor.getAddedClassInfos();\n            changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n            if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n            }\n else {\n              if (addedClassInfos.isEmpty()) {\n                ArrayList<String> removeClasses=new ArrayList<>();\n                for (                String classname : changedClassInfosMap.keySet()) {\n                  if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                    Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                    removeClasses.add(classname);\n                  }\n                }\n                changedClassInfosMap.keySet().removeAll(removeClasses);\n                if (changedClassInfosMap.isEmpty()) {\n                  stmCode=STMCODE_END;\n                }\n else {\n                  stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n                }\n              }\n else {\n                stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n              }\n            }\n          }\n        }\n else {\n          Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n          for (          String patternStr : config.mDexLoaderPattern) {\n            patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n          }\n          if (oldDex != null) {\n            oldClassesDescToCheck.clear();\n            for (            ClassDef classDef : oldDex.classDefs()) {\n              String desc=oldDex.typeNames().get(classDef.typeIndex);\n              if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n                oldClassesDescToCheck.add(desc);\n              }\n            }\n            if (!oldClassesDescToCheck.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n              break;\n            }\n          }\n          if (newDex != null) {\n            newClassesDescToCheck.clear();\n            for (            ClassDef classDef : newDex.classDefs()) {\n              String desc=newDex.typeNames().get(classDef.typeIndex);\n              if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n                newClassesDescToCheck.add(desc);\n              }\n            }\n            if (!newClassesDescToCheck.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n              break;\n            }\n          }\n          stmCode=STMCODE_END;\n        }\n        break;\n      }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n      throw new TinkerPatchException(\"old primary dex is missing.\");\n    }\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\n    throw new TinkerPatchException(\"new primary dex is missing.\");\n  }\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\n  throw new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 490,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8529,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 223,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void checkIfExcludedClassWasModifiedInNewDex(File oldFile,File newFile) throws IOException, TinkerPatchException {\n  if (oldFile == null && newFile == null) {\n    throw new TinkerPatchException(\"both oldFile and newFile are null.\");\n  }\n  oldDex=(oldFile != null ? new Dex(oldFile) : null);\n  newDex=(newFile != null ? new Dex(newFile) : null);\n  int stmCode=STMCODE_START;\n  while (stmCode != STMCODE_END) {\nswitch (stmCode) {\ncase STMCODE_START:{\n        boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n        if (isPrimaryDex) {\n          if (oldFile == null) {\n            stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n          }\n else           if (newFile == null) {\n            stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n          }\n else {\n            dexCmptor.startCheck(oldDex,newDex);\n            deletedClassInfos=dexCmptor.getDeletedClassInfos();\n            addedClassInfos=dexCmptor.getAddedClassInfos();\n            changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n            if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n            }\n else {\n              if (addedClassInfos.isEmpty()) {\n                ArrayList<String> removeClasses=new ArrayList<>();\n                for (                String classname : changedClassInfosMap.keySet()) {\n                  if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                    Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                    removeClasses.add(classname);\n                  }\n                }\n                changedClassInfosMap.keySet().removeAll(removeClasses);\n                if (changedClassInfosMap.isEmpty()) {\n                  stmCode=STMCODE_END;\n                }\n else {\n                  stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n                }\n              }\n else {\n                stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n              }\n            }\n          }\n        }\n else {\n          Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n          for (          String patternStr : config.mDexLoaderPattern) {\n            patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n          }\n          if (oldDex != null) {\n            oldClassesDescToCheck.clear();\n            for (            ClassDef classDef : oldDex.classDefs()) {\n              String desc=oldDex.typeNames().get(classDef.typeIndex);\n              if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n                oldClassesDescToCheck.add(desc);\n              }\n            }\n            if (!oldClassesDescToCheck.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n              break;\n            }\n          }\n          if (newDex != null) {\n            newClassesDescToCheck.clear();\n            for (            ClassDef classDef : newDex.classDefs()) {\n              String desc=newDex.typeNames().get(classDef.typeIndex);\n              if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n                newClassesDescToCheck.add(desc);\n              }\n            }\n            if (!newClassesDescToCheck.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n              break;\n            }\n          }\n          stmCode=STMCODE_END;\n        }\n        break;\n      }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n      throw new TinkerPatchException(\"old primary dex is missing.\");\n    }\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\n    throw new TinkerPatchException(\"new primary dex is missing.\");\n  }\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\n  throw new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 506,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 167,
        "startColumnNumber" : 32,
        "endLineNumber" : 167,
        "endColumnNumber" : 64
      },
      "nodeContext" : "!newClassesDescToCheck.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<java.lang.String>"
  }, {
    "nodeContext" : "newClassesDescToCheck",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 201,
      "startColumnNumber" : 131,
      "endLineNumber" : 201,
      "endColumnNumber" : 152
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 201,
        "startColumnNumber" : 106,
        "endLineNumber" : 201,
        "endColumnNumber" : 153
      },
      "nodeContext" : "Utils.collectionToString(newClassesDescToCheck)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 201,
        "startColumnNumber" : 39,
        "endLineNumber" : 201,
        "endColumnNumber" : 153
      },
      "nodeContext" : "\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 201,
        "startColumnNumber" : 33,
        "endLineNumber" : 201,
        "endColumnNumber" : 153
      },
      "nodeContext" : "msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 201,
        "startColumnNumber" : 20,
        "endLineNumber" : 201,
        "endColumnNumber" : 154
      },
      "nodeContext" : "final String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 200,
        "startColumnNumber" : 76,
        "endLineNumber" : 207,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  final String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\n  if (config.mAllowLoaderInAnyDex) {\n    Logger.d(msg);\n  }\n else {\n    throw new TinkerPatchException(msg);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8031,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (stmCode) {\ncase STMCODE_START:{\n    boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n    if (isPrimaryDex) {\n      if (oldFile == null) {\n        stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n      }\n else       if (newFile == null) {\n        stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n      }\n else {\n        dexCmptor.startCheck(oldDex,newDex);\n        deletedClassInfos=dexCmptor.getDeletedClassInfos();\n        addedClassInfos=dexCmptor.getAddedClassInfos();\n        changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n        if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n        }\n else {\n          if (addedClassInfos.isEmpty()) {\n            ArrayList<String> removeClasses=new ArrayList<>();\n            for (            String classname : changedClassInfosMap.keySet()) {\n              if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                removeClasses.add(classname);\n              }\n            }\n            changedClassInfosMap.keySet().removeAll(removeClasses);\n            if (changedClassInfosMap.isEmpty()) {\n              stmCode=STMCODE_END;\n            }\n else {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n            }\n          }\n else {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n          }\n        }\n      }\n    }\n else {\n      Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n      for (      String patternStr : config.mDexLoaderPattern) {\n        patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n      }\n      if (oldDex != null) {\n        oldClassesDescToCheck.clear();\n        for (        ClassDef classDef : oldDex.classDefs()) {\n          String desc=oldDex.typeNames().get(classDef.typeIndex);\n          if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n            oldClassesDescToCheck.add(desc);\n          }\n        }\n        if (!oldClassesDescToCheck.isEmpty()) {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n          break;\n        }\n      }\n      if (newDex != null) {\n        newClassesDescToCheck.clear();\n        for (        ClassDef classDef : newDex.classDefs()) {\n          String desc=newDex.typeNames().get(classDef.typeIndex);\n          if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n            newClassesDescToCheck.add(desc);\n          }\n        }\n        if (!newClassesDescToCheck.isEmpty()) {\n          stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n          break;\n        }\n      }\n      stmCode=STMCODE_END;\n    }\n    break;\n  }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n  throw new TinkerPatchException(\"old primary dex is missing.\");\n}\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\nthrow new TinkerPatchException(\"new primary dex is missing.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\nthrow new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 439,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 8055,
        "startLineNumber" : 81,
        "startColumnNumber" : 39,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (stmCode) {\ncase STMCODE_START:{\n      boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n      if (isPrimaryDex) {\n        if (oldFile == null) {\n          stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n        }\n else         if (newFile == null) {\n          stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n        }\n else {\n          dexCmptor.startCheck(oldDex,newDex);\n          deletedClassInfos=dexCmptor.getDeletedClassInfos();\n          addedClassInfos=dexCmptor.getAddedClassInfos();\n          changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n          if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n          }\n else {\n            if (addedClassInfos.isEmpty()) {\n              ArrayList<String> removeClasses=new ArrayList<>();\n              for (              String classname : changedClassInfosMap.keySet()) {\n                if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                  Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                  removeClasses.add(classname);\n                }\n              }\n              changedClassInfosMap.keySet().removeAll(removeClasses);\n              if (changedClassInfosMap.isEmpty()) {\n                stmCode=STMCODE_END;\n              }\n else {\n                stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n              }\n            }\n else {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n            }\n          }\n        }\n      }\n else {\n        Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n        for (        String patternStr : config.mDexLoaderPattern) {\n          patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n        }\n        if (oldDex != null) {\n          oldClassesDescToCheck.clear();\n          for (          ClassDef classDef : oldDex.classDefs()) {\n            String desc=oldDex.typeNames().get(classDef.typeIndex);\n            if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n              oldClassesDescToCheck.add(desc);\n            }\n          }\n          if (!oldClassesDescToCheck.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n            break;\n          }\n        }\n        if (newDex != null) {\n          newClassesDescToCheck.clear();\n          for (          ClassDef classDef : newDex.classDefs()) {\n            String desc=newDex.typeNames().get(classDef.typeIndex);\n            if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n              newClassesDescToCheck.add(desc);\n            }\n          }\n          if (!newClassesDescToCheck.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n            break;\n          }\n        }\n        stmCode=STMCODE_END;\n      }\n      break;\n    }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n    throw new TinkerPatchException(\"old primary dex is missing.\");\n  }\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\n  throw new TinkerPatchException(\"new primary dex is missing.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\nthrow new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 440,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8086,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (stmCode != STMCODE_END) {\nswitch (stmCode) {\ncase STMCODE_START:{\n      boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n      if (isPrimaryDex) {\n        if (oldFile == null) {\n          stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n        }\n else         if (newFile == null) {\n          stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n        }\n else {\n          dexCmptor.startCheck(oldDex,newDex);\n          deletedClassInfos=dexCmptor.getDeletedClassInfos();\n          addedClassInfos=dexCmptor.getAddedClassInfos();\n          changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n          if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n          }\n else {\n            if (addedClassInfos.isEmpty()) {\n              ArrayList<String> removeClasses=new ArrayList<>();\n              for (              String classname : changedClassInfosMap.keySet()) {\n                if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                  Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                  removeClasses.add(classname);\n                }\n              }\n              changedClassInfosMap.keySet().removeAll(removeClasses);\n              if (changedClassInfosMap.isEmpty()) {\n                stmCode=STMCODE_END;\n              }\n else {\n                stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n              }\n            }\n else {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n            }\n          }\n        }\n      }\n else {\n        Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n        for (        String patternStr : config.mDexLoaderPattern) {\n          patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n        }\n        if (oldDex != null) {\n          oldClassesDescToCheck.clear();\n          for (          ClassDef classDef : oldDex.classDefs()) {\n            String desc=oldDex.typeNames().get(classDef.typeIndex);\n            if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n              oldClassesDescToCheck.add(desc);\n            }\n          }\n          if (!oldClassesDescToCheck.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n            break;\n          }\n        }\n        if (newDex != null) {\n          newClassesDescToCheck.clear();\n          for (          ClassDef classDef : newDex.classDefs()) {\n            String desc=newDex.typeNames().get(classDef.typeIndex);\n            if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n              newClassesDescToCheck.add(desc);\n            }\n          }\n          if (!newClassesDescToCheck.isEmpty()) {\n            stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n            break;\n          }\n        }\n        stmCode=STMCODE_END;\n      }\n      break;\n    }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n    throw new TinkerPatchException(\"old primary dex is missing.\");\n  }\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\n  throw new TinkerPatchException(\"new primary dex is missing.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\nthrow new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 444,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8408,
        "startLineNumber" : 71,
        "startColumnNumber" : 125,
        "endLineNumber" : 223,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (oldFile == null && newFile == null) {\n    throw new TinkerPatchException(\"both oldFile and newFile are null.\");\n  }\n  oldDex=(oldFile != null ? new Dex(oldFile) : null);\n  newDex=(newFile != null ? new Dex(newFile) : null);\n  int stmCode=STMCODE_START;\n  while (stmCode != STMCODE_END) {\nswitch (stmCode) {\ncase STMCODE_START:{\n        boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n        if (isPrimaryDex) {\n          if (oldFile == null) {\n            stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n          }\n else           if (newFile == null) {\n            stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n          }\n else {\n            dexCmptor.startCheck(oldDex,newDex);\n            deletedClassInfos=dexCmptor.getDeletedClassInfos();\n            addedClassInfos=dexCmptor.getAddedClassInfos();\n            changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n            if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n            }\n else {\n              if (addedClassInfos.isEmpty()) {\n                ArrayList<String> removeClasses=new ArrayList<>();\n                for (                String classname : changedClassInfosMap.keySet()) {\n                  if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                    Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                    removeClasses.add(classname);\n                  }\n                }\n                changedClassInfosMap.keySet().removeAll(removeClasses);\n                if (changedClassInfosMap.isEmpty()) {\n                  stmCode=STMCODE_END;\n                }\n else {\n                  stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n                }\n              }\n else {\n                stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n              }\n            }\n          }\n        }\n else {\n          Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n          for (          String patternStr : config.mDexLoaderPattern) {\n            patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n          }\n          if (oldDex != null) {\n            oldClassesDescToCheck.clear();\n            for (            ClassDef classDef : oldDex.classDefs()) {\n              String desc=oldDex.typeNames().get(classDef.typeIndex);\n              if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n                oldClassesDescToCheck.add(desc);\n              }\n            }\n            if (!oldClassesDescToCheck.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n              break;\n            }\n          }\n          if (newDex != null) {\n            newClassesDescToCheck.clear();\n            for (            ClassDef classDef : newDex.classDefs()) {\n              String desc=newDex.typeNames().get(classDef.typeIndex);\n              if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n                newClassesDescToCheck.add(desc);\n              }\n            }\n            if (!newClassesDescToCheck.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n              break;\n            }\n          }\n          stmCode=STMCODE_END;\n        }\n        break;\n      }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n      throw new TinkerPatchException(\"old primary dex is missing.\");\n    }\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\n    throw new TinkerPatchException(\"new primary dex is missing.\");\n  }\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\n  throw new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 490,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8529,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 223,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void checkIfExcludedClassWasModifiedInNewDex(File oldFile,File newFile) throws IOException, TinkerPatchException {\n  if (oldFile == null && newFile == null) {\n    throw new TinkerPatchException(\"both oldFile and newFile are null.\");\n  }\n  oldDex=(oldFile != null ? new Dex(oldFile) : null);\n  newDex=(newFile != null ? new Dex(newFile) : null);\n  int stmCode=STMCODE_START;\n  while (stmCode != STMCODE_END) {\nswitch (stmCode) {\ncase STMCODE_START:{\n        boolean isPrimaryDex=isPrimaryDex((oldFile == null ? newFile : oldFile));\n        if (isPrimaryDex) {\n          if (oldFile == null) {\n            stmCode=STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING;\n          }\n else           if (newFile == null) {\n            stmCode=STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING;\n          }\n else {\n            dexCmptor.startCheck(oldDex,newDex);\n            deletedClassInfos=dexCmptor.getDeletedClassInfos();\n            addedClassInfos=dexCmptor.getAddedClassInfos();\n            changedClassInfosMap=new HashMap<>(dexCmptor.getChangedClassDescToInfosMap());\n            if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n            }\n else {\n              if (addedClassInfos.isEmpty()) {\n                ArrayList<String> removeClasses=new ArrayList<>();\n                for (                String classname : changedClassInfosMap.keySet()) {\n                  if (Utils.checkFileInPattern(ignoreChangeWarning,classname)) {\n                    Logger.e(\"loader class pattern: \" + classname + \" has changed, but it match ignore change pattern, just ignore!\");\n                    removeClasses.add(classname);\n                  }\n                }\n                changedClassInfosMap.keySet().removeAll(removeClasses);\n                if (changedClassInfosMap.isEmpty()) {\n                  stmCode=STMCODE_END;\n                }\n else {\n                  stmCode=STMCODE_ERROR_LOADER_CLASS_CHANGED;\n                }\n              }\n else {\n                stmCode=STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH;\n              }\n            }\n          }\n        }\n else {\n          Set<Pattern> patternsOfClassDescToCheck=new HashSet<>();\n          for (          String patternStr : config.mDexLoaderPattern) {\n            patternsOfClassDescToCheck.add(Pattern.compile(PatternUtils.dotClassNamePatternToDescriptorRegEx(patternStr)));\n          }\n          if (oldDex != null) {\n            oldClassesDescToCheck.clear();\n            for (            ClassDef classDef : oldDex.classDefs()) {\n              String desc=oldDex.typeNames().get(classDef.typeIndex);\n              if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n                oldClassesDescToCheck.add(desc);\n              }\n            }\n            if (!oldClassesDescToCheck.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX;\n              break;\n            }\n          }\n          if (newDex != null) {\n            newClassesDescToCheck.clear();\n            for (            ClassDef classDef : newDex.classDefs()) {\n              String desc=newDex.typeNames().get(classDef.typeIndex);\n              if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n                newClassesDescToCheck.add(desc);\n              }\n            }\n            if (!newClassesDescToCheck.isEmpty()) {\n              stmCode=STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX;\n              break;\n            }\n          }\n          stmCode=STMCODE_END;\n        }\n        break;\n      }\ncase STMCODE_ERROR_PRIMARY_OLD_DEX_IS_MISSING:{\n      throw new TinkerPatchException(\"old primary dex is missing.\");\n    }\ncase STMCODE_ERROR_PRIMARY_NEW_DEX_IS_MISSING:{\n    throw new TinkerPatchException(\"new primary dex is missing.\");\n  }\ncase STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX:{\n  throw new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n}\ncase STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH:{\nthrow new TinkerPatchException(\"there's loader classes added in new primary dex, such these changes will not take effect.\\n\" + \"added classes: \" + Utils.collectionToString(addedClassInfos));\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX:{\nfinal String msg=\"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_NEW_DEX:{\nfinal String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\nif (config.mAllowLoaderInAnyDex) {\nLogger.d(msg);\n}\n else {\nthrow new TinkerPatchException(msg);\n}\n}\ncase STMCODE_ERROR_LOADER_CLASS_CHANGED:{\nString msg=\"some loader class has been changed in new primary dex.\" + \" Such these changes will not take effect!!\" + \" related classes: \"+ Utils.collectionToString(changedClassInfosMap.keySet());\nthrow new TinkerPatchException(msg);\n}\ndefault:{\nLogger.e(\"internal-error: unexpected stmCode.\");\nstmCode=STMCODE_END;\nbreak;\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 506,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 201,
        "startColumnNumber" : 20,
        "endLineNumber" : 201,
        "endColumnNumber" : 154
      },
      "nodeContext" : "final String msg=\"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 160,
    "startColumnNumber" : 28,
    "endLineNumber" : 160,
    "endColumnNumber" : 49
  }, {
    "charLength" : 21,
    "startLineNumber" : 164,
    "startColumnNumber" : 36,
    "endLineNumber" : 164,
    "endColumnNumber" : 57
  }, {
    "charLength" : 21,
    "startLineNumber" : 167,
    "startColumnNumber" : 33,
    "endLineNumber" : 167,
    "endColumnNumber" : 54
  }, {
    "charLength" : 21,
    "startLineNumber" : 201,
    "startColumnNumber" : 131,
    "endLineNumber" : 201,
    "endColumnNumber" : 152
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  } ]
}