{
  "id" : 48,
  "expression" : "options.setSslEngine(SSLEngine.OPENSSL)",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/test/java/io/vertx/test/core/NetTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "options.setSslEngine(SSLEngine.OPENSSL)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 183,
      "startColumnNumber" : 26,
      "endLineNumber" : 183,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 183,
        "startColumnNumber" : 4,
        "endLineNumber" : 183,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertEquals(options,options.setSslEngine(SSLEngine.OPENSSL))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 183,
        "startColumnNumber" : 4,
        "endLineNumber" : 183,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertEquals(options,options.setSslEngine(SSLEngine.OPENSSL));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4564,
        "startLineNumber" : 88,
        "startColumnNumber" : 34,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  NetClientOptions options=new NetClientOptions();\n  assertEquals(NetworkOptions.DEFAULT_SEND_BUFFER_SIZE,options.getSendBufferSize());\n  int rand=TestUtils.randomPositiveInt();\n  assertEquals(options,options.setSendBufferSize(rand));\n  assertEquals(rand,options.getSendBufferSize());\n  assertIllegalArgumentException(() -> options.setSendBufferSize(0));\n  assertIllegalArgumentException(() -> options.setSendBufferSize(-123));\n  assertEquals(NetworkOptions.DEFAULT_RECEIVE_BUFFER_SIZE,options.getReceiveBufferSize());\n  rand=TestUtils.randomPositiveInt();\n  assertEquals(options,options.setReceiveBufferSize(rand));\n  assertEquals(rand,options.getReceiveBufferSize());\n  assertIllegalArgumentException(() -> options.setReceiveBufferSize(0));\n  assertIllegalArgumentException(() -> options.setReceiveBufferSize(-123));\n  assertTrue(options.isReuseAddress());\n  assertEquals(options,options.setReuseAddress(false));\n  assertFalse(options.isReuseAddress());\n  assertEquals(NetworkOptions.DEFAULT_TRAFFIC_CLASS,options.getTrafficClass());\n  rand=23;\n  assertEquals(options,options.setTrafficClass(rand));\n  assertEquals(rand,options.getTrafficClass());\n  assertIllegalArgumentException(() -> options.setTrafficClass(-2));\n  assertIllegalArgumentException(() -> options.setTrafficClass(256));\n  assertTrue(options.isTcpNoDelay());\n  assertEquals(options,options.setTcpNoDelay(false));\n  assertFalse(options.isTcpNoDelay());\n  boolean tcpKeepAlive=false;\n  assertEquals(tcpKeepAlive,options.isTcpKeepAlive());\n  assertEquals(options,options.setTcpKeepAlive(!tcpKeepAlive));\n  assertEquals(!tcpKeepAlive,options.isTcpKeepAlive());\n  int soLinger=-1;\n  assertEquals(soLinger,options.getSoLinger());\n  rand=TestUtils.randomPositiveInt();\n  assertEquals(options,options.setSoLinger(rand));\n  assertEquals(rand,options.getSoLinger());\n  assertIllegalArgumentException(() -> options.setSoLinger(-2));\n  assertFalse(options.isUsePooledBuffers());\n  assertEquals(options,options.setUsePooledBuffers(true));\n  assertTrue(options.isUsePooledBuffers());\n  rand=TestUtils.randomPositiveInt();\n  assertEquals(0,options.getIdleTimeout());\n  assertEquals(options,options.setIdleTimeout(rand));\n  assertEquals(rand,options.getIdleTimeout());\n  assertFalse(options.isSsl());\n  assertEquals(options,options.setSsl(true));\n  assertTrue(options.isSsl());\n  assertNull(options.getKeyCertOptions());\n  JksOptions keyStoreOptions=new JksOptions().setPath(TestUtils.randomAlphaString(100)).setPassword(TestUtils.randomAlphaString(100));\n  assertEquals(options,options.setKeyStoreOptions(keyStoreOptions));\n  assertEquals(keyStoreOptions,options.getKeyCertOptions());\n  assertNull(options.getTrustOptions());\n  JksOptions trustStoreOptions=new JksOptions().setPath(TestUtils.randomAlphaString(100)).setPassword(TestUtils.randomAlphaString(100));\n  assertEquals(options,options.setTrustStoreOptions(trustStoreOptions));\n  assertEquals(trustStoreOptions,options.getTrustOptions());\n  assertFalse(options.isTrustAll());\n  assertEquals(options,options.setTrustAll(true));\n  assertTrue(options.isTrustAll());\n  assertEquals(0,options.getReconnectAttempts());\n  assertIllegalArgumentException(() -> options.setReconnectAttempts(-2));\n  rand=TestUtils.randomPositiveInt();\n  assertEquals(options,options.setReconnectAttempts(rand));\n  assertEquals(rand,options.getReconnectAttempts());\n  assertEquals(1000,options.getReconnectInterval());\n  assertIllegalArgumentException(() -> options.setReconnectInterval(0));\n  rand=TestUtils.randomPositiveInt();\n  assertEquals(options,options.setReconnectInterval(rand));\n  assertEquals(rand,options.getReconnectInterval());\n  assertTrue(options.getEnabledCipherSuites().isEmpty());\n  assertEquals(options,options.addEnabledCipherSuite(\"foo\"));\n  assertEquals(options,options.addEnabledCipherSuite(\"bar\"));\n  assertNotNull(options.getEnabledCipherSuites());\n  assertTrue(options.getEnabledCipherSuites().contains(\"foo\"));\n  assertTrue(options.getEnabledCipherSuites().contains(\"bar\"));\n  assertEquals(false,options.isUseAlpn());\n  assertEquals(options,options.setUseAlpn(true));\n  assertEquals(true,options.isUseAlpn());\n  assertEquals(SSLEngine.JDK,options.getSslEngine());\n  assertEquals(options,options.setSslEngine(SSLEngine.OPENSSL));\n  assertEquals(SSLEngine.OPENSSL,options.getSslEngine());\n  testComplete();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4604,
        "startLineNumber" : 87,
        "startColumnNumber" : 2,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testClientOptions(){\n  NetClientOptions options=new NetClientOptions();\n  assertEquals(NetworkOptions.DEFAULT_SEND_BUFFER_SIZE,options.getSendBufferSize());\n  int rand=TestUtils.randomPositiveInt();\n  assertEquals(options,options.setSendBufferSize(rand));\n  assertEquals(rand,options.getSendBufferSize());\n  assertIllegalArgumentException(() -> options.setSendBufferSize(0));\n  assertIllegalArgumentException(() -> options.setSendBufferSize(-123));\n  assertEquals(NetworkOptions.DEFAULT_RECEIVE_BUFFER_SIZE,options.getReceiveBufferSize());\n  rand=TestUtils.randomPositiveInt();\n  assertEquals(options,options.setReceiveBufferSize(rand));\n  assertEquals(rand,options.getReceiveBufferSize());\n  assertIllegalArgumentException(() -> options.setReceiveBufferSize(0));\n  assertIllegalArgumentException(() -> options.setReceiveBufferSize(-123));\n  assertTrue(options.isReuseAddress());\n  assertEquals(options,options.setReuseAddress(false));\n  assertFalse(options.isReuseAddress());\n  assertEquals(NetworkOptions.DEFAULT_TRAFFIC_CLASS,options.getTrafficClass());\n  rand=23;\n  assertEquals(options,options.setTrafficClass(rand));\n  assertEquals(rand,options.getTrafficClass());\n  assertIllegalArgumentException(() -> options.setTrafficClass(-2));\n  assertIllegalArgumentException(() -> options.setTrafficClass(256));\n  assertTrue(options.isTcpNoDelay());\n  assertEquals(options,options.setTcpNoDelay(false));\n  assertFalse(options.isTcpNoDelay());\n  boolean tcpKeepAlive=false;\n  assertEquals(tcpKeepAlive,options.isTcpKeepAlive());\n  assertEquals(options,options.setTcpKeepAlive(!tcpKeepAlive));\n  assertEquals(!tcpKeepAlive,options.isTcpKeepAlive());\n  int soLinger=-1;\n  assertEquals(soLinger,options.getSoLinger());\n  rand=TestUtils.randomPositiveInt();\n  assertEquals(options,options.setSoLinger(rand));\n  assertEquals(rand,options.getSoLinger());\n  assertIllegalArgumentException(() -> options.setSoLinger(-2));\n  assertFalse(options.isUsePooledBuffers());\n  assertEquals(options,options.setUsePooledBuffers(true));\n  assertTrue(options.isUsePooledBuffers());\n  rand=TestUtils.randomPositiveInt();\n  assertEquals(0,options.getIdleTimeout());\n  assertEquals(options,options.setIdleTimeout(rand));\n  assertEquals(rand,options.getIdleTimeout());\n  assertFalse(options.isSsl());\n  assertEquals(options,options.setSsl(true));\n  assertTrue(options.isSsl());\n  assertNull(options.getKeyCertOptions());\n  JksOptions keyStoreOptions=new JksOptions().setPath(TestUtils.randomAlphaString(100)).setPassword(TestUtils.randomAlphaString(100));\n  assertEquals(options,options.setKeyStoreOptions(keyStoreOptions));\n  assertEquals(keyStoreOptions,options.getKeyCertOptions());\n  assertNull(options.getTrustOptions());\n  JksOptions trustStoreOptions=new JksOptions().setPath(TestUtils.randomAlphaString(100)).setPassword(TestUtils.randomAlphaString(100));\n  assertEquals(options,options.setTrustStoreOptions(trustStoreOptions));\n  assertEquals(trustStoreOptions,options.getTrustOptions());\n  assertFalse(options.isTrustAll());\n  assertEquals(options,options.setTrustAll(true));\n  assertTrue(options.isTrustAll());\n  assertEquals(0,options.getReconnectAttempts());\n  assertIllegalArgumentException(() -> options.setReconnectAttempts(-2));\n  rand=TestUtils.randomPositiveInt();\n  assertEquals(options,options.setReconnectAttempts(rand));\n  assertEquals(rand,options.getReconnectAttempts());\n  assertEquals(1000,options.getReconnectInterval());\n  assertIllegalArgumentException(() -> options.setReconnectInterval(0));\n  rand=TestUtils.randomPositiveInt();\n  assertEquals(options,options.setReconnectInterval(rand));\n  assertEquals(rand,options.getReconnectInterval());\n  assertTrue(options.getEnabledCipherSuites().isEmpty());\n  assertEquals(options,options.addEnabledCipherSuite(\"foo\"));\n  assertEquals(options,options.addEnabledCipherSuite(\"bar\"));\n  assertNotNull(options.getEnabledCipherSuites());\n  assertTrue(options.getEnabledCipherSuites().contains(\"foo\"));\n  assertTrue(options.getEnabledCipherSuites().contains(\"bar\"));\n  assertEquals(false,options.isUseAlpn());\n  assertEquals(options,options.setUseAlpn(true));\n  assertEquals(true,options.isUseAlpn());\n  assertEquals(SSLEngine.JDK,options.getSslEngine());\n  assertEquals(options,options.setSslEngine(SSLEngine.OPENSSL));\n  assertEquals(SSLEngine.OPENSSL,options.getSslEngine());\n  testComplete();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 183,
        "startColumnNumber" : 4,
        "endLineNumber" : 183,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertEquals(options,options.setSslEngine(SSLEngine.OPENSSL));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "io.vertx.core.net.TCPSSLOptions"
  } ],
  "positionList" : [ {
    "charLength" : 39,
    "startLineNumber" : 183,
    "startColumnNumber" : 26,
    "endLineNumber" : 183,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}