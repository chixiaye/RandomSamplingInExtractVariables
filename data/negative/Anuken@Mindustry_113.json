{
  "id" : 113,
  "expression" : "maxUsed",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/world/blocks/defense/turrets/ReloadTurret.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "maxUsed",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 36,
      "startColumnNumber" : 64,
      "endLineNumber" : 36,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 36,
        "startColumnNumber" : 64,
        "endLineNumber" : 36,
        "endColumnNumber" : 84
      },
      "nodeContext" : "maxUsed * Time.delta",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 36,
        "startColumnNumber" : 34,
        "endLineNumber" : 36,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Math.min(liquids.get(liquid),maxUsed * Time.delta)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 36,
        "startColumnNumber" : 25,
        "endLineNumber" : 36,
        "endColumnNumber" : 166
      },
      "nodeContext" : "Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,((reloadTime - reload) / coolantMultiplier) / liquid.heatCapacity))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 36,
        "startColumnNumber" : 25,
        "endLineNumber" : 36,
        "endColumnNumber" : 186
      },
      "nodeContext" : "Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,((reloadTime - reload) / coolantMultiplier) / liquid.heatCapacity)) * baseReloadSpeed()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 33,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 36,
        "startColumnNumber" : 18,
        "endLineNumber" : 36,
        "endColumnNumber" : 186
      },
      "nodeContext" : "used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,((reloadTime - reload) / coolantMultiplier) / liquid.heatCapacity)) * baseReloadSpeed()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 35,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 36,
        "startColumnNumber" : 12,
        "endLineNumber" : 36,
        "endColumnNumber" : 187
      },
      "nodeContext" : "float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,((reloadTime - reload) / coolantMultiplier) / liquid.heatCapacity)) * baseReloadSpeed();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 37,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 615,
        "startLineNumber" : 31,
        "startColumnNumber" : 38,
        "endLineNumber" : 43,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  float maxUsed=consumes.<ConsumeLiquidBase>get(ConsumeType.liquid).amount;\n  Liquid liquid=liquids.current();\n  float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,((reloadTime - reload) / coolantMultiplier) / liquid.heatCapacity)) * baseReloadSpeed();\n  reload+=used * liquid.heatCapacity * coolantMultiplier;\n  liquids.remove(liquid,used);\n  if (Mathf.chance(0.06 * used)) {\n    coolEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 645,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 9
      },
      "nodeContext" : "protected void updateCooling(){\n  float maxUsed=consumes.<ConsumeLiquidBase>get(ConsumeType.liquid).amount;\n  Liquid liquid=liquids.current();\n  float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,((reloadTime - reload) / coolantMultiplier) / liquid.heatCapacity)) * baseReloadSpeed();\n  reload+=used * liquid.heatCapacity * coolantMultiplier;\n  liquids.remove(liquid,used);\n  if (Mathf.chance(0.06 * used)) {\n    coolEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 36,
        "startColumnNumber" : 12,
        "endLineNumber" : 36,
        "endColumnNumber" : 187
      },
      "nodeContext" : "float used=Math.min(Math.min(liquids.get(liquid),maxUsed * Time.delta),Math.max(0,((reloadTime - reload) / coolantMultiplier) / liquid.heatCapacity)) * baseReloadSpeed();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 37,
      "astHeight" : 11
    },
    "tokenLength" : 1,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 36,
    "startColumnNumber" : 64,
    "endLineNumber" : 36,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}