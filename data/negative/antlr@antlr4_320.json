{
  "id" : 320,
  "expression" : "CharStreams.fromStream(System.in,charset)",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/gui/TestRig.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "CharStreams.fromStream(System.in,charset)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 157,
      "startColumnNumber" : 27,
      "endLineNumber" : 157,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 157,
        "startColumnNumber" : 14,
        "endLineNumber" : 157,
        "endColumnNumber" : 69
      },
      "nodeContext" : "charStream=CharStreams.fromStream(System.in,charset)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 157,
        "startColumnNumber" : 3,
        "endLineNumber" : 157,
        "endColumnNumber" : 70
      },
      "nodeContext" : "CharStream charStream=CharStreams.fromStream(System.in,charset);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 156,
        "startColumnNumber" : 30,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CharStream charStream=CharStreams.fromStream(System.in,charset);\n  process(lexer,parserClass,parser,charStream);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 156,
        "startColumnNumber" : 2,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (inputFiles.size() == 0) {\n  CharStream charStream=CharStreams.fromStream(System.in,charset);\n  process(lexer,parserClass,parser,charStream);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1759,
        "startLineNumber" : 123,
        "startColumnNumber" : 40,
        "endLineNumber" : 168,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String lexerName=grammarName + \"Lexer\";\n  ClassLoader cl=Thread.currentThread().getContextClassLoader();\n  Class<? extends Lexer> lexerClass=null;\n  try {\n    lexerClass=cl.loadClass(lexerName).asSubclass(Lexer.class);\n  }\n catch (  java.lang.ClassNotFoundException cnfe) {\n    lexerName=grammarName;\n    try {\n      lexerClass=cl.loadClass(lexerName).asSubclass(Lexer.class);\n    }\n catch (    ClassNotFoundException cnfe2) {\n      System.err.println(\"Can't load \" + lexerName + \" as lexer or parser\");\n      return;\n    }\n  }\n  Constructor<? extends Lexer> lexerCtor=lexerClass.getConstructor(CharStream.class);\n  Lexer lexer=lexerCtor.newInstance((CharStream)null);\n  Class<? extends Parser> parserClass=null;\n  Parser parser=null;\n  if (!startRuleName.equals(LEXER_START_RULE_NAME)) {\n    String parserName=grammarName + \"Parser\";\n    parserClass=cl.loadClass(parserName).asSubclass(Parser.class);\n    Constructor<? extends Parser> parserCtor=parserClass.getConstructor(TokenStream.class);\n    parser=parserCtor.newInstance((TokenStream)null);\n  }\n  Charset charset=(encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));\n  if (inputFiles.size() == 0) {\n    CharStream charStream=CharStreams.fromStream(System.in,charset);\n    process(lexer,parserClass,parser,charStream);\n    return;\n  }\n  for (  String inputFile : inputFiles) {\n    CharStream charStream=CharStreams.fromPath(Paths.get(inputFile),charset);\n    if (inputFiles.size() > 1) {\n      System.err.println(inputFile);\n    }\n    process(lexer,parserClass,parser,charStream);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1798,
        "startLineNumber" : 123,
        "startColumnNumber" : 1,
        "endLineNumber" : 168,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void process() throws Exception {\n  String lexerName=grammarName + \"Lexer\";\n  ClassLoader cl=Thread.currentThread().getContextClassLoader();\n  Class<? extends Lexer> lexerClass=null;\n  try {\n    lexerClass=cl.loadClass(lexerName).asSubclass(Lexer.class);\n  }\n catch (  java.lang.ClassNotFoundException cnfe) {\n    lexerName=grammarName;\n    try {\n      lexerClass=cl.loadClass(lexerName).asSubclass(Lexer.class);\n    }\n catch (    ClassNotFoundException cnfe2) {\n      System.err.println(\"Can't load \" + lexerName + \" as lexer or parser\");\n      return;\n    }\n  }\n  Constructor<? extends Lexer> lexerCtor=lexerClass.getConstructor(CharStream.class);\n  Lexer lexer=lexerCtor.newInstance((CharStream)null);\n  Class<? extends Parser> parserClass=null;\n  Parser parser=null;\n  if (!startRuleName.equals(LEXER_START_RULE_NAME)) {\n    String parserName=grammarName + \"Parser\";\n    parserClass=cl.loadClass(parserName).asSubclass(Parser.class);\n    Constructor<? extends Parser> parserCtor=parserClass.getConstructor(TokenStream.class);\n    parser=parserCtor.newInstance((TokenStream)null);\n  }\n  Charset charset=(encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));\n  if (inputFiles.size() == 0) {\n    CharStream charStream=CharStreams.fromStream(System.in,charset);\n    process(lexer,parserClass,parser,charStream);\n    return;\n  }\n  for (  String inputFile : inputFiles) {\n    CharStream charStream=CharStreams.fromPath(Paths.get(inputFile),charset);\n    if (inputFiles.size() > 1) {\n      System.err.println(inputFile);\n    }\n    process(lexer,parserClass,parser,charStream);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 274,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 157,
        "startColumnNumber" : 3,
        "endLineNumber" : 157,
        "endColumnNumber" : 70
      },
      "nodeContext" : "CharStream charStream=CharStreams.fromStream(System.in,charset);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "org.antlr.v4.runtime.CharStream"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 157,
    "startColumnNumber" : 27,
    "endLineNumber" : 157,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ ]
}