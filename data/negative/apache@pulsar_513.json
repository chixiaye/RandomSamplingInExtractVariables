{
  "id" : 513,
  "expression" : "e",
  "projectName" : "apache@pulsar",
  "commitID" : "5980ce060e5d08aea9a83659a68d64ed5673cf4e",
  "filePath" : "pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdConsume.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 395,
      "startColumnNumber" : 56,
      "endLineNumber" : 395,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 395,
        "startColumnNumber" : 56,
        "endLineNumber" : 395,
        "endColumnNumber" : 70
      },
      "nodeContext" : "e.getMessage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 395,
        "startColumnNumber" : 22,
        "endLineNumber" : 395,
        "endColumnNumber" : 70
      },
      "nodeContext" : "\"Authentication plugin error: \" + e.getMessage()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 395,
        "startColumnNumber" : 12,
        "endLineNumber" : 395,
        "endColumnNumber" : 71
      },
      "nodeContext" : "LOG.error(\"Authentication plugin error: \" + e.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 395,
        "startColumnNumber" : 12,
        "endLineNumber" : 395,
        "endColumnNumber" : 72
      },
      "nodeContext" : "LOG.error(\"Authentication plugin error: \" + e.getMessage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 394,
        "startColumnNumber" : 30,
        "endLineNumber" : 397,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LOG.error(\"Authentication plugin error: \" + e.getMessage());\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 394,
        "startColumnNumber" : 10,
        "endLineNumber" : 397,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  LOG.error(\"Authentication plugin error: \" + e.getMessage());\n  return -1;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 575,
        "startLineNumber" : 384,
        "startColumnNumber" : 8,
        "endLineNumber" : 397,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (authentication != null) {\n    authentication.start();\n    AuthenticationDataProvider authData=authentication.getAuthData();\n    if (authData.hasDataForHttp()) {\n      for (      Map.Entry<String,String> kv : authData.getHttpHeaders()) {\n        produceRequest.setHeader(kv.getKey(),kv.getValue());\n      }\n    }\n  }\n}\n catch (Exception e) {\n  LOG.error(\"Authentication plugin error: \" + e.getMessage());\n  return -1;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 68,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3420,
        "startLineNumber" : 367,
        "startColumnNumber" : 51,
        "endLineNumber" : 445,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int numMessagesConsumed=0;\n  int returnCode=0;\n  TopicName topicName=TopicName.get(topic);\n  String wsTopic=String.format(\"%s/%s/\" + (StringUtils.isEmpty(topicName.getCluster()) ? \"\" : topicName.getCluster() + \"/\") + \"%s/%s/%s?subscriptionType=%s&subscriptionMode=%s\",topicName.getDomain(),topicName.getTenant(),topicName.getNamespacePortion(),topicName.getLocalName(),subscriptionName,subscriptionType.toString(),subscriptionMode.toString());\n  String consumerBaseUri=serviceURL + (serviceURL.endsWith(\"/\") ? \"\" : \"/\") + \"ws/consumer/\"+ wsTopic;\n  URI consumerUri=URI.create(consumerBaseUri);\n  WebSocketClient produceClient=new WebSocketClient(new SslContextFactory(true));\n  ClientUpgradeRequest produceRequest=new ClientUpgradeRequest();\n  try {\n    if (authentication != null) {\n      authentication.start();\n      AuthenticationDataProvider authData=authentication.getAuthData();\n      if (authData.hasDataForHttp()) {\n        for (        Map.Entry<String,String> kv : authData.getHttpHeaders()) {\n          produceRequest.setHeader(kv.getKey(),kv.getValue());\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    LOG.error(\"Authentication plugin error: \" + e.getMessage());\n    return -1;\n  }\n  CompletableFuture<Void> connected=new CompletableFuture<>();\n  ConsumerSocket consumerSocket=new ConsumerSocket(connected);\n  try {\n    produceClient.start();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to start websocket-client\",e);\n    return -1;\n  }\n  try {\n    LOG.info(\"Trying to create websocket session..{}\",consumerUri);\n    produceClient.connect(consumerSocket,consumerUri,produceRequest);\n    connected.get();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to create web-socket session\",e);\n    return -1;\n  }\n  try {\n    RateLimiter limiter=(this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n    while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n      if (limiter != null) {\n        limiter.acquire();\n      }\n      String msg=consumerSocket.receive(5,TimeUnit.SECONDS);\n      if (msg == null) {\n        LOG.debug(\"No message to consume after waiting for 5 seconds.\");\n      }\n else {\n        try {\n          String output=interpretByteArray(displayHex,Base64.getDecoder().decode(msg));\n          System.out.println(output);\n        }\n catch (        Exception e) {\n          System.out.println(msg);\n        }\n        numMessagesConsumed+=1;\n      }\n    }\n    consumerSocket.awaitClose(2,TimeUnit.SECONDS);\n  }\n catch (  Exception e) {\n    LOG.error(\"Error while consuming messages\");\n    LOG.error(e.getMessage(),e);\n    returnCode=-1;\n  }\n finally {\n    LOG.info(\"{} messages successfully consumed\",numMessagesConsumed);\n  }\n  return returnCode;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 401,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 366,
        "startColumnNumber" : 4,
        "endLineNumber" : 445,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"deprecation\") private int consumeFromWebSocket(String topic){\n  int numMessagesConsumed=0;\n  int returnCode=0;\n  TopicName topicName=TopicName.get(topic);\n  String wsTopic=String.format(\"%s/%s/\" + (StringUtils.isEmpty(topicName.getCluster()) ? \"\" : topicName.getCluster() + \"/\") + \"%s/%s/%s?subscriptionType=%s&subscriptionMode=%s\",topicName.getDomain(),topicName.getTenant(),topicName.getNamespacePortion(),topicName.getLocalName(),subscriptionName,subscriptionType.toString(),subscriptionMode.toString());\n  String consumerBaseUri=serviceURL + (serviceURL.endsWith(\"/\") ? \"\" : \"/\") + \"ws/consumer/\"+ wsTopic;\n  URI consumerUri=URI.create(consumerBaseUri);\n  WebSocketClient produceClient=new WebSocketClient(new SslContextFactory(true));\n  ClientUpgradeRequest produceRequest=new ClientUpgradeRequest();\n  try {\n    if (authentication != null) {\n      authentication.start();\n      AuthenticationDataProvider authData=authentication.getAuthData();\n      if (authData.hasDataForHttp()) {\n        for (        Map.Entry<String,String> kv : authData.getHttpHeaders()) {\n          produceRequest.setHeader(kv.getKey(),kv.getValue());\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    LOG.error(\"Authentication plugin error: \" + e.getMessage());\n    return -1;\n  }\n  CompletableFuture<Void> connected=new CompletableFuture<>();\n  ConsumerSocket consumerSocket=new ConsumerSocket(connected);\n  try {\n    produceClient.start();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to start websocket-client\",e);\n    return -1;\n  }\n  try {\n    LOG.info(\"Trying to create websocket session..{}\",consumerUri);\n    produceClient.connect(consumerSocket,consumerUri,produceRequest);\n    connected.get();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to create web-socket session\",e);\n    return -1;\n  }\n  try {\n    RateLimiter limiter=(this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n    while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n      if (limiter != null) {\n        limiter.acquire();\n      }\n      String msg=consumerSocket.receive(5,TimeUnit.SECONDS);\n      if (msg == null) {\n        LOG.debug(\"No message to consume after waiting for 5 seconds.\");\n      }\n else {\n        try {\n          String output=interpretByteArray(displayHex,Base64.getDecoder().decode(msg));\n          System.out.println(output);\n        }\n catch (        Exception e) {\n          System.out.println(msg);\n        }\n        numMessagesConsumed+=1;\n      }\n    }\n    consumerSocket.awaitClose(2,TimeUnit.SECONDS);\n  }\n catch (  Exception e) {\n    LOG.error(\"Error while consuming messages\");\n    LOG.error(e.getMessage(),e);\n    returnCode=-1;\n  }\n finally {\n    LOG.info(\"{} messages successfully consumed\",numMessagesConsumed);\n  }\n  return returnCode;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 412,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 395,
        "startColumnNumber" : 12,
        "endLineNumber" : 395,
        "endColumnNumber" : 72
      },
      "nodeContext" : "LOG.error(\"Authentication plugin error: \" + e.getMessage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Exception"
  }, {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 403,
      "startColumnNumber" : 58,
      "endLineNumber" : 403,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 403,
        "endColumnNumber" : 60
      },
      "nodeContext" : "LOG.error(\"Failed to start websocket-client\",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 403,
        "endColumnNumber" : 61
      },
      "nodeContext" : "LOG.error(\"Failed to start websocket-client\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 402,
        "startColumnNumber" : 30,
        "endLineNumber" : 405,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LOG.error(\"Failed to start websocket-client\",e);\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 402,
        "startColumnNumber" : 10,
        "endLineNumber" : 405,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  LOG.error(\"Failed to start websocket-client\",e);\n  return -1;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 400,
        "startColumnNumber" : 8,
        "endLineNumber" : 405,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  produceClient.start();\n}\n catch (Exception e) {\n  LOG.error(\"Failed to start websocket-client\",e);\n  return -1;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3420,
        "startLineNumber" : 367,
        "startColumnNumber" : 51,
        "endLineNumber" : 445,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int numMessagesConsumed=0;\n  int returnCode=0;\n  TopicName topicName=TopicName.get(topic);\n  String wsTopic=String.format(\"%s/%s/\" + (StringUtils.isEmpty(topicName.getCluster()) ? \"\" : topicName.getCluster() + \"/\") + \"%s/%s/%s?subscriptionType=%s&subscriptionMode=%s\",topicName.getDomain(),topicName.getTenant(),topicName.getNamespacePortion(),topicName.getLocalName(),subscriptionName,subscriptionType.toString(),subscriptionMode.toString());\n  String consumerBaseUri=serviceURL + (serviceURL.endsWith(\"/\") ? \"\" : \"/\") + \"ws/consumer/\"+ wsTopic;\n  URI consumerUri=URI.create(consumerBaseUri);\n  WebSocketClient produceClient=new WebSocketClient(new SslContextFactory(true));\n  ClientUpgradeRequest produceRequest=new ClientUpgradeRequest();\n  try {\n    if (authentication != null) {\n      authentication.start();\n      AuthenticationDataProvider authData=authentication.getAuthData();\n      if (authData.hasDataForHttp()) {\n        for (        Map.Entry<String,String> kv : authData.getHttpHeaders()) {\n          produceRequest.setHeader(kv.getKey(),kv.getValue());\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    LOG.error(\"Authentication plugin error: \" + e.getMessage());\n    return -1;\n  }\n  CompletableFuture<Void> connected=new CompletableFuture<>();\n  ConsumerSocket consumerSocket=new ConsumerSocket(connected);\n  try {\n    produceClient.start();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to start websocket-client\",e);\n    return -1;\n  }\n  try {\n    LOG.info(\"Trying to create websocket session..{}\",consumerUri);\n    produceClient.connect(consumerSocket,consumerUri,produceRequest);\n    connected.get();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to create web-socket session\",e);\n    return -1;\n  }\n  try {\n    RateLimiter limiter=(this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n    while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n      if (limiter != null) {\n        limiter.acquire();\n      }\n      String msg=consumerSocket.receive(5,TimeUnit.SECONDS);\n      if (msg == null) {\n        LOG.debug(\"No message to consume after waiting for 5 seconds.\");\n      }\n else {\n        try {\n          String output=interpretByteArray(displayHex,Base64.getDecoder().decode(msg));\n          System.out.println(output);\n        }\n catch (        Exception e) {\n          System.out.println(msg);\n        }\n        numMessagesConsumed+=1;\n      }\n    }\n    consumerSocket.awaitClose(2,TimeUnit.SECONDS);\n  }\n catch (  Exception e) {\n    LOG.error(\"Error while consuming messages\");\n    LOG.error(e.getMessage(),e);\n    returnCode=-1;\n  }\n finally {\n    LOG.info(\"{} messages successfully consumed\",numMessagesConsumed);\n  }\n  return returnCode;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 401,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 366,
        "startColumnNumber" : 4,
        "endLineNumber" : 445,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"deprecation\") private int consumeFromWebSocket(String topic){\n  int numMessagesConsumed=0;\n  int returnCode=0;\n  TopicName topicName=TopicName.get(topic);\n  String wsTopic=String.format(\"%s/%s/\" + (StringUtils.isEmpty(topicName.getCluster()) ? \"\" : topicName.getCluster() + \"/\") + \"%s/%s/%s?subscriptionType=%s&subscriptionMode=%s\",topicName.getDomain(),topicName.getTenant(),topicName.getNamespacePortion(),topicName.getLocalName(),subscriptionName,subscriptionType.toString(),subscriptionMode.toString());\n  String consumerBaseUri=serviceURL + (serviceURL.endsWith(\"/\") ? \"\" : \"/\") + \"ws/consumer/\"+ wsTopic;\n  URI consumerUri=URI.create(consumerBaseUri);\n  WebSocketClient produceClient=new WebSocketClient(new SslContextFactory(true));\n  ClientUpgradeRequest produceRequest=new ClientUpgradeRequest();\n  try {\n    if (authentication != null) {\n      authentication.start();\n      AuthenticationDataProvider authData=authentication.getAuthData();\n      if (authData.hasDataForHttp()) {\n        for (        Map.Entry<String,String> kv : authData.getHttpHeaders()) {\n          produceRequest.setHeader(kv.getKey(),kv.getValue());\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    LOG.error(\"Authentication plugin error: \" + e.getMessage());\n    return -1;\n  }\n  CompletableFuture<Void> connected=new CompletableFuture<>();\n  ConsumerSocket consumerSocket=new ConsumerSocket(connected);\n  try {\n    produceClient.start();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to start websocket-client\",e);\n    return -1;\n  }\n  try {\n    LOG.info(\"Trying to create websocket session..{}\",consumerUri);\n    produceClient.connect(consumerSocket,consumerUri,produceRequest);\n    connected.get();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to create web-socket session\",e);\n    return -1;\n  }\n  try {\n    RateLimiter limiter=(this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n    while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n      if (limiter != null) {\n        limiter.acquire();\n      }\n      String msg=consumerSocket.receive(5,TimeUnit.SECONDS);\n      if (msg == null) {\n        LOG.debug(\"No message to consume after waiting for 5 seconds.\");\n      }\n else {\n        try {\n          String output=interpretByteArray(displayHex,Base64.getDecoder().decode(msg));\n          System.out.println(output);\n        }\n catch (        Exception e) {\n          System.out.println(msg);\n        }\n        numMessagesConsumed+=1;\n      }\n    }\n    consumerSocket.awaitClose(2,TimeUnit.SECONDS);\n  }\n catch (  Exception e) {\n    LOG.error(\"Error while consuming messages\");\n    LOG.error(e.getMessage(),e);\n    returnCode=-1;\n  }\n finally {\n    LOG.info(\"{} messages successfully consumed\",numMessagesConsumed);\n  }\n  return returnCode;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 412,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 403,
        "endColumnNumber" : 61
      },
      "nodeContext" : "LOG.error(\"Failed to start websocket-client\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Exception"
  }, {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 412,
      "startColumnNumber" : 61,
      "endLineNumber" : 412,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 412,
        "startColumnNumber" : 12,
        "endLineNumber" : 412,
        "endColumnNumber" : 63
      },
      "nodeContext" : "LOG.error(\"Failed to create web-socket session\",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 412,
        "startColumnNumber" : 12,
        "endLineNumber" : 412,
        "endColumnNumber" : 64
      },
      "nodeContext" : "LOG.error(\"Failed to create web-socket session\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 411,
        "startColumnNumber" : 30,
        "endLineNumber" : 414,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LOG.error(\"Failed to create web-socket session\",e);\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 411,
        "startColumnNumber" : 10,
        "endLineNumber" : 414,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  LOG.error(\"Failed to create web-socket session\",e);\n  return -1;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 320,
        "startLineNumber" : 407,
        "startColumnNumber" : 8,
        "endLineNumber" : 414,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  LOG.info(\"Trying to create websocket session..{}\",consumerUri);\n  produceClient.connect(consumerSocket,consumerUri,produceRequest);\n  connected.get();\n}\n catch (Exception e) {\n  LOG.error(\"Failed to create web-socket session\",e);\n  return -1;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3420,
        "startLineNumber" : 367,
        "startColumnNumber" : 51,
        "endLineNumber" : 445,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int numMessagesConsumed=0;\n  int returnCode=0;\n  TopicName topicName=TopicName.get(topic);\n  String wsTopic=String.format(\"%s/%s/\" + (StringUtils.isEmpty(topicName.getCluster()) ? \"\" : topicName.getCluster() + \"/\") + \"%s/%s/%s?subscriptionType=%s&subscriptionMode=%s\",topicName.getDomain(),topicName.getTenant(),topicName.getNamespacePortion(),topicName.getLocalName(),subscriptionName,subscriptionType.toString(),subscriptionMode.toString());\n  String consumerBaseUri=serviceURL + (serviceURL.endsWith(\"/\") ? \"\" : \"/\") + \"ws/consumer/\"+ wsTopic;\n  URI consumerUri=URI.create(consumerBaseUri);\n  WebSocketClient produceClient=new WebSocketClient(new SslContextFactory(true));\n  ClientUpgradeRequest produceRequest=new ClientUpgradeRequest();\n  try {\n    if (authentication != null) {\n      authentication.start();\n      AuthenticationDataProvider authData=authentication.getAuthData();\n      if (authData.hasDataForHttp()) {\n        for (        Map.Entry<String,String> kv : authData.getHttpHeaders()) {\n          produceRequest.setHeader(kv.getKey(),kv.getValue());\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    LOG.error(\"Authentication plugin error: \" + e.getMessage());\n    return -1;\n  }\n  CompletableFuture<Void> connected=new CompletableFuture<>();\n  ConsumerSocket consumerSocket=new ConsumerSocket(connected);\n  try {\n    produceClient.start();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to start websocket-client\",e);\n    return -1;\n  }\n  try {\n    LOG.info(\"Trying to create websocket session..{}\",consumerUri);\n    produceClient.connect(consumerSocket,consumerUri,produceRequest);\n    connected.get();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to create web-socket session\",e);\n    return -1;\n  }\n  try {\n    RateLimiter limiter=(this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n    while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n      if (limiter != null) {\n        limiter.acquire();\n      }\n      String msg=consumerSocket.receive(5,TimeUnit.SECONDS);\n      if (msg == null) {\n        LOG.debug(\"No message to consume after waiting for 5 seconds.\");\n      }\n else {\n        try {\n          String output=interpretByteArray(displayHex,Base64.getDecoder().decode(msg));\n          System.out.println(output);\n        }\n catch (        Exception e) {\n          System.out.println(msg);\n        }\n        numMessagesConsumed+=1;\n      }\n    }\n    consumerSocket.awaitClose(2,TimeUnit.SECONDS);\n  }\n catch (  Exception e) {\n    LOG.error(\"Error while consuming messages\");\n    LOG.error(e.getMessage(),e);\n    returnCode=-1;\n  }\n finally {\n    LOG.info(\"{} messages successfully consumed\",numMessagesConsumed);\n  }\n  return returnCode;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 401,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 366,
        "startColumnNumber" : 4,
        "endLineNumber" : 445,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"deprecation\") private int consumeFromWebSocket(String topic){\n  int numMessagesConsumed=0;\n  int returnCode=0;\n  TopicName topicName=TopicName.get(topic);\n  String wsTopic=String.format(\"%s/%s/\" + (StringUtils.isEmpty(topicName.getCluster()) ? \"\" : topicName.getCluster() + \"/\") + \"%s/%s/%s?subscriptionType=%s&subscriptionMode=%s\",topicName.getDomain(),topicName.getTenant(),topicName.getNamespacePortion(),topicName.getLocalName(),subscriptionName,subscriptionType.toString(),subscriptionMode.toString());\n  String consumerBaseUri=serviceURL + (serviceURL.endsWith(\"/\") ? \"\" : \"/\") + \"ws/consumer/\"+ wsTopic;\n  URI consumerUri=URI.create(consumerBaseUri);\n  WebSocketClient produceClient=new WebSocketClient(new SslContextFactory(true));\n  ClientUpgradeRequest produceRequest=new ClientUpgradeRequest();\n  try {\n    if (authentication != null) {\n      authentication.start();\n      AuthenticationDataProvider authData=authentication.getAuthData();\n      if (authData.hasDataForHttp()) {\n        for (        Map.Entry<String,String> kv : authData.getHttpHeaders()) {\n          produceRequest.setHeader(kv.getKey(),kv.getValue());\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    LOG.error(\"Authentication plugin error: \" + e.getMessage());\n    return -1;\n  }\n  CompletableFuture<Void> connected=new CompletableFuture<>();\n  ConsumerSocket consumerSocket=new ConsumerSocket(connected);\n  try {\n    produceClient.start();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to start websocket-client\",e);\n    return -1;\n  }\n  try {\n    LOG.info(\"Trying to create websocket session..{}\",consumerUri);\n    produceClient.connect(consumerSocket,consumerUri,produceRequest);\n    connected.get();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to create web-socket session\",e);\n    return -1;\n  }\n  try {\n    RateLimiter limiter=(this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n    while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n      if (limiter != null) {\n        limiter.acquire();\n      }\n      String msg=consumerSocket.receive(5,TimeUnit.SECONDS);\n      if (msg == null) {\n        LOG.debug(\"No message to consume after waiting for 5 seconds.\");\n      }\n else {\n        try {\n          String output=interpretByteArray(displayHex,Base64.getDecoder().decode(msg));\n          System.out.println(output);\n        }\n catch (        Exception e) {\n          System.out.println(msg);\n        }\n        numMessagesConsumed+=1;\n      }\n    }\n    consumerSocket.awaitClose(2,TimeUnit.SECONDS);\n  }\n catch (  Exception e) {\n    LOG.error(\"Error while consuming messages\");\n    LOG.error(e.getMessage(),e);\n    returnCode=-1;\n  }\n finally {\n    LOG.info(\"{} messages successfully consumed\",numMessagesConsumed);\n  }\n  return returnCode;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 412,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 412,
        "startColumnNumber" : 12,
        "endLineNumber" : 412,
        "endColumnNumber" : 64
      },
      "nodeContext" : "LOG.error(\"Failed to create web-socket session\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Exception"
  }, {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 438,
      "startColumnNumber" : 22,
      "endLineNumber" : 438,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 438,
        "startColumnNumber" : 22,
        "endLineNumber" : 438,
        "endColumnNumber" : 36
      },
      "nodeContext" : "e.getMessage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 438,
        "startColumnNumber" : 12,
        "endLineNumber" : 438,
        "endColumnNumber" : 40
      },
      "nodeContext" : "LOG.error(e.getMessage(),e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 438,
        "startColumnNumber" : 12,
        "endLineNumber" : 438,
        "endColumnNumber" : 41
      },
      "nodeContext" : "LOG.error(e.getMessage(),e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 436,
        "startColumnNumber" : 30,
        "endLineNumber" : 440,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LOG.error(\"Error while consuming messages\");\n  LOG.error(e.getMessage(),e);\n  returnCode=-1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 436,
        "startColumnNumber" : 10,
        "endLineNumber" : 440,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  LOG.error(\"Error while consuming messages\");\n  LOG.error(e.getMessage(),e);\n  returnCode=-1;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1250,
        "startLineNumber" : 416,
        "startColumnNumber" : 8,
        "endLineNumber" : 442,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  RateLimiter limiter=(this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n  while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n    if (limiter != null) {\n      limiter.acquire();\n    }\n    String msg=consumerSocket.receive(5,TimeUnit.SECONDS);\n    if (msg == null) {\n      LOG.debug(\"No message to consume after waiting for 5 seconds.\");\n    }\n else {\n      try {\n        String output=interpretByteArray(displayHex,Base64.getDecoder().decode(msg));\n        System.out.println(output);\n      }\n catch (      Exception e) {\n        System.out.println(msg);\n      }\n      numMessagesConsumed+=1;\n    }\n  }\n  consumerSocket.awaitClose(2,TimeUnit.SECONDS);\n}\n catch (Exception e) {\n  LOG.error(\"Error while consuming messages\");\n  LOG.error(e.getMessage(),e);\n  returnCode=-1;\n}\n finally {\n  LOG.info(\"{} messages successfully consumed\",numMessagesConsumed);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 145,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3420,
        "startLineNumber" : 367,
        "startColumnNumber" : 51,
        "endLineNumber" : 445,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int numMessagesConsumed=0;\n  int returnCode=0;\n  TopicName topicName=TopicName.get(topic);\n  String wsTopic=String.format(\"%s/%s/\" + (StringUtils.isEmpty(topicName.getCluster()) ? \"\" : topicName.getCluster() + \"/\") + \"%s/%s/%s?subscriptionType=%s&subscriptionMode=%s\",topicName.getDomain(),topicName.getTenant(),topicName.getNamespacePortion(),topicName.getLocalName(),subscriptionName,subscriptionType.toString(),subscriptionMode.toString());\n  String consumerBaseUri=serviceURL + (serviceURL.endsWith(\"/\") ? \"\" : \"/\") + \"ws/consumer/\"+ wsTopic;\n  URI consumerUri=URI.create(consumerBaseUri);\n  WebSocketClient produceClient=new WebSocketClient(new SslContextFactory(true));\n  ClientUpgradeRequest produceRequest=new ClientUpgradeRequest();\n  try {\n    if (authentication != null) {\n      authentication.start();\n      AuthenticationDataProvider authData=authentication.getAuthData();\n      if (authData.hasDataForHttp()) {\n        for (        Map.Entry<String,String> kv : authData.getHttpHeaders()) {\n          produceRequest.setHeader(kv.getKey(),kv.getValue());\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    LOG.error(\"Authentication plugin error: \" + e.getMessage());\n    return -1;\n  }\n  CompletableFuture<Void> connected=new CompletableFuture<>();\n  ConsumerSocket consumerSocket=new ConsumerSocket(connected);\n  try {\n    produceClient.start();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to start websocket-client\",e);\n    return -1;\n  }\n  try {\n    LOG.info(\"Trying to create websocket session..{}\",consumerUri);\n    produceClient.connect(consumerSocket,consumerUri,produceRequest);\n    connected.get();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to create web-socket session\",e);\n    return -1;\n  }\n  try {\n    RateLimiter limiter=(this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n    while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n      if (limiter != null) {\n        limiter.acquire();\n      }\n      String msg=consumerSocket.receive(5,TimeUnit.SECONDS);\n      if (msg == null) {\n        LOG.debug(\"No message to consume after waiting for 5 seconds.\");\n      }\n else {\n        try {\n          String output=interpretByteArray(displayHex,Base64.getDecoder().decode(msg));\n          System.out.println(output);\n        }\n catch (        Exception e) {\n          System.out.println(msg);\n        }\n        numMessagesConsumed+=1;\n      }\n    }\n    consumerSocket.awaitClose(2,TimeUnit.SECONDS);\n  }\n catch (  Exception e) {\n    LOG.error(\"Error while consuming messages\");\n    LOG.error(e.getMessage(),e);\n    returnCode=-1;\n  }\n finally {\n    LOG.info(\"{} messages successfully consumed\",numMessagesConsumed);\n  }\n  return returnCode;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 401,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 366,
        "startColumnNumber" : 4,
        "endLineNumber" : 445,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"deprecation\") private int consumeFromWebSocket(String topic){\n  int numMessagesConsumed=0;\n  int returnCode=0;\n  TopicName topicName=TopicName.get(topic);\n  String wsTopic=String.format(\"%s/%s/\" + (StringUtils.isEmpty(topicName.getCluster()) ? \"\" : topicName.getCluster() + \"/\") + \"%s/%s/%s?subscriptionType=%s&subscriptionMode=%s\",topicName.getDomain(),topicName.getTenant(),topicName.getNamespacePortion(),topicName.getLocalName(),subscriptionName,subscriptionType.toString(),subscriptionMode.toString());\n  String consumerBaseUri=serviceURL + (serviceURL.endsWith(\"/\") ? \"\" : \"/\") + \"ws/consumer/\"+ wsTopic;\n  URI consumerUri=URI.create(consumerBaseUri);\n  WebSocketClient produceClient=new WebSocketClient(new SslContextFactory(true));\n  ClientUpgradeRequest produceRequest=new ClientUpgradeRequest();\n  try {\n    if (authentication != null) {\n      authentication.start();\n      AuthenticationDataProvider authData=authentication.getAuthData();\n      if (authData.hasDataForHttp()) {\n        for (        Map.Entry<String,String> kv : authData.getHttpHeaders()) {\n          produceRequest.setHeader(kv.getKey(),kv.getValue());\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    LOG.error(\"Authentication plugin error: \" + e.getMessage());\n    return -1;\n  }\n  CompletableFuture<Void> connected=new CompletableFuture<>();\n  ConsumerSocket consumerSocket=new ConsumerSocket(connected);\n  try {\n    produceClient.start();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to start websocket-client\",e);\n    return -1;\n  }\n  try {\n    LOG.info(\"Trying to create websocket session..{}\",consumerUri);\n    produceClient.connect(consumerSocket,consumerUri,produceRequest);\n    connected.get();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to create web-socket session\",e);\n    return -1;\n  }\n  try {\n    RateLimiter limiter=(this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n    while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n      if (limiter != null) {\n        limiter.acquire();\n      }\n      String msg=consumerSocket.receive(5,TimeUnit.SECONDS);\n      if (msg == null) {\n        LOG.debug(\"No message to consume after waiting for 5 seconds.\");\n      }\n else {\n        try {\n          String output=interpretByteArray(displayHex,Base64.getDecoder().decode(msg));\n          System.out.println(output);\n        }\n catch (        Exception e) {\n          System.out.println(msg);\n        }\n        numMessagesConsumed+=1;\n      }\n    }\n    consumerSocket.awaitClose(2,TimeUnit.SECONDS);\n  }\n catch (  Exception e) {\n    LOG.error(\"Error while consuming messages\");\n    LOG.error(e.getMessage(),e);\n    returnCode=-1;\n  }\n finally {\n    LOG.info(\"{} messages successfully consumed\",numMessagesConsumed);\n  }\n  return returnCode;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 412,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 438,
        "startColumnNumber" : 12,
        "endLineNumber" : 438,
        "endColumnNumber" : 41
      },
      "nodeContext" : "LOG.error(e.getMessage(),e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Exception"
  }, {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 438,
      "startColumnNumber" : 38,
      "endLineNumber" : 438,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 438,
        "startColumnNumber" : 12,
        "endLineNumber" : 438,
        "endColumnNumber" : 40
      },
      "nodeContext" : "LOG.error(e.getMessage(),e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 438,
        "startColumnNumber" : 12,
        "endLineNumber" : 438,
        "endColumnNumber" : 41
      },
      "nodeContext" : "LOG.error(e.getMessage(),e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 436,
        "startColumnNumber" : 30,
        "endLineNumber" : 440,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LOG.error(\"Error while consuming messages\");\n  LOG.error(e.getMessage(),e);\n  returnCode=-1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 436,
        "startColumnNumber" : 10,
        "endLineNumber" : 440,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  LOG.error(\"Error while consuming messages\");\n  LOG.error(e.getMessage(),e);\n  returnCode=-1;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1250,
        "startLineNumber" : 416,
        "startColumnNumber" : 8,
        "endLineNumber" : 442,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  RateLimiter limiter=(this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n  while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n    if (limiter != null) {\n      limiter.acquire();\n    }\n    String msg=consumerSocket.receive(5,TimeUnit.SECONDS);\n    if (msg == null) {\n      LOG.debug(\"No message to consume after waiting for 5 seconds.\");\n    }\n else {\n      try {\n        String output=interpretByteArray(displayHex,Base64.getDecoder().decode(msg));\n        System.out.println(output);\n      }\n catch (      Exception e) {\n        System.out.println(msg);\n      }\n      numMessagesConsumed+=1;\n    }\n  }\n  consumerSocket.awaitClose(2,TimeUnit.SECONDS);\n}\n catch (Exception e) {\n  LOG.error(\"Error while consuming messages\");\n  LOG.error(e.getMessage(),e);\n  returnCode=-1;\n}\n finally {\n  LOG.info(\"{} messages successfully consumed\",numMessagesConsumed);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 145,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3420,
        "startLineNumber" : 367,
        "startColumnNumber" : 51,
        "endLineNumber" : 445,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int numMessagesConsumed=0;\n  int returnCode=0;\n  TopicName topicName=TopicName.get(topic);\n  String wsTopic=String.format(\"%s/%s/\" + (StringUtils.isEmpty(topicName.getCluster()) ? \"\" : topicName.getCluster() + \"/\") + \"%s/%s/%s?subscriptionType=%s&subscriptionMode=%s\",topicName.getDomain(),topicName.getTenant(),topicName.getNamespacePortion(),topicName.getLocalName(),subscriptionName,subscriptionType.toString(),subscriptionMode.toString());\n  String consumerBaseUri=serviceURL + (serviceURL.endsWith(\"/\") ? \"\" : \"/\") + \"ws/consumer/\"+ wsTopic;\n  URI consumerUri=URI.create(consumerBaseUri);\n  WebSocketClient produceClient=new WebSocketClient(new SslContextFactory(true));\n  ClientUpgradeRequest produceRequest=new ClientUpgradeRequest();\n  try {\n    if (authentication != null) {\n      authentication.start();\n      AuthenticationDataProvider authData=authentication.getAuthData();\n      if (authData.hasDataForHttp()) {\n        for (        Map.Entry<String,String> kv : authData.getHttpHeaders()) {\n          produceRequest.setHeader(kv.getKey(),kv.getValue());\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    LOG.error(\"Authentication plugin error: \" + e.getMessage());\n    return -1;\n  }\n  CompletableFuture<Void> connected=new CompletableFuture<>();\n  ConsumerSocket consumerSocket=new ConsumerSocket(connected);\n  try {\n    produceClient.start();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to start websocket-client\",e);\n    return -1;\n  }\n  try {\n    LOG.info(\"Trying to create websocket session..{}\",consumerUri);\n    produceClient.connect(consumerSocket,consumerUri,produceRequest);\n    connected.get();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to create web-socket session\",e);\n    return -1;\n  }\n  try {\n    RateLimiter limiter=(this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n    while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n      if (limiter != null) {\n        limiter.acquire();\n      }\n      String msg=consumerSocket.receive(5,TimeUnit.SECONDS);\n      if (msg == null) {\n        LOG.debug(\"No message to consume after waiting for 5 seconds.\");\n      }\n else {\n        try {\n          String output=interpretByteArray(displayHex,Base64.getDecoder().decode(msg));\n          System.out.println(output);\n        }\n catch (        Exception e) {\n          System.out.println(msg);\n        }\n        numMessagesConsumed+=1;\n      }\n    }\n    consumerSocket.awaitClose(2,TimeUnit.SECONDS);\n  }\n catch (  Exception e) {\n    LOG.error(\"Error while consuming messages\");\n    LOG.error(e.getMessage(),e);\n    returnCode=-1;\n  }\n finally {\n    LOG.info(\"{} messages successfully consumed\",numMessagesConsumed);\n  }\n  return returnCode;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 401,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 366,
        "startColumnNumber" : 4,
        "endLineNumber" : 445,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"deprecation\") private int consumeFromWebSocket(String topic){\n  int numMessagesConsumed=0;\n  int returnCode=0;\n  TopicName topicName=TopicName.get(topic);\n  String wsTopic=String.format(\"%s/%s/\" + (StringUtils.isEmpty(topicName.getCluster()) ? \"\" : topicName.getCluster() + \"/\") + \"%s/%s/%s?subscriptionType=%s&subscriptionMode=%s\",topicName.getDomain(),topicName.getTenant(),topicName.getNamespacePortion(),topicName.getLocalName(),subscriptionName,subscriptionType.toString(),subscriptionMode.toString());\n  String consumerBaseUri=serviceURL + (serviceURL.endsWith(\"/\") ? \"\" : \"/\") + \"ws/consumer/\"+ wsTopic;\n  URI consumerUri=URI.create(consumerBaseUri);\n  WebSocketClient produceClient=new WebSocketClient(new SslContextFactory(true));\n  ClientUpgradeRequest produceRequest=new ClientUpgradeRequest();\n  try {\n    if (authentication != null) {\n      authentication.start();\n      AuthenticationDataProvider authData=authentication.getAuthData();\n      if (authData.hasDataForHttp()) {\n        for (        Map.Entry<String,String> kv : authData.getHttpHeaders()) {\n          produceRequest.setHeader(kv.getKey(),kv.getValue());\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    LOG.error(\"Authentication plugin error: \" + e.getMessage());\n    return -1;\n  }\n  CompletableFuture<Void> connected=new CompletableFuture<>();\n  ConsumerSocket consumerSocket=new ConsumerSocket(connected);\n  try {\n    produceClient.start();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to start websocket-client\",e);\n    return -1;\n  }\n  try {\n    LOG.info(\"Trying to create websocket session..{}\",consumerUri);\n    produceClient.connect(consumerSocket,consumerUri,produceRequest);\n    connected.get();\n  }\n catch (  Exception e) {\n    LOG.error(\"Failed to create web-socket session\",e);\n    return -1;\n  }\n  try {\n    RateLimiter limiter=(this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n    while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n      if (limiter != null) {\n        limiter.acquire();\n      }\n      String msg=consumerSocket.receive(5,TimeUnit.SECONDS);\n      if (msg == null) {\n        LOG.debug(\"No message to consume after waiting for 5 seconds.\");\n      }\n else {\n        try {\n          String output=interpretByteArray(displayHex,Base64.getDecoder().decode(msg));\n          System.out.println(output);\n        }\n catch (        Exception e) {\n          System.out.println(msg);\n        }\n        numMessagesConsumed+=1;\n      }\n    }\n    consumerSocket.awaitClose(2,TimeUnit.SECONDS);\n  }\n catch (  Exception e) {\n    LOG.error(\"Error while consuming messages\");\n    LOG.error(e.getMessage(),e);\n    returnCode=-1;\n  }\n finally {\n    LOG.info(\"{} messages successfully consumed\",numMessagesConsumed);\n  }\n  return returnCode;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 412,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 438,
        "startColumnNumber" : 12,
        "endLineNumber" : 438,
        "endColumnNumber" : 41
      },
      "nodeContext" : "LOG.error(e.getMessage(),e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Exception"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 395,
    "startColumnNumber" : 56,
    "endLineNumber" : 395,
    "endColumnNumber" : 57
  }, {
    "charLength" : 1,
    "startLineNumber" : 403,
    "startColumnNumber" : 58,
    "endLineNumber" : 403,
    "endColumnNumber" : 59
  }, {
    "charLength" : 1,
    "startLineNumber" : 412,
    "startColumnNumber" : 61,
    "endLineNumber" : 412,
    "endColumnNumber" : 62
  }, {
    "charLength" : 1,
    "startLineNumber" : 438,
    "startColumnNumber" : 22,
    "endLineNumber" : 438,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 438,
    "startColumnNumber" : 38,
    "endLineNumber" : 438,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 0
  } ]
}