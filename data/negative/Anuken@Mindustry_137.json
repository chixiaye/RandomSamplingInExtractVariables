{
  "id" : 137,
  "expression" : "ai.itemTimer > 0",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "6807b589a333a4204e542f811dfdf2cc82d0a8d4",
  "filePath" : "core/src/mindustry/logic/LExecutor.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ai.itemTimer > 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 457,
      "startColumnNumber" : 27,
      "endLineNumber" : 457,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 457,
        "startColumnNumber" : 24,
        "endLineNumber" : 457,
        "endColumnNumber" : 52
      },
      "nodeContext" : "if (ai.itemTimer > 0) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 735,
        "startLineNumber" : 456,
        "startColumnNumber" : 37,
        "endLineNumber" : 469,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (ai.itemTimer > 0)   return;\n  Building build=exec.building(p1);\n  int amount=exec.numi(p2);\n  int dropped=Math.min(unit.stack.amount,amount);\n  if (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\n    int accepted=build.acceptStack(unit.item(),dropped,unit);\n    if (accepted > 0) {\n      Call.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\n      ai.itemTimer=LogicAI.transferDelay;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 457,
        "startColumnNumber" : 24,
        "endLineNumber" : 457,
        "endColumnNumber" : 52
      },
      "nodeContext" : "if (ai.itemTimer > 0) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  }, {
    "nodeContext" : "ai.itemTimer > 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 471,
      "startColumnNumber" : 27,
      "endLineNumber" : 471,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 471,
        "startColumnNumber" : 24,
        "endLineNumber" : 471,
        "endColumnNumber" : 52
      },
      "nodeContext" : "if (ai.itemTimer > 0) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 675,
        "startLineNumber" : 470,
        "startColumnNumber" : 37,
        "endLineNumber" : 484,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (ai.itemTimer > 0)   return;\n  Building build=exec.building(p1);\n  int amount=exec.numi(p3);\n  if (build != null && exec.obj(p2) instanceof   Item item && unit.within(build,logicItemTransferRange)) {\n    int taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\n    if (taken > 0) {\n      Call.takeItems(build,item,taken,unit);\n      ai.itemTimer=LogicAI.transferDelay;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 471,
        "startColumnNumber" : 24,
        "endLineNumber" : 471,
        "endColumnNumber" : 52
      },
      "nodeContext" : "if (ai.itemTimer > 0) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 457,
    "startColumnNumber" : 27,
    "endLineNumber" : 457,
    "endColumnNumber" : 43
  }, {
    "charLength" : 16,
    "startLineNumber" : 471,
    "startColumnNumber" : 27,
    "endLineNumber" : 471,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}