{
  "id" : 251,
  "expression" : "getSimpleTypeName(argumentType)",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/examples/android-proguard-example/src/com/google/gson/examples/android/model/Cart.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "getSimpleTypeName(argumentType)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 98,
      "startColumnNumber" : 18,
      "endLineNumber" : 98,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 50
      },
      "nodeContext" : "sb.append(getSimpleTypeName(argumentType))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 51
      },
      "nodeContext" : "sb.append(getSimpleTypeName(argumentType));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 92,
        "startColumnNumber" : 63,
        "endLineNumber" : 99,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (first) {\n    first=false;\n  }\n else {\n    sb.append(',');\n  }\n  sb.append(getSimpleTypeName(argumentType));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 92,
        "startColumnNumber" : 6,
        "endLineNumber" : 99,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Type argumentType : pType.getActualTypeArguments()) {\n  if (first) {\n    first=false;\n  }\n else {\n    sb.append(',');\n  }\n  sb.append(getSimpleTypeName(argumentType));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 472,
        "startLineNumber" : 87,
        "startColumnNumber" : 50,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ParameterizedType pType=(ParameterizedType)type;\n  StringBuilder sb=new StringBuilder(getSimpleTypeName(pType.getRawType()));\n  sb.append('<');\n  boolean first=true;\n  for (  Type argumentType : pType.getActualTypeArguments()) {\n    if (first) {\n      first=false;\n    }\n else {\n      sb.append(',');\n    }\n    sb.append(getSimpleTypeName(argumentType));\n  }\n  sb.append('>');\n  return sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 576,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (type instanceof ParameterizedType) {\n  ParameterizedType pType=(ParameterizedType)type;\n  StringBuilder sb=new StringBuilder(getSimpleTypeName(pType.getRawType()));\n  sb.append('<');\n  boolean first=true;\n  for (  Type argumentType : pType.getActualTypeArguments()) {\n    if (first) {\n      first=false;\n    }\n else {\n      sb.append(',');\n    }\n    sb.append(getSimpleTypeName(argumentType));\n  }\n  sb.append('>');\n  return sb.toString();\n}\n else if (type instanceof WildcardType) {\n  return \"?\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 84,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 660,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (type instanceof Class) {\n  return ((Class)type).getSimpleName();\n}\n else if (type instanceof ParameterizedType) {\n  ParameterizedType pType=(ParameterizedType)type;\n  StringBuilder sb=new StringBuilder(getSimpleTypeName(pType.getRawType()));\n  sb.append('<');\n  boolean first=true;\n  for (  Type argumentType : pType.getActualTypeArguments()) {\n    if (first) {\n      first=false;\n    }\n else {\n      sb.append(',');\n    }\n    sb.append(getSimpleTypeName(argumentType));\n  }\n  sb.append('>');\n  return sb.toString();\n}\n else if (type instanceof WildcardType) {\n  return \"?\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 98,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 749,
        "startLineNumber" : 81,
        "startColumnNumber" : 52,
        "endLineNumber" : 106,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (type == null) {\n    return \"null\";\n  }\n  if (type instanceof Class) {\n    return ((Class)type).getSimpleName();\n  }\n else   if (type instanceof ParameterizedType) {\n    ParameterizedType pType=(ParameterizedType)type;\n    StringBuilder sb=new StringBuilder(getSimpleTypeName(pType.getRawType()));\n    sb.append('<');\n    boolean first=true;\n    for (    Type argumentType : pType.getActualTypeArguments()) {\n      if (first) {\n        first=false;\n      }\n else {\n        sb.append(',');\n      }\n      sb.append(getSimpleTypeName(argumentType));\n    }\n    sb.append('>');\n    return sb.toString();\n  }\n else   if (type instanceof WildcardType) {\n    return \"?\";\n  }\n  return type.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 832,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 106,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") public static String getSimpleTypeName(Type type){\n  if (type == null) {\n    return \"null\";\n  }\n  if (type instanceof Class) {\n    return ((Class)type).getSimpleName();\n  }\n else   if (type instanceof ParameterizedType) {\n    ParameterizedType pType=(ParameterizedType)type;\n    StringBuilder sb=new StringBuilder(getSimpleTypeName(pType.getRawType()));\n    sb.append('<');\n    boolean first=true;\n    for (    Type argumentType : pType.getActualTypeArguments()) {\n      if (first) {\n        first=false;\n      }\n else {\n        sb.append(',');\n      }\n      sb.append(getSimpleTypeName(argumentType));\n    }\n    sb.append('>');\n    return sb.toString();\n  }\n else   if (type instanceof WildcardType) {\n    return \"?\";\n  }\n  return type.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 123,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 51
      },
      "nodeContext" : "sb.append(getSimpleTypeName(argumentType));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 98,
    "startColumnNumber" : 18,
    "endLineNumber" : 98,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}