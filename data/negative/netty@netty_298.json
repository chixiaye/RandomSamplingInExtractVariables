{
  "id" : 298,
  "expression" : "CodecOutputList.newInstance()",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec/src/main/java/io/netty/handler/codec/MessageToMessageEncoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "CodecOutputList.newInstance()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 86,
      "startColumnNumber" : 22,
      "endLineNumber" : 86,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 86,
        "startColumnNumber" : 16,
        "endLineNumber" : 86,
        "endColumnNumber" : 51
      },
      "nodeContext" : "out=CodecOutputList.newInstance()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 86,
        "startColumnNumber" : 16,
        "endLineNumber" : 86,
        "endColumnNumber" : 52
      },
      "nodeContext" : "out=CodecOutputList.newInstance();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1046,
        "startLineNumber" : 85,
        "startColumnNumber" : 44,
        "endLineNumber" : 110,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  out=CodecOutputList.newInstance();\n  @SuppressWarnings(\"unchecked\") I cast=(I)msg;\n  Promise<Void> promise=ctx.newPromise();\n  try {\n    try {\n      encode(ctx,cast,out);\n    }\n  finally {\n      ReferenceCountUtil.release(cast);\n    }\n    if (out.isEmpty()) {\n      throw new EncoderException(StringUtil.simpleClassName(this) + \" must produce at least one message.\");\n    }\n  }\n  finally {\n    final int sizeMinusOne=out.size() - 1;\n    if (sizeMinusOne == 0) {\n      ctx.write(out.getUnsafe(0)).cascadeTo(promise);\n    }\n else {\n      writePromiseCombiner(ctx,out,promise);\n    }\n  }\n  return promise.asFuture();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1140,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (acceptOutboundMessage(msg)) {\n  out=CodecOutputList.newInstance();\n  @SuppressWarnings(\"unchecked\") I cast=(I)msg;\n  Promise<Void> promise=ctx.newPromise();\n  try {\n    try {\n      encode(ctx,cast,out);\n    }\n  finally {\n      ReferenceCountUtil.release(cast);\n    }\n    if (out.isEmpty()) {\n      throw new EncoderException(StringUtil.simpleClassName(this) + \" must produce at least one message.\");\n    }\n  }\n  finally {\n    final int sizeMinusOne=out.size() - 1;\n    if (sizeMinusOne == 0) {\n      ctx.write(out.getUnsafe(0)).cascadeTo(promise);\n    }\n else {\n      writePromiseCombiner(ctx,out,promise);\n    }\n  }\n  return promise.asFuture();\n}\n else {\n  return ctx.write(msg);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 109,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1166,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (acceptOutboundMessage(msg)) {\n    out=CodecOutputList.newInstance();\n    @SuppressWarnings(\"unchecked\") I cast=(I)msg;\n    Promise<Void> promise=ctx.newPromise();\n    try {\n      try {\n        encode(ctx,cast,out);\n      }\n  finally {\n        ReferenceCountUtil.release(cast);\n      }\n      if (out.isEmpty()) {\n        throw new EncoderException(StringUtil.simpleClassName(this) + \" must produce at least one message.\");\n      }\n    }\n  finally {\n      final int sizeMinusOne=out.size() - 1;\n      if (sizeMinusOne == 0) {\n        ctx.write(out.getUnsafe(0)).cascadeTo(promise);\n      }\n else {\n        writePromiseCombiner(ctx,out,promise);\n      }\n    }\n    return promise.asFuture();\n  }\n else {\n    return ctx.write(msg);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1453,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (acceptOutboundMessage(msg)) {\n    out=CodecOutputList.newInstance();\n    @SuppressWarnings(\"unchecked\") I cast=(I)msg;\n    Promise<Void> promise=ctx.newPromise();\n    try {\n      try {\n        encode(ctx,cast,out);\n      }\n  finally {\n        ReferenceCountUtil.release(cast);\n      }\n      if (out.isEmpty()) {\n        throw new EncoderException(StringUtil.simpleClassName(this) + \" must produce at least one message.\");\n      }\n    }\n  finally {\n      final int sizeMinusOne=out.size() - 1;\n      if (sizeMinusOne == 0) {\n        ctx.write(out.getUnsafe(0)).cascadeTo(promise);\n      }\n else {\n        writePromiseCombiner(ctx,out,promise);\n      }\n    }\n    return promise.asFuture();\n  }\n else {\n    return ctx.write(msg);\n  }\n}\n catch (EncoderException e) {\n  return ctx.newFailedFuture(e);\n}\ncatch (Throwable t) {\n  return ctx.newFailedFuture(new EncoderException(t));\n}\n finally {\n  if (out != null) {\n    out.recycle();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 146,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1508,
        "startLineNumber" : 82,
        "startColumnNumber" : 69,
        "endLineNumber" : 122,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  CodecOutputList out=null;\n  try {\n    if (acceptOutboundMessage(msg)) {\n      out=CodecOutputList.newInstance();\n      @SuppressWarnings(\"unchecked\") I cast=(I)msg;\n      Promise<Void> promise=ctx.newPromise();\n      try {\n        try {\n          encode(ctx,cast,out);\n        }\n  finally {\n          ReferenceCountUtil.release(cast);\n        }\n        if (out.isEmpty()) {\n          throw new EncoderException(StringUtil.simpleClassName(this) + \" must produce at least one message.\");\n        }\n      }\n  finally {\n        final int sizeMinusOne=out.size() - 1;\n        if (sizeMinusOne == 0) {\n          ctx.write(out.getUnsafe(0)).cascadeTo(promise);\n        }\n else {\n          writePromiseCombiner(ctx,out,promise);\n        }\n      }\n      return promise.asFuture();\n    }\n else {\n      return ctx.write(msg);\n    }\n  }\n catch (  EncoderException e) {\n    return ctx.newFailedFuture(e);\n  }\ncatch (  Throwable t) {\n    return ctx.newFailedFuture(new EncoderException(t));\n  }\n finally {\n    if (out != null) {\n      out.recycle();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1588,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Future<Void> write(ChannelHandlerContext ctx,Object msg){\n  CodecOutputList out=null;\n  try {\n    if (acceptOutboundMessage(msg)) {\n      out=CodecOutputList.newInstance();\n      @SuppressWarnings(\"unchecked\") I cast=(I)msg;\n      Promise<Void> promise=ctx.newPromise();\n      try {\n        try {\n          encode(ctx,cast,out);\n        }\n  finally {\n          ReferenceCountUtil.release(cast);\n        }\n        if (out.isEmpty()) {\n          throw new EncoderException(StringUtil.simpleClassName(this) + \" must produce at least one message.\");\n        }\n      }\n  finally {\n        final int sizeMinusOne=out.size() - 1;\n        if (sizeMinusOne == 0) {\n          ctx.write(out.getUnsafe(0)).cascadeTo(promise);\n        }\n else {\n          writePromiseCombiner(ctx,out,promise);\n        }\n      }\n      return promise.asFuture();\n    }\n else {\n      return ctx.write(msg);\n    }\n  }\n catch (  EncoderException e) {\n    return ctx.newFailedFuture(e);\n  }\ncatch (  Throwable t) {\n    return ctx.newFailedFuture(new EncoderException(t));\n  }\n finally {\n    if (out != null) {\n      out.recycle();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 86,
        "startColumnNumber" : 16,
        "endLineNumber" : 86,
        "endColumnNumber" : 52
      },
      "nodeContext" : "out=CodecOutputList.newInstance();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "io.netty.handler.codec.CodecOutputList"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 86,
    "startColumnNumber" : 22,
    "endLineNumber" : 86,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}