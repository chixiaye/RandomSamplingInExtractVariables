{
  "id" : 375,
  "expression" : "config.getMaxConnections()",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/sql/src/main/java/org/apache/druid/sql/avatica/DruidMeta.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "config.getMaxConnections()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 533,
      "startColumnNumber" : 44,
      "endLineNumber" : 533,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 533,
        "startColumnNumber" : 8,
        "endLineNumber" : 533,
        "endColumnNumber" : 70
      },
      "nodeContext" : "connectionCount.incrementAndGet() > config.getMaxConnections()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 956,
        "startLineNumber" : 533,
        "startColumnNumber" : 4,
        "endLineNumber" : 553,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (connectionCount.incrementAndGet() > config.getMaxConnections()) {\n  final Iterator<Map.Entry<String,DruidConnection>> entryIterator=connections.entrySet().iterator();\n  while (entryIterator.hasNext()) {\n    final Map.Entry<String,DruidConnection> entry=entryIterator.next();\n    if (entry.getValue().closeIfEmpty()) {\n      entryIterator.remove();\n      connectionCount.decrementAndGet();\n      break;\n    }\n  }\n  if (connectionCount.get() > config.getMaxConnections()) {\n    connectionCount.decrementAndGet();\n    throw new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1503,
        "startLineNumber" : 532,
        "startColumnNumber" : 2,
        "endLineNumber" : 570,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (connectionCount.incrementAndGet() > config.getMaxConnections()) {\n    final Iterator<Map.Entry<String,DruidConnection>> entryIterator=connections.entrySet().iterator();\n    while (entryIterator.hasNext()) {\n      final Map.Entry<String,DruidConnection> entry=entryIterator.next();\n      if (entry.getValue().closeIfEmpty()) {\n        entryIterator.remove();\n        connectionCount.decrementAndGet();\n        break;\n      }\n    }\n    if (connectionCount.get() > config.getMaxConnections()) {\n      connectionCount.decrementAndGet();\n      throw new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections());\n    }\n  }\n  final DruidConnection putResult=connections.putIfAbsent(connectionId,new DruidConnection(connectionId,config.getMaxStatementsPerConnection(),context));\n  if (putResult != null) {\n    connectionCount.decrementAndGet();\n    throw new ISE(\"Connection[%s] already open.\",connectionId);\n  }\n  log.debug(\"Connection[%s] opened.\",connectionId);\n  return getDruidConnection(connectionId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 531,
        "startColumnNumber" : 2,
        "endLineNumber" : 570,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private DruidConnection openDruidConnection(final String connectionId,final Map<String,Object> context){\n  if (connectionCount.incrementAndGet() > config.getMaxConnections()) {\n    final Iterator<Map.Entry<String,DruidConnection>> entryIterator=connections.entrySet().iterator();\n    while (entryIterator.hasNext()) {\n      final Map.Entry<String,DruidConnection> entry=entryIterator.next();\n      if (entry.getValue().closeIfEmpty()) {\n        entryIterator.remove();\n        connectionCount.decrementAndGet();\n        break;\n      }\n    }\n    if (connectionCount.get() > config.getMaxConnections()) {\n      connectionCount.decrementAndGet();\n      throw new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections());\n    }\n  }\n  final DruidConnection putResult=connections.putIfAbsent(connectionId,new DruidConnection(connectionId,config.getMaxStatementsPerConnection(),context));\n  if (putResult != null) {\n    connectionCount.decrementAndGet();\n    throw new ISE(\"Connection[%s] already open.\",connectionId);\n  }\n  log.debug(\"Connection[%s] opened.\",connectionId);\n  return getDruidConnection(connectionId);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 533,
        "startColumnNumber" : 8,
        "endLineNumber" : 533,
        "endColumnNumber" : 70
      },
      "nodeContext" : "connectionCount.incrementAndGet() > config.getMaxConnections()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "config.getMaxConnections()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 548,
      "startColumnNumber" : 34,
      "endLineNumber" : 548,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 548,
        "startColumnNumber" : 10,
        "endLineNumber" : 548,
        "endColumnNumber" : 60
      },
      "nodeContext" : "connectionCount.get() > config.getMaxConnections()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 548,
        "startColumnNumber" : 6,
        "endLineNumber" : 552,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (connectionCount.get() > config.getMaxConnections()) {\n  connectionCount.decrementAndGet();\n  throw new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 888,
        "startLineNumber" : 533,
        "startColumnNumber" : 72,
        "endLineNumber" : 553,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Iterator<Map.Entry<String,DruidConnection>> entryIterator=connections.entrySet().iterator();\n  while (entryIterator.hasNext()) {\n    final Map.Entry<String,DruidConnection> entry=entryIterator.next();\n    if (entry.getValue().closeIfEmpty()) {\n      entryIterator.remove();\n      connectionCount.decrementAndGet();\n      break;\n    }\n  }\n  if (connectionCount.get() > config.getMaxConnections()) {\n    connectionCount.decrementAndGet();\n    throw new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 80,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 956,
        "startLineNumber" : 533,
        "startColumnNumber" : 4,
        "endLineNumber" : 553,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (connectionCount.incrementAndGet() > config.getMaxConnections()) {\n  final Iterator<Map.Entry<String,DruidConnection>> entryIterator=connections.entrySet().iterator();\n  while (entryIterator.hasNext()) {\n    final Map.Entry<String,DruidConnection> entry=entryIterator.next();\n    if (entry.getValue().closeIfEmpty()) {\n      entryIterator.remove();\n      connectionCount.decrementAndGet();\n      break;\n    }\n  }\n  if (connectionCount.get() > config.getMaxConnections()) {\n    connectionCount.decrementAndGet();\n    throw new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1503,
        "startLineNumber" : 532,
        "startColumnNumber" : 2,
        "endLineNumber" : 570,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (connectionCount.incrementAndGet() > config.getMaxConnections()) {\n    final Iterator<Map.Entry<String,DruidConnection>> entryIterator=connections.entrySet().iterator();\n    while (entryIterator.hasNext()) {\n      final Map.Entry<String,DruidConnection> entry=entryIterator.next();\n      if (entry.getValue().closeIfEmpty()) {\n        entryIterator.remove();\n        connectionCount.decrementAndGet();\n        break;\n      }\n    }\n    if (connectionCount.get() > config.getMaxConnections()) {\n      connectionCount.decrementAndGet();\n      throw new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections());\n    }\n  }\n  final DruidConnection putResult=connections.putIfAbsent(connectionId,new DruidConnection(connectionId,config.getMaxStatementsPerConnection(),context));\n  if (putResult != null) {\n    connectionCount.decrementAndGet();\n    throw new ISE(\"Connection[%s] already open.\",connectionId);\n  }\n  log.debug(\"Connection[%s] opened.\",connectionId);\n  return getDruidConnection(connectionId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 531,
        "startColumnNumber" : 2,
        "endLineNumber" : 570,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private DruidConnection openDruidConnection(final String connectionId,final Map<String,Object> context){\n  if (connectionCount.incrementAndGet() > config.getMaxConnections()) {\n    final Iterator<Map.Entry<String,DruidConnection>> entryIterator=connections.entrySet().iterator();\n    while (entryIterator.hasNext()) {\n      final Map.Entry<String,DruidConnection> entry=entryIterator.next();\n      if (entry.getValue().closeIfEmpty()) {\n        entryIterator.remove();\n        connectionCount.decrementAndGet();\n        break;\n      }\n    }\n    if (connectionCount.get() > config.getMaxConnections()) {\n      connectionCount.decrementAndGet();\n      throw new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections());\n    }\n  }\n  final DruidConnection putResult=connections.putIfAbsent(connectionId,new DruidConnection(connectionId,config.getMaxStatementsPerConnection(),context));\n  if (putResult != null) {\n    connectionCount.decrementAndGet();\n    throw new ISE(\"Connection[%s] already open.\",connectionId);\n  }\n  log.debug(\"Connection[%s] opened.\",connectionId);\n  return getDruidConnection(connectionId);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 548,
        "startColumnNumber" : 10,
        "endLineNumber" : 548,
        "endColumnNumber" : 60
      },
      "nodeContext" : "connectionCount.get() > config.getMaxConnections()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "config.getMaxConnections()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 551,
      "startColumnNumber" : 61,
      "endLineNumber" : 551,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 551,
        "startColumnNumber" : 14,
        "endLineNumber" : 551,
        "endColumnNumber" : 88
      },
      "nodeContext" : "new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 551,
        "startColumnNumber" : 8,
        "endLineNumber" : 551,
        "endColumnNumber" : 89
      },
      "nodeContext" : "throw new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 548,
        "startColumnNumber" : 62,
        "endLineNumber" : 552,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  connectionCount.decrementAndGet();\n  throw new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 548,
        "startColumnNumber" : 6,
        "endLineNumber" : 552,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (connectionCount.get() > config.getMaxConnections()) {\n  connectionCount.decrementAndGet();\n  throw new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 888,
        "startLineNumber" : 533,
        "startColumnNumber" : 72,
        "endLineNumber" : 553,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Iterator<Map.Entry<String,DruidConnection>> entryIterator=connections.entrySet().iterator();\n  while (entryIterator.hasNext()) {\n    final Map.Entry<String,DruidConnection> entry=entryIterator.next();\n    if (entry.getValue().closeIfEmpty()) {\n      entryIterator.remove();\n      connectionCount.decrementAndGet();\n      break;\n    }\n  }\n  if (connectionCount.get() > config.getMaxConnections()) {\n    connectionCount.decrementAndGet();\n    throw new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 80,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 956,
        "startLineNumber" : 533,
        "startColumnNumber" : 4,
        "endLineNumber" : 553,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (connectionCount.incrementAndGet() > config.getMaxConnections()) {\n  final Iterator<Map.Entry<String,DruidConnection>> entryIterator=connections.entrySet().iterator();\n  while (entryIterator.hasNext()) {\n    final Map.Entry<String,DruidConnection> entry=entryIterator.next();\n    if (entry.getValue().closeIfEmpty()) {\n      entryIterator.remove();\n      connectionCount.decrementAndGet();\n      break;\n    }\n  }\n  if (connectionCount.get() > config.getMaxConnections()) {\n    connectionCount.decrementAndGet();\n    throw new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1503,
        "startLineNumber" : 532,
        "startColumnNumber" : 2,
        "endLineNumber" : 570,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (connectionCount.incrementAndGet() > config.getMaxConnections()) {\n    final Iterator<Map.Entry<String,DruidConnection>> entryIterator=connections.entrySet().iterator();\n    while (entryIterator.hasNext()) {\n      final Map.Entry<String,DruidConnection> entry=entryIterator.next();\n      if (entry.getValue().closeIfEmpty()) {\n        entryIterator.remove();\n        connectionCount.decrementAndGet();\n        break;\n      }\n    }\n    if (connectionCount.get() > config.getMaxConnections()) {\n      connectionCount.decrementAndGet();\n      throw new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections());\n    }\n  }\n  final DruidConnection putResult=connections.putIfAbsent(connectionId,new DruidConnection(connectionId,config.getMaxStatementsPerConnection(),context));\n  if (putResult != null) {\n    connectionCount.decrementAndGet();\n    throw new ISE(\"Connection[%s] already open.\",connectionId);\n  }\n  log.debug(\"Connection[%s] opened.\",connectionId);\n  return getDruidConnection(connectionId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 531,
        "startColumnNumber" : 2,
        "endLineNumber" : 570,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private DruidConnection openDruidConnection(final String connectionId,final Map<String,Object> context){\n  if (connectionCount.incrementAndGet() > config.getMaxConnections()) {\n    final Iterator<Map.Entry<String,DruidConnection>> entryIterator=connections.entrySet().iterator();\n    while (entryIterator.hasNext()) {\n      final Map.Entry<String,DruidConnection> entry=entryIterator.next();\n      if (entry.getValue().closeIfEmpty()) {\n        entryIterator.remove();\n        connectionCount.decrementAndGet();\n        break;\n      }\n    }\n    if (connectionCount.get() > config.getMaxConnections()) {\n      connectionCount.decrementAndGet();\n      throw new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections());\n    }\n  }\n  final DruidConnection putResult=connections.putIfAbsent(connectionId,new DruidConnection(connectionId,config.getMaxStatementsPerConnection(),context));\n  if (putResult != null) {\n    connectionCount.decrementAndGet();\n    throw new ISE(\"Connection[%s] already open.\",connectionId);\n  }\n  log.debug(\"Connection[%s] opened.\",connectionId);\n  return getDruidConnection(connectionId);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 551,
        "startColumnNumber" : 8,
        "endLineNumber" : 551,
        "endColumnNumber" : 89
      },
      "nodeContext" : "throw new ISE(\"Too many connections, limit is[%,d]\",config.getMaxConnections());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 533,
    "startColumnNumber" : 44,
    "endLineNumber" : 533,
    "endColumnNumber" : 70
  }, {
    "charLength" : 26,
    "startLineNumber" : 548,
    "startColumnNumber" : 34,
    "endLineNumber" : 548,
    "endColumnNumber" : 60
  }, {
    "charLength" : 26,
    "startLineNumber" : 551,
    "startColumnNumber" : 61,
    "endLineNumber" : 551,
    "endColumnNumber" : 87
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}