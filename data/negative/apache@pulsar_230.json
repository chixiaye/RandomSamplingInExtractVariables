{
  "id" : 230,
  "expression" : "Schemas.PersonTwo",
  "projectName" : "apache@pulsar",
  "commitID" : "d488ed2ad35efe3be9791a82c5b7c0ae125dea23",
  "filePath" : "pulsar-broker/src/test/java/org/apache/pulsar/schema/SchemaTest.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Schemas.PersonTwo",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 572,
      "startColumnNumber" : 45,
      "endLineNumber" : 572,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ParameterizedType,typeArguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 572,
        "startColumnNumber" : 45,
        "endLineNumber" : 572,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Schemas.PersonTwo",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ParameterizedType,typeArguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 572,
        "startColumnNumber" : 17,
        "endLineNumber" : 572,
        "endColumnNumber" : 63
      },
      "nodeContext" : "KeyValue<Schemas.PersonOne,Schemas.PersonTwo>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 572,
        "startColumnNumber" : 8,
        "endLineNumber" : 572,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 572,
        "startColumnNumber" : 8,
        "endLineNumber" : 575,
        "endColumnNumber" : 26
      },
      "nodeContext" : "Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 45,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3234,
        "startLineNumber" : 555,
        "startColumnNumber" : 107,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 450,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3337,
        "startLineNumber" : 555,
        "startColumnNumber" : 4,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testKeyValueSchemaWithStructs(KeyValueEncodingType keyValueEncodingType) throws Exception {\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 460,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 572,
        "startColumnNumber" : 8,
        "endLineNumber" : 572,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.apache.pulsar.schema.Schemas.PersonTwo"
  }, {
    "nodeContext" : "Schemas.PersonTwo",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 573,
      "startColumnNumber" : 95,
      "endLineNumber" : 573,
      "endColumnNumber" : 112
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TypeLiteral,type]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 573,
        "startColumnNumber" : 95,
        "endLineNumber" : 573,
        "endColumnNumber" : 112
      },
      "nodeContext" : "Schemas.PersonTwo",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 573,
        "startColumnNumber" : 95,
        "endLineNumber" : 573,
        "endColumnNumber" : 118
      },
      "nodeContext" : "Schemas.PersonTwo.class",
      "nodeType" : "TypeLiteral",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 573,
        "startColumnNumber" : 83,
        "endLineNumber" : 573,
        "endColumnNumber" : 119
      },
      "nodeContext" : "Schema.AVRO(Schemas.PersonTwo.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 573,
        "startColumnNumber" : 29,
        "endLineNumber" : 573,
        "endColumnNumber" : 142
      },
      "nodeContext" : "Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 572,
        "startColumnNumber" : 76,
        "endLineNumber" : 573,
        "endColumnNumber" : 143
      },
      "nodeContext" : "pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 572,
        "startColumnNumber" : 76,
        "endLineNumber" : 574,
        "endColumnNumber" : 29
      },
      "nodeContext" : "pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 572,
        "startColumnNumber" : 76,
        "endLineNumber" : 575,
        "endColumnNumber" : 25
      },
      "nodeContext" : "pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 572,
        "startColumnNumber" : 65,
        "endLineNumber" : 575,
        "endColumnNumber" : 25
      },
      "nodeContext" : "producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 30,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 572,
        "startColumnNumber" : 8,
        "endLineNumber" : 575,
        "endColumnNumber" : 26
      },
      "nodeContext" : "Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 45,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3234,
        "startLineNumber" : 555,
        "startColumnNumber" : 107,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 450,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3337,
        "startLineNumber" : 555,
        "startColumnNumber" : 4,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testKeyValueSchemaWithStructs(KeyValueEncodingType keyValueEncodingType) throws Exception {\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 460,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 573,
        "startColumnNumber" : 29,
        "endLineNumber" : 573,
        "endColumnNumber" : 142
      },
      "nodeContext" : "Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "org.apache.pulsar.schema.Schemas.PersonTwo"
  }, {
    "nodeContext" : "Schemas.PersonTwo",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 577,
      "startColumnNumber" : 45,
      "endLineNumber" : 577,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ParameterizedType,typeArguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 577,
        "startColumnNumber" : 45,
        "endLineNumber" : 577,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Schemas.PersonTwo",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ParameterizedType,typeArguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 577,
        "startColumnNumber" : 17,
        "endLineNumber" : 577,
        "endColumnNumber" : 63
      },
      "nodeContext" : "KeyValue<Schemas.PersonOne,Schemas.PersonTwo>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 577,
        "startColumnNumber" : 8,
        "endLineNumber" : 577,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 577,
        "startColumnNumber" : 8,
        "endLineNumber" : 580,
        "endColumnNumber" : 29
      },
      "nodeContext" : "Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 48,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3234,
        "startLineNumber" : 555,
        "startColumnNumber" : 107,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 450,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3337,
        "startLineNumber" : 555,
        "startColumnNumber" : 4,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testKeyValueSchemaWithStructs(KeyValueEncodingType keyValueEncodingType) throws Exception {\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 460,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 577,
        "startColumnNumber" : 8,
        "endLineNumber" : 577,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.apache.pulsar.schema.Schemas.PersonTwo"
  }, {
    "nodeContext" : "Schemas.PersonTwo",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 577,
      "startColumnNumber" : 167,
      "endLineNumber" : 577,
      "endColumnNumber" : 184
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TypeLiteral,type]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 577,
        "startColumnNumber" : 167,
        "endLineNumber" : 577,
        "endColumnNumber" : 184
      },
      "nodeContext" : "Schemas.PersonTwo",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 577,
        "startColumnNumber" : 167,
        "endLineNumber" : 577,
        "endColumnNumber" : 190
      },
      "nodeContext" : "Schemas.PersonTwo.class",
      "nodeType" : "TypeLiteral",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 577,
        "startColumnNumber" : 155,
        "endLineNumber" : 577,
        "endColumnNumber" : 191
      },
      "nodeContext" : "Schema.AVRO(Schemas.PersonTwo.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 577,
        "startColumnNumber" : 101,
        "endLineNumber" : 577,
        "endColumnNumber" : 214
      },
      "nodeContext" : "Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 577,
        "startColumnNumber" : 76,
        "endLineNumber" : 577,
        "endColumnNumber" : 215
      },
      "nodeContext" : "pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 577,
        "startColumnNumber" : 76,
        "endLineNumber" : 578,
        "endColumnNumber" : 45
      },
      "nodeContext" : "pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 577,
        "startColumnNumber" : 76,
        "endLineNumber" : 579,
        "endColumnNumber" : 29
      },
      "nodeContext" : "pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 577,
        "startColumnNumber" : 76,
        "endLineNumber" : 580,
        "endColumnNumber" : 28
      },
      "nodeContext" : "pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 31,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 577,
        "startColumnNumber" : 65,
        "endLineNumber" : 580,
        "endColumnNumber" : 28
      },
      "nodeContext" : "consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 33,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 577,
        "startColumnNumber" : 8,
        "endLineNumber" : 580,
        "endColumnNumber" : 29
      },
      "nodeContext" : "Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 48,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3234,
        "startLineNumber" : 555,
        "startColumnNumber" : 107,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 450,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3337,
        "startLineNumber" : 555,
        "startColumnNumber" : 4,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testKeyValueSchemaWithStructs(KeyValueEncodingType keyValueEncodingType) throws Exception {\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 460,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 577,
        "startColumnNumber" : 76,
        "endLineNumber" : 577,
        "endColumnNumber" : 215
      },
      "nodeContext" : "pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "org.apache.pulsar.schema.Schemas.PersonTwo"
  }, {
    "nodeContext" : "Schemas.PersonTwo",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 588,
      "startColumnNumber" : 8,
      "endLineNumber" : 588,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 588,
        "startColumnNumber" : 8,
        "endLineNumber" : 588,
        "endColumnNumber" : 25
      },
      "nodeContext" : "Schemas.PersonTwo",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 588,
        "startColumnNumber" : 8,
        "endLineNumber" : 588,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3234,
        "startLineNumber" : 555,
        "startColumnNumber" : 107,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 450,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3337,
        "startLineNumber" : 555,
        "startColumnNumber" : 4,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testKeyValueSchemaWithStructs(KeyValueEncodingType keyValueEncodingType) throws Exception {\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 460,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 588,
        "startColumnNumber" : 8,
        "endLineNumber" : 588,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "org.apache.pulsar.schema.Schemas.PersonTwo"
  }, {
    "nodeContext" : "Schemas.PersonTwo",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 588,
      "startColumnNumber" : 38,
      "endLineNumber" : 588,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 588,
        "startColumnNumber" : 38,
        "endLineNumber" : 588,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Schemas.PersonTwo",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 588,
        "startColumnNumber" : 34,
        "endLineNumber" : 588,
        "endColumnNumber" : 67
      },
      "nodeContext" : "new Schemas.PersonTwo(323,\"foo\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 588,
        "startColumnNumber" : 26,
        "endLineNumber" : 588,
        "endColumnNumber" : 67
      },
      "nodeContext" : "value=new Schemas.PersonTwo(323,\"foo\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 588,
        "startColumnNumber" : 8,
        "endLineNumber" : 588,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3234,
        "startLineNumber" : 555,
        "startColumnNumber" : 107,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 450,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3337,
        "startLineNumber" : 555,
        "startColumnNumber" : 4,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testKeyValueSchemaWithStructs(KeyValueEncodingType keyValueEncodingType) throws Exception {\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 460,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 588,
        "startColumnNumber" : 8,
        "endLineNumber" : 588,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "org.apache.pulsar.schema.Schemas.PersonTwo"
  }, {
    "nodeContext" : "Schemas.PersonTwo",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 591,
      "startColumnNumber" : 44,
      "endLineNumber" : 591,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ParameterizedType,typeArguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 591,
        "startColumnNumber" : 44,
        "endLineNumber" : 591,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Schemas.PersonTwo",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ParameterizedType,typeArguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 591,
        "startColumnNumber" : 16,
        "endLineNumber" : 591,
        "endColumnNumber" : 62
      },
      "nodeContext" : "KeyValue<Schemas.PersonOne,Schemas.PersonTwo>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 591,
        "startColumnNumber" : 8,
        "endLineNumber" : 591,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 591,
        "startColumnNumber" : 8,
        "endLineNumber" : 591,
        "endColumnNumber" : 93
      },
      "nodeContext" : "Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3234,
        "startLineNumber" : 555,
        "startColumnNumber" : 107,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 450,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3337,
        "startLineNumber" : 555,
        "startColumnNumber" : 4,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testKeyValueSchemaWithStructs(KeyValueEncodingType keyValueEncodingType) throws Exception {\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 460,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 591,
        "startColumnNumber" : 8,
        "endLineNumber" : 591,
        "endColumnNumber" : 93
      },
      "nodeContext" : "Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "org.apache.pulsar.schema.Schemas.PersonTwo"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 572,
    "startColumnNumber" : 45,
    "endLineNumber" : 572,
    "endColumnNumber" : 62
  }, {
    "charLength" : 17,
    "startLineNumber" : 573,
    "startColumnNumber" : 95,
    "endLineNumber" : 573,
    "endColumnNumber" : 112
  }, {
    "charLength" : 17,
    "startLineNumber" : 577,
    "startColumnNumber" : 45,
    "endLineNumber" : 577,
    "endColumnNumber" : 62
  }, {
    "charLength" : 17,
    "startLineNumber" : 577,
    "startColumnNumber" : 167,
    "endLineNumber" : 577,
    "endColumnNumber" : 184
  }, {
    "charLength" : 17,
    "startLineNumber" : 588,
    "startColumnNumber" : 8,
    "endLineNumber" : 588,
    "endColumnNumber" : 25
  }, {
    "charLength" : 17,
    "startLineNumber" : 588,
    "startColumnNumber" : 38,
    "endLineNumber" : 588,
    "endColumnNumber" : 55
  }, {
    "charLength" : 17,
    "startLineNumber" : 591,
    "startColumnNumber" : 44,
    "endLineNumber" : 591,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  } ]
}