{
  "id" : 10,
  "expression" : "\"Linux: \"",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/main/java/org/apache/pulsar/broker/tools/LoadReportCommand.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Linux: \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 83,
      "startColumnNumber" : 31,
      "endLineNumber" : 83,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 83,
        "startColumnNumber" : 31,
        "endLineNumber" : 83,
        "endColumnNumber" : 50
      },
      "nodeContext" : "\"Linux: \" + isLinux",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 51
      },
      "nodeContext" : "spec.console().println(\"Linux: \" + isLinux)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 52
      },
      "nodeContext" : "spec.console().println(\"Linux: \" + isLinux);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1867,
        "startLineNumber" : 77,
        "startColumnNumber" : 39,
        "endLineNumber" : 122,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isLinux=SystemUtils.IS_OS_LINUX;\n  spec.console().println(\"OS ARCH: \" + SystemUtils.OS_ARCH);\n  spec.console().println(\"OS NAME: \" + SystemUtils.OS_NAME);\n  spec.console().println(\"OS VERSION: \" + SystemUtils.OS_VERSION);\n  spec.console().println(\"Linux: \" + isLinux);\n  spec.console().println(\"--------------------------------------\");\n  spec.console().println();\n  spec.console().println(\"Load Report Interval : \" + flags.intervalMilliseconds + \" ms\");\n  spec.console().println();\n  spec.console().println(\"--------------------------------------\");\n  spec.console().println();\n  ScheduledExecutorService scheduler=Executors.newSingleThreadScheduledExecutor();\n  BrokerHostUsage hostUsage;\n  try {\n    if (isLinux) {\n      hostUsage=new LinuxBrokerHostUsageImpl(Integer.MAX_VALUE,Optional.empty(),scheduler);\n    }\n else {\n      hostUsage=new GenericBrokerHostUsageImpl(Integer.MAX_VALUE,scheduler);\n    }\n    hostUsage.calculateBrokerHostUsage();\n    try {\n      TimeUnit.MILLISECONDS.sleep(flags.intervalMilliseconds);\n    }\n catch (    InterruptedException e) {\n    }\n    hostUsage.calculateBrokerHostUsage();\n    SystemResourceUsage usage=hostUsage.getBrokerHostUsage();\n    printResourceUsage(\"CPU\",usage.cpu);\n    printResourceUsage(\"Memory\",usage.memory);\n    printResourceUsage(\"Direct Memory\",usage.directMemory);\n    printResourceUsage(\"Bandwidth In\",usage.bandwidthIn);\n    printResourceUsage(\"Bandwidth Out\",usage.bandwidthOut);\n    return true;\n  }\n  finally {\n    scheduler.shutdown();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 211,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1902,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean apply(Flags flags){\n  boolean isLinux=SystemUtils.IS_OS_LINUX;\n  spec.console().println(\"OS ARCH: \" + SystemUtils.OS_ARCH);\n  spec.console().println(\"OS NAME: \" + SystemUtils.OS_NAME);\n  spec.console().println(\"OS VERSION: \" + SystemUtils.OS_VERSION);\n  spec.console().println(\"Linux: \" + isLinux);\n  spec.console().println(\"--------------------------------------\");\n  spec.console().println();\n  spec.console().println(\"Load Report Interval : \" + flags.intervalMilliseconds + \" ms\");\n  spec.console().println();\n  spec.console().println(\"--------------------------------------\");\n  spec.console().println();\n  ScheduledExecutorService scheduler=Executors.newSingleThreadScheduledExecutor();\n  BrokerHostUsage hostUsage;\n  try {\n    if (isLinux) {\n      hostUsage=new LinuxBrokerHostUsageImpl(Integer.MAX_VALUE,Optional.empty(),scheduler);\n    }\n else {\n      hostUsage=new GenericBrokerHostUsageImpl(Integer.MAX_VALUE,scheduler);\n    }\n    hostUsage.calculateBrokerHostUsage();\n    try {\n      TimeUnit.MILLISECONDS.sleep(flags.intervalMilliseconds);\n    }\n catch (    InterruptedException e) {\n    }\n    hostUsage.calculateBrokerHostUsage();\n    SystemResourceUsage usage=hostUsage.getBrokerHostUsage();\n    printResourceUsage(\"CPU\",usage.cpu);\n    printResourceUsage(\"Memory\",usage.memory);\n    printResourceUsage(\"Direct Memory\",usage.directMemory);\n    printResourceUsage(\"Bandwidth In\",usage.bandwidthIn);\n    printResourceUsage(\"Bandwidth Out\",usage.bandwidthOut);\n    return true;\n  }\n  finally {\n    scheduler.shutdown();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 219,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 52
      },
      "nodeContext" : "spec.console().println(\"Linux: \" + isLinux);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 83,
    "startColumnNumber" : 31,
    "endLineNumber" : 83,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}