{
  "id" : 476,
  "expression" : "f",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/FunctionPrototype.java",
  "occurrences" : 14,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "f",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 130,
      "startColumnNumber" : 14,
      "endLineNumber" : 130,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 130,
        "startColumnNumber" : 14,
        "endLineNumber" : 130,
        "endColumnNumber" : 42
      },
      "nodeContext" : "f.getCallingConventionName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 130,
        "startColumnNumber" : 2,
        "endLineNumber" : 130,
        "endColumnNumber" : 42
      },
      "nodeContext" : "modelname=f.getCallingConventionName()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 130,
        "startColumnNumber" : 2,
        "endLineNumber" : 130,
        "endColumnNumber" : 43
      },
      "nodeContext" : "modelname=f.getCallingConventionName();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 129,
        "startColumnNumber" : 77,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2256,
        "startLineNumber" : 122,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Populate Function Prototype from information attached to a function in the Program DB.\n * @param f is the function to grab prototype from\n * @param overrideExtrapop is the override value to use for extrapop\n * @param doOverride is true if the override value should be used\n */\nvoid grabFromFunction(Function f,int overrideExtrapop,boolean doOverride){\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 130,
        "startColumnNumber" : 2,
        "endLineNumber" : 130,
        "endColumnNumber" : 43
      },
      "nodeContext" : "modelname=f.getCallingConventionName();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "ghidra.program.model.listing.Function"
  }, {
    "nodeContext" : "f",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 131,
      "startColumnNumber" : 30,
      "endLineNumber" : 131,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 131,
        "startColumnNumber" : 30,
        "endLineNumber" : 131,
        "endColumnNumber" : 54
      },
      "nodeContext" : "f.getCallingConvention()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 131,
        "startColumnNumber" : 17,
        "endLineNumber" : 131,
        "endColumnNumber" : 54
      },
      "nodeContext" : "protoModel=f.getCallingConvention()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 131,
        "startColumnNumber" : 2,
        "endLineNumber" : 131,
        "endColumnNumber" : 55
      },
      "nodeContext" : "PrototypeModel protoModel=f.getCallingConvention();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 129,
        "startColumnNumber" : 77,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2256,
        "startLineNumber" : 122,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Populate Function Prototype from information attached to a function in the Program DB.\n * @param f is the function to grab prototype from\n * @param overrideExtrapop is the override value to use for extrapop\n * @param doOverride is true if the override value should be used\n */\nvoid grabFromFunction(Function f,int overrideExtrapop,boolean doOverride){\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 131,
        "startColumnNumber" : 2,
        "endLineNumber" : 131,
        "endColumnNumber" : 55
      },
      "nodeContext" : "PrototypeModel protoModel=f.getCallingConvention();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "ghidra.program.model.listing.Function"
  }, {
    "nodeContext" : "f",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 133,
      "startColumnNumber" : 16,
      "endLineNumber" : 133,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 133,
        "startColumnNumber" : 16,
        "endLineNumber" : 133,
        "endColumnNumber" : 30
      },
      "nodeContext" : "f.getProgram()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 133,
        "startColumnNumber" : 16,
        "endLineNumber" : 133,
        "endColumnNumber" : 48
      },
      "nodeContext" : "f.getProgram().getCompilerSpec()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 133,
        "startColumnNumber" : 16,
        "endLineNumber" : 133,
        "endColumnNumber" : 78
      },
      "nodeContext" : "f.getProgram().getCompilerSpec().getDefaultCallingConvention()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 133,
        "startColumnNumber" : 3,
        "endLineNumber" : 133,
        "endColumnNumber" : 78
      },
      "nodeContext" : "protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 133,
        "startColumnNumber" : 3,
        "endLineNumber" : 133,
        "endColumnNumber" : 79
      },
      "nodeContext" : "protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 132,
        "startColumnNumber" : 26,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 132,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (protoModel == null) {\n  protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 129,
        "startColumnNumber" : 77,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2256,
        "startLineNumber" : 122,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Populate Function Prototype from information attached to a function in the Program DB.\n * @param f is the function to grab prototype from\n * @param overrideExtrapop is the override value to use for extrapop\n * @param doOverride is true if the override value should be used\n */\nvoid grabFromFunction(Function f,int overrideExtrapop,boolean doOverride){\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 133,
        "startColumnNumber" : 3,
        "endLineNumber" : 133,
        "endColumnNumber" : 79
      },
      "nodeContext" : "protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "ghidra.program.model.listing.Function"
  }, {
    "nodeContext" : "f",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 138,
      "startColumnNumber" : 15,
      "endLineNumber" : 138,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 138,
        "startColumnNumber" : 15,
        "endLineNumber" : 138,
        "endColumnNumber" : 31
      },
      "nodeContext" : "f.getCallFixup()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 138,
        "startColumnNumber" : 2,
        "endLineNumber" : 138,
        "endColumnNumber" : 31
      },
      "nodeContext" : "injectname=f.getCallFixup()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 138,
        "startColumnNumber" : 2,
        "endLineNumber" : 138,
        "endColumnNumber" : 32
      },
      "nodeContext" : "injectname=f.getCallFixup();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 129,
        "startColumnNumber" : 77,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2256,
        "startLineNumber" : 122,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Populate Function Prototype from information attached to a function in the Program DB.\n * @param f is the function to grab prototype from\n * @param overrideExtrapop is the override value to use for extrapop\n * @param doOverride is true if the override value should be used\n */\nvoid grabFromFunction(Function f,int overrideExtrapop,boolean doOverride){\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 138,
        "startColumnNumber" : 2,
        "endLineNumber" : 138,
        "endColumnNumber" : 32
      },
      "nodeContext" : "injectname=f.getCallFixup();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "ghidra.program.model.listing.Function"
  }, {
    "nodeContext" : "f",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 140,
      "startColumnNumber" : 26,
      "endLineNumber" : 140,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 140,
        "startColumnNumber" : 26,
        "endLineNumber" : 140,
        "endColumnNumber" : 39
      },
      "nodeContext" : "f.getReturn()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 140,
        "startColumnNumber" : 12,
        "endLineNumber" : 140,
        "endColumnNumber" : 39
      },
      "nodeContext" : "returnparam=f.getReturn()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 140,
        "startColumnNumber" : 2,
        "endLineNumber" : 140,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Parameter returnparam=f.getReturn();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 129,
        "startColumnNumber" : 77,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2256,
        "startLineNumber" : 122,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Populate Function Prototype from information attached to a function in the Program DB.\n * @param f is the function to grab prototype from\n * @param overrideExtrapop is the override value to use for extrapop\n * @param doOverride is true if the override value should be used\n */\nvoid grabFromFunction(Function f,int overrideExtrapop,boolean doOverride){\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 140,
        "startColumnNumber" : 2,
        "endLineNumber" : 140,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Parameter returnparam=f.getReturn();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "ghidra.program.model.listing.Function"
  }, {
    "nodeContext" : "f",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 144,
      "startColumnNumber" : 25,
      "endLineNumber" : 144,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 144,
        "startColumnNumber" : 25,
        "endLineNumber" : 144,
        "endColumnNumber" : 47
      },
      "nodeContext" : "f.getSignatureSource()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 144,
        "endColumnNumber" : 47
      },
      "nodeContext" : "sigSource=f.getSignatureSource()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 144,
        "startColumnNumber" : 2,
        "endLineNumber" : 144,
        "endColumnNumber" : 48
      },
      "nodeContext" : "SourceType sigSource=f.getSignatureSource();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 129,
        "startColumnNumber" : 77,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2256,
        "startLineNumber" : 122,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Populate Function Prototype from information attached to a function in the Program DB.\n * @param f is the function to grab prototype from\n * @param overrideExtrapop is the override value to use for extrapop\n * @param doOverride is true if the override value should be used\n */\nvoid grabFromFunction(Function f,int overrideExtrapop,boolean doOverride){\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 144,
        "startColumnNumber" : 2,
        "endLineNumber" : 144,
        "endColumnNumber" : 48
      },
      "nodeContext" : "SourceType sigSource=f.getSignatureSource();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "ghidra.program.model.listing.Function"
  }, {
    "nodeContext" : "f",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 158,
      "startColumnNumber" : 4,
      "endLineNumber" : 158,
      "endColumnNumber" : 5
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 158,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 26
      },
      "nodeContext" : "f.getSignatureSource()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 158,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 48
      },
      "nodeContext" : "f.getSignatureSource() != SourceType.DEFAULT",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 158,
        "startColumnNumber" : 3,
        "endLineNumber" : 158,
        "endColumnNumber" : 49
      },
      "nodeContext" : "(f.getSignatureSource() != SourceType.DEFAULT)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 158,
        "startColumnNumber" : 3,
        "endLineNumber" : 158,
        "endColumnNumber" : 79
      },
      "nodeContext" : "(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 158,
        "endColumnNumber" : 79
      },
      "nodeContext" : "voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0",
      "nodeType" : "Assignment",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 158,
        "endColumnNumber" : 80
      },
      "nodeContext" : "voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 129,
        "startColumnNumber" : 77,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2256,
        "startLineNumber" : 122,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Populate Function Prototype from information attached to a function in the Program DB.\n * @param f is the function to grab prototype from\n * @param overrideExtrapop is the override value to use for extrapop\n * @param doOverride is true if the override value should be used\n */\nvoid grabFromFunction(Function f,int overrideExtrapop,boolean doOverride){\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 158,
        "startColumnNumber" : 3,
        "endLineNumber" : 158,
        "endColumnNumber" : 79
      },
      "nodeContext" : "(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "ghidra.program.model.listing.Function"
  }, {
    "nodeContext" : "f",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 158,
      "startColumnNumber" : 53,
      "endLineNumber" : 158,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 158,
        "startColumnNumber" : 53,
        "endLineNumber" : 158,
        "endColumnNumber" : 74
      },
      "nodeContext" : "f.getParameterCount()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 158,
        "startColumnNumber" : 53,
        "endLineNumber" : 158,
        "endColumnNumber" : 79
      },
      "nodeContext" : "f.getParameterCount() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 158,
        "startColumnNumber" : 3,
        "endLineNumber" : 158,
        "endColumnNumber" : 79
      },
      "nodeContext" : "(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 158,
        "endColumnNumber" : 79
      },
      "nodeContext" : "voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0",
      "nodeType" : "Assignment",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 158,
        "endColumnNumber" : 80
      },
      "nodeContext" : "voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 129,
        "startColumnNumber" : 77,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2256,
        "startLineNumber" : 122,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Populate Function Prototype from information attached to a function in the Program DB.\n * @param f is the function to grab prototype from\n * @param overrideExtrapop is the override value to use for extrapop\n * @param doOverride is true if the override value should be used\n */\nvoid grabFromFunction(Function f,int overrideExtrapop,boolean doOverride){\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 158,
        "startColumnNumber" : 3,
        "endLineNumber" : 158,
        "endColumnNumber" : 79
      },
      "nodeContext" : "(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "ghidra.program.model.listing.Function"
  }, {
    "nodeContext" : "f",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 159,
      "startColumnNumber" : 14,
      "endLineNumber" : 159,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 159,
        "startColumnNumber" : 14,
        "endLineNumber" : 159,
        "endColumnNumber" : 28
      },
      "nodeContext" : "f.hasVarArgs()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 159,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 28
      },
      "nodeContext" : "dotdotdot=f.hasVarArgs()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 159,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 29
      },
      "nodeContext" : "dotdotdot=f.hasVarArgs();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 129,
        "startColumnNumber" : 77,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2256,
        "startLineNumber" : 122,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Populate Function Prototype from information attached to a function in the Program DB.\n * @param f is the function to grab prototype from\n * @param overrideExtrapop is the override value to use for extrapop\n * @param doOverride is true if the override value should be used\n */\nvoid grabFromFunction(Function f,int overrideExtrapop,boolean doOverride){\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 159,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 29
      },
      "nodeContext" : "dotdotdot=f.hasVarArgs();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "ghidra.program.model.listing.Function"
  }, {
    "nodeContext" : "f",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 160,
      "startColumnNumber" : 13,
      "endLineNumber" : 160,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 160,
        "startColumnNumber" : 13,
        "endLineNumber" : 160,
        "endColumnNumber" : 25
      },
      "nodeContext" : "f.isInline()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 160,
        "startColumnNumber" : 2,
        "endLineNumber" : 160,
        "endColumnNumber" : 25
      },
      "nodeContext" : "isinline=f.isInline()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 160,
        "startColumnNumber" : 2,
        "endLineNumber" : 160,
        "endColumnNumber" : 26
      },
      "nodeContext" : "isinline=f.isInline();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 129,
        "startColumnNumber" : 77,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2256,
        "startLineNumber" : 122,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Populate Function Prototype from information attached to a function in the Program DB.\n * @param f is the function to grab prototype from\n * @param overrideExtrapop is the override value to use for extrapop\n * @param doOverride is true if the override value should be used\n */\nvoid grabFromFunction(Function f,int overrideExtrapop,boolean doOverride){\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 160,
        "startColumnNumber" : 2,
        "endLineNumber" : 160,
        "endColumnNumber" : 26
      },
      "nodeContext" : "isinline=f.isInline();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "ghidra.program.model.listing.Function"
  }, {
    "nodeContext" : "f",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 161,
      "startColumnNumber" : 13,
      "endLineNumber" : 161,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 161,
        "startColumnNumber" : 13,
        "endLineNumber" : 161,
        "endColumnNumber" : 28
      },
      "nodeContext" : "f.hasNoReturn()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 161,
        "startColumnNumber" : 13,
        "endLineNumber" : 161,
        "endColumnNumber" : 65
      },
      "nodeContext" : "f.hasNoReturn() | isNoReturnInjection(f,injectname)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 161,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 65
      },
      "nodeContext" : "noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 161,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 66
      },
      "nodeContext" : "noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 129,
        "startColumnNumber" : 77,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2256,
        "startLineNumber" : 122,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Populate Function Prototype from information attached to a function in the Program DB.\n * @param f is the function to grab prototype from\n * @param overrideExtrapop is the override value to use for extrapop\n * @param doOverride is true if the override value should be used\n */\nvoid grabFromFunction(Function f,int overrideExtrapop,boolean doOverride){\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 161,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 66
      },
      "nodeContext" : "noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "ghidra.program.model.listing.Function"
  }, {
    "nodeContext" : "f",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 161,
      "startColumnNumber" : 51,
      "endLineNumber" : 161,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 161,
        "startColumnNumber" : 31,
        "endLineNumber" : 161,
        "endColumnNumber" : 65
      },
      "nodeContext" : "isNoReturnInjection(f,injectname)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 161,
        "startColumnNumber" : 13,
        "endLineNumber" : 161,
        "endColumnNumber" : 65
      },
      "nodeContext" : "f.hasNoReturn() | isNoReturnInjection(f,injectname)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 161,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 65
      },
      "nodeContext" : "noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 161,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 66
      },
      "nodeContext" : "noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 129,
        "startColumnNumber" : 77,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2256,
        "startLineNumber" : 122,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Populate Function Prototype from information attached to a function in the Program DB.\n * @param f is the function to grab prototype from\n * @param overrideExtrapop is the override value to use for extrapop\n * @param doOverride is true if the override value should be used\n */\nvoid grabFromFunction(Function f,int overrideExtrapop,boolean doOverride){\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 161,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 66
      },
      "nodeContext" : "noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "ghidra.program.model.listing.Function"
  }, {
    "nodeContext" : "f",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 162,
      "startColumnNumber" : 11,
      "endLineNumber" : 162,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 162,
        "startColumnNumber" : 11,
        "endLineNumber" : 162,
        "endColumnNumber" : 39
      },
      "nodeContext" : "f.hasCustomVariableStorage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 162,
        "startColumnNumber" : 2,
        "endLineNumber" : 162,
        "endColumnNumber" : 39
      },
      "nodeContext" : "custom=f.hasCustomVariableStorage()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 162,
        "startColumnNumber" : 2,
        "endLineNumber" : 162,
        "endColumnNumber" : 40
      },
      "nodeContext" : "custom=f.hasCustomVariableStorage();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 129,
        "startColumnNumber" : 77,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2256,
        "startLineNumber" : 122,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Populate Function Prototype from information attached to a function in the Program DB.\n * @param f is the function to grab prototype from\n * @param overrideExtrapop is the override value to use for extrapop\n * @param doOverride is true if the override value should be used\n */\nvoid grabFromFunction(Function f,int overrideExtrapop,boolean doOverride){\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 162,
        "startColumnNumber" : 2,
        "endLineNumber" : 162,
        "endColumnNumber" : 40
      },
      "nodeContext" : "custom=f.hasCustomVariableStorage();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "ghidra.program.model.listing.Function"
  }, {
    "nodeContext" : "f",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 169,
      "startColumnNumber" : 14,
      "endLineNumber" : 169,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 169,
        "startColumnNumber" : 14,
        "endLineNumber" : 169,
        "endColumnNumber" : 35
      },
      "nodeContext" : "f.getStackPurgeSize()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 169,
        "startColumnNumber" : 6,
        "endLineNumber" : 169,
        "endColumnNumber" : 35
      },
      "nodeContext" : "purge=f.getStackPurgeSize()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 169,
        "startColumnNumber" : 2,
        "endLineNumber" : 169,
        "endColumnNumber" : 36
      },
      "nodeContext" : "int purge=f.getStackPurgeSize();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 129,
        "startColumnNumber" : 77,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2256,
        "startLineNumber" : 122,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Populate Function Prototype from information attached to a function in the Program DB.\n * @param f is the function to grab prototype from\n * @param overrideExtrapop is the override value to use for extrapop\n * @param doOverride is true if the override value should be used\n */\nvoid grabFromFunction(Function f,int overrideExtrapop,boolean doOverride){\n  modelname=f.getCallingConventionName();\n  PrototypeModel protoModel=f.getCallingConvention();\n  if (protoModel == null) {\n    protoModel=f.getProgram().getCompilerSpec().getDefaultCallingConvention();\n  }\n  hasThis=protoModel.hasThisPointer();\n  modellock=((modelname != null) && (modelname != Function.UNKNOWN_CALLING_CONVENTION_STRING));\n  injectname=f.getCallFixup();\n  voidinputlock=false;\n  Parameter returnparam=f.getReturn();\n  returntype=returnparam.getDataType();\n  returnstorage=returnparam.getVariableStorage();\n  SourceType sigSource=f.getSignatureSource();\n  if (sigSource != SourceType.DEFAULT) {\n    outputlock=DataType.DEFAULT != returntype;\n  }\n else {\n    outputlock=false;\n  }\n  if ((returnstorage == null) || (!returnstorage.isValid())) {\n    outputlock=false;\n    returnstorage=VariableStorage.VOID_STORAGE;\n    returntype=DataType.VOID;\n  }\n  voidinputlock=(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;\n  dotdotdot=f.hasVarArgs();\n  isinline=f.isInline();\n  noreturn=f.hasNoReturn() | isNoReturnInjection(f,injectname);\n  custom=f.hasCustomVariableStorage();\n  int purge=f.getStackPurgeSize();\n  if (doOverride) {\n    extrapop=overrideExtrapop;\n  }\n else {\n    if (purge == Function.INVALID_STACK_DEPTH_CHANGE || purge == Function.UNKNOWN_STACK_DEPTH_CHANGE) {\n      extrapop=protoModel.getExtrapop();\n    }\n else {\n      extrapop=purge + protoModel.getStackshift();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 169,
        "startColumnNumber" : 2,
        "endLineNumber" : 169,
        "endColumnNumber" : 36
      },
      "nodeContext" : "int purge=f.getStackPurgeSize();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "ghidra.program.model.listing.Function"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 130,
    "startColumnNumber" : 14,
    "endLineNumber" : 130,
    "endColumnNumber" : 15
  }, {
    "charLength" : 1,
    "startLineNumber" : 131,
    "startColumnNumber" : 30,
    "endLineNumber" : 131,
    "endColumnNumber" : 31
  }, {
    "charLength" : 1,
    "startLineNumber" : 133,
    "startColumnNumber" : 16,
    "endLineNumber" : 133,
    "endColumnNumber" : 17
  }, {
    "charLength" : 1,
    "startLineNumber" : 138,
    "startColumnNumber" : 15,
    "endLineNumber" : 138,
    "endColumnNumber" : 16
  }, {
    "charLength" : 1,
    "startLineNumber" : 140,
    "startColumnNumber" : 26,
    "endLineNumber" : 140,
    "endColumnNumber" : 27
  }, {
    "charLength" : 1,
    "startLineNumber" : 144,
    "startColumnNumber" : 25,
    "endLineNumber" : 144,
    "endColumnNumber" : 26
  }, {
    "charLength" : 1,
    "startLineNumber" : 158,
    "startColumnNumber" : 4,
    "endLineNumber" : 158,
    "endColumnNumber" : 5
  }, {
    "charLength" : 1,
    "startLineNumber" : 158,
    "startColumnNumber" : 53,
    "endLineNumber" : 158,
    "endColumnNumber" : 54
  }, {
    "charLength" : 1,
    "startLineNumber" : 159,
    "startColumnNumber" : 14,
    "endLineNumber" : 159,
    "endColumnNumber" : 15
  }, {
    "charLength" : 1,
    "startLineNumber" : 160,
    "startColumnNumber" : 13,
    "endLineNumber" : 160,
    "endColumnNumber" : 14
  }, {
    "charLength" : 1,
    "startLineNumber" : 161,
    "startColumnNumber" : 13,
    "endLineNumber" : 161,
    "endColumnNumber" : 14
  }, {
    "charLength" : 1,
    "startLineNumber" : 161,
    "startColumnNumber" : 51,
    "endLineNumber" : 161,
    "endColumnNumber" : 52
  }, {
    "charLength" : 1,
    "startLineNumber" : 162,
    "startColumnNumber" : 11,
    "endLineNumber" : 162,
    "endColumnNumber" : 12
  }, {
    "charLength" : 1,
    "startLineNumber" : 169,
    "startColumnNumber" : 14,
    "endLineNumber" : 169,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 3
  } ]
}