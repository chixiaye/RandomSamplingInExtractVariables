{
  "id" : 172,
  "expression" : "new Headers()",
  "projectName" : "Netflix@zuul",
  "commitID" : "4dd944db59b0a82e7432c25822231e4a83296e77",
  "filePath" : "zuul-servletapi/src/main/java/com/netflix/zuul/context/ServletSessionContextFactory.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Headers()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 54,
      "startColumnNumber" : 29,
      "endLineNumber" : 54,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 54,
        "startColumnNumber" : 16,
        "endLineNumber" : 54,
        "endColumnNumber" : 42
      },
      "nodeContext" : "reqHeaders=new Headers()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 43
      },
      "nodeContext" : "Headers reqHeaders=new Headers();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3282,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Headers reqHeaders=new Headers();\n  Enumeration headerNames=servletRequest.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    String name=(String)headerNames.nextElement();\n    Enumeration values=servletRequest.getHeaders(name);\n    HeaderName hn=HttpHeaderNames.get(name);\n    while (values.hasMoreElements()) {\n      String value=(String)values.nextElement();\n      reqHeaders.add(hn,value);\n    }\n  }\n  HttpQueryParams queryParams=HttpQueryParams.parse(servletRequest.getQueryString());\n  copyServletRequestAttributes(context,servletRequest);\n  HttpRequestMessage request=new HttpRequestMessageImpl(context,servletRequest.getProtocol(),servletRequest.getMethod(),servletRequest.getRequestURI(),queryParams,reqHeaders,servletRequest.getRemoteAddr(),servletRequest.getScheme(),servletRequest.getServerPort(),servletRequest.getServerName());\n  request.storeInboundRequest();\n  InputStream bodyInput;\n  try {\n    bodyInput=servletRequest.getInputStream();\n  }\n catch (  IOException e) {\n    String errorMsg=\"Error reading ServletInputStream.\";\n    LOG.error(errorMsg,e);\n    throw new RuntimeException(errorMsg,e);\n  }\n  if (bodyInput != null) {\n    Observable<ByteBuf> bodyObs=ByteBufUtils.fromInputStream(bodyInput);\n    bodyObs=bodyObs.onErrorReturn((e) -> {\n      if (SocketTimeoutException.class.isAssignableFrom(e.getClass())) {\n        LOG.error(\"SocketTimeoutException reading request body from inputstream. error=\" + String.valueOf(e.getMessage()) + \", request-info: \"+ request.getInfoForLogging());\n      }\n else {\n        LOG.error(\"Error reading request body from inputstream. error=\" + String.valueOf(e.getMessage()) + \", request-info: \"+ request.getInfoForLogging());\n      }\n      ZuulException ze=new ZuulException(e.getMessage(),e,\"TIMEOUT_READING_REQ_BODY\");\n      ze.setStatusCode(400);\n      request.getContext().setError(ze);\n      request.getContext().setShouldSendErrorResponse(true);\n      return Unpooled.EMPTY_BUFFER;\n    }\n);\n    request.setBodyStream(bodyObs);\n  }\n  return request;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 275,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3385,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public ZuulMessage create(SessionContext context,HttpServletRequest servletRequest){\n  Headers reqHeaders=new Headers();\n  Enumeration headerNames=servletRequest.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    String name=(String)headerNames.nextElement();\n    Enumeration values=servletRequest.getHeaders(name);\n    HeaderName hn=HttpHeaderNames.get(name);\n    while (values.hasMoreElements()) {\n      String value=(String)values.nextElement();\n      reqHeaders.add(hn,value);\n    }\n  }\n  HttpQueryParams queryParams=HttpQueryParams.parse(servletRequest.getQueryString());\n  copyServletRequestAttributes(context,servletRequest);\n  HttpRequestMessage request=new HttpRequestMessageImpl(context,servletRequest.getProtocol(),servletRequest.getMethod(),servletRequest.getRequestURI(),queryParams,reqHeaders,servletRequest.getRemoteAddr(),servletRequest.getScheme(),servletRequest.getServerPort(),servletRequest.getServerName());\n  request.storeInboundRequest();\n  InputStream bodyInput;\n  try {\n    bodyInput=servletRequest.getInputStream();\n  }\n catch (  IOException e) {\n    String errorMsg=\"Error reading ServletInputStream.\";\n    LOG.error(errorMsg,e);\n    throw new RuntimeException(errorMsg,e);\n  }\n  if (bodyInput != null) {\n    Observable<ByteBuf> bodyObs=ByteBufUtils.fromInputStream(bodyInput);\n    bodyObs=bodyObs.onErrorReturn((e) -> {\n      if (SocketTimeoutException.class.isAssignableFrom(e.getClass())) {\n        LOG.error(\"SocketTimeoutException reading request body from inputstream. error=\" + String.valueOf(e.getMessage()) + \", request-info: \"+ request.getInfoForLogging());\n      }\n else {\n        LOG.error(\"Error reading request body from inputstream. error=\" + String.valueOf(e.getMessage()) + \", request-info: \"+ request.getInfoForLogging());\n      }\n      ZuulException ze=new ZuulException(e.getMessage(),e,\"TIMEOUT_READING_REQ_BODY\");\n      ze.setStatusCode(400);\n      request.getContext().setError(ze);\n      request.getContext().setShouldSendErrorResponse(true);\n      return Unpooled.EMPTY_BUFFER;\n    }\n);\n    request.setBodyStream(bodyObs);\n  }\n  return request;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 43
      },
      "nodeContext" : "Headers reqHeaders=new Headers();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.netflix.zuul.message.Headers"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 54,
    "startColumnNumber" : 29,
    "endLineNumber" : 54,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}