{
  "id" : 340,
  "expression" : "new byte[ShareConstants.BUFFER_SIZE]",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/BasePatchInternal.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new byte[ShareConstants.BUFFER_SIZE]",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 69,
      "startColumnNumber" : 32,
      "endLineNumber" : 69,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 69,
        "startColumnNumber" : 23,
        "endLineNumber" : 69,
        "endColumnNumber" : 68
      },
      "nodeContext" : "buffer=new byte[ShareConstants.BUFFER_SIZE]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 69,
        "endColumnNumber" : 69
      },
      "nodeContext" : "byte[] buffer=new byte[ShareConstants.BUFFER_SIZE];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 402,
        "startLineNumber" : 66,
        "startColumnNumber" : 16,
        "endLineNumber" : 74,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  is=new BufferedInputStream(zipFile.getInputStream(entryFile));\n  os=new BufferedOutputStream(new FileOutputStream(extractTo));\n  byte[] buffer=new byte[ShareConstants.BUFFER_SIZE];\n  int length=0;\n  while ((length=is.read(buffer)) > 0) {\n    os.write(buffer,0,length);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 516,
        "startLineNumber" : 66,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  is=new BufferedInputStream(zipFile.getInputStream(entryFile));\n  os=new BufferedOutputStream(new FileOutputStream(extractTo));\n  byte[] buffer=new byte[ShareConstants.BUFFER_SIZE];\n  int length=0;\n  while ((length=is.read(buffer)) > 0) {\n    os.write(buffer,0,length);\n  }\n}\n  finally {\n  IOHelper.closeQuietly(os);\n  IOHelper.closeQuietly(is);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 69,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1521,
        "startLineNumber" : 59,
        "startColumnNumber" : 78,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  numAttempts++;\n  InputStream is=null;\n  OutputStream os=null;\n  ShareTinkerLog.i(TAG,\"try Extracting \" + extractTo.getPath());\n  try {\n    is=new BufferedInputStream(zipFile.getInputStream(entryFile));\n    os=new BufferedOutputStream(new FileOutputStream(extractTo));\n    byte[] buffer=new byte[ShareConstants.BUFFER_SIZE];\n    int length=0;\n    while ((length=is.read(buffer)) > 0) {\n      os.write(buffer,0,length);\n    }\n  }\n  finally {\n    IOHelper.closeQuietly(os);\n    IOHelper.closeQuietly(is);\n  }\n  if (targetMd5 != null) {\n    if (isDex) {\n      isExtractionSuccessful=SharePatchFileUtil.verifyDexFileMd5(extractTo,targetMd5);\n    }\n else {\n      isExtractionSuccessful=SharePatchFileUtil.verifyFileMd5(extractTo,targetMd5);\n    }\n  }\n else {\n    isExtractionSuccessful=true;\n  }\n  ShareTinkerLog.i(TAG,\"isExtractionSuccessful: %b\",isExtractionSuccessful);\n  if (!isExtractionSuccessful) {\n    final boolean succ=extractTo.delete();\n    if (!succ || extractTo.exists()) {\n      ShareTinkerLog.e(TAG,\"Failed to delete corrupted dex \" + extractTo.getPath());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1591,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (numAttempts < MAX_EXTRACT_ATTEMPTS && !isExtractionSuccessful) {\n  numAttempts++;\n  InputStream is=null;\n  OutputStream os=null;\n  ShareTinkerLog.i(TAG,\"try Extracting \" + extractTo.getPath());\n  try {\n    is=new BufferedInputStream(zipFile.getInputStream(entryFile));\n    os=new BufferedOutputStream(new FileOutputStream(extractTo));\n    byte[] buffer=new byte[ShareConstants.BUFFER_SIZE];\n    int length=0;\n    while ((length=is.read(buffer)) > 0) {\n      os.write(buffer,0,length);\n    }\n  }\n  finally {\n    IOHelper.closeQuietly(os);\n    IOHelper.closeQuietly(is);\n  }\n  if (targetMd5 != null) {\n    if (isDex) {\n      isExtractionSuccessful=SharePatchFileUtil.verifyDexFileMd5(extractTo,targetMd5);\n    }\n else {\n      isExtractionSuccessful=SharePatchFileUtil.verifyFileMd5(extractTo,targetMd5);\n    }\n  }\n else {\n    isExtractionSuccessful=true;\n  }\n  ShareTinkerLog.i(TAG,\"isExtractionSuccessful: %b\",isExtractionSuccessful);\n  if (!isExtractionSuccessful) {\n    final boolean succ=extractTo.delete();\n    if (!succ || extractTo.exists()) {\n      ShareTinkerLog.e(TAG,\"Failed to delete corrupted dex \" + extractTo.getPath());\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 169,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1724,
        "startLineNumber" : 56,
        "startColumnNumber" : 139,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int numAttempts=0;\n  boolean isExtractionSuccessful=false;\n  while (numAttempts < MAX_EXTRACT_ATTEMPTS && !isExtractionSuccessful) {\n    numAttempts++;\n    InputStream is=null;\n    OutputStream os=null;\n    ShareTinkerLog.i(TAG,\"try Extracting \" + extractTo.getPath());\n    try {\n      is=new BufferedInputStream(zipFile.getInputStream(entryFile));\n      os=new BufferedOutputStream(new FileOutputStream(extractTo));\n      byte[] buffer=new byte[ShareConstants.BUFFER_SIZE];\n      int length=0;\n      while ((length=is.read(buffer)) > 0) {\n        os.write(buffer,0,length);\n      }\n    }\n  finally {\n      IOHelper.closeQuietly(os);\n      IOHelper.closeQuietly(is);\n    }\n    if (targetMd5 != null) {\n      if (isDex) {\n        isExtractionSuccessful=SharePatchFileUtil.verifyDexFileMd5(extractTo,targetMd5);\n      }\n else {\n        isExtractionSuccessful=SharePatchFileUtil.verifyFileMd5(extractTo,targetMd5);\n      }\n    }\n else {\n      isExtractionSuccessful=true;\n    }\n    ShareTinkerLog.i(TAG,\"isExtractionSuccessful: %b\",isExtractionSuccessful);\n    if (!isExtractionSuccessful) {\n      final boolean succ=extractTo.delete();\n      if (!succ || extractTo.exists()) {\n        ShareTinkerLog.e(TAG,\"Failed to delete corrupted dex \" + extractTo.getPath());\n      }\n    }\n  }\n  return isExtractionSuccessful;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1859,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static boolean extract(ZipFile zipFile,ZipEntry entryFile,File extractTo,String targetMd5,boolean isDex) throws IOException {\n  int numAttempts=0;\n  boolean isExtractionSuccessful=false;\n  while (numAttempts < MAX_EXTRACT_ATTEMPTS && !isExtractionSuccessful) {\n    numAttempts++;\n    InputStream is=null;\n    OutputStream os=null;\n    ShareTinkerLog.i(TAG,\"try Extracting \" + extractTo.getPath());\n    try {\n      is=new BufferedInputStream(zipFile.getInputStream(entryFile));\n      os=new BufferedOutputStream(new FileOutputStream(extractTo));\n      byte[] buffer=new byte[ShareConstants.BUFFER_SIZE];\n      int length=0;\n      while ((length=is.read(buffer)) > 0) {\n        os.write(buffer,0,length);\n      }\n    }\n  finally {\n      IOHelper.closeQuietly(os);\n      IOHelper.closeQuietly(is);\n    }\n    if (targetMd5 != null) {\n      if (isDex) {\n        isExtractionSuccessful=SharePatchFileUtil.verifyDexFileMd5(extractTo,targetMd5);\n      }\n else {\n        isExtractionSuccessful=SharePatchFileUtil.verifyFileMd5(extractTo,targetMd5);\n      }\n    }\n else {\n      isExtractionSuccessful=true;\n    }\n    ShareTinkerLog.i(TAG,\"isExtractionSuccessful: %b\",isExtractionSuccessful);\n    if (!isExtractionSuccessful) {\n      final boolean succ=extractTo.delete();\n      if (!succ || extractTo.exists()) {\n        ShareTinkerLog.e(TAG,\"Failed to delete corrupted dex \" + extractTo.getPath());\n      }\n    }\n  }\n  return isExtractionSuccessful;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 208,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 69,
        "endColumnNumber" : 69
      },
      "nodeContext" : "byte[] buffer=new byte[ShareConstants.BUFFER_SIZE];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 69,
    "startColumnNumber" : 32,
    "endLineNumber" : 69,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}