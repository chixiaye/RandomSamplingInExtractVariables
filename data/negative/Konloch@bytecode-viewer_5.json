{
  "id" : 5,
  "expression" : "history",
  "projectName" : "Konloch@bytecode-viewer",
  "commitID" : "9ab8ec7f8c061fb1d9b1db3e901034d162a211ff",
  "filePath" : "/src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/ProcyonDecompiler.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "history",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 176,
      "startColumnNumber" : 24,
      "endLineNumber" : 176,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 176,
        "startColumnNumber" : 24,
        "endLineNumber" : 176,
        "endColumnNumber" : 40
      },
      "nodeContext" : "history.add(etn)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1118,
        "startLineNumber" : 176,
        "startColumnNumber" : 20,
        "endLineNumber" : 196,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (history.add(etn)) {\n  out.putNextEntry(etn);\n  try {\n    String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n    TypeReference type=metadataSystem.lookupType(internalName);\n    TypeDefinition resolvedType;\n    if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n      throw new Exception(\"Unable to resolve type.\");\n    }\n    Writer writer=new OutputStreamWriter(out);\n    settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n    writer.flush();\n  }\n  finally {\n    out.closeEntry();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1280,
        "startLineNumber" : 173,
        "startColumnNumber" : 56,
        "endLineNumber" : 197,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n  if (history.add(etn)) {\n    out.putNextEntry(etn);\n    try {\n      String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n      TypeReference type=metadataSystem.lookupType(internalName);\n      TypeDefinition resolvedType;\n      if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n        throw new Exception(\"Unable to resolve type.\");\n      }\n      Writer writer=new OutputStreamWriter(out);\n      settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n      writer.flush();\n    }\n  finally {\n      out.closeEntry();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2617,
        "startLineNumber" : 173,
        "startColumnNumber" : 16,
        "endLineNumber" : 226,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (entry.getName().endsWith(\".class\")) {\n  JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n  if (history.add(etn)) {\n    out.putNextEntry(etn);\n    try {\n      String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n      TypeReference type=metadataSystem.lookupType(internalName);\n      TypeDefinition resolvedType;\n      if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n        throw new Exception(\"Unable to resolve type.\");\n      }\n      Writer writer=new OutputStreamWriter(out);\n      settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n      writer.flush();\n    }\n  finally {\n      out.closeEntry();\n    }\n  }\n}\n else {\n  try {\n    JarEntry etn=new JarEntry(entry.getName());\n    if (history.add(etn))     continue;\n    history.add(etn);\n    out.putNextEntry(etn);\n    try {\n      InputStream in=jfile.getInputStream(entry);\n      if (in != null) {\n        try {\n          int count;\n          while ((count=in.read(data,0,1024)) != -1) {\n            out.write(data,0,count);\n          }\n        }\n  finally {\n          in.close();\n        }\n      }\n    }\n  finally {\n      out.closeEntry();\n    }\n  }\n catch (  ZipException ze) {\n    if (!ze.getMessage().contains(\"duplicate\")) {\n      throw ze;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 213,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2701,
        "startLineNumber" : 171,
        "startColumnNumber" : 42,
        "endLineNumber" : 227,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  JarEntry entry=ent.nextElement();\n  if (entry.getName().endsWith(\".class\")) {\n    JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n    if (history.add(etn)) {\n      out.putNextEntry(etn);\n      try {\n        String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n        TypeReference type=metadataSystem.lookupType(internalName);\n        TypeDefinition resolvedType;\n        if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n          throw new Exception(\"Unable to resolve type.\");\n        }\n        Writer writer=new OutputStreamWriter(out);\n        settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n        writer.flush();\n      }\n  finally {\n        out.closeEntry();\n      }\n    }\n  }\n else {\n    try {\n      JarEntry etn=new JarEntry(entry.getName());\n      if (history.add(etn))       continue;\n      history.add(etn);\n      out.putNextEntry(etn);\n      try {\n        InputStream in=jfile.getInputStream(entry);\n        if (in != null) {\n          try {\n            int count;\n            while ((count=in.read(data,0,1024)) != -1) {\n              out.write(data,0,count);\n            }\n          }\n  finally {\n            in.close();\n          }\n        }\n      }\n  finally {\n        out.closeEntry();\n      }\n    }\n catch (    ZipException ze) {\n      if (!ze.getMessage().contains(\"duplicate\")) {\n        throw ze;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2731,
        "startLineNumber" : 171,
        "startColumnNumber" : 12,
        "endLineNumber" : 227,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (ent.hasMoreElements()) {\n  JarEntry entry=ent.nextElement();\n  if (entry.getName().endsWith(\".class\")) {\n    JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n    if (history.add(etn)) {\n      out.putNextEntry(etn);\n      try {\n        String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n        TypeReference type=metadataSystem.lookupType(internalName);\n        TypeDefinition resolvedType;\n        if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n          throw new Exception(\"Unable to resolve type.\");\n        }\n        Writer writer=new OutputStreamWriter(out);\n        settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n        writer.flush();\n      }\n  finally {\n        out.closeEntry();\n      }\n    }\n  }\n else {\n    try {\n      JarEntry etn=new JarEntry(entry.getName());\n      if (history.add(etn))       continue;\n      history.add(etn);\n      out.putNextEntry(etn);\n      try {\n        InputStream in=jfile.getInputStream(entry);\n        if (in != null) {\n          try {\n            int count;\n            while ((count=in.read(data,0,1024)) != -1) {\n              out.write(data,0,count);\n            }\n          }\n  finally {\n            in.close();\n          }\n        }\n      }\n  finally {\n        out.closeEntry();\n      }\n    }\n catch (    ZipException ze) {\n      if (!ze.getMessage().contains(\"duplicate\")) {\n        throw ze;\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 226,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3437,
        "startLineNumber" : 157,
        "startColumnNumber" : 66,
        "endLineNumber" : 228,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  byte[] data=new byte[1024];\n  DecompilerSettings settings=getDecompilerSettings();\n  LuytenTypeLoader typeLoader=new LuytenTypeLoader();\n  MetadataSystem metadataSystem=new MetadataSystem(typeLoader);\n  ITypeLoader jarLoader=new JarTypeLoader(jfile);\n  typeLoader.getTypeLoaders().add(jarLoader);\n  DecompilationOptions decompilationOptions=new DecompilationOptions();\n  decompilationOptions.setSettings(settings);\n  decompilationOptions.setFullDecompilation(true);\n  Enumeration<JarEntry> ent=jfile.entries();\n  Set<JarEntry> history=new HashSet<>();\n  while (ent.hasMoreElements()) {\n    JarEntry entry=ent.nextElement();\n    if (entry.getName().endsWith(\".class\")) {\n      JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n      if (history.add(etn)) {\n        out.putNextEntry(etn);\n        try {\n          String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n          TypeReference type=metadataSystem.lookupType(internalName);\n          TypeDefinition resolvedType;\n          if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n            throw new Exception(\"Unable to resolve type.\");\n          }\n          Writer writer=new OutputStreamWriter(out);\n          settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n          writer.flush();\n        }\n  finally {\n          out.closeEntry();\n        }\n      }\n    }\n else {\n      try {\n        JarEntry etn=new JarEntry(entry.getName());\n        if (history.add(etn))         continue;\n        history.add(etn);\n        out.putNextEntry(etn);\n        try {\n          InputStream in=jfile.getInputStream(entry);\n          if (in != null) {\n            try {\n              int count;\n              while ((count=in.read(data,0,1024)) != -1) {\n                out.write(data,0,count);\n              }\n            }\n  finally {\n              in.close();\n            }\n          }\n        }\n  finally {\n          out.closeEntry();\n        }\n      }\n catch (      ZipException ze) {\n        if (!ze.getMessage().contains(\"duplicate\")) {\n          throw ze;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3690,
        "startLineNumber" : 154,
        "startColumnNumber" : 8,
        "endLineNumber" : 228,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (JarFile jfile=new JarFile(inFile);FileOutputStream dest=new FileOutputStream(outFile);BufferedOutputStream buffDest=new BufferedOutputStream(dest);ZipOutputStream out=new ZipOutputStream(buffDest)){\n  byte[] data=new byte[1024];\n  DecompilerSettings settings=getDecompilerSettings();\n  LuytenTypeLoader typeLoader=new LuytenTypeLoader();\n  MetadataSystem metadataSystem=new MetadataSystem(typeLoader);\n  ITypeLoader jarLoader=new JarTypeLoader(jfile);\n  typeLoader.getTypeLoaders().add(jarLoader);\n  DecompilationOptions decompilationOptions=new DecompilationOptions();\n  decompilationOptions.setSettings(settings);\n  decompilationOptions.setFullDecompilation(true);\n  Enumeration<JarEntry> ent=jfile.entries();\n  Set<JarEntry> history=new HashSet<>();\n  while (ent.hasMoreElements()) {\n    JarEntry entry=ent.nextElement();\n    if (entry.getName().endsWith(\".class\")) {\n      JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n      if (history.add(etn)) {\n        out.putNextEntry(etn);\n        try {\n          String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n          TypeReference type=metadataSystem.lookupType(internalName);\n          TypeDefinition resolvedType;\n          if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n            throw new Exception(\"Unable to resolve type.\");\n          }\n          Writer writer=new OutputStreamWriter(out);\n          settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n          writer.flush();\n        }\n  finally {\n          out.closeEntry();\n        }\n      }\n    }\n else {\n      try {\n        JarEntry etn=new JarEntry(entry.getName());\n        if (history.add(etn))         continue;\n        history.add(etn);\n        out.putNextEntry(etn);\n        try {\n          InputStream in=jfile.getInputStream(entry);\n          if (in != null) {\n            try {\n              int count;\n              while ((count=in.read(data,0,1024)) != -1) {\n                out.write(data,0,count);\n              }\n            }\n  finally {\n              in.close();\n            }\n          }\n        }\n  finally {\n          out.closeEntry();\n        }\n      }\n catch (      ZipException ze) {\n        if (!ze.getMessage().contains(\"duplicate\")) {\n          throw ze;\n        }\n      }\n    }\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 356,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3706,
        "startLineNumber" : 153,
        "startColumnNumber" : 29,
        "endLineNumber" : 229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try (JarFile jfile=new JarFile(inFile);FileOutputStream dest=new FileOutputStream(outFile);BufferedOutputStream buffDest=new BufferedOutputStream(dest);ZipOutputStream out=new ZipOutputStream(buffDest)){\n    byte[] data=new byte[1024];\n    DecompilerSettings settings=getDecompilerSettings();\n    LuytenTypeLoader typeLoader=new LuytenTypeLoader();\n    MetadataSystem metadataSystem=new MetadataSystem(typeLoader);\n    ITypeLoader jarLoader=new JarTypeLoader(jfile);\n    typeLoader.getTypeLoaders().add(jarLoader);\n    DecompilationOptions decompilationOptions=new DecompilationOptions();\n    decompilationOptions.setSettings(settings);\n    decompilationOptions.setFullDecompilation(true);\n    Enumeration<JarEntry> ent=jfile.entries();\n    Set<JarEntry> history=new HashSet<>();\n    while (ent.hasMoreElements()) {\n      JarEntry entry=ent.nextElement();\n      if (entry.getName().endsWith(\".class\")) {\n        JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n        if (history.add(etn)) {\n          out.putNextEntry(etn);\n          try {\n            String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n            TypeReference type=metadataSystem.lookupType(internalName);\n            TypeDefinition resolvedType;\n            if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n              throw new Exception(\"Unable to resolve type.\");\n            }\n            Writer writer=new OutputStreamWriter(out);\n            settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n            writer.flush();\n          }\n  finally {\n            out.closeEntry();\n          }\n        }\n      }\n else {\n        try {\n          JarEntry etn=new JarEntry(entry.getName());\n          if (history.add(etn))           continue;\n          history.add(etn);\n          out.putNextEntry(etn);\n          try {\n            InputStream in=jfile.getInputStream(entry);\n            if (in != null) {\n              try {\n                int count;\n                while ((count=in.read(data,0,1024)) != -1) {\n                  out.write(data,0,count);\n                }\n              }\n  finally {\n                in.close();\n              }\n            }\n          }\n  finally {\n            out.closeEntry();\n          }\n        }\n catch (        ZipException ze) {\n          if (!ze.getMessage().contains(\"duplicate\")) {\n            throw ze;\n          }\n        }\n      }\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3838,
        "startLineNumber" : 149,
        "startColumnNumber" : 4,
        "endLineNumber" : 229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @author DeathMarine\n */\nprivate void doSaveJarDecompiled(File inFile,File outFile) throws Exception {\n  try (JarFile jfile=new JarFile(inFile);FileOutputStream dest=new FileOutputStream(outFile);BufferedOutputStream buffDest=new BufferedOutputStream(dest);ZipOutputStream out=new ZipOutputStream(buffDest)){\n    byte[] data=new byte[1024];\n    DecompilerSettings settings=getDecompilerSettings();\n    LuytenTypeLoader typeLoader=new LuytenTypeLoader();\n    MetadataSystem metadataSystem=new MetadataSystem(typeLoader);\n    ITypeLoader jarLoader=new JarTypeLoader(jfile);\n    typeLoader.getTypeLoaders().add(jarLoader);\n    DecompilationOptions decompilationOptions=new DecompilationOptions();\n    decompilationOptions.setSettings(settings);\n    decompilationOptions.setFullDecompilation(true);\n    Enumeration<JarEntry> ent=jfile.entries();\n    Set<JarEntry> history=new HashSet<>();\n    while (ent.hasMoreElements()) {\n      JarEntry entry=ent.nextElement();\n      if (entry.getName().endsWith(\".class\")) {\n        JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n        if (history.add(etn)) {\n          out.putNextEntry(etn);\n          try {\n            String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n            TypeReference type=metadataSystem.lookupType(internalName);\n            TypeDefinition resolvedType;\n            if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n              throw new Exception(\"Unable to resolve type.\");\n            }\n            Writer writer=new OutputStreamWriter(out);\n            settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n            writer.flush();\n          }\n  finally {\n            out.closeEntry();\n          }\n        }\n      }\n else {\n        try {\n          JarEntry etn=new JarEntry(entry.getName());\n          if (history.add(etn))           continue;\n          history.add(etn);\n          out.putNextEntry(etn);\n          try {\n            InputStream in=jfile.getInputStream(entry);\n            if (in != null) {\n              try {\n                int count;\n                while ((count=in.read(data,0,1024)) != -1) {\n                  out.write(data,0,count);\n                }\n              }\n  finally {\n                in.close();\n              }\n            }\n          }\n  finally {\n            out.closeEntry();\n          }\n        }\n catch (        ZipException ze) {\n          if (!ze.getMessage().contains(\"duplicate\")) {\n            throw ze;\n          }\n        }\n      }\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 176,
        "startColumnNumber" : 24,
        "endLineNumber" : 176,
        "endColumnNumber" : 40
      },
      "nodeContext" : "history.add(etn)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<java.util.jar.JarEntry>"
  }, {
    "nodeContext" : "history",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 200,
      "startColumnNumber" : 28,
      "endLineNumber" : 200,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 200,
        "startColumnNumber" : 28,
        "endLineNumber" : 200,
        "endColumnNumber" : 44
      },
      "nodeContext" : "history.add(etn)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 200,
        "startColumnNumber" : 24,
        "endLineNumber" : 201,
        "endColumnNumber" : 37
      },
      "nodeContext" : "if (history.add(etn)) continue;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 955,
        "startLineNumber" : 198,
        "startColumnNumber" : 24,
        "endLineNumber" : 219,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  JarEntry etn=new JarEntry(entry.getName());\n  if (history.add(etn))   continue;\n  history.add(etn);\n  out.putNextEntry(etn);\n  try {\n    InputStream in=jfile.getInputStream(entry);\n    if (in != null) {\n      try {\n        int count;\n        while ((count=in.read(data,0,1024)) != -1) {\n          out.write(data,0,count);\n        }\n      }\n  finally {\n        in.close();\n      }\n    }\n  }\n  finally {\n    out.closeEntry();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1251,
        "startLineNumber" : 198,
        "startColumnNumber" : 20,
        "endLineNumber" : 225,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  JarEntry etn=new JarEntry(entry.getName());\n  if (history.add(etn))   continue;\n  history.add(etn);\n  out.putNextEntry(etn);\n  try {\n    InputStream in=jfile.getInputStream(entry);\n    if (in != null) {\n      try {\n        int count;\n        while ((count=in.read(data,0,1024)) != -1) {\n          out.write(data,0,count);\n        }\n      }\n  finally {\n        in.close();\n      }\n    }\n  }\n  finally {\n    out.closeEntry();\n  }\n}\n catch (ZipException ze) {\n  if (!ze.getMessage().contains(\"duplicate\")) {\n    throw ze;\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 99,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1291,
        "startLineNumber" : 197,
        "startColumnNumber" : 23,
        "endLineNumber" : 226,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  try {\n    JarEntry etn=new JarEntry(entry.getName());\n    if (history.add(etn))     continue;\n    history.add(etn);\n    out.putNextEntry(etn);\n    try {\n      InputStream in=jfile.getInputStream(entry);\n      if (in != null) {\n        try {\n          int count;\n          while ((count=in.read(data,0,1024)) != -1) {\n            out.write(data,0,count);\n          }\n        }\n  finally {\n          in.close();\n        }\n      }\n    }\n  finally {\n      out.closeEntry();\n    }\n  }\n catch (  ZipException ze) {\n    if (!ze.getMessage().contains(\"duplicate\")) {\n      throw ze;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2617,
        "startLineNumber" : 173,
        "startColumnNumber" : 16,
        "endLineNumber" : 226,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (entry.getName().endsWith(\".class\")) {\n  JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n  if (history.add(etn)) {\n    out.putNextEntry(etn);\n    try {\n      String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n      TypeReference type=metadataSystem.lookupType(internalName);\n      TypeDefinition resolvedType;\n      if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n        throw new Exception(\"Unable to resolve type.\");\n      }\n      Writer writer=new OutputStreamWriter(out);\n      settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n      writer.flush();\n    }\n  finally {\n      out.closeEntry();\n    }\n  }\n}\n else {\n  try {\n    JarEntry etn=new JarEntry(entry.getName());\n    if (history.add(etn))     continue;\n    history.add(etn);\n    out.putNextEntry(etn);\n    try {\n      InputStream in=jfile.getInputStream(entry);\n      if (in != null) {\n        try {\n          int count;\n          while ((count=in.read(data,0,1024)) != -1) {\n            out.write(data,0,count);\n          }\n        }\n  finally {\n          in.close();\n        }\n      }\n    }\n  finally {\n      out.closeEntry();\n    }\n  }\n catch (  ZipException ze) {\n    if (!ze.getMessage().contains(\"duplicate\")) {\n      throw ze;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 213,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2701,
        "startLineNumber" : 171,
        "startColumnNumber" : 42,
        "endLineNumber" : 227,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  JarEntry entry=ent.nextElement();\n  if (entry.getName().endsWith(\".class\")) {\n    JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n    if (history.add(etn)) {\n      out.putNextEntry(etn);\n      try {\n        String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n        TypeReference type=metadataSystem.lookupType(internalName);\n        TypeDefinition resolvedType;\n        if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n          throw new Exception(\"Unable to resolve type.\");\n        }\n        Writer writer=new OutputStreamWriter(out);\n        settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n        writer.flush();\n      }\n  finally {\n        out.closeEntry();\n      }\n    }\n  }\n else {\n    try {\n      JarEntry etn=new JarEntry(entry.getName());\n      if (history.add(etn))       continue;\n      history.add(etn);\n      out.putNextEntry(etn);\n      try {\n        InputStream in=jfile.getInputStream(entry);\n        if (in != null) {\n          try {\n            int count;\n            while ((count=in.read(data,0,1024)) != -1) {\n              out.write(data,0,count);\n            }\n          }\n  finally {\n            in.close();\n          }\n        }\n      }\n  finally {\n        out.closeEntry();\n      }\n    }\n catch (    ZipException ze) {\n      if (!ze.getMessage().contains(\"duplicate\")) {\n        throw ze;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2731,
        "startLineNumber" : 171,
        "startColumnNumber" : 12,
        "endLineNumber" : 227,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (ent.hasMoreElements()) {\n  JarEntry entry=ent.nextElement();\n  if (entry.getName().endsWith(\".class\")) {\n    JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n    if (history.add(etn)) {\n      out.putNextEntry(etn);\n      try {\n        String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n        TypeReference type=metadataSystem.lookupType(internalName);\n        TypeDefinition resolvedType;\n        if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n          throw new Exception(\"Unable to resolve type.\");\n        }\n        Writer writer=new OutputStreamWriter(out);\n        settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n        writer.flush();\n      }\n  finally {\n        out.closeEntry();\n      }\n    }\n  }\n else {\n    try {\n      JarEntry etn=new JarEntry(entry.getName());\n      if (history.add(etn))       continue;\n      history.add(etn);\n      out.putNextEntry(etn);\n      try {\n        InputStream in=jfile.getInputStream(entry);\n        if (in != null) {\n          try {\n            int count;\n            while ((count=in.read(data,0,1024)) != -1) {\n              out.write(data,0,count);\n            }\n          }\n  finally {\n            in.close();\n          }\n        }\n      }\n  finally {\n        out.closeEntry();\n      }\n    }\n catch (    ZipException ze) {\n      if (!ze.getMessage().contains(\"duplicate\")) {\n        throw ze;\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 226,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3437,
        "startLineNumber" : 157,
        "startColumnNumber" : 66,
        "endLineNumber" : 228,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  byte[] data=new byte[1024];\n  DecompilerSettings settings=getDecompilerSettings();\n  LuytenTypeLoader typeLoader=new LuytenTypeLoader();\n  MetadataSystem metadataSystem=new MetadataSystem(typeLoader);\n  ITypeLoader jarLoader=new JarTypeLoader(jfile);\n  typeLoader.getTypeLoaders().add(jarLoader);\n  DecompilationOptions decompilationOptions=new DecompilationOptions();\n  decompilationOptions.setSettings(settings);\n  decompilationOptions.setFullDecompilation(true);\n  Enumeration<JarEntry> ent=jfile.entries();\n  Set<JarEntry> history=new HashSet<>();\n  while (ent.hasMoreElements()) {\n    JarEntry entry=ent.nextElement();\n    if (entry.getName().endsWith(\".class\")) {\n      JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n      if (history.add(etn)) {\n        out.putNextEntry(etn);\n        try {\n          String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n          TypeReference type=metadataSystem.lookupType(internalName);\n          TypeDefinition resolvedType;\n          if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n            throw new Exception(\"Unable to resolve type.\");\n          }\n          Writer writer=new OutputStreamWriter(out);\n          settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n          writer.flush();\n        }\n  finally {\n          out.closeEntry();\n        }\n      }\n    }\n else {\n      try {\n        JarEntry etn=new JarEntry(entry.getName());\n        if (history.add(etn))         continue;\n        history.add(etn);\n        out.putNextEntry(etn);\n        try {\n          InputStream in=jfile.getInputStream(entry);\n          if (in != null) {\n            try {\n              int count;\n              while ((count=in.read(data,0,1024)) != -1) {\n                out.write(data,0,count);\n              }\n            }\n  finally {\n              in.close();\n            }\n          }\n        }\n  finally {\n          out.closeEntry();\n        }\n      }\n catch (      ZipException ze) {\n        if (!ze.getMessage().contains(\"duplicate\")) {\n          throw ze;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3690,
        "startLineNumber" : 154,
        "startColumnNumber" : 8,
        "endLineNumber" : 228,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (JarFile jfile=new JarFile(inFile);FileOutputStream dest=new FileOutputStream(outFile);BufferedOutputStream buffDest=new BufferedOutputStream(dest);ZipOutputStream out=new ZipOutputStream(buffDest)){\n  byte[] data=new byte[1024];\n  DecompilerSettings settings=getDecompilerSettings();\n  LuytenTypeLoader typeLoader=new LuytenTypeLoader();\n  MetadataSystem metadataSystem=new MetadataSystem(typeLoader);\n  ITypeLoader jarLoader=new JarTypeLoader(jfile);\n  typeLoader.getTypeLoaders().add(jarLoader);\n  DecompilationOptions decompilationOptions=new DecompilationOptions();\n  decompilationOptions.setSettings(settings);\n  decompilationOptions.setFullDecompilation(true);\n  Enumeration<JarEntry> ent=jfile.entries();\n  Set<JarEntry> history=new HashSet<>();\n  while (ent.hasMoreElements()) {\n    JarEntry entry=ent.nextElement();\n    if (entry.getName().endsWith(\".class\")) {\n      JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n      if (history.add(etn)) {\n        out.putNextEntry(etn);\n        try {\n          String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n          TypeReference type=metadataSystem.lookupType(internalName);\n          TypeDefinition resolvedType;\n          if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n            throw new Exception(\"Unable to resolve type.\");\n          }\n          Writer writer=new OutputStreamWriter(out);\n          settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n          writer.flush();\n        }\n  finally {\n          out.closeEntry();\n        }\n      }\n    }\n else {\n      try {\n        JarEntry etn=new JarEntry(entry.getName());\n        if (history.add(etn))         continue;\n        history.add(etn);\n        out.putNextEntry(etn);\n        try {\n          InputStream in=jfile.getInputStream(entry);\n          if (in != null) {\n            try {\n              int count;\n              while ((count=in.read(data,0,1024)) != -1) {\n                out.write(data,0,count);\n              }\n            }\n  finally {\n              in.close();\n            }\n          }\n        }\n  finally {\n          out.closeEntry();\n        }\n      }\n catch (      ZipException ze) {\n        if (!ze.getMessage().contains(\"duplicate\")) {\n          throw ze;\n        }\n      }\n    }\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 356,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3706,
        "startLineNumber" : 153,
        "startColumnNumber" : 29,
        "endLineNumber" : 229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try (JarFile jfile=new JarFile(inFile);FileOutputStream dest=new FileOutputStream(outFile);BufferedOutputStream buffDest=new BufferedOutputStream(dest);ZipOutputStream out=new ZipOutputStream(buffDest)){\n    byte[] data=new byte[1024];\n    DecompilerSettings settings=getDecompilerSettings();\n    LuytenTypeLoader typeLoader=new LuytenTypeLoader();\n    MetadataSystem metadataSystem=new MetadataSystem(typeLoader);\n    ITypeLoader jarLoader=new JarTypeLoader(jfile);\n    typeLoader.getTypeLoaders().add(jarLoader);\n    DecompilationOptions decompilationOptions=new DecompilationOptions();\n    decompilationOptions.setSettings(settings);\n    decompilationOptions.setFullDecompilation(true);\n    Enumeration<JarEntry> ent=jfile.entries();\n    Set<JarEntry> history=new HashSet<>();\n    while (ent.hasMoreElements()) {\n      JarEntry entry=ent.nextElement();\n      if (entry.getName().endsWith(\".class\")) {\n        JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n        if (history.add(etn)) {\n          out.putNextEntry(etn);\n          try {\n            String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n            TypeReference type=metadataSystem.lookupType(internalName);\n            TypeDefinition resolvedType;\n            if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n              throw new Exception(\"Unable to resolve type.\");\n            }\n            Writer writer=new OutputStreamWriter(out);\n            settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n            writer.flush();\n          }\n  finally {\n            out.closeEntry();\n          }\n        }\n      }\n else {\n        try {\n          JarEntry etn=new JarEntry(entry.getName());\n          if (history.add(etn))           continue;\n          history.add(etn);\n          out.putNextEntry(etn);\n          try {\n            InputStream in=jfile.getInputStream(entry);\n            if (in != null) {\n              try {\n                int count;\n                while ((count=in.read(data,0,1024)) != -1) {\n                  out.write(data,0,count);\n                }\n              }\n  finally {\n                in.close();\n              }\n            }\n          }\n  finally {\n            out.closeEntry();\n          }\n        }\n catch (        ZipException ze) {\n          if (!ze.getMessage().contains(\"duplicate\")) {\n            throw ze;\n          }\n        }\n      }\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3838,
        "startLineNumber" : 149,
        "startColumnNumber" : 4,
        "endLineNumber" : 229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @author DeathMarine\n */\nprivate void doSaveJarDecompiled(File inFile,File outFile) throws Exception {\n  try (JarFile jfile=new JarFile(inFile);FileOutputStream dest=new FileOutputStream(outFile);BufferedOutputStream buffDest=new BufferedOutputStream(dest);ZipOutputStream out=new ZipOutputStream(buffDest)){\n    byte[] data=new byte[1024];\n    DecompilerSettings settings=getDecompilerSettings();\n    LuytenTypeLoader typeLoader=new LuytenTypeLoader();\n    MetadataSystem metadataSystem=new MetadataSystem(typeLoader);\n    ITypeLoader jarLoader=new JarTypeLoader(jfile);\n    typeLoader.getTypeLoaders().add(jarLoader);\n    DecompilationOptions decompilationOptions=new DecompilationOptions();\n    decompilationOptions.setSettings(settings);\n    decompilationOptions.setFullDecompilation(true);\n    Enumeration<JarEntry> ent=jfile.entries();\n    Set<JarEntry> history=new HashSet<>();\n    while (ent.hasMoreElements()) {\n      JarEntry entry=ent.nextElement();\n      if (entry.getName().endsWith(\".class\")) {\n        JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n        if (history.add(etn)) {\n          out.putNextEntry(etn);\n          try {\n            String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n            TypeReference type=metadataSystem.lookupType(internalName);\n            TypeDefinition resolvedType;\n            if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n              throw new Exception(\"Unable to resolve type.\");\n            }\n            Writer writer=new OutputStreamWriter(out);\n            settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n            writer.flush();\n          }\n  finally {\n            out.closeEntry();\n          }\n        }\n      }\n else {\n        try {\n          JarEntry etn=new JarEntry(entry.getName());\n          if (history.add(etn))           continue;\n          history.add(etn);\n          out.putNextEntry(etn);\n          try {\n            InputStream in=jfile.getInputStream(entry);\n            if (in != null) {\n              try {\n                int count;\n                while ((count=in.read(data,0,1024)) != -1) {\n                  out.write(data,0,count);\n                }\n              }\n  finally {\n                in.close();\n              }\n            }\n          }\n  finally {\n            out.closeEntry();\n          }\n        }\n catch (        ZipException ze) {\n          if (!ze.getMessage().contains(\"duplicate\")) {\n            throw ze;\n          }\n        }\n      }\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 200,
        "startColumnNumber" : 28,
        "endLineNumber" : 200,
        "endColumnNumber" : 44
      },
      "nodeContext" : "history.add(etn)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<java.util.jar.JarEntry>"
  }, {
    "nodeContext" : "history",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 202,
      "startColumnNumber" : 24,
      "endLineNumber" : 202,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 202,
        "startColumnNumber" : 24,
        "endLineNumber" : 202,
        "endColumnNumber" : 40
      },
      "nodeContext" : "history.add(etn)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 202,
        "startColumnNumber" : 24,
        "endLineNumber" : 202,
        "endColumnNumber" : 41
      },
      "nodeContext" : "history.add(etn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 955,
        "startLineNumber" : 198,
        "startColumnNumber" : 24,
        "endLineNumber" : 219,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  JarEntry etn=new JarEntry(entry.getName());\n  if (history.add(etn))   continue;\n  history.add(etn);\n  out.putNextEntry(etn);\n  try {\n    InputStream in=jfile.getInputStream(entry);\n    if (in != null) {\n      try {\n        int count;\n        while ((count=in.read(data,0,1024)) != -1) {\n          out.write(data,0,count);\n        }\n      }\n  finally {\n        in.close();\n      }\n    }\n  }\n  finally {\n    out.closeEntry();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1251,
        "startLineNumber" : 198,
        "startColumnNumber" : 20,
        "endLineNumber" : 225,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  JarEntry etn=new JarEntry(entry.getName());\n  if (history.add(etn))   continue;\n  history.add(etn);\n  out.putNextEntry(etn);\n  try {\n    InputStream in=jfile.getInputStream(entry);\n    if (in != null) {\n      try {\n        int count;\n        while ((count=in.read(data,0,1024)) != -1) {\n          out.write(data,0,count);\n        }\n      }\n  finally {\n        in.close();\n      }\n    }\n  }\n  finally {\n    out.closeEntry();\n  }\n}\n catch (ZipException ze) {\n  if (!ze.getMessage().contains(\"duplicate\")) {\n    throw ze;\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 99,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1291,
        "startLineNumber" : 197,
        "startColumnNumber" : 23,
        "endLineNumber" : 226,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  try {\n    JarEntry etn=new JarEntry(entry.getName());\n    if (history.add(etn))     continue;\n    history.add(etn);\n    out.putNextEntry(etn);\n    try {\n      InputStream in=jfile.getInputStream(entry);\n      if (in != null) {\n        try {\n          int count;\n          while ((count=in.read(data,0,1024)) != -1) {\n            out.write(data,0,count);\n          }\n        }\n  finally {\n          in.close();\n        }\n      }\n    }\n  finally {\n      out.closeEntry();\n    }\n  }\n catch (  ZipException ze) {\n    if (!ze.getMessage().contains(\"duplicate\")) {\n      throw ze;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2617,
        "startLineNumber" : 173,
        "startColumnNumber" : 16,
        "endLineNumber" : 226,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (entry.getName().endsWith(\".class\")) {\n  JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n  if (history.add(etn)) {\n    out.putNextEntry(etn);\n    try {\n      String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n      TypeReference type=metadataSystem.lookupType(internalName);\n      TypeDefinition resolvedType;\n      if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n        throw new Exception(\"Unable to resolve type.\");\n      }\n      Writer writer=new OutputStreamWriter(out);\n      settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n      writer.flush();\n    }\n  finally {\n      out.closeEntry();\n    }\n  }\n}\n else {\n  try {\n    JarEntry etn=new JarEntry(entry.getName());\n    if (history.add(etn))     continue;\n    history.add(etn);\n    out.putNextEntry(etn);\n    try {\n      InputStream in=jfile.getInputStream(entry);\n      if (in != null) {\n        try {\n          int count;\n          while ((count=in.read(data,0,1024)) != -1) {\n            out.write(data,0,count);\n          }\n        }\n  finally {\n          in.close();\n        }\n      }\n    }\n  finally {\n      out.closeEntry();\n    }\n  }\n catch (  ZipException ze) {\n    if (!ze.getMessage().contains(\"duplicate\")) {\n      throw ze;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 213,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2701,
        "startLineNumber" : 171,
        "startColumnNumber" : 42,
        "endLineNumber" : 227,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  JarEntry entry=ent.nextElement();\n  if (entry.getName().endsWith(\".class\")) {\n    JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n    if (history.add(etn)) {\n      out.putNextEntry(etn);\n      try {\n        String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n        TypeReference type=metadataSystem.lookupType(internalName);\n        TypeDefinition resolvedType;\n        if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n          throw new Exception(\"Unable to resolve type.\");\n        }\n        Writer writer=new OutputStreamWriter(out);\n        settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n        writer.flush();\n      }\n  finally {\n        out.closeEntry();\n      }\n    }\n  }\n else {\n    try {\n      JarEntry etn=new JarEntry(entry.getName());\n      if (history.add(etn))       continue;\n      history.add(etn);\n      out.putNextEntry(etn);\n      try {\n        InputStream in=jfile.getInputStream(entry);\n        if (in != null) {\n          try {\n            int count;\n            while ((count=in.read(data,0,1024)) != -1) {\n              out.write(data,0,count);\n            }\n          }\n  finally {\n            in.close();\n          }\n        }\n      }\n  finally {\n        out.closeEntry();\n      }\n    }\n catch (    ZipException ze) {\n      if (!ze.getMessage().contains(\"duplicate\")) {\n        throw ze;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2731,
        "startLineNumber" : 171,
        "startColumnNumber" : 12,
        "endLineNumber" : 227,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (ent.hasMoreElements()) {\n  JarEntry entry=ent.nextElement();\n  if (entry.getName().endsWith(\".class\")) {\n    JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n    if (history.add(etn)) {\n      out.putNextEntry(etn);\n      try {\n        String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n        TypeReference type=metadataSystem.lookupType(internalName);\n        TypeDefinition resolvedType;\n        if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n          throw new Exception(\"Unable to resolve type.\");\n        }\n        Writer writer=new OutputStreamWriter(out);\n        settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n        writer.flush();\n      }\n  finally {\n        out.closeEntry();\n      }\n    }\n  }\n else {\n    try {\n      JarEntry etn=new JarEntry(entry.getName());\n      if (history.add(etn))       continue;\n      history.add(etn);\n      out.putNextEntry(etn);\n      try {\n        InputStream in=jfile.getInputStream(entry);\n        if (in != null) {\n          try {\n            int count;\n            while ((count=in.read(data,0,1024)) != -1) {\n              out.write(data,0,count);\n            }\n          }\n  finally {\n            in.close();\n          }\n        }\n      }\n  finally {\n        out.closeEntry();\n      }\n    }\n catch (    ZipException ze) {\n      if (!ze.getMessage().contains(\"duplicate\")) {\n        throw ze;\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 226,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3437,
        "startLineNumber" : 157,
        "startColumnNumber" : 66,
        "endLineNumber" : 228,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  byte[] data=new byte[1024];\n  DecompilerSettings settings=getDecompilerSettings();\n  LuytenTypeLoader typeLoader=new LuytenTypeLoader();\n  MetadataSystem metadataSystem=new MetadataSystem(typeLoader);\n  ITypeLoader jarLoader=new JarTypeLoader(jfile);\n  typeLoader.getTypeLoaders().add(jarLoader);\n  DecompilationOptions decompilationOptions=new DecompilationOptions();\n  decompilationOptions.setSettings(settings);\n  decompilationOptions.setFullDecompilation(true);\n  Enumeration<JarEntry> ent=jfile.entries();\n  Set<JarEntry> history=new HashSet<>();\n  while (ent.hasMoreElements()) {\n    JarEntry entry=ent.nextElement();\n    if (entry.getName().endsWith(\".class\")) {\n      JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n      if (history.add(etn)) {\n        out.putNextEntry(etn);\n        try {\n          String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n          TypeReference type=metadataSystem.lookupType(internalName);\n          TypeDefinition resolvedType;\n          if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n            throw new Exception(\"Unable to resolve type.\");\n          }\n          Writer writer=new OutputStreamWriter(out);\n          settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n          writer.flush();\n        }\n  finally {\n          out.closeEntry();\n        }\n      }\n    }\n else {\n      try {\n        JarEntry etn=new JarEntry(entry.getName());\n        if (history.add(etn))         continue;\n        history.add(etn);\n        out.putNextEntry(etn);\n        try {\n          InputStream in=jfile.getInputStream(entry);\n          if (in != null) {\n            try {\n              int count;\n              while ((count=in.read(data,0,1024)) != -1) {\n                out.write(data,0,count);\n              }\n            }\n  finally {\n              in.close();\n            }\n          }\n        }\n  finally {\n          out.closeEntry();\n        }\n      }\n catch (      ZipException ze) {\n        if (!ze.getMessage().contains(\"duplicate\")) {\n          throw ze;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3690,
        "startLineNumber" : 154,
        "startColumnNumber" : 8,
        "endLineNumber" : 228,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (JarFile jfile=new JarFile(inFile);FileOutputStream dest=new FileOutputStream(outFile);BufferedOutputStream buffDest=new BufferedOutputStream(dest);ZipOutputStream out=new ZipOutputStream(buffDest)){\n  byte[] data=new byte[1024];\n  DecompilerSettings settings=getDecompilerSettings();\n  LuytenTypeLoader typeLoader=new LuytenTypeLoader();\n  MetadataSystem metadataSystem=new MetadataSystem(typeLoader);\n  ITypeLoader jarLoader=new JarTypeLoader(jfile);\n  typeLoader.getTypeLoaders().add(jarLoader);\n  DecompilationOptions decompilationOptions=new DecompilationOptions();\n  decompilationOptions.setSettings(settings);\n  decompilationOptions.setFullDecompilation(true);\n  Enumeration<JarEntry> ent=jfile.entries();\n  Set<JarEntry> history=new HashSet<>();\n  while (ent.hasMoreElements()) {\n    JarEntry entry=ent.nextElement();\n    if (entry.getName().endsWith(\".class\")) {\n      JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n      if (history.add(etn)) {\n        out.putNextEntry(etn);\n        try {\n          String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n          TypeReference type=metadataSystem.lookupType(internalName);\n          TypeDefinition resolvedType;\n          if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n            throw new Exception(\"Unable to resolve type.\");\n          }\n          Writer writer=new OutputStreamWriter(out);\n          settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n          writer.flush();\n        }\n  finally {\n          out.closeEntry();\n        }\n      }\n    }\n else {\n      try {\n        JarEntry etn=new JarEntry(entry.getName());\n        if (history.add(etn))         continue;\n        history.add(etn);\n        out.putNextEntry(etn);\n        try {\n          InputStream in=jfile.getInputStream(entry);\n          if (in != null) {\n            try {\n              int count;\n              while ((count=in.read(data,0,1024)) != -1) {\n                out.write(data,0,count);\n              }\n            }\n  finally {\n              in.close();\n            }\n          }\n        }\n  finally {\n          out.closeEntry();\n        }\n      }\n catch (      ZipException ze) {\n        if (!ze.getMessage().contains(\"duplicate\")) {\n          throw ze;\n        }\n      }\n    }\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 356,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3706,
        "startLineNumber" : 153,
        "startColumnNumber" : 29,
        "endLineNumber" : 229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try (JarFile jfile=new JarFile(inFile);FileOutputStream dest=new FileOutputStream(outFile);BufferedOutputStream buffDest=new BufferedOutputStream(dest);ZipOutputStream out=new ZipOutputStream(buffDest)){\n    byte[] data=new byte[1024];\n    DecompilerSettings settings=getDecompilerSettings();\n    LuytenTypeLoader typeLoader=new LuytenTypeLoader();\n    MetadataSystem metadataSystem=new MetadataSystem(typeLoader);\n    ITypeLoader jarLoader=new JarTypeLoader(jfile);\n    typeLoader.getTypeLoaders().add(jarLoader);\n    DecompilationOptions decompilationOptions=new DecompilationOptions();\n    decompilationOptions.setSettings(settings);\n    decompilationOptions.setFullDecompilation(true);\n    Enumeration<JarEntry> ent=jfile.entries();\n    Set<JarEntry> history=new HashSet<>();\n    while (ent.hasMoreElements()) {\n      JarEntry entry=ent.nextElement();\n      if (entry.getName().endsWith(\".class\")) {\n        JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n        if (history.add(etn)) {\n          out.putNextEntry(etn);\n          try {\n            String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n            TypeReference type=metadataSystem.lookupType(internalName);\n            TypeDefinition resolvedType;\n            if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n              throw new Exception(\"Unable to resolve type.\");\n            }\n            Writer writer=new OutputStreamWriter(out);\n            settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n            writer.flush();\n          }\n  finally {\n            out.closeEntry();\n          }\n        }\n      }\n else {\n        try {\n          JarEntry etn=new JarEntry(entry.getName());\n          if (history.add(etn))           continue;\n          history.add(etn);\n          out.putNextEntry(etn);\n          try {\n            InputStream in=jfile.getInputStream(entry);\n            if (in != null) {\n              try {\n                int count;\n                while ((count=in.read(data,0,1024)) != -1) {\n                  out.write(data,0,count);\n                }\n              }\n  finally {\n                in.close();\n              }\n            }\n          }\n  finally {\n            out.closeEntry();\n          }\n        }\n catch (        ZipException ze) {\n          if (!ze.getMessage().contains(\"duplicate\")) {\n            throw ze;\n          }\n        }\n      }\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3838,
        "startLineNumber" : 149,
        "startColumnNumber" : 4,
        "endLineNumber" : 229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @author DeathMarine\n */\nprivate void doSaveJarDecompiled(File inFile,File outFile) throws Exception {\n  try (JarFile jfile=new JarFile(inFile);FileOutputStream dest=new FileOutputStream(outFile);BufferedOutputStream buffDest=new BufferedOutputStream(dest);ZipOutputStream out=new ZipOutputStream(buffDest)){\n    byte[] data=new byte[1024];\n    DecompilerSettings settings=getDecompilerSettings();\n    LuytenTypeLoader typeLoader=new LuytenTypeLoader();\n    MetadataSystem metadataSystem=new MetadataSystem(typeLoader);\n    ITypeLoader jarLoader=new JarTypeLoader(jfile);\n    typeLoader.getTypeLoaders().add(jarLoader);\n    DecompilationOptions decompilationOptions=new DecompilationOptions();\n    decompilationOptions.setSettings(settings);\n    decompilationOptions.setFullDecompilation(true);\n    Enumeration<JarEntry> ent=jfile.entries();\n    Set<JarEntry> history=new HashSet<>();\n    while (ent.hasMoreElements()) {\n      JarEntry entry=ent.nextElement();\n      if (entry.getName().endsWith(\".class\")) {\n        JarEntry etn=new JarEntry(entry.getName().replace(\".class\",\".java\"));\n        if (history.add(etn)) {\n          out.putNextEntry(etn);\n          try {\n            String internalName=StringUtilities.removeRight(entry.getName(),\".class\");\n            TypeReference type=metadataSystem.lookupType(internalName);\n            TypeDefinition resolvedType;\n            if ((type == null) || ((resolvedType=type.resolve()) == null)) {\n              throw new Exception(\"Unable to resolve type.\");\n            }\n            Writer writer=new OutputStreamWriter(out);\n            settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(writer),decompilationOptions);\n            writer.flush();\n          }\n  finally {\n            out.closeEntry();\n          }\n        }\n      }\n else {\n        try {\n          JarEntry etn=new JarEntry(entry.getName());\n          if (history.add(etn))           continue;\n          history.add(etn);\n          out.putNextEntry(etn);\n          try {\n            InputStream in=jfile.getInputStream(entry);\n            if (in != null) {\n              try {\n                int count;\n                while ((count=in.read(data,0,1024)) != -1) {\n                  out.write(data,0,count);\n                }\n              }\n  finally {\n                in.close();\n              }\n            }\n          }\n  finally {\n            out.closeEntry();\n          }\n        }\n catch (        ZipException ze) {\n          if (!ze.getMessage().contains(\"duplicate\")) {\n            throw ze;\n          }\n        }\n      }\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 202,
        "startColumnNumber" : 24,
        "endLineNumber" : 202,
        "endColumnNumber" : 41
      },
      "nodeContext" : "history.add(etn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<java.util.jar.JarEntry>"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 176,
    "startColumnNumber" : 24,
    "endLineNumber" : 176,
    "endColumnNumber" : 31
  }, {
    "charLength" : 7,
    "startLineNumber" : 200,
    "startColumnNumber" : 28,
    "endLineNumber" : 200,
    "endColumnNumber" : 35
  }, {
    "charLength" : 7,
    "startLineNumber" : 202,
    "startColumnNumber" : 24,
    "endLineNumber" : 202,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}