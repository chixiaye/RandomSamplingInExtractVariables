{
  "id" : 34,
  "expression" : "Flowable.range(0,size)",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/perf/java/io/reactivex/InputWithIncrementingInteger.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Flowable.range(0,size)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 40,
      "startColumnNumber" : 21,
      "endLineNumber" : 40,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 44
      },
      "nodeContext" : "observable=Flowable.range(0,size)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 45
      },
      "nodeContext" : "observable=Flowable.range(0,size);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1271,
        "startLineNumber" : 37,
        "startColumnNumber" : 42,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.bh=bh;\n  final int size=getSize();\n  observable=Flowable.range(0,size);\n  firehose=Flowable.create(new Publisher<Integer>(){\n    @Override public void subscribe(    Subscriber<? super Integer> s){\n      s.onSubscribe(EmptySubscription.INSTANCE);\n      for (int i=0; i < size; i++) {\n        s.onNext(i);\n      }\n      s.onComplete();\n    }\n  }\n);\n  iterable=new Iterable<Integer>(){\n    @Override public Iterator<Integer> iterator(){\n      return new Iterator<Integer>(){\n        int i=0;\n        @Override public boolean hasNext(){\n          return i < size;\n        }\n        @Override public Integer next(){\n          Blackhole.consumeCPU(10);\n          return i++;\n        }\n        @Override public void remove(){\n        }\n      }\n;\n    }\n  }\n;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1321,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Setup public void setup(final Blackhole bh){\n  this.bh=bh;\n  final int size=getSize();\n  observable=Flowable.range(0,size);\n  firehose=Flowable.create(new Publisher<Integer>(){\n    @Override public void subscribe(    Subscriber<? super Integer> s){\n      s.onSubscribe(EmptySubscription.INSTANCE);\n      for (int i=0; i < size; i++) {\n        s.onNext(i);\n      }\n      s.onComplete();\n    }\n  }\n);\n  iterable=new Iterable<Integer>(){\n    @Override public Iterator<Integer> iterator(){\n      return new Iterator<Integer>(){\n        int i=0;\n        @Override public boolean hasNext(){\n          return i < size;\n        }\n        @Override public Integer next(){\n          Blackhole.consumeCPU(10);\n          return i++;\n        }\n        @Override public void remove(){\n        }\n      }\n;\n    }\n  }\n;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 157,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 45
      },
      "nodeContext" : "observable=Flowable.range(0,size);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "io.reactivex.Flowable<java.lang.Integer>"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 40,
    "startColumnNumber" : 21,
    "endLineNumber" : 40,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}