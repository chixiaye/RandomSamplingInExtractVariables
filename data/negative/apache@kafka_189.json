{
  "id" : 189,
  "expression" : "0",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/upgrade-system-tests-28/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 47,
      "startColumnNumber" : 41,
      "endLineNumber" : 47,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 47,
        "startColumnNumber" : 36,
        "endLineNumber" : 47,
        "endColumnNumber" : 43
      },
      "nodeContext" : "args[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 47,
        "startColumnNumber" : 21,
        "endLineNumber" : 47,
        "endColumnNumber" : 43
      },
      "nodeContext" : "propFileName=args[0]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 44
      },
      "nodeContext" : "final String propFileName=args[0];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2608,
        "startLineNumber" : 41,
        "startColumnNumber" : 68,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args.length < 2) {\n    System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n    Exit.exit(1);\n  }\n  final String propFileName=args[0];\n  final String command=args[1];\n  final boolean disableAutoTerminate=args.length > 2;\n  final Properties streamsProperties=Utils.loadProps(propFileName);\n  final String kafka=streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n  final String processingGuarantee=streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n  if (kafka == null) {\n    System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n    Exit.exit(1);\n  }\n  if (\"process\".equals(command)) {\n    if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) && !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n      System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \"+ StreamsConfig.EXACTLY_ONCE);\n      Exit.exit(1);\n    }\n  }\n  System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n  System.out.println(\"command=\" + command);\n  System.out.println(\"props=\" + streamsProperties);\n  System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\nswitch (command) {\ncase \"run\":    final int numKeys=10;\n  final int maxRecordsPerKey=500;\nif (disableAutoTerminate) {\n  generatePerpetually(kafka,numKeys,maxRecordsPerKey);\n}\n else {\n  final Map<String,Set<Integer>> allData=generate(kafka,numKeys,maxRecordsPerKey,Duration.ofSeconds(30));\n  SmokeTestDriver.verify(kafka,allData,maxRecordsPerKey);\n}\nbreak;\ncase \"process\":new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\nbreak;\ndefault:System.out.println(\"unknown command: \" + command);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 267,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2816,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * args ::= kafka propFileName command disableAutoTerminate command := \"run\" | \"process\"\n * @param args\n */\npublic static void main(final String[] args) throws IOException {\n  if (args.length < 2) {\n    System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n    Exit.exit(1);\n  }\n  final String propFileName=args[0];\n  final String command=args[1];\n  final boolean disableAutoTerminate=args.length > 2;\n  final Properties streamsProperties=Utils.loadProps(propFileName);\n  final String kafka=streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n  final String processingGuarantee=streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n  if (kafka == null) {\n    System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n    Exit.exit(1);\n  }\n  if (\"process\".equals(command)) {\n    if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) && !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n      System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \"+ StreamsConfig.EXACTLY_ONCE);\n      Exit.exit(1);\n    }\n  }\n  System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n  System.out.println(\"command=\" + command);\n  System.out.println(\"props=\" + streamsProperties);\n  System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\nswitch (command) {\ncase \"run\":    final int numKeys=10;\n  final int maxRecordsPerKey=500;\nif (disableAutoTerminate) {\n  generatePerpetually(kafka,numKeys,maxRecordsPerKey);\n}\n else {\n  final Map<String,Set<Integer>> allData=generate(kafka,numKeys,maxRecordsPerKey,Duration.ofSeconds(30));\n  SmokeTestDriver.verify(kafka,allData,maxRecordsPerKey);\n}\nbreak;\ncase \"process\":new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\nbreak;\ndefault:System.out.println(\"unknown command: \" + command);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 282,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 44
      },
      "nodeContext" : "final String propFileName=args[0];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 47,
    "startColumnNumber" : 41,
    "endLineNumber" : 47,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}