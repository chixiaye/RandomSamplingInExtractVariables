{
  "id" : 107,
  "expression" : "\"Payload file doesn't exist or it is empty.\"",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-testclient/src/main/java/org/apache/pulsar/testclient/PerformanceProducer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Payload file doesn't exist or it is empty.\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 347,
      "startColumnNumber" : 51,
      "endLineNumber" : 347,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 347,
        "startColumnNumber" : 22,
        "endLineNumber" : 347,
        "endColumnNumber" : 96
      },
      "nodeContext" : "new IllegalArgumentException(\"Payload file doesn't exist or it is empty.\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 347,
        "startColumnNumber" : 16,
        "endLineNumber" : 347,
        "endColumnNumber" : 97
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Payload file doesn't exist or it is empty.\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 346,
        "startColumnNumber" : 87,
        "endLineNumber" : 348,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(\"Payload file doesn't exist or it is empty.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 346,
        "startColumnNumber" : 12,
        "endLineNumber" : 348,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Files.notExists(payloadFilePath) || Files.size(payloadFilePath) == 0) {\n  throw new IllegalArgumentException(\"Payload file doesn't exist or it is empty.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 344,
        "startColumnNumber" : 47,
        "endLineNumber" : 360,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Path payloadFilePath=Paths.get(arguments.payloadFilename);\n  if (Files.notExists(payloadFilePath) || Files.size(payloadFilePath) == 0) {\n    throw new IllegalArgumentException(\"Payload file doesn't exist or it is empty.\");\n  }\n  String delimiter=arguments.payloadDelimiter.equals(\"\\\\n\") ? \"\\n\" : arguments.payloadDelimiter;\n  String[] payloadList=new String(Files.readAllBytes(payloadFilePath),StandardCharsets.UTF_8).split(delimiter);\n  log.info(\"Reading payloads from {} and {} records read\",payloadFilePath.toAbsolutePath(),payloadList.length);\n  for (  String payload : payloadList) {\n    payloadByteList.add(payload.getBytes(StandardCharsets.UTF_8));\n  }\n  if (arguments.formatPayload) {\n    messageFormatter=getMessageFormatter(arguments.formatterClass);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1199,
        "startLineNumber" : 344,
        "startColumnNumber" : 8,
        "endLineNumber" : 364,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (arguments.payloadFilename != null) {\n  Path payloadFilePath=Paths.get(arguments.payloadFilename);\n  if (Files.notExists(payloadFilePath) || Files.size(payloadFilePath) == 0) {\n    throw new IllegalArgumentException(\"Payload file doesn't exist or it is empty.\");\n  }\n  String delimiter=arguments.payloadDelimiter.equals(\"\\\\n\") ? \"\\n\" : arguments.payloadDelimiter;\n  String[] payloadList=new String(Files.readAllBytes(payloadFilePath),StandardCharsets.UTF_8).split(delimiter);\n  log.info(\"Reading payloads from {} and {} records read\",payloadFilePath.toAbsolutePath(),payloadList.length);\n  for (  String payload : payloadList) {\n    payloadByteList.add(payload.getBytes(StandardCharsets.UTF_8));\n  }\n  if (arguments.formatPayload) {\n    messageFormatter=getMessageFormatter(arguments.formatterClass);\n  }\n}\n else {\n  for (int i=0; i < payloadBytes.length; ++i) {\n    payloadBytes[i]=(byte)(random.nextInt(26) + 65);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 142,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 10056,
        "startLineNumber" : 255,
        "startColumnNumber" : 60,
        "endLineNumber" : 481,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Arguments arguments=new Arguments();\n  JCommander jc=new JCommander(arguments);\n  jc.setProgramName(\"pulsar-perf produce\");\n  try {\n    jc.parse(args);\n  }\n catch (  ParameterException e) {\n    System.out.println(e.getMessage());\n    jc.usage();\n    PerfClientUtils.exit(-1);\n  }\n  if (arguments.help) {\n    jc.usage();\n    PerfClientUtils.exit(-1);\n  }\n  if (arguments.topics != null && arguments.topics.size() != arguments.numTopics) {\n    if (arguments.topics.size() == 1) {\n      String prefixTopicName=arguments.topics.get(0);\n      List<String> defaultTopics=Lists.newArrayList();\n      for (int i=0; i < arguments.numTopics; i++) {\n        defaultTopics.add(String.format(\"%s%s%d\",prefixTopicName,arguments.separator,i));\n      }\n      arguments.topics=defaultTopics;\n    }\n else {\n      System.out.println(\"The size of topics list should be equal to --num-topic\");\n      jc.usage();\n      PerfClientUtils.exit(-1);\n    }\n  }\n  if (arguments.confFile != null) {\n    Properties prop=new Properties(System.getProperties());\n    prop.load(new FileInputStream(arguments.confFile));\n    if (arguments.serviceURL == null) {\n      arguments.serviceURL=prop.getProperty(\"brokerServiceUrl\");\n    }\n    if (arguments.serviceURL == null) {\n      arguments.serviceURL=prop.getProperty(\"webServiceUrl\");\n    }\n    if (arguments.serviceURL == null) {\n      arguments.serviceURL=prop.getProperty(\"serviceUrl\",\"http://localhost:8080/\");\n    }\n    if (arguments.adminURL == null) {\n      arguments.adminURL=prop.getProperty(\"webServiceUrl\");\n    }\n    if (arguments.adminURL == null) {\n      arguments.adminURL=prop.getProperty(\"adminURL\",\"http://localhost:8080/\");\n    }\n    if (arguments.authPluginClassName == null) {\n      arguments.authPluginClassName=prop.getProperty(\"authPlugin\",null);\n    }\n    if (arguments.authParams == null) {\n      arguments.authParams=prop.getProperty(\"authParams\",null);\n    }\n    if (isBlank(arguments.tlsTrustCertsFilePath)) {\n      arguments.tlsTrustCertsFilePath=prop.getProperty(\"tlsTrustCertsFilePath\",\"\");\n    }\n    if (isBlank(arguments.messageKeyGenerationMode)) {\n      arguments.messageKeyGenerationMode=prop.getProperty(\"messageKeyGenerationMode\",null);\n    }\n    if (arguments.tlsAllowInsecureConnection == null) {\n      arguments.tlsAllowInsecureConnection=Boolean.parseBoolean(prop.getProperty(\"tlsAllowInsecureConnection\",\"\"));\n    }\n  }\n  PerfClientUtils.printJVMInformation(log);\n  ObjectMapper m=new ObjectMapper();\n  ObjectWriter w=m.writerWithDefaultPrettyPrinter();\n  log.info(\"Starting Pulsar perf producer with config: {}\",w.writeValueAsString(arguments));\n  final byte[] payloadBytes=new byte[arguments.msgSize];\n  Random random=new Random(0);\n  List<byte[]> payloadByteList=Lists.newArrayList();\n  if (arguments.payloadFilename != null) {\n    Path payloadFilePath=Paths.get(arguments.payloadFilename);\n    if (Files.notExists(payloadFilePath) || Files.size(payloadFilePath) == 0) {\n      throw new IllegalArgumentException(\"Payload file doesn't exist or it is empty.\");\n    }\n    String delimiter=arguments.payloadDelimiter.equals(\"\\\\n\") ? \"\\n\" : arguments.payloadDelimiter;\n    String[] payloadList=new String(Files.readAllBytes(payloadFilePath),StandardCharsets.UTF_8).split(delimiter);\n    log.info(\"Reading payloads from {} and {} records read\",payloadFilePath.toAbsolutePath(),payloadList.length);\n    for (    String payload : payloadList) {\n      payloadByteList.add(payload.getBytes(StandardCharsets.UTF_8));\n    }\n    if (arguments.formatPayload) {\n      messageFormatter=getMessageFormatter(arguments.formatterClass);\n    }\n  }\n else {\n    for (int i=0; i < payloadBytes.length; ++i) {\n      payloadBytes[i]=(byte)(random.nextInt(26) + 65);\n    }\n  }\n  long start=System.nanoTime();\n  Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n    printAggregatedThroughput(start);\n    printAggregatedStats();\n  }\n));\n  if (arguments.partitions != null) {\n    PulsarAdminBuilder clientBuilder=PulsarAdmin.builder().serviceHttpUrl(arguments.adminURL).tlsTrustCertsFilePath(arguments.tlsTrustCertsFilePath);\n    if (isNotBlank(arguments.authPluginClassName)) {\n      clientBuilder.authentication(arguments.authPluginClassName,arguments.authParams);\n    }\n    if (arguments.tlsAllowInsecureConnection != null) {\n      clientBuilder.allowTlsInsecureConnection(arguments.tlsAllowInsecureConnection);\n    }\n    try (PulsarAdmin client=clientBuilder.build()){\n      for (      String topic : arguments.topics) {\n        log.info(\"Creating partitioned topic {} with {} partitions\",topic,arguments.partitions);\n        try {\n          client.topics().createPartitionedTopic(topic,arguments.partitions);\n        }\n catch (        PulsarAdminException.ConflictException alreadyExists) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Topic {} already exists: {}\",topic,alreadyExists);\n          }\n          PartitionedTopicMetadata partitionedTopicMetadata=client.topics().getPartitionedTopicMetadata(topic);\n          if (partitionedTopicMetadata.partitions != arguments.partitions) {\n            log.error(\"Topic {} already exists but it has a wrong number of partitions: {}, expecting {}\",topic,partitionedTopicMetadata.partitions,arguments.partitions);\n            PerfClientUtils.exit(-1);\n          }\n        }\n      }\n    }\n   }\n  CountDownLatch doneLatch=new CountDownLatch(arguments.numTestThreads);\n  final long numMessagesPerThread=arguments.numMessages / arguments.numTestThreads;\n  final int msgRatePerThread=arguments.msgRate / arguments.numTestThreads;\n  for (int i=0; i < arguments.numTestThreads; i++) {\n    final int threadIdx=i;\n    executor.submit(() -> {\n      log.info(\"Started performance test thread {}\",threadIdx);\n      runProducer(threadIdx,arguments,numMessagesPerThread,msgRatePerThread,payloadByteList,payloadBytes,random,doneLatch);\n    }\n);\n  }\n  long oldTime=System.nanoTime();\n  Histogram reportHistogram=null;\n  String statsFileName=\"perf-producer-\" + System.currentTimeMillis() + \".hgrm\";\n  log.info(\"Dumping latency stats to {}\",statsFileName);\n  PrintStream histogramLog=new PrintStream(new FileOutputStream(statsFileName),false);\n  HistogramLogWriter histogramLogWriter=new HistogramLogWriter(histogramLog);\n  histogramLogWriter.outputLogFormatVersion();\n  histogramLogWriter.outputLegend();\n  while (true) {\n    try {\n      Thread.sleep(10000);\n    }\n catch (    InterruptedException e) {\n      break;\n    }\n    if (doneLatch.getCount() <= 0) {\n      break;\n    }\n    long now=System.nanoTime();\n    double elapsed=(now - oldTime) / 1e9;\n    long total=totalMessagesSent.sum();\n    double rate=messagesSent.sumThenReset() / elapsed;\n    double failureRate=messagesFailed.sumThenReset() / elapsed;\n    double throughput=bytesSent.sumThenReset() / elapsed / 1024/ 1024 * 8;\n    reportHistogram=recorder.getIntervalHistogram(reportHistogram);\n    log.info(\"Throughput produced: {} msg --- {} msg/s --- {} Mbit/s --- failure {} msg/s --- Latency: mean: {} ms - med: {} - 95pct: {} - 99pct: {} - 99.9pct: {} - 99.99pct: {} - Max: {}\",intFormat.format(total),throughputFormat.format(rate),throughputFormat.format(throughput),throughputFormat.format(failureRate),dec.format(reportHistogram.getMean() / 1000.0),dec.format(reportHistogram.getValueAtPercentile(50) / 1000.0),dec.format(reportHistogram.getValueAtPercentile(95) / 1000.0),dec.format(reportHistogram.getValueAtPercentile(99) / 1000.0),dec.format(reportHistogram.getValueAtPercentile(99.9) / 1000.0),dec.format(reportHistogram.getValueAtPercentile(99.99) / 1000.0),dec.format(reportHistogram.getMaxValue() / 1000.0));\n    histogramLogWriter.outputIntervalHistogram(reportHistogram);\n    reportHistogram.reset();\n    oldTime=now;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1074,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10112,
        "startLineNumber" : 255,
        "startColumnNumber" : 4,
        "endLineNumber" : 481,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  final Arguments arguments=new Arguments();\n  JCommander jc=new JCommander(arguments);\n  jc.setProgramName(\"pulsar-perf produce\");\n  try {\n    jc.parse(args);\n  }\n catch (  ParameterException e) {\n    System.out.println(e.getMessage());\n    jc.usage();\n    PerfClientUtils.exit(-1);\n  }\n  if (arguments.help) {\n    jc.usage();\n    PerfClientUtils.exit(-1);\n  }\n  if (arguments.topics != null && arguments.topics.size() != arguments.numTopics) {\n    if (arguments.topics.size() == 1) {\n      String prefixTopicName=arguments.topics.get(0);\n      List<String> defaultTopics=Lists.newArrayList();\n      for (int i=0; i < arguments.numTopics; i++) {\n        defaultTopics.add(String.format(\"%s%s%d\",prefixTopicName,arguments.separator,i));\n      }\n      arguments.topics=defaultTopics;\n    }\n else {\n      System.out.println(\"The size of topics list should be equal to --num-topic\");\n      jc.usage();\n      PerfClientUtils.exit(-1);\n    }\n  }\n  if (arguments.confFile != null) {\n    Properties prop=new Properties(System.getProperties());\n    prop.load(new FileInputStream(arguments.confFile));\n    if (arguments.serviceURL == null) {\n      arguments.serviceURL=prop.getProperty(\"brokerServiceUrl\");\n    }\n    if (arguments.serviceURL == null) {\n      arguments.serviceURL=prop.getProperty(\"webServiceUrl\");\n    }\n    if (arguments.serviceURL == null) {\n      arguments.serviceURL=prop.getProperty(\"serviceUrl\",\"http://localhost:8080/\");\n    }\n    if (arguments.adminURL == null) {\n      arguments.adminURL=prop.getProperty(\"webServiceUrl\");\n    }\n    if (arguments.adminURL == null) {\n      arguments.adminURL=prop.getProperty(\"adminURL\",\"http://localhost:8080/\");\n    }\n    if (arguments.authPluginClassName == null) {\n      arguments.authPluginClassName=prop.getProperty(\"authPlugin\",null);\n    }\n    if (arguments.authParams == null) {\n      arguments.authParams=prop.getProperty(\"authParams\",null);\n    }\n    if (isBlank(arguments.tlsTrustCertsFilePath)) {\n      arguments.tlsTrustCertsFilePath=prop.getProperty(\"tlsTrustCertsFilePath\",\"\");\n    }\n    if (isBlank(arguments.messageKeyGenerationMode)) {\n      arguments.messageKeyGenerationMode=prop.getProperty(\"messageKeyGenerationMode\",null);\n    }\n    if (arguments.tlsAllowInsecureConnection == null) {\n      arguments.tlsAllowInsecureConnection=Boolean.parseBoolean(prop.getProperty(\"tlsAllowInsecureConnection\",\"\"));\n    }\n  }\n  PerfClientUtils.printJVMInformation(log);\n  ObjectMapper m=new ObjectMapper();\n  ObjectWriter w=m.writerWithDefaultPrettyPrinter();\n  log.info(\"Starting Pulsar perf producer with config: {}\",w.writeValueAsString(arguments));\n  final byte[] payloadBytes=new byte[arguments.msgSize];\n  Random random=new Random(0);\n  List<byte[]> payloadByteList=Lists.newArrayList();\n  if (arguments.payloadFilename != null) {\n    Path payloadFilePath=Paths.get(arguments.payloadFilename);\n    if (Files.notExists(payloadFilePath) || Files.size(payloadFilePath) == 0) {\n      throw new IllegalArgumentException(\"Payload file doesn't exist or it is empty.\");\n    }\n    String delimiter=arguments.payloadDelimiter.equals(\"\\\\n\") ? \"\\n\" : arguments.payloadDelimiter;\n    String[] payloadList=new String(Files.readAllBytes(payloadFilePath),StandardCharsets.UTF_8).split(delimiter);\n    log.info(\"Reading payloads from {} and {} records read\",payloadFilePath.toAbsolutePath(),payloadList.length);\n    for (    String payload : payloadList) {\n      payloadByteList.add(payload.getBytes(StandardCharsets.UTF_8));\n    }\n    if (arguments.formatPayload) {\n      messageFormatter=getMessageFormatter(arguments.formatterClass);\n    }\n  }\n else {\n    for (int i=0; i < payloadBytes.length; ++i) {\n      payloadBytes[i]=(byte)(random.nextInt(26) + 65);\n    }\n  }\n  long start=System.nanoTime();\n  Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n    printAggregatedThroughput(start);\n    printAggregatedStats();\n  }\n));\n  if (arguments.partitions != null) {\n    PulsarAdminBuilder clientBuilder=PulsarAdmin.builder().serviceHttpUrl(arguments.adminURL).tlsTrustCertsFilePath(arguments.tlsTrustCertsFilePath);\n    if (isNotBlank(arguments.authPluginClassName)) {\n      clientBuilder.authentication(arguments.authPluginClassName,arguments.authParams);\n    }\n    if (arguments.tlsAllowInsecureConnection != null) {\n      clientBuilder.allowTlsInsecureConnection(arguments.tlsAllowInsecureConnection);\n    }\n    try (PulsarAdmin client=clientBuilder.build()){\n      for (      String topic : arguments.topics) {\n        log.info(\"Creating partitioned topic {} with {} partitions\",topic,arguments.partitions);\n        try {\n          client.topics().createPartitionedTopic(topic,arguments.partitions);\n        }\n catch (        PulsarAdminException.ConflictException alreadyExists) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Topic {} already exists: {}\",topic,alreadyExists);\n          }\n          PartitionedTopicMetadata partitionedTopicMetadata=client.topics().getPartitionedTopicMetadata(topic);\n          if (partitionedTopicMetadata.partitions != arguments.partitions) {\n            log.error(\"Topic {} already exists but it has a wrong number of partitions: {}, expecting {}\",topic,partitionedTopicMetadata.partitions,arguments.partitions);\n            PerfClientUtils.exit(-1);\n          }\n        }\n      }\n    }\n   }\n  CountDownLatch doneLatch=new CountDownLatch(arguments.numTestThreads);\n  final long numMessagesPerThread=arguments.numMessages / arguments.numTestThreads;\n  final int msgRatePerThread=arguments.msgRate / arguments.numTestThreads;\n  for (int i=0; i < arguments.numTestThreads; i++) {\n    final int threadIdx=i;\n    executor.submit(() -> {\n      log.info(\"Started performance test thread {}\",threadIdx);\n      runProducer(threadIdx,arguments,numMessagesPerThread,msgRatePerThread,payloadByteList,payloadBytes,random,doneLatch);\n    }\n);\n  }\n  long oldTime=System.nanoTime();\n  Histogram reportHistogram=null;\n  String statsFileName=\"perf-producer-\" + System.currentTimeMillis() + \".hgrm\";\n  log.info(\"Dumping latency stats to {}\",statsFileName);\n  PrintStream histogramLog=new PrintStream(new FileOutputStream(statsFileName),false);\n  HistogramLogWriter histogramLogWriter=new HistogramLogWriter(histogramLog);\n  histogramLogWriter.outputLogFormatVersion();\n  histogramLogWriter.outputLegend();\n  while (true) {\n    try {\n      Thread.sleep(10000);\n    }\n catch (    InterruptedException e) {\n      break;\n    }\n    if (doneLatch.getCount() <= 0) {\n      break;\n    }\n    long now=System.nanoTime();\n    double elapsed=(now - oldTime) / 1e9;\n    long total=totalMessagesSent.sum();\n    double rate=messagesSent.sumThenReset() / elapsed;\n    double failureRate=messagesFailed.sumThenReset() / elapsed;\n    double throughput=bytesSent.sumThenReset() / elapsed / 1024/ 1024 * 8;\n    reportHistogram=recorder.getIntervalHistogram(reportHistogram);\n    log.info(\"Throughput produced: {} msg --- {} msg/s --- {} Mbit/s --- failure {} msg/s --- Latency: mean: {} ms - med: {} - 95pct: {} - 99pct: {} - 99.9pct: {} - 99.99pct: {} - Max: {}\",intFormat.format(total),throughputFormat.format(rate),throughputFormat.format(throughput),throughputFormat.format(failureRate),dec.format(reportHistogram.getMean() / 1000.0),dec.format(reportHistogram.getValueAtPercentile(50) / 1000.0),dec.format(reportHistogram.getValueAtPercentile(95) / 1000.0),dec.format(reportHistogram.getValueAtPercentile(99) / 1000.0),dec.format(reportHistogram.getValueAtPercentile(99.9) / 1000.0),dec.format(reportHistogram.getValueAtPercentile(99.99) / 1000.0),dec.format(reportHistogram.getMaxValue() / 1000.0));\n    histogramLogWriter.outputIntervalHistogram(reportHistogram);\n    reportHistogram.reset();\n    oldTime=now;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1087,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 347,
        "startColumnNumber" : 16,
        "endLineNumber" : 347,
        "endColumnNumber" : 97
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Payload file doesn't exist or it is empty.\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 9,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 44,
    "startLineNumber" : 347,
    "startColumnNumber" : 51,
    "endLineNumber" : 347,
    "endColumnNumber" : 95
  } ],
  "layoutRelationDataList" : [ ]
}