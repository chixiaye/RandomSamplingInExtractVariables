{
  "id" : 161,
  "expression" : "spanningTree",
  "projectName" : "eugenp@tutorials",
  "commitID" : "3c663eceea2087a494308592676e46b2a6d952f6",
  "filePath" : "/algorithms-miscellaneous-6/src/main/java/com/baeldung/algorithms/kruskal/Kruskal.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "spanningTree",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 44,
      "startColumnNumber" : 12,
      "endLineNumber" : 44,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 44,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 94
      },
      "nodeContext" : "spanningTree.putEdgeValue(edge.nodeU(),edge.nodeV(),graph.edgeValue(edge).get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 44,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 95
      },
      "nodeContext" : "spanningTree.putEdgeValue(edge.nodeU(),edge.nodeV(),graph.edgeValue(edge).get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 329,
        "startLineNumber" : 40,
        "startColumnNumber" : 52,
        "endLineNumber" : 49,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (cycleDetector.detectCycle(edge.nodeU(),edge.nodeV())) {\n    continue;\n  }\n  spanningTree.putEdgeValue(edge.nodeU(),edge.nodeV(),graph.edgeValue(edge).get());\n  edgeCount++;\n  if (edgeCount == totalNodes - 1) {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 373,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (EndpointPair<Integer> edge : edgeList) {\n  if (cycleDetector.detectCycle(edge.nodeU(),edge.nodeV())) {\n    continue;\n  }\n  spanningTree.putEdgeValue(edge.nodeU(),edge.nodeV(),graph.edgeValue(edge).get());\n  edgeCount++;\n  if (edgeCount == totalNodes - 1) {\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1035,
        "startLineNumber" : 25,
        "startColumnNumber" : 113,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Set<EndpointPair<Integer>> edges=graph.edges();\n  List<EndpointPair<Integer>> edgeList=new ArrayList<>(edges);\n  if (minSpanningTree) {\n    edgeList.sort(Comparator.comparing(e -> graph.edgeValue(e).get()));\n  }\n else {\n    edgeList.sort(Collections.reverseOrder(Comparator.comparing(e -> graph.edgeValue(e).get())));\n  }\n  int totalNodes=graph.nodes().size();\n  CycleDetector cycleDetector=new CycleDetector(totalNodes);\n  int edgeCount=0;\n  MutableValueGraph<Integer,Double> spanningTree=ValueGraphBuilder.undirected().build();\n  for (  EndpointPair<Integer> edge : edgeList) {\n    if (cycleDetector.detectCycle(edge.nodeU(),edge.nodeV())) {\n      continue;\n    }\n    spanningTree.putEdgeValue(edge.nodeU(),edge.nodeV(),graph.edgeValue(edge).get());\n    edgeCount++;\n    if (edgeCount == totalNodes - 1) {\n      break;\n    }\n  }\n  return spanningTree;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1144,
        "startLineNumber" : 25,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private ValueGraph<Integer,Double> spanningTree(ValueGraph<Integer,Double> graph,boolean minSpanningTree){\n  Set<EndpointPair<Integer>> edges=graph.edges();\n  List<EndpointPair<Integer>> edgeList=new ArrayList<>(edges);\n  if (minSpanningTree) {\n    edgeList.sort(Comparator.comparing(e -> graph.edgeValue(e).get()));\n  }\n else {\n    edgeList.sort(Collections.reverseOrder(Comparator.comparing(e -> graph.edgeValue(e).get())));\n  }\n  int totalNodes=graph.nodes().size();\n  CycleDetector cycleDetector=new CycleDetector(totalNodes);\n  int edgeCount=0;\n  MutableValueGraph<Integer,Double> spanningTree=ValueGraphBuilder.undirected().build();\n  for (  EndpointPair<Integer> edge : edgeList) {\n    if (cycleDetector.detectCycle(edge.nodeU(),edge.nodeV())) {\n      continue;\n    }\n    spanningTree.putEdgeValue(edge.nodeU(),edge.nodeV(),graph.edgeValue(edge).get());\n    edgeCount++;\n    if (edgeCount == totalNodes - 1) {\n      break;\n    }\n  }\n  return spanningTree;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 44,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 95
      },
      "nodeContext" : "spanningTree.putEdgeValue(edge.nodeU(),edge.nodeV(),graph.edgeValue(edge).get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baeldung.algorithms.kruskal.MutableValueGraph<java.lang.Integer,java.lang.Double>"
  }, {
    "nodeContext" : "spanningTree",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 50,
      "startColumnNumber" : 15,
      "endLineNumber" : 50,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 28
      },
      "nodeContext" : "return spanningTree;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1035,
        "startLineNumber" : 25,
        "startColumnNumber" : 113,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Set<EndpointPair<Integer>> edges=graph.edges();\n  List<EndpointPair<Integer>> edgeList=new ArrayList<>(edges);\n  if (minSpanningTree) {\n    edgeList.sort(Comparator.comparing(e -> graph.edgeValue(e).get()));\n  }\n else {\n    edgeList.sort(Collections.reverseOrder(Comparator.comparing(e -> graph.edgeValue(e).get())));\n  }\n  int totalNodes=graph.nodes().size();\n  CycleDetector cycleDetector=new CycleDetector(totalNodes);\n  int edgeCount=0;\n  MutableValueGraph<Integer,Double> spanningTree=ValueGraphBuilder.undirected().build();\n  for (  EndpointPair<Integer> edge : edgeList) {\n    if (cycleDetector.detectCycle(edge.nodeU(),edge.nodeV())) {\n      continue;\n    }\n    spanningTree.putEdgeValue(edge.nodeU(),edge.nodeV(),graph.edgeValue(edge).get());\n    edgeCount++;\n    if (edgeCount == totalNodes - 1) {\n      break;\n    }\n  }\n  return spanningTree;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1144,
        "startLineNumber" : 25,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private ValueGraph<Integer,Double> spanningTree(ValueGraph<Integer,Double> graph,boolean minSpanningTree){\n  Set<EndpointPair<Integer>> edges=graph.edges();\n  List<EndpointPair<Integer>> edgeList=new ArrayList<>(edges);\n  if (minSpanningTree) {\n    edgeList.sort(Comparator.comparing(e -> graph.edgeValue(e).get()));\n  }\n else {\n    edgeList.sort(Collections.reverseOrder(Comparator.comparing(e -> graph.edgeValue(e).get())));\n  }\n  int totalNodes=graph.nodes().size();\n  CycleDetector cycleDetector=new CycleDetector(totalNodes);\n  int edgeCount=0;\n  MutableValueGraph<Integer,Double> spanningTree=ValueGraphBuilder.undirected().build();\n  for (  EndpointPair<Integer> edge : edgeList) {\n    if (cycleDetector.detectCycle(edge.nodeU(),edge.nodeV())) {\n      continue;\n    }\n    spanningTree.putEdgeValue(edge.nodeU(),edge.nodeV(),graph.edgeValue(edge).get());\n    edgeCount++;\n    if (edgeCount == totalNodes - 1) {\n      break;\n    }\n  }\n  return spanningTree;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 28
      },
      "nodeContext" : "return spanningTree;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.baeldung.algorithms.kruskal.MutableValueGraph<java.lang.Integer,java.lang.Double>"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 44,
    "startColumnNumber" : 12,
    "endLineNumber" : 44,
    "endColumnNumber" : 24
  }, {
    "charLength" : 12,
    "startLineNumber" : 50,
    "startColumnNumber" : 15,
    "endLineNumber" : 50,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}