{
  "id" : 178,
  "expression" : "getInitialConsumer()",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/skyframe/RecursiveDirectoryTraversalFunction.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "getInitialConsumer()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 147,
      "startColumnNumber" : 25,
      "endLineNumber" : 147,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 147,
        "startColumnNumber" : 14,
        "endLineNumber" : 147,
        "endColumnNumber" : 45
      },
      "nodeContext" : "consumer=getInitialConsumer()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 46
      },
      "nodeContext" : "ConsumerT consumer=getInitialConsumer();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2713,
        "startLineNumber" : 139,
        "startColumnNumber" : 79,
        "endLineNumber" : 199,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ProcessPackageDirectoryResult processPackageDirectoryResult=getProcessPackageDirectoryResult(recursivePkgKey,env);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  Iterable<SkyKey> childDeps=processPackageDirectoryResult.getChildDeps();\n  ConsumerT consumer=getInitialConsumer();\n  Map<SkyKey,SkyValue> subdirectorySkyValuesFromDeps;\n  if (processPackageDirectoryResult.packageExists()) {\n    PathFragment rootRelativePath=recursivePkgKey.getRootedPath().getRootRelativePath();\n    SkyKey packageErrorMessageKey=PackageErrorMessageValue.key(PackageIdentifier.create(recursivePkgKey.getRepositoryName(),rootRelativePath));\n    Map<SkyKey,SkyValue> dependentSkyValues=env.getValues(Iterables.concat(childDeps,ImmutableList.of(packageErrorMessageKey)));\n    if (env.valuesMissing()) {\n      return null;\n    }\n    PackageErrorMessageValue pkgErrorMessageValue=(PackageErrorMessageValue)dependentSkyValues.get(packageErrorMessageKey);\nswitch (pkgErrorMessageValue.getResult()) {\ncase NO_ERROR:      consumer.notePackage(rootRelativePath);\n    break;\ncase ERROR:  env.getListener().handle(Event.error(\"package contains errors: \" + rootRelativePath.getPathString()));\nconsumer.notePackage(rootRelativePath);\nbreak;\ncase NO_SUCH_PACKAGE_EXCEPTION:String msg=pkgErrorMessageValue.getNoSuchPackageExceptionMessage();\nenv.getListener().handle(Event.error(msg));\nconsumer.notePackageError(msg);\nbreak;\ndefault:throw new IllegalStateException(pkgErrorMessageValue.getResult().toString());\n}\nsubdirectorySkyValuesFromDeps=ImmutableMap.copyOf(Maps.filterKeys(dependentSkyValues,Predicates.not(Predicates.equalTo(packageErrorMessageKey))));\n}\n else {\nsubdirectorySkyValuesFromDeps=env.getValues(childDeps);\n}\nif (env.valuesMissing()) {\nreturn null;\n}\nreturn aggregateWithSubdirectorySkyValues(consumer,union(subdirectorySkyValuesFromDeps,processPackageDirectoryResult.getAdditionalValuesToAggregate()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3790,
        "startLineNumber" : 123,
        "startColumnNumber" : 2,
        "endLineNumber" : 199,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Uses  {@link #getProcessPackageDirectoryResult} to look for a package in the directory specifiedby  {@code recursivePkgKey}, does some work as specified by  {@link PackageDirectoryConsumer} ifsuch a package exists, then recursively does work in each non-excluded subdirectory as specified by  {@link #getSkyKeyForSubdirectory}, and finally aggregates the  {@link PackageDirectoryConsumer} value along with values from each subdirectory as specified by {@link #aggregateWithSubdirectorySkyValues}, and returns that aggregation. <p>Returns null if  {@code env.valuesMissing()} is true, checked after each call to one of{@link RecursiveDirectoryTraversalFunction}'s abstract methods that were given  {@code env}. <p>Will propagate  {@link com.google.devtools.build.lib.packages.NoSuchPackageException} duringa no-keep-going evaluation\n */\n@Nullable public final ReturnT visitDirectory(RecursivePkgKey recursivePkgKey,Environment env) throws InterruptedException, ProcessPackageDirectorySkyFunctionException {\n  ProcessPackageDirectoryResult processPackageDirectoryResult=getProcessPackageDirectoryResult(recursivePkgKey,env);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  Iterable<SkyKey> childDeps=processPackageDirectoryResult.getChildDeps();\n  ConsumerT consumer=getInitialConsumer();\n  Map<SkyKey,SkyValue> subdirectorySkyValuesFromDeps;\n  if (processPackageDirectoryResult.packageExists()) {\n    PathFragment rootRelativePath=recursivePkgKey.getRootedPath().getRootRelativePath();\n    SkyKey packageErrorMessageKey=PackageErrorMessageValue.key(PackageIdentifier.create(recursivePkgKey.getRepositoryName(),rootRelativePath));\n    Map<SkyKey,SkyValue> dependentSkyValues=env.getValues(Iterables.concat(childDeps,ImmutableList.of(packageErrorMessageKey)));\n    if (env.valuesMissing()) {\n      return null;\n    }\n    PackageErrorMessageValue pkgErrorMessageValue=(PackageErrorMessageValue)dependentSkyValues.get(packageErrorMessageKey);\nswitch (pkgErrorMessageValue.getResult()) {\ncase NO_ERROR:      consumer.notePackage(rootRelativePath);\n    break;\ncase ERROR:  env.getListener().handle(Event.error(\"package contains errors: \" + rootRelativePath.getPathString()));\nconsumer.notePackage(rootRelativePath);\nbreak;\ncase NO_SUCH_PACKAGE_EXCEPTION:String msg=pkgErrorMessageValue.getNoSuchPackageExceptionMessage();\nenv.getListener().handle(Event.error(msg));\nconsumer.notePackageError(msg);\nbreak;\ndefault:throw new IllegalStateException(pkgErrorMessageValue.getResult().toString());\n}\nsubdirectorySkyValuesFromDeps=ImmutableMap.copyOf(Maps.filterKeys(dependentSkyValues,Predicates.not(Predicates.equalTo(packageErrorMessageKey))));\n}\n else {\nsubdirectorySkyValuesFromDeps=env.getValues(childDeps);\n}\nif (env.valuesMissing()) {\nreturn null;\n}\nreturn aggregateWithSubdirectorySkyValues(consumer,union(subdirectorySkyValuesFromDeps,processPackageDirectoryResult.getAdditionalValuesToAggregate()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 248,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 46
      },
      "nodeContext" : "ConsumerT consumer=getInitialConsumer();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "ConsumerT"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 147,
    "startColumnNumber" : 25,
    "endLineNumber" : 147,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}