{
  "id" : 351,
  "expression" : "InfluxConstants.TagName",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/AggregationQuery.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "InfluxConstants.TagName",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 73,
      "startColumnNumber" : 48,
      "endLineNumber" : 73,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 73,
        "startColumnNumber" : 48,
        "endLineNumber" : 73,
        "endColumnNumber" : 81
      },
      "nodeContext" : "InfluxConstants.TagName.ENTITY_ID",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 72,
        "startColumnNumber" : 32,
        "endLineNumber" : 73,
        "endColumnNumber" : 82
      },
      "nodeContext" : "select().function(functionName,\"mean\",condition.getTopN()).as(\"value\").column(InfluxConstants.TagName.ENTITY_ID)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 236,
        "startLineNumber" : 72,
        "startColumnNumber" : 32,
        "endLineNumber" : 74,
        "endColumnNumber" : 80
      },
      "nodeContext" : "select().function(functionName,\"mean\",condition.getTopN()).as(\"value\").column(InfluxConstants.TagName.ENTITY_ID).from(client.getDatabase(),measurement)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 72,
        "startColumnNumber" : 24,
        "endLineNumber" : 74,
        "endColumnNumber" : 80
      },
      "nodeContext" : "query=select().function(functionName,\"mean\",condition.getTopN()).as(\"value\").column(InfluxConstants.TagName.ENTITY_ID).from(client.getDatabase(),measurement)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 81
      },
      "nodeContext" : "SelectQueryImpl query=select().function(functionName,\"mean\",condition.getTopN()).as(\"value\").column(InfluxConstants.TagName.ENTITY_ID).from(client.getDatabase(),measurement);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2384,
        "startLineNumber" : 61,
        "startColumnNumber" : 106,
        "endLineNumber" : 112,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String measurement=condition.getName();\n  Comparator<SelectedRecord> comparator=DESCENDING;\n  String functionName=InfluxConstants.SORT_DES;\n  if (condition.getOrder().equals(Order.ASC)) {\n    functionName=InfluxConstants.SORT_ASC;\n    comparator=ASCENDING;\n  }\n  SelectQueryImpl query=select().function(functionName,\"mean\",condition.getTopN()).as(\"value\").column(InfluxConstants.TagName.ENTITY_ID).from(client.getDatabase(),measurement);\n  WhereSubQueryImpl<SelectSubQueryImpl<SelectQueryImpl>,SelectQueryImpl> where=select().fromSubQuery(client.getDatabase()).mean(valueColumnName).from(condition.getName()).where();\n  if (additionalConditions != null) {\n    additionalConditions.forEach(moreCondition -> where.and(eq(moreCondition.getKey(),moreCondition.getValue())));\n  }\n  final SelectSubQueryImpl<SelectQueryImpl> subQuery=where.and(gte(InfluxClient.TIME,InfluxClient.timeIntervalTS(duration.getStartTimestamp()))).and(lte(InfluxClient.TIME,InfluxClient.timeIntervalTS(duration.getEndTimestamp()))).groupBy(InfluxConstants.TagName.ENTITY_ID);\n  query.setSubQuery(subQuery);\n  List<QueryResult.Series> series=client.queryForSeries(query);\n  if (log.isDebugEnabled()) {\n    log.debug(\"SQL: {} result set: {}\",query.getCommand(),series);\n  }\n  if (series == null || series.isEmpty()) {\n    return Collections.emptyList();\n  }\n  List<List<Object>> dataset=series.get(0).getValues();\n  List<SelectedRecord> entities=Lists.newArrayListWithCapacity(dataset.size());\n  dataset.forEach(values -> {\n    final SelectedRecord entity=new SelectedRecord();\n    entity.setId((String)values.get(2));\n    entity.setValue(((Double)values.get(1)).longValue() + \"\");\n    entities.add(entity);\n  }\n);\n  entities.sort(comparator);\n  return entities;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 305,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2718,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 112,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public List<SelectedRecord> sortMetrics(final TopNCondition condition,final String valueColumnName,final Duration duration,final List<KeyValue> additionalConditions) throws IOException {\n  String measurement=condition.getName();\n  Comparator<SelectedRecord> comparator=DESCENDING;\n  String functionName=InfluxConstants.SORT_DES;\n  if (condition.getOrder().equals(Order.ASC)) {\n    functionName=InfluxConstants.SORT_ASC;\n    comparator=ASCENDING;\n  }\n  SelectQueryImpl query=select().function(functionName,\"mean\",condition.getTopN()).as(\"value\").column(InfluxConstants.TagName.ENTITY_ID).from(client.getDatabase(),measurement);\n  WhereSubQueryImpl<SelectSubQueryImpl<SelectQueryImpl>,SelectQueryImpl> where=select().fromSubQuery(client.getDatabase()).mean(valueColumnName).from(condition.getName()).where();\n  if (additionalConditions != null) {\n    additionalConditions.forEach(moreCondition -> where.and(eq(moreCondition.getKey(),moreCondition.getValue())));\n  }\n  final SelectSubQueryImpl<SelectQueryImpl> subQuery=where.and(gte(InfluxClient.TIME,InfluxClient.timeIntervalTS(duration.getStartTimestamp()))).and(lte(InfluxClient.TIME,InfluxClient.timeIntervalTS(duration.getEndTimestamp()))).groupBy(InfluxConstants.TagName.ENTITY_ID);\n  query.setSubQuery(subQuery);\n  List<QueryResult.Series> series=client.queryForSeries(query);\n  if (log.isDebugEnabled()) {\n    log.debug(\"SQL: {} result set: {}\",query.getCommand(),series);\n  }\n  if (series == null || series.isEmpty()) {\n    return Collections.emptyList();\n  }\n  List<List<Object>> dataset=series.get(0).getValues();\n  List<SelectedRecord> entities=Lists.newArrayListWithCapacity(dataset.size());\n  dataset.forEach(values -> {\n    final SelectedRecord entity=new SelectedRecord();\n    entity.setId((String)values.get(2));\n    entity.setValue(((Double)values.get(1)).longValue() + \"\");\n    entities.add(entity);\n  }\n);\n  entities.sort(comparator);\n  return entities;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 73,
        "startColumnNumber" : 48,
        "endLineNumber" : 73,
        "endColumnNumber" : 81
      },
      "nodeContext" : "InfluxConstants.TagName.ENTITY_ID",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxConstants.TagName"
  }, {
    "nodeContext" : "InfluxConstants.TagName",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 89,
      "startColumnNumber" : 21,
      "endLineNumber" : 89,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 89,
        "startColumnNumber" : 21,
        "endLineNumber" : 89,
        "endColumnNumber" : 54
      },
      "nodeContext" : "InfluxConstants.TagName.ENTITY_ID",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 86,
        "startColumnNumber" : 61,
        "endLineNumber" : 89,
        "endColumnNumber" : 55
      },
      "nodeContext" : "where.and(gte(InfluxClient.TIME,InfluxClient.timeIntervalTS(duration.getStartTimestamp()))).and(lte(InfluxClient.TIME,InfluxClient.timeIntervalTS(duration.getEndTimestamp()))).groupBy(InfluxConstants.TagName.ENTITY_ID)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 86,
        "startColumnNumber" : 50,
        "endLineNumber" : 89,
        "endColumnNumber" : 55
      },
      "nodeContext" : "subQuery=where.and(gte(InfluxClient.TIME,InfluxClient.timeIntervalTS(duration.getStartTimestamp()))).and(lte(InfluxClient.TIME,InfluxClient.timeIntervalTS(duration.getEndTimestamp()))).groupBy(InfluxConstants.TagName.ENTITY_ID)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "final SelectSubQueryImpl<SelectQueryImpl> subQuery=where.and(gte(InfluxClient.TIME,InfluxClient.timeIntervalTS(duration.getStartTimestamp()))).and(lte(InfluxClient.TIME,InfluxClient.timeIntervalTS(duration.getEndTimestamp()))).groupBy(InfluxConstants.TagName.ENTITY_ID);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 43,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2384,
        "startLineNumber" : 61,
        "startColumnNumber" : 106,
        "endLineNumber" : 112,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String measurement=condition.getName();\n  Comparator<SelectedRecord> comparator=DESCENDING;\n  String functionName=InfluxConstants.SORT_DES;\n  if (condition.getOrder().equals(Order.ASC)) {\n    functionName=InfluxConstants.SORT_ASC;\n    comparator=ASCENDING;\n  }\n  SelectQueryImpl query=select().function(functionName,\"mean\",condition.getTopN()).as(\"value\").column(InfluxConstants.TagName.ENTITY_ID).from(client.getDatabase(),measurement);\n  WhereSubQueryImpl<SelectSubQueryImpl<SelectQueryImpl>,SelectQueryImpl> where=select().fromSubQuery(client.getDatabase()).mean(valueColumnName).from(condition.getName()).where();\n  if (additionalConditions != null) {\n    additionalConditions.forEach(moreCondition -> where.and(eq(moreCondition.getKey(),moreCondition.getValue())));\n  }\n  final SelectSubQueryImpl<SelectQueryImpl> subQuery=where.and(gte(InfluxClient.TIME,InfluxClient.timeIntervalTS(duration.getStartTimestamp()))).and(lte(InfluxClient.TIME,InfluxClient.timeIntervalTS(duration.getEndTimestamp()))).groupBy(InfluxConstants.TagName.ENTITY_ID);\n  query.setSubQuery(subQuery);\n  List<QueryResult.Series> series=client.queryForSeries(query);\n  if (log.isDebugEnabled()) {\n    log.debug(\"SQL: {} result set: {}\",query.getCommand(),series);\n  }\n  if (series == null || series.isEmpty()) {\n    return Collections.emptyList();\n  }\n  List<List<Object>> dataset=series.get(0).getValues();\n  List<SelectedRecord> entities=Lists.newArrayListWithCapacity(dataset.size());\n  dataset.forEach(values -> {\n    final SelectedRecord entity=new SelectedRecord();\n    entity.setId((String)values.get(2));\n    entity.setValue(((Double)values.get(1)).longValue() + \"\");\n    entities.add(entity);\n  }\n);\n  entities.sort(comparator);\n  return entities;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 305,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2718,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 112,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public List<SelectedRecord> sortMetrics(final TopNCondition condition,final String valueColumnName,final Duration duration,final List<KeyValue> additionalConditions) throws IOException {\n  String measurement=condition.getName();\n  Comparator<SelectedRecord> comparator=DESCENDING;\n  String functionName=InfluxConstants.SORT_DES;\n  if (condition.getOrder().equals(Order.ASC)) {\n    functionName=InfluxConstants.SORT_ASC;\n    comparator=ASCENDING;\n  }\n  SelectQueryImpl query=select().function(functionName,\"mean\",condition.getTopN()).as(\"value\").column(InfluxConstants.TagName.ENTITY_ID).from(client.getDatabase(),measurement);\n  WhereSubQueryImpl<SelectSubQueryImpl<SelectQueryImpl>,SelectQueryImpl> where=select().fromSubQuery(client.getDatabase()).mean(valueColumnName).from(condition.getName()).where();\n  if (additionalConditions != null) {\n    additionalConditions.forEach(moreCondition -> where.and(eq(moreCondition.getKey(),moreCondition.getValue())));\n  }\n  final SelectSubQueryImpl<SelectQueryImpl> subQuery=where.and(gte(InfluxClient.TIME,InfluxClient.timeIntervalTS(duration.getStartTimestamp()))).and(lte(InfluxClient.TIME,InfluxClient.timeIntervalTS(duration.getEndTimestamp()))).groupBy(InfluxConstants.TagName.ENTITY_ID);\n  query.setSubQuery(subQuery);\n  List<QueryResult.Series> series=client.queryForSeries(query);\n  if (log.isDebugEnabled()) {\n    log.debug(\"SQL: {} result set: {}\",query.getCommand(),series);\n  }\n  if (series == null || series.isEmpty()) {\n    return Collections.emptyList();\n  }\n  List<List<Object>> dataset=series.get(0).getValues();\n  List<SelectedRecord> entities=Lists.newArrayListWithCapacity(dataset.size());\n  dataset.forEach(values -> {\n    final SelectedRecord entity=new SelectedRecord();\n    entity.setId((String)values.get(2));\n    entity.setValue(((Double)values.get(1)).longValue() + \"\");\n    entities.add(entity);\n  }\n);\n  entities.sort(comparator);\n  return entities;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 89,
        "startColumnNumber" : 21,
        "endLineNumber" : 89,
        "endColumnNumber" : 54
      },
      "nodeContext" : "InfluxConstants.TagName.ENTITY_ID",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxConstants.TagName"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 73,
    "startColumnNumber" : 48,
    "endLineNumber" : 73,
    "endColumnNumber" : 71
  }, {
    "charLength" : 23,
    "startLineNumber" : 89,
    "startColumnNumber" : 21,
    "endLineNumber" : 89,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}