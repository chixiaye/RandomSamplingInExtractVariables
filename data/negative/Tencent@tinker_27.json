{
  "id" : 27,
  "expression" : "new BufferedOutputStream(fos,TypedValue.BUFFER_SIZE)",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/FileOperation.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new BufferedOutputStream(fos,TypedValue.BUFFER_SIZE)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 53,
      "startLineNumber" : 208,
      "startColumnNumber" : 26,
      "endLineNumber" : 208,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 208,
        "startColumnNumber" : 20,
        "endLineNumber" : 208,
        "endColumnNumber" : 79
      },
      "nodeContext" : "bos=new BufferedOutputStream(fos,TypedValue.BUFFER_SIZE)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 208,
        "startColumnNumber" : 20,
        "endLineNumber" : 208,
        "endColumnNumber" : 80
      },
      "nodeContext" : "bos=new BufferedOutputStream(fos,TypedValue.BUFFER_SIZE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 206,
        "startColumnNumber" : 20,
        "endLineNumber" : 215,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  fos=new FileOutputStream(file);\n  bos=new BufferedOutputStream(fos,TypedValue.BUFFER_SIZE);\n  byte[] buf=new byte[TypedValue.BUFFER_SIZE];\n  int len;\n  while ((len=bis.read(buf,0,TypedValue.BUFFER_SIZE)) != -1) {\n    fos.write(buf,0,len);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 671,
        "startLineNumber" : 206,
        "startColumnNumber" : 16,
        "endLineNumber" : 223,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  fos=new FileOutputStream(file);\n  bos=new BufferedOutputStream(fos,TypedValue.BUFFER_SIZE);\n  byte[] buf=new byte[TypedValue.BUFFER_SIZE];\n  int len;\n  while ((len=bis.read(buf,0,TypedValue.BUFFER_SIZE)) != -1) {\n    fos.write(buf,0,len);\n  }\n}\n  finally {\n  if (bos != null) {\n    bos.flush();\n    bos.close();\n  }\n  if (bis != null) {\n    bis.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 82,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1575,
        "startLineNumber" : 187,
        "startColumnNumber" : 50,
        "endLineNumber" : 224,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ZipEntry entry=(ZipEntry)enumeration.nextElement();\n  if (!validateZipEntryName(new File(filePath),entry.getName())) {\n    throw new IOException(\"Bad ZipEntry name: \" + entry.getName());\n  }\n  if (entry.isDirectory()) {\n    new File(filePath,entry.getName()).mkdirs();\n    continue;\n  }\n  BufferedInputStream bis=new BufferedInputStream(zipFile.getInputStream(entry));\n  File file=new File(filePath + File.separator + entry.getName());\n  File parentFile=file.getParentFile();\n  if (parentFile != null && (!parentFile.exists())) {\n    parentFile.mkdirs();\n  }\n  FileOutputStream fos=null;\n  BufferedOutputStream bos=null;\n  try {\n    fos=new FileOutputStream(file);\n    bos=new BufferedOutputStream(fos,TypedValue.BUFFER_SIZE);\n    byte[] buf=new byte[TypedValue.BUFFER_SIZE];\n    int len;\n    while ((len=bis.read(buf,0,TypedValue.BUFFER_SIZE)) != -1) {\n      fos.write(buf,0,len);\n    }\n  }\n  finally {\n    if (bos != null) {\n      bos.flush();\n      bos.close();\n    }\n    if (bis != null) {\n      bis.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 194,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1613,
        "startLineNumber" : 187,
        "startColumnNumber" : 12,
        "endLineNumber" : 224,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (enumeration.hasMoreElements()) {\n  ZipEntry entry=(ZipEntry)enumeration.nextElement();\n  if (!validateZipEntryName(new File(filePath),entry.getName())) {\n    throw new IOException(\"Bad ZipEntry name: \" + entry.getName());\n  }\n  if (entry.isDirectory()) {\n    new File(filePath,entry.getName()).mkdirs();\n    continue;\n  }\n  BufferedInputStream bis=new BufferedInputStream(zipFile.getInputStream(entry));\n  File file=new File(filePath + File.separator + entry.getName());\n  File parentFile=file.getParentFile();\n  if (parentFile != null && (!parentFile.exists())) {\n    parentFile.mkdirs();\n  }\n  FileOutputStream fos=null;\n  BufferedOutputStream bos=null;\n  try {\n    fos=new FileOutputStream(file);\n    bos=new BufferedOutputStream(fos,TypedValue.BUFFER_SIZE);\n    byte[] buf=new byte[TypedValue.BUFFER_SIZE];\n    int len;\n    while ((len=bis.read(buf,0,TypedValue.BUFFER_SIZE)) != -1) {\n      fos.write(buf,0,len);\n    }\n  }\n  finally {\n    if (bos != null) {\n      bos.flush();\n      bos.close();\n    }\n    if (bis != null) {\n      bis.close();\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 198,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 186,
        "startColumnNumber" : 12,
        "endLineNumber" : 225,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (enumeration.hasMoreElements()) {\n    ZipEntry entry=(ZipEntry)enumeration.nextElement();\n    if (!validateZipEntryName(new File(filePath),entry.getName())) {\n      throw new IOException(\"Bad ZipEntry name: \" + entry.getName());\n    }\n    if (entry.isDirectory()) {\n      new File(filePath,entry.getName()).mkdirs();\n      continue;\n    }\n    BufferedInputStream bis=new BufferedInputStream(zipFile.getInputStream(entry));\n    File file=new File(filePath + File.separator + entry.getName());\n    File parentFile=file.getParentFile();\n    if (parentFile != null && (!parentFile.exists())) {\n      parentFile.mkdirs();\n    }\n    FileOutputStream fos=null;\n    BufferedOutputStream bos=null;\n    try {\n      fos=new FileOutputStream(file);\n      bos=new BufferedOutputStream(fos,TypedValue.BUFFER_SIZE);\n      byte[] buf=new byte[TypedValue.BUFFER_SIZE];\n      int len;\n      while ((len=bis.read(buf,0,TypedValue.BUFFER_SIZE)) != -1) {\n        fos.write(buf,0,len);\n      }\n    }\n  finally {\n      if (bos != null) {\n        bos.flush();\n        bos.close();\n      }\n      if (bis != null) {\n        bis.close();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1743,
        "startLineNumber" : 186,
        "startColumnNumber" : 8,
        "endLineNumber" : 229,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  while (enumeration.hasMoreElements()) {\n    ZipEntry entry=(ZipEntry)enumeration.nextElement();\n    if (!validateZipEntryName(new File(filePath),entry.getName())) {\n      throw new IOException(\"Bad ZipEntry name: \" + entry.getName());\n    }\n    if (entry.isDirectory()) {\n      new File(filePath,entry.getName()).mkdirs();\n      continue;\n    }\n    BufferedInputStream bis=new BufferedInputStream(zipFile.getInputStream(entry));\n    File file=new File(filePath + File.separator + entry.getName());\n    File parentFile=file.getParentFile();\n    if (parentFile != null && (!parentFile.exists())) {\n      parentFile.mkdirs();\n    }\n    FileOutputStream fos=null;\n    BufferedOutputStream bos=null;\n    try {\n      fos=new FileOutputStream(file);\n      bos=new BufferedOutputStream(fos,TypedValue.BUFFER_SIZE);\n      byte[] buf=new byte[TypedValue.BUFFER_SIZE];\n      int len;\n      while ((len=bis.read(buf,0,TypedValue.BUFFER_SIZE)) != -1) {\n        fos.write(buf,0,len);\n      }\n    }\n  finally {\n      if (bos != null) {\n        bos.flush();\n        bos.close();\n      }\n      if (bis != null) {\n        bis.close();\n      }\n    }\n  }\n}\n  finally {\n  if (zipFile != null) {\n    zipFile.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 210,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1896,
        "startLineNumber" : 181,
        "startColumnNumber" : 85,
        "endLineNumber" : 230,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkDirectory(filePath);\n  ZipFile zipFile=new ZipFile(fileName);\n  Enumeration enumeration=zipFile.entries();\n  try {\n    while (enumeration.hasMoreElements()) {\n      ZipEntry entry=(ZipEntry)enumeration.nextElement();\n      if (!validateZipEntryName(new File(filePath),entry.getName())) {\n        throw new IOException(\"Bad ZipEntry name: \" + entry.getName());\n      }\n      if (entry.isDirectory()) {\n        new File(filePath,entry.getName()).mkdirs();\n        continue;\n      }\n      BufferedInputStream bis=new BufferedInputStream(zipFile.getInputStream(entry));\n      File file=new File(filePath + File.separator + entry.getName());\n      File parentFile=file.getParentFile();\n      if (parentFile != null && (!parentFile.exists())) {\n        parentFile.mkdirs();\n      }\n      FileOutputStream fos=null;\n      BufferedOutputStream bos=null;\n      try {\n        fos=new FileOutputStream(file);\n        bos=new BufferedOutputStream(fos,TypedValue.BUFFER_SIZE);\n        byte[] buf=new byte[TypedValue.BUFFER_SIZE];\n        int len;\n        while ((len=bis.read(buf,0,TypedValue.BUFFER_SIZE)) != -1) {\n          fos.write(buf,0,len);\n        }\n      }\n  finally {\n        if (bos != null) {\n          bos.flush();\n          bos.close();\n        }\n        if (bis != null) {\n          bis.close();\n        }\n      }\n    }\n  }\n  finally {\n    if (zipFile != null) {\n      zipFile.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2011,
        "startLineNumber" : 180,
        "startColumnNumber" : 4,
        "endLineNumber" : 230,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"rawtypes\") public static void unZipAPk(String fileName,String filePath) throws IOException {\n  checkDirectory(filePath);\n  ZipFile zipFile=new ZipFile(fileName);\n  Enumeration enumeration=zipFile.entries();\n  try {\n    while (enumeration.hasMoreElements()) {\n      ZipEntry entry=(ZipEntry)enumeration.nextElement();\n      if (!validateZipEntryName(new File(filePath),entry.getName())) {\n        throw new IOException(\"Bad ZipEntry name: \" + entry.getName());\n      }\n      if (entry.isDirectory()) {\n        new File(filePath,entry.getName()).mkdirs();\n        continue;\n      }\n      BufferedInputStream bis=new BufferedInputStream(zipFile.getInputStream(entry));\n      File file=new File(filePath + File.separator + entry.getName());\n      File parentFile=file.getParentFile();\n      if (parentFile != null && (!parentFile.exists())) {\n        parentFile.mkdirs();\n      }\n      FileOutputStream fos=null;\n      BufferedOutputStream bos=null;\n      try {\n        fos=new FileOutputStream(file);\n        bos=new BufferedOutputStream(fos,TypedValue.BUFFER_SIZE);\n        byte[] buf=new byte[TypedValue.BUFFER_SIZE];\n        int len;\n        while ((len=bis.read(buf,0,TypedValue.BUFFER_SIZE)) != -1) {\n          fos.write(buf,0,len);\n        }\n      }\n  finally {\n        if (bos != null) {\n          bos.flush();\n          bos.close();\n        }\n        if (bis != null) {\n          bis.close();\n        }\n      }\n    }\n  }\n  finally {\n    if (zipFile != null) {\n      zipFile.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 208,
        "startColumnNumber" : 20,
        "endLineNumber" : 208,
        "endColumnNumber" : 80
      },
      "nodeContext" : "bos=new BufferedOutputStream(fos,TypedValue.BUFFER_SIZE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.io.BufferedOutputStream"
  } ],
  "positionList" : [ {
    "charLength" : 53,
    "startLineNumber" : 208,
    "startColumnNumber" : 26,
    "endLineNumber" : 208,
    "endColumnNumber" : 79
  } ],
  "layoutRelationDataList" : [ ]
}