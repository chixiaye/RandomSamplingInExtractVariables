{
  "id" : 505,
  "expression" : "startedWaiting",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/util/io/TimestampGranularityMonitor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "startedWaiting",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 192,
      "startColumnNumber" : 40,
      "endLineNumber" : 192,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 192,
        "startColumnNumber" : 6,
        "endLineNumber" : 193,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Profiler.instance().logSimpleTask(startedWaiting,ProfilerTask.WAIT,\"Timestamp granularity\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 192,
        "startColumnNumber" : 6,
        "endLineNumber" : 193,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Profiler.instance().logSimpleTask(startedWaiting,ProfilerTask.WAIT,\"Timestamp granularity\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1291,
        "startLineNumber" : 159,
        "startColumnNumber" : 51,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long before=clock.currentTimeMillis();\n  long startedWaiting=Profiler.nanoTimeMaybe();\n  boolean interrupted=false;\n  if (waitASecond) {\n    while (clock.currentTimeMillis() < commandStartTimeMillisRounded + 1050) {\n      try {\n        Thread.sleep(50);\n      }\n catch (      InterruptedException e) {\n        if (!interrupted) {\n          outErr.printErrLn(\"INFO: Hang on a second...\");\n          interrupted=true;\n        }\n      }\n    }\n  }\n else {\n    while (clock.currentTimeMillis() == commandStartTimeMillis) {\n      try {\n        Thread.sleep(1);\n      }\n catch (      InterruptedException e) {\n        if (!interrupted) {\n          outErr.printErrLn(\"INFO: Hang on a millisecond...\");\n          interrupted=true;\n        }\n      }\n    }\n  }\n  if (interrupted) {\n    Thread.currentThread().interrupt();\n  }\n  Profiler.instance().logSimpleTask(startedWaiting,ProfilerTask.WAIT,\"Timestamp granularity\");\n  logger.atInfo().log(\"Waited for %dms for file system to catch up\",clock.currentTimeMillis() - before);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1338,
        "startLineNumber" : 159,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (this.waitASecond || this.waitAMillisecond) {\n  long before=clock.currentTimeMillis();\n  long startedWaiting=Profiler.nanoTimeMaybe();\n  boolean interrupted=false;\n  if (waitASecond) {\n    while (clock.currentTimeMillis() < commandStartTimeMillisRounded + 1050) {\n      try {\n        Thread.sleep(50);\n      }\n catch (      InterruptedException e) {\n        if (!interrupted) {\n          outErr.printErrLn(\"INFO: Hang on a second...\");\n          interrupted=true;\n        }\n      }\n    }\n  }\n else {\n    while (clock.currentTimeMillis() == commandStartTimeMillis) {\n      try {\n        Thread.sleep(1);\n      }\n catch (      InterruptedException e) {\n        if (!interrupted) {\n          outErr.printErrLn(\"INFO: Hang on a millisecond...\");\n          interrupted=true;\n        }\n      }\n    }\n  }\n  if (interrupted) {\n    Thread.currentThread().interrupt();\n  }\n  Profiler.instance().logSimpleTask(startedWaiting,ProfilerTask.WAIT,\"Timestamp granularity\");\n  logger.atInfo().log(\"Waited for %dms for file system to catch up\",clock.currentTimeMillis() - before);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1348,
        "startLineNumber" : 158,
        "startColumnNumber" : 57,
        "endLineNumber" : 197,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (this.waitASecond || this.waitAMillisecond) {\n    long before=clock.currentTimeMillis();\n    long startedWaiting=Profiler.nanoTimeMaybe();\n    boolean interrupted=false;\n    if (waitASecond) {\n      while (clock.currentTimeMillis() < commandStartTimeMillisRounded + 1050) {\n        try {\n          Thread.sleep(50);\n        }\n catch (        InterruptedException e) {\n          if (!interrupted) {\n            outErr.printErrLn(\"INFO: Hang on a second...\");\n            interrupted=true;\n          }\n        }\n      }\n    }\n else {\n      while (clock.currentTimeMillis() == commandStartTimeMillis) {\n        try {\n          Thread.sleep(1);\n        }\n catch (        InterruptedException e) {\n          if (!interrupted) {\n            outErr.printErrLn(\"INFO: Hang on a millisecond...\");\n            interrupted=true;\n          }\n        }\n      }\n    }\n    if (interrupted) {\n      Thread.currentThread().interrupt();\n    }\n    Profiler.instance().logSimpleTask(startedWaiting,ProfilerTask.WAIT,\"Timestamp granularity\");\n    logger.atInfo().log(\"Waited for %dms for file system to catch up\",clock.currentTimeMillis() - before);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1986,
        "startLineNumber" : 143,
        "startColumnNumber" : 2,
        "endLineNumber" : 197,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * If needed, wait until the next \"tick\" of the filesystem timestamp clock. This is done to ensure that files created after the current Blaze command finishes will have timestamps different than files created before the current Blaze command started.  Otherwise a sequence of commands such as <pre> echo ... &gt; foo/BUILD blaze query ... echo ... &gt; foo/BUILD blaze query ... </pre> could return wrong results, due to the contents of package foo being cached even though foo/BUILD changed.\n */\npublic void waitForTimestampGranularity(OutErr outErr){\n  if (this.waitASecond || this.waitAMillisecond) {\n    long before=clock.currentTimeMillis();\n    long startedWaiting=Profiler.nanoTimeMaybe();\n    boolean interrupted=false;\n    if (waitASecond) {\n      while (clock.currentTimeMillis() < commandStartTimeMillisRounded + 1050) {\n        try {\n          Thread.sleep(50);\n        }\n catch (        InterruptedException e) {\n          if (!interrupted) {\n            outErr.printErrLn(\"INFO: Hang on a second...\");\n            interrupted=true;\n          }\n        }\n      }\n    }\n else {\n      while (clock.currentTimeMillis() == commandStartTimeMillis) {\n        try {\n          Thread.sleep(1);\n        }\n catch (        InterruptedException e) {\n          if (!interrupted) {\n            outErr.printErrLn(\"INFO: Hang on a millisecond...\");\n            interrupted=true;\n          }\n        }\n      }\n    }\n    if (interrupted) {\n      Thread.currentThread().interrupt();\n    }\n    Profiler.instance().logSimpleTask(startedWaiting,ProfilerTask.WAIT,\"Timestamp granularity\");\n    logger.atInfo().log(\"Waited for %dms for file system to catch up\",clock.currentTimeMillis() - before);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 192,
        "startColumnNumber" : 6,
        "endLineNumber" : 193,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Profiler.instance().logSimpleTask(startedWaiting,ProfilerTask.WAIT,\"Timestamp granularity\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 192,
    "startColumnNumber" : 40,
    "endLineNumber" : 192,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}