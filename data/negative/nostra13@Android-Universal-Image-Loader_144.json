{
  "id" : 144,
  "expression" : "imageView",
  "projectName" : "nostra13@Android-Universal-Image-Loader",
  "commitID" : "85c7607507701e15a7f2e3131e95297d6987108b",
  "filePath" : "UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java",
  "occurrences" : 11,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "imageView",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 166,
      "startColumnNumber" : 6,
      "endLineNumber" : 166,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 166,
        "startColumnNumber" : 6,
        "endLineNumber" : 166,
        "endColumnNumber" : 23
      },
      "nodeContext" : "imageView == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 166,
        "startColumnNumber" : 2,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (imageView == null) {\n  Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2024,
        "startLineNumber" : 162,
        "startColumnNumber" : 119,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3399,
        "startLineNumber" : 141,
        "startColumnNumber" : 1,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageView when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageView {@link ImageView} which should display image\n * @param options {@linkplain DisplayImageOptions Display image options} for image displaying. If <b>null</b> - defaultdisplay image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) fromconfiguration} will be used.\n * @param listener {@linkplain ImageLoadingListener Listener} for image loading process. Listener fires events only ifthere is no image for loading in memory cache. If there is image for loading in memory cache then image is displayed at ImageView but listener does not fire any event. Listener fires events on UI thread.\n * @throws RuntimeException if  {@link #init(ImageLoaderConfiguration)} method wasn't called before\n */\npublic void displayImage(String uri,ImageView imageView,DisplayImageOptions options,ImageLoadingListener listener){\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 276,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 166,
        "startColumnNumber" : 6,
        "endLineNumber" : 166,
        "endColumnNumber" : 23
      },
      "nodeContext" : "imageView == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.nostra13.universalimageloader.core.ImageView"
  }, {
    "nodeContext" : "imageView",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 178,
      "startColumnNumber" : 31,
      "endLineNumber" : 178,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 178,
        "startColumnNumber" : 3,
        "endLineNumber" : 178,
        "endColumnNumber" : 41
      },
      "nodeContext" : "cacheKeyForImageView.remove(imageView)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 178,
        "startColumnNumber" : 3,
        "endLineNumber" : 178,
        "endColumnNumber" : 42
      },
      "nodeContext" : "cacheKeyForImageView.remove(imageView);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 177,
        "startColumnNumber" : 40,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  cacheKeyForImageView.remove(imageView);\n  listener.onLoadingStarted();\n  if (options.isShowImageForEmptyUri()) {\n    imageView.setImageResource(options.getImageForEmptyUri());\n  }\n else {\n    imageView.setImageBitmap(null);\n  }\n  listener.onLoadingComplete(null);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 177,
        "startColumnNumber" : 2,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (uri == null || uri.length() == 0) {\n  cacheKeyForImageView.remove(imageView);\n  listener.onLoadingStarted();\n  if (options.isShowImageForEmptyUri()) {\n    imageView.setImageResource(options.getImageForEmptyUri());\n  }\n else {\n    imageView.setImageBitmap(null);\n  }\n  listener.onLoadingComplete(null);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2024,
        "startLineNumber" : 162,
        "startColumnNumber" : 119,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3399,
        "startLineNumber" : 141,
        "startColumnNumber" : 1,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageView when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageView {@link ImageView} which should display image\n * @param options {@linkplain DisplayImageOptions Display image options} for image displaying. If <b>null</b> - defaultdisplay image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) fromconfiguration} will be used.\n * @param listener {@linkplain ImageLoadingListener Listener} for image loading process. Listener fires events only ifthere is no image for loading in memory cache. If there is image for loading in memory cache then image is displayed at ImageView but listener does not fire any event. Listener fires events on UI thread.\n * @throws RuntimeException if  {@link #init(ImageLoaderConfiguration)} method wasn't called before\n */\npublic void displayImage(String uri,ImageView imageView,DisplayImageOptions options,ImageLoadingListener listener){\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 276,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 178,
        "startColumnNumber" : 3,
        "endLineNumber" : 178,
        "endColumnNumber" : 42
      },
      "nodeContext" : "cacheKeyForImageView.remove(imageView);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.nostra13.universalimageloader.core.ImageView"
  }, {
    "nodeContext" : "imageView",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 181,
      "startColumnNumber" : 4,
      "endLineNumber" : 181,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 61
      },
      "nodeContext" : "imageView.setImageResource(options.getImageForEmptyUri())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 62
      },
      "nodeContext" : "imageView.setImageResource(options.getImageForEmptyUri());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 180,
        "startColumnNumber" : 41,
        "endLineNumber" : 182,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  imageView.setImageResource(options.getImageForEmptyUri());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 180,
        "startColumnNumber" : 3,
        "endLineNumber" : 184,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (options.isShowImageForEmptyUri()) {\n  imageView.setImageResource(options.getImageForEmptyUri());\n}\n else {\n  imageView.setImageBitmap(null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 177,
        "startColumnNumber" : 40,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  cacheKeyForImageView.remove(imageView);\n  listener.onLoadingStarted();\n  if (options.isShowImageForEmptyUri()) {\n    imageView.setImageResource(options.getImageForEmptyUri());\n  }\n else {\n    imageView.setImageBitmap(null);\n  }\n  listener.onLoadingComplete(null);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 177,
        "startColumnNumber" : 2,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (uri == null || uri.length() == 0) {\n  cacheKeyForImageView.remove(imageView);\n  listener.onLoadingStarted();\n  if (options.isShowImageForEmptyUri()) {\n    imageView.setImageResource(options.getImageForEmptyUri());\n  }\n else {\n    imageView.setImageBitmap(null);\n  }\n  listener.onLoadingComplete(null);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2024,
        "startLineNumber" : 162,
        "startColumnNumber" : 119,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3399,
        "startLineNumber" : 141,
        "startColumnNumber" : 1,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageView when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageView {@link ImageView} which should display image\n * @param options {@linkplain DisplayImageOptions Display image options} for image displaying. If <b>null</b> - defaultdisplay image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) fromconfiguration} will be used.\n * @param listener {@linkplain ImageLoadingListener Listener} for image loading process. Listener fires events only ifthere is no image for loading in memory cache. If there is image for loading in memory cache then image is displayed at ImageView but listener does not fire any event. Listener fires events on UI thread.\n * @throws RuntimeException if  {@link #init(ImageLoaderConfiguration)} method wasn't called before\n */\npublic void displayImage(String uri,ImageView imageView,DisplayImageOptions options,ImageLoadingListener listener){\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 276,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 62
      },
      "nodeContext" : "imageView.setImageResource(options.getImageForEmptyUri());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.nostra13.universalimageloader.core.ImageView"
  }, {
    "nodeContext" : "imageView",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 183,
      "startColumnNumber" : 4,
      "endLineNumber" : 183,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 183,
        "startColumnNumber" : 4,
        "endLineNumber" : 183,
        "endColumnNumber" : 34
      },
      "nodeContext" : "imageView.setImageBitmap(null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 183,
        "startColumnNumber" : 4,
        "endLineNumber" : 183,
        "endColumnNumber" : 35
      },
      "nodeContext" : "imageView.setImageBitmap(null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 182,
        "startColumnNumber" : 10,
        "endLineNumber" : 184,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  imageView.setImageBitmap(null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 180,
        "startColumnNumber" : 3,
        "endLineNumber" : 184,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (options.isShowImageForEmptyUri()) {\n  imageView.setImageResource(options.getImageForEmptyUri());\n}\n else {\n  imageView.setImageBitmap(null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 177,
        "startColumnNumber" : 40,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  cacheKeyForImageView.remove(imageView);\n  listener.onLoadingStarted();\n  if (options.isShowImageForEmptyUri()) {\n    imageView.setImageResource(options.getImageForEmptyUri());\n  }\n else {\n    imageView.setImageBitmap(null);\n  }\n  listener.onLoadingComplete(null);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 177,
        "startColumnNumber" : 2,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (uri == null || uri.length() == 0) {\n  cacheKeyForImageView.remove(imageView);\n  listener.onLoadingStarted();\n  if (options.isShowImageForEmptyUri()) {\n    imageView.setImageResource(options.getImageForEmptyUri());\n  }\n else {\n    imageView.setImageBitmap(null);\n  }\n  listener.onLoadingComplete(null);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2024,
        "startLineNumber" : 162,
        "startColumnNumber" : 119,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3399,
        "startLineNumber" : 141,
        "startColumnNumber" : 1,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageView when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageView {@link ImageView} which should display image\n * @param options {@linkplain DisplayImageOptions Display image options} for image displaying. If <b>null</b> - defaultdisplay image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) fromconfiguration} will be used.\n * @param listener {@linkplain ImageLoadingListener Listener} for image loading process. Listener fires events only ifthere is no image for loading in memory cache. If there is image for loading in memory cache then image is displayed at ImageView but listener does not fire any event. Listener fires events on UI thread.\n * @throws RuntimeException if  {@link #init(ImageLoaderConfiguration)} method wasn't called before\n */\npublic void displayImage(String uri,ImageView imageView,DisplayImageOptions options,ImageLoadingListener listener){\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 276,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 183,
        "startColumnNumber" : 4,
        "endLineNumber" : 183,
        "endColumnNumber" : 35
      },
      "nodeContext" : "imageView.setImageBitmap(null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.nostra13.universalimageloader.core.ImageView"
  }, {
    "nodeContext" : "imageView",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 189,
      "startColumnNumber" : 45,
      "endLineNumber" : 189,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 189,
        "startColumnNumber" : 25,
        "endLineNumber" : 189,
        "endColumnNumber" : 55
      },
      "nodeContext" : "getImageSizeScaleTo(imageView)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 189,
        "startColumnNumber" : 12,
        "endLineNumber" : 189,
        "endColumnNumber" : 55
      },
      "nodeContext" : "targetSize=getImageSizeScaleTo(imageView)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 189,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 56
      },
      "nodeContext" : "ImageSize targetSize=getImageSizeScaleTo(imageView);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2024,
        "startLineNumber" : 162,
        "startColumnNumber" : 119,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3399,
        "startLineNumber" : 141,
        "startColumnNumber" : 1,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageView when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageView {@link ImageView} which should display image\n * @param options {@linkplain DisplayImageOptions Display image options} for image displaying. If <b>null</b> - defaultdisplay image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) fromconfiguration} will be used.\n * @param listener {@linkplain ImageLoadingListener Listener} for image loading process. Listener fires events only ifthere is no image for loading in memory cache. If there is image for loading in memory cache then image is displayed at ImageView but listener does not fire any event. Listener fires events on UI thread.\n * @throws RuntimeException if  {@link #init(ImageLoaderConfiguration)} method wasn't called before\n */\npublic void displayImage(String uri,ImageView imageView,DisplayImageOptions options,ImageLoadingListener listener){\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 276,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 189,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 56
      },
      "nodeContext" : "ImageSize targetSize=getImageSizeScaleTo(imageView);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.nostra13.universalimageloader.core.ImageView"
  }, {
    "nodeContext" : "imageView",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 191,
      "startColumnNumber" : 27,
      "endLineNumber" : 191,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 191,
        "startColumnNumber" : 2,
        "endLineNumber" : 191,
        "endColumnNumber" : 53
      },
      "nodeContext" : "cacheKeyForImageView.put(imageView,memoryCacheKey)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 191,
        "startColumnNumber" : 2,
        "endLineNumber" : 191,
        "endColumnNumber" : 54
      },
      "nodeContext" : "cacheKeyForImageView.put(imageView,memoryCacheKey);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2024,
        "startLineNumber" : 162,
        "startColumnNumber" : 119,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3399,
        "startLineNumber" : 141,
        "startColumnNumber" : 1,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageView when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageView {@link ImageView} which should display image\n * @param options {@linkplain DisplayImageOptions Display image options} for image displaying. If <b>null</b> - defaultdisplay image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) fromconfiguration} will be used.\n * @param listener {@linkplain ImageLoadingListener Listener} for image loading process. Listener fires events only ifthere is no image for loading in memory cache. If there is image for loading in memory cache then image is displayed at ImageView but listener does not fire any event. Listener fires events on UI thread.\n * @throws RuntimeException if  {@link #init(ImageLoaderConfiguration)} method wasn't called before\n */\npublic void displayImage(String uri,ImageView imageView,DisplayImageOptions options,ImageLoadingListener listener){\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 276,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 191,
        "startColumnNumber" : 2,
        "endLineNumber" : 191,
        "endColumnNumber" : 54
      },
      "nodeContext" : "cacheKeyForImageView.put(imageView,memoryCacheKey);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.nostra13.universalimageloader.core.ImageView"
  }, {
    "nodeContext" : "imageView",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 197,
      "startColumnNumber" : 64,
      "endLineNumber" : 197,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 197,
        "startColumnNumber" : 28,
        "endLineNumber" : 197,
        "endColumnNumber" : 74
      },
      "nodeContext" : "options.getDisplayer().display(bmp,imageView)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 197,
        "startColumnNumber" : 10,
        "endLineNumber" : 197,
        "endColumnNumber" : 74
      },
      "nodeContext" : "displayedBitmap=options.getDisplayer().display(bmp,imageView)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 197,
        "startColumnNumber" : 3,
        "endLineNumber" : 197,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 194,
        "startColumnNumber" : 40,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (configuration.loggingEnabled)   Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n  listener.onLoadingStarted();\n  Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n  imageView.setImageBitmap(displayedBitmap);\n  listener.onLoadingComplete(bmp);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (bmp != null && !bmp.isRecycled()) {\n  if (configuration.loggingEnabled)   Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n  listener.onLoadingStarted();\n  Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n  imageView.setImageBitmap(displayedBitmap);\n  listener.onLoadingComplete(bmp);\n}\n else {\n  listener.onLoadingStarted();\n  if (options.isShowStubImage()) {\n    imageView.setImageResource(options.getStubImage());\n  }\n else {\n    if (options.isResetViewBeforeLoading()) {\n      imageView.setImageBitmap(null);\n    }\n  }\n  checkExecutors();\n  ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n  LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n  boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n  if (isImageCachedOnDisc) {\n    cachedImageLoadingExecutor.submit(displayImageTask);\n  }\n else {\n    imageLoadingExecutor.submit(displayImageTask);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2024,
        "startLineNumber" : 162,
        "startColumnNumber" : 119,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3399,
        "startLineNumber" : 141,
        "startColumnNumber" : 1,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageView when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageView {@link ImageView} which should display image\n * @param options {@linkplain DisplayImageOptions Display image options} for image displaying. If <b>null</b> - defaultdisplay image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) fromconfiguration} will be used.\n * @param listener {@linkplain ImageLoadingListener Listener} for image loading process. Listener fires events only ifthere is no image for loading in memory cache. If there is image for loading in memory cache then image is displayed at ImageView but listener does not fire any event. Listener fires events on UI thread.\n * @throws RuntimeException if  {@link #init(ImageLoaderConfiguration)} method wasn't called before\n */\npublic void displayImage(String uri,ImageView imageView,DisplayImageOptions options,ImageLoadingListener listener){\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 276,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 197,
        "startColumnNumber" : 3,
        "endLineNumber" : 197,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.nostra13.universalimageloader.core.ImageView"
  }, {
    "nodeContext" : "imageView",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 198,
      "startColumnNumber" : 3,
      "endLineNumber" : 198,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 198,
        "startColumnNumber" : 3,
        "endLineNumber" : 198,
        "endColumnNumber" : 44
      },
      "nodeContext" : "imageView.setImageBitmap(displayedBitmap)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 198,
        "startColumnNumber" : 3,
        "endLineNumber" : 198,
        "endColumnNumber" : 45
      },
      "nodeContext" : "imageView.setImageBitmap(displayedBitmap);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 194,
        "startColumnNumber" : 40,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (configuration.loggingEnabled)   Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n  listener.onLoadingStarted();\n  Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n  imageView.setImageBitmap(displayedBitmap);\n  listener.onLoadingComplete(bmp);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (bmp != null && !bmp.isRecycled()) {\n  if (configuration.loggingEnabled)   Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n  listener.onLoadingStarted();\n  Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n  imageView.setImageBitmap(displayedBitmap);\n  listener.onLoadingComplete(bmp);\n}\n else {\n  listener.onLoadingStarted();\n  if (options.isShowStubImage()) {\n    imageView.setImageResource(options.getStubImage());\n  }\n else {\n    if (options.isResetViewBeforeLoading()) {\n      imageView.setImageBitmap(null);\n    }\n  }\n  checkExecutors();\n  ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n  LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n  boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n  if (isImageCachedOnDisc) {\n    cachedImageLoadingExecutor.submit(displayImageTask);\n  }\n else {\n    imageLoadingExecutor.submit(displayImageTask);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2024,
        "startLineNumber" : 162,
        "startColumnNumber" : 119,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3399,
        "startLineNumber" : 141,
        "startColumnNumber" : 1,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageView when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageView {@link ImageView} which should display image\n * @param options {@linkplain DisplayImageOptions Display image options} for image displaying. If <b>null</b> - defaultdisplay image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) fromconfiguration} will be used.\n * @param listener {@linkplain ImageLoadingListener Listener} for image loading process. Listener fires events only ifthere is no image for loading in memory cache. If there is image for loading in memory cache then image is displayed at ImageView but listener does not fire any event. Listener fires events on UI thread.\n * @throws RuntimeException if  {@link #init(ImageLoaderConfiguration)} method wasn't called before\n */\npublic void displayImage(String uri,ImageView imageView,DisplayImageOptions options,ImageLoadingListener listener){\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 276,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 198,
        "startColumnNumber" : 3,
        "endLineNumber" : 198,
        "endColumnNumber" : 45
      },
      "nodeContext" : "imageView.setImageBitmap(displayedBitmap);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.nostra13.universalimageloader.core.ImageView"
  }, {
    "nodeContext" : "imageView",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 204,
      "startColumnNumber" : 4,
      "endLineNumber" : 204,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 204,
        "startColumnNumber" : 4,
        "endLineNumber" : 204,
        "endColumnNumber" : 54
      },
      "nodeContext" : "imageView.setImageResource(options.getStubImage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 204,
        "startColumnNumber" : 4,
        "endLineNumber" : 204,
        "endColumnNumber" : 55
      },
      "nodeContext" : "imageView.setImageResource(options.getStubImage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 203,
        "startColumnNumber" : 34,
        "endLineNumber" : 205,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  imageView.setImageResource(options.getStubImage());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 203,
        "startColumnNumber" : 3,
        "endLineNumber" : 209,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (options.isShowStubImage()) {\n  imageView.setImageResource(options.getStubImage());\n}\n else {\n  if (options.isResetViewBeforeLoading()) {\n    imageView.setImageBitmap(null);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 740,
        "startLineNumber" : 200,
        "startColumnNumber" : 9,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  listener.onLoadingStarted();\n  if (options.isShowStubImage()) {\n    imageView.setImageResource(options.getStubImage());\n  }\n else {\n    if (options.isResetViewBeforeLoading()) {\n      imageView.setImageBitmap(null);\n    }\n  }\n  checkExecutors();\n  ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n  LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n  boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n  if (isImageCachedOnDisc) {\n    cachedImageLoadingExecutor.submit(displayImageTask);\n  }\n else {\n    imageLoadingExecutor.submit(displayImageTask);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (bmp != null && !bmp.isRecycled()) {\n  if (configuration.loggingEnabled)   Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n  listener.onLoadingStarted();\n  Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n  imageView.setImageBitmap(displayedBitmap);\n  listener.onLoadingComplete(bmp);\n}\n else {\n  listener.onLoadingStarted();\n  if (options.isShowStubImage()) {\n    imageView.setImageResource(options.getStubImage());\n  }\n else {\n    if (options.isResetViewBeforeLoading()) {\n      imageView.setImageBitmap(null);\n    }\n  }\n  checkExecutors();\n  ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n  LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n  boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n  if (isImageCachedOnDisc) {\n    cachedImageLoadingExecutor.submit(displayImageTask);\n  }\n else {\n    imageLoadingExecutor.submit(displayImageTask);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2024,
        "startLineNumber" : 162,
        "startColumnNumber" : 119,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3399,
        "startLineNumber" : 141,
        "startColumnNumber" : 1,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageView when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageView {@link ImageView} which should display image\n * @param options {@linkplain DisplayImageOptions Display image options} for image displaying. If <b>null</b> - defaultdisplay image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) fromconfiguration} will be used.\n * @param listener {@linkplain ImageLoadingListener Listener} for image loading process. Listener fires events only ifthere is no image for loading in memory cache. If there is image for loading in memory cache then image is displayed at ImageView but listener does not fire any event. Listener fires events on UI thread.\n * @throws RuntimeException if  {@link #init(ImageLoaderConfiguration)} method wasn't called before\n */\npublic void displayImage(String uri,ImageView imageView,DisplayImageOptions options,ImageLoadingListener listener){\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 276,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 204,
        "startColumnNumber" : 4,
        "endLineNumber" : 204,
        "endColumnNumber" : 55
      },
      "nodeContext" : "imageView.setImageResource(options.getStubImage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.nostra13.universalimageloader.core.ImageView"
  }, {
    "nodeContext" : "imageView",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 207,
      "startColumnNumber" : 5,
      "endLineNumber" : 207,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 207,
        "startColumnNumber" : 5,
        "endLineNumber" : 207,
        "endColumnNumber" : 35
      },
      "nodeContext" : "imageView.setImageBitmap(null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 207,
        "startColumnNumber" : 5,
        "endLineNumber" : 207,
        "endColumnNumber" : 36
      },
      "nodeContext" : "imageView.setImageBitmap(null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 206,
        "startColumnNumber" : 44,
        "endLineNumber" : 208,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  imageView.setImageBitmap(null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 206,
        "startColumnNumber" : 4,
        "endLineNumber" : 208,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (options.isResetViewBeforeLoading()) {\n  imageView.setImageBitmap(null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 205,
        "startColumnNumber" : 10,
        "endLineNumber" : 209,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (options.isResetViewBeforeLoading()) {\n    imageView.setImageBitmap(null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 203,
        "startColumnNumber" : 3,
        "endLineNumber" : 209,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (options.isShowStubImage()) {\n  imageView.setImageResource(options.getStubImage());\n}\n else {\n  if (options.isResetViewBeforeLoading()) {\n    imageView.setImageBitmap(null);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 740,
        "startLineNumber" : 200,
        "startColumnNumber" : 9,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  listener.onLoadingStarted();\n  if (options.isShowStubImage()) {\n    imageView.setImageResource(options.getStubImage());\n  }\n else {\n    if (options.isResetViewBeforeLoading()) {\n      imageView.setImageBitmap(null);\n    }\n  }\n  checkExecutors();\n  ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n  LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n  boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n  if (isImageCachedOnDisc) {\n    cachedImageLoadingExecutor.submit(displayImageTask);\n  }\n else {\n    imageLoadingExecutor.submit(displayImageTask);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (bmp != null && !bmp.isRecycled()) {\n  if (configuration.loggingEnabled)   Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n  listener.onLoadingStarted();\n  Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n  imageView.setImageBitmap(displayedBitmap);\n  listener.onLoadingComplete(bmp);\n}\n else {\n  listener.onLoadingStarted();\n  if (options.isShowStubImage()) {\n    imageView.setImageResource(options.getStubImage());\n  }\n else {\n    if (options.isResetViewBeforeLoading()) {\n      imageView.setImageBitmap(null);\n    }\n  }\n  checkExecutors();\n  ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n  LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n  boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n  if (isImageCachedOnDisc) {\n    cachedImageLoadingExecutor.submit(displayImageTask);\n  }\n else {\n    imageLoadingExecutor.submit(displayImageTask);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2024,
        "startLineNumber" : 162,
        "startColumnNumber" : 119,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3399,
        "startLineNumber" : 141,
        "startColumnNumber" : 1,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageView when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageView {@link ImageView} which should display image\n * @param options {@linkplain DisplayImageOptions Display image options} for image displaying. If <b>null</b> - defaultdisplay image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) fromconfiguration} will be used.\n * @param listener {@linkplain ImageLoadingListener Listener} for image loading process. Listener fires events only ifthere is no image for loading in memory cache. If there is image for loading in memory cache then image is displayed at ImageView but listener does not fire any event. Listener fires events on UI thread.\n * @throws RuntimeException if  {@link #init(ImageLoaderConfiguration)} method wasn't called before\n */\npublic void displayImage(String uri,ImageView imageView,DisplayImageOptions options,ImageLoadingListener listener){\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 276,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 207,
        "startColumnNumber" : 5,
        "endLineNumber" : 207,
        "endColumnNumber" : 36
      },
      "nodeContext" : "imageView.setImageBitmap(null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.nostra13.universalimageloader.core.ImageView"
  }, {
    "nodeContext" : "imageView",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 212,
      "startColumnNumber" : 65,
      "endLineNumber" : 212,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 212,
        "startColumnNumber" : 39,
        "endLineNumber" : 212,
        "endColumnNumber" : 106
      },
      "nodeContext" : "new ImageLoadingInfo(uri,imageView,targetSize,options,listener)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 212,
        "startColumnNumber" : 20,
        "endLineNumber" : 212,
        "endColumnNumber" : 106
      },
      "nodeContext" : "imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 212,
        "startColumnNumber" : 3,
        "endLineNumber" : 212,
        "endColumnNumber" : 107
      },
      "nodeContext" : "ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 740,
        "startLineNumber" : 200,
        "startColumnNumber" : 9,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  listener.onLoadingStarted();\n  if (options.isShowStubImage()) {\n    imageView.setImageResource(options.getStubImage());\n  }\n else {\n    if (options.isResetViewBeforeLoading()) {\n      imageView.setImageBitmap(null);\n    }\n  }\n  checkExecutors();\n  ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n  LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n  boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n  if (isImageCachedOnDisc) {\n    cachedImageLoadingExecutor.submit(displayImageTask);\n  }\n else {\n    imageLoadingExecutor.submit(displayImageTask);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (bmp != null && !bmp.isRecycled()) {\n  if (configuration.loggingEnabled)   Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n  listener.onLoadingStarted();\n  Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n  imageView.setImageBitmap(displayedBitmap);\n  listener.onLoadingComplete(bmp);\n}\n else {\n  listener.onLoadingStarted();\n  if (options.isShowStubImage()) {\n    imageView.setImageResource(options.getStubImage());\n  }\n else {\n    if (options.isResetViewBeforeLoading()) {\n      imageView.setImageBitmap(null);\n    }\n  }\n  checkExecutors();\n  ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n  LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n  boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n  if (isImageCachedOnDisc) {\n    cachedImageLoadingExecutor.submit(displayImageTask);\n  }\n else {\n    imageLoadingExecutor.submit(displayImageTask);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2024,
        "startLineNumber" : 162,
        "startColumnNumber" : 119,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3399,
        "startLineNumber" : 141,
        "startColumnNumber" : 1,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageView when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageView {@link ImageView} which should display image\n * @param options {@linkplain DisplayImageOptions Display image options} for image displaying. If <b>null</b> - defaultdisplay image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) fromconfiguration} will be used.\n * @param listener {@linkplain ImageLoadingListener Listener} for image loading process. Listener fires events only ifthere is no image for loading in memory cache. If there is image for loading in memory cache then image is displayed at ImageView but listener does not fire any event. Listener fires events on UI thread.\n * @throws RuntimeException if  {@link #init(ImageLoaderConfiguration)} method wasn't called before\n */\npublic void displayImage(String uri,ImageView imageView,DisplayImageOptions options,ImageLoadingListener listener){\n  if (configuration == null) {\n    throw new RuntimeException(ERROR_NOT_INIT);\n  }\n  if (imageView == null) {\n    Log.w(TAG,ERROR_WRONG_ARGUMENTS);\n    return;\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (uri == null || uri.length() == 0) {\n    cacheKeyForImageView.remove(imageView);\n    listener.onLoadingStarted();\n    if (options.isShowImageForEmptyUri()) {\n      imageView.setImageResource(options.getImageForEmptyUri());\n    }\n else {\n      imageView.setImageBitmap(null);\n    }\n    listener.onLoadingComplete(null);\n    return;\n  }\n  ImageSize targetSize=getImageSizeScaleTo(imageView);\n  String memoryCacheKey=MemoryCacheKeyUtil.generateKey(uri,targetSize);\n  cacheKeyForImageView.put(imageView,memoryCacheKey);\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.loggingEnabled)     Log.i(TAG,String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey));\n    listener.onLoadingStarted();\n    Bitmap displayedBitmap=options.getDisplayer().display(bmp,imageView);\n    imageView.setImageBitmap(displayedBitmap);\n    listener.onLoadingComplete(bmp);\n  }\n else {\n    listener.onLoadingStarted();\n    if (options.isShowStubImage()) {\n      imageView.setImageResource(options.getStubImage());\n    }\n else {\n      if (options.isResetViewBeforeLoading()) {\n        imageView.setImageBitmap(null);\n      }\n    }\n    checkExecutors();\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n    LoadAndDisplayImageTask displayImageTask=new LoadAndDisplayImageTask(configuration,imageLoadingInfo,new Handler());\n    boolean isImageCachedOnDisc=configuration.discCache.get(uri).exists();\n    if (isImageCachedOnDisc) {\n      cachedImageLoadingExecutor.submit(displayImageTask);\n    }\n else {\n      imageLoadingExecutor.submit(displayImageTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 276,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 212,
        "startColumnNumber" : 3,
        "endLineNumber" : 212,
        "endColumnNumber" : 107
      },
      "nodeContext" : "ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageView,targetSize,options,listener);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.nostra13.universalimageloader.core.ImageView"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 166,
    "startColumnNumber" : 6,
    "endLineNumber" : 166,
    "endColumnNumber" : 15
  }, {
    "charLength" : 9,
    "startLineNumber" : 178,
    "startColumnNumber" : 31,
    "endLineNumber" : 178,
    "endColumnNumber" : 40
  }, {
    "charLength" : 9,
    "startLineNumber" : 181,
    "startColumnNumber" : 4,
    "endLineNumber" : 181,
    "endColumnNumber" : 13
  }, {
    "charLength" : 9,
    "startLineNumber" : 183,
    "startColumnNumber" : 4,
    "endLineNumber" : 183,
    "endColumnNumber" : 13
  }, {
    "charLength" : 9,
    "startLineNumber" : 189,
    "startColumnNumber" : 45,
    "endLineNumber" : 189,
    "endColumnNumber" : 54
  }, {
    "charLength" : 9,
    "startLineNumber" : 191,
    "startColumnNumber" : 27,
    "endLineNumber" : 191,
    "endColumnNumber" : 36
  }, {
    "charLength" : 9,
    "startLineNumber" : 197,
    "startColumnNumber" : 64,
    "endLineNumber" : 197,
    "endColumnNumber" : 73
  }, {
    "charLength" : 9,
    "startLineNumber" : 198,
    "startColumnNumber" : 3,
    "endLineNumber" : 198,
    "endColumnNumber" : 12
  }, {
    "charLength" : 9,
    "startLineNumber" : 204,
    "startColumnNumber" : 4,
    "endLineNumber" : 204,
    "endColumnNumber" : 13
  }, {
    "charLength" : 9,
    "startLineNumber" : 207,
    "startColumnNumber" : 5,
    "endLineNumber" : 207,
    "endColumnNumber" : 14
  }, {
    "charLength" : 9,
    "startLineNumber" : 212,
    "startColumnNumber" : 65,
    "endLineNumber" : 212,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 3
  } ]
}