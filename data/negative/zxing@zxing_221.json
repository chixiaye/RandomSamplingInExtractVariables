{
  "id" : 221,
  "expression" : "new AI01393xDecoder(information)",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/oned/rss/expanded/decoders/AbstractExpandedDecoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new AI01393xDecoder(information)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 74,
      "startColumnNumber" : 22,
      "endLineNumber" : 74,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 74,
        "startColumnNumber" : 15,
        "endLineNumber" : 74,
        "endColumnNumber" : 55
      },
      "nodeContext" : "return new AI01393xDecoder(information);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (fiveBitEncodationMethod) {\ncase 12:  return new AI01392xDecoder(information);\ncase 13:return new AI01393xDecoder(information);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1519,
        "startLineNumber" : 56,
        "startColumnNumber" : 75,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (information.get(1)) {\n    return new AI01AndOtherAIs(information);\n  }\n  if (!information.get(2)) {\n    return new AnyAIDecoder(information);\n  }\n  int fourBitEncodationMethod=GeneralAppIdDecoder.extractNumericValueFromBitArray(information,1,4);\nswitch (fourBitEncodationMethod) {\ncase 4:    return new AI013103decoder(information);\ncase 5:  return new AI01320xDecoder(information);\n}\nint fiveBitEncodationMethod=GeneralAppIdDecoder.extractNumericValueFromBitArray(information,1,5);\nswitch (fiveBitEncodationMethod) {\ncase 12:return new AI01392xDecoder(information);\ncase 13:return new AI01393xDecoder(information);\n}\nint sevenBitEncodationMethod=GeneralAppIdDecoder.extractNumericValueFromBitArray(information,1,7);\nswitch (sevenBitEncodationMethod) {\ncase 56:return new AI013x0x1xDecoder(information,\"310\",\"11\");\ncase 57:return new AI013x0x1xDecoder(information,\"320\",\"11\");\ncase 58:return new AI013x0x1xDecoder(information,\"310\",\"13\");\ncase 59:return new AI013x0x1xDecoder(information,\"320\",\"13\");\ncase 60:return new AI013x0x1xDecoder(information,\"310\",\"15\");\ncase 61:return new AI013x0x1xDecoder(information,\"320\",\"15\");\ncase 62:return new AI013x0x1xDecoder(information,\"310\",\"17\");\ncase 63:return new AI013x0x1xDecoder(information,\"320\",\"17\");\n}\nthrow new IllegalStateException(\"unknown decoder: \" + information);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 167,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1592,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static AbstractExpandedDecoder createDecoder(BitArray information){\n  if (information.get(1)) {\n    return new AI01AndOtherAIs(information);\n  }\n  if (!information.get(2)) {\n    return new AnyAIDecoder(information);\n  }\n  int fourBitEncodationMethod=GeneralAppIdDecoder.extractNumericValueFromBitArray(information,1,4);\nswitch (fourBitEncodationMethod) {\ncase 4:    return new AI013103decoder(information);\ncase 5:  return new AI01320xDecoder(information);\n}\nint fiveBitEncodationMethod=GeneralAppIdDecoder.extractNumericValueFromBitArray(information,1,5);\nswitch (fiveBitEncodationMethod) {\ncase 12:return new AI01392xDecoder(information);\ncase 13:return new AI01393xDecoder(information);\n}\nint sevenBitEncodationMethod=GeneralAppIdDecoder.extractNumericValueFromBitArray(information,1,7);\nswitch (sevenBitEncodationMethod) {\ncase 56:return new AI013x0x1xDecoder(information,\"310\",\"11\");\ncase 57:return new AI013x0x1xDecoder(information,\"320\",\"11\");\ncase 58:return new AI013x0x1xDecoder(information,\"310\",\"13\");\ncase 59:return new AI013x0x1xDecoder(information,\"320\",\"13\");\ncase 60:return new AI013x0x1xDecoder(information,\"310\",\"15\");\ncase 61:return new AI013x0x1xDecoder(information,\"320\",\"15\");\ncase 62:return new AI013x0x1xDecoder(information,\"310\",\"17\");\ncase 63:return new AI013x0x1xDecoder(information,\"320\",\"17\");\n}\nthrow new IllegalStateException(\"unknown decoder: \" + information);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 177,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 74,
        "startColumnNumber" : 15,
        "endLineNumber" : 74,
        "endColumnNumber" : 55
      },
      "nodeContext" : "return new AI01393xDecoder(information);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "com.google.zxing.oned.rss.expanded.decoders.AI01393xDecoder"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 74,
    "startColumnNumber" : 22,
    "endLineNumber" : 74,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}